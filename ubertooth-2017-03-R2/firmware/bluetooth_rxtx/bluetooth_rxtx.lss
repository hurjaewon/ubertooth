
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066d0  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000df4  10000020  0000a6d0  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000029e0  10000e18  0000b4c4  00010e18  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010e14  2**0
                  CONTENTS, READONLY
  5 .comment      0000001f  00000000  00000000  00010e3d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ff79  00000000  00000000  00010e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ca6  00000000  00000000  00020dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c58  00000000  00000000  00024a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000978  00000000  00000000  0002b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009f0  00000000  00000000  0002c050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000409b  00000000  00000000  0002ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000033f0  00000000  00000000  00030adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001670  00000000  00000000  00033ecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 5d 85 00 00 b1 85 00 00 b1 85 00 00     .?..]...........
    4010:	b1 85 00 00 b1 85 00 00 b1 85 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 b1 85 00 00     ................
    4030:	b1 85 00 00 00 00 00 00 b1 85 00 00 b1 85 00 00     ................
    4040:	b1 85 00 00 4d 50 00 00 b1 85 00 00 b1 85 00 00     ....MP..........
    4050:	b1 85 00 00 b1 85 00 00 b1 85 00 00 b1 85 00 00     ................
    4060:	b1 85 00 00 b1 85 00 00 b1 85 00 00 b1 85 00 00     ................
    4070:	b1 85 00 00 b1 85 00 00 b1 85 00 00 b1 85 00 00     ................
    4080:	b1 85 00 00 b1 85 00 00 b1 85 00 00 b1 85 00 00     ................
    4090:	b1 85 00 00 8d 51 00 00 b1 85 00 00 b1 85 00 00     .....Q..........
    40a0:	59 85 00 00 b1 85 00 00 c1 51 00 00 b1 85 00 00     Y........Q......
    40b0:	b1 85 00 00 b1 85 00 00 b1 85 00 00 b1 85 00 00     ................
    40c0:	b1 85 00 00 b1 85 00 00 b1 85 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	b508      	push	{r3, lr}
    40ce:	f640 6014 	movw	r0, #3604	; 0xe14
    40d2:	4b07      	ldr	r3, [pc, #28]	; (40f0 <deregister_tm_clones+0x24>)
    40d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    40d8:	1a1b      	subs	r3, r3, r0
    40da:	2b06      	cmp	r3, #6
    40dc:	d800      	bhi.n	40e0 <deregister_tm_clones+0x14>
    40de:	bd08      	pop	{r3, pc}
    40e0:	f240 0300 	movw	r3, #0
    40e4:	f2c0 0300 	movt	r3, #0
    40e8:	2b00      	cmp	r3, #0
    40ea:	d0f8      	beq.n	40de <deregister_tm_clones+0x12>
    40ec:	4798      	blx	r3
    40ee:	e7f6      	b.n	40de <deregister_tm_clones+0x12>
    40f0:	10000e17 	.word	0x10000e17

000040f4 <register_tm_clones>:
    40f4:	b508      	push	{r3, lr}
    40f6:	f640 6014 	movw	r0, #3604	; 0xe14
    40fa:	f640 6314 	movw	r3, #3604	; 0xe14
    40fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4102:	f2c1 0000 	movt	r0, #4096	; 0x1000
    4106:	1a1b      	subs	r3, r3, r0
    4108:	109b      	asrs	r3, r3, #2
    410a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    410e:	1059      	asrs	r1, r3, #1
    4110:	d100      	bne.n	4114 <register_tm_clones+0x20>
    4112:	bd08      	pop	{r3, pc}
    4114:	f240 0200 	movw	r2, #0
    4118:	f2c0 0200 	movt	r2, #0
    411c:	2a00      	cmp	r2, #0
    411e:	d0f8      	beq.n	4112 <register_tm_clones+0x1e>
    4120:	4790      	blx	r2
    4122:	e7f6      	b.n	4112 <register_tm_clones+0x1e>

00004124 <__do_global_dtors_aux>:
    4124:	b510      	push	{r4, lr}
    4126:	f640 6418 	movw	r4, #3608	; 0xe18
    412a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    412e:	7823      	ldrb	r3, [r4, #0]
    4130:	b973      	cbnz	r3, 4150 <__do_global_dtors_aux+0x2c>
    4132:	f7ff ffcb 	bl	40cc <deregister_tm_clones>
    4136:	f240 0300 	movw	r3, #0
    413a:	f2c0 0300 	movt	r3, #0
    413e:	b12b      	cbz	r3, 414c <__do_global_dtors_aux+0x28>
    4140:	f24a 60ac 	movw	r0, #42668	; 0xa6ac
    4144:	f2c0 0000 	movt	r0, #0
    4148:	f3af 8000 	nop.w
    414c:	2301      	movs	r3, #1
    414e:	7023      	strb	r3, [r4, #0]
    4150:	bd10      	pop	{r4, pc}
    4152:	bf00      	nop

00004154 <frame_dummy>:
    4154:	b508      	push	{r3, lr}
    4156:	f240 0300 	movw	r3, #0
    415a:	f2c0 0300 	movt	r3, #0
    415e:	b14b      	cbz	r3, 4174 <frame_dummy+0x20>
    4160:	f24a 60ac 	movw	r0, #42668	; 0xa6ac
    4164:	f640 611c 	movw	r1, #3612	; 0xe1c
    4168:	f2c0 0000 	movt	r0, #0
    416c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4170:	f3af 8000 	nop.w
    4174:	f640 6014 	movw	r0, #3604	; 0xe14
    4178:	f2c1 0000 	movt	r0, #4096	; 0x1000
    417c:	6803      	ldr	r3, [r0, #0]
    417e:	b12b      	cbz	r3, 418c <frame_dummy+0x38>
    4180:	f240 0300 	movw	r3, #0
    4184:	f2c0 0300 	movt	r3, #0
    4188:	b103      	cbz	r3, 418c <frame_dummy+0x38>
    418a:	4798      	blx	r3
    418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4190:	e7b0      	b.n	40f4 <register_tm_clones>
    4192:	bf00      	nop

00004194 <atexit>:
    4194:	4601      	mov	r1, r0
    4196:	2000      	movs	r0, #0
    4198:	4602      	mov	r2, r0
    419a:	4603      	mov	r3, r0
    419c:	f000 b892 	b.w	42c4 <__register_exitproc>

000041a0 <__libc_fini_array>:
    41a0:	b538      	push	{r3, r4, r5, lr}
    41a2:	f24a 64d0 	movw	r4, #42704	; 0xa6d0
    41a6:	f24a 65cc 	movw	r5, #42700	; 0xa6cc
    41aa:	f2c0 0500 	movt	r5, #0
    41ae:	f2c0 0400 	movt	r4, #0
    41b2:	1b64      	subs	r4, r4, r5
    41b4:	10a4      	asrs	r4, r4, #2
    41b6:	bf18      	it	ne
    41b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    41bc:	d005      	beq.n	41ca <__libc_fini_array+0x2a>
    41be:	3c01      	subs	r4, #1
    41c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    41c4:	4798      	blx	r3
    41c6:	2c00      	cmp	r4, #0
    41c8:	d1f9      	bne.n	41be <__libc_fini_array+0x1e>
    41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41ce:	f006 ba77 	b.w	a6c0 <_fini>
    41d2:	bf00      	nop

000041d4 <__libc_init_array>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	f24a 66b8 	movw	r6, #42680	; 0xa6b8
    41da:	f24a 65b8 	movw	r5, #42680	; 0xa6b8
    41de:	f2c0 0500 	movt	r5, #0
    41e2:	f2c0 0600 	movt	r6, #0
    41e6:	1b76      	subs	r6, r6, r5
    41e8:	10b6      	asrs	r6, r6, #2
    41ea:	bf1c      	itt	ne
    41ec:	3d04      	subne	r5, #4
    41ee:	2400      	movne	r4, #0
    41f0:	d005      	beq.n	41fe <__libc_init_array+0x2a>
    41f2:	3401      	adds	r4, #1
    41f4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    41f8:	4798      	blx	r3
    41fa:	42a6      	cmp	r6, r4
    41fc:	d1f9      	bne.n	41f2 <__libc_init_array+0x1e>
    41fe:	f24a 66c0 	movw	r6, #42688	; 0xa6c0
    4202:	f24a 65b8 	movw	r5, #42680	; 0xa6b8
    4206:	f2c0 0500 	movt	r5, #0
    420a:	f2c0 0600 	movt	r6, #0
    420e:	1b76      	subs	r6, r6, r5
    4210:	f006 fa4c 	bl	a6ac <_init>
    4214:	10b6      	asrs	r6, r6, #2
    4216:	bf1c      	itt	ne
    4218:	3d04      	subne	r5, #4
    421a:	2400      	movne	r4, #0
    421c:	d006      	beq.n	422c <__libc_init_array+0x58>
    421e:	3401      	adds	r4, #1
    4220:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4224:	4798      	blx	r3
    4226:	42a6      	cmp	r6, r4
    4228:	d1f9      	bne.n	421e <__libc_init_array+0x4a>
    422a:	bd70      	pop	{r4, r5, r6, pc}
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	bf00      	nop

00004230 <memset>:
    4230:	b4f0      	push	{r4, r5, r6, r7}
    4232:	0784      	lsls	r4, r0, #30
    4234:	d043      	beq.n	42be <memset+0x8e>
    4236:	1e54      	subs	r4, r2, #1
    4238:	2a00      	cmp	r2, #0
    423a:	d03e      	beq.n	42ba <memset+0x8a>
    423c:	b2cd      	uxtb	r5, r1
    423e:	4603      	mov	r3, r0
    4240:	e003      	b.n	424a <memset+0x1a>
    4242:	1e62      	subs	r2, r4, #1
    4244:	2c00      	cmp	r4, #0
    4246:	d038      	beq.n	42ba <memset+0x8a>
    4248:	4614      	mov	r4, r2
    424a:	f803 5b01 	strb.w	r5, [r3], #1
    424e:	079a      	lsls	r2, r3, #30
    4250:	d1f7      	bne.n	4242 <memset+0x12>
    4252:	2c03      	cmp	r4, #3
    4254:	d92a      	bls.n	42ac <memset+0x7c>
    4256:	b2cd      	uxtb	r5, r1
    4258:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    425c:	2c0f      	cmp	r4, #15
    425e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4262:	d915      	bls.n	4290 <memset+0x60>
    4264:	f1a4 0710 	sub.w	r7, r4, #16
    4268:	093f      	lsrs	r7, r7, #4
    426a:	f103 0610 	add.w	r6, r3, #16
    426e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    4272:	461a      	mov	r2, r3
    4274:	6015      	str	r5, [r2, #0]
    4276:	6055      	str	r5, [r2, #4]
    4278:	6095      	str	r5, [r2, #8]
    427a:	60d5      	str	r5, [r2, #12]
    427c:	3210      	adds	r2, #16
    427e:	42b2      	cmp	r2, r6
    4280:	d1f8      	bne.n	4274 <memset+0x44>
    4282:	f004 040f 	and.w	r4, r4, #15
    4286:	3701      	adds	r7, #1
    4288:	2c03      	cmp	r4, #3
    428a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    428e:	d90d      	bls.n	42ac <memset+0x7c>
    4290:	461e      	mov	r6, r3
    4292:	4622      	mov	r2, r4
    4294:	3a04      	subs	r2, #4
    4296:	2a03      	cmp	r2, #3
    4298:	f846 5b04 	str.w	r5, [r6], #4
    429c:	d8fa      	bhi.n	4294 <memset+0x64>
    429e:	1f22      	subs	r2, r4, #4
    42a0:	f022 0203 	bic.w	r2, r2, #3
    42a4:	3204      	adds	r2, #4
    42a6:	4413      	add	r3, r2
    42a8:	f004 0403 	and.w	r4, r4, #3
    42ac:	b12c      	cbz	r4, 42ba <memset+0x8a>
    42ae:	b2c9      	uxtb	r1, r1
    42b0:	441c      	add	r4, r3
    42b2:	f803 1b01 	strb.w	r1, [r3], #1
    42b6:	42a3      	cmp	r3, r4
    42b8:	d1fb      	bne.n	42b2 <memset+0x82>
    42ba:	bcf0      	pop	{r4, r5, r6, r7}
    42bc:	4770      	bx	lr
    42be:	4614      	mov	r4, r2
    42c0:	4603      	mov	r3, r0
    42c2:	e7c6      	b.n	4252 <memset+0x22>

000042c4 <__register_exitproc>:
    42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c6:	f649 5410 	movw	r4, #40208	; 0x9d10
    42ca:	f2c0 0400 	movt	r4, #0
    42ce:	6826      	ldr	r6, [r4, #0]
    42d0:	b085      	sub	sp, #20
    42d2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    42d6:	4607      	mov	r7, r0
    42d8:	2c00      	cmp	r4, #0
    42da:	d043      	beq.n	4364 <__register_exitproc+0xa0>
    42dc:	6865      	ldr	r5, [r4, #4]
    42de:	2d1f      	cmp	r5, #31
    42e0:	dd21      	ble.n	4326 <__register_exitproc+0x62>
    42e2:	f249 3459 	movw	r4, #37721	; 0x9359
    42e6:	f2c0 0400 	movt	r4, #0
    42ea:	b91c      	cbnz	r4, 42f4 <__register_exitproc+0x30>
    42ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f0:	b005      	add	sp, #20
    42f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42f8:	9103      	str	r1, [sp, #12]
    42fa:	9202      	str	r2, [sp, #8]
    42fc:	9301      	str	r3, [sp, #4]
    42fe:	f005 f82b 	bl	9358 <malloc>
    4302:	9903      	ldr	r1, [sp, #12]
    4304:	4604      	mov	r4, r0
    4306:	9a02      	ldr	r2, [sp, #8]
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	2800      	cmp	r0, #0
    430c:	d0ee      	beq.n	42ec <__register_exitproc+0x28>
    430e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    4312:	2000      	movs	r0, #0
    4314:	6025      	str	r5, [r4, #0]
    4316:	6060      	str	r0, [r4, #4]
    4318:	4605      	mov	r5, r0
    431a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    431e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    4322:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    4326:	b93f      	cbnz	r7, 4338 <__register_exitproc+0x74>
    4328:	1c6b      	adds	r3, r5, #1
    432a:	2000      	movs	r0, #0
    432c:	3502      	adds	r5, #2
    432e:	6063      	str	r3, [r4, #4]
    4330:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    4334:	b005      	add	sp, #20
    4336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4338:	2601      	movs	r6, #1
    433a:	40ae      	lsls	r6, r5
    433c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    4340:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    4344:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    4348:	2f02      	cmp	r7, #2
    434a:	ea42 0206 	orr.w	r2, r2, r6
    434e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    4352:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4356:	bf02      	ittt	eq
    4358:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
    435c:	431e      	orreq	r6, r3
    435e:	f8c4 618c 	streq.w	r6, [r4, #396]	; 0x18c
    4362:	e7e1      	b.n	4328 <__register_exitproc+0x64>
    4364:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    4368:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    436c:	e7b6      	b.n	42dc <__register_exitproc+0x18>
    436e:	bf00      	nop

00004370 <register_fini>:
    4370:	f240 0300 	movw	r3, #0
    4374:	f2c0 0300 	movt	r3, #0
    4378:	b12b      	cbz	r3, 4386 <register_fini+0x16>
    437a:	f244 10a1 	movw	r0, #16801	; 0x41a1
    437e:	f2c0 0000 	movt	r0, #0
    4382:	f7ff bf07 	b.w	4194 <atexit>
    4386:	4770      	bx	lr

00004388 <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    4388:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    438a:	2300      	movs	r3, #0
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;
    438c:	461a      	mov	r2, r3

	for(size_t i=0; i<8; i++)
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    438e:	fa40 f103 	asr.w	r1, r0, r3
    4392:	f1c3 0407 	rsb	r4, r3, #7
    4396:	f001 0101 	and.w	r1, r1, #1
    439a:	40a1      	lsls	r1, r4

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    439c:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    439e:	430a      	orrs	r2, r1

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43a0:	2b08      	cmp	r3, #8
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    43a2:	b2d2      	uxtb	r2, r2

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43a4:	d1f3      	bne.n	438e <reverse8+0x6>
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
	}

	return reversed;
}
    43a6:	4610      	mov	r0, r2
    43a8:	bd10      	pop	{r4, pc}
    43aa:	0000      	movs	r0, r0

000043ac <cc2400_rx>:
	target.syncword = 0;
}

/* start un-buffered rx */
static void cc2400_rx()
{
    43ac:	b538      	push	{r3, r4, r5, lr}
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    43ae:	4b25      	ldr	r3, [pc, #148]	; (4444 <cc2400_rx+0x98>)
    43b0:	4c25      	ldr	r4, [pc, #148]	; (4448 <cc2400_rx+0x9c>)
    43b2:	781a      	ldrb	r2, [r3, #0]
    43b4:	b112      	cbz	r2, 43bc <cc2400_rx+0x10>
    43b6:	781a      	ldrb	r2, [r3, #0]
    43b8:	2a01      	cmp	r2, #1
    43ba:	d128      	bne.n	440e <cc2400_rx+0x62>
		if (modulation == MOD_BT_BASIC_RATE) {
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	b133      	cbz	r3, 43ce <cc2400_rx+0x22>
			mdmctrl = 0x0029; // 160 kHz frequency deviation
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    43c0:	4b20      	ldr	r3, [pc, #128]	; (4444 <cc2400_rx+0x98>)
    43c2:	781d      	ldrb	r5, [r3, #0]
}

/* start un-buffered rx */
static void cc2400_rx()
{
	u16 mdmctrl = 0;
    43c4:	2d01      	cmp	r5, #1
    43c6:	bf0c      	ite	eq
    43c8:	2540      	moveq	r5, #64	; 0x40
    43ca:	2500      	movne	r5, #0
    43cc:	e000      	b.n	43d0 <cc2400_rx+0x24>

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
		if (modulation == MOD_BT_BASIC_RATE) {
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    43ce:	2529      	movs	r5, #41	; 0x29
		} else if (modulation == MOD_BT_LOW_ENERGY) {
			mdmctrl = 0x0040; // 250 kHz frequency deviation
		}
		cc2400_set(MANAND,  0x7fff);
    43d0:	200d      	movs	r0, #13
    43d2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    43d6:	f004 f9ee 	bl	87b6 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    43da:	2012      	movs	r0, #18
    43dc:	f642 3122 	movw	r1, #11042	; 0x2b22
    43e0:	f004 f9e9 	bl	87b6 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG 16 MAX MIN PAIRS
    43e4:	2014      	movs	r0, #20
    43e6:	f241 314b 	movw	r1, #4939	; 0x134b
    43ea:	f004 f9e4 	bl	87b6 <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    43ee:	2020      	movs	r0, #32
    43f0:	f240 1101 	movw	r1, #257	; 0x101
    43f4:	f004 f9df 	bl	87b6 <cc2400_set>
		//      |  | |   |  +--------> CRC off
		//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
		//      |  | +---------------> 2 preamble bytes of 01010101
		//      |  +-----------------> not packet mode
			//      +--------------------> un-buffered mode
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    43f8:	8821      	ldrh	r1, [r4, #0]
    43fa:	2002      	movs	r0, #2
    43fc:	b289      	uxth	r1, r1
    43fe:	3901      	subs	r1, #1
    4400:	b289      	uxth	r1, r1
    4402:	f004 f9d8 	bl	87b6 <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    4406:	2003      	movs	r0, #3
    4408:	4629      	mov	r1, r5
    440a:	f004 f9d4 	bl	87b6 <cc2400_set>
	}

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    440e:	8820      	ldrh	r0, [r4, #0]
    4410:	b280      	uxth	r0, r0
    4412:	f003 fa4d 	bl	78b0 <cs_threshold_calc_and_set>

	clkn_start();
    4416:	f003 fae3 	bl	79e0 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    441a:	f004 fa9d 	bl	8958 <cc2400_status>
    441e:	0642      	lsls	r2, r0, #25
    4420:	d5fb      	bpl.n	441a <cc2400_rx+0x6e>
	cc2400_strobe(SFSON);
    4422:	2061      	movs	r0, #97	; 0x61
    4424:	f004 fa9f 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4428:	f004 fa96 	bl	8958 <cc2400_status>
    442c:	0743      	lsls	r3, r0, #29
    442e:	d5fb      	bpl.n	4428 <cc2400_rx+0x7c>
	cc2400_strobe(SRX);
    4430:	2062      	movs	r0, #98	; 0x62
    4432:	f004 fa98 	bl	8966 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    4436:	4b05      	ldr	r3, [pc, #20]	; (444c <cc2400_rx+0xa0>)
    4438:	2280      	movs	r2, #128	; 0x80
    443a:	601a      	str	r2, [r3, #0]
	HGM_SET;
    443c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4440:	601a      	str	r2, [r3, #0]
    4442:	bd38      	pop	{r3, r4, r5, pc}
    4444:	10000e34 	.word	0x10000e34
    4448:	1000044c 	.word	0x1000044c
    444c:	2009c058 	.word	0x2009c058

00004450 <cc2400_rx_sync>:
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4450:	b570      	push	{r4, r5, r6, lr}
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4452:	4b28      	ldr	r3, [pc, #160]	; (44f4 <cc2400_rx_sync+0xa4>)
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4454:	4604      	mov	r4, r0
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4456:	781a      	ldrb	r2, [r3, #0]
    4458:	b132      	cbz	r2, 4468 <cc2400_rx_sync+0x18>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	2b01      	cmp	r3, #1
    445e:	d147      	bne.n	44f0 <cc2400_rx_sync+0xa0>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    4460:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    4462:	f240 5661 	movw	r6, #1377	; 0x561
    4466:	e002      	b.n	446e <cc2400_rx_sync+0x1e>
static void cc2400_rx_sync(u32 sync)
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    4468:	2529      	movs	r5, #41	; 0x29
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    446a:	f240 4661 	movw	r6, #1121	; 0x461
	} else {
		/* oops */
		return;
	}

	cc2400_set(MANAND,  0x7fff);
    446e:	200d      	movs	r0, #13
    4470:	f647 71ff 	movw	r1, #32767	; 0x7fff
    4474:	f004 f99f 	bl	87b6 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    4478:	2012      	movs	r0, #18
    447a:	f642 3122 	movw	r1, #11042	; 0x2b22
    447e:	f004 f99a 	bl	87b6 <cc2400_set>

	cc2400_set(MDMTST0, 0x104b); //JWHUR AFC settling = 2 maxmin pairs
    4482:	2014      	movs	r0, #20
    4484:	f241 014b 	movw	r1, #4171	; 0x104b
    4488:	f004 f995 	bl	87b6 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    448c:	2020      	movs	r0, #32
    448e:	4631      	mov	r1, r6
    4490:	f004 f991 	bl	87b6 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    4494:	b2a1      	uxth	r1, r4
    4496:	202c      	movs	r0, #44	; 0x2c
    4498:	f004 f98d 	bl	87b6 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    449c:	0c21      	lsrs	r1, r4, #16

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    449e:	4c16      	ldr	r4, [pc, #88]	; (44f8 <cc2400_rx_sync+0xa8>)
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    44a0:	202d      	movs	r0, #45	; 0x2d
    44a2:	f004 f988 	bl	87b6 <cc2400_set>

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    44a6:	8821      	ldrh	r1, [r4, #0]
    44a8:	2002      	movs	r0, #2
    44aa:	b289      	uxth	r1, r1
    44ac:	3901      	subs	r1, #1
    44ae:	b289      	uxth	r1, r1
    44b0:	f004 f981 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    44b4:	2003      	movs	r0, #3
    44b6:	4629      	mov	r1, r5
    44b8:	f004 f97d 	bl	87b6 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    44bc:	8820      	ldrh	r0, [r4, #0]
    44be:	b280      	uxth	r0, r0
    44c0:	f003 f9f6 	bl	78b0 <cs_threshold_calc_and_set>

	clkn_start();
    44c4:	f003 fa8c 	bl	79e0 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    44c8:	f004 fa46 	bl	8958 <cc2400_status>
    44cc:	0640      	lsls	r0, r0, #25
    44ce:	d5fb      	bpl.n	44c8 <cc2400_rx_sync+0x78>
	cc2400_strobe(SFSON);
    44d0:	2061      	movs	r0, #97	; 0x61
    44d2:	f004 fa48 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    44d6:	f004 fa3f 	bl	8958 <cc2400_status>
    44da:	0741      	lsls	r1, r0, #29
    44dc:	d5fb      	bpl.n	44d6 <cc2400_rx_sync+0x86>
	cc2400_strobe(SRX);
    44de:	2062      	movs	r0, #98	; 0x62
    44e0:	f004 fa41 	bl	8966 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    44e4:	4b05      	ldr	r3, [pc, #20]	; (44fc <cc2400_rx_sync+0xac>)
    44e6:	2280      	movs	r2, #128	; 0x80
    44e8:	601a      	str	r2, [r3, #0]
	HGM_SET;
    44ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    44ee:	601a      	str	r2, [r3, #0]
    44f0:	bd70      	pop	{r4, r5, r6, pc}
    44f2:	bf00      	nop
    44f4:	10000e34 	.word	0x10000e34
    44f8:	1000044c 	.word	0x1000044c
    44fc:	2009c058 	.word	0x2009c058

00004500 <enqueue>:

/* Unpacked symbol buffers (two rxbufs) */
char unpacked[DMA_SIZE*8*2];

static int enqueue(uint8_t type, uint8_t* buf)
{
    4500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4502:	4606      	mov	r6, r0
    4504:	460f      	mov	r7, r1
	usb_pkt_rx* f = usb_enqueue();
    4506:	f003 f8d9 	bl	76bc <usb_enqueue>
    450a:	4d1e      	ldr	r5, [pc, #120]	; (4584 <enqueue+0x84>)

	/* fail if queue is full */
	if (f == NULL) {
    450c:	4604      	mov	r4, r0
    450e:	b920      	cbnz	r0, 451a <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    4510:	786b      	ldrb	r3, [r5, #1]
    4512:	f043 0304 	orr.w	r3, r3, #4
    4516:	706b      	strb	r3, [r5, #1]
		return 0;
    4518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	f->pkt_type = type;
	if(type == SPECAN) {
    451a:	2e04      	cmp	r6, #4
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    451c:	7006      	strb	r6, [r0, #0]
	if(type == SPECAN) {
    451e:	d10e      	bne.n	453e <enqueue+0x3e>
		f->clkn_high = (clkn >> 20) & 0xff;
    4520:	4b19      	ldr	r3, [pc, #100]	; (4588 <enqueue+0x88>)
		f->clk100ns = CLK100NS;
    4522:	f640 4135 	movw	r1, #3125	; 0xc35
		return 0;
	}

	f->pkt_type = type;
	if(type == SPECAN) {
		f->clkn_high = (clkn >> 20) & 0xff;
    4526:	681a      	ldr	r2, [r3, #0]
    4528:	0d12      	lsrs	r2, r2, #20
    452a:	70c2      	strb	r2, [r0, #3]
		f->clk100ns = CLK100NS;
    452c:	4a17      	ldr	r2, [pc, #92]	; (458c <enqueue+0x8c>)
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	6812      	ldr	r2, [r2, #0]
    4532:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4536:	fb01 2303 	mla	r3, r1, r3, r2
    453a:	6043      	str	r3, [r0, #4]
    453c:	e015      	b.n	456a <enqueue+0x6a>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    453e:	78ab      	ldrb	r3, [r5, #2]
    4540:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    4542:	686b      	ldr	r3, [r5, #4]
    4544:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    4546:	892b      	ldrh	r3, [r5, #8]
    4548:	b29b      	uxth	r3, r3
    454a:	3b62      	subs	r3, #98	; 0x62
    454c:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    454e:	4b10      	ldr	r3, [pc, #64]	; (4590 <enqueue+0x90>)
    4550:	781b      	ldrb	r3, [r3, #0]
    4552:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    4554:	4b0f      	ldr	r3, [pc, #60]	; (4594 <enqueue+0x94>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    455a:	8928      	ldrh	r0, [r5, #8]
    455c:	b280      	uxth	r0, r0
    455e:	f003 f993 	bl	7888 <rssi_get_avg>
		f->rssi_count = rssi_count;
    4562:	4b0d      	ldr	r3, [pc, #52]	; (4598 <enqueue+0x98>)
		f->clkn_high = idle_buf_clkn_high;
		f->clk100ns = idle_buf_clk100ns;
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
		f->rssi_min = rssi_min;
		f->rssi_max = rssi_max;
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4564:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    4566:	781b      	ldrb	r3, [r3, #0]
    4568:	72e3      	strb	r3, [r4, #11]
	}

	memcpy(f->data, buf, DMA_SIZE);
    456a:	f104 000e 	add.w	r0, r4, #14
    456e:	4639      	mov	r1, r7
    4570:	2232      	movs	r2, #50	; 0x32
    4572:	f005 f9df 	bl	9934 <memcpy>

	f->status = status;
    4576:	786b      	ldrb	r3, [r5, #1]
	status = 0;

	return 1;
    4578:	2001      	movs	r0, #1
		f->rssi_count = rssi_count;
	}

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    457a:	7063      	strb	r3, [r4, #1]
	status = 0;
    457c:	2300      	movs	r3, #0
    457e:	706b      	strb	r3, [r5, #1]

	return 1;
}
    4580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4582:	bf00      	nop
    4584:	10000e34 	.word	0x10000e34
    4588:	1000105c 	.word	0x1000105c
    458c:	40004008 	.word	0x40004008
    4590:	10001042 	.word	0x10001042
    4594:	10001040 	.word	0x10001040
    4598:	100014de 	.word	0x100014de

0000459c <le_set_access_address>:
	// reset GIO
	cc2400_set(IOCFG, gio_save);
}

/* set LE access address */
static void le_set_access_address(u32 aa) {
    459c:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    459e:	4c04      	ldr	r4, [pc, #16]	; (45b0 <le_set_access_address+0x14>)
    45a0:	6060      	str	r0, [r4, #4]
	aa_rev = rbit(aa);
    45a2:	f004 f813 	bl	85cc <rbit>
	le.syncl = aa_rev & 0xffff;
    45a6:	8160      	strh	r0, [r4, #10]
	le.synch = aa_rev >> 16;
    45a8:	0c00      	lsrs	r0, r0, #16
    45aa:	8120      	strh	r0, [r4, #8]
    45ac:	bd10      	pop	{r4, pc}
    45ae:	bf00      	nop
    45b0:	1000044c 	.word	0x1000044c

000045b4 <cc2400_idle>:
		}
	}
}

static void cc2400_idle()
{
    45b4:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    45b6:	2064      	movs	r0, #100	; 0x64
    45b8:	f004 f9d5 	bl	8966 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    45bc:	f004 f9cc 	bl	8958 <cc2400_status>
    45c0:	f000 0004 	and.w	r0, r0, #4
    45c4:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    45c8:	2800      	cmp	r0, #0
    45ca:	d1f7      	bne.n	45bc <cc2400_idle+0x8>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    45cc:	4b20      	ldr	r3, [pc, #128]	; (4650 <cc2400_idle+0x9c>)
    45ce:	2280      	movs	r2, #128	; 0x80
    45d0:	601a      	str	r2, [r3, #0]
	HGM_CLR;
#endif

	RXLED_CLR;
    45d2:	2110      	movs	r1, #16
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
	HGM_CLR;
    45d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    45d8:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    45da:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    45de:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    45e2:	2202      	movs	r2, #2
    45e4:	f843 2c20 	str.w	r2, [r3, #-32]

	clkn_stop();
    45e8:	f003 f9d2 	bl	7990 <clkn_stop>
	dio_ssp_stop();
    45ec:	f003 fafc 	bl	7be8 <dio_ssp_stop>
	cs_reset();
    45f0:	f003 f9bc 	bl	796c <cs_reset>
	rssi_reset();
    45f4:	f003 f8e4 	bl	77c0 <rssi_reset>

	/* hopping stuff */
	hop_mode = HOP_NONE;
    45f8:	4b16      	ldr	r3, [pc, #88]	; (4654 <cc2400_idle+0xa0>)
	do_hop = 0;
	channel = 2441;
    45fa:	4a17      	ldr	r2, [pc, #92]	; (4658 <cc2400_idle+0xa4>)
    45fc:	f640 1189 	movw	r1, #2441	; 0x989
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    4600:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    4602:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    4604:	8011      	strh	r1, [r2, #0]
	hop_direct_channel = 0;
	hop_timeout = 158;
    4606:	219e      	movs	r1, #158	; 0x9e

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
    4608:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    460a:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	requested_channel = 0;
	le_adv_channel = 2402;
    460e:	f640 1162 	movw	r1, #2402	; 0x962
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
	hop_timeout = 158;
	requested_channel = 0;
    4612:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    4614:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a


	/* bulk USB stuff */
	idle_buf_clkn_high = 0;
    4618:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    461a:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    461c:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    461e:	741c      	strb	r4, [r3, #16]
	status = 0;
    4620:	705c      	strb	r4, [r3, #1]

	/* operation mode */
	mode = MODE_IDLE;
    4622:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    4624:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    4626:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    4628:	751c      	strb	r4, [r3, #20]

	modulation = MOD_BT_BASIC_RATE;
    462a:	701c      	strb	r4, [r3, #0]

	/* specan stuff */
	low_freq = 2400;
    462c:	f44f 6316 	mov.w	r3, #2400	; 0x960
    4630:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	high_freq = 2483;
    4634:	3353      	adds	r3, #83	; 0x53
    4636:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
	rssi_threshold = -30;

	target.address = 0;
    463a:	4908      	ldr	r1, [pc, #32]	; (465c <cc2400_idle+0xa8>)
	modulation = MOD_BT_BASIC_RATE;

	/* specan stuff */
	low_freq = 2400;
	high_freq = 2483;
	rssi_threshold = -30;
    463c:	23e2      	movs	r3, #226	; 0xe2
    463e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

	target.address = 0;
    4642:	2200      	movs	r2, #0
    4644:	2300      	movs	r3, #0
    4646:	e9c1 2300 	strd	r2, r3, [r1]
	target.syncword = 0;
    464a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    464e:	bd10      	pop	{r4, pc}
    4650:	2009c05c 	.word	0x2009c05c
    4654:	10000e34 	.word	0x10000e34
    4658:	1000044c 	.word	0x1000044c
    465c:	10001560 	.word	0x10001560

00004660 <cb_follow_le>:
	cs_trigger_disable();
}

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    4660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    4664:	4c39      	ldr	r4, [pc, #228]	; (474c <cb_follow_le+0xec>)
    4666:	8820      	ldrh	r0, [r4, #0]
    4668:	4626      	mov	r6, r4
    466a:	b280      	uxth	r0, r0
    466c:	3862      	subs	r0, #98	; 0x62
    466e:	b2c0      	uxtb	r0, r0
    4670:	f002 ff1c 	bl	74ac <btle_channel_index>
    4674:	4936      	ldr	r1, [pc, #216]	; (4750 <cb_follow_le+0xf0>)

	u32 access_address = 0;
    4676:	2200      	movs	r2, #0

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    4678:	5c0d      	ldrb	r5, [r1, r0]

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    467a:	4613      	mov	r3, r2
    467c:	468c      	mov	ip, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    467e:	4f35      	ldr	r7, [pc, #212]	; (4754 <cb_follow_le+0xf4>)
    4680:	5dd9      	ldrb	r1, [r3, r7]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4682:	3301      	adds	r3, #1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4684:	07c9      	lsls	r1, r1, #31
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4686:	2b1f      	cmp	r3, #31
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4688:	ea41 0252 	orr.w	r2, r1, r2, lsr #1
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    468c:	d1f7      	bne.n	467e <cb_follow_le+0x1e>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    468e:	6871      	ldr	r1, [r6, #4]
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4690:	5cf8      	ldrb	r0, [r7, r3]
    4692:	07c0      	lsls	r0, r0, #31
    4694:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
		if (access_address == le.access_address) {
    4698:	428a      	cmp	r2, r1
    469a:	d14f      	bne.n	473c <cb_follow_le+0xdc>
    469c:	2200      	movs	r2, #0
    469e:	eb07 0803 	add.w	r8, r7, r3
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46a2:	2000      	movs	r0, #0
    46a4:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    46a8:	4601      	mov	r1, r0
    46aa:	eb08 0401 	add.w	r4, r8, r1
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
    46ae:	2a03      	cmp	r2, #3
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
    46b0:	f814 4c1f 	ldrb.w	r4, [r4, #-31]
					if (j >= 4) { // unwhiten data bytes
    46b4:	dd0c      	ble.n	46d0 <cb_follow_le+0x70>
						bit ^= whitening[idx];
    46b6:	eb0c 0e05 	add.w	lr, ip, r5
    46ba:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    46be:	3501      	adds	r5, #1
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
    46c0:	ea84 040e 	eor.w	r4, r4, lr
						idx = (idx + 1) % sizeof(whitening);
    46c4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    46c8:	fbb5 f9fe 	udiv	r9, r5, lr
    46cc:	fb0e 5519 	mls	r5, lr, r9, r5
					}
					byte |= bit << k;
    46d0:	408c      	lsls	r4, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46d2:	3101      	adds	r1, #1
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    46d4:	4320      	orrs	r0, r4
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46d6:	2908      	cmp	r1, #8
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    46d8:	b2c0      	uxtb	r0, r0
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46da:	d1e6      	bne.n	46aa <cb_follow_le+0x4a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    46dc:	4c1e      	ldr	r4, [pc, #120]	; (4758 <cb_follow_le+0xf8>)
    46de:	6821      	ldr	r1, [r4, #0]
    46e0:	5488      	strb	r0, [r1, r2]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    46e2:	3201      	adds	r2, #1
    46e4:	2a2e      	cmp	r2, #46	; 0x2e
    46e6:	d1da      	bne.n	469e <cb_follow_le+0x3e>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    46e8:	6973      	ldr	r3, [r6, #20]
    46ea:	b95b      	cbnz	r3, 4704 <cb_follow_le+0xa4>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    46ec:	6821      	ldr	r1, [r4, #0]
    46ee:	2001      	movs	r0, #1
    46f0:	f7ff ff06 	bl	4500 <enqueue>
			RXLED_SET;
    46f4:	4b19      	ldr	r3, [pc, #100]	; (475c <cb_follow_le+0xfc>)
    46f6:	2210      	movs	r2, #16
    46f8:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    46fa:	4b19      	ldr	r3, [pc, #100]	; (4760 <cb_follow_le+0x100>)
    46fc:	6820      	ldr	r0, [r4, #0]
    46fe:	699b      	ldr	r3, [r3, #24]
    4700:	4798      	blx	r3

			break;
    4702:	e01f      	b.n	4744 <cb_follow_le+0xe4>
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    4704:	6823      	ldr	r3, [r4, #0]
    4706:	795d      	ldrb	r5, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4708:	4b10      	ldr	r3, [pc, #64]	; (474c <cb_follow_le+0xec>)
    470a:	6821      	ldr	r1, [r4, #0]
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    470c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4710:	1caa      	adds	r2, r5, #2
    4712:	6918      	ldr	r0, [r3, #16]
    4714:	3104      	adds	r1, #4
    4716:	f002 ff49 	bl	75ac <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    471a:	6822      	ldr	r2, [r4, #0]
    471c:	f105 0308 	add.w	r3, r5, #8
    4720:	5cd1      	ldrb	r1, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    4722:	6822      	ldr	r2, [r4, #0]
    4724:	1deb      	adds	r3, r5, #7
    4726:	5cd3      	ldrb	r3, [r2, r3]
							 |  idle_rxbuf[4+len+0];
    4728:	6822      	ldr	r2, [r4, #0]
    472a:	3506      	adds	r5, #6
    472c:	5d52      	ldrb	r2, [r2, r5]
			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
							 | (idle_rxbuf[4+len+1] << 8)
    472e:	021b      	lsls	r3, r3, #8
    4730:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
							 |  idle_rxbuf[4+len+0];
    4734:	4313      	orrs	r3, r2
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    4736:	4298      	cmp	r0, r3
    4738:	d104      	bne.n	4744 <cb_follow_le+0xe4>
    473a:	e7d7      	b.n	46ec <cb_follow_le+0x8c>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    473c:	3301      	adds	r3, #1
    473e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    4742:	d1a5      	bne.n	4690 <cb_follow_le+0x30>
			break;
		}
	}

	return 1;
}
    4744:	2001      	movs	r0, #1
    4746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    474a:	bf00      	nop
    474c:	1000044c 	.word	0x1000044c
    4750:	00009d14 	.word	0x00009d14
    4754:	100011bc 	.word	0x100011bc
    4758:	100011b8 	.word	0x100011b8
    475c:	2009c038 	.word	0x2009c038
    4760:	10000e34 	.word	0x10000e34

00004764 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4764:	b538      	push	{r3, r4, r5, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4766:	4b58      	ldr	r3, [pc, #352]	; (48c8 <connection_follow_cb+0x164>)
}

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4768:	4605      	mov	r5, r0
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    476a:	7e1a      	ldrb	r2, [r3, #24]
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	// u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
	u8 header = packet[HEADER_IDX];
    476c:	7901      	ldrb	r1, [r0, #4]
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    476e:	2a02      	cmp	r2, #2
    4770:	461c      	mov	r4, r3
    4772:	d113      	bne.n	479c <connection_follow_cb+0x38>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    4774:	2203      	movs	r2, #3
    4776:	761a      	strb	r2, [r3, #24]
		le.conn_epoch = clkn;
    4778:	4a54      	ldr	r2, [pc, #336]	; (48cc <connection_follow_cb+0x168>)
    477a:	6812      	ldr	r2, [r2, #0]
    477c:	61da      	str	r2, [r3, #28]
		le.interval_timer = le.conn_interval - 1;
    477e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    4780:	3a01      	subs	r2, #1
    4782:	b292      	uxth	r2, r2
    4784:	841a      	strh	r2, [r3, #32]
		le.conn_count = 0;
    4786:	2200      	movs	r2, #0
    4788:	849a      	strh	r2, [r3, #36]	; 0x24
		le.update_pending = 0;
    478a:	62da      	str	r2, [r3, #44]	; 0x2c

		// hue hue hue
		if (jam_mode != JAM_NONE)
    478c:	4b50      	ldr	r3, [pc, #320]	; (48d0 <connection_follow_cb+0x16c>)
    478e:	7cda      	ldrb	r2, [r3, #19]
    4790:	2a00      	cmp	r2, #0
    4792:	f000 8098 	beq.w	48c6 <connection_follow_cb+0x162>
			le_jam_count = JAM_COUNT_DEFAULT;
    4796:	2228      	movs	r2, #40	; 0x28
    4798:	61da      	str	r2, [r3, #28]
    479a:	bd38      	pop	{r3, r4, r5, pc}

	} else if (le.link_state == LINK_CONNECTED) {
    479c:	2a03      	cmp	r2, #3
    479e:	d13b      	bne.n	4818 <connection_follow_cb+0xb4>
		u8 llid =  header & 0x03;

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		// hue hue hue
		if (jam_mode != JAM_NONE)
			le_jam_count = JAM_COUNT_DEFAULT;

	} else if (le.link_state == LINK_CONNECTED) {
		u8 llid =  header & 0x03;
    47a2:	f001 0103 	and.w	r1, r1, #3

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47a6:	b1a3      	cbz	r3, 47d2 <connection_follow_cb+0x6e>
    47a8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    47aa:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    47ac:	b29b      	uxth	r3, r3
    47ae:	429a      	cmp	r2, r3
    47b0:	d10f      	bne.n	47d2 <connection_follow_cb+0x6e>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    47b2:	4b46      	ldr	r3, [pc, #280]	; (48cc <connection_follow_cb+0x168>)
    47b4:	681b      	ldr	r3, [r3, #0]
    47b6:	61e3      	str	r3, [r4, #28]
			le.conn_interval = le.interval_update;
    47b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    47ba:	8463      	strh	r3, [r4, #34]	; 0x22
			le.interval_timer = le.interval_update - 1;
    47bc:	3b01      	subs	r3, #1
    47be:	b29b      	uxth	r3, r3
    47c0:	8423      	strh	r3, [r4, #32]
			le.win_size = le.win_size_update;
    47c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    47c6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			le.win_offset = le.win_offset_update;
    47ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    47cc:	8523      	strh	r3, [r4, #40]	; 0x28
			le.update_pending = 0;
    47ce:	2300      	movs	r3, #0
    47d0:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		if (llid == 0x03 && data[0] == 0x00) {
    47d2:	2903      	cmp	r1, #3
    47d4:	d177      	bne.n	48c6 <connection_follow_cb+0x162>
    47d6:	79ab      	ldrb	r3, [r5, #6]
    47d8:	2b00      	cmp	r3, #0
    47da:	d174      	bne.n	48c6 <connection_follow_cb+0x162>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    47dc:	79eb      	ldrb	r3, [r5, #7]
    47de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    47e2:	7a6a      	ldrb	r2, [r5, #9]
    47e4:	7a2b      	ldrb	r3, [r5, #8]
    47e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47ea:	86e3      	strh	r3, [r4, #54]	; 0x36
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    47ec:	7aea      	ldrb	r2, [r5, #11]
    47ee:	7aab      	ldrb	r3, [r5, #10]
    47f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47f4:	8663      	strh	r3, [r4, #50]	; 0x32
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    47f6:	7c6a      	ldrb	r2, [r5, #17]
    47f8:	7c2b      	ldrb	r3, [r5, #16]
    47fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    47fe:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4800:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    4802:	b292      	uxth	r2, r2
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4804:	8623      	strh	r3, [r4, #48]	; 0x30
			if (le.update_instant - le.conn_count < 32767)
    4806:	1a9b      	subs	r3, r3, r2
    4808:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    480c:	4293      	cmp	r3, r2
    480e:	dc5a      	bgt.n	48c6 <connection_follow_cb+0x162>
				le.update_pending = 1;
    4810:	4b2d      	ldr	r3, [pc, #180]	; (48c8 <connection_follow_cb+0x164>)
    4812:	2201      	movs	r2, #1
    4814:	62da      	str	r2, [r3, #44]	; 0x2c
    4816:	bd38      	pop	{r3, r4, r5, pc}
		}

	} else if (le.link_state == LINK_LISTENING) {
    4818:	2a01      	cmp	r2, #1
    481a:	d154      	bne.n	48c6 <connection_follow_cb+0x162>
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
    481c:	f001 010f 	and.w	r1, r1, #15
    4820:	2905      	cmp	r1, #5
    4822:	d150      	bne.n	48c6 <connection_follow_cb+0x162>
			uint16_t conn_interval;

			// ignore packets with incorrect length
			if (*data_len != 34)
    4824:	7943      	ldrb	r3, [r0, #5]
    4826:	2b22      	cmp	r3, #34	; 0x22
    4828:	d14d      	bne.n	48c6 <connection_follow_cb+0x162>
				return;

			// conn interval must be [7.5 ms, 4.0s] in units of 1.25 ms
			conn_interval = (packet[29] << 8) | packet[28];
    482a:	7f03      	ldrb	r3, [r0, #28]
    482c:	7f42      	ldrb	r2, [r0, #29]
    482e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    4832:	3a06      	subs	r2, #6
    4834:	b292      	uxth	r2, r2
    4836:	f640 437a 	movw	r3, #3194	; 0xc7a
    483a:	429a      	cmp	r2, r3
    483c:	d843      	bhi.n	48c6 <connection_follow_cb+0x162>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    483e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4840:	b92b      	cbnz	r3, 484e <connection_follow_cb+0xea>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4842:	2302      	movs	r3, #2
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4844:	2000      	movs	r0, #0
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4846:	7623      	strb	r3, [r4, #24]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4848:	6160      	str	r0, [r4, #20]

			for (i = 0; i < 4; ++i)
    484a:	4603      	mov	r3, r0
    484c:	e011      	b.n	4872 <connection_follow_cb+0x10e>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    484e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4852:	1da9      	adds	r1, r5, #6
    4854:	2206      	movs	r2, #6
    4856:	f005 f839 	bl	98cc <memcmp>
			if (conn_interval < 6 || conn_interval > 3200)
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    485a:	2800      	cmp	r0, #0
    485c:	d0f1      	beq.n	4842 <connection_follow_cb+0xde>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    485e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4862:	f105 010c 	add.w	r1, r5, #12
    4866:	2206      	movs	r2, #6
    4868:	f005 f830 	bl	98cc <memcmp>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    486c:	2800      	cmp	r0, #0
    486e:	d0e8      	beq.n	4842 <connection_follow_cb+0xde>
    4870:	bd38      	pop	{r3, r4, r5, pc}
    4872:	18ea      	adds	r2, r5, r3

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
    4874:	7c91      	ldrb	r1, [r2, #18]
    4876:	00da      	lsls	r2, r3, #3
    4878:	fa01 f202 	lsl.w	r2, r1, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    487c:	3301      	adds	r3, #1
    487e:	2b04      	cmp	r3, #4
				aa |= packet[18+i] << (i*8);
    4880:	ea40 0002 	orr.w	r0, r0, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    4884:	d1f5      	bne.n	4872 <connection_follow_cb+0x10e>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    4886:	f7ff fe89 	bl	459c <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
    488a:	7de8      	ldrb	r0, [r5, #23]
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    488c:	7e2b      	ldrb	r3, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    488e:	0200      	lsls	r0, r0, #8
    4890:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
						|  packet[CRC_INIT+0];
    4894:	7dab      	ldrb	r3, [r5, #22]
    4896:	4318      	orrs	r0, r3
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    4898:	60e0      	str	r0, [r4, #12]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    489a:	f003 fe97 	bl	85cc <rbit>

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    489e:	7e6b      	ldrb	r3, [r5, #25]

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    48a0:	6120      	str	r0, [r4, #16]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    48a2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    48a6:	7eab      	ldrb	r3, [r5, #26]
    48a8:	8523      	strh	r3, [r4, #40]	; 0x28

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    48aa:	7f6a      	ldrb	r2, [r5, #29]
    48ac:	7f2b      	ldrb	r3, [r5, #28]
    48ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    48b2:	8463      	strh	r3, [r4, #34]	; 0x22
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48b4:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
			le.channel_idx = le.channel_increment;

			// Hop to the initial channel immediately
			do_hop = 1;
    48b8:	2201      	movs	r2, #1
#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48ba:	f003 031f 	and.w	r3, r3, #31
    48be:	76a3      	strb	r3, [r4, #26]
			le.channel_idx = le.channel_increment;
    48c0:	7663      	strb	r3, [r4, #25]

			// Hop to the initial channel immediately
			do_hop = 1;
    48c2:	4b03      	ldr	r3, [pc, #12]	; (48d0 <connection_follow_cb+0x16c>)
    48c4:	72da      	strb	r2, [r3, #11]
    48c6:	bd38      	pop	{r3, r4, r5, pc}
    48c8:	1000044c 	.word	0x1000044c
    48cc:	1000105c 	.word	0x1000105c
    48d0:	10000e34 	.word	0x10000e34

000048d4 <vendor_request_handler>:

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    48d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    48d8:	4c8b      	ldr	r4, [pc, #556]	; (4b08 <vendor_request_handler+0x234>)

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    48da:	461d      	mov	r5, r3
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    48dc:	681b      	ldr	r3, [r3, #0]

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    48de:	460f      	mov	r7, r1
    48e0:	4616      	mov	r6, r2
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    48e2:	6223      	str	r3, [r4, #32]

	switch (request) {
    48e4:	284e      	cmp	r0, #78	; 0x4e
    48e6:	f200 837a 	bhi.w	4fde <vendor_request_handler+0x70a>
    48ea:	e8df f010 	tbh	[pc, r0, lsl #1]
    48ee:	0105      	.short	0x0105
    48f0:	00550051 	.word	0x00550051
    48f4:	005d0058 	.word	0x005d0058
    48f8:	00650060 	.word	0x00650060
    48fc:	006a0068 	.word	0x006a0068
    4900:	0073006e 	.word	0x0073006e
    4904:	00cc00c5 	.word	0x00cc00c5
    4908:	0081010a 	.word	0x0081010a
    490c:	0086007c 	.word	0x0086007c
    4910:	008e008b 	.word	0x008e008b
    4914:	009b0093 	.word	0x009b0093
    4918:	00c000be 	.word	0x00c000be
    491c:	010300c2 	.word	0x010300c2
    4920:	03780107 	.word	0x03780107
    4924:	009d0123 	.word	0x009d0123
    4928:	00ae00a4 	.word	0x00ae00a4
    492c:	00b000ac 	.word	0x00b000ac
    4930:	01420150 	.word	0x01420150
    4934:	0170016d 	.word	0x0170016d
    4938:	01780174 	.word	0x01780174
    493c:	01e001ab 	.word	0x01e001ab
    4940:	02440204 	.word	0x02440204
    4944:	025d0252 	.word	0x025d0252
    4948:	026c0375 	.word	0x026c0375
    494c:	02770271 	.word	0x02770271
    4950:	028d027e 	.word	0x028d027e
    4954:	01fa01ed 	.word	0x01fa01ed
    4958:	02f202bb 	.word	0x02f202bb
    495c:	0357015f 	.word	0x0357015f
    4960:	02c30378 	.word	0x02c30378
    4964:	0371036e 	.word	0x0371036e
    4968:	01dc01ca 	.word	0x01dc01ca
    496c:	0378020f 	.word	0x0378020f
    4970:	02d9004f 	.word	0x02d9004f
    4974:	02e90140 	.word	0x02e90140
    4978:	02fd0216 	.word	0x02fd0216
    497c:	03140308 	.word	0x03140308
    4980:	032a031f 	.word	0x032a031f
    4984:	03400335 	.word	0x03400335
    4988:	024b034b 	.word	0x024b034b
    498c:	2400      	movs	r4, #0
    498e:	e276      	b.n	4e7e <vendor_request_handler+0x5aa>
	case UBERTOOTH_PING:
		*data_len = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4990:	2001      	movs	r0, #1
    4992:	74a0      	strb	r0, [r4, #18]
		*data_len = 0;
    4994:	2300      	movs	r3, #0
    4996:	e1a1      	b.n	4cdc <vendor_request_handler+0x408>
		break;

	case UBERTOOTH_TX_SYMBOLS:
		hop_mode = HOP_BLUETOOTH;
    4998:	2302      	movs	r3, #2
    499a:	72a3      	strb	r3, [r4, #10]
    499c:	e0f5      	b.n	4b8a <vendor_request_handler+0x2b6>
		requested_mode = MODE_TX_SYMBOLS;
		*data_len = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    499e:	4b5b      	ldr	r3, [pc, #364]	; (4b0c <vendor_request_handler+0x238>)
    49a0:	681b      	ldr	r3, [r3, #0]
    49a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    49a6:	e118      	b.n	4bda <vendor_request_handler+0x306>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    49a8:	880a      	ldrh	r2, [r1, #0]
    49aa:	2302      	movs	r3, #2
    49ac:	e015      	b.n	49da <vendor_request_handler+0x106>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    49ae:	4b57      	ldr	r3, [pc, #348]	; (4b0c <vendor_request_handler+0x238>)
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
    49b6:	e110      	b.n	4bda <vendor_request_handler+0x306>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    49b8:	880a      	ldrh	r2, [r1, #0]
    49ba:	2310      	movs	r3, #16
    49bc:	e00d      	b.n	49da <vendor_request_handler+0x106>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    49be:	4b53      	ldr	r3, [pc, #332]	; (4b0c <vendor_request_handler+0x238>)
    49c0:	e024      	b.n	4a0c <vendor_request_handler+0x138>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    49c2:	880a      	ldrh	r2, [r1, #0]
    49c4:	f44f 7380 	mov.w	r3, #256	; 0x100
    49c8:	e007      	b.n	49da <vendor_request_handler+0x106>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    49ca:	4b50      	ldr	r3, [pc, #320]	; (4b0c <vendor_request_handler+0x238>)
    49cc:	681b      	ldr	r3, [r3, #0]
    49ce:	f3c3 2340 	ubfx	r3, r3, #9, #1
    49d2:	e102      	b.n	4bda <vendor_request_handler+0x306>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    49d4:	880a      	ldrh	r2, [r1, #0]
    49d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    49da:	b912      	cbnz	r2, 49e2 <vendor_request_handler+0x10e>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    49dc:	4a4c      	ldr	r2, [pc, #304]	; (4b10 <vendor_request_handler+0x23c>)
    49de:	6013      	str	r3, [r2, #0]
    49e0:	e2fa      	b.n	4fd8 <vendor_request_handler+0x704>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
    49e2:	4a4c      	ldr	r2, [pc, #304]	; (4b14 <vendor_request_handler+0x240>)
    49e4:	e7fb      	b.n	49de <vendor_request_handler+0x10a>
		else
			CC1V8_CLR;
		break;

	case UBERTOOTH_GET_PARTNUM:
		get_part_num(data, data_len);
    49e6:	4630      	mov	r0, r6
    49e8:	4629      	mov	r1, r5
    49ea:	f004 f8a3 	bl	8b34 <get_part_num>
    49ee:	e2f3      	b.n	4fd8 <vendor_request_handler+0x704>
	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_GET_SERIAL:
		get_device_serial(data, data_len);
    49f0:	4630      	mov	r0, r6
    49f2:	4629      	mov	r1, r5
    49f4:	f004 f8ba 	bl	8b6c <get_device_serial>
    49f8:	e2ee      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    49fa:	4b47      	ldr	r3, [pc, #284]	; (4b18 <vendor_request_handler+0x244>)
    49fc:	681b      	ldr	r3, [r3, #0]
    49fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    4a02:	e0ea      	b.n	4bda <vendor_request_handler+0x306>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4a04:	880a      	ldrh	r2, [r1, #0]
    4a06:	2380      	movs	r3, #128	; 0x80
    4a08:	e007      	b.n	4a1a <vendor_request_handler+0x146>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4a0a:	4b43      	ldr	r3, [pc, #268]	; (4b18 <vendor_request_handler+0x244>)
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	f3c3 2300 	ubfx	r3, r3, #8, #1
    4a12:	e0e2      	b.n	4bda <vendor_request_handler+0x306>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4a14:	880a      	ldrh	r2, [r1, #0]
    4a16:	f44f 7380 	mov.w	r3, #256	; 0x100
    4a1a:	b10a      	cbz	r2, 4a20 <vendor_request_handler+0x14c>
			HGM_SET;
    4a1c:	4a3f      	ldr	r2, [pc, #252]	; (4b1c <vendor_request_handler+0x248>)
    4a1e:	e7de      	b.n	49de <vendor_request_handler+0x10a>
		else
			HGM_CLR;
    4a20:	4a3f      	ldr	r2, [pc, #252]	; (4b20 <vendor_request_handler+0x24c>)
    4a22:	e7dc      	b.n	49de <vendor_request_handler+0x10a>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4a24:	2303      	movs	r3, #3
    4a26:	e2b7      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4a28:	2005      	movs	r0, #5
    4a2a:	f003 febb 	bl	87a4 <cc2400_get>
    4a2e:	f000 0007 	and.w	r0, r0, #7
    4a32:	7030      	strb	r0, [r6, #0]
    4a34:	e1e4      	b.n	4e00 <vendor_request_handler+0x52c>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4a36:	8809      	ldrh	r1, [r1, #0]
    4a38:	2907      	cmp	r1, #7
    4a3a:	f200 82d0 	bhi.w	4fde <vendor_request_handler+0x70a>
			cc2400_set(FREND, 8 | request_params[0]);
    4a3e:	2005      	movs	r0, #5
    4a40:	f041 0108 	orr.w	r1, r1, #8
    4a44:	e218      	b.n	4e78 <vendor_request_handler+0x5a4>
			return 0;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4a46:	2305      	movs	r3, #5
    4a48:	e2a6      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4a4a:	2306      	movs	r3, #6
    4a4c:	e2a4      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4a4e:	4b35      	ldr	r3, [pc, #212]	; (4b24 <vendor_request_handler+0x250>)
    4a50:	781a      	ldrb	r2, [r3, #0]
    4a52:	7032      	strb	r2, [r6, #0]
		data[1] = rr.request_pa;
    4a54:	785a      	ldrb	r2, [r3, #1]
    4a56:	7072      	strb	r2, [r6, #1]
		data[2] = rr.request_num;
    4a58:	789a      	ldrb	r2, [r3, #2]
    4a5a:	70b2      	strb	r2, [r6, #2]
		data[3] = rr.reply_pa;
    4a5c:	78da      	ldrb	r2, [r3, #3]
    4a5e:	70f2      	strb	r2, [r6, #3]
		data[4] = rr.reply_num;
    4a60:	791b      	ldrb	r3, [r3, #4]
    4a62:	7133      	strb	r3, [r6, #4]
		*data_len = 5;
    4a64:	2305      	movs	r3, #5
    4a66:	602b      	str	r3, [r5, #0]
    4a68:	e2b6      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4a6a:	2300      	movs	r3, #0
    4a6c:	e294      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4a6e:	7823      	ldrb	r3, [r4, #0]
    4a70:	e0b3      	b.n	4bda <vendor_request_handler+0x306>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4a72:	780b      	ldrb	r3, [r1, #0]
    4a74:	7023      	strb	r3, [r4, #0]
    4a76:	e2af      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4a78:	4b2b      	ldr	r3, [pc, #172]	; (4b28 <vendor_request_handler+0x254>)
    4a7a:	881a      	ldrh	r2, [r3, #0]
    4a7c:	7032      	strb	r2, [r6, #0]
		data[1] = (channel >> 8) & 0xFF;
    4a7e:	881b      	ldrh	r3, [r3, #0]
    4a80:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a84:	e1a2      	b.n	4dcc <vendor_request_handler+0x4f8>
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4a86:	880a      	ldrh	r2, [r1, #0]
    4a88:	4b1f      	ldr	r3, [pc, #124]	; (4b08 <vendor_request_handler+0x234>)
    4a8a:	81e2      	strh	r2, [r4, #14]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4a8c:	89e1      	ldrh	r1, [r4, #14]
    4a8e:	f640 22ea 	movw	r2, #2794	; 0xaea
    4a92:	b289      	uxth	r1, r1
    4a94:	4291      	cmp	r1, r2
    4a96:	d905      	bls.n	4aa4 <vendor_request_handler+0x1d0>
			hop_mode = HOP_SWEEP;
    4a98:	2201      	movs	r2, #1
    4a9a:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4a9c:	f640 1262 	movw	r2, #2402	; 0x962
    4aa0:	81da      	strh	r2, [r3, #14]
    4aa2:	e017      	b.n	4ad4 <vendor_request_handler+0x200>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4aa4:	2200      	movs	r2, #0
    4aa6:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4aa8:	89d9      	ldrh	r1, [r3, #14]
    4aaa:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4aae:	b289      	uxth	r1, r1
    4ab0:	4291      	cmp	r1, r2
    4ab2:	bf8a      	itet	hi
    4ab4:	89db      	ldrhhi	r3, [r3, #14]
    4ab6:	4613      	movls	r3, r2
    4ab8:	b29b      	uxthhi	r3, r3
    4aba:	81e3      	strh	r3, [r4, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4abc:	89e2      	ldrh	r2, [r4, #14]
    4abe:	f640 23e9 	movw	r3, #2793	; 0xae9
    4ac2:	b292      	uxth	r2, r2
    4ac4:	429a      	cmp	r2, r3
    4ac6:	bf97      	itett	ls
    4ac8:	4b0f      	ldrls	r3, [pc, #60]	; (4b08 <vendor_request_handler+0x234>)
    4aca:	f640 23ea 	movwhi	r3, #2794	; 0xaea
    4ace:	89db      	ldrhls	r3, [r3, #14]
    4ad0:	b29b      	uxthls	r3, r3
    4ad2:	81e3      	strh	r3, [r4, #14]
		}

		le_adv_channel = requested_channel;
    4ad4:	89e1      	ldrh	r1, [r4, #14]
    4ad6:	4b14      	ldr	r3, [pc, #80]	; (4b28 <vendor_request_handler+0x254>)
    4ad8:	b289      	uxth	r1, r1
    4ada:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
		if (mode != MODE_BT_FOLLOW_LE) {
    4ade:	7c61      	ldrb	r1, [r4, #17]
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
			requested_channel = MIN(requested_channel, MAX_FREQ);
		}

		le_adv_channel = requested_channel;
    4ae0:	4a09      	ldr	r2, [pc, #36]	; (4b08 <vendor_request_handler+0x234>)
		if (mode != MODE_BT_FOLLOW_LE) {
    4ae2:	2909      	cmp	r1, #9
    4ae4:	f000 8278 	beq.w	4fd8 <vendor_request_handler+0x704>
			channel = requested_channel;
    4ae8:	89d1      	ldrh	r1, [r2, #14]
    4aea:	b289      	uxth	r1, r1
    4aec:	8019      	strh	r1, [r3, #0]
			requested_channel = 0;
    4aee:	2100      	movs	r1, #0
    4af0:	81d1      	strh	r1, [r2, #14]
    4af2:	e191      	b.n	4e18 <vendor_request_handler+0x544>
			cs_threshold_calc_and_set(channel);
		}
		break;

	case UBERTOOTH_SET_ISP:
		set_isp();
    4af4:	f004 f86e 	bl	8bd4 <set_isp>
		*data_len = 0; /* should never return */
    4af8:	2300      	movs	r3, #0
    4afa:	e7b4      	b.n	4a66 <vendor_request_handler+0x192>
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4afc:	4a0b      	ldr	r2, [pc, #44]	; (4b2c <vendor_request_handler+0x258>)
    4afe:	4b0c      	ldr	r3, [pc, #48]	; (4b30 <vendor_request_handler+0x25c>)
    4b00:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    4b02:	230b      	movs	r3, #11
    4b04:	e248      	b.n	4f98 <vendor_request_handler+0x6c4>
    4b06:	bf00      	nop
    4b08:	10000e34 	.word	0x10000e34
    4b0c:	2009c034 	.word	0x2009c034
    4b10:	2009c03c 	.word	0x2009c03c
    4b14:	2009c038 	.word	0x2009c038
    4b18:	2009c054 	.word	0x2009c054
    4b1c:	2009c058 	.word	0x2009c058
    4b20:	2009c05c 	.word	0x2009c05c
    4b24:	1000151c 	.word	0x1000151c
    4b28:	1000044c 	.word	0x1000044c
    4b2c:	4305bb21 	.word	0x4305bb21
    4b30:	1000001c 	.word	0x1000001c
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b34:	880a      	ldrh	r2, [r1, #0]
    4b36:	f46f 6c00 	mvn.w	ip, #2048	; 0x800
    4b3a:	eb02 030c 	add.w	r3, r2, ip
    4b3e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4b42:	b29b      	uxth	r3, r3
    4b44:	428b      	cmp	r3, r1
    4b46:	f200 824a 	bhi.w	4fde <vendor_request_handler+0x70a>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b4a:	887b      	ldrh	r3, [r7, #2]
		bootloader_ctrl = DFU_MODE;
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b4c:	f46f 6600 	mvn.w	r6, #2048	; 0x800
    4b50:	1998      	adds	r0, r3, r6
    4b52:	b280      	uxth	r0, r0
    4b54:	4288      	cmp	r0, r1
    4b56:	f200 8242 	bhi.w	4fde <vendor_request_handler+0x70a>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b5a:	4293      	cmp	r3, r2
    4b5c:	f0c0 823f 	bcc.w	4fde <vendor_request_handler+0x70a>
				request_params[1] < request_params[0])
			return 0;
		low_freq = request_params[0];
    4b60:	49b0      	ldr	r1, [pc, #704]	; (4e24 <vendor_request_handler+0x550>)
    4b62:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		high_freq = request_params[1];
    4b66:	f8a1 304e 	strh.w	r3, [r1, #78]	; 0x4e
		requested_mode = MODE_SPECAN;
    4b6a:	2304      	movs	r3, #4
    4b6c:	e00d      	b.n	4b8a <vendor_request_handler+0x2b6>
		*data_len = 0;
		break;

	case UBERTOOTH_RX_GENERIC:
		requested_mode = MODE_RX_GENERIC;
    4b6e:	230f      	movs	r3, #15
    4b70:	e00b      	b.n	4b8a <vendor_request_handler+0x2b6>
		*data_len = 0;
		break;

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4b72:	880b      	ldrh	r3, [r1, #0]
    4b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4b78:	f200 8231 	bhi.w	4fde <vendor_request_handler+0x70a>
			return 0;
		rssi_threshold = 54 - request_params[0];
    4b7c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4b80:	4aa8      	ldr	r2, [pc, #672]	; (4e24 <vendor_request_handler+0x550>)
    4b82:	b2db      	uxtb	r3, r3
    4b84:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		requested_mode = MODE_LED_SPECAN;
    4b88:	2307      	movs	r3, #7
    4b8a:	74a3      	strb	r3, [r4, #18]
    4b8c:	e7b4      	b.n	4af8 <vendor_request_handler+0x224>
		*data_len = 0;
		break;

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4b8e:	2300      	movs	r3, #0
    4b90:	7033      	strb	r3, [r6, #0]
		data[1] = 0x00;
    4b92:	7073      	strb	r3, [r6, #1]

		length = (u8)strlen(GIT_REVISION);
    4b94:	48a4      	ldr	r0, [pc, #656]	; (4e28 <vendor_request_handler+0x554>)
    4b96:	f004 ff5b 	bl	9a50 <strlen>
    4b9a:	b2c4      	uxtb	r4, r0
		data[2] = length;
    4b9c:	70b4      	strb	r4, [r6, #2]

		memcpy(&data[3], GIT_REVISION, length);
    4b9e:	4622      	mov	r2, r4
    4ba0:	1cf0      	adds	r0, r6, #3
    4ba2:	49a1      	ldr	r1, [pc, #644]	; (4e28 <vendor_request_handler+0x554>)
    4ba4:	f004 fec6 	bl	9934 <memcpy>

		*data_len = 2 + 1 + length;
    4ba8:	3403      	adds	r4, #3
    4baa:	e00b      	b.n	4bc4 <vendor_request_handler+0x2f0>
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4bac:	489f      	ldr	r0, [pc, #636]	; (4e2c <vendor_request_handler+0x558>)
    4bae:	f004 ff4f 	bl	9a50 <strlen>
    4bb2:	b2c4      	uxtb	r4, r0
		data[0] = length;
    4bb4:	4630      	mov	r0, r6
    4bb6:	f800 4b01 	strb.w	r4, [r0], #1
		memcpy(&data[1], compile_info, length);
    4bba:	4622      	mov	r2, r4
    4bbc:	499b      	ldr	r1, [pc, #620]	; (4e2c <vendor_request_handler+0x558>)
    4bbe:	f004 feb9 	bl	9934 <memcpy>
		*data_len = 1 + length;
    4bc2:	3401      	adds	r4, #1
    4bc4:	602c      	str	r4, [r5, #0]
    4bc6:	e207      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4bc8:	2001      	movs	r0, #1
    4bca:	7030      	strb	r0, [r6, #0]
    4bcc:	e119      	b.n	4e02 <vendor_request_handler+0x52e>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4bce:	880a      	ldrh	r2, [r1, #0]
    4bd0:	4b97      	ldr	r3, [pc, #604]	; (4e30 <vendor_request_handler+0x55c>)
    4bd2:	701a      	strb	r2, [r3, #0]
    4bd4:	e11f      	b.n	4e16 <vendor_request_handler+0x542>
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4bd6:	4b96      	ldr	r3, [pc, #600]	; (4e30 <vendor_request_handler+0x55c>)
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	7033      	strb	r3, [r6, #0]
    4bdc:	e110      	b.n	4e00 <vendor_request_handler+0x52c>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4bde:	4f95      	ldr	r7, [pc, #596]	; (4e34 <vendor_request_handler+0x560>)
    4be0:	2400      	movs	r4, #0
    4be2:	2500      	movs	r5, #0
    4be4:	e9c7 4500 	strd	r4, r5, [r7]
		target.syncword = 0;
    4be8:	e9c7 4502 	strd	r4, r5, [r7, #8]
		for(int i=0; i < 8; i++) {
    4bec:	f04f 0800 	mov.w	r8, #0
			target.address |= (uint64_t)data[i] << 8*i;
    4bf0:	f816 0008 	ldrb.w	r0, [r6, r8]
    4bf4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4bf8:	2100      	movs	r1, #0
    4bfa:	f004 fba1 	bl	9340 <__aeabi_llsl>
    4bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4c02:	f108 0801 	add.w	r8, r8, #1
			target.address |= (uint64_t)data[i] << 8*i;
    4c06:	4320      	orrs	r0, r4
    4c08:	4329      	orrs	r1, r5
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4c0a:	f1b8 0f08 	cmp.w	r8, #8
			target.address |= (uint64_t)data[i] << 8*i;
    4c0e:	e9c7 0100 	strd	r0, r1, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4c12:	d1ed      	bne.n	4bf0 <vendor_request_handler+0x31c>
    4c14:	f04f 0800 	mov.w	r8, #0
    4c18:	eb06 0308 	add.w	r3, r6, r8
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c1c:	7a18      	ldrb	r0, [r3, #8]
    4c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4c22:	2100      	movs	r1, #0
    4c24:	f004 fb8c 	bl	9340 <__aeabi_llsl>
    4c28:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c2c:	f108 0801 	add.w	r8, r8, #1
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c30:	4320      	orrs	r0, r4
    4c32:	4329      	orrs	r1, r5
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c34:	f1b8 0f08 	cmp.w	r8, #8
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c38:	e9c7 0102 	strd	r0, r1, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c3c:	d1ec      	bne.n	4c18 <vendor_request_handler+0x344>
			target.syncword |= (uint64_t)data[i+8] << 8*i;
		}
		precalc();
    4c3e:	f002 fafb 	bl	7238 <precalc>
    4c42:	e1c9      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
    4c44:	4a7c      	ldr	r2, [pc, #496]	; (4e38 <vendor_request_handler+0x564>)
    4c46:	2300      	movs	r3, #0
    4c48:	6013      	str	r3, [r2, #0]
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
    4c4a:	6811      	ldr	r1, [r2, #0]
    4c4c:	0209      	lsls	r1, r1, #8
    4c4e:	6011      	str	r1, [r2, #0]
			clkn_offset |= data[i];
    4c50:	5cf0      	ldrb	r0, [r6, r3]
    4c52:	6811      	ldr	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c54:	3301      	adds	r3, #1
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c56:	4301      	orrs	r1, r0
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c58:	2b04      	cmp	r3, #4
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c5a:	6011      	str	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c5c:	d1f5      	bne.n	4c4a <vendor_request_handler+0x376>
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
    4c5e:	2302      	movs	r3, #2
    4c60:	72a3      	strb	r3, [r4, #10]
		dma_discard = 1;
		DIO_SSEL_SET;
    4c62:	4b76      	ldr	r3, [pc, #472]	; (4e3c <vendor_request_handler+0x568>)
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c64:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c6a:	7420      	strb	r0, [r4, #16]
		DIO_SSEL_SET;
    4c6c:	601a      	str	r2, [r3, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4c6e:	7973      	ldrb	r3, [r6, #5]
    4c70:	7932      	ldrb	r2, [r6, #4]
    4c72:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    4c76:	4b72      	ldr	r3, [pc, #456]	; (4e40 <vendor_request_handler+0x56c>)
    4c78:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    4c7a:	2308      	movs	r3, #8
    4c7c:	74a3      	strb	r3, [r4, #18]
		break;
    4c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
    4c82:	2305      	movs	r3, #5
    4c84:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_AFH;
    4c86:	230e      	movs	r3, #14
    4c88:	74a3      	strb	r3, [r4, #18]

		for(int i=0; i < 10; i++) {
    4c8a:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4c8c:	496d      	ldr	r1, [pc, #436]	; (4e44 <vendor_request_handler+0x570>)
    4c8e:	2200      	movs	r2, #0
    4c90:	545a      	strb	r2, [r3, r1]

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
    4c92:	3301      	adds	r3, #1
    4c94:	2b0a      	cmp	r3, #10
    4c96:	d1f9      	bne.n	4c8c <vendor_request_handler+0x3b8>
			afh_map[i] = 0;
		}
		used_channels = 0;
    4c98:	4b6b      	ldr	r3, [pc, #428]	; (4e48 <vendor_request_handler+0x574>)
		afh_enabled = 1;
    4c9a:	2001      	movs	r0, #1
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
		}
		used_channels = 0;
    4c9c:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4c9e:	4b6b      	ldr	r3, [pc, #428]	; (4e4c <vendor_request_handler+0x578>)
    4ca0:	7018      	strb	r0, [r3, #0]
		break;
    4ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_HOP:
		do_hop = 1;
    4ca6:	2001      	movs	r0, #1
    4ca8:	72e0      	strb	r0, [r4, #11]
		break;
    4caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4cae:	78b2      	ldrb	r2, [r6, #2]
    4cb0:	7873      	ldrb	r3, [r6, #1]
    4cb2:	0412      	lsls	r2, r2, #16
    4cb4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    4cb8:	7833      	ldrb	r3, [r6, #0]
    4cba:	431a      	orrs	r2, r3
    4cbc:	78f3      	ldrb	r3, [r6, #3]
    4cbe:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		clkn = clock;
    4cc2:	4b63      	ldr	r3, [pc, #396]	; (4e50 <vendor_request_handler+0x57c>)
    4cc4:	601a      	str	r2, [r3, #0]
    4cc6:	e0a6      	b.n	4e16 <vendor_request_handler+0x542>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4cc8:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = data[i];
    4cca:	5cf1      	ldrb	r1, [r6, r3]
    4ccc:	4a5d      	ldr	r2, [pc, #372]	; (4e44 <vendor_request_handler+0x570>)
    4cce:	5499      	strb	r1, [r3, r2]
		clkn = clock;
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    4cd0:	3301      	adds	r3, #1
    4cd2:	2b0a      	cmp	r3, #10
    4cd4:	d1f9      	bne.n	4cca <vendor_request_handler+0x3f6>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    4cd6:	4a5d      	ldr	r2, [pc, #372]	; (4e4c <vendor_request_handler+0x578>)
    4cd8:	2001      	movs	r0, #1
    4cda:	7010      	strb	r0, [r2, #0]
		*data_len = 10;
    4cdc:	602b      	str	r3, [r5, #0]
		break;
    4cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4ce2:	2300      	movs	r3, #0
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
    4ce4:	4957      	ldr	r1, [pc, #348]	; (4e44 <vendor_request_handler+0x570>)
    4ce6:	2200      	movs	r2, #0
    4ce8:	545a      	strb	r2, [r3, r1]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    4cea:	3301      	adds	r3, #1
    4cec:	2b0a      	cmp	r3, #10
    4cee:	d1f9      	bne.n	4ce4 <vendor_request_handler+0x410>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    4cf0:	4956      	ldr	r1, [pc, #344]	; (4e4c <vendor_request_handler+0x578>)
    4cf2:	700a      	strb	r2, [r1, #0]
    4cf4:	e6b7      	b.n	4a66 <vendor_request_handler+0x192>
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    4cf6:	4b56      	ldr	r3, [pc, #344]	; (4e50 <vendor_request_handler+0x57c>)
    4cf8:	6819      	ldr	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4cfa:	2300      	movs	r3, #0
    4cfc:	00da      	lsls	r2, r3, #3
			data[i] = (clock >> (8*i)) & 0xff;
    4cfe:	fa21 f202 	lsr.w	r2, r1, r2
    4d02:	54f2      	strb	r2, [r6, r3]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(int i=0; i < 4; i++) {
    4d04:	3301      	adds	r3, #1
    4d06:	2b04      	cmp	r3, #4
    4d08:	d1f8      	bne.n	4cfc <vendor_request_handler+0x428>
    4d0a:	e6ac      	b.n	4a66 <vendor_request_handler+0x192>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_TRIM_CLOCK:
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4d0c:	7873      	ldrb	r3, [r6, #1]
    4d0e:	7832      	ldrb	r2, [r6, #0]
    4d10:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    4d14:	4b4a      	ldr	r3, [pc, #296]	; (4e40 <vendor_request_handler+0x56c>)
    4d16:	801a      	strh	r2, [r3, #0]
    4d18:	e15e      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

	case UBERTOOTH_FIX_CLOCK_DRIFT:
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4d1a:	4b4e      	ldr	r3, [pc, #312]	; (4e54 <vendor_request_handler+0x580>)
    4d1c:	7830      	ldrb	r0, [r6, #0]
    4d1e:	8819      	ldrh	r1, [r3, #0]
    4d20:	7872      	ldrb	r2, [r6, #1]
    4d22:	b289      	uxth	r1, r1
    4d24:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4d28:	440a      	add	r2, r1
    4d2a:	b292      	uxth	r2, r2
    4d2c:	801a      	strh	r2, [r3, #0]

		// Too slow
		if (clk_drift_ppm < 0) {
    4d2e:	881a      	ldrh	r2, [r3, #0]
    4d30:	4949      	ldr	r1, [pc, #292]	; (4e58 <vendor_request_handler+0x584>)
    4d32:	b212      	sxth	r2, r2
    4d34:	2a00      	cmp	r2, #0
    4d36:	4a49      	ldr	r2, [pc, #292]	; (4e5c <vendor_request_handler+0x588>)
    4d38:	da07      	bge.n	4d4a <vendor_request_handler+0x476>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4d3a:	881b      	ldrh	r3, [r3, #0]
    4d3c:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d40:	425b      	negs	r3, r3
    4d42:	b29b      	uxth	r3, r3
    4d44:	fb90 f3f3 	sdiv	r3, r0, r3
    4d48:	e00a      	b.n	4d60 <vendor_request_handler+0x48c>
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
		}
		// Too fast
		else if (clk_drift_ppm > 0) {
    4d4a:	8818      	ldrh	r0, [r3, #0]
    4d4c:	b200      	sxth	r0, r0
    4d4e:	2800      	cmp	r0, #0
    4d50:	dd0d      	ble.n	4d6e <vendor_request_handler+0x49a>
			clk_drift_correction = 320 / clk_drift_ppm;
    4d52:	881b      	ldrh	r3, [r3, #0]
    4d54:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d58:	b21b      	sxth	r3, r3
    4d5a:	fb90 f3f3 	sdiv	r3, r0, r3
    4d5e:	b29b      	uxth	r3, r3
    4d60:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4d62:	4b3f      	ldr	r3, [pc, #252]	; (4e60 <vendor_request_handler+0x58c>)
    4d64:	6818      	ldr	r0, [r3, #0]
    4d66:	8813      	ldrh	r3, [r2, #0]
    4d68:	b29b      	uxth	r3, r3
    4d6a:	4403      	add	r3, r0
    4d6c:	e001      	b.n	4d72 <vendor_request_handler+0x49e>
		}
		// Don't trim
		else {
			clk_drift_correction = 0;
    4d6e:	2300      	movs	r3, #0
    4d70:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = 0;
    4d72:	600b      	str	r3, [r1, #0]
    4d74:	e130      	b.n	4fd8 <vendor_request_handler+0x704>
		}

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    4d76:	2300      	movs	r3, #0
    4d78:	602b      	str	r3, [r5, #0]

		do_hop = 0;
    4d7a:	72e3      	strb	r3, [r4, #11]
		hop_mode = HOP_BTLE;
    4d7c:	2303      	movs	r3, #3
    4d7e:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4d80:	2309      	movs	r3, #9
    4d82:	e045      	b.n	4e10 <vendor_request_handler+0x53c>
		cs_threshold_calc_and_set(channel);
		break;
	
	// JWHUR cfo estimation tracking
	case UBERTOOTH_BTLE_CFO:
		*data_len = 0;
    4d84:	2300      	movs	r3, #0
    4d86:	602b      	str	r3, [r5, #0]

		do_hop = 0;
    4d88:	72e3      	strb	r3, [r4, #11]
		hop_mode = HOP_BTLE;
    4d8a:	2303      	movs	r3, #3
    4d8c:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_CFO_LE;
    4d8e:	2319      	movs	r3, #25
    4d90:	e03e      	b.n	4e10 <vendor_request_handler+0x53c>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4d92:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4d94:	4923      	ldr	r1, [pc, #140]	; (4e24 <vendor_request_handler+0x550>)
    4d96:	00da      	lsls	r2, r3, #3
    4d98:	6849      	ldr	r1, [r1, #4]
    4d9a:	fa21 f202 	lsr.w	r2, r1, r2
    4d9e:	54f2      	strb	r2, [r6, r3]
		queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    4da0:	3301      	adds	r3, #1
    4da2:	2b04      	cmp	r3, #4
    4da4:	d1f6      	bne.n	4d94 <vendor_request_handler+0x4c0>
    4da6:	e65e      	b.n	4a66 <vendor_request_handler+0x192>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4da8:	78b3      	ldrb	r3, [r6, #2]
    4daa:	7872      	ldrb	r2, [r6, #1]
    4dac:	041b      	lsls	r3, r3, #16
    4dae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4db2:	7832      	ldrb	r2, [r6, #0]
    4db4:	78f0      	ldrb	r0, [r6, #3]
    4db6:	4313      	orrs	r3, r2
    4db8:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4dbc:	f7ff fbee 	bl	459c <le_set_access_address>
		le.target_set = 1;
    4dc0:	2001      	movs	r0, #1
    4dc2:	4b18      	ldr	r3, [pc, #96]	; (4e24 <vendor_request_handler+0x550>)
    4dc4:	e0fe      	b.n	4fc4 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    4dc6:	2313      	movs	r3, #19
    4dc8:	7033      	strb	r3, [r6, #0]
		data[1] = 0x37;
    4dca:	2337      	movs	r3, #55	; 0x37
    4dcc:	7073      	strb	r3, [r6, #1]
    4dce:	e04f      	b.n	4e70 <vendor_request_handler+0x59c>
		*data_len = 2;
		break;

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    4dd0:	4b14      	ldr	r3, [pc, #80]	; (4e24 <vendor_request_handler+0x550>)
    4dd2:	695b      	ldr	r3, [r3, #20]
    4dd4:	3300      	adds	r3, #0
    4dd6:	bf18      	it	ne
    4dd8:	2301      	movne	r3, #1
    4dda:	e6fe      	b.n	4bda <vendor_request_handler+0x306>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    4ddc:	880a      	ldrh	r2, [r1, #0]
    4dde:	4b11      	ldr	r3, [pc, #68]	; (4e24 <vendor_request_handler+0x550>)
    4de0:	3200      	adds	r2, #0
    4de2:	bf18      	it	ne
    4de4:	2201      	movne	r2, #1
    4de6:	615a      	str	r2, [r3, #20]
    4de8:	e0f6      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

	case UBERTOOTH_POLL:
		p = dequeue();
    4dea:	f002 fc9b 	bl	7724 <dequeue>
		if (p != NULL) {
    4dee:	4601      	mov	r1, r0
    4df0:	b128      	cbz	r0, 4dfe <vendor_request_handler+0x52a>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4df2:	4630      	mov	r0, r6
    4df4:	2240      	movs	r2, #64	; 0x40
    4df6:	f004 fd9d 	bl	9934 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4dfa:	2340      	movs	r3, #64	; 0x40
    4dfc:	e633      	b.n	4a66 <vendor_request_handler+0x192>
		} else {
			data[0] = 0;
    4dfe:	7030      	strb	r0, [r6, #0]
			*data_len = 1;
    4e00:	2001      	movs	r0, #1
    4e02:	6028      	str	r0, [r5, #0]
    4e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    4e08:	2300      	movs	r3, #0
    4e0a:	602b      	str	r3, [r5, #0]

		hop_mode = HOP_NONE;
    4e0c:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4e0e:	230a      	movs	r3, #10
    4e10:	74a3      	strb	r3, [r4, #18]

		queue_init();
    4e12:	f002 fc45 	bl	76a0 <queue_init>
		cs_threshold_calc_and_set(channel);
    4e16:	4b03      	ldr	r3, [pc, #12]	; (4e24 <vendor_request_handler+0x550>)
    4e18:	8818      	ldrh	r0, [r3, #0]
    4e1a:	b280      	uxth	r0, r0
    4e1c:	f002 fd48 	bl	78b0 <cs_threshold_calc_and_set>
    4e20:	e0da      	b.n	4fd8 <vendor_request_handler+0x704>
    4e22:	bf00      	nop
    4e24:	1000044c 	.word	0x1000044c
    4e28:	0000a5dc 	.word	0x0000a5dc
    4e2c:	00009dbb 	.word	0x00009dbb
    4e30:	100014e0 	.word	0x100014e0
    4e34:	10001560 	.word	0x10001560
    4e38:	10001050 	.word	0x10001050
    4e3c:	2009c098 	.word	0x2009c098
    4e40:	100011aa 	.word	0x100011aa
    4e44:	10001043 	.word	0x10001043
    4e48:	10001041 	.word	0x10001041
    4e4c:	100014df 	.word	0x100014df
    4e50:	1000105c 	.word	0x1000105c
    4e54:	100014dc 	.word	0x100014dc
    4e58:	10001514 	.word	0x10001514
    4e5c:	10001058 	.word	0x10001058
    4e60:	10001054 	.word	0x10001054
		break;

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    4e64:	7808      	ldrb	r0, [r1, #0]
    4e66:	f003 fc9d 	bl	87a4 <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4e6a:	0a03      	lsrs	r3, r0, #8
    4e6c:	7033      	strb	r3, [r6, #0]
		data[1] = reg_val & 0xff;
    4e6e:	7070      	strb	r0, [r6, #1]
		*data_len = 2;
    4e70:	2302      	movs	r3, #2
    4e72:	e5f8      	b.n	4a66 <vendor_request_handler+0x192>
		break;

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4e74:	7808      	ldrb	r0, [r1, #0]
    4e76:	8849      	ldrh	r1, [r1, #2]
    4e78:	f003 fc9d 	bl	87b6 <cc2400_set>
    4e7c:	e0ac      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e7e:	883b      	ldrh	r3, [r7, #0]
    4e80:	42a3      	cmp	r3, r4
    4e82:	f240 80a9 	bls.w	4fd8 <vendor_request_handler+0x704>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    4e86:	2303      	movs	r3, #3
    4e88:	4363      	muls	r3, r4
    4e8a:	18f2      	adds	r2, r6, r3
    4e8c:	7851      	ldrb	r1, [r2, #1]
    4e8e:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4e90:	5cf0      	ldrb	r0, [r6, r3]
    4e92:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e96:	3401      	adds	r4, #1
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
			cc2400_set(data[i*3], reg_val);
    4e98:	f003 fc8d 	bl	87b6 <cc2400_set>
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e9c:	b2e4      	uxtb	r4, r4
    4e9e:	e7ee      	b.n	4e7e <vendor_request_handler+0x5aa>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4ea0:	2400      	movs	r4, #0
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
			reg_val = cc2400_get(i);
    4ea2:	4620      	mov	r0, r4
    4ea4:	f003 fc7e 	bl	87a4 <cc2400_get>
			data[i*3] = i;
    4ea8:	7034      	strb	r4, [r6, #0]
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4eaa:	3401      	adds	r4, #1
    4eac:	b2e4      	uxtb	r4, r4
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4eae:	0a03      	lsrs	r3, r0, #8
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4eb0:	2c2e      	cmp	r4, #46	; 0x2e
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4eb2:	7073      	strb	r3, [r6, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4eb4:	70b0      	strb	r0, [r6, #2]
    4eb6:	f106 0603 	add.w	r6, r6, #3
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4eba:	d1f2      	bne.n	4ea2 <vendor_request_handler+0x5ce>
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
			data[(i*3)+2] = reg_val & 0xff;
		}
		*data_len = MAX_READ_REG*3;
    4ebc:	2387      	movs	r3, #135	; 0x87
    4ebe:	e5d2      	b.n	4a66 <vendor_request_handler+0x192>
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4ec0:	79b2      	ldrb	r2, [r6, #6]
		memcpy(&tx_pkt, data, i);
    4ec2:	4848      	ldr	r0, [pc, #288]	; (4fe4 <vendor_request_handler+0x710>)
		}
		*data_len = MAX_READ_REG*3;
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4ec4:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4ec6:	4631      	mov	r1, r6
    4ec8:	b2d2      	uxtb	r2, r2
    4eca:	f004 fd33 	bl	9934 <memcpy>
		//tx_pkt.channel = data[4] << 8 | data[5];
		requested_mode = MODE_TX_GENERIC;
    4ece:	2310      	movs	r3, #16
    4ed0:	e65b      	b.n	4b8a <vendor_request_handler+0x2b6>
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4ed2:	4618      	mov	r0, r3
    4ed4:	f004 fa40 	bl	9358 <malloc>
    4ed8:	4b43      	ldr	r3, [pc, #268]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address_data, data, dlen);
    4eda:	4631      	mov	r1, r6
    4edc:	6a22      	ldr	r2, [r4, #32]
		requested_mode = MODE_TX_GENERIC;
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4ede:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4ee0:	f004 fd28 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4ee4:	230c      	movs	r3, #12
    4ee6:	e057      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
	
	// WJHUR Power control
	case UBERTOOTH_BTLE_SLAVE_P0:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4ee8:	4618      	mov	r0, r3
    4eea:	f004 fa35 	bl	9358 <malloc>
    4eee:	4b3e      	ldr	r3, [pc, #248]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address_data, data, dlen);
    4ef0:	4631      	mov	r1, r6
    4ef2:	6a22      	ldr	r2, [r4, #32]
		requested_mode = MODE_BT_SLAVE_LE;
		break;
	
	// WJHUR Power control
	case UBERTOOTH_BTLE_SLAVE_P0:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4ef4:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4ef6:	f004 fd1d 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P0;
    4efa:	2311      	movs	r3, #17
    4efc:	e04c      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
	case UBERTOOTH_BTLE_SLAVE_P1:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4efe:	4618      	mov	r0, r3
    4f00:	f004 fa2a 	bl	9358 <malloc>
    4f04:	4b38      	ldr	r3, [pc, #224]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address, data, dlen);
    4f06:	4631      	mov	r1, r6
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P0;
		break;
	case UBERTOOTH_BTLE_SLAVE_P1:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f08:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address, data, dlen);
    4f0a:	6a22      	ldr	r2, [r4, #32]
    4f0c:	4837      	ldr	r0, [pc, #220]	; (4fec <vendor_request_handler+0x718>)
    4f0e:	f004 fd11 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P1;
    4f12:	2312      	movs	r3, #18
    4f14:	e040      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
	case UBERTOOTH_BTLE_SLAVE_P2:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f16:	4618      	mov	r0, r3
    4f18:	f004 fa1e 	bl	9358 <malloc>
    4f1c:	4b32      	ldr	r3, [pc, #200]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address_data, data, dlen);
    4f1e:	4631      	mov	r1, r6
    4f20:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P1;
		break;
	case UBERTOOTH_BTLE_SLAVE_P2:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f22:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f24:	f004 fd06 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P2;
    4f28:	2313      	movs	r3, #19
    4f2a:	e035      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
	case UBERTOOTH_BTLE_SLAVE_P3:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f2c:	4618      	mov	r0, r3
    4f2e:	f004 fa13 	bl	9358 <malloc>
    4f32:	4b2d      	ldr	r3, [pc, #180]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address_data, data, dlen);
    4f34:	4631      	mov	r1, r6
    4f36:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P2;
		break;
	case UBERTOOTH_BTLE_SLAVE_P3:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f38:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f3a:	f004 fcfb 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P3;
    4f3e:	2314      	movs	r3, #20
    4f40:	e02a      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
	case UBERTOOTH_BTLE_SLAVE_P4:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f42:	4618      	mov	r0, r3
    4f44:	f004 fa08 	bl	9358 <malloc>
    4f48:	4b27      	ldr	r3, [pc, #156]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address_data, data, dlen);
    4f4a:	4631      	mov	r1, r6
    4f4c:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P3;
		break;
	case UBERTOOTH_BTLE_SLAVE_P4:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f4e:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f50:	f004 fcf0 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P4;
    4f54:	2315      	movs	r3, #21
    4f56:	e01f      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
	case UBERTOOTH_BTLE_SLAVE_P5:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f58:	4618      	mov	r0, r3
    4f5a:	f004 f9fd 	bl	9358 <malloc>
    4f5e:	4b22      	ldr	r3, [pc, #136]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address_data, data, dlen);
    4f60:	4631      	mov	r1, r6
    4f62:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P4;
		break;
	case UBERTOOTH_BTLE_SLAVE_P5:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f64:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f66:	f004 fce5 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P5;
    4f6a:	2316      	movs	r3, #22
    4f6c:	e014      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
	case UBERTOOTH_BTLE_SLAVE_P6:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f6e:	4618      	mov	r0, r3
    4f70:	f004 f9f2 	bl	9358 <malloc>
    4f74:	4b1c      	ldr	r3, [pc, #112]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address_data, data, dlen);
    4f76:	4631      	mov	r1, r6
    4f78:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P5;
		break;
	case UBERTOOTH_BTLE_SLAVE_P6:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f7a:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f7c:	f004 fcda 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P6;
    4f80:	2317      	movs	r3, #23
    4f82:	e009      	b.n	4f98 <vendor_request_handler+0x6c4>
		break;
	case UBERTOOTH_BTLE_SLAVE_P7:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f84:	4618      	mov	r0, r3
    4f86:	f004 f9e7 	bl	9358 <malloc>
    4f8a:	4b17      	ldr	r3, [pc, #92]	; (4fe8 <vendor_request_handler+0x714>)
		memcpy(slave_mac_address_data, data, dlen);
    4f8c:	4631      	mov	r1, r6
    4f8e:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P6;
		break;
	case UBERTOOTH_BTLE_SLAVE_P7:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f90:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f92:	f004 fccf 	bl	9934 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P7;
    4f96:	2318      	movs	r3, #24
    4f98:	74a3      	strb	r3, [r4, #18]
    4f9a:	e01d      	b.n	4fd8 <vendor_request_handler+0x704>
		break;

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4f9c:	7972      	ldrb	r2, [r6, #5]
    4f9e:	4b14      	ldr	r3, [pc, #80]	; (4ff0 <vendor_request_handler+0x71c>)
		le.target[1] = data[4];
		le.target[2] = data[3];
		le.target[3] = data[2];
		le.target[4] = data[1];
		le.target[5] = data[0];
		le.target_set = 1;
    4fa0:	2001      	movs	r0, #1
		break;

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[1] = data[4];
    4fa6:	7932      	ldrb	r2, [r6, #4]
    4fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target[2] = data[3];
    4fac:	78f2      	ldrb	r2, [r6, #3]
    4fae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		le.target[3] = data[2];
    4fb2:	78b2      	ldrb	r2, [r6, #2]
    4fb4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		le.target[4] = data[1];
    4fb8:	7872      	ldrb	r2, [r6, #1]
    4fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		le.target[5] = data[0];
    4fbe:	7832      	ldrb	r2, [r6, #0]
    4fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		le.target_set = 1;
    4fc4:	6418      	str	r0, [r3, #64]	; 0x40
		break;
    4fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    4fca:	780b      	ldrb	r3, [r1, #0]
    4fcc:	74e3      	strb	r3, [r4, #19]
    4fce:	e003      	b.n	4fd8 <vendor_request_handler+0x704>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    4fd0:	230d      	movs	r3, #13
    4fd2:	74a3      	strb	r3, [r4, #18]
		ego_mode = request_params[0];
    4fd4:	780b      	ldrb	r3, [r1, #0]
    4fd6:	7523      	strb	r3, [r4, #20]
		break;

	default:
		return 0;
	}
	return 1;
    4fd8:	2001      	movs	r0, #1
    4fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4fde:	2000      	movs	r0, #0

	default:
		return 0;
	}
	return 1;
}
    4fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fe4:	10001060 	.word	0x10001060
    4fe8:	10001518 	.word	0x10001518
    4fec:	10000e58 	.word	0x10000e58
    4ff0:	1000044c 	.word	0x1000044c

00004ff4 <enqueue_with_ts>:
	return 1;
}
//

int enqueue_with_ts(uint8_t type, uint8_t* buf, uint32_t ts)
{
    4ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ff8:	4606      	mov	r6, r0
    4ffa:	460f      	mov	r7, r1
    4ffc:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    4ffe:	f002 fb5d 	bl	76bc <usb_enqueue>
    5002:	4d10      	ldr	r5, [pc, #64]	; (5044 <enqueue_with_ts+0x50>)

	/* fail if queue is full */
	if (f == NULL) {
    5004:	4604      	mov	r4, r0
    5006:	b928      	cbnz	r0, 5014 <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    5008:	786b      	ldrb	r3, [r5, #1]
    500a:	f043 0304 	orr.w	r3, r3, #4
    500e:	706b      	strb	r3, [r5, #1]
		return 0;
    5010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5014:	4b0c      	ldr	r3, [pc, #48]	; (5048 <enqueue_with_ts+0x54>)
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    5016:	7006      	strb	r6, [r0, #0]

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5018:	881b      	ldrh	r3, [r3, #0]
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    501a:	2600      	movs	r6, #0
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    501c:	b29b      	uxth	r3, r3
    501e:	3b62      	subs	r3, #98	; 0x62
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    5020:	70c6      	strb	r6, [r0, #3]
	f->clk100ns = ts;
    5022:	f8c0 8004 	str.w	r8, [r0, #4]

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5026:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    5028:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    502a:	72c6      	strb	r6, [r0, #11]

	memcpy(f->data, buf, DMA_SIZE);
    502c:	4639      	mov	r1, r7
    502e:	2232      	movs	r2, #50	; 0x32
    5030:	300e      	adds	r0, #14
    5032:	f004 fc7f 	bl	9934 <memcpy>

	f->status = status;
    5036:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    5038:	706e      	strb	r6, [r5, #1]
	f->rssi_avg = 0;
	f->rssi_count = 0;

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    503a:	7063      	strb	r3, [r4, #1]
	status = 0;

	return 1;
    503c:	2001      	movs	r0, #1
}
    503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5042:	bf00      	nop
    5044:	10000e34 	.word	0x10000e34
    5048:	1000044c 	.word	0x1000044c

0000504c <TIMER0_IRQHandler>:
	return 1;
}

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    504c:	b570      	push	{r4, r5, r6, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    504e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5052:	681b      	ldr	r3, [r3, #0]
    5054:	07db      	lsls	r3, r3, #31
    5056:	d57f      	bpl.n	5158 <TIMER0_IRQHandler+0x10c>

		clkn += clkn_offset + 1;
    5058:	4940      	ldr	r1, [pc, #256]	; (515c <TIMER0_IRQHandler+0x110>)
    505a:	4b41      	ldr	r3, [pc, #260]	; (5160 <TIMER0_IRQHandler+0x114>)
    505c:	6808      	ldr	r0, [r1, #0]
    505e:	681a      	ldr	r2, [r3, #0]
    5060:	4402      	add	r2, r0
    5062:	3201      	adds	r2, #1
    5064:	600a      	str	r2, [r1, #0]
		clkn_offset = 0;
    5066:	2200      	movs	r2, #0
    5068:	601a      	str	r2, [r3, #0]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    506a:	4a3e      	ldr	r2, [pc, #248]	; (5164 <TIMER0_IRQHandler+0x118>)
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    506c:	680c      	ldr	r4, [r1, #0]
    506e:	4b3e      	ldr	r3, [pc, #248]	; (5168 <TIMER0_IRQHandler+0x11c>)

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5070:	7a96      	ldrb	r6, [r2, #10]
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    5072:	69d8      	ldr	r0, [r3, #28]
    5074:	4615      	mov	r5, r2

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5076:	b116      	cbz	r6, 507e <TIMER0_IRQHandler+0x32>
    5078:	7a96      	ldrb	r6, [r2, #10]
    507a:	2e01      	cmp	r6, #1
    507c:	d105      	bne.n	508a <TIMER0_IRQHandler+0x3e>
			if ((clkn & 0x7f) == 0)
    507e:	680b      	ldr	r3, [r1, #0]
    5080:	065e      	lsls	r6, r3, #25
    5082:	d137      	bne.n	50f4 <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    5084:	2301      	movs	r3, #1
    5086:	72eb      	strb	r3, [r5, #11]
    5088:	e034      	b.n	50f4 <TIMER0_IRQHandler+0xa8>
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    508a:	7a95      	ldrb	r5, [r2, #10]
    508c:	2d02      	cmp	r5, #2
    508e:	d103      	bne.n	5098 <TIMER0_IRQHandler+0x4c>
			if ((clkn & 0x1) == 0)
    5090:	680b      	ldr	r3, [r1, #0]
    5092:	07dc      	lsls	r4, r3, #31
    5094:	d42e      	bmi.n	50f4 <TIMER0_IRQHandler+0xa8>
    5096:	e02b      	b.n	50f0 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5098:	7a95      	ldrb	r5, [r2, #10]
    509a:	2d03      	cmp	r5, #3
    509c:	d11c      	bne.n	50d8 <TIMER0_IRQHandler+0x8c>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    509e:	7e1d      	ldrb	r5, [r3, #24]
    50a0:	2d03      	cmp	r5, #3
    50a2:	d127      	bne.n	50f4 <TIMER0_IRQHandler+0xa8>
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    50a4:	1a20      	subs	r0, r4, r0
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    50a6:	0780      	lsls	r0, r0, #30
    50a8:	d124      	bne.n	50f4 <TIMER0_IRQHandler+0xa8>
				--le.interval_timer;
    50aa:	8c18      	ldrh	r0, [r3, #32]
    50ac:	b280      	uxth	r0, r0
    50ae:	3801      	subs	r0, #1
    50b0:	b280      	uxth	r0, r0
    50b2:	8418      	strh	r0, [r3, #32]
				if (le.interval_timer == 0) {
    50b4:	8c18      	ldrh	r0, [r3, #32]
    50b6:	b280      	uxth	r0, r0
    50b8:	b948      	cbnz	r0, 50ce <TIMER0_IRQHandler+0x82>
					do_hop = 1;
    50ba:	2001      	movs	r0, #1
    50bc:	72d0      	strb	r0, [r2, #11]
					++le.conn_count;
    50be:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    50c0:	b292      	uxth	r2, r2
    50c2:	4402      	add	r2, r0
    50c4:	b292      	uxth	r2, r2
    50c6:	849a      	strh	r2, [r3, #36]	; 0x24
					le.interval_timer = le.conn_interval;
    50c8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    50ca:	841a      	strh	r2, [r3, #32]
    50cc:	e012      	b.n	50f4 <TIMER0_IRQHandler+0xa8>
				} else {
					TXLED_CLR; // hack!
    50ce:	4b27      	ldr	r3, [pc, #156]	; (516c <TIMER0_IRQHandler+0x120>)
    50d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    50d4:	601a      	str	r2, [r3, #0]
    50d6:	e00d      	b.n	50f4 <TIMER0_IRQHandler+0xa8>
				}
			}
		}
		else if (hop_mode == HOP_AFH) {
    50d8:	7a90      	ldrb	r0, [r2, #10]
    50da:	2805      	cmp	r0, #5
    50dc:	d10a      	bne.n	50f4 <TIMER0_IRQHandler+0xa8>
			if( (last_hop + hop_timeout) == clkn ) {
    50de:	4824      	ldr	r0, [pc, #144]	; (5170 <TIMER0_IRQHandler+0x124>)
    50e0:	6804      	ldr	r4, [r0, #0]
    50e2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
    50e6:	680b      	ldr	r3, [r1, #0]
    50e8:	b280      	uxth	r0, r0
    50ea:	4420      	add	r0, r4
    50ec:	4298      	cmp	r0, r3
    50ee:	d101      	bne.n	50f4 <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    50f0:	2301      	movs	r3, #1
    50f2:	72d3      	strb	r3, [r2, #11]
			}
		}

		// Fix linear clock drift deviation
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    50f4:	4a1f      	ldr	r2, [pc, #124]	; (5174 <TIMER0_IRQHandler+0x128>)
    50f6:	4b20      	ldr	r3, [pc, #128]	; (5178 <TIMER0_IRQHandler+0x12c>)
    50f8:	6810      	ldr	r0, [r2, #0]
    50fa:	b1c0      	cbz	r0, 512e <TIMER0_IRQHandler+0xe2>
    50fc:	8818      	ldrh	r0, [r3, #0]
    50fe:	b280      	uxth	r0, r0
    5100:	b9a8      	cbnz	r0, 512e <TIMER0_IRQHandler+0xe2>
			if(clkn >= clkn_next_drift_fix) {
    5102:	680c      	ldr	r4, [r1, #0]
    5104:	6810      	ldr	r0, [r2, #0]
    5106:	4284      	cmp	r4, r0
    5108:	d311      	bcc.n	512e <TIMER0_IRQHandler+0xe2>

				// Too fast
				if(clk_drift_ppm >= 0) {
    510a:	481c      	ldr	r0, [pc, #112]	; (517c <TIMER0_IRQHandler+0x130>)
    510c:	8800      	ldrh	r0, [r0, #0]
    510e:	b200      	sxth	r0, r0
    5110:	2800      	cmp	r0, #0
					clk100ns_offset = 1;
    5112:	bfac      	ite	ge
    5114:	2001      	movge	r0, #1
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    5116:	f641 0069 	movwlt	r0, #6249	; 0x1869
    511a:	8018      	strh	r0, [r3, #0]
				}
				clkn_last_drift_fix = clkn;
    511c:	680c      	ldr	r4, [r1, #0]
    511e:	4818      	ldr	r0, [pc, #96]	; (5180 <TIMER0_IRQHandler+0x134>)
    5120:	6004      	str	r4, [r0, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    5122:	6804      	ldr	r4, [r0, #0]
    5124:	4817      	ldr	r0, [pc, #92]	; (5184 <TIMER0_IRQHandler+0x138>)
    5126:	8800      	ldrh	r0, [r0, #0]
    5128:	b280      	uxth	r0, r0
    512a:	4420      	add	r0, r4
    512c:	6010      	str	r0, [r2, #0]
			}
		}

		// Negative clock correction
		if(clk100ns_offset > 3124)
    512e:	8818      	ldrh	r0, [r3, #0]
    5130:	f640 4234 	movw	r2, #3124	; 0xc34
    5134:	b280      	uxth	r0, r0
    5136:	4290      	cmp	r0, r2
    5138:	d902      	bls.n	5140 <TIMER0_IRQHandler+0xf4>
			clkn += 2;
    513a:	680a      	ldr	r2, [r1, #0]
    513c:	3202      	adds	r2, #2
    513e:	600a      	str	r2, [r1, #0]

		T0MR0 = 3124 + clk100ns_offset;
    5140:	8819      	ldrh	r1, [r3, #0]
    5142:	4a11      	ldr	r2, [pc, #68]	; (5188 <TIMER0_IRQHandler+0x13c>)
    5144:	b289      	uxth	r1, r1
    5146:	f601 4134 	addw	r1, r1, #3124	; 0xc34
    514a:	6011      	str	r1, [r2, #0]
		clk100ns_offset = 0;
    514c:	2200      	movs	r2, #0
    514e:	801a      	strh	r2, [r3, #0]

		/* Ack interrupt */
		T0IR = TIR_MR0_Interrupt;
    5150:	2201      	movs	r2, #1
    5152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5156:	601a      	str	r2, [r3, #0]
    5158:	bd70      	pop	{r4, r5, r6, pc}
    515a:	bf00      	nop
    515c:	1000105c 	.word	0x1000105c
    5160:	10001050 	.word	0x10001050
    5164:	10000e34 	.word	0x10000e34
    5168:	1000044c 	.word	0x1000044c
    516c:	2009c03c 	.word	0x2009c03c
    5170:	10001038 	.word	0x10001038
    5174:	10001514 	.word	0x10001514
    5178:	100011aa 	.word	0x100011aa
    517c:	100014dc 	.word	0x100014dc
    5180:	10001054 	.word	0x10001054
    5184:	10001058 	.word	0x10001058
    5188:	40004018 	.word	0x40004018

0000518c <EINT3_IRQHandler>:
/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
void EINT3_IRQHandler()
{
	/* TODO - check specific source of shared interrupt */
	IO2IntClr   = PIN_GIO6; // clear interrupt
    518c:	4b08      	ldr	r3, [pc, #32]	; (51b0 <EINT3_IRQHandler+0x24>)
    518e:	2204      	movs	r2, #4
    5190:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    5192:	4b08      	ldr	r3, [pc, #32]	; (51b4 <EINT3_IRQHandler+0x28>)
    5194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5198:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    519a:	4b07      	ldr	r3, [pc, #28]	; (51b8 <EINT3_IRQHandler+0x2c>)
    519c:	2201      	movs	r2, #1
    519e:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    51a0:	4b06      	ldr	r3, [pc, #24]	; (51bc <EINT3_IRQHandler+0x30>)
    51a2:	7a9a      	ldrb	r2, [r3, #10]
    51a4:	2a02      	cmp	r2, #2
		dma_discard = 0;
    51a6:	bf04      	itt	eq
    51a8:	2200      	moveq	r2, #0
    51aa:	741a      	strbeq	r2, [r3, #16]
    51ac:	4770      	bx	lr
    51ae:	bf00      	nop
    51b0:	400280ac 	.word	0x400280ac
    51b4:	2009c09c 	.word	0x2009c09c
    51b8:	10001559 	.word	0x10001559
    51bc:	10000e34 	.word	0x10000e34

000051c0 <DMA_IRQHandler>:
		while ((clkn & 0xffffff) < stop_at);
	}
}

void DMA_IRQHandler()
{
    51c0:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    51c2:	4b36      	ldr	r3, [pc, #216]	; (529c <DMA_IRQHandler+0xdc>)
    51c4:	7c5a      	ldrb	r2, [r3, #17]
    51c6:	2a01      	cmp	r2, #1
    51c8:	d02c      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_FOLLOW
    51ca:	7c5a      	ldrb	r2, [r3, #17]
    51cc:	2a08      	cmp	r2, #8
    51ce:	d029      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_SPECAN
    51d0:	7c5a      	ldrb	r2, [r3, #17]
    51d2:	2a04      	cmp	r2, #4
    51d4:	d026      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_FOLLOW_LE
    51d6:	7c5a      	ldrb	r2, [r3, #17]
    51d8:	2a09      	cmp	r2, #9
    51da:	d023      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_CFO_LE
    51dc:	7c5a      	ldrb	r2, [r3, #17]
    51de:	2a19      	cmp	r2, #25
    51e0:	d020      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_PROMISC_LE
    51e2:	7c5a      	ldrb	r2, [r3, #17]
    51e4:	2a0a      	cmp	r2, #10
    51e6:	d01d      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE
    51e8:	7c5a      	ldrb	r2, [r3, #17]
    51ea:	2a0c      	cmp	r2, #12
    51ec:	d01a      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE_P0
    51ee:	7c5a      	ldrb	r2, [r3, #17]
    51f0:	2a11      	cmp	r2, #17
    51f2:	d017      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE_P1
    51f4:	7c5a      	ldrb	r2, [r3, #17]
    51f6:	2a12      	cmp	r2, #18
    51f8:	d014      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE_P2
    51fa:	7c5a      	ldrb	r2, [r3, #17]
    51fc:	2a13      	cmp	r2, #19
    51fe:	d011      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE_P3
    5200:	7c59      	ldrb	r1, [r3, #17]
    5202:	2914      	cmp	r1, #20
    5204:	d00e      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE_P4
    5206:	7c59      	ldrb	r1, [r3, #17]
    5208:	2915      	cmp	r1, #21
    520a:	d00b      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE_P5
    520c:	7c59      	ldrb	r1, [r3, #17]
    520e:	2916      	cmp	r1, #22
    5210:	d008      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE_P6
    5212:	7c59      	ldrb	r1, [r3, #17]
    5214:	2917      	cmp	r1, #23
    5216:	d005      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_BT_SLAVE_LE_P7
    5218:	7c59      	ldrb	r1, [r3, #17]
    521a:	2918      	cmp	r1, #24
    521c:	d002      	beq.n	5224 <DMA_IRQHandler+0x64>
	   || mode == MODE_RX_GENERIC)
    521e:	7c5a      	ldrb	r2, [r3, #17]
    5220:	2a0f      	cmp	r2, #15
    5222:	d139      	bne.n	5298 <DMA_IRQHandler+0xd8>
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
    5224:	4a1e      	ldr	r2, [pc, #120]	; (52a0 <DMA_IRQHandler+0xe0>)
    5226:	6812      	ldr	r2, [r2, #0]
    5228:	07d0      	lsls	r0, r2, #31
    522a:	d535      	bpl.n	5298 <DMA_IRQHandler+0xd8>
			if (DMACIntTCStat & (1 << 0)) {
    522c:	4a1d      	ldr	r2, [pc, #116]	; (52a4 <DMA_IRQHandler+0xe4>)
    522e:	6812      	ldr	r2, [r2, #0]
    5230:	07d1      	lsls	r1, r2, #31
    5232:	d526      	bpl.n	5282 <DMA_IRQHandler+0xc2>
				DMACIntTCClear = (1 << 0);
    5234:	4a1c      	ldr	r2, [pc, #112]	; (52a8 <DMA_IRQHandler+0xe8>)
    5236:	2101      	movs	r1, #1
    5238:	6011      	str	r1, [r2, #0]

				if (hop_mode == HOP_BLUETOOTH)
    523a:	7a9a      	ldrb	r2, [r3, #10]
    523c:	2a02      	cmp	r2, #2
    523e:	d103      	bne.n	5248 <DMA_IRQHandler+0x88>
					DIO_SSEL_SET;
    5240:	4a1a      	ldr	r2, [pc, #104]	; (52ac <DMA_IRQHandler+0xec>)
    5242:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5246:	6011      	str	r1, [r2, #0]

				idle_buf_clk100ns  = CLK100NS;
    5248:	4a19      	ldr	r2, [pc, #100]	; (52b0 <DMA_IRQHandler+0xf0>)
    524a:	481a      	ldr	r0, [pc, #104]	; (52b4 <DMA_IRQHandler+0xf4>)
    524c:	6811      	ldr	r1, [r2, #0]
    524e:	6800      	ldr	r0, [r0, #0]
    5250:	f3c1 0113 	ubfx	r1, r1, #0, #20
    5254:	f640 4435 	movw	r4, #3125	; 0xc35
    5258:	fb04 0101 	mla	r1, r4, r1, r0
    525c:	6059      	str	r1, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    525e:	6812      	ldr	r2, [r2, #0]
    5260:	f3c2 5207 	ubfx	r2, r2, #20, #8
    5264:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    5266:	4a14      	ldr	r2, [pc, #80]	; (52b8 <DMA_IRQHandler+0xf8>)
    5268:	8812      	ldrh	r2, [r2, #0]
    526a:	b292      	uxth	r2, r2
    526c:	811a      	strh	r2, [r3, #8]

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    526e:	4a13      	ldr	r2, [pc, #76]	; (52bc <DMA_IRQHandler+0xfc>)
				active_rxbuf = idle_rxbuf;
    5270:	4b13      	ldr	r3, [pc, #76]	; (52c0 <DMA_IRQHandler+0x100>)
				idle_buf_clk100ns  = CLK100NS;
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    5272:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    5274:	6818      	ldr	r0, [r3, #0]
    5276:	6010      	str	r0, [r2, #0]
				idle_rxbuf = tmp;
    5278:	6019      	str	r1, [r3, #0]

				++rx_tc;
    527a:	4b12      	ldr	r3, [pc, #72]	; (52c4 <DMA_IRQHandler+0x104>)
    527c:	681a      	ldr	r2, [r3, #0]
    527e:	3201      	adds	r2, #1
    5280:	601a      	str	r2, [r3, #0]
			}
			if (DMACIntErrStat & (1 << 0)) {
    5282:	4b11      	ldr	r3, [pc, #68]	; (52c8 <DMA_IRQHandler+0x108>)
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	07da      	lsls	r2, r3, #31
    5288:	d506      	bpl.n	5298 <DMA_IRQHandler+0xd8>
				DMACIntErrClr = (1 << 0);
    528a:	4b10      	ldr	r3, [pc, #64]	; (52cc <DMA_IRQHandler+0x10c>)
    528c:	2201      	movs	r2, #1
    528e:	601a      	str	r2, [r3, #0]
				++rx_err;
    5290:	4b0f      	ldr	r3, [pc, #60]	; (52d0 <DMA_IRQHandler+0x110>)
    5292:	681a      	ldr	r2, [r3, #0]
    5294:	3201      	adds	r2, #1
    5296:	601a      	str	r2, [r3, #0]
    5298:	bd10      	pop	{r4, pc}
    529a:	bf00      	nop
    529c:	10000e34 	.word	0x10000e34
    52a0:	50004000 	.word	0x50004000
    52a4:	50004004 	.word	0x50004004
    52a8:	50004008 	.word	0x50004008
    52ac:	2009c098 	.word	0x2009c098
    52b0:	1000105c 	.word	0x1000105c
    52b4:	40004008 	.word	0x40004008
    52b8:	1000044c 	.word	0x1000044c
    52bc:	1000109c 	.word	0x1000109c
    52c0:	100011b8 	.word	0x100011b8
    52c4:	1000103c 	.word	0x1000103c
    52c8:	5000400c 	.word	0x5000400c
    52cc:	50004010 	.word	0x50004010
    52d0:	10001554 	.word	0x10001554

000052d4 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data, u16 tx_pwr, u16 ch)
{
    52d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52d8:	b091      	sub	sp, #68	; 0x44
    52da:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
    52de:	4605      	mov	r5, r0
    52e0:	4689      	mov	r9, r1
    52e2:	4692      	mov	sl, r2
	u8 txbuf[64];
	u8 tx_len;
	u8 byte;
	u16 gio_save;
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);
    52e4:	f003 080f 	and.w	r8, r3, #15
    52e8:	f10d 30ff 	add.w	r0, sp, #4294967295	; 0xffffffff
    52ec:	f10d 0103 	add.w	r1, sp, #3

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
    52f0:	2200      	movs	r2, #0
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
    52f2:	b2eb      	uxtb	r3, r5
		aa >>= 8;
		txbuf[i] = 0;
    52f4:	7042      	strb	r2, [r0, #1]
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
    52f6:	0a2d      	lsrs	r5, r5, #8
		txbuf[i] = 0;
    52f8:	2407      	movs	r4, #7
		for (j = 0; j < 8; ++j) {
			txbuf[i] |= (byte & 1) << (7 - j);
    52fa:	f003 0601 	and.w	r6, r3, #1
    52fe:	40a6      	lsls	r6, r4
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5300:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
			txbuf[i] |= (byte & 1) << (7 - j);
    5304:	ea46 0202 	orr.w	r2, r6, r2
    5308:	b2d2      	uxtb	r2, r2
			byte >>= 1;
    530a:	ea4f 0353 	mov.w	r3, r3, lsr #1
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    530e:	d2f4      	bcs.n	52fa <le_transmit+0x26>
    5310:	f800 2f01 	strb.w	r2, [r0, #1]!
	u16 gio_save;
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5314:	4288      	cmp	r0, r1
    5316:	d1eb      	bne.n	52f0 <le_transmit+0x1c>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
    5318:	f1a7 0062 	sub.w	r0, r7, #98	; 0x62
    531c:	b2c0      	uxtb	r0, r0
    531e:	f002 f8c5 	bl	74ac <btle_channel_index>
    5322:	4b53      	ldr	r3, [pc, #332]	; (5470 <le_transmit+0x19c>)
	for (i = 0; i < len; ++i) {
    5324:	2400      	movs	r4, #0
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
    5326:	5c1e      	ldrb	r6, [r3, r0]
	for (i = 0; i < len; ++i) {
    5328:	454c      	cmp	r4, r9
    532a:	d222      	bcs.n	5372 <le_transmit+0x9e>
    532c:	f10d 0e00 	add.w	lr, sp, #0
		byte = data[i];
    5330:	f81a 3004 	ldrb.w	r3, [sl, r4]
    5334:	44a6      	add	lr, r4
    5336:	2007      	movs	r0, #7
    5338:	2200      	movs	r2, #0
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    533a:	494d      	ldr	r1, [pc, #308]	; (5470 <le_transmit+0x19c>)
    533c:	f003 0c01 	and.w	ip, r3, #1
    5340:	4431      	add	r1, r6
    5342:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    5346:	3601      	adds	r6, #1
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    5348:	ea8c 0c01 	eor.w	ip, ip, r1
			idx = (idx + 1) % sizeof(whitening);
    534c:	217f      	movs	r1, #127	; 0x7f
    534e:	fbb6 fbf1 	udiv	fp, r6, r1
    5352:	fb01 661b 	mls	r6, r1, fp, r6
			//bit = (byte & 1);
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    5356:	fa0c f100 	lsl.w	r1, ip, r0
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    535a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			//bit = (byte & 1);
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    535e:	ea41 0202 	orr.w	r2, r1, r2
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			//bit = (byte & 1);
			byte >>= 1;
    5362:	ea4f 0353 	mov.w	r3, r3, lsr #1
			txbuf[i+4] |= bit << (7 - j);
    5366:	b2d2      	uxtb	r2, r2
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5368:	d2e7      	bcs.n	533a <le_transmit+0x66>
    536a:	f88e 2004 	strb.w	r2, [lr, #4]
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
    536e:	3401      	adds	r4, #1
    5370:	e7da      	b.n	5328 <le_transmit+0x54>
	}

	len += 4; // include the AA in len

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5372:	200d      	movs	r0, #13
    5374:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5378:	f003 fa1d 	bl	87b6 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    537c:	2012      	movs	r0, #18
    537e:	f642 3122 	movw	r1, #11042	; 0x2b22
    5382:	f003 fa18 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5386:	2014      	movs	r0, #20
    5388:	f241 314b 	movw	r1, #4939	; 0x134b
    538c:	f003 fa13 	bl	87b6 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5390:	2020      	movs	r0, #32
    5392:	f640 4101 	movw	r1, #3073	; 0xc01
    5396:	f003 fa0e 	bl	87b6 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   jw_channel);
    539a:	2002      	movs	r0, #2
    539c:	4639      	mov	r1, r7
    539e:	f003 fa0a 	bl	87b6 <cc2400_set>
	// 011 : -7
	// 100 : -4.6
	// 101 : -2.8
	// 110 : -1.3
	// 111 : 0
	cc2400_set(FREND, tx_pwr);
    53a2:	2005      	movs	r0, #5
    53a4:	4641      	mov	r1, r8
    53a6:	f003 fa06 	bl	87b6 <cc2400_set>
	//cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    53aa:	2003      	movs	r0, #3
    53ac:	2140      	movs	r1, #64	; 0x40
    53ae:	f003 fa02 	bl	87b6 <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    53b2:	2114      	movs	r1, #20
    53b4:	2023      	movs	r0, #35	; 0x23
    53b6:	f003 f9fe 	bl	87b6 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    53ba:	07ea      	lsls	r2, r5, #31
		cc2400_set(SYNCH,   0xaaaa);
    53bc:	bf4c      	ite	mi
    53be:	f64a 21aa 	movwmi	r1, #43690	; 0xaaaa
	else
		cc2400_set(SYNCH,   0x5555);
    53c2:	f245 5155 	movwpl	r1, #21845	; 0x5555
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
		cc2400_set(SYNCH,   0xaaaa);
    53c6:	202d      	movs	r0, #45	; 0x2d
	else
		cc2400_set(SYNCH,   0x5555);
    53c8:	f003 f9f5 	bl	87b6 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    53cc:	2008      	movs	r0, #8
    53ce:	f003 f9e9 	bl	87a4 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53d2:	f3c0 0108 	ubfx	r1, r0, #0, #9
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    53d6:	f109 0904 	add.w	r9, r9, #4
		cc2400_set(SYNCH,   0xaaaa);
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    53da:	4604      	mov	r4, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53dc:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    53e0:	2008      	movs	r0, #8
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    53e2:	fa5f f989 	uxtb.w	r9, r9
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53e6:	f003 f9e6 	bl	87b6 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    53ea:	f003 fab5 	bl	8958 <cc2400_status>
    53ee:	0643      	lsls	r3, r0, #25
    53f0:	d5fb      	bpl.n	53ea <le_transmit+0x116>
	cc2400_strobe(SFSON);
    53f2:	2061      	movs	r0, #97	; 0x61
    53f4:	f003 fab7 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    53f8:	f003 faae 	bl	8958 <cc2400_status>
    53fc:	0747      	lsls	r7, r0, #29
    53fe:	d5fb      	bpl.n	53f8 <le_transmit+0x124>
	TXLED_SET;
    5400:	4b1c      	ldr	r3, [pc, #112]	; (5474 <le_transmit+0x1a0>)
    5402:	f44f 7280 	mov.w	r2, #256	; 0x100
    5406:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5408:	2280      	movs	r2, #128	; 0x80
    540a:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    540c:	200e      	movs	r0, #14
    540e:	f003 f9c9 	bl	87a4 <cc2400_get>
    5412:	f000 001f 	and.w	r0, r0, #31
    5416:	280f      	cmp	r0, #15
    5418:	d1f8      	bne.n	540c <le_transmit+0x138>
	cc2400_strobe(STX);
    541a:	2063      	movs	r0, #99	; 0x63
    541c:	f003 faa3 	bl	8966 <cc2400_strobe>
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
	}*/

	//JWHUR cc2400 fifo write
	while (GIO6) ;
    5420:	4b15      	ldr	r3, [pc, #84]	; (5478 <le_transmit+0x1a4>)
    5422:	681b      	ldr	r3, [r3, #0]
    5424:	075e      	lsls	r6, r3, #29
    5426:	d4fb      	bmi.n	5420 <le_transmit+0x14c>
	if (len > 46) len = 46;
	cc2400_fifo_write(len, txbuf);
    5428:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    542c:	bf34      	ite	cc
    542e:	4648      	movcc	r0, r9
    5430:	202e      	movcs	r0, #46	; 0x2e
    5432:	4669      	mov	r1, sp
    5434:	f003 fa00 	bl	8838 <cc2400_fifo_write>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5438:	200e      	movs	r0, #14
    543a:	f003 f9b3 	bl	87a4 <cc2400_get>
    543e:	f000 001f 	and.w	r0, r0, #31
    5442:	280f      	cmp	r0, #15
    5444:	d1f8      	bne.n	5438 <le_transmit+0x164>
	TXLED_CLR;
    5446:	4b0d      	ldr	r3, [pc, #52]	; (547c <le_transmit+0x1a8>)
    5448:	f44f 7280 	mov.w	r2, #256	; 0x100
    544c:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    544e:	2064      	movs	r0, #100	; 0x64
    5450:	f003 fa89 	bl	8966 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5454:	f003 fa80 	bl	8958 <cc2400_status>
    5458:	0745      	lsls	r5, r0, #29
    545a:	d4fb      	bmi.n	5454 <le_transmit+0x180>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    545c:	4b08      	ldr	r3, [pc, #32]	; (5480 <le_transmit+0x1ac>)
    545e:	2280      	movs	r2, #128	; 0x80
    5460:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5462:	2008      	movs	r0, #8
    5464:	4621      	mov	r1, r4
    5466:	f003 f9a6 	bl	87b6 <cc2400_set>
}
    546a:	b011      	add	sp, #68	; 0x44
    546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5470:	00009d14 	.word	0x00009d14
    5474:	2009c038 	.word	0x2009c038
    5478:	2009c054 	.word	0x2009c054
    547c:	2009c03c 	.word	0x2009c03c
    5480:	2009c05c 	.word	0x2009c05c

00005484 <le_jam>:

void le_jam(void) {
    5484:	b508      	push	{r3, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    5486:	200d      	movs	r0, #13
    5488:	f647 71ff 	movw	r1, #32767	; 0x7fff
    548c:	f003 f993 	bl	87b6 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5490:	2012      	movs	r0, #18
    5492:	f642 3122 	movw	r1, #11042	; 0x2b22
    5496:	f003 f98e 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    549a:	2014      	movs	r0, #20
    549c:	f242 314b 	movw	r1, #9035	; 0x234b
    54a0:	f003 f989 	bl	87b6 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    54a4:	2020      	movs	r0, #32
    54a6:	f640 4101 	movw	r1, #3073	; 0xc01
    54aa:	f003 f984 	bl	87b6 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    54ae:	2005      	movs	r0, #5
    54b0:	210b      	movs	r1, #11
    54b2:	f003 f980 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    54b6:	2003      	movs	r0, #3
    54b8:	2140      	movs	r1, #64	; 0x40
    54ba:	f003 f97c 	bl	87b6 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    54be:	f003 fa4b 	bl	8958 <cc2400_status>
    54c2:	0640      	lsls	r0, r0, #25
    54c4:	d5fb      	bpl.n	54be <le_jam+0x3a>
	cc2400_strobe(SFSON);
    54c6:	2061      	movs	r0, #97	; 0x61
    54c8:	f003 fa4d 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    54cc:	f003 fa44 	bl	8958 <cc2400_status>
    54d0:	0741      	lsls	r1, r0, #29
    54d2:	d5fb      	bpl.n	54cc <le_jam+0x48>
	TXLED_SET;
    54d4:	4b08      	ldr	r3, [pc, #32]	; (54f8 <le_jam+0x74>)
    54d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    54da:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    54dc:	2280      	movs	r2, #128	; 0x80
    54de:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    54e0:	200e      	movs	r0, #14
    54e2:	f003 f95f 	bl	87a4 <cc2400_get>
    54e6:	f000 001f 	and.w	r0, r0, #31
    54ea:	280f      	cmp	r0, #15
    54ec:	d1f8      	bne.n	54e0 <le_jam+0x5c>
	cc2400_strobe(STX);
    54ee:	2063      	movs	r0, #99	; 0x63
#endif
}
    54f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);
    54f4:	f003 ba37 	b.w	8966 <cc2400_strobe>
    54f8:	2009c038 	.word	0x2009c038

000054fc <hop>:
}

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    54fc:	b538      	push	{r3, r4, r5, lr}
	do_hop = 0;
    54fe:	4c5f      	ldr	r4, [pc, #380]	; (567c <hop+0x180>)
    5500:	2300      	movs	r3, #0
    5502:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    5504:	4b5e      	ldr	r3, [pc, #376]	; (5680 <hop+0x184>)
    5506:	4a5f      	ldr	r2, [pc, #380]	; (5684 <hop+0x188>)
    5508:	6819      	ldr	r1, [r3, #0]
    550a:	6011      	str	r1, [r2, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    550c:	7aa2      	ldrb	r2, [r4, #10]
    550e:	b94a      	cbnz	r2, 5524 <hop+0x28>
		if (cc2400_get(FSDIV) == (channel - 1))
    5510:	2002      	movs	r0, #2
    5512:	f003 f947 	bl	87a4 <cc2400_get>
    5516:	4b5c      	ldr	r3, [pc, #368]	; (5688 <hop+0x18c>)
    5518:	881b      	ldrh	r3, [r3, #0]
    551a:	b29b      	uxth	r3, r3
    551c:	3b01      	subs	r3, #1
    551e:	4298      	cmp	r0, r3
    5520:	d17f      	bne.n	5622 <hop+0x126>
    5522:	bd38      	pop	{r3, r4, r5, pc}
			return;
	}
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
    5524:	7aa2      	ldrb	r2, [r4, #10]
    5526:	2a01      	cmp	r2, #1
    5528:	d131      	bne.n	558e <hop+0x92>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    552a:	4b58      	ldr	r3, [pc, #352]	; (568c <hop+0x190>)
    552c:	7819      	ldrb	r1, [r3, #0]
    552e:	4b58      	ldr	r3, [pc, #352]	; (5690 <hop+0x194>)
    5530:	7818      	ldrb	r0, [r3, #0]
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
		do {
			channel += 32;
    5532:	4b55      	ldr	r3, [pc, #340]	; (5688 <hop+0x18c>)
    5534:	881a      	ldrh	r2, [r3, #0]
    5536:	b292      	uxth	r2, r2
    5538:	3220      	adds	r2, #32
    553a:	b292      	uxth	r2, r2
    553c:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    553e:	881a      	ldrh	r2, [r3, #0]
    5540:	b292      	uxth	r2, r2
    5542:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    5546:	d904      	bls.n	5552 <hop+0x56>
				channel -= 79;
    5548:	881a      	ldrh	r2, [r3, #0]
    554a:	b292      	uxth	r2, r2
    554c:	3a4f      	subs	r2, #79	; 0x4f
    554e:	b292      	uxth	r2, r2
    5550:	801a      	strh	r2, [r3, #0]
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    5552:	2900      	cmp	r1, #0
    5554:	d065      	beq.n	5622 <hop+0x126>
    5556:	2800      	cmp	r0, #0
    5558:	d063      	beq.n	5622 <hop+0x126>
    555a:	881a      	ldrh	r2, [r3, #0]
    555c:	881d      	ldrh	r5, [r3, #0]
    555e:	b292      	uxth	r2, r2
    5560:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    5564:	2208      	movs	r2, #8
    5566:	fb93 f3f2 	sdiv	r3, r3, r2
    556a:	4a4a      	ldr	r2, [pc, #296]	; (5694 <hop+0x198>)
    556c:	b2ad      	uxth	r5, r5
    556e:	5cd2      	ldrb	r2, [r2, r3]
    5570:	4b49      	ldr	r3, [pc, #292]	; (5698 <hop+0x19c>)
    5572:	f6a5 1562 	subw	r5, r5, #2402	; 0x962
    5576:	402b      	ands	r3, r5
    5578:	2b00      	cmp	r3, #0
    557a:	da03      	bge.n	5584 <hop+0x88>
    557c:	3b01      	subs	r3, #1
    557e:	f063 0307 	orn	r3, r3, #7
    5582:	3301      	adds	r3, #1
    5584:	fa42 f303 	asr.w	r3, r2, r3
    5588:	07dd      	lsls	r5, r3, #31
    558a:	d5d2      	bpl.n	5532 <hop+0x36>
    558c:	e049      	b.n	5622 <hop+0x126>
	}

	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
    558e:	7aa2      	ldrb	r2, [r4, #10]
    5590:	2a05      	cmp	r2, #5
    5592:	d12d      	bne.n	55f0 <hop+0xf4>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5594:	4b3d      	ldr	r3, [pc, #244]	; (568c <hop+0x190>)
    5596:	7819      	ldrb	r1, [r3, #0]
	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
		do {
			channel += 32;
    5598:	4b3b      	ldr	r3, [pc, #236]	; (5688 <hop+0x18c>)
    559a:	881a      	ldrh	r2, [r3, #0]
    559c:	b292      	uxth	r2, r2
    559e:	3220      	adds	r2, #32
    55a0:	b292      	uxth	r2, r2
    55a2:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    55a4:	881a      	ldrh	r2, [r3, #0]
    55a6:	b292      	uxth	r2, r2
    55a8:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    55ac:	d904      	bls.n	55b8 <hop+0xbc>
				channel -= 79;
    55ae:	881a      	ldrh	r2, [r3, #0]
    55b0:	b292      	uxth	r2, r2
    55b2:	3a4f      	subs	r2, #79	; 0x4f
    55b4:	b292      	uxth	r2, r2
    55b6:	801a      	strh	r2, [r3, #0]
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    55b8:	294f      	cmp	r1, #79	; 0x4f
    55ba:	d032      	beq.n	5622 <hop+0x126>
    55bc:	881a      	ldrh	r2, [r3, #0]
    55be:	8818      	ldrh	r0, [r3, #0]
    55c0:	b292      	uxth	r2, r2
    55c2:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    55c6:	2208      	movs	r2, #8
    55c8:	fb93 f3f2 	sdiv	r3, r3, r2
    55cc:	4a31      	ldr	r2, [pc, #196]	; (5694 <hop+0x198>)
    55ce:	b280      	uxth	r0, r0
    55d0:	5cd2      	ldrb	r2, [r2, r3]
    55d2:	4b31      	ldr	r3, [pc, #196]	; (5698 <hop+0x19c>)
    55d4:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    55d8:	4003      	ands	r3, r0
    55da:	2b00      	cmp	r3, #0
    55dc:	da03      	bge.n	55e6 <hop+0xea>
    55de:	3b01      	subs	r3, #1
    55e0:	f063 0307 	orn	r3, r3, #7
    55e4:	3301      	adds	r3, #1
    55e6:	fa42 f303 	asr.w	r3, r2, r3
    55ea:	07da      	lsls	r2, r3, #31
    55ec:	d4d4      	bmi.n	5598 <hop+0x9c>
    55ee:	e018      	b.n	5622 <hop+0x126>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    55f0:	7aa2      	ldrb	r2, [r4, #10]
    55f2:	2a02      	cmp	r2, #2
    55f4:	d105      	bne.n	5602 <hop+0x106>
		channel = next_hop(clkn);
    55f6:	6818      	ldr	r0, [r3, #0]
    55f8:	f001 feba 	bl	7370 <next_hop>
    55fc:	4b22      	ldr	r3, [pc, #136]	; (5688 <hop+0x18c>)
    55fe:	8018      	strh	r0, [r3, #0]
    5600:	e00f      	b.n	5622 <hop+0x126>
	}

	else if (hop_mode == HOP_BTLE) {
    5602:	7aa3      	ldrb	r3, [r4, #10]
    5604:	2b03      	cmp	r3, #3
    5606:	d105      	bne.n	5614 <hop+0x118>
		channel = btle_next_hop(&le);
    5608:	4d1f      	ldr	r5, [pc, #124]	; (5688 <hop+0x18c>)
    560a:	1d28      	adds	r0, r5, #4
    560c:	f001 ff79 	bl	7502 <btle_next_hop>
    5610:	8028      	strh	r0, [r5, #0]
    5612:	e006      	b.n	5622 <hop+0x126>
	}

	else if (hop_mode == HOP_DIRECT) {
    5614:	7aa3      	ldrb	r3, [r4, #10]
    5616:	2b04      	cmp	r3, #4
    5618:	d103      	bne.n	5622 <hop+0x126>
		channel = hop_direct_channel;
    561a:	89a2      	ldrh	r2, [r4, #12]
    561c:	4b1a      	ldr	r3, [pc, #104]	; (5688 <hop+0x18c>)
    561e:	b292      	uxth	r2, r2
    5620:	801a      	strh	r2, [r3, #0]
	}
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    5622:	2064      	movs	r0, #100	; 0x64
    5624:	f003 f99f 	bl	8966 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5628:	f003 f996 	bl	8958 <cc2400_status>
    562c:	0743      	lsls	r3, r0, #29
    562e:	d4fb      	bmi.n	5628 <hop+0x12c>
    5630:	4d15      	ldr	r5, [pc, #84]	; (5688 <hop+0x18c>)

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    5632:	7c60      	ldrb	r0, [r4, #17]
		cc2400_set(FSDIV, channel);
    5634:	8829      	ldrh	r1, [r5, #0]
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    5636:	b2c0      	uxtb	r0, r0
    5638:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel);
    563a:	b289      	uxth	r1, r1
	else
		cc2400_set(FSDIV, channel - 1);
    563c:	bf1e      	ittt	ne
    563e:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    5642:	2002      	movne	r0, #2
    5644:	b289      	uxthne	r1, r1
    5646:	f003 f8b6 	bl	87b6 <cc2400_set>

	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    564a:	7aa3      	ldrb	r3, [r4, #10]
    564c:	b11b      	cbz	r3, 5656 <hop+0x15a>
		cs_threshold_calc_and_set(channel);
    564e:	8828      	ldrh	r0, [r5, #0]
    5650:	b280      	uxth	r0, r0
    5652:	f002 f92d 	bl	78b0 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    5656:	2061      	movs	r0, #97	; 0x61
    5658:	f003 f985 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    565c:	f003 f97c 	bl	8958 <cc2400_status>
    5660:	0745      	lsls	r5, r0, #29
    5662:	d5fb      	bpl.n	565c <hop+0x160>

	dma_discard = 1;
    5664:	2301      	movs	r3, #1
    5666:	7423      	strb	r3, [r4, #16]

	if(mode == MODE_TX_SYMBOLS)
    5668:	7c63      	ldrb	r3, [r4, #17]
    566a:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    566c:	bf0c      	ite	eq
    566e:	2063      	moveq	r0, #99	; 0x63
	else
		cc2400_strobe(SRX);
    5670:	2062      	movne	r0, #98	; 0x62
}
    5672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	dma_discard = 1;

	if(mode == MODE_TX_SYMBOLS)
		cc2400_strobe(STX);
	else
		cc2400_strobe(SRX);
    5676:	f003 b976 	b.w	8966 <cc2400_strobe>
    567a:	bf00      	nop
    567c:	10000e34 	.word	0x10000e34
    5680:	1000105c 	.word	0x1000105c
    5684:	10001038 	.word	0x10001038
    5688:	1000044c 	.word	0x1000044c
    568c:	10001041 	.word	0x10001041
    5690:	100014df 	.word	0x100014df
    5694:	10001043 	.word	0x10001043
    5698:	80000007 	.word	0x80000007

0000569c <bt_stream_rx>:
}

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    569c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int8_t rssi;
	int8_t rssi_at_trigger;

	RXLED_CLR;
    56a0:	4b49      	ldr	r3, [pc, #292]	; (57c8 <bt_stream_rx+0x12c>)
    56a2:	2210      	movs	r2, #16
    56a4:	601a      	str	r2, [r3, #0]

	queue_init();
    56a6:	f001 fffb 	bl	76a0 <queue_init>
	dio_ssp_init();
    56aa:	f002 fff3 	bl	8694 <dio_ssp_init>
	dma_init();
    56ae:	f002 f9ef 	bl	7a90 <dma_init>
	dio_ssp_start();
    56b2:	f002 fa73 	bl	7b9c <dio_ssp_start>

	cc2400_rx();
    56b6:	f7fe fe79 	bl	43ac <cc2400_rx>

	cs_trigger_enable();
    56ba:	f002 f92b 	bl	7914 <cs_trigger_enable>

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    56be:	4c43      	ldr	r4, [pc, #268]	; (57cc <bt_stream_rx+0x130>)
    56c0:	7ca3      	ldrb	r3, [r4, #18]
    56c2:	46a1      	mov	r9, r4
    56c4:	2b01      	cmp	r3, #1
    56c6:	d175      	bne.n	57b4 <bt_stream_rx+0x118>
	{

		RXLED_CLR;
    56c8:	4b3f      	ldr	r3, [pc, #252]	; (57c8 <bt_stream_rx+0x12c>)
    56ca:	2210      	movs	r2, #16
    56cc:	601a      	str	r2, [r3, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    56ce:	f002 f877 	bl	77c0 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    56d2:	2580      	movs	r5, #128	; 0x80
		while (!rx_tc) {
    56d4:	4f3e      	ldr	r7, [pc, #248]	; (57d0 <bt_stream_rx+0x134>)
    56d6:	4e3f      	ldr	r6, [pc, #252]	; (57d4 <bt_stream_rx+0x138>)
    56d8:	683b      	ldr	r3, [r7, #0]
    56da:	f8df 8118 	ldr.w	r8, [pc, #280]	; 57f4 <bt_stream_rx+0x158>
    56de:	bb2b      	cbnz	r3, 572c <bt_stream_rx+0x90>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    56e0:	2006      	movs	r0, #6
    56e2:	f003 f85f 	bl	87a4 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    56e6:	7833      	ldrb	r3, [r6, #0]
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while (!rx_tc) {
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    56e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    56ec:	b163      	cbz	r3, 5708 <bt_stream_rx+0x6c>
    56ee:	b26b      	sxtb	r3, r5
    56f0:	3380      	adds	r3, #128	; 0x80
    56f2:	d109      	bne.n	5708 <bt_stream_rx+0x6c>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    56f4:	4b38      	ldr	r3, [pc, #224]	; (57d8 <bt_stream_rx+0x13c>)
    56f6:	b240      	sxtb	r0, r0
    56f8:	f993 5000 	ldrsb.w	r5, [r3]
    56fc:	3536      	adds	r5, #54	; 0x36
    56fe:	42a8      	cmp	r0, r5
    5700:	bfa8      	it	ge
    5702:	4605      	movge	r5, r0
    5704:	b2ed      	uxtb	r5, r5
				rssi_at_trigger = rssi;
    5706:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    5708:	b240      	sxtb	r0, r0
    570a:	f002 f875 	bl	77f8 <rssi_add>

			handle_usb(clkn);
    570e:	f8d8 0000 	ldr.w	r0, [r8]
    5712:	f002 f841 	bl	7798 <handle_usb>

			/* If timer says time to hop, do it. */
			if (do_hop) {
    5716:	f899 300b 	ldrb.w	r3, [r9, #11]
    571a:	b113      	cbz	r3, 5722 <bt_stream_rx+0x86>
				hop();
    571c:	f7ff feee 	bl	54fc <hop>
    5720:	e7d8      	b.n	56d4 <bt_stream_rx+0x38>
			} else {
				TXLED_CLR;
    5722:	4b29      	ldr	r3, [pc, #164]	; (57c8 <bt_stream_rx+0x12c>)
    5724:	f44f 7280 	mov.w	r2, #256	; 0x100
    5728:	601a      	str	r2, [r3, #0]
    572a:	e7d3      	b.n	56d4 <bt_stream_rx+0x38>
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    572c:	4b2b      	ldr	r3, [pc, #172]	; (57dc <bt_stream_rx+0x140>)
    572e:	2210      	movs	r2, #16

		if (rx_err) {
    5730:	4d2b      	ldr	r5, [pc, #172]	; (57e0 <bt_stream_rx+0x144>)
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    5732:	601a      	str	r2, [r3, #0]

		if (rx_err) {
    5734:	682b      	ldr	r3, [r5, #0]
    5736:	b11b      	cbz	r3, 5740 <bt_stream_rx+0xa4>
			status |= DMA_ERROR;
    5738:	7863      	ldrb	r3, [r4, #1]
    573a:	f043 0302 	orr.w	r3, r3, #2
    573e:	7063      	strb	r3, [r4, #1]
		}

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5740:	683b      	ldr	r3, [r7, #0]
    5742:	2b01      	cmp	r3, #1
    5744:	d903      	bls.n	574e <bt_stream_rx+0xb2>
			status |= DMA_OVERFLOW;
    5746:	7863      	ldrb	r3, [r4, #1]
    5748:	f043 0301 	orr.w	r3, r3, #1
    574c:	7063      	strb	r3, [r4, #1]

		if (dma_discard) {
    574e:	7c22      	ldrb	r2, [r4, #16]
    5750:	4b1e      	ldr	r3, [pc, #120]	; (57cc <bt_stream_rx+0x130>)
    5752:	b12a      	cbz	r2, 5760 <bt_stream_rx+0xc4>
			status |= DISCARD;
    5754:	785a      	ldrb	r2, [r3, #1]
    5756:	f042 0220 	orr.w	r2, r2, #32
    575a:	705a      	strb	r2, [r3, #1]
			dma_discard = 0;
    575c:	2200      	movs	r2, #0
    575e:	741a      	strb	r2, [r3, #16]
		}

		rssi_iir_update(channel);
    5760:	4b20      	ldr	r3, [pc, #128]	; (57e4 <bt_stream_rx+0x148>)
    5762:	8818      	ldrh	r0, [r3, #0]
    5764:	b280      	uxth	r0, r0
    5766:	f002 f867 	bl	7838 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    576a:	7833      	ldrb	r3, [r6, #0]
    576c:	b913      	cbnz	r3, 5774 <bt_stream_rx+0xd8>
    576e:	4b1e      	ldr	r3, [pc, #120]	; (57e8 <bt_stream_rx+0x14c>)
    5770:	781b      	ldrb	r3, [r3, #0]
    5772:	b12b      	cbz	r3, 5780 <bt_stream_rx+0xe4>
			status |= CS_TRIGGER;
    5774:	7863      	ldrb	r3, [r4, #1]
    5776:	f043 0308 	orr.w	r3, r3, #8
    577a:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    577c:	2300      	movs	r3, #0
    577e:	7033      	strb	r3, [r6, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5780:	4b15      	ldr	r3, [pc, #84]	; (57d8 <bt_stream_rx+0x13c>)
    5782:	f993 2000 	ldrsb.w	r2, [r3]
    5786:	4b19      	ldr	r3, [pc, #100]	; (57ec <bt_stream_rx+0x150>)
    5788:	3235      	adds	r2, #53	; 0x35
    578a:	f993 3000 	ldrsb.w	r3, [r3]
    578e:	429a      	cmp	r2, r3
    5790:	da03      	bge.n	579a <bt_stream_rx+0xfe>
			status |= RSSI_TRIGGER;
    5792:	7863      	ldrb	r3, [r4, #1]
    5794:	f043 0310 	orr.w	r3, r3, #16
    5798:	7063      	strb	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    579a:	4b15      	ldr	r3, [pc, #84]	; (57f0 <bt_stream_rx+0x154>)
    579c:	2000      	movs	r0, #0
    579e:	6819      	ldr	r1, [r3, #0]
    57a0:	f7fe feae 	bl	4500 <enqueue>

		handle_usb(clkn);
    57a4:	f8d8 0000 	ldr.w	r0, [r8]
    57a8:	f001 fff6 	bl	7798 <handle_usb>
		rx_tc = 0;
    57ac:	2300      	movs	r3, #0
    57ae:	603b      	str	r3, [r7, #0]
		rx_err = 0;
    57b0:	602b      	str	r3, [r5, #0]
    57b2:	e784      	b.n	56be <bt_stream_rx+0x22>

	cc2400_rx();

	cs_trigger_enable();

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    57b4:	7ca3      	ldrb	r3, [r4, #18]
    57b6:	2b08      	cmp	r3, #8
    57b8:	d086      	beq.n	56c8 <bt_stream_rx+0x2c>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    57ba:	f002 fa15 	bl	7be8 <dio_ssp_stop>
	cs_trigger_disable();
}
    57be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
	cs_trigger_disable();
    57c2:	f002 b8bd 	b.w	7940 <cs_trigger_disable>
    57c6:	bf00      	nop
    57c8:	2009c03c 	.word	0x2009c03c
    57cc:	10000e34 	.word	0x10000e34
    57d0:	1000103c 	.word	0x1000103c
    57d4:	10001559 	.word	0x10001559
    57d8:	10001558 	.word	0x10001558
    57dc:	2009c038 	.word	0x2009c038
    57e0:	10001554 	.word	0x10001554
    57e4:	1000044c 	.word	0x1000044c
    57e8:	100011a8 	.word	0x100011a8
    57ec:	10001040 	.word	0x10001040
    57f0:	100011b8 	.word	0x100011b8
    57f4:	1000105c 	.word	0x1000105c

000057f8 <br_transmit>:
 * Transmit a BTBR packet with the specified access code.
 *
 * All modulation parameters are set within this function.
 */
void br_transmit()
{
    57f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    57fc:	4b95      	ldr	r3, [pc, #596]	; (5a54 <br_transmit+0x25c>)
    57fe:	2201      	movs	r2, #1
    5800:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    5804:	2300      	movs	r3, #0
    5806:	4022      	ands	r2, r4
    5808:	402b      	ands	r3, r5
    580a:	ea52 0103 	orrs.w	r1, r2, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    580e:	f04f 0700 	mov.w	r7, #0
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5812:	f245 5355 	movw	r3, #21845	; 0x5555
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5816:	ea4f 76d5 	mov.w	r6, r5, lsr #31
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    581a:	f64a 28aa 	movw	r8, #43690	; 0xaaaa
    581e:	bf18      	it	ne
    5820:	4698      	movne	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    5822:	b2e0      	uxtb	r0, r4
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5824:	2f00      	cmp	r7, #0
    5826:	bf08      	it	eq
    5828:	2e01      	cmpeq	r6, #1
    582a:	bf14      	ite	ne
    582c:	2655      	movne	r6, #85	; 0x55
    582e:	26aa      	moveq	r6, #170	; 0xaa

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    5830:	f7fe fdaa 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5834:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
    5838:	f3c4 2007 	ubfx	r0, r4, #8, #8
    583c:	f7fe fda4 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5840:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
    5844:	f3c4 4007 	ubfx	r0, r4, #16, #8
    5848:	f7fe fd9e 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    584c:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
    5850:	0e20      	lsrs	r0, r4, #24
    5852:	f7fe fd99 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5856:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
    585a:	b2e8      	uxtb	r0, r5
    585c:	f7fe fd94 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5860:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
    5864:	f3c5 2007 	ubfx	r0, r5, #8, #8
    5868:	f7fe fd8e 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    586c:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
    5870:	f3c5 4007 	ubfx	r0, r5, #16, #8
    5874:	f7fe fd88 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5878:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
    587c:	0e28      	lsrs	r0, r5, #24
    587e:	f7fe fd83 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5882:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
    5886:	4630      	mov	r0, r6
    5888:	f7fe fd7e 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    588c:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
    5890:	2077      	movs	r0, #119	; 0x77
    5892:	f7fe fd79 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5896:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
    589a:	2066      	movs	r0, #102	; 0x66
    589c:	f7fe fd74 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58a0:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
    58a4:	2055      	movs	r0, #85	; 0x55
    58a6:	f7fe fd6f 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58aa:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
    58ae:	2044      	movs	r0, #68	; 0x44
    58b0:	f7fe fd6a 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58b4:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
    58b8:	2033      	movs	r0, #51	; 0x33
    58ba:	f7fe fd65 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58be:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
    58c2:	2022      	movs	r0, #34	; 0x22
    58c4:	f7fe fd60 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58c8:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
		reverse8(0x11)
    58cc:	2011      	movs	r0, #17
    58ce:	f7fe fd5b 	bl	4388 <reverse8>
	return reversed;
}

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;
    58d2:	463c      	mov	r4, r7
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58d4:	f88d 000f 	strb.w	r0, [sp, #15]

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58d8:	463b      	mov	r3, r7
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58da:	fa48 f203 	asr.w	r2, r8, r3
    58de:	f1c3 010f 	rsb	r1, r3, #15
    58e2:	f002 0201 	and.w	r2, r2, #1
    58e6:	408a      	lsls	r2, r1

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58e8:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58ea:	4314      	orrs	r4, r2

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58ec:	2b10      	cmp	r3, #16
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58ee:	b2a4      	uxth	r4, r4

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58f0:	d1f3      	bne.n	58da <br_transmit+0xe2>
/* start buffered tx */
static void cc2400_tx_sync(uint32_t sync)
{
#ifdef TX_ENABLE
	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    58f2:	200d      	movs	r0, #13
    58f4:	f647 71ff 	movw	r1, #32767	; 0x7fff
    58f8:	f002 ff5d 	bl	87b6 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    58fc:	2012      	movs	r0, #18
    58fe:	f642 3122 	movw	r1, #11042	; 0x2b22
    5902:	f002 ff58 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5906:	2014      	movs	r0, #20
    5908:	f241 314b 	movw	r1, #4939	; 0x134b
    590c:	f002 ff53 	bl	87b6 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5910:	2020      	movs	r0, #32
    5912:	f640 4101 	movw	r1, #3073	; 0xc01
    5916:	f002 ff4e 	bl	87b6 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
    591a:	4621      	mov	r1, r4
    591c:	202c      	movs	r0, #44	; 0x2c
    591e:	f002 ff4a 	bl	87b6 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5922:	202d      	movs	r0, #45	; 0x2d
    5924:	2100      	movs	r1, #0
    5926:	f002 ff46 	bl	87b6 <cc2400_set>

	cc2400_set(FSDIV,   channel);
    592a:	4b4b      	ldr	r3, [pc, #300]	; (5a58 <br_transmit+0x260>)
    592c:	2002      	movs	r0, #2
    592e:	8819      	ldrh	r1, [r3, #0]
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)

	if (modulation == MOD_BT_BASIC_RATE) {
    5930:	4c4a      	ldr	r4, [pc, #296]	; (5a5c <br_transmit+0x264>)
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);

	cc2400_set(FSDIV,   channel);
    5932:	b289      	uxth	r1, r1
    5934:	f002 ff3f 	bl	87b6 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5938:	2005      	movs	r0, #5
    593a:	210b      	movs	r1, #11
    593c:	f002 ff3b 	bl	87b6 <cc2400_set>

	if (modulation == MOD_BT_BASIC_RATE) {
    5940:	7823      	ldrb	r3, [r4, #0]
    5942:	b913      	cbnz	r3, 594a <br_transmit+0x152>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    5944:	2003      	movs	r0, #3
    5946:	2129      	movs	r1, #41	; 0x29
    5948:	e004      	b.n	5954 <br_transmit+0x15c>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    594a:	7823      	ldrb	r3, [r4, #0]
    594c:	2b01      	cmp	r3, #1
    594e:	d11d      	bne.n	598c <br_transmit+0x194>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5950:	2003      	movs	r0, #3
    5952:	2140      	movs	r1, #64	; 0x40
    5954:	f002 ff2f 	bl	87b6 <cc2400_set>
	} else {
		/* oops */
		return;
	}

	clkn_start();
    5958:	f002 f842 	bl	79e0 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    595c:	f002 fffc 	bl	8958 <cc2400_status>
    5960:	0645      	lsls	r5, r0, #25
    5962:	d5fb      	bpl.n	595c <br_transmit+0x164>
	cc2400_strobe(SFSON);
    5964:	2061      	movs	r0, #97	; 0x61
    5966:	f002 fffe 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    596a:	f002 fff5 	bl	8958 <cc2400_status>
    596e:	0740      	lsls	r0, r0, #29
    5970:	d5fb      	bpl.n	596a <br_transmit+0x172>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5972:	4b3b      	ldr	r3, [pc, #236]	; (5a60 <br_transmit+0x268>)
    5974:	2280      	movs	r2, #128	; 0x80
    5976:	601a      	str	r2, [r3, #0]
#endif

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5978:	200e      	movs	r0, #14
    597a:	f002 ff13 	bl	87a4 <cc2400_get>
    597e:	f000 001f 	and.w	r0, r0, #31
    5982:	280f      	cmp	r0, #15
    5984:	d1f8      	bne.n	5978 <br_transmit+0x180>
	cc2400_strobe(STX);
    5986:	2063      	movs	r0, #99	; 0x63
    5988:	f002 ffed 	bl	8966 <cc2400_strobe>
		reverse8(0x11)
	};

	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    598c:	2114      	movs	r1, #20
    598e:	2023      	movs	r0, #35	; 0x23
    5990:	f002 ff11 	bl	87b6 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5994:	2008      	movs	r0, #8
    5996:	f002 ff05 	bl	87a4 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    599a:	f3c0 0108 	ubfx	r1, r0, #0, #9
	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    599e:	4605      	mov	r5, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    59a0:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    59a4:	2008      	movs	r0, #8
    59a6:	f002 ff06 	bl	87b6 <cc2400_set>
 */
void br_transmit()
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;
    59aa:	2600      	movs	r6, #0

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
    59ac:	7ca3      	ldrb	r3, [r4, #18]
    59ae:	2b02      	cmp	r3, #2
    59b0:	d145      	bne.n	5a3e <br_transmit+0x246>
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    59b2:	0876      	lsrs	r6, r6, #1
    59b4:	4f2b      	ldr	r7, [pc, #172]	; (5a64 <br_transmit+0x26c>)
    59b6:	683b      	ldr	r3, [r7, #0]
    59b8:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
    59bc:	d105      	bne.n	59ca <br_transmit+0x1d2>

			// If timer says time to hop, do it.
			if (do_hop) {
    59be:	7ae3      	ldrb	r3, [r4, #11]
    59c0:	2b00      	cmp	r3, #0
    59c2:	d0f7      	beq.n	59b4 <br_transmit+0x1bc>
				hop();
    59c4:	f7ff fd9a 	bl	54fc <hop>
    59c8:	e7f4      	b.n	59b4 <br_transmit+0x1bc>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    59ca:	4b27      	ldr	r3, [pc, #156]	; (5a68 <br_transmit+0x270>)
    59cc:	681a      	ldr	r2, [r3, #0]
    59ce:	f640 03c9 	movw	r3, #2249	; 0x8c9
    59d2:	429a      	cmp	r2, r3
    59d4:	d9f3      	bls.n	59be <br_transmit+0x1c6>
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    59d6:	4b25      	ldr	r3, [pc, #148]	; (5a6c <br_transmit+0x274>)
    59d8:	f44f 7280 	mov.w	r2, #256	; 0x100
			if (do_hop) {
				hop();
			}
		}

		clkn_saved = clkn;
    59dc:	683e      	ldr	r6, [r7, #0]

		TXLED_SET;

		cc2400_fifo_write(16, data);
    59de:	2010      	movs	r0, #16
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    59e0:	601a      	str	r2, [r3, #0]

		cc2400_fifo_write(16, data);
    59e2:	4669      	mov	r1, sp
    59e4:	f002 ff28 	bl	8838 <cc2400_fifo_write>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    59e8:	200e      	movs	r0, #14
    59ea:	f002 fedb 	bl	87a4 <cc2400_get>
    59ee:	f000 001f 	and.w	r0, r0, #31
    59f2:	280f      	cmp	r0, #15
    59f4:	d1f8      	bne.n	59e8 <br_transmit+0x1f0>
		TXLED_CLR;
    59f6:	4b1e      	ldr	r3, [pc, #120]	; (5a70 <br_transmit+0x278>)
    59f8:	f44f 7280 	mov.w	r2, #256	; 0x100
    59fc:	601a      	str	r2, [r3, #0]

		cc2400_strobe(SRFOFF);
    59fe:	2064      	movs	r0, #100	; 0x64
    5a00:	f002 ffb1 	bl	8966 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    5a04:	f002 ffa8 	bl	8958 <cc2400_status>
    5a08:	0741      	lsls	r1, r0, #29
    5a0a:	d4fb      	bmi.n	5a04 <br_transmit+0x20c>

		while (!(cc2400_status() & XOSC16M_STABLE));
    5a0c:	f002 ffa4 	bl	8958 <cc2400_status>
    5a10:	0642      	lsls	r2, r0, #25
    5a12:	d5fb      	bpl.n	5a0c <br_transmit+0x214>
		cc2400_strobe(SFSON);
    5a14:	2061      	movs	r0, #97	; 0x61
    5a16:	f002 ffa6 	bl	8966 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    5a1a:	f002 ff9d 	bl	8958 <cc2400_status>
    5a1e:	0743      	lsls	r3, r0, #29
    5a20:	d5fb      	bpl.n	5a1a <br_transmit+0x222>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5a22:	200e      	movs	r0, #14
    5a24:	f002 febe 	bl	87a4 <cc2400_get>
    5a28:	f000 001f 	and.w	r0, r0, #31
    5a2c:	280f      	cmp	r0, #15
    5a2e:	d1f8      	bne.n	5a22 <br_transmit+0x22a>
		cc2400_strobe(STX);
    5a30:	2063      	movs	r0, #99	; 0x63
    5a32:	f002 ff98 	bl	8966 <cc2400_strobe>

		handle_usb(clkn);
    5a36:	6838      	ldr	r0, [r7, #0]
    5a38:	f001 feae 	bl	7798 <handle_usb>
    5a3c:	e7b6      	b.n	59ac <br_transmit+0x1b4>
	}

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5a3e:	4b0d      	ldr	r3, [pc, #52]	; (5a74 <br_transmit+0x27c>)
    5a40:	2280      	movs	r2, #128	; 0x80
    5a42:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5a44:	2008      	movs	r0, #8
    5a46:	4629      	mov	r1, r5
    5a48:	f002 feb5 	bl	87b6 <cc2400_set>
}
    5a4c:	b004      	add	sp, #16
    5a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a52:	bf00      	nop
    5a54:	10001560 	.word	0x10001560
    5a58:	1000044c 	.word	0x1000044c
    5a5c:	10000e34 	.word	0x10000e34
    5a60:	2009c058 	.word	0x2009c058
    5a64:	1000105c 	.word	0x1000105c
    5a68:	40004008 	.word	0x40004008
    5a6c:	2009c038 	.word	0x2009c038
    5a70:	2009c03c 	.word	0x2009c03c
    5a74:	2009c05c 	.word	0x2009c05c

00005a78 <reset_le>:
	le.syncl = aa_rev & 0xffff;
	le.synch = aa_rev >> 16;
}

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    5a78:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    5a7a:	480f      	ldr	r0, [pc, #60]	; (5ab8 <reset_le+0x40>)
    5a7c:	f7fe fd8e 	bl	459c <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    5a80:	4b0e      	ldr	r3, [pc, #56]	; (5abc <reset_le+0x44>)
    5a82:	4a0f      	ldr	r2, [pc, #60]	; (5ac0 <reset_le+0x48>)
    5a84:	60da      	str	r2, [r3, #12]
	le.crc_init_reversed = 0xAAAAAA;
    5a86:	4a0f      	ldr	r2, [pc, #60]	; (5ac4 <reset_le+0x4c>)
    5a88:	611a      	str	r2, [r3, #16]
	le.crc_verify = 0;
    5a8a:	2200      	movs	r2, #0

	le.channel_idx = 0;
	le.channel_increment = 0;

	le.conn_epoch = 0;
	le.interval_timer = 0;
    5a8c:	841a      	strh	r2, [r3, #32]
/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
    5a8e:	615a      	str	r2, [r3, #20]

	le.conn_epoch = 0;
	le.interval_timer = 0;
	le.conn_interval = 0;
	le.conn_interval = 0;
	le.conn_count = 0;
    5a90:	849a      	strh	r2, [r3, #36]	; 0x24
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
	le.last_packet = 0;
    5a92:	645a      	str	r2, [r3, #68]	; 0x44

	le.link_state = LINK_INACTIVE;
    5a94:	761a      	strb	r2, [r3, #24]

	le.channel_idx = 0;
    5a96:	765a      	strb	r2, [r3, #25]
	le.channel_increment = 0;
    5a98:	769a      	strb	r2, [r3, #26]

	le.conn_epoch = 0;
    5a9a:	61da      	str	r2, [r3, #28]
	le.interval_timer = 0;
	le.conn_interval = 0;
    5a9c:	845a      	strh	r2, [r3, #34]	; 0x22
	le.conn_interval = 0;
	le.conn_count = 0;

	le.win_size = 0;
    5a9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	le.win_offset = 0;
    5aa2:	851a      	strh	r2, [r3, #40]	; 0x28

	le.update_pending = 0;
    5aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	le.update_instant = 0;
    5aa6:	861a      	strh	r2, [r3, #48]	; 0x30
	le.interval_update = 0;
    5aa8:	865a      	strh	r2, [r3, #50]	; 0x32
	le.win_size_update = 0;
    5aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	le.win_offset_update = 0;
    5aae:	86da      	strh	r2, [r3, #54]	; 0x36

	do_hop = 0;
    5ab0:	4b05      	ldr	r3, [pc, #20]	; (5ac8 <reset_le+0x50>)
    5ab2:	72da      	strb	r2, [r3, #11]
    5ab4:	bd08      	pop	{r3, pc}
    5ab6:	bf00      	nop
    5ab8:	8e89bed6 	.word	0x8e89bed6
    5abc:	1000044c 	.word	0x1000044c
    5ac0:	00555555 	.word	0x00555555
    5ac4:	00aaaaaa 	.word	0x00aaaaaa
    5ac8:	10000e34 	.word	0x10000e34

00005acc <reset_le_promisc>:
}

// reset LE Promisc state
void reset_le_promisc(void) {
    5acc:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    5ace:	4c06      	ldr	r4, [pc, #24]	; (5ae8 <reset_le_promisc+0x1c>)
    5ad0:	2100      	movs	r1, #0
    5ad2:	4620      	mov	r0, r4
    5ad4:	f44f 7284 	mov.w	r2, #264	; 0x108
    5ad8:	f7fe fbaa 	bl	4230 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    5adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ae0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    5ae4:	bd10      	pop	{r4, pc}
    5ae6:	bf00      	nop
    5ae8:	100010a0 	.word	0x100010a0

00005aec <bt_generic_le>:
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5af0:	4c69      	ldr	r4, [pc, #420]	; (5c98 <bt_generic_le+0x1ac>)
    5af2:	2301      	movs	r3, #1
	le_promisc.smallest_hop_interval = 0xffffffff;
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5af4:	4680      	mov	r8, r0
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5af6:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    5af8:	7460      	strb	r0, [r4, #17]

	reset_le();
    5afa:	f7ff ffbd 	bl	5a78 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5afe:	4b67      	ldr	r3, [pc, #412]	; (5c9c <bt_generic_le+0x1b0>)
    5b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b04:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5b06:	4b66      	ldr	r3, [pc, #408]	; (5ca0 <bt_generic_le+0x1b4>)
    5b08:	2210      	movs	r2, #16
    5b0a:	601a      	str	r2, [r3, #0]

	queue_init();
    5b0c:	f001 fdc8 	bl	76a0 <queue_init>
	dio_ssp_init();
    5b10:	f002 fdc0 	bl	8694 <dio_ssp_init>
	dma_init();
    5b14:	f001 ffbc 	bl	7a90 <dma_init>
	dio_ssp_start();
    5b18:	f002 f840 	bl	7b9c <dio_ssp_start>
	cc2400_rx();
    5b1c:	f7fe fc46 	bl	43ac <cc2400_rx>

	cs_trigger_enable();
    5b20:	f001 fef8 	bl	7914 <cs_trigger_enable>

	hold = 0;
    5b24:	2500      	movs	r5, #0

	while (requested_mode == active_mode) {
    5b26:	7ca3      	ldrb	r3, [r4, #18]
    5b28:	4543      	cmp	r3, r8
    5b2a:	f040 80a3 	bne.w	5c74 <bt_generic_le+0x188>
		if (requested_channel != 0) {
    5b2e:	4b5a      	ldr	r3, [pc, #360]	; (5c98 <bt_generic_le+0x1ac>)
    5b30:	89db      	ldrh	r3, [r3, #14]
    5b32:	b29b      	uxth	r3, r3
    5b34:	b1d3      	cbz	r3, 5b6c <bt_generic_le+0x80>
			cc2400_strobe(SRFOFF);
    5b36:	2064      	movs	r0, #100	; 0x64
    5b38:	f002 ff15 	bl	8966 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b3c:	f002 ff0c 	bl	8958 <cc2400_status>
    5b40:	0747      	lsls	r7, r0, #29
    5b42:	d4fb      	bmi.n	5b3c <bt_generic_le+0x50>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5b44:	4b57      	ldr	r3, [pc, #348]	; (5ca4 <bt_generic_le+0x1b8>)
    5b46:	2002      	movs	r0, #2
    5b48:	8819      	ldrh	r1, [r3, #0]
    5b4a:	b289      	uxth	r1, r1
    5b4c:	3901      	subs	r1, #1
    5b4e:	b289      	uxth	r1, r1
    5b50:	f002 fe31 	bl	87b6 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5b54:	2061      	movs	r0, #97	; 0x61
    5b56:	f002 ff06 	bl	8966 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5b5a:	f002 fefd 	bl	8958 <cc2400_status>
    5b5e:	0746      	lsls	r6, r0, #29
    5b60:	d5fb      	bpl.n	5b5a <bt_generic_le+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5b62:	2062      	movs	r0, #98	; 0x62
    5b64:	f002 feff 	bl	8966 <cc2400_strobe>

			requested_channel = 0;
    5b68:	2300      	movs	r3, #0
    5b6a:	81e3      	strh	r3, [r4, #14]
		}

		if (do_hop) {
    5b6c:	7ae3      	ldrb	r3, [r4, #11]
    5b6e:	4e4c      	ldr	r6, [pc, #304]	; (5ca0 <bt_generic_le+0x1b4>)
    5b70:	b113      	cbz	r3, 5b78 <bt_generic_le+0x8c>
			hop();
    5b72:	f7ff fcc3 	bl	54fc <hop>
    5b76:	e002      	b.n	5b7e <bt_generic_le+0x92>
		} else {
			TXLED_CLR;
    5b78:	f44f 7380 	mov.w	r3, #256	; 0x100
    5b7c:	6033      	str	r3, [r6, #0]
		}

		RXLED_CLR;
    5b7e:	2310      	movs	r3, #16
    5b80:	6033      	str	r3, [r6, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5b82:	f001 fe1d 	bl	77c0 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5b86:	2780      	movs	r7, #128	; 0x80
		while ((rx_tc == 0) && (rx_err == 0))
    5b88:	4b47      	ldr	r3, [pc, #284]	; (5ca8 <bt_generic_le+0x1bc>)
    5b8a:	4e48      	ldr	r6, [pc, #288]	; (5cac <bt_generic_le+0x1c0>)
    5b8c:	681a      	ldr	r2, [r3, #0]
    5b8e:	4699      	mov	r9, r3
    5b90:	b9d2      	cbnz	r2, 5bc8 <bt_generic_le+0xdc>
    5b92:	6833      	ldr	r3, [r6, #0]
    5b94:	b9c3      	cbnz	r3, 5bc8 <bt_generic_le+0xdc>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b96:	2006      	movs	r0, #6
    5b98:	f002 fe04 	bl	87a4 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b9c:	4b44      	ldr	r3, [pc, #272]	; (5cb0 <bt_generic_le+0x1c4>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b9e:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5ba2:	781b      	ldrb	r3, [r3, #0]
    5ba4:	b163      	cbz	r3, 5bc0 <bt_generic_le+0xd4>
    5ba6:	b27b      	sxtb	r3, r7
    5ba8:	3380      	adds	r3, #128	; 0x80
    5baa:	d109      	bne.n	5bc0 <bt_generic_le+0xd4>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5bac:	4b41      	ldr	r3, [pc, #260]	; (5cb4 <bt_generic_le+0x1c8>)
    5bae:	b240      	sxtb	r0, r0
    5bb0:	f993 7000 	ldrsb.w	r7, [r3]
    5bb4:	3736      	adds	r7, #54	; 0x36
    5bb6:	42b8      	cmp	r0, r7
    5bb8:	bfa8      	it	ge
    5bba:	4607      	movge	r7, r0
    5bbc:	b2ff      	uxtb	r7, r7
				rssi_at_trigger = rssi;
    5bbe:	4638      	mov	r0, r7
			}
			rssi_add(rssi);
    5bc0:	b240      	sxtb	r0, r0
    5bc2:	f001 fe19 	bl	77f8 <rssi_add>
    5bc6:	e7df      	b.n	5b88 <bt_generic_le+0x9c>
		}

		if (rx_err) {
    5bc8:	6833      	ldr	r3, [r6, #0]
    5bca:	b11b      	cbz	r3, 5bd4 <bt_generic_le+0xe8>
			status |= DMA_ERROR;
    5bcc:	7863      	ldrb	r3, [r4, #1]
    5bce:	f043 0302 	orr.w	r3, r3, #2
    5bd2:	7063      	strb	r3, [r4, #1]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    5bd4:	f8d9 3000 	ldr.w	r3, [r9]
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d057      	beq.n	5c8c <bt_generic_le+0x1a0>
			goto rx_continue;

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5bdc:	4b32      	ldr	r3, [pc, #200]	; (5ca8 <bt_generic_le+0x1bc>)
    5bde:	681b      	ldr	r3, [r3, #0]
    5be0:	2b01      	cmp	r3, #1
    5be2:	d903      	bls.n	5bec <bt_generic_le+0x100>
			status |= DMA_OVERFLOW;
    5be4:	7863      	ldrb	r3, [r4, #1]
    5be6:	f043 0301 	orr.w	r3, r3, #1
    5bea:	7063      	strb	r3, [r4, #1]

		rssi_iir_update(channel);
    5bec:	4b2d      	ldr	r3, [pc, #180]	; (5ca4 <bt_generic_le+0x1b8>)
    5bee:	8818      	ldrh	r0, [r3, #0]
    5bf0:	b280      	uxth	r0, r0
    5bf2:	f001 fe21 	bl	7838 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5bf6:	4b2e      	ldr	r3, [pc, #184]	; (5cb0 <bt_generic_le+0x1c4>)
    5bf8:	781a      	ldrb	r2, [r3, #0]
    5bfa:	b912      	cbnz	r2, 5c02 <bt_generic_le+0x116>
    5bfc:	4a2e      	ldr	r2, [pc, #184]	; (5cb8 <bt_generic_le+0x1cc>)
    5bfe:	7812      	ldrb	r2, [r2, #0]
    5c00:	b132      	cbz	r2, 5c10 <bt_generic_le+0x124>
			status |= CS_TRIGGER;
    5c02:	7862      	ldrb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
    5c04:	2502      	movs	r5, #2
		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
			status |= CS_TRIGGER;
    5c06:	f042 0208 	orr.w	r2, r2, #8
    5c0a:	7062      	strb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
    5c0c:	2200      	movs	r2, #0
    5c0e:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5c10:	4b28      	ldr	r3, [pc, #160]	; (5cb4 <bt_generic_le+0x1c8>)
    5c12:	f993 2000 	ldrsb.w	r2, [r3]
    5c16:	4b29      	ldr	r3, [pc, #164]	; (5cbc <bt_generic_le+0x1d0>)
    5c18:	3235      	adds	r2, #53	; 0x35
    5c1a:	f993 3000 	ldrsb.w	r3, [r3]
    5c1e:	429a      	cmp	r2, r3
    5c20:	da05      	bge.n	5c2e <bt_generic_le+0x142>
			status |= RSSI_TRIGGER;
    5c22:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5c24:	2502      	movs	r5, #2
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    5c26:	f043 0310 	orr.w	r3, r3, #16
    5c2a:	7063      	strb	r3, [r4, #1]
    5c2c:	e000      	b.n	5c30 <bt_generic_le+0x144>
			hold = CS_HOLD_TIME;
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    5c2e:	b36d      	cbz	r5, 5c8c <bt_generic_le+0x1a0>
			goto rx_continue;
		}
		hold--;

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5c30:	4823      	ldr	r0, [pc, #140]	; (5cc0 <bt_generic_le+0x1d4>)

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5c32:	3d01      	subs	r5, #1

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5c34:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    5c38:	f44f 72c8 	mov.w	r2, #400	; 0x190
    5c3c:	f003 fe7a 	bl	9934 <memcpy>

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5c40:	b2ed      	uxtb	r5, r5

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5c42:	2300      	movs	r3, #0
    5c44:	481f      	ldr	r0, [pc, #124]	; (5cc4 <bt_generic_le+0x1d8>)
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
			hold = CS_HOLD_TIME;
    5c46:	2200      	movs	r2, #0
    5c48:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c4c:	491e      	ldr	r1, [pc, #120]	; (5cc8 <bt_generic_le+0x1dc>)
    5c4e:	680f      	ldr	r7, [r1, #0]
    5c50:	5cff      	ldrb	r7, [r7, r3]
				idle_rxbuf[i] <<= 1;
    5c52:	6809      	ldr	r1, [r1, #0]

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c54:	09ff      	lsrs	r7, r7, #7
    5c56:	5487      	strb	r7, [r0, r2]
				idle_rxbuf[i] <<= 1;
    5c58:	5ccf      	ldrb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c5a:	3201      	adds	r2, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5c5c:	007f      	lsls	r7, r7, #1
    5c5e:	b2ff      	uxtb	r7, r7
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c60:	2a08      	cmp	r2, #8
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5c62:	54cf      	strb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c64:	d1f2      	bne.n	5c4c <bt_generic_le+0x160>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5c66:	3301      	adds	r3, #1
    5c68:	2b32      	cmp	r3, #50	; 0x32
    5c6a:	d1eb      	bne.n	5c44 <bt_generic_le+0x158>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    5c6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c6e:	4814      	ldr	r0, [pc, #80]	; (5cc0 <bt_generic_le+0x1d4>)
    5c70:	4798      	blx	r3
		if (!ret) break;
    5c72:	b958      	cbnz	r0, 5c8c <bt_generic_le+0x1a0>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5c74:	4b15      	ldr	r3, [pc, #84]	; (5ccc <bt_generic_le+0x1e0>)
    5c76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c7a:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5c7c:	f7fe fc9a 	bl	45b4 <cc2400_idle>
	dio_ssp_stop();
    5c80:	f001 ffb2 	bl	7be8 <dio_ssp_stop>
	cs_trigger_disable();
}
    5c84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ICER0 = ICER0_ICE_USB;

	// reset the radio completely
	cc2400_idle();
	dio_ssp_stop();
	cs_trigger_disable();
    5c88:	f001 be5a 	b.w	7940 <cs_trigger_disable>

		int ret = data_cb(unpacked);
		if (!ret) break;

	rx_continue:
		rx_tc = 0;
    5c8c:	2300      	movs	r3, #0
    5c8e:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    5c92:	6033      	str	r3, [r6, #0]
    5c94:	e747      	b.n	5b26 <bt_generic_le+0x3a>
    5c96:	bf00      	nop
    5c98:	10000e34 	.word	0x10000e34
    5c9c:	e000e100 	.word	0xe000e100
    5ca0:	2009c03c 	.word	0x2009c03c
    5ca4:	1000044c 	.word	0x1000044c
    5ca8:	1000103c 	.word	0x1000103c
    5cac:	10001554 	.word	0x10001554
    5cb0:	10001559 	.word	0x10001559
    5cb4:	10001558 	.word	0x10001558
    5cb8:	100011a8 	.word	0x100011a8
    5cbc:	10001040 	.word	0x10001040
    5cc0:	100011bc 	.word	0x100011bc
    5cc4:	1000134c 	.word	0x1000134c
    5cc8:	100011b8 	.word	0x100011b8
    5ccc:	e000e180 	.word	0xe000e180

00005cd0 <bt_le_sync>:
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cd4:	b091      	sub	sp, #68	; 0x44
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5cd6:	4daf      	ldr	r5, [pc, #700]	; (5f94 <bt_le_sync+0x2c4>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5cd8:	4caf      	ldr	r4, [pc, #700]	; (5f98 <bt_le_sync+0x2c8>)
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5cda:	2301      	movs	r3, #1
    5cdc:	702b      	strb	r3, [r5, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5cde:	7623      	strb	r3, [r4, #24]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5ce0:	4bae      	ldr	r3, [pc, #696]	; (5f9c <bt_le_sync+0x2cc>)
    5ce2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    5ce6:	7468      	strb	r0, [r5, #17]

	le.link_state = LINK_LISTENING;

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5ce8:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5cea:	4bad      	ldr	r3, [pc, #692]	; (5fa0 <bt_le_sync+0x2d0>)
    5cec:	2210      	movs	r2, #16
    5cee:	601a      	str	r2, [r3, #0]
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5cf0:	4606      	mov	r6, r0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;

	RXLED_CLR;

	queue_init();
    5cf2:	f001 fcd5 	bl	76a0 <queue_init>
	dio_ssp_init();
    5cf6:	f002 fccd 	bl	8694 <dio_ssp_init>
	dma_init_le();
    5cfa:	f001 ff07 	bl	7b0c <dma_init_le>
	dio_ssp_start();
    5cfe:	f001 ff4d 	bl	7b9c <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5d02:	6860      	ldr	r0, [r4, #4]
    5d04:	f002 fc62 	bl	85cc <rbit>
    5d08:	f7fe fba2 	bl	4450 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    5d0c:	7cab      	ldrb	r3, [r5, #18]
    5d0e:	42b3      	cmp	r3, r6
    5d10:	f040 81b6 	bne.w	6080 <bt_le_sync+0x3b0>
		if (requested_channel != 0) {
    5d14:	4b9f      	ldr	r3, [pc, #636]	; (5f94 <bt_le_sync+0x2c4>)
    5d16:	89db      	ldrh	r3, [r3, #14]
    5d18:	b29b      	uxth	r3, r3
    5d1a:	b1cb      	cbz	r3, 5d50 <bt_le_sync+0x80>
			cc2400_strobe(SRFOFF);
    5d1c:	2064      	movs	r0, #100	; 0x64
    5d1e:	f002 fe22 	bl	8966 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5d22:	f002 fe19 	bl	8958 <cc2400_status>
    5d26:	0743      	lsls	r3, r0, #29
    5d28:	d4fb      	bmi.n	5d22 <bt_le_sync+0x52>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5d2a:	8821      	ldrh	r1, [r4, #0]
    5d2c:	2002      	movs	r0, #2
    5d2e:	b289      	uxth	r1, r1
    5d30:	3901      	subs	r1, #1
    5d32:	b289      	uxth	r1, r1
    5d34:	f002 fd3f 	bl	87b6 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5d38:	2061      	movs	r0, #97	; 0x61
    5d3a:	f002 fe14 	bl	8966 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5d3e:	f002 fe0b 	bl	8958 <cc2400_status>
    5d42:	0747      	lsls	r7, r0, #29
    5d44:	d5fb      	bpl.n	5d3e <bt_le_sync+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5d46:	2062      	movs	r0, #98	; 0x62
    5d48:	f002 fe0d 	bl	8966 <cc2400_strobe>

			requested_channel = 0;
    5d4c:	2300      	movs	r3, #0
    5d4e:	81eb      	strh	r3, [r5, #14]
		}

		RXLED_CLR;
    5d50:	4b93      	ldr	r3, [pc, #588]	; (5fa0 <bt_le_sync+0x2d0>)
    5d52:	2210      	movs	r2, #16
    5d54:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5d56:	f001 fd33 	bl	77c0 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5d5a:	4b92      	ldr	r3, [pc, #584]	; (5fa4 <bt_le_sync+0x2d4>)
    5d5c:	681a      	ldr	r2, [r3, #0]
    5d5e:	4699      	mov	r9, r3
    5d60:	b942      	cbnz	r2, 5d74 <bt_le_sync+0xa4>
    5d62:	4b91      	ldr	r3, [pc, #580]	; (5fa8 <bt_le_sync+0x2d8>)
    5d64:	681b      	ldr	r3, [r3, #0]
    5d66:	b92b      	cbnz	r3, 5d74 <bt_le_sync+0xa4>
    5d68:	7aeb      	ldrb	r3, [r5, #11]
    5d6a:	b91b      	cbnz	r3, 5d74 <bt_le_sync+0xa4>
    5d6c:	4b89      	ldr	r3, [pc, #548]	; (5f94 <bt_le_sync+0x2c4>)
    5d6e:	7c9b      	ldrb	r3, [r3, #18]
    5d70:	42b3      	cmp	r3, r6
    5d72:	d0f2      	beq.n	5d5a <bt_le_sync+0x8a>
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d74:	2006      	movs	r0, #6
    5d76:	f002 fd15 	bl	87a4 <cc2400_get>
		rssi_min = rssi_max = rssi;
    5d7a:	4b8c      	ldr	r3, [pc, #560]	; (5fac <bt_le_sync+0x2dc>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d7c:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;

		if (requested_mode != active_mode) {
    5d80:	7caa      	ldrb	r2, [r5, #18]
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5d82:	7018      	strb	r0, [r3, #0]
    5d84:	4b8a      	ldr	r3, [pc, #552]	; (5fb0 <bt_le_sync+0x2e0>)

		if (requested_mode != active_mode) {
    5d86:	42b2      	cmp	r2, r6
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5d88:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    5d8a:	4b82      	ldr	r3, [pc, #520]	; (5f94 <bt_le_sync+0x2c4>)
    5d8c:	f040 8178 	bne.w	6080 <bt_le_sync+0x3b0>
			goto cleanup;
		}

		if (rx_err) {
    5d90:	4f85      	ldr	r7, [pc, #532]	; (5fa8 <bt_le_sync+0x2d8>)
    5d92:	683a      	ldr	r2, [r7, #0]
    5d94:	46bb      	mov	fp, r7
    5d96:	b11a      	cbz	r2, 5da0 <bt_le_sync+0xd0>
			status |= DMA_ERROR;
    5d98:	785a      	ldrb	r2, [r3, #1]
    5d9a:	f042 0202 	orr.w	r2, r2, #2
    5d9e:	705a      	strb	r2, [r3, #1]
		}

		if (do_hop)
    5da0:	7aeb      	ldrb	r3, [r5, #11]
    5da2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5da6:	2b00      	cmp	r3, #0
    5da8:	f040 80b7 	bne.w	5f1a <bt_le_sync+0x24a>
			goto rx_flush;

		/* No DMA transfer? */
		if (!rx_tc)
    5dac:	f8d9 3000 	ldr.w	r3, [r9]
    5db0:	2b00      	cmp	r3, #0
    5db2:	d0ab      	beq.n	5d0c <bt_le_sync+0x3c>
			continue;

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
    5db4:	2234      	movs	r2, #52	; 0x34
    5db6:	a803      	add	r0, sp, #12
    5db8:	f7fe fa3a 	bl	4230 <memset>
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5dbc:	8820      	ldrh	r0, [r4, #0]
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5dbe:	6863      	ldr	r3, [r4, #4]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5dc0:	b280      	uxth	r0, r0
    5dc2:	3862      	subs	r0, #98	; 0x62
    5dc4:	b2c0      	uxtb	r0, r0
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5dc6:	9303      	str	r3, [sp, #12]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5dc8:	f001 fb70 	bl	74ac <btle_channel_index>
    5dcc:	f04f 0830 	mov.w	r8, #48	; 0x30
    5dd0:	fb08 f800 	mul.w	r8, r8, r0
    5dd4:	f8df a208 	ldr.w	sl, [pc, #520]	; 5fe0 <bt_le_sync+0x310>
    5dd8:	eb0a 0308 	add.w	r3, sl, r8
    5ddc:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5dde:	4b75      	ldr	r3, [pc, #468]	; (5fb4 <bt_le_sync+0x2e4>)
    5de0:	f893 e000 	ldrb.w	lr, [r3]
					   | rxbuf1[i+1] << 16
    5de4:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5de6:	7898      	ldrb	r0, [r3, #2]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5de8:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5dea:	78d9      	ldrb	r1, [r3, #3]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5dec:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
					   | rxbuf1[i+2] << 8
    5df0:	430a      	orrs	r2, r1
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5df2:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    5df6:	9300      	str	r3, [sp, #0]
    5df8:	f002 fbe8 	bl	85cc <rbit>
    5dfc:	f85a 2008 	ldr.w	r2, [sl, r8]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5e00:	9b00      	ldr	r3, [sp, #0]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e02:	4050      	eors	r0, r2
		}

		unsigned len = (p[5] & 0x3f) + 2;
    5e04:	f3c0 2a05 	ubfx	sl, r0, #8, #6
    5e08:	f10a 0802 	add.w	r8, sl, #2
		if (len > 39)
    5e0c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e10:	9004      	str	r0, [sp, #16]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5e12:	f200 8082 	bhi.w	5f1a <bt_le_sync+0x24a>
			goto rx_flush;

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5e16:	f10a 0a08 	add.w	sl, sl, #8
    5e1a:	ea4f 029a 	mov.w	r2, sl, lsr #2
		if (total_transfers < 11) {
    5e1e:	2a0b      	cmp	r2, #11
    5e20:	d00d      	beq.n	5e3e <bt_le_sync+0x16e>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5e22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5e26:	4a64      	ldr	r2, [pc, #400]	; (5fb8 <bt_le_sync+0x2e8>)
    5e28:	6812      	ldr	r2, [r2, #0]
    5e2a:	429a      	cmp	r2, r3
    5e2c:	d20b      	bcs.n	5e46 <bt_le_sync+0x176>
    5e2e:	f8db 1000 	ldr.w	r1, [fp]
    5e32:	2900      	cmp	r1, #0
    5e34:	d0f7      	beq.n	5e26 <bt_le_sync+0x156>
    5e36:	e006      	b.n	5e46 <bt_le_sync+0x176>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5e38:	f8db 3000 	ldr.w	r3, [fp]
    5e3c:	b91b      	cbnz	r3, 5e46 <bt_le_sync+0x176>
    5e3e:	4b5f      	ldr	r3, [pc, #380]	; (5fbc <bt_le_sync+0x2ec>)
    5e40:	681b      	ldr	r3, [r3, #0]
    5e42:	07d8      	lsls	r0, r3, #31
    5e44:	d4f8      	bmi.n	5e38 <bt_le_sync+0x168>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e46:	4b5e      	ldr	r3, [pc, #376]	; (5fc0 <bt_le_sync+0x2f0>)

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5e48:	2061      	movs	r0, #97	; 0x61
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e4a:	681a      	ldr	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e4c:	f04f 0b04 	mov.w	fp, #4
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e50:	f022 0201 	bic.w	r2, r2, #1
    5e54:	601a      	str	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5e56:	f002 fd86 	bl	8966 <cc2400_strobe>

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5e5a:	4a56      	ldr	r2, [pc, #344]	; (5fb4 <bt_le_sync+0x2e4>)
    5e5c:	f10b 0001 	add.w	r0, fp, #1
    5e60:	f812 100b 	ldrb.w	r1, [r2, fp]
    5e64:	f10b 0c03 	add.w	ip, fp, #3
					   | rxbuf1[i+1] << 16
    5e68:	f812 e000 	ldrb.w	lr, [r2, r0]
    5e6c:	f10b 0002 	add.w	r0, fp, #2
					   | rxbuf1[i+2] << 8
    5e70:	5c10      	ldrb	r0, [r2, r0]
					   | rxbuf1[i+3] << 0;
    5e72:	f812 c00c 	ldrb.w	ip, [r2, ip]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e76:	ea4f 02ab 	mov.w	r2, fp, asr #2
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5e7a:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
					   | rxbuf1[i+2] << 8
    5e7e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e82:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    5e86:	9200      	str	r2, [sp, #0]
    5e88:	f002 fba0 	bl	85cc <rbit>
    5e8c:	9a00      	ldr	r2, [sp, #0]
    5e8e:	ab10      	add	r3, sp, #64	; 0x40
    5e90:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5e94:	9b01      	ldr	r3, [sp, #4]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e96:	f10b 0b04 	add.w	fp, fp, #4
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e9e:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5ea2:	ea82 0000 	eor.w	r0, r2, r0
    5ea6:	f841 0c30 	str.w	r0, [r1, #-48]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5eaa:	d1d6      	bne.n	5e5a <bt_le_sync+0x18a>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    5eac:	6963      	ldr	r3, [r4, #20]
    5eae:	b9eb      	cbnz	r3, 5eec <bt_le_sync+0x21c>
			if (calc_crc != wire_crc) // skip packets with a bad CRC
				goto rx_flush;
		}


		RXLED_SET;
    5eb0:	4b44      	ldr	r3, [pc, #272]	; (5fc4 <bt_le_sync+0x2f4>)
    5eb2:	2210      	movs	r2, #16
    5eb4:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5eb6:	a803      	add	r0, sp, #12
    5eb8:	69ab      	ldr	r3, [r5, #24]
    5eba:	4798      	blx	r3

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
    5ebc:	4b42      	ldr	r3, [pc, #264]	; (5fc8 <bt_le_sync+0x2f8>)
    5ebe:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
    5ec2:	f8c3 8000 	str.w	r8, [r3]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5ec6:	a903      	add	r1, sp, #12
    5ec8:	2001      	movs	r0, #1
    5eca:	f7fe fb19 	bl	4500 <enqueue>
		ISER0 = ISER0_ISE_USB;
    5ece:	4b33      	ldr	r3, [pc, #204]	; (5f9c <bt_le_sync+0x2cc>)

		le.last_packet = CLK100NS;
    5ed0:	4a3e      	ldr	r2, [pc, #248]	; (5fcc <bt_le_sync+0x2fc>)
		packet_cb((uint8_t *)packet);

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
		enqueue(LE_PACKET, (uint8_t *)packet);
		ISER0 = ISER0_ISE_USB;
    5ed2:	f8c3 8000 	str.w	r8, [r3]

		le.last_packet = CLK100NS;
    5ed6:	4b3e      	ldr	r3, [pc, #248]	; (5fd0 <bt_le_sync+0x300>)
    5ed8:	f640 4135 	movw	r1, #3125	; 0xc35
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	6812      	ldr	r2, [r2, #0]
    5ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5ee4:	fb01 2303 	mla	r3, r1, r3, r2
    5ee8:	6463      	str	r3, [r4, #68]	; 0x44
    5eea:	e016      	b.n	5f1a <bt_le_sync+0x24a>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5eec:	4b2a      	ldr	r3, [pc, #168]	; (5f98 <bt_le_sync+0x2c8>)
    5eee:	a904      	add	r1, sp, #16
    5ef0:	6918      	ldr	r0, [r3, #16]
    5ef2:	4642      	mov	r2, r8
    5ef4:	f001 fb5a 	bl	75ac <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    5ef8:	ab10      	add	r3, sp, #64	; 0x40
    5efa:	4453      	add	r3, sl
    5efc:	f813 2c34 	ldrb.w	r2, [r3, #-52]
						 | (p[4+len+1] << 8)
    5f00:	ab10      	add	r3, sp, #64	; 0x40
    5f02:	4443      	add	r3, r8
    5f04:	f813 1c2f 	ldrb.w	r1, [r3, #-47]
    5f08:	0209      	lsls	r1, r1, #8
    5f0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
						 | (p[4+len+0] << 0);
    5f0e:	f813 2c30 	ldrb.w	r2, [r3, #-48]
    5f12:	ea41 0302 	orr.w	r3, r1, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5f16:	4298      	cmp	r0, r3
    5f18:	d0ca      	beq.n	5eb0 <bt_le_sync+0x1e0>

		le.last_packet = CLK100NS;

	rx_flush:
		// this might happen twice, but it's safe to do so
		cc2400_strobe(SFSON);
    5f1a:	2061      	movs	r0, #97	; 0x61
    5f1c:	f002 fd23 	bl	8966 <cc2400_strobe>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5f20:	4b27      	ldr	r3, [pc, #156]	; (5fc0 <bt_le_sync+0x2f0>)
    5f22:	681a      	ldr	r2, [r3, #0]
    5f24:	f022 0201 	bic.w	r2, r2, #1
    5f28:	601a      	str	r2, [r3, #0]
		while (SSP1SR & SSPSR_RNE) {
    5f2a:	4b2a      	ldr	r3, [pc, #168]	; (5fd4 <bt_le_sync+0x304>)
    5f2c:	681b      	ldr	r3, [r3, #0]
    5f2e:	0759      	lsls	r1, r3, #29
    5f30:	d502      	bpl.n	5f38 <bt_le_sync+0x268>
			u8 tmp = (u8)DIO_SSP_DR;
    5f32:	4b29      	ldr	r3, [pc, #164]	; (5fd8 <bt_le_sync+0x308>)
    5f34:	681b      	ldr	r3, [r3, #0]
    5f36:	e7f8      	b.n	5f2a <bt_le_sync+0x25a>
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    5f38:	4b25      	ldr	r3, [pc, #148]	; (5fd0 <bt_le_sync+0x300>)
    5f3a:	4a24      	ldr	r2, [pc, #144]	; (5fcc <bt_le_sync+0x2fc>)
    5f3c:	681b      	ldr	r3, [r3, #0]
    5f3e:	6812      	ldr	r2, [r2, #0]
    5f40:	f640 4135 	movw	r1, #3125	; 0xc35
    5f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5f48:	fb01 2303 	mla	r3, r1, r3, r2
		if (now < le.last_packet)
    5f4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f4e:	7e21      	ldrb	r1, [r4, #24]
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
    5f50:	4293      	cmp	r3, r2
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f52:	f1a1 0102 	sub.w	r1, r1, #2
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5f56:	bf38      	it	cc
    5f58:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5f5c:	b2c9      	uxtb	r1, r1
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5f5e:	bf38      	it	cc
    5f60:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5f64:	2901      	cmp	r1, #1
    5f66:	d803      	bhi.n	5f70 <bt_le_sync+0x2a0>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
			&& (now - le.last_packet > 50000000))
    5f68:	491c      	ldr	r1, [pc, #112]	; (5fdc <bt_le_sync+0x30c>)
    5f6a:	1a9b      	subs	r3, r3, r2
    5f6c:	428b      	cmp	r3, r1
    5f6e:	d802      	bhi.n	5f76 <bt_le_sync+0x2a6>
			// jam finished
			|| (le_jam_count == 1)
    5f70:	69eb      	ldr	r3, [r5, #28]
    5f72:	2b01      	cmp	r3, #1
    5f74:	d14f      	bne.n	6016 <bt_le_sync+0x346>
			)
		{
			reset_le();
    5f76:	f7ff fd7f 	bl	5a78 <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    5f7a:	4909      	ldr	r1, [pc, #36]	; (5fa0 <bt_le_sync+0x2d0>)
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f7c:	2300      	movs	r3, #0
			TXLED_CLR;
    5f7e:	f44f 7080 	mov.w	r0, #256	; 0x100
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f82:	61eb      	str	r3, [r5, #28]
			TXLED_CLR;
    5f84:	6008      	str	r0, [r1, #0]

			if (jam_mode == JAM_ONCE) {
    5f86:	7ce9      	ldrb	r1, [r5, #19]
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f88:	4a02      	ldr	r2, [pc, #8]	; (5f94 <bt_le_sync+0x2c4>)
			TXLED_CLR;

			if (jam_mode == JAM_ONCE) {
    5f8a:	2901      	cmp	r1, #1
    5f8c:	d12a      	bne.n	5fe4 <bt_le_sync+0x314>
				jam_mode = JAM_NONE;
    5f8e:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    5f90:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    5f92:	e075      	b.n	6080 <bt_le_sync+0x3b0>
    5f94:	10000e34 	.word	0x10000e34
    5f98:	1000044c 	.word	0x1000044c
    5f9c:	e000e100 	.word	0xe000e100
    5fa0:	2009c03c 	.word	0x2009c03c
    5fa4:	1000103c 	.word	0x1000103c
    5fa8:	10001554 	.word	0x10001554
    5fac:	10001040 	.word	0x10001040
    5fb0:	10001042 	.word	0x10001042
    5fb4:	10001521 	.word	0x10001521
    5fb8:	50004104 	.word	0x50004104
    5fbc:	50004110 	.word	0x50004110
    5fc0:	40030024 	.word	0x40030024
    5fc4:	2009c038 	.word	0x2009c038
    5fc8:	e000e180 	.word	0xe000e180
    5fcc:	40004008 	.word	0x40004008
    5fd0:	1000105c 	.word	0x1000105c
    5fd4:	4003000c 	.word	0x4003000c
    5fd8:	40030008 	.word	0x40030008
    5fdc:	02faf080 	.word	0x02faf080
    5fe0:	00009e04 	.word	0x00009e04
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    5fe4:	2e0a      	cmp	r6, #10
    5fe6:	d04b      	beq.n	6080 <bt_le_sync+0x3b0>
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5fe8:	2301      	movs	r3, #1

			cc2400_strobe(SRFOFF);
    5fea:	2064      	movs	r0, #100	; 0x64

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5fec:	7623      	strb	r3, [r4, #24]

			cc2400_strobe(SRFOFF);
    5fee:	f002 fcba 	bl	8966 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5ff2:	f002 fcb1 	bl	8958 <cc2400_status>
    5ff6:	0742      	lsls	r2, r0, #29
    5ff8:	d4fb      	bmi.n	5ff2 <bt_le_sync+0x322>

			/* Retune */
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5ffa:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    5ffe:	b29b      	uxth	r3, r3
    6000:	b123      	cbz	r3, 600c <bt_le_sync+0x33c>
    6002:	4b26      	ldr	r3, [pc, #152]	; (609c <bt_le_sync+0x3cc>)
    6004:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    6008:	b29b      	uxth	r3, r3
    600a:	e001      	b.n	6010 <bt_le_sync+0x340>
    600c:	f640 1362 	movw	r3, #2402	; 0x962
    6010:	8023      	strh	r3, [r4, #0]
			restart_jamming = 1;
    6012:	2301      	movs	r3, #1
    6014:	632b      	str	r3, [r5, #48]	; 0x30
		}

		cc2400_set(SYNCL, le.syncl);
    6016:	202c      	movs	r0, #44	; 0x2c
    6018:	8961      	ldrh	r1, [r4, #10]
    601a:	f002 fbcc 	bl	87b6 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    601e:	202d      	movs	r0, #45	; 0x2d
    6020:	8921      	ldrh	r1, [r4, #8]
    6022:	f002 fbc8 	bl	87b6 <cc2400_set>

		if (do_hop)
    6026:	7aeb      	ldrb	r3, [r5, #11]
    6028:	b10b      	cbz	r3, 602e <bt_le_sync+0x35e>
			hop();
    602a:	f7ff fa67 	bl	54fc <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    602e:	69eb      	ldr	r3, [r5, #28]
    6030:	f8df 8070 	ldr.w	r8, [pc, #112]	; 60a4 <bt_le_sync+0x3d4>
    6034:	2b00      	cmp	r3, #0
    6036:	dd07      	ble.n	6048 <bt_le_sync+0x378>
			le_jam();
    6038:	f7ff fa24 	bl	5484 <le_jam>
			--le_jam_count;
    603c:	f8d8 301c 	ldr.w	r3, [r8, #28]
    6040:	3b01      	subs	r3, #1
    6042:	f8c8 301c 	str.w	r3, [r8, #28]
    6046:	e016      	b.n	6076 <bt_le_sync+0x3a6>
		} else {
			/* RX mode */
			dma_init_le();
    6048:	f001 fd60 	bl	7b0c <dma_init_le>
			dio_ssp_start();
    604c:	f001 fda6 	bl	7b9c <dio_ssp_start>

			if (restart_jamming) {
    6050:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    6054:	b143      	cbz	r3, 6068 <bt_le_sync+0x398>
				cc2400_rx_sync(rbit(le.access_address));
    6056:	6860      	ldr	r0, [r4, #4]
    6058:	f002 fab8 	bl	85cc <rbit>
    605c:	f7fe f9f8 	bl	4450 <cc2400_rx_sync>
				restart_jamming = 0;
    6060:	2300      	movs	r3, #0
    6062:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    6066:	e006      	b.n	6076 <bt_le_sync+0x3a6>
			} else {
				// wait till we're in FSLOCK before strobing RX
				while (!(cc2400_status() & FS_LOCK));
    6068:	f002 fc76 	bl	8958 <cc2400_status>
    606c:	0743      	lsls	r3, r0, #29
    606e:	d5fb      	bpl.n	6068 <bt_le_sync+0x398>
				cc2400_strobe(SRX);
    6070:	2062      	movs	r0, #98	; 0x62
    6072:	f002 fc78 	bl	8966 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6076:	2300      	movs	r3, #0
    6078:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    607c:	603b      	str	r3, [r7, #0]
    607e:	e645      	b.n	5d0c <bt_le_sync+0x3c>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6080:	4b07      	ldr	r3, [pc, #28]	; (60a0 <bt_le_sync+0x3d0>)
    6082:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6086:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6088:	f7fe fa94 	bl	45b4 <cc2400_idle>
	dio_ssp_stop();
    608c:	f001 fdac 	bl	7be8 <dio_ssp_stop>
	cs_trigger_disable();
    6090:	f001 fc56 	bl	7940 <cs_trigger_disable>
}
    6094:	b011      	add	sp, #68	; 0x44
    6096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    609a:	bf00      	nop
    609c:	1000044c 	.word	0x1000044c
    60a0:	e000e180 	.word	0xe000e180
    60a4:	10000e34 	.word	0x10000e34

000060a8 <bt_le_sync_cfo>:

//JWHUR cfo estimation tracking
void bt_le_sync_cfo(u8 active_mode) 
{
    60a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60ac:	b09d      	sub	sp, #116	; 0x74
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	u8 cfo_buf[DMA_SIZE] = {0, };
    60ae:	2100      	movs	r1, #0
	cs_trigger_disable();
}

//JWHUR cfo estimation tracking
void bt_le_sync_cfo(u8 active_mode) 
{
    60b0:	4607      	mov	r7, r0
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	u8 cfo_buf[DMA_SIZE] = {0, };
    60b2:	2232      	movs	r2, #50	; 0x32

	modulation = MOD_BT_LOW_ENERGY;
    60b4:	4cae      	ldr	r4, [pc, #696]	; (6370 <bt_le_sync_cfo+0x2c8>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    60b6:	4daf      	ldr	r5, [pc, #700]	; (6374 <bt_le_sync_cfo+0x2cc>)
void bt_le_sync_cfo(u8 active_mode) 
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	u8 cfo_buf[DMA_SIZE] = {0, };
    60b8:	a802      	add	r0, sp, #8
    60ba:	f7fe f8b9 	bl	4230 <memset>

	modulation = MOD_BT_LOW_ENERGY;
    60be:	2301      	movs	r3, #1
    60c0:	7023      	strb	r3, [r4, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    60c2:	762b      	strb	r3, [r5, #24]

	ISER0 = ISER0_ISE_USB;
    60c4:	4bac      	ldr	r3, [pc, #688]	; (6378 <bt_le_sync_cfo+0x2d0>)
    60c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	int8_t rssi;
	static int restart_jamming = 0;
	u8 cfo_buf[DMA_SIZE] = {0, };

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    60ca:	7467      	strb	r7, [r4, #17]

	le.link_state = LINK_LISTENING;

	ISER0 = ISER0_ISE_USB;
    60cc:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    60ce:	4bab      	ldr	r3, [pc, #684]	; (637c <bt_le_sync_cfo+0x2d4>)
    60d0:	2210      	movs	r2, #16
    60d2:	601a      	str	r2, [r3, #0]
	queue_init();
    60d4:	f001 fae4 	bl	76a0 <queue_init>
	dio_ssp_init();
    60d8:	f002 fadc 	bl	8694 <dio_ssp_init>
	dma_init_le();
    60dc:	f001 fd16 	bl	7b0c <dma_init_le>
	dio_ssp_start();
    60e0:	f001 fd5c 	bl	7b9c <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address));
    60e4:	6868      	ldr	r0, [r5, #4]
    60e6:	f002 fa71 	bl	85cc <rbit>
    60ea:	f7fe f9b1 	bl	4450 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    60ee:	7ca3      	ldrb	r3, [r4, #18]
    60f0:	42bb      	cmp	r3, r7
    60f2:	f040 81fa 	bne.w	64ea <bt_le_sync_cfo+0x442>
		if (requested_channel != 0) {
    60f6:	4b9e      	ldr	r3, [pc, #632]	; (6370 <bt_le_sync_cfo+0x2c8>)
    60f8:	89db      	ldrh	r3, [r3, #14]
    60fa:	b29b      	uxth	r3, r3
    60fc:	b1cb      	cbz	r3, 6132 <bt_le_sync_cfo+0x8a>
			cc2400_strobe(SRFOFF);
    60fe:	2064      	movs	r0, #100	; 0x64
    6100:	f002 fc31 	bl	8966 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6104:	f002 fc28 	bl	8958 <cc2400_status>
    6108:	0741      	lsls	r1, r0, #29
    610a:	d4fb      	bmi.n	6104 <bt_le_sync_cfo+0x5c>
			cc2400_set(FSDIV, channel - 1);
    610c:	8829      	ldrh	r1, [r5, #0]
    610e:	2002      	movs	r0, #2
    6110:	b289      	uxth	r1, r1
    6112:	3901      	subs	r1, #1
    6114:	b289      	uxth	r1, r1
    6116:	f002 fb4e 	bl	87b6 <cc2400_set>
			cc2400_strobe(SFSON);
    611a:	2061      	movs	r0, #97	; 0x61
    611c:	f002 fc23 	bl	8966 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6120:	f002 fc1a 	bl	8958 <cc2400_status>
    6124:	0742      	lsls	r2, r0, #29
    6126:	d5fb      	bpl.n	6120 <bt_le_sync_cfo+0x78>
			cc2400_strobe(SRX);
    6128:	2062      	movs	r0, #98	; 0x62
    612a:	f002 fc1c 	bl	8966 <cc2400_strobe>
			requested_channel = 0;
    612e:	2300      	movs	r3, #0
    6130:	81e3      	strh	r3, [r4, #14]
		}
		RXLED_CLR;
    6132:	4b92      	ldr	r3, [pc, #584]	; (637c <bt_le_sync_cfo+0x2d4>)
    6134:	2210      	movs	r2, #16
    6136:	601a      	str	r2, [r3, #0]
		rssi_reset();
    6138:	f001 fb42 	bl	77c0 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode) ;
    613c:	4b90      	ldr	r3, [pc, #576]	; (6380 <bt_le_sync_cfo+0x2d8>)
    613e:	681a      	ldr	r2, [r3, #0]
    6140:	4699      	mov	r9, r3
    6142:	b942      	cbnz	r2, 6156 <bt_le_sync_cfo+0xae>
    6144:	4b8f      	ldr	r3, [pc, #572]	; (6384 <bt_le_sync_cfo+0x2dc>)
    6146:	681b      	ldr	r3, [r3, #0]
    6148:	b92b      	cbnz	r3, 6156 <bt_le_sync_cfo+0xae>
    614a:	7ae3      	ldrb	r3, [r4, #11]
    614c:	b91b      	cbnz	r3, 6156 <bt_le_sync_cfo+0xae>
    614e:	4b88      	ldr	r3, [pc, #544]	; (6370 <bt_le_sync_cfo+0x2c8>)
    6150:	7c9b      	ldrb	r3, [r3, #18]
    6152:	42bb      	cmp	r3, r7
    6154:	d0f2      	beq.n	613c <bt_le_sync_cfo+0x94>
		//JWHUR get time
		cfo_time[0] = (u32) CLK100NS;
    6156:	4e8c      	ldr	r6, [pc, #560]	; (6388 <bt_le_sync_cfo+0x2e0>)
    6158:	4a8c      	ldr	r2, [pc, #560]	; (638c <bt_le_sync_cfo+0x2e4>)
    615a:	6833      	ldr	r3, [r6, #0]
    615c:	6812      	ldr	r2, [r2, #0]
    615e:	f640 4135 	movw	r1, #3125	; 0xc35
    6162:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6166:	fb01 2303 	mla	r3, r1, r3, r2
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    616a:	2006      	movs	r0, #6
		}
		RXLED_CLR;
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode) ;
		//JWHUR get time
		cfo_time[0] = (u32) CLK100NS;
    616c:	6363      	str	r3, [r4, #52]	; 0x34
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    616e:	f002 fb19 	bl	87a4 <cc2400_get>
		rssi_min = rssi_max = rssi;
    6172:	4b87      	ldr	r3, [pc, #540]	; (6390 <bt_le_sync_cfo+0x2e8>)
		RXLED_CLR;
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode) ;
		//JWHUR get time
		cfo_time[0] = (u32) CLK100NS;
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    6174:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;
    6178:	7018      	strb	r0, [r3, #0]
    617a:	4b86      	ldr	r3, [pc, #536]	; (6394 <bt_le_sync_cfo+0x2ec>)
		}
		RXLED_CLR;
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode) ;
		//JWHUR get time
		cfo_time[0] = (u32) CLK100NS;
    617c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 6370 <bt_le_sync_cfo+0x2c8>
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    6180:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    6182:	7ca3      	ldrb	r3, [r4, #18]
    6184:	46b2      	mov	sl, r6
    6186:	42bb      	cmp	r3, r7
    6188:	f040 81af 	bne.w	64ea <bt_le_sync_cfo+0x442>
			goto cleanup;
		}
		if (rx_err) {
    618c:	4e7d      	ldr	r6, [pc, #500]	; (6384 <bt_le_sync_cfo+0x2dc>)
    618e:	6833      	ldr	r3, [r6, #0]
    6190:	b12b      	cbz	r3, 619e <bt_le_sync_cfo+0xf6>
			status |= DMA_ERROR;
    6192:	f898 3001 	ldrb.w	r3, [r8, #1]
    6196:	f043 0302 	orr.w	r3, r3, #2
    619a:	f888 3001 	strb.w	r3, [r8, #1]
		}
		if (do_hop)
    619e:	7ae3      	ldrb	r3, [r4, #11]
    61a0:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    61a4:	2b00      	cmp	r3, #0
    61a6:	f040 811b 	bne.w	63e0 <bt_le_sync_cfo+0x338>
			goto rx_flush;
		if (!rx_tc)
    61aa:	f8d9 3000 	ldr.w	r3, [r9]
    61ae:	2b00      	cmp	r3, #0
    61b0:	d09d      	beq.n	60ee <bt_le_sync_cfo+0x46>
			continue;
		
		uint32_t packet[48/4+1] = {0, };
    61b2:	a80f      	add	r0, sp, #60	; 0x3c
    61b4:	4641      	mov	r1, r8
    61b6:	2234      	movs	r2, #52	; 0x34
    61b8:	f7fe f83a 	bl	4230 <memset>
		uint32_t whiten_packet[48/4+1] = {0, };
		u8 *p = (u8 *)packet;

		//JWHUR buffering carrier frequency offset estimation
		for (i = 0; i < DMA_SIZE; i++) {
			if (i < 15) cfo_time[i+1] = (u32) CLK100NS;
    61bc:	f1b8 0f0e 	cmp.w	r8, #14
    61c0:	dc0d      	bgt.n	61de <bt_le_sync_cfo+0x136>
    61c2:	4b72      	ldr	r3, [pc, #456]	; (638c <bt_le_sync_cfo+0x2e4>)
    61c4:	f8da 2000 	ldr.w	r2, [sl]
    61c8:	6819      	ldr	r1, [r3, #0]
    61ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
    61ce:	f640 4035 	movw	r0, #3125	; 0xc35
    61d2:	fb00 1202 	mla	r2, r0, r2, r1
    61d6:	4b70      	ldr	r3, [pc, #448]	; (6398 <bt_le_sync_cfo+0x2f0>)
    61d8:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    61dc:	605a      	str	r2, [r3, #4]
			//cfo_buf[i] = (u8)(cc2400_get(RSSI) >> 8);
			cfo_buf[i] = cc2400_get_rev(FREQEST);
    61de:	2007      	movs	r0, #7
    61e0:	f002 faf8 	bl	87d4 <cc2400_get_rev>
    61e4:	ab02      	add	r3, sp, #8
    61e6:	f803 0008 	strb.w	r0, [r3, r8]
		uint32_t packet[48/4+1] = {0, };
		uint32_t whiten_packet[48/4+1] = {0, };
		u8 *p = (u8 *)packet;

		//JWHUR buffering carrier frequency offset estimation
		for (i = 0; i < DMA_SIZE; i++) {
    61ea:	f108 0801 	add.w	r8, r8, #1
    61ee:	f1b8 0f32 	cmp.w	r8, #50	; 0x32
    61f2:	d1e3      	bne.n	61bc <bt_le_sync_cfo+0x114>
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    61f4:	8828      	ldrh	r0, [r5, #0]
			if (i < 15) cfo_time[i+1] = (u32) CLK100NS;
			//cfo_buf[i] = (u8)(cc2400_get(RSSI) >> 8);
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
    61f6:	686b      	ldr	r3, [r5, #4]
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    61f8:	b280      	uxth	r0, r0
    61fa:	3862      	subs	r0, #98	; 0x62
    61fc:	b2c0      	uxtb	r0, r0
			if (i < 15) cfo_time[i+1] = (u32) CLK100NS;
			//cfo_buf[i] = (u8)(cc2400_get(RSSI) >> 8);
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
    61fe:	930f      	str	r3, [sp, #60]	; 0x3c
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6200:	f001 f954 	bl	74ac <btle_channel_index>
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6204:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 63ac <bt_le_sync_cfo+0x304>
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6208:	f04f 0a30 	mov.w	sl, #48	; 0x30
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    620c:	f89b e000 	ldrb.w	lr, [fp]
					   | rxbuf1[i+1] << 16
    6210:	f89b 8001 	ldrb.w	r8, [fp, #1]
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6214:	fb0a fa00 	mul.w	sl, sl, r0
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
    6218:	f89b 1002 	ldrb.w	r1, [fp, #2]
		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    621c:	ea4f 4808 	mov.w	r8, r8, lsl #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    6220:	f89b 0003 	ldrb.w	r0, [fp, #3]
		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    6224:	ea48 680e 	orr.w	r8, r8, lr, lsl #24
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6228:	4a5c      	ldr	r2, [pc, #368]	; (639c <bt_le_sync_cfo+0x2f4>)
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
    622a:	ea48 0800 	orr.w	r8, r8, r0
					   | rxbuf1[i+3] << 0;
    622e:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6232:	eb02 030a 	add.w	r3, r2, sl
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6236:	4640      	mov	r0, r8
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6238:	9301      	str	r3, [sp, #4]
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    623a:	9200      	str	r2, [sp, #0]
    623c:	f002 f9c6 	bl	85cc <rbit>
    6240:	9a00      	ldr	r2, [sp, #0]
    6242:	f852 200a 	ldr.w	r2, [r2, sl]
    6246:	4050      	eors	r0, r2
    6248:	9010      	str	r0, [sp, #64]	; 0x40
			whiten_packet[i/4+1] = rbit(v);
    624a:	4640      	mov	r0, r8
    624c:	f002 f9be 	bl	85cc <rbit>
		}

		unsigned len = (p[5] & 0x3f) + 2;
    6250:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    6254:	f002 0a3f 	and.w	sl, r2, #63	; 0x3f
    6258:	f10a 0802 	add.w	r8, sl, #2
		cfo_buf[DMA_SIZE - 1] = p[5];

		if (len > 39)
    625c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
			packet[i/4+1] = rbit(v) ^ whit[i/4];
			whiten_packet[i/4+1] = rbit(v);
		}

		unsigned len = (p[5] & 0x3f) + 2;
		cfo_buf[DMA_SIZE - 1] = p[5];
    6260:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39

		if (len > 39)
    6264:	f200 80bc 	bhi.w	63e0 <bt_le_sync_cfo+0x338>
			goto rx_flush;

		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    6268:	f10a 0a08 	add.w	sl, sl, #8
    626c:	ea4f 029a 	mov.w	r2, sl, lsr #2
		if (total_transfers < 11) {
    6270:	2a0b      	cmp	r2, #11
    6272:	d00b      	beq.n	628c <bt_le_sync_cfo+0x1e4>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0) ;
    6274:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    6278:	4a49      	ldr	r2, [pc, #292]	; (63a0 <bt_le_sync_cfo+0x2f8>)
    627a:	6812      	ldr	r2, [r2, #0]
    627c:	429a      	cmp	r2, r3
    627e:	d209      	bcs.n	6294 <bt_le_sync_cfo+0x1ec>
    6280:	6831      	ldr	r1, [r6, #0]
    6282:	2900      	cmp	r1, #0
    6284:	d0f8      	beq.n	6278 <bt_le_sync_cfo+0x1d0>
    6286:	e005      	b.n	6294 <bt_le_sync_cfo+0x1ec>
		} else { while (DMACC0Config & DMACCxConfig_E && rx_err == 0) ;
    6288:	6833      	ldr	r3, [r6, #0]
    628a:	b91b      	cbnz	r3, 6294 <bt_le_sync_cfo+0x1ec>
    628c:	4b45      	ldr	r3, [pc, #276]	; (63a4 <bt_le_sync_cfo+0x2fc>)
    628e:	681b      	ldr	r3, [r3, #0]
    6290:	07db      	lsls	r3, r3, #31
    6292:	d4f9      	bmi.n	6288 <bt_le_sync_cfo+0x1e0>
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6294:	4b44      	ldr	r3, [pc, #272]	; (63a8 <bt_le_sync_cfo+0x300>)
		cc2400_strobe(SFSON);
    6296:	2061      	movs	r0, #97	; 0x61
		if (total_transfers < 11) {
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0) ;
		} else { while (DMACC0Config & DMACCxConfig_E && rx_err == 0) ;
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6298:	681a      	ldr	r2, [r3, #0]
		cc2400_strobe(SFSON);

		for (i=4; i<44; i+=4) {
    629a:	2604      	movs	r6, #4
		if (total_transfers < 11) {
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0) ;
		} else { while (DMACC0Config & DMACCxConfig_E && rx_err == 0) ;
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    629c:	f022 0201 	bic.w	r2, r2, #1
    62a0:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SFSON);
    62a2:	f002 fb60 	bl	8966 <cc2400_strobe>

		for (i=4; i<44; i+=4) {
			uint32_t v = rxbuf1[i+0] << 24
    62a6:	4b41      	ldr	r3, [pc, #260]	; (63ac <bt_le_sync_cfo+0x304>)
    62a8:	1c72      	adds	r2, r6, #1
    62aa:	5d98      	ldrb	r0, [r3, r6]
    62ac:	f106 0e03 	add.w	lr, r6, #3
					   | rxbuf1[i+1] << 16
    62b0:	5c99      	ldrb	r1, [r3, r2]
    62b2:	1cb2      	adds	r2, r6, #2
					   | rxbuf1[i+2] << 8
    62b4:	5c9a      	ldrb	r2, [r3, r2]
					   | rxbuf1[i+3] << 0;
    62b6:	f813 300e 	ldrb.w	r3, [r3, lr]
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		cc2400_strobe(SFSON);

		for (i=4; i<44; i+=4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    62ba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
					   | rxbuf1[i+2] << 8
    62be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
					   | rxbuf1[i+3] << 0;
    62c2:	ea43 2b02 	orr.w	fp, r3, r2, lsl #8
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    62c6:	4658      	mov	r0, fp
    62c8:	10b2      	asrs	r2, r6, #2
    62ca:	9200      	str	r2, [sp, #0]
    62cc:	f002 f97e 	bl	85cc <rbit>
    62d0:	9a00      	ldr	r2, [sp, #0]
    62d2:	ab1c      	add	r3, sp, #112	; 0x70
    62d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    62d8:	9b01      	ldr	r3, [sp, #4]
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		cc2400_strobe(SFSON);

		for (i=4; i<44; i+=4) {
    62da:	3604      	adds	r6, #4
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    62dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    62e0:	4050      	eors	r0, r2
    62e2:	f841 0c30 	str.w	r0, [r1, #-48]
			whiten_packet[i/4+1] = rbit(v);
    62e6:	4658      	mov	r0, fp
    62e8:	f002 f970 	bl	85cc <rbit>
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		cc2400_strobe(SFSON);

		for (i=4; i<44; i+=4) {
    62ec:	2e2c      	cmp	r6, #44	; 0x2c
    62ee:	d1da      	bne.n	62a6 <bt_le_sync_cfo+0x1fe>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
			whiten_packet[i/4+1] = rbit(v);
		}

		if (le.crc_verify) {
    62f0:	696b      	ldr	r3, [r5, #20]
    62f2:	b983      	cbnz	r3, 6316 <bt_le_sync_cfo+0x26e>
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc)
				goto rx_flush;
		}

		RXLED_SET;
    62f4:	4b2e      	ldr	r3, [pc, #184]	; (63b0 <bt_le_sync_cfo+0x308>)
    62f6:	2210      	movs	r2, #16
    62f8:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    62fa:	a80f      	add	r0, sp, #60	; 0x3c
    62fc:	69a3      	ldr	r3, [r4, #24]
    62fe:	4798      	blx	r3

		ICER0 = ICER0_ICE_USB;
    6300:	4b2c      	ldr	r3, [pc, #176]	; (63b4 <bt_le_sync_cfo+0x30c>)
    6302:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6306:	601a      	str	r2, [r3, #0]
		if (p[22] == 0x02 && p[23] >= 0xaa) {
    6308:	f89d 8052 	ldrb.w	r8, [sp, #82]	; 0x52
			if (calc_crc != wire_crc)
				goto rx_flush;
		}

		RXLED_SET;
		packet_cb((uint8_t *)packet);
    630c:	4e18      	ldr	r6, [pc, #96]	; (6370 <bt_le_sync_cfo+0x2c8>)

		ICER0 = ICER0_ICE_USB;
		if (p[22] == 0x02 && p[23] >= 0xaa) {
    630e:	f1b8 0f02 	cmp.w	r8, #2
    6312:	d156      	bne.n	63c2 <bt_le_sync_cfo+0x31a>
    6314:	e017      	b.n	6346 <bt_le_sync_cfo+0x29e>
			packet[i/4+1] = rbit(v) ^ whit[i/4];
			whiten_packet[i/4+1] = rbit(v);
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6316:	4b17      	ldr	r3, [pc, #92]	; (6374 <bt_le_sync_cfo+0x2cc>)
    6318:	a910      	add	r1, sp, #64	; 0x40
    631a:	6918      	ldr	r0, [r3, #16]
    631c:	4642      	mov	r2, r8
    631e:	f001 f945 	bl	75ac <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    6322:	ab1c      	add	r3, sp, #112	; 0x70
    6324:	4453      	add	r3, sl
    6326:	f813 2c34 	ldrb.w	r2, [r3, #-52]
						 | (p[4+len+1] << 8)
    632a:	ab1c      	add	r3, sp, #112	; 0x70
    632c:	4443      	add	r3, r8
    632e:	f813 1c2f 	ldrb.w	r1, [r3, #-47]
    6332:	0209      	lsls	r1, r1, #8
    6334:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
						 | (p[4+len+0] << 0);
    6338:	f813 2c30 	ldrb.w	r2, [r3, #-48]
    633c:	ea41 0302 	orr.w	r3, r1, r2
			if (calc_crc != wire_crc)
    6340:	4298      	cmp	r0, r3
    6342:	d14d      	bne.n	63e0 <bt_le_sync_cfo+0x338>
    6344:	e7d6      	b.n	62f4 <bt_le_sync_cfo+0x24c>

		RXLED_SET;
		packet_cb((uint8_t *)packet);

		ICER0 = ICER0_ICE_USB;
		if (p[22] == 0x02 && p[23] >= 0xaa) {
    6346:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    634a:	2ba9      	cmp	r3, #169	; 0xa9
    634c:	d939      	bls.n	63c2 <bt_le_sync_cfo+0x31a>
			enqueue(LE_PACKET, (uint8_t *)packet);
    634e:	a90f      	add	r1, sp, #60	; 0x3c
    6350:	2001      	movs	r0, #1
    6352:	f7fe f8d5 	bl	4500 <enqueue>
			enqueue(MESSAGE, (uint8_t *)cfo_buf);
    6356:	a902      	add	r1, sp, #8
    6358:	4640      	mov	r0, r8
    635a:	f7fe f8d1 	bl	4500 <enqueue>
}

//JWHUR usb_time_rx
static int enqueue_time(uint8_t* buf)
{
	usb_time_rx* f = usb_enqueue_time();
    635e:	f001 f9c7 	bl	76f0 <usb_enqueue_time>
	if  (f == NULL) {
    6362:	bb48      	cbnz	r0, 63b8 <bt_le_sync_cfo+0x310>
		status |= FIFO_OVERFLOW;
    6364:	7873      	ldrb	r3, [r6, #1]
    6366:	f043 0304 	orr.w	r3, r3, #4
    636a:	7073      	strb	r3, [r6, #1]
    636c:	e029      	b.n	63c2 <bt_le_sync_cfo+0x31a>
    636e:	bf00      	nop
    6370:	10000e34 	.word	0x10000e34
    6374:	1000044c 	.word	0x1000044c
    6378:	e000e100 	.word	0xe000e100
    637c:	2009c03c 	.word	0x2009c03c
    6380:	1000103c 	.word	0x1000103c
    6384:	10001554 	.word	0x10001554
    6388:	1000105c 	.word	0x1000105c
    638c:	40004008 	.word	0x40004008
    6390:	10001040 	.word	0x10001040
    6394:	10001042 	.word	0x10001042
    6398:	10000e68 	.word	0x10000e68
    639c:	00009e04 	.word	0x00009e04
    63a0:	50004104 	.word	0x50004104
    63a4:	50004110 	.word	0x50004110
    63a8:	40030024 	.word	0x40030024
    63ac:	10001521 	.word	0x10001521
    63b0:	2009c038 	.word	0x2009c038
    63b4:	e000e180 	.word	0xe000e180
		return 0;
	}
	memcpy(f->time, buf, 16 * sizeof(long));
    63b8:	f106 0134 	add.w	r1, r6, #52	; 0x34
    63bc:	2240      	movs	r2, #64	; 0x40
    63be:	f003 fab9 	bl	9934 <memcpy>
			enqueue(LE_PACKET, (uint8_t *)packet);
			enqueue(MESSAGE, (uint8_t *)cfo_buf);
			//enqueue(MESSAGE, (uint8_t *)whiten_packet);
			enqueue_time((uint8_t *)cfo_time);
		}
		ISER0 = ISER0_ISE_USB;
    63c2:	4b50      	ldr	r3, [pc, #320]	; (6504 <bt_le_sync_cfo+0x45c>)
    63c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    63c8:	601a      	str	r2, [r3, #0]

		le.last_packet = CLK100NS;
    63ca:	4b4f      	ldr	r3, [pc, #316]	; (6508 <bt_le_sync_cfo+0x460>)
    63cc:	4a4f      	ldr	r2, [pc, #316]	; (650c <bt_le_sync_cfo+0x464>)
    63ce:	681b      	ldr	r3, [r3, #0]
    63d0:	6812      	ldr	r2, [r2, #0]
    63d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    63d6:	f640 4135 	movw	r1, #3125	; 0xc35
    63da:	fb01 2303 	mla	r3, r1, r3, r2
    63de:	646b      	str	r3, [r5, #68]	; 0x44

	rx_flush:
		cc2400_strobe(SFSON);
    63e0:	2061      	movs	r0, #97	; 0x61
    63e2:	f002 fac0 	bl	8966 <cc2400_strobe>
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    63e6:	4b4a      	ldr	r3, [pc, #296]	; (6510 <bt_le_sync_cfo+0x468>)
    63e8:	681a      	ldr	r2, [r3, #0]
    63ea:	f022 0201 	bic.w	r2, r2, #1
    63ee:	601a      	str	r2, [r3, #0]
		while (SSP1SR & SSPSR_RNE) {
    63f0:	4b48      	ldr	r3, [pc, #288]	; (6514 <bt_le_sync_cfo+0x46c>)
    63f2:	681b      	ldr	r3, [r3, #0]
    63f4:	0758      	lsls	r0, r3, #29
    63f6:	d502      	bpl.n	63fe <bt_le_sync_cfo+0x356>
			u8 tmp = (u8) DIO_SSP_DR;
    63f8:	4b47      	ldr	r3, [pc, #284]	; (6518 <bt_le_sync_cfo+0x470>)
    63fa:	681b      	ldr	r3, [r3, #0]
    63fc:	e7f8      	b.n	63f0 <bt_le_sync_cfo+0x348>
		}
		u32 now = CLK100NS;
    63fe:	4b42      	ldr	r3, [pc, #264]	; (6508 <bt_le_sync_cfo+0x460>)
    6400:	4a42      	ldr	r2, [pc, #264]	; (650c <bt_le_sync_cfo+0x464>)
    6402:	681b      	ldr	r3, [r3, #0]
    6404:	6812      	ldr	r2, [r2, #0]
    6406:	f640 4135 	movw	r1, #3125	; 0xc35
    640a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    640e:	fb01 2303 	mla	r3, r1, r3, r2
		if (now <le.last_packet)
    6412:	6c6a      	ldr	r2, [r5, #68]	; 0x44
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
    6414:	7e29      	ldrb	r1, [r5, #24]
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
			u8 tmp = (u8) DIO_SSP_DR;
		}
		u32 now = CLK100NS;
		if (now <le.last_packet)
    6416:	4293      	cmp	r3, r2
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
    6418:	f1a1 0102 	sub.w	r1, r1, #2
		while (SSP1SR & SSPSR_RNE) {
			u8 tmp = (u8) DIO_SSP_DR;
		}
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
    641c:	bf38      	it	cc
    641e:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
    6422:	b2c9      	uxtb	r1, r1
		while (SSP1SR & SSPSR_RNE) {
			u8 tmp = (u8) DIO_SSP_DR;
		}
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
    6424:	bf38      	it	cc
    6426:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
    642a:	2901      	cmp	r1, #1
    642c:	d803      	bhi.n	6436 <bt_le_sync_cfo+0x38e>
    642e:	493b      	ldr	r1, [pc, #236]	; (651c <bt_le_sync_cfo+0x474>)
    6430:	1a9b      	subs	r3, r3, r2
    6432:	428b      	cmp	r3, r1
    6434:	d802      	bhi.n	643c <bt_le_sync_cfo+0x394>
    6436:	69e3      	ldr	r3, [r4, #28]
    6438:	2b01      	cmp	r3, #1
    643a:	d125      	bne.n	6488 <bt_le_sync_cfo+0x3e0>
			reset_le();
    643c:	f7ff fb1c 	bl	5a78 <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    6440:	4937      	ldr	r1, [pc, #220]	; (6520 <bt_le_sync_cfo+0x478>)
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
			reset_le();
			le_jam_count = 0;
    6442:	2300      	movs	r3, #0
			TXLED_CLR;
    6444:	f44f 7080 	mov.w	r0, #256	; 0x100
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
			reset_le();
			le_jam_count = 0;
    6448:	61e3      	str	r3, [r4, #28]
			TXLED_CLR;
    644a:	6008      	str	r0, [r1, #0]
			if (jam_mode == JAM_ONCE) {
    644c:	7ce1      	ldrb	r1, [r4, #19]
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
			reset_le();
			le_jam_count = 0;
    644e:	4a35      	ldr	r2, [pc, #212]	; (6524 <bt_le_sync_cfo+0x47c>)
			TXLED_CLR;
			if (jam_mode == JAM_ONCE) {
    6450:	2901      	cmp	r1, #1
    6452:	d102      	bne.n	645a <bt_le_sync_cfo+0x3b2>
				jam_mode = JAM_NONE;
    6454:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    6456:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    6458:	e047      	b.n	64ea <bt_le_sync_cfo+0x442>
			}
			le.link_state = LINK_LISTENING;
    645a:	2301      	movs	r3, #1
			cc2400_strobe(SRFOFF);
    645c:	2064      	movs	r0, #100	; 0x64
			if (jam_mode == JAM_ONCE) {
				jam_mode = JAM_NONE;
				requested_mode = MODE_IDLE;
				goto cleanup;
			}
			le.link_state = LINK_LISTENING;
    645e:	762b      	strb	r3, [r5, #24]
			cc2400_strobe(SRFOFF);
    6460:	f002 fa81 	bl	8966 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6464:	f002 fa78 	bl	8958 <cc2400_status>
    6468:	0741      	lsls	r1, r0, #29
    646a:	d4fb      	bmi.n	6464 <bt_le_sync_cfo+0x3bc>

			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    646c:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
    6470:	b29b      	uxth	r3, r3
    6472:	b123      	cbz	r3, 647e <bt_le_sync_cfo+0x3d6>
    6474:	4b2c      	ldr	r3, [pc, #176]	; (6528 <bt_le_sync_cfo+0x480>)
    6476:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    647a:	b29b      	uxth	r3, r3
    647c:	e001      	b.n	6482 <bt_le_sync_cfo+0x3da>
    647e:	f640 1362 	movw	r3, #2402	; 0x962
    6482:	802b      	strh	r3, [r5, #0]
			restart_jamming = 1;
    6484:	2301      	movs	r3, #1
    6486:	6763      	str	r3, [r4, #116]	; 0x74
		}

		cc2400_set(SYNCL, le.syncl);
    6488:	202c      	movs	r0, #44	; 0x2c
    648a:	8969      	ldrh	r1, [r5, #10]
    648c:	f002 f993 	bl	87b6 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6490:	202d      	movs	r0, #45	; 0x2d
    6492:	8929      	ldrh	r1, [r5, #8]
    6494:	f002 f98f 	bl	87b6 <cc2400_set>

		if (do_hop)
    6498:	7ae3      	ldrb	r3, [r4, #11]
    649a:	b10b      	cbz	r3, 64a0 <bt_le_sync_cfo+0x3f8>
			hop();
    649c:	f7ff f82e 	bl	54fc <hop>
		if (le_jam_count > 0) {
    64a0:	69e3      	ldr	r3, [r4, #28]
    64a2:	4e20      	ldr	r6, [pc, #128]	; (6524 <bt_le_sync_cfo+0x47c>)
    64a4:	2b00      	cmp	r3, #0
    64a6:	dd05      	ble.n	64b4 <bt_le_sync_cfo+0x40c>
			le_jam();
    64a8:	f7fe ffec 	bl	5484 <le_jam>
			--le_jam_count;
    64ac:	69f3      	ldr	r3, [r6, #28]
    64ae:	3b01      	subs	r3, #1
    64b0:	61f3      	str	r3, [r6, #28]
    64b2:	e014      	b.n	64de <bt_le_sync_cfo+0x436>
		} else {
			dma_init_le();
    64b4:	f001 fb2a 	bl	7b0c <dma_init_le>
			dio_ssp_start();
    64b8:	f001 fb70 	bl	7b9c <dio_ssp_start>

			if (restart_jamming) {
    64bc:	6f73      	ldr	r3, [r6, #116]	; 0x74
    64be:	b13b      	cbz	r3, 64d0 <bt_le_sync_cfo+0x428>
				cc2400_rx_sync(rbit(le.access_address));
    64c0:	6868      	ldr	r0, [r5, #4]
    64c2:	f002 f883 	bl	85cc <rbit>
    64c6:	f7fd ffc3 	bl	4450 <cc2400_rx_sync>
				restart_jamming = 0;
    64ca:	2300      	movs	r3, #0
    64cc:	6773      	str	r3, [r6, #116]	; 0x74
    64ce:	e006      	b.n	64de <bt_le_sync_cfo+0x436>
			} else {
				while (!(cc2400_status() & FS_LOCK));
    64d0:	f002 fa42 	bl	8958 <cc2400_status>
    64d4:	0742      	lsls	r2, r0, #29
    64d6:	d5fb      	bpl.n	64d0 <bt_le_sync_cfo+0x428>
				cc2400_strobe(SRX);
    64d8:	2062      	movs	r0, #98	; 0x62
    64da:	f002 fa44 	bl	8966 <cc2400_strobe>
			}
		}
		rx_tc = 0;
		rx_err = 0;
    64de:	4a13      	ldr	r2, [pc, #76]	; (652c <bt_le_sync_cfo+0x484>)
			} else {
				while (!(cc2400_status() & FS_LOCK));
				cc2400_strobe(SRX);
			}
		}
		rx_tc = 0;
    64e0:	2300      	movs	r3, #0
    64e2:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    64e6:	6013      	str	r3, [r2, #0]
    64e8:	e601      	b.n	60ee <bt_le_sync_cfo+0x46>

	}
	goto cleanup;

cleanup:
	ICER0 = ICER0_ICE_USB;
    64ea:	4b11      	ldr	r3, [pc, #68]	; (6530 <bt_le_sync_cfo+0x488>)
    64ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    64f0:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    64f2:	f7fe f85f 	bl	45b4 <cc2400_idle>
	dio_ssp_stop ();
    64f6:	f001 fb77 	bl	7be8 <dio_ssp_stop>
	cs_trigger_disable();
    64fa:	f001 fa21 	bl	7940 <cs_trigger_disable>
}
    64fe:	b01d      	add	sp, #116	; 0x74
    6500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6504:	e000e100 	.word	0xe000e100
    6508:	1000105c 	.word	0x1000105c
    650c:	40004008 	.word	0x40004008
    6510:	40030024 	.word	0x40030024
    6514:	4003000c 	.word	0x4003000c
    6518:	40030008 	.word	0x40030008
    651c:	02faf080 	.word	0x02faf080
    6520:	2009c03c 	.word	0x2009c03c
    6524:	10000e34 	.word	0x10000e34
    6528:	1000044c 	.word	0x1000044c
    652c:	10001554 	.word	0x10001554
    6530:	e000e180 	.word	0xe000e180

00006534 <bt_follow_le>:
			do_hop = 1;
		}
	}
}

void bt_follow_le() {
    6534:	b510      	push	{r4, lr}
	reset_le();
    6536:	f7ff fa9f 	bl	5a78 <reset_le>
	packet_cb = connection_follow_cb;
    653a:	4c04      	ldr	r4, [pc, #16]	; (654c <bt_follow_le+0x18>)
    653c:	4b04      	ldr	r3, [pc, #16]	; (6550 <bt_follow_le+0x1c>)
	bt_le_sync(MODE_BT_FOLLOW_LE);
    653e:	2009      	movs	r0, #9
	}
}

void bt_follow_le() {
	reset_le();
	packet_cb = connection_follow_cb;
    6540:	61a3      	str	r3, [r4, #24]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    6542:	f7ff fbc5 	bl	5cd0 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    6546:	2300      	movs	r3, #0
    6548:	7463      	strb	r3, [r4, #17]
    654a:	bd10      	pop	{r4, pc}
    654c:	10000e34 	.word	0x10000e34
    6550:	00004765 	.word	0x00004765

00006554 <bt_tracking_le>:
}

//JWHUR cfo estimation tracking
void bt_tracking_le() {
    6554:	b510      	push	{r4, lr}
	reset_le();
    6556:	f7ff fa8f 	bl	5a78 <reset_le>
	packet_cb = connection_follow_cb;
    655a:	4c04      	ldr	r4, [pc, #16]	; (656c <bt_tracking_le+0x18>)
    655c:	4b04      	ldr	r3, [pc, #16]	; (6570 <bt_tracking_le+0x1c>)
	bt_le_sync_cfo(MODE_BT_CFO_LE);
    655e:	2019      	movs	r0, #25
}

//JWHUR cfo estimation tracking
void bt_tracking_le() {
	reset_le();
	packet_cb = connection_follow_cb;
    6560:	61a3      	str	r3, [r4, #24]
	bt_le_sync_cfo(MODE_BT_CFO_LE);
    6562:	f7ff fda1 	bl	60a8 <bt_le_sync_cfo>
	mode = MODE_IDLE;
    6566:	2300      	movs	r3, #0
    6568:	7463      	strb	r3, [r4, #17]
    656a:	bd10      	pop	{r4, pc}
    656c:	10000e34 	.word	0x10000e34
    6570:	00004765 	.word	0x00004765

00006574 <le_promisc_state>:
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    6574:	b570      	push	{r4, r5, r6, lr}
    6576:	b08e      	sub	sp, #56	; 0x38
    6578:	4606      	mov	r6, r0
    657a:	460d      	mov	r5, r1
    657c:	4614      	mov	r4, r2
	u8 buf[50] = { 0, };
    657e:	a801      	add	r0, sp, #4
    6580:	2100      	movs	r1, #0
    6582:	2232      	movs	r2, #50	; 0x32
    6584:	f7fd fe54 	bl	4230 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    6588:	4629      	mov	r1, r5
    658a:	2c31      	cmp	r4, #49	; 0x31
    658c:	bf34      	ite	cc
    658e:	4622      	movcc	r2, r4
    6590:	2231      	movcs	r2, #49	; 0x31
    6592:	f10d 0005 	add.w	r0, sp, #5
void le_promisc_state(u8 type, void *data, unsigned len) {
	u8 buf[50] = { 0, };
	if (len > 49)
		len = 49;

	buf[0] = type;
    6596:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    659a:	f003 f9cb 	bl	9934 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    659e:	a901      	add	r1, sp, #4
    65a0:	2005      	movs	r0, #5
    65a2:	f7fd ffad 	bl	4500 <enqueue>
}
    65a6:	b00e      	add	sp, #56	; 0x38
    65a8:	bd70      	pop	{r4, r5, r6, pc}
    65aa:	0000      	movs	r0, r0

000065ac <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    65ac:	b538      	push	{r3, r4, r5, lr}
	static u32 first_ts = 0;
	if (channel == 2404) {
    65ae:	4a31      	ldr	r2, [pc, #196]	; (6674 <promisc_recover_hop_increment+0xc8>)
    65b0:	f640 1364 	movw	r3, #2404	; 0x964
    65b4:	8811      	ldrh	r1, [r2, #0]
    65b6:	4c30      	ldr	r4, [pc, #192]	; (6678 <promisc_recover_hop_increment+0xcc>)
    65b8:	b289      	uxth	r1, r1
    65ba:	4299      	cmp	r1, r3
    65bc:	d10d      	bne.n	65da <promisc_recover_hop_increment+0x2e>
		first_ts = CLK100NS;
    65be:	4b2f      	ldr	r3, [pc, #188]	; (667c <promisc_recover_hop_increment+0xd0>)
    65c0:	4a2f      	ldr	r2, [pc, #188]	; (6680 <promisc_recover_hop_increment+0xd4>)
    65c2:	681b      	ldr	r3, [r3, #0]
    65c4:	6812      	ldr	r2, [r2, #0]
    65c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    65ca:	f640 4135 	movw	r1, #3125	; 0xc35
    65ce:	fb01 2303 	mla	r3, r1, r3, r2
    65d2:	67a3      	str	r3, [r4, #120]	; 0x78
		hop_direct_channel = 2406;
    65d4:	f640 1366 	movw	r3, #2406	; 0x966
    65d8:	e048      	b.n	666c <promisc_recover_hop_increment+0xc0>
		do_hop = 1;
	} else if (channel == 2406) {
    65da:	8810      	ldrh	r0, [r2, #0]
    65dc:	f640 1166 	movw	r1, #2406	; 0x966
    65e0:	b280      	uxth	r0, r0
    65e2:	4288      	cmp	r0, r1
    65e4:	d142      	bne.n	666c <promisc_recover_hop_increment+0xc0>
		u32 second_ts = CLK100NS;
    65e6:	4b25      	ldr	r3, [pc, #148]	; (667c <promisc_recover_hop_increment+0xd0>)
    65e8:	4925      	ldr	r1, [pc, #148]	; (6680 <promisc_recover_hop_increment+0xd4>)
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	6809      	ldr	r1, [r1, #0]
    65ee:	f640 4035 	movw	r0, #3125	; 0xc35
    65f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    65f6:	fb00 1303 	mla	r3, r0, r3, r1
		if (second_ts < first_ts)
    65fa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    65fc:	8c52      	ldrh	r2, [r2, #34]	; 0x22
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
    65fe:	4283      	cmp	r3, r0
			second_ts += 3276800000; // handle rollover
    6600:	bf3c      	itt	cc
    6602:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    6606:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    660a:	1a1b      	subs	r3, r3, r0
    660c:	f243 05d4 	movw	r5, #12500	; 0x30d4
    6610:	f641 006a 	movw	r0, #6250	; 0x186a
    6614:	fb00 3302 	mla	r3, r0, r2, r3
    6618:	4355      	muls	r5, r2
    661a:	fbb3 f3f5 	udiv	r3, r3, r5
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    661e:	2b24      	cmp	r3, #36	; 0x24
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6620:	4914      	ldr	r1, [pc, #80]	; (6674 <promisc_recover_hop_increment+0xc8>)
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    6622:	d821      	bhi.n	6668 <promisc_recover_hop_increment+0xbc>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6624:	4817      	ldr	r0, [pc, #92]	; (6684 <promisc_recover_hop_increment+0xd8>)
			le.interval_timer = le.conn_interval / 2;
    6626:	0852      	lsrs	r2, r2, #1
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6628:	4403      	add	r3, r0
    662a:	f893 0870 	ldrb.w	r0, [r3, #2160]	; 0x870
			le.interval_timer = le.conn_interval / 2;
    662e:	840a      	strh	r2, [r1, #32]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6630:	7688      	strb	r0, [r1, #26]
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    6632:	2225      	movs	r2, #37	; 0x25
    6634:	3001      	adds	r0, #1
    6636:	fb90 f5f2 	sdiv	r5, r0, r2
    663a:	fb02 0215 	mls	r2, r2, r5, r0
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    663e:	2300      	movs	r3, #0
    6640:	848b      	strh	r3, [r1, #36]	; 0x24
			le.conn_epoch = 0;
    6642:	61cb      	str	r3, [r1, #28]
			do_hop = 0;
    6644:	72e3      	strb	r3, [r4, #11]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
    6646:	2003      	movs	r0, #3
			le.crc_verify = 0;
    6648:	614b      	str	r3, [r1, #20]
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    664a:	4b0f      	ldr	r3, [pc, #60]	; (6688 <promisc_recover_hop_increment+0xdc>)
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    664c:	764a      	strb	r2, [r1, #25]
			le.link_state = LINK_CONNECTED;
    664e:	7608      	strb	r0, [r1, #24]
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    6650:	2201      	movs	r2, #1
    6652:	311a      	adds	r1, #26
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    6654:	61a3      	str	r3, [r4, #24]
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
    6656:	72a0      	strb	r0, [r4, #10]
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    6658:	f7ff ff8c 	bl	6574 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    665c:	7ce3      	ldrb	r3, [r4, #19]
    665e:	b143      	cbz	r3, 6672 <promisc_recover_hop_increment+0xc6>
				le_jam_count = JAM_COUNT_DEFAULT;
    6660:	4b05      	ldr	r3, [pc, #20]	; (6678 <promisc_recover_hop_increment+0xcc>)
    6662:	2228      	movs	r2, #40	; 0x28
    6664:	61da      	str	r2, [r3, #28]
    6666:	bd38      	pop	{r3, r4, r5, pc}

			return;
		}
		hop_direct_channel = 2404;
    6668:	f640 1364 	movw	r3, #2404	; 0x964
		do_hop = 1;
	}
	else {
		hop_direct_channel = 2404;
    666c:	81a3      	strh	r3, [r4, #12]
		do_hop = 1;
    666e:	2301      	movs	r3, #1
    6670:	72e3      	strb	r3, [r4, #11]
    6672:	bd38      	pop	{r3, r4, r5, pc}
    6674:	1000044c 	.word	0x1000044c
    6678:	10000e34 	.word	0x10000e34
    667c:	1000105c 	.word	0x1000105c
    6680:	40004008 	.word	0x40004008
    6684:	00009d14 	.word	0x00009d14
    6688:	00004765 	.word	0x00004765

0000668c <promisc_recover_hop_interval>:
	}
}

void promisc_recover_hop_interval(u8 *packet) {
    668c:	b538      	push	{r3, r4, r5, lr}
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    668e:	4b25      	ldr	r3, [pc, #148]	; (6724 <promisc_recover_hop_interval+0x98>)
    6690:	f640 4235 	movw	r2, #3125	; 0xc35
    6694:	681c      	ldr	r4, [r3, #0]
    6696:	4b24      	ldr	r3, [pc, #144]	; (6728 <promisc_recover_hop_interval+0x9c>)
    6698:	f3c4 0413 	ubfx	r4, r4, #0, #20
    669c:	681b      	ldr	r3, [r3, #0]
	if (cur_clk < prev_clk)
    669e:	4d23      	ldr	r5, [pc, #140]	; (672c <promisc_recover_hop_interval+0xa0>)
}

void promisc_recover_hop_interval(u8 *packet) {
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    66a0:	fb02 3404 	mla	r4, r2, r4, r3
	if (cur_clk < prev_clk)
    66a4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    66a6:	429c      	cmp	r4, r3
    66a8:	d205      	bcs.n	66b6 <promisc_recover_hop_interval+0x2a>
		cur_clk += 3267800000; // handle rollover
    66aa:	f104 4443 	add.w	r4, r4, #3271557120	; 0xc3000000
    66ae:	f5a4 1465 	sub.w	r4, r4, #3751936	; 0x394000
    66b2:	f5a4 54a2 	sub.w	r4, r4, #5184	; 0x1440
	u32 clk_diff = cur_clk - prev_clk;
    66b6:	1ae3      	subs	r3, r4, r3
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    66b8:	f246 12a7 	movw	r2, #24999	; 0x61a7
    66bc:	4293      	cmp	r3, r2
    66be:	d930      	bls.n	6722 <promisc_recover_hop_interval+0x96>
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    66c0:	4a1b      	ldr	r2, [pc, #108]	; (6730 <promisc_recover_hop_interval+0xa4>)
    66c2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    66c6:	428b      	cmp	r3, r1
		le_promisc.smallest_hop_interval = clk_diff;
    66c8:	bf38      	it	cc
    66ca:	f8c2 3100 	strcc.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    66ce:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    66d2:	4918      	ldr	r1, [pc, #96]	; (6734 <promisc_recover_hop_interval+0xa8>)
    66d4:	f502 3261 	add.w	r2, r2, #230400	; 0x38400
    66d8:	f202 3252 	addw	r2, r2, #850	; 0x352
    66dc:	fbb2 f2f1 	udiv	r2, r2, r1

	if (le.conn_interval == obsv_hop_interval) {
    66e0:	4915      	ldr	r1, [pc, #84]	; (6738 <promisc_recover_hop_interval+0xac>)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    66e2:	b292      	uxth	r2, r2

	if (le.conn_interval == obsv_hop_interval) {
    66e4:	8c48      	ldrh	r0, [r1, #34]	; 0x22
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    66e6:	4b12      	ldr	r3, [pc, #72]	; (6730 <promisc_recover_hop_interval+0xa4>)

	if (le.conn_interval == obsv_hop_interval) {
    66e8:	4290      	cmp	r0, r2
    66ea:	d115      	bne.n	6718 <promisc_recover_hop_interval+0x8c>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    66ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    66f0:	3201      	adds	r2, #1
		if (le_promisc.consec_intervals == 5) {
    66f2:	2a05      	cmp	r2, #5

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    66f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    66f8:	d112      	bne.n	6720 <promisc_recover_hop_interval+0x94>
			packet_cb = promisc_recover_hop_increment;
    66fa:	4b10      	ldr	r3, [pc, #64]	; (673c <promisc_recover_hop_interval+0xb0>)
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    66fc:	2002      	movs	r0, #2

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
    66fe:	61ab      	str	r3, [r5, #24]
			hop_direct_channel = 2404;
    6700:	f640 1364 	movw	r3, #2404	; 0x964
    6704:	81ab      	strh	r3, [r5, #12]
			hop_mode = HOP_DIRECT;
    6706:	2304      	movs	r3, #4
    6708:	72ab      	strb	r3, [r5, #10]
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    670a:	3122      	adds	r1, #34	; 0x22
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    670c:	2301      	movs	r3, #1
			le_promisc_state(2, &le.conn_interval, 2);
    670e:	4602      	mov	r2, r0
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    6710:	72eb      	strb	r3, [r5, #11]
			le_promisc_state(2, &le.conn_interval, 2);
    6712:	f7ff ff2f 	bl	6574 <le_promisc_state>
    6716:	e003      	b.n	6720 <promisc_recover_hop_interval+0x94>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    6718:	844a      	strh	r2, [r1, #34]	; 0x22
		le_promisc.consec_intervals = 0;
    671a:	2200      	movs	r2, #0
    671c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    6720:	67ec      	str	r4, [r5, #124]	; 0x7c
    6722:	bd38      	pop	{r3, r4, r5, pc}
    6724:	1000105c 	.word	0x1000105c
    6728:	40004008 	.word	0x40004008
    672c:	10000e34 	.word	0x10000e34
    6730:	100010a0 	.word	0x100010a0
    6734:	00070ea4 	.word	0x00070ea4
    6738:	1000044c 	.word	0x1000044c
    673c:	000065ad 	.word	0x000065ad

00006740 <promisc_follow_cb>:
}

void promisc_follow_cb(u8 *packet) {
    6740:	b538      	push	{r3, r4, r5, lr}
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6742:	4c18      	ldr	r4, [pc, #96]	; (67a4 <promisc_follow_cb+0x64>)
	}

	prev_clk = cur_clk;
}

void promisc_follow_cb(u8 *packet) {
    6744:	4601      	mov	r1, r0
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6746:	6963      	ldr	r3, [r4, #20]
    6748:	bb53      	cbnz	r3, 67a0 <promisc_follow_cb+0x60>
    674a:	7903      	ldrb	r3, [r0, #4]
    674c:	2b01      	cmp	r3, #1
    674e:	d127      	bne.n	67a0 <promisc_follow_cb+0x60>
    6750:	7945      	ldrb	r5, [r0, #5]
    6752:	bb2d      	cbnz	r5, 67a0 <promisc_follow_cb+0x60>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    6754:	7a03      	ldrb	r3, [r0, #8]
    6756:	79c0      	ldrb	r0, [r0, #7]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6758:	2202      	movs	r2, #2
void promisc_follow_cb(u8 *packet) {
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    675a:	0200      	lsls	r0, r0, #8
    675c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    6760:	798b      	ldrb	r3, [r1, #6]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6762:	3104      	adds	r1, #4
    6764:	4318      	orrs	r0, r3
    6766:	f000 fef7 	bl	7558 <btle_reverse_crc>
    676a:	462a      	mov	r2, r5
    676c:	60e0      	str	r0, [r4, #12]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    676e:	462b      	mov	r3, r5
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6770:	fa20 f103 	lsr.w	r1, r0, r3
    6774:	f1c3 0517 	rsb	r5, r3, #23
    6778:	f001 0101 	and.w	r1, r1, #1
    677c:	40a9      	lsls	r1, r5
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    677e:	3301      	adds	r3, #1
    6780:	2b18      	cmp	r3, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6782:	ea42 0201 	orr.w	r2, r2, r1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    6786:	d1f3      	bne.n	6770 <promisc_follow_cb+0x30>
    6788:	6122      	str	r2, [r4, #16]
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
    678a:	4b07      	ldr	r3, [pc, #28]	; (67a8 <promisc_follow_cb+0x68>)
    678c:	4a07      	ldr	r2, [pc, #28]	; (67ac <promisc_follow_cb+0x6c>)
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    678e:	2001      	movs	r0, #1
		packet_cb = promisc_recover_hop_interval;
    6790:	619a      	str	r2, [r3, #24]
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    6792:	6160      	str	r0, [r4, #20]
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    6794:	4906      	ldr	r1, [pc, #24]	; (67b0 <promisc_follow_cb+0x70>)
    6796:	2203      	movs	r2, #3
	}
}
    6798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    679c:	f7ff beea 	b.w	6574 <le_promisc_state>
    67a0:	bd38      	pop	{r3, r4, r5, pc}
    67a2:	bf00      	nop
    67a4:	1000044c 	.word	0x1000044c
    67a8:	10000e34 	.word	0x10000e34
    67ac:	0000668d 	.word	0x0000668d
    67b0:	10000458 	.word	0x10000458

000067b4 <see_aa>:
	}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    67b4:	b530      	push	{r4, r5, lr}
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    67b6:	2200      	movs	r2, #0
		if (le_promisc.active_aa[i].aa == aa) {
    67b8:	4d14      	ldr	r5, [pc, #80]	; (680c <see_aa+0x58>)
    67ba:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
    67be:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    67c2:	4281      	cmp	r1, r0
    67c4:	d102      	bne.n	67cc <see_aa+0x18>
			++le_promisc.active_aa[i].count;
    67c6:	685a      	ldr	r2, [r3, #4]
    67c8:	3201      	adds	r2, #1
    67ca:	e01c      	b.n	6806 <see_aa+0x52>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    67cc:	3201      	adds	r2, #1
    67ce:	2a20      	cmp	r2, #32
    67d0:	d1f2      	bne.n	67b8 <see_aa+0x4>
    67d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    67d6:	4619      	mov	r1, r3
    67d8:	2200      	movs	r2, #0
    67da:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    67de:	6864      	ldr	r4, [r4, #4]
    67e0:	428c      	cmp	r4, r1
    67e2:	db05      	blt.n	67f0 <see_aa+0x3c>
    67e4:	2900      	cmp	r1, #0
    67e6:	bfa8      	it	ge
    67e8:	460c      	movge	r4, r1
    67ea:	bfb8      	it	lt
    67ec:	4613      	movlt	r3, r2
    67ee:	e000      	b.n	67f2 <see_aa+0x3e>
    67f0:	4613      	mov	r3, r2
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    67f2:	3201      	adds	r2, #1
    67f4:	2a20      	cmp	r2, #32
    67f6:	d001      	beq.n	67fc <see_aa+0x48>
    67f8:	4621      	mov	r1, r4
    67fa:	e7ee      	b.n	67da <see_aa+0x26>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    67fc:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    6800:	2201      	movs	r2, #1
    6802:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    6806:	605a      	str	r2, [r3, #4]
    6808:	bd30      	pop	{r4, r5, pc}
    680a:	bf00      	nop
    680c:	100010a0 	.word	0x100010a0

00006810 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6814:	b095      	sub	sp, #84	; 0x54
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    6816:	2100      	movs	r1, #0
	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6818:	4680      	mov	r8, r0
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    681a:	2240      	movs	r2, #64	; 0x40
    681c:	a804      	add	r0, sp, #16
    681e:	f7fd fd07 	bl	4230 <memset>
    6822:	2301      	movs	r3, #1
    6824:	f88d 3010 	strb.w	r3, [sp, #16]
    6828:	f88d 3020 	strb.w	r3, [sp, #32]
    682c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    6830:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    6834:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6838:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    683c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    6840:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    6844:	ad14      	add	r5, sp, #80	; 0x50
    6846:	ac04      	add	r4, sp, #16
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];
    6848:	4e50      	ldr	r6, [pc, #320]	; (698c <cb_le_promisc+0x17c>)
    684a:	4f51      	ldr	r7, [pc, #324]	; (6990 <cb_le_promisc+0x180>)
    684c:	8830      	ldrh	r0, [r6, #0]
    684e:	b280      	uxth	r0, r0
    6850:	3862      	subs	r0, #98	; 0x62
    6852:	b2c0      	uxtb	r0, r0
    6854:	f000 fe2a 	bl	74ac <btle_channel_index>
    6858:	5c3a      	ldrb	r2, [r7, r0]

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    685a:	2300      	movs	r3, #0
			desired[i][j] ^= whitening[idx];
    685c:	18b9      	adds	r1, r7, r2
    685e:	5ce0      	ldrb	r0, [r4, r3]
    6860:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    6864:	3201      	adds	r2, #1
	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
			desired[i][j] ^= whitening[idx];
    6866:	4041      	eors	r1, r0
    6868:	54e1      	strb	r1, [r4, r3]
			idx = (idx + 1) % sizeof(whitening);
    686a:	217f      	movs	r1, #127	; 0x7f

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    686c:	3301      	adds	r3, #1
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    686e:	fbb2 f0f1 	udiv	r0, r2, r1

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6872:	2b10      	cmp	r3, #16
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    6874:	fb01 2210 	mls	r2, r1, r0, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6878:	d1f0      	bne.n	685c <cb_le_promisc+0x4c>
    687a:	3410      	adds	r4, #16
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    687c:	42ac      	cmp	r4, r5
    687e:	d1e3      	bne.n	6848 <cb_le_promisc+0x38>
    6880:	f108 0520 	add.w	r5, r8, #32
    6884:	f508 783c 	add.w	r8, r8, #752	; 0x2f0
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
    6888:	4b42      	ldr	r3, [pc, #264]	; (6994 <cb_le_promisc+0x184>)
    688a:	466c      	mov	r4, sp
    688c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    688e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6892:	2200      	movs	r2, #0
    6894:	ab04      	add	r3, sp, #16
    6896:	eb03 0182 	add.w	r1, r3, r2, lsl #2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    689a:	2300      	movs	r3, #0
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
				if (unpacked[i+k] != desired[j][k]) {
    689c:	f815 c003 	ldrb.w	ip, [r5, r3]
    68a0:	5cc8      	ldrb	r0, [r1, r3]
    68a2:	4584      	cmp	ip, r0
    68a4:	d002      	beq.n	68ac <cb_le_promisc+0x9c>
					ok[j] = 0;
    68a6:	2300      	movs	r3, #0
    68a8:	50a3      	str	r3, [r4, r2]
					break;
    68aa:	e002      	b.n	68b2 <cb_le_promisc+0xa2>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    68ac:	3301      	adds	r3, #1
    68ae:	2b10      	cmp	r3, #16
    68b0:	d1f4      	bne.n	689c <cb_le_promisc+0x8c>
    68b2:	3204      	adds	r2, #4
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    68b4:	2a10      	cmp	r2, #16
    68b6:	d1ed      	bne.n	6894 <cb_le_promisc+0x84>
    68b8:	2300      	movs	r3, #0
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
			if (ok[j]) {
    68ba:	58e2      	ldr	r2, [r4, r3]
    68bc:	b91a      	cbnz	r2, 68c6 <cb_le_promisc+0xb6>
    68be:	3304      	adds	r3, #4
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    68c0:	2b10      	cmp	r3, #16
    68c2:	d1fa      	bne.n	68ba <cb_le_promisc+0xaa>
    68c4:	e03e      	b.n	6944 <cb_le_promisc+0x134>
		// skip if no match
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    68c6:	8830      	ldrh	r0, [r6, #0]
    68c8:	b280      	uxth	r0, r0
    68ca:	3862      	subs	r0, #98	; 0x62
    68cc:	b2c0      	uxtb	r0, r0
    68ce:	f000 fded 	bl	74ac <btle_channel_index>
    68d2:	5c38      	ldrb	r0, [r7, r0]
		for (j = 0; j < 4+3+3; ++j) {
    68d4:	2300      	movs	r3, #0
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    68d6:	2100      	movs	r1, #0
    68d8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
    68dc:	460a      	mov	r2, r1
    68de:	eb0c 0402 	add.w	r4, ip, r2
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
    68e2:	2b03      	cmp	r3, #3
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
    68e4:	f814 4c20 	ldrb.w	r4, [r4, #-32]
				if (j >= 4) { // unwhiten data bytes
    68e8:	dd0c      	ble.n	6904 <cb_le_promisc+0xf4>
					bit ^= whitening[idx];
    68ea:	eb07 0e00 	add.w	lr, r7, r0
    68ee:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    68f2:	3001      	adds	r0, #1
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
    68f4:	ea84 040e 	eor.w	r4, r4, lr
					idx = (idx + 1) % sizeof(whitening);
    68f8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    68fc:	fbb0 f9fe 	udiv	r9, r0, lr
    6900:	fb0e 0019 	mls	r0, lr, r9, r0
				}
				byte |= bit << k;
    6904:	4094      	lsls	r4, r2

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6906:	3201      	adds	r2, #1
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6908:	4321      	orrs	r1, r4

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    690a:	2a08      	cmp	r2, #8
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    690c:	b2c9      	uxtb	r1, r1

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    690e:	d1e6      	bne.n	68de <cb_le_promisc+0xce>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    6910:	4c21      	ldr	r4, [pc, #132]	; (6998 <cb_le_promisc+0x188>)
    6912:	6822      	ldr	r2, [r4, #0]
    6914:	54d1      	strb	r1, [r2, r3]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    6916:	3301      	adds	r3, #1
    6918:	2b0a      	cmp	r3, #10
    691a:	d1dc      	bne.n	68d6 <cb_le_promisc+0xc6>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    691c:	6823      	ldr	r3, [r4, #0]
    691e:	78d9      	ldrb	r1, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    6920:	6823      	ldr	r3, [r4, #0]
    6922:	789b      	ldrb	r3, [r3, #2]
				 (idle_rxbuf[1] <<  8) |
    6924:	6822      	ldr	r2, [r4, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    6926:	041b      	lsls	r3, r3, #16
				 (idle_rxbuf[1] <<  8) |
    6928:	7850      	ldrb	r0, [r2, #1]
				 (idle_rxbuf[0]);
    692a:	6822      	ldr	r2, [r4, #0]
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    692c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    6930:	7812      	ldrb	r2, [r2, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    6932:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    6934:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    6938:	f7ff ff3c 	bl	67b4 <see_aa>

		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    693c:	6821      	ldr	r1, [r4, #0]
    693e:	2001      	movs	r0, #1
    6940:	f7fd fdde 	bl	4500 <enqueue>
    6944:	3501      	adds	r5, #1
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    6946:	4545      	cmp	r5, r8
    6948:	d19e      	bne.n	6888 <cb_le_promisc+0x78>
    694a:	2300      	movs	r3, #0
    694c:	4a13      	ldr	r2, [pc, #76]	; (699c <cb_le_promisc+0x18c>)
    694e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    6952:	6849      	ldr	r1, [r1, #4]
    6954:	2903      	cmp	r1, #3
    6956:	dd11      	ble.n	697c <cb_le_promisc+0x16c>
			le_set_access_address(le_promisc.active_aa[i].aa);
    6958:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    695c:	f7fd fe1e 	bl	459c <le_set_access_address>
			data_cb = cb_follow_le;
    6960:	4b0f      	ldr	r3, [pc, #60]	; (69a0 <cb_le_promisc+0x190>)
    6962:	4a10      	ldr	r2, [pc, #64]	; (69a4 <cb_le_promisc+0x194>)
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    6964:	2400      	movs	r4, #0

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    6966:	62da      	str	r2, [r3, #44]	; 0x2c
			packet_cb = promisc_follow_cb;
    6968:	4a0f      	ldr	r2, [pc, #60]	; (69a8 <cb_le_promisc+0x198>)
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    696a:	4620      	mov	r0, r4
	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
    696c:	619a      	str	r2, [r3, #24]
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    696e:	490f      	ldr	r1, [pc, #60]	; (69ac <cb_le_promisc+0x19c>)
    6970:	2204      	movs	r2, #4
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    6972:	6174      	str	r4, [r6, #20]
			le_promisc_state(0, &le.access_address, 4);
    6974:	f7ff fdfe 	bl	6574 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    6978:	4620      	mov	r0, r4
    697a:	e003      	b.n	6984 <cb_le_promisc+0x174>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    697c:	3301      	adds	r3, #1
    697e:	2b20      	cmp	r3, #32
    6980:	d1e4      	bne.n	694c <cb_le_promisc+0x13c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    6982:	2001      	movs	r0, #1
}
    6984:	b015      	add	sp, #84	; 0x54
    6986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    698a:	bf00      	nop
    698c:	1000044c 	.word	0x1000044c
    6990:	00009d14 	.word	0x00009d14
    6994:	0000a5ac 	.word	0x0000a5ac
    6998:	100011b8 	.word	0x100011b8
    699c:	100010a0 	.word	0x100010a0
    69a0:	10000e34 	.word	0x10000e34
    69a4:	00004661 	.word	0x00004661
    69a8:	00006741 	.word	0x00006741
    69ac:	10000450 	.word	0x10000450

000069b0 <bt_promisc_le>:

void bt_promisc_le() {
    69b0:	b538      	push	{r3, r4, r5, lr}
	while (requested_mode == MODE_BT_PROMISC_LE) {
    69b2:	4d16      	ldr	r5, [pc, #88]	; (6a0c <bt_promisc_le+0x5c>)
    69b4:	7cab      	ldrb	r3, [r5, #18]
    69b6:	2b0a      	cmp	r3, #10
    69b8:	d126      	bne.n	6a08 <bt_promisc_le+0x58>
		reset_le_promisc();

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    69ba:	4c15      	ldr	r4, [pc, #84]	; (6a10 <bt_promisc_le+0x60>)
	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
		reset_le_promisc();
    69bc:	f7ff f886 	bl	5acc <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    69c0:	8823      	ldrh	r3, [r4, #0]
    69c2:	07d8      	lsls	r0, r3, #31
			channel = 2440;
    69c4:	bf44      	itt	mi
    69c6:	f640 1388 	movwmi	r3, #2440	; 0x988
    69ca:	8023      	strhmi	r3, [r4, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    69cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    69ce:	b94b      	cbnz	r3, 69e4 <bt_promisc_le+0x34>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
    69d0:	4b0f      	ldr	r3, [pc, #60]	; (6a10 <bt_promisc_le+0x60>)
    69d2:	8818      	ldrh	r0, [r3, #0]
    69d4:	b280      	uxth	r0, r0
    69d6:	f000 ff6b 	bl	78b0 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    69da:	4b0e      	ldr	r3, [pc, #56]	; (6a14 <bt_promisc_le+0x64>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    69dc:	200a      	movs	r0, #10

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
			data_cb = cb_le_promisc;
    69de:	62eb      	str	r3, [r5, #44]	; 0x2c
			bt_generic_le(MODE_BT_PROMISC_LE);
    69e0:	f7ff f884 	bl	5aec <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    69e4:	7cad      	ldrb	r5, [r5, #18]
    69e6:	b2ed      	uxtb	r5, r5
    69e8:	2d0a      	cmp	r5, #10
    69ea:	d10d      	bne.n	6a08 <bt_promisc_le+0x58>
			break;

		le_promisc_state(0, &le.access_address, 4);
    69ec:	2000      	movs	r0, #0
    69ee:	490a      	ldr	r1, [pc, #40]	; (6a18 <bt_promisc_le+0x68>)
    69f0:	2204      	movs	r2, #4
    69f2:	f7ff fdbf 	bl	6574 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    69f6:	4a09      	ldr	r2, [pc, #36]	; (6a1c <bt_promisc_le+0x6c>)
    69f8:	4b04      	ldr	r3, [pc, #16]	; (6a0c <bt_promisc_le+0x5c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    69fa:	4628      	mov	r0, r5
		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
			break;

		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
    69fc:	619a      	str	r2, [r3, #24]
		le.crc_verify = 0;
    69fe:	2300      	movs	r3, #0
    6a00:	6163      	str	r3, [r4, #20]
		bt_le_sync(MODE_BT_PROMISC_LE);
    6a02:	f7ff f965 	bl	5cd0 <bt_le_sync>
    6a06:	e7d4      	b.n	69b2 <bt_promisc_le+0x2>
    6a08:	bd38      	pop	{r3, r4, r5, pc}
    6a0a:	bf00      	nop
    6a0c:	10000e34 	.word	0x10000e34
    6a10:	1000044c 	.word	0x1000044c
    6a14:	00006811 	.word	0x00006811
    6a18:	10000450 	.word	0x10000450
    6a1c:	00006741 	.word	0x00006741

00006a20 <bt_slave_le>:
	}
}

void bt_slave_le(u16 tx_pwr) {
    6a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a24:	b08f      	sub	sp, #60	; 0x3c
	int i, j;
	int num_adv_ind = 1;
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};
    6a26:	499d      	ldr	r1, [pc, #628]	; (6c9c <bt_slave_le+0x27c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}

void bt_slave_le(u16 tx_pwr) {
    6a28:	4682      	mov	sl, r0
	int i, j;
	int num_adv_ind = 1;
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};
    6a2a:	888b      	ldrh	r3, [r1, #4]
    6a2c:	6808      	ldr	r0, [r1, #0]
    6a2e:	f8ad 3020 	strh.w	r3, [sp, #32]
    6a32:	9007      	str	r0, [sp, #28]

	u8 adv_overhead[20] = {0x42, 0x1d,	// adv_nonconn_ind, length 29 (__01 1101)
    6a34:	1d8b      	adds	r3, r1, #6
    6a36:	aa09      	add	r2, sp, #36	; 0x24
    6a38:	f101 0516 	add.w	r5, r1, #22
    6a3c:	6818      	ldr	r0, [r3, #0]
    6a3e:	6859      	ldr	r1, [r3, #4]
    6a40:	4614      	mov	r4, r2
    6a42:	c403      	stmia	r4!, {r0, r1}
    6a44:	3308      	adds	r3, #8
    6a46:	42ab      	cmp	r3, r5
    6a48:	4622      	mov	r2, r4
    6a4a:	d1f7      	bne.n	6a3c <bt_slave_le+0x1c>
    6a4c:	6818      	ldr	r0, [r3, #0]
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
		slave_mac_address[i] = slave_mac_address_data[i];
    6a4e:	4a94      	ldr	r2, [pc, #592]	; (6ca0 <bt_slave_le+0x280>)
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};

	u8 adv_overhead[20] = {0x42, 0x1d,	// adv_nonconn_ind, length 29 (__01 1101)
    6a50:	6020      	str	r0, [r4, #0]
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
		slave_mac_address[i] = slave_mac_address_data[i];
    6a52:	6814      	ldr	r4, [r2, #0]
						   0x03, 0x03, 0xaa, 0xfe, // service advertised - len, type, eddystone UUID
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
    6a54:	2300      	movs	r3, #0
    6a56:	4693      	mov	fp, r2
		slave_mac_address[i] = slave_mac_address_data[i];
    6a58:	4a92      	ldr	r2, [pc, #584]	; (6ca4 <bt_slave_le+0x284>)
    6a5a:	5ce0      	ldrb	r0, [r4, r3]
    6a5c:	f102 0124 	add.w	r1, r2, #36	; 0x24
    6a60:	5458      	strb	r0, [r3, r1]
						   0x03, 0x03, 0xaa, 0xfe, // service advertised - len, type, eddystone UUID
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
    6a62:	3301      	adds	r3, #1
    6a64:	2b06      	cmp	r3, #6
    6a66:	4690      	mov	r8, r2
    6a68:	d1f6      	bne.n	6a58 <bt_slave_le+0x38>
		slave_mac_address[i] = slave_mac_address_data[i];

	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
    6a6a:	6a12      	ldr	r2, [r2, #32]
    6a6c:	230b      	movs	r3, #11
    6a6e:	1f97      	subs	r7, r2, #6
    6a70:	fb97 f6f3 	sdiv	r6, r7, r3
	if (dlen > 11 + 6) {
    6a74:	2a11      	cmp	r2, #17
		slave_mac_address[i] = slave_mac_address_data[i];

	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
    6a76:	fb03 7716 	mls	r7, r3, r6, r7
	if (dlen > 11 + 6) {
    6a7a:	dd03      	ble.n	6a84 <bt_slave_le+0x64>
		num_adv_ind = (dlen-6)/11 + 1;
    6a7c:	1c72      	adds	r2, r6, #1
		fin_adv_len = (dlen-6) % 11;
		if (fin_adv_len == 0) {
    6a7e:	b11f      	cbz	r7, 6a88 <bt_slave_le+0x68>
	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
	if (dlen > 11 + 6) {
		num_adv_ind = (dlen-6)/11 + 1;
    6a80:	4616      	mov	r6, r2
    6a82:	e002      	b.n	6a8a <bt_slave_le+0x6a>
}

void bt_slave_le(u16 tx_pwr) {
	u32 calc_crc;
	int i, j;
	int num_adv_ind = 1;
    6a84:	2601      	movs	r6, #1
    6a86:	e000      	b.n	6a8a <bt_slave_le+0x6a>
	fin_adv_len = (dlen-6) % 11;
	if (dlen > 11 + 6) {
		num_adv_ind = (dlen-6)/11 + 1;
		fin_adv_len = (dlen-6) % 11;
		if (fin_adv_len == 0) {
			fin_adv_len = 11;
    6a88:	461f      	mov	r7, r3
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
    6a8a:	00b5      	lsls	r5, r6, #2
    6a8c:	4628      	mov	r0, r5
    6a8e:	f002 fc63 	bl	9358 <malloc>
	for (i=0; i< num_adv_ind-1; i++) {
    6a92:	2300      	movs	r3, #0
		if (fin_adv_len == 0) {
			fin_adv_len = 11;
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
    6a94:	4604      	mov	r4, r0
	for (i=0; i< num_adv_ind-1; i++) {
    6a96:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
    6a9a:	454b      	cmp	r3, r9
    6a9c:	da08      	bge.n	6ab0 <bt_slave_le+0x90>
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
    6a9e:	201f      	movs	r0, #31
    6aa0:	9302      	str	r3, [sp, #8]
    6aa2:	f002 fc59 	bl	9358 <malloc>
    6aa6:	9b02      	ldr	r3, [sp, #8]
    6aa8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
			fin_adv_len = 11;
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
	for (i=0; i< num_adv_ind-1; i++) {
    6aac:	3301      	adds	r3, #1
    6aae:	e7f2      	b.n	6a96 <bt_slave_le+0x76>
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));
    6ab0:	f107 0017 	add.w	r0, r7, #23
    6ab4:	f002 fc50 	bl	9358 <malloc>
    6ab8:	3d04      	subs	r5, #4
    6aba:	5160      	str	r0, [r4, r5]

	for (i=0; i< num_adv_ind; i++) {
    6abc:	2500      	movs	r5, #0
    6abe:	462b      	mov	r3, r5
    6ac0:	42b3      	cmp	r3, r6
    6ac2:	f280 8088 	bge.w	6bd6 <bt_slave_le+0x1b6>
    6ac6:	2200      	movs	r2, #0
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
    6ac8:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
    6acc:	f81e 0002 	ldrb.w	r0, [lr, r2]
    6ad0:	5961      	ldr	r1, [r4, r5]
    6ad2:	5488      	strb	r0, [r1, r2]
    6ad4:	3201      	adds	r2, #1
    6ad6:	2a14      	cmp	r2, #20
    6ad8:	d1f6      	bne.n	6ac8 <bt_slave_le+0xa8>
    6ada:	2205      	movs	r2, #5
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
    6adc:	4972      	ldr	r1, [pc, #456]	; (6ca8 <bt_slave_le+0x288>)
    6ade:	f1c2 0007 	rsb	r0, r2, #7
    6ae2:	f812 e001 	ldrb.w	lr, [r2, r1]
    6ae6:	5961      	ldr	r1, [r4, r5]
    6ae8:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    6aec:	f801 e000 	strb.w	lr, [r1, r0]
    6af0:	d2f4      	bcs.n	6adc <bt_slave_le+0xbc>
		adv_ind[i][17] = (u8) num_adv_ind;
    6af2:	5962      	ldr	r2, [r4, r5]
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    6af4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
		adv_ind[i][17] = (u8) num_adv_ind;
    6af8:	7456      	strb	r6, [r2, #17]
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    6afa:	5962      	ldr	r2, [r4, r5]
    6afc:	4419      	add	r1, r3
		if (i < num_adv_ind -1) {
    6afe:	454b      	cmp	r3, r9

	for (i=0; i< num_adv_ind; i++) {
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
		adv_ind[i][17] = (u8) num_adv_ind;
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    6b00:	74d1      	strb	r1, [r2, #19]
		if (i < num_adv_ind -1) {
    6b02:	da12      	bge.n	6b2a <bt_slave_le+0x10a>
    6b04:	210b      	movs	r1, #11
    6b06:	4359      	muls	r1, r3
    6b08:	f04f 0c14 	mov.w	ip, #20
			for (j=0; j<11; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
    6b0c:	f8db 2000 	ldr.w	r2, [fp]
    6b10:	440a      	add	r2, r1
    6b12:	4462      	add	r2, ip
    6b14:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
    6b18:	5962      	ldr	r2, [r4, r5]
    6b1a:	f802 000c 	strb.w	r0, [r2, ip]
    6b1e:	f10c 0c01 	add.w	ip, ip, #1
    6b22:	f1bc 0f1f 	cmp.w	ip, #31
    6b26:	d1f1      	bne.n	6b0c <bt_slave_le+0xec>
    6b28:	e023      	b.n	6b72 <bt_slave_le+0x152>
			adv_ind_len = (u8) 31;
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
    6b2a:	b2fa      	uxtb	r2, r7
    6b2c:	f102 0112 	add.w	r1, r2, #18
    6b30:	f04f 0e0b 	mov.w	lr, #11
    6b34:	b2c9      	uxtb	r1, r1
    6b36:	fb0e fe03 	mul.w	lr, lr, r3
    6b3a:	9104      	str	r1, [sp, #16]
			u8 adv_len = (u8)(fin_adv_len + 7);
    6b3c:	1dd1      	adds	r1, r2, #7
    6b3e:	b2c9      	uxtb	r1, r1
    6b40:	9105      	str	r1, [sp, #20]
			for (j=0; j<fin_adv_len; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
    6b42:	2100      	movs	r1, #0
    6b44:	42b9      	cmp	r1, r7
    6b46:	da0b      	bge.n	6b60 <bt_slave_le+0x140>
    6b48:	4855      	ldr	r0, [pc, #340]	; (6ca0 <bt_slave_le+0x280>)
    6b4a:	6800      	ldr	r0, [r0, #0]
    6b4c:	4470      	add	r0, lr
    6b4e:	4408      	add	r0, r1
    6b50:	f890 c006 	ldrb.w	ip, [r0, #6]
    6b54:	5960      	ldr	r0, [r4, r5]
    6b56:	4408      	add	r0, r1
    6b58:	f880 c014 	strb.w	ip, [r0, #20]
    6b5c:	3101      	adds	r1, #1
    6b5e:	e7f1      	b.n	6b44 <bt_slave_le+0x124>
			adv_ind[i][1] = tot_len;
    6b60:	5961      	ldr	r1, [r4, r5]
    6b62:	9804      	ldr	r0, [sp, #16]
			adv_ind[i][12] = adv_len;
			adv_ind_len = (u8) (fin_adv_len + 20);
    6b64:	3214      	adds	r2, #20
			adv_ind_len = (u8) 31;
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
			u8 adv_len = (u8)(fin_adv_len + 7);
			for (j=0; j<fin_adv_len; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
			adv_ind[i][1] = tot_len;
    6b66:	7048      	strb	r0, [r1, #1]
			adv_ind[i][12] = adv_len;
    6b68:	5961      	ldr	r1, [r4, r5]
    6b6a:	9805      	ldr	r0, [sp, #20]
			adv_ind_len = (u8) (fin_adv_len + 20);
    6b6c:	fa5f fc82 	uxtb.w	ip, r2
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
			u8 adv_len = (u8)(fin_adv_len + 7);
			for (j=0; j<fin_adv_len; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
			adv_ind[i][1] = tot_len;
			adv_ind[i][12] = adv_len;
    6b70:	7308      	strb	r0, [r1, #12]
		// sequence which is {0xab, } after whitening : (1010 1011 -> 1101 0101)
		// 58 07 82 74 e8 72 b3 65 a0 e4 c4 9d 43 a2 2d 36 93 3c 7e 05 4b 86 e6 0d 6f 4d dd f1 1e ee 29 a4 76 21 80 bd 1a 7c cc b9
		// sequence which is {0xd5, } after whitening : (1101 0101 -> 1010 1011)
		// 26 79 fc 0a 96 0c cd 1b de 9a ba e3 3d dc 53 48 ed 42 00 7b 35 f8 98 73 11 33 a3 8f 60 90 57 da 08 5f fe c3 64 02 b2 c7

		adv_ind[i][20] = 0x35;
    6b72:	5962      	ldr	r2, [r4, r5]
    6b74:	2135      	movs	r1, #53	; 0x35
    6b76:	7511      	strb	r1, [r2, #20]
		adv_ind[i][21] = 0xf8;
    6b78:	5962      	ldr	r2, [r4, r5]
    6b7a:	21f8      	movs	r1, #248	; 0xf8
    6b7c:	7551      	strb	r1, [r2, #21]
		adv_ind[i][22] = 0x98;
    6b7e:	5962      	ldr	r2, [r4, r5]
    6b80:	2198      	movs	r1, #152	; 0x98
    6b82:	7591      	strb	r1, [r2, #22]
		adv_ind[i][23] = 0x73;
    6b84:	5962      	ldr	r2, [r4, r5]
    6b86:	2173      	movs	r1, #115	; 0x73
    6b88:	75d1      	strb	r1, [r2, #23]
		adv_ind[i][24] = 0x11;
    6b8a:	5962      	ldr	r2, [r4, r5]
    6b8c:	2111      	movs	r1, #17
    6b8e:	7611      	strb	r1, [r2, #24]
		adv_ind[i][25] = 0x33;
    6b90:	5962      	ldr	r2, [r4, r5]
    6b92:	2133      	movs	r1, #51	; 0x33
    6b94:	7651      	strb	r1, [r2, #25]
		adv_ind[i][26] = 0xa3;
    6b96:	5962      	ldr	r2, [r4, r5]
    6b98:	21a3      	movs	r1, #163	; 0xa3
    6b9a:	7691      	strb	r1, [r2, #26]
		adv_ind[i][27] = 0x8f;
    6b9c:	5962      	ldr	r2, [r4, r5]
    6b9e:	218f      	movs	r1, #143	; 0x8f
    6ba0:	76d1      	strb	r1, [r2, #27]
		
		////////
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
    6ba2:	4a42      	ldr	r2, [pc, #264]	; (6cac <bt_slave_le+0x28c>)
    6ba4:	5961      	ldr	r1, [r4, r5]
    6ba6:	6910      	ldr	r0, [r2, #16]
    6ba8:	4662      	mov	r2, ip
    6baa:	9302      	str	r3, [sp, #8]
    6bac:	f8cd c00c 	str.w	ip, [sp, #12]
    6bb0:	f000 fcb6 	bl	7520 <btle_calc_crc>
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
    6bb4:	5962      	ldr	r2, [r4, r5]
    6bb6:	f8dd c00c 	ldr.w	ip, [sp, #12]
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    6bba:	0a01      	lsrs	r1, r0, #8
		
		////////
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
    6bbc:	f802 000c 	strb.w	r0, [r2, ip]
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    6bc0:	5962      	ldr	r2, [r4, r5]
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6bc2:	0c00      	lsrs	r0, r0, #16
		////////
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    6bc4:	4462      	add	r2, ip
    6bc6:	7051      	strb	r1, [r2, #1]
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6bc8:	5962      	ldr	r2, [r4, r5]
    6bca:	3504      	adds	r5, #4
    6bcc:	4462      	add	r2, ip
    6bce:	7090      	strb	r0, [r2, #2]
	for (i=0; i< num_adv_ind-1; i++) {
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
    6bd0:	9b02      	ldr	r3, [sp, #8]
    6bd2:	3301      	adds	r3, #1
    6bd4:	e774      	b.n	6ac0 <bt_slave_le+0xa0>
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
	}

	clkn_start();
    6bd6:	f000 ff03 	bl	79e0 <clkn_start>

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE 
    6bda:	f898 2012 	ldrb.w	r2, [r8, #18]
    6bde:	4b31      	ldr	r3, [pc, #196]	; (6ca4 <bt_slave_le+0x284>)
    6be0:	2a0c      	cmp	r2, #12
    6be2:	d13f      	bne.n	6c64 <bt_slave_le+0x244>
			|| requested_mode == MODE_BT_SLAVE_LE_P3
			|| requested_mode == MODE_BT_SLAVE_LE_P4
			|| requested_mode == MODE_BT_SLAVE_LE_P5
			|| requested_mode == MODE_BT_SLAVE_LE_P6
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
    6be4:	f898 2012 	ldrb.w	r2, [r8, #18]
    6be8:	f898 3011 	ldrb.w	r3, [r8, #17]
    6bec:	429a      	cmp	r2, r3
    6bee:	d151      	bne.n	6c94 <bt_slave_le+0x274>
		ICER0 = ICER0_ICE_USB;
    6bf0:	4b2f      	ldr	r3, [pc, #188]	; (6cb0 <bt_slave_le+0x290>)
    6bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6bf6:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    6bf8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    6bfc:	601a      	str	r2, [r3, #0]
    6bfe:	f04f 0b00 	mov.w	fp, #0
	for (i=0; i< num_adv_ind-1; i++) {
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
    6c02:	2500      	movs	r5, #0
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
			for(j=0; j<num_adv_ind; j++) {
    6c04:	42b5      	cmp	r5, r6
    6c06:	da20      	bge.n	6c4a <bt_slave_le+0x22a>
				if (j < num_adv_ind -1) {
    6c08:	454d      	cmp	r5, r9
    6c0a:	ab07      	add	r3, sp, #28
    6c0c:	da05      	bge.n	6c1a <bt_slave_le+0x1fa>
					adv_ind_len = (u8) (31 + 3);
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
    6c0e:	f833 300b 	ldrh.w	r3, [r3, fp]
    6c12:	4828      	ldr	r0, [pc, #160]	; (6cb4 <bt_slave_le+0x294>)
    6c14:	9300      	str	r3, [sp, #0]
    6c16:	2122      	movs	r1, #34	; 0x22
    6c18:	e006      	b.n	6c28 <bt_slave_le+0x208>
				} else {
					adv_ind_len = (u8) (fin_adv_len + 20 + 3);
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
    6c1a:	f833 300b 	ldrh.w	r3, [r3, fp]
			for(j=0; j<num_adv_ind; j++) {
				if (j < num_adv_ind -1) {
					adv_ind_len = (u8) (31 + 3);
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
				} else {
					adv_ind_len = (u8) (fin_adv_len + 20 + 3);
    6c1e:	f107 0117 	add.w	r1, r7, #23
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
    6c22:	4824      	ldr	r0, [pc, #144]	; (6cb4 <bt_slave_le+0x294>)
    6c24:	9300      	str	r3, [sp, #0]
    6c26:	b2c9      	uxtb	r1, r1
    6c28:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    6c2c:	4653      	mov	r3, sl
    6c2e:	f7fe fb51 	bl	52d4 <le_transmit>
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    6c32:	4b21      	ldr	r3, [pc, #132]	; (6cb8 <bt_slave_le+0x298>)
    6c34:	681a      	ldr	r2, [r3, #0]
    6c36:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    6c3a:	3220      	adds	r2, #32
	// handle clkn overflow
	if (stop_at >= ((uint32_t)1<<28)) {
		stop_at -= ((uint32_t)1<<28);
		while ((clkn & 0xffffff) >= now || (clkn & 0xffffff) < stop_at);
	} else {
		while ((clkn & 0xffffff) < stop_at);
    6c3c:	6819      	ldr	r1, [r3, #0]
    6c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6c42:	4291      	cmp	r1, r2
    6c44:	d3fa      	bcc.n	6c3c <bt_slave_le+0x21c>
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
			for(j=0; j<num_adv_ind; j++) {
    6c46:	3501      	adds	r5, #1
    6c48:	e7dc      	b.n	6c04 <bt_slave_le+0x1e4>
    6c4a:	f10b 0b02 	add.w	fp, fp, #2
			|| requested_mode == MODE_BT_SLAVE_LE_P6
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
    6c4e:	f1bb 0f06 	cmp.w	fp, #6
    6c52:	d1d6      	bne.n	6c02 <bt_slave_le+0x1e2>
				}
				msleep(10);
			}
			//msleep(5);
		}
		ISER0 = ISER0_ISE_USB;
    6c54:	4b19      	ldr	r3, [pc, #100]	; (6cbc <bt_slave_le+0x29c>)
    6c56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6c5a:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    6c5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    6c60:	601a      	str	r2, [r3, #0]
    6c62:	e7ba      	b.n	6bda <bt_slave_le+0x1ba>

	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE 
			|| requested_mode == MODE_BT_SLAVE_LE_P0
    6c64:	7c9a      	ldrb	r2, [r3, #18]
    6c66:	2a11      	cmp	r2, #17
    6c68:	d0bc      	beq.n	6be4 <bt_slave_le+0x1c4>
			|| requested_mode == MODE_BT_SLAVE_LE_P1
    6c6a:	7c9a      	ldrb	r2, [r3, #18]
    6c6c:	2a12      	cmp	r2, #18
    6c6e:	d0b9      	beq.n	6be4 <bt_slave_le+0x1c4>
			|| requested_mode == MODE_BT_SLAVE_LE_P2
    6c70:	7c9a      	ldrb	r2, [r3, #18]
    6c72:	2a13      	cmp	r2, #19
    6c74:	d0b6      	beq.n	6be4 <bt_slave_le+0x1c4>
			|| requested_mode == MODE_BT_SLAVE_LE_P3
    6c76:	7c9a      	ldrb	r2, [r3, #18]
    6c78:	2a14      	cmp	r2, #20
    6c7a:	d0b3      	beq.n	6be4 <bt_slave_le+0x1c4>
			|| requested_mode == MODE_BT_SLAVE_LE_P4
    6c7c:	7c9a      	ldrb	r2, [r3, #18]
    6c7e:	2a15      	cmp	r2, #21
    6c80:	d0b0      	beq.n	6be4 <bt_slave_le+0x1c4>
			|| requested_mode == MODE_BT_SLAVE_LE_P5
    6c82:	7c9a      	ldrb	r2, [r3, #18]
    6c84:	2a16      	cmp	r2, #22
    6c86:	d0ad      	beq.n	6be4 <bt_slave_le+0x1c4>
			|| requested_mode == MODE_BT_SLAVE_LE_P6
    6c88:	7c9a      	ldrb	r2, [r3, #18]
    6c8a:	2a17      	cmp	r2, #23
    6c8c:	d0aa      	beq.n	6be4 <bt_slave_le+0x1c4>
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
    6c8e:	7c9b      	ldrb	r3, [r3, #18]
    6c90:	2b18      	cmp	r3, #24
    6c92:	d0a7      	beq.n	6be4 <bt_slave_le+0x1c4>
		}
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		//msleep(1000);
	}
}
    6c94:	b00f      	add	sp, #60	; 0x3c
    6c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c9a:	bf00      	nop
    6c9c:	0000a5bc 	.word	0x0000a5bc
    6ca0:	10001518 	.word	0x10001518
    6ca4:	10000e34 	.word	0x10000e34
    6ca8:	10000e58 	.word	0x10000e58
    6cac:	1000044c 	.word	0x1000044c
    6cb0:	e000e180 	.word	0xe000e180
    6cb4:	8e89bed6 	.word	0x8e89bed6
    6cb8:	1000105c 	.word	0x1000105c
    6cbc:	e000e100 	.word	0xe000e100

00006cc0 <rx_generic_sync>:

void rx_generic_sync(void) {
    6cc0:	b500      	push	{lr}
    6cc2:	b08b      	sub	sp, #44	; 0x2c
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6cc4:	202d      	movs	r0, #45	; 0x2d
    6cc6:	f001 fd6d 	bl	87a4 <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    6cca:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    6ccc:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    6cd0:	202c      	movs	r0, #44	; 0x2c

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
	buf[0] = (reg_val >> 8) & 0xFF;
    6cd2:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = reg_val & 0xFF;
	reg_val = cc2400_get(SYNCL);
    6cd6:	f001 fd65 	bl	87a4 <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    6cda:	0a03      	lsrs	r3, r0, #8
    6cdc:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    6ce0:	f88d 0007 	strb.w	r0, [sp, #7]

	queue_init();
    6ce4:	f000 fcdc 	bl	76a0 <queue_init>
	clkn_start();
    6ce8:	f000 fe7a 	bl	79e0 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6cec:	f001 fe34 	bl	8958 <cc2400_status>
    6cf0:	0641      	lsls	r1, r0, #25
    6cf2:	d5fb      	bpl.n	6cec <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6cf4:	2061      	movs	r0, #97	; 0x61
    6cf6:	f001 fe36 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6cfa:	f001 fe2d 	bl	8958 <cc2400_status>
    6cfe:	0742      	lsls	r2, r0, #29
    6d00:	d5fb      	bpl.n	6cfa <rx_generic_sync+0x3a>
	RXLED_SET;
    6d02:	4b14      	ldr	r3, [pc, #80]	; (6d54 <rx_generic_sync+0x94>)
    6d04:	2210      	movs	r2, #16
    6d06:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6d08:	2280      	movs	r2, #128	; 0x80
    6d0a:	621a      	str	r2, [r3, #32]
		HGM_SET;
    6d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d10:	621a      	str	r2, [r3, #32]
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6d12:	200e      	movs	r0, #14
    6d14:	f001 fd46 	bl	87a4 <cc2400_get>
    6d18:	f000 001f 	and.w	r0, r0, #31
    6d1c:	280f      	cmp	r0, #15
    6d1e:	d1f8      	bne.n	6d12 <rx_generic_sync+0x52>
		cc2400_strobe(SRX);
    6d20:	2062      	movs	r0, #98	; 0x62
    6d22:	f001 fe20 	bl	8966 <cc2400_strobe>
		USRLED_CLR;
    6d26:	4b0c      	ldr	r3, [pc, #48]	; (6d58 <rx_generic_sync+0x98>)
    6d28:	2202      	movs	r2, #2
    6d2a:	601a      	str	r2, [r3, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    6d2c:	f001 fe14 	bl	8958 <cc2400_status>
    6d30:	06c3      	lsls	r3, r0, #27
    6d32:	d5fb      	bpl.n	6d2c <rx_generic_sync+0x6c>
		USRLED_SET;
    6d34:	4b07      	ldr	r3, [pc, #28]	; (6d54 <rx_generic_sync+0x94>)
    6d36:	2202      	movs	r2, #2
    6d38:	601a      	str	r2, [r3, #0]

		cc2400_fifo_read(len, buf+4);
    6d3a:	a902      	add	r1, sp, #8
    6d3c:	2020      	movs	r0, #32
    6d3e:	f001 fdc3 	bl	88c8 <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    6d42:	a901      	add	r1, sp, #4
    6d44:	2000      	movs	r0, #0
    6d46:	f7fd fbdb 	bl	4500 <enqueue>
		handle_usb(clkn);
    6d4a:	4b04      	ldr	r3, [pc, #16]	; (6d5c <rx_generic_sync+0x9c>)
    6d4c:	6818      	ldr	r0, [r3, #0]
    6d4e:	f000 fd23 	bl	7798 <handle_usb>
	}
    6d52:	e7de      	b.n	6d12 <rx_generic_sync+0x52>
    6d54:	2009c038 	.word	0x2009c038
    6d58:	2009c03c 	.word	0x2009c03c
    6d5c:	1000105c 	.word	0x1000105c

00006d60 <rx_generic>:
}

void rx_generic(void) {
    6d60:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    6d62:	2020      	movs	r0, #32
    6d64:	f001 fd1e 	bl	87a4 <cc2400_get>
    6d68:	b108      	cbz	r0, 6d6e <rx_generic+0xe>
		rx_generic_sync();
    6d6a:	f7ff ffa9 	bl	6cc0 <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    6d6e:	4b03      	ldr	r3, [pc, #12]	; (6d7c <rx_generic+0x1c>)
    6d70:	2203      	movs	r2, #3
    6d72:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    6d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
		rx_generic_sync();
	} else {
		modulation = MOD_NONE;
		bt_stream_rx();
    6d78:	f7fe bc90 	b.w	569c <bt_stream_rx>
    6d7c:	10000e34 	.word	0x10000e34

00006d80 <tx_generic>:
	}
}

void tx_generic(void) {
    6d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;
    6d84:	4d35      	ldr	r5, [pc, #212]	; (6e5c <tx_generic+0xdc>)

	mode = MODE_TX_GENERIC;
    6d86:	2310      	movs	r3, #16

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6d88:	202d      	movs	r0, #45	; 0x2d
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    6d8a:	7c6e      	ldrb	r6, [r5, #17]

	mode = MODE_TX_GENERIC;
    6d8c:	746b      	strb	r3, [r5, #17]

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6d8e:	f001 fd09 	bl	87a4 <cc2400_get>
    6d92:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    6d94:	202c      	movs	r0, #44	; 0x2c
    6d96:	f001 fd05 	bl	87a4 <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    6d9a:	4c31      	ldr	r4, [pc, #196]	; (6e60 <tx_generic+0xe0>)

	mode = MODE_TX_GENERIC;

	// Save existing syncword
	synch = cc2400_get(SYNCH);
	syncl = cc2400_get(SYNCL);
    6d9c:	4607      	mov	r7, r0

	cc2400_set(SYNCH, tx_pkt.synch);
    6d9e:	8821      	ldrh	r1, [r4, #0]
    6da0:	202d      	movs	r0, #45	; 0x2d
    6da2:	f001 fd08 	bl	87b6 <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    6da6:	202c      	movs	r0, #44	; 0x2c
    6da8:	8861      	ldrh	r1, [r4, #2]
    6daa:	f001 fd04 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    6dae:	2003      	movs	r0, #3
    6db0:	2157      	movs	r1, #87	; 0x57
    6db2:	f001 fd00 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    6db6:	2014      	movs	r0, #20
    6db8:	f241 314b 	movw	r1, #4939	; 0x134b
    6dbc:	f001 fcfb 	bl	87b6 <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    6dc0:	2020      	movs	r0, #32
    6dc2:	f640 7161 	movw	r1, #3937	; 0xf61
    6dc6:	f001 fcf6 	bl	87b6 <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    6dca:	2002      	movs	r0, #2
    6dcc:	88a1      	ldrh	r1, [r4, #4]
    6dce:	f001 fcf2 	bl	87b6 <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    6dd2:	2005      	movs	r0, #5
    6dd4:	79e1      	ldrb	r1, [r4, #7]
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    6dd6:	b2f6      	uxtb	r6, r6
	cc2400_set(SYNCL, tx_pkt.syncl);
	cc2400_set(MDMCTRL, 0x0057);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(GRMDM, 0x0f61);
	cc2400_set(FSDIV, tx_pkt.channel);
	cc2400_set(FREND, tx_pkt.pa_level);
    6dd8:	f001 fced 	bl	87b6 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6ddc:	f001 fdbc 	bl	8958 <cc2400_status>
    6de0:	0642      	lsls	r2, r0, #25
    6de2:	d5fb      	bpl.n	6ddc <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6de4:	2061      	movs	r0, #97	; 0x61
    6de6:	f001 fdbe 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6dea:	f001 fdb5 	bl	8958 <cc2400_status>
    6dee:	0743      	lsls	r3, r0, #29
    6df0:	d5fb      	bpl.n	6dea <tx_generic+0x6a>
	TXLED_SET;
    6df2:	4b1c      	ldr	r3, [pc, #112]	; (6e64 <tx_generic+0xe4>)
    6df4:	f44f 7280 	mov.w	r2, #256	; 0x100
    6df8:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6dfa:	2280      	movs	r2, #128	; 0x80
    6dfc:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6dfe:	200e      	movs	r0, #14
    6e00:	f001 fcd0 	bl	87a4 <cc2400_get>
    6e04:	f000 001f 	and.w	r0, r0, #31
    6e08:	280f      	cmp	r0, #15
    6e0a:	d1f8      	bne.n	6dfe <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    6e0c:	79a0      	ldrb	r0, [r4, #6]
    6e0e:	4916      	ldr	r1, [pc, #88]	; (6e68 <tx_generic+0xe8>)
    6e10:	f001 fd12 	bl	8838 <cc2400_fifo_write>
	cc2400_strobe(STX);
    6e14:	2063      	movs	r0, #99	; 0x63
    6e16:	f001 fda6 	bl	8966 <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6e1a:	200e      	movs	r0, #14
    6e1c:	f001 fcc2 	bl	87a4 <cc2400_get>
    6e20:	f000 001f 	and.w	r0, r0, #31
    6e24:	280f      	cmp	r0, #15
    6e26:	d1f8      	bne.n	6e1a <tx_generic+0x9a>
	TXLED_CLR;
    6e28:	4b10      	ldr	r3, [pc, #64]	; (6e6c <tx_generic+0xec>)
    6e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e2e:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    6e30:	2064      	movs	r0, #100	; 0x64
    6e32:	f001 fd98 	bl	8966 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6e36:	f001 fd8f 	bl	8958 <cc2400_status>
    6e3a:	0740      	lsls	r0, r0, #29
    6e3c:	d4fb      	bmi.n	6e36 <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    6e3e:	4b0c      	ldr	r3, [pc, #48]	; (6e70 <tx_generic+0xf0>)
    6e40:	2280      	movs	r2, #128	; 0x80
    6e42:	601a      	str	r2, [r3, #0]
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    6e44:	202d      	movs	r0, #45	; 0x2d
    6e46:	4641      	mov	r1, r8
    6e48:	f001 fcb5 	bl	87b6 <cc2400_set>
	cc2400_set(SYNCL, syncl);
    6e4c:	202c      	movs	r0, #44	; 0x2c
    6e4e:	4639      	mov	r1, r7
    6e50:	f001 fcb1 	bl	87b6 <cc2400_set>
	requested_mode = prev_mode;
    6e54:	74ae      	strb	r6, [r5, #18]
    6e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e5a:	bf00      	nop
    6e5c:	10000e34 	.word	0x10000e34
    6e60:	10001060 	.word	0x10001060
    6e64:	2009c038 	.word	0x2009c038
    6e68:	10001068 	.word	0x10001068
    6e6c:	2009c03c 	.word	0x2009c03c
    6e70:	2009c05c 	.word	0x2009c05c

00006e74 <specan>:
}

/* spectrum analysis */
void specan()
{
    6e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e78:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    6e7a:	4b3d      	ldr	r3, [pc, #244]	; (6f70 <specan+0xfc>)
    6e7c:	2210      	movs	r2, #16
    6e7e:	601a      	str	r2, [r3, #0]

	queue_init();
    6e80:	f000 fc0e 	bl	76a0 <queue_init>
	clkn_start();
    6e84:	f000 fdac 	bl	79e0 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6e88:	4b3a      	ldr	r3, [pc, #232]	; (6f74 <specan+0x100>)
    6e8a:	2280      	movs	r2, #128	; 0x80
    6e8c:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6e8e:	2012      	movs	r0, #18
    6e90:	f642 3122 	movw	r1, #11042	; 0x2b22
    6e94:	f001 fc8f 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6e98:	2014      	movs	r0, #20
    6e9a:	f241 314b 	movw	r1, #4939	; 0x134b
    6e9e:	f001 fc8a 	bl	87b6 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6ea2:	2020      	movs	r0, #32
    6ea4:	f240 1101 	movw	r1, #257	; 0x101
    6ea8:	f001 fc85 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6eac:	2003      	movs	r0, #3
    6eae:	2129      	movs	r1, #41	; 0x29
    6eb0:	f001 fc81 	bl	87b6 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    6eb4:	f001 fd50 	bl	8958 <cc2400_status>
    6eb8:	0644      	lsls	r4, r0, #25
    6eba:	d5fb      	bpl.n	6eb4 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    6ebc:	f001 fd4c 	bl	8958 <cc2400_status>
    6ec0:	f000 0004 	and.w	r0, r0, #4
    6ec4:	f000 05ff 	and.w	r5, r0, #255	; 0xff
    6ec8:	2800      	cmp	r0, #0
    6eca:	d1f7      	bne.n	6ebc <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    6ecc:	4b2a      	ldr	r3, [pc, #168]	; (6f78 <specan+0x104>)
    6ece:	7c9b      	ldrb	r3, [r3, #18]
    6ed0:	2b04      	cmp	r3, #4
    6ed2:	d147      	bne.n	6f64 <specan+0xf0>
		for (f = low_freq; f < high_freq + 1; f++) {
    6ed4:	4b29      	ldr	r3, [pc, #164]	; (6f7c <specan+0x108>)
    6ed6:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
    6eda:	4698      	mov	r8, r3
    6edc:	b2a4      	uxth	r4, r4
    6ede:	f8b8 304e 	ldrh.w	r3, [r8, #78]	; 0x4e
    6ee2:	b29b      	uxth	r3, r3
    6ee4:	42a3      	cmp	r3, r4
    6ee6:	dbf1      	blt.n	6ecc <specan+0x58>
    6ee8:	1e61      	subs	r1, r4, #1
			cc2400_set(FSDIV, f - 1);
    6eea:	2002      	movs	r0, #2
    6eec:	b289      	uxth	r1, r1
    6eee:	f001 fc62 	bl	87b6 <cc2400_set>
			cc2400_strobe(SFSON);
    6ef2:	2061      	movs	r0, #97	; 0x61
    6ef4:	f001 fd37 	bl	8966 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6ef8:	f001 fd2e 	bl	8958 <cc2400_status>
    6efc:	0740      	lsls	r0, r0, #29
    6efe:	d5fb      	bpl.n	6ef8 <specan+0x84>
			cc2400_strobe(SRX);
    6f00:	2062      	movs	r0, #98	; 0x62
    6f02:	f001 fd30 	bl	8966 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    6f06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6f0a:	9300      	str	r3, [sp, #0]
    6f0c:	9e00      	ldr	r6, [sp, #0]
    6f0e:	3e01      	subs	r6, #1
    6f10:	9600      	str	r6, [sp, #0]
    6f12:	2e00      	cmp	r6, #0
    6f14:	d1fa      	bne.n	6f0c <specan+0x98>
			buf[3 * i] = (f >> 8) & 0xFF;
    6f16:	ab0e      	add	r3, sp, #56	; 0x38
    6f18:	2703      	movs	r7, #3
    6f1a:	fb07 3705 	mla	r7, r7, r5, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6f1e:	2006      	movs	r0, #6
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
    6f20:	0a23      	lsrs	r3, r4, #8
    6f22:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    6f26:	f807 4c33 	strb.w	r4, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6f2a:	f001 fc3b 	bl	87a4 <cc2400_get>
			i++;
    6f2e:	3501      	adds	r5, #1
    6f30:	b2ed      	uxtb	r5, r5

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6f32:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
    6f34:	2d10      	cmp	r5, #16

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6f36:	f807 0c32 	strb.w	r0, [r7, #-50]
			i++;
			if (i == 16) {
    6f3a:	d109      	bne.n	6f50 <specan+0xdc>
				enqueue(SPECAN, buf);
    6f3c:	2004      	movs	r0, #4
    6f3e:	eb0d 0100 	add.w	r1, sp, r0
    6f42:	f7fd fadd 	bl	4500 <enqueue>
				i = 0;

				handle_usb(clkn);
    6f46:	4b0e      	ldr	r3, [pc, #56]	; (6f80 <specan+0x10c>)
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				enqueue(SPECAN, buf);
				i = 0;
    6f48:	4635      	mov	r5, r6

				handle_usb(clkn);
    6f4a:	6818      	ldr	r0, [r3, #0]
    6f4c:	f000 fc24 	bl	7798 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    6f50:	2064      	movs	r0, #100	; 0x64
    6f52:	f001 fd08 	bl	8966 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6f56:	f001 fcff 	bl	8958 <cc2400_status>
    6f5a:	0741      	lsls	r1, r0, #29
    6f5c:	d4fb      	bmi.n	6f56 <specan+0xe2>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    6f5e:	3401      	adds	r4, #1
    6f60:	b2a4      	uxth	r4, r4
    6f62:	e7bc      	b.n	6ede <specan+0x6a>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    6f64:	4b07      	ldr	r3, [pc, #28]	; (6f84 <specan+0x110>)
    6f66:	2210      	movs	r2, #16
    6f68:	601a      	str	r2, [r3, #0]
}
    6f6a:	b00e      	add	sp, #56	; 0x38
    6f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f70:	2009c038 	.word	0x2009c038
    6f74:	2009c058 	.word	0x2009c058
    6f78:	10000e34 	.word	0x10000e34
    6f7c:	1000044c 	.word	0x1000044c
    6f80:	1000105c 	.word	0x1000105c
    6f84:	2009c03c 	.word	0x2009c03c

00006f88 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    6f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6f8a:	4b44      	ldr	r3, [pc, #272]	; (709c <led_specan+0x114>)
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6f8c:	2280      	movs	r2, #128	; 0x80
/* LED based spectrum analysis */
void led_specan()
{
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6f8e:	6818      	ldr	r0, [r3, #0]
    6f90:	889b      	ldrh	r3, [r3, #4]
    6f92:	9002      	str	r0, [sp, #8]
    6f94:	f8ad 300c 	strh.w	r3, [sp, #12]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6f98:	4b41      	ldr	r3, [pc, #260]	; (70a0 <led_specan+0x118>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6f9a:	2012      	movs	r0, #18
	u16 channels[3] = {2412, 2437, 2462};
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6f9c:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6f9e:	f642 3122 	movw	r1, #11042	; 0x2b22
    6fa2:	f001 fc08 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6fa6:	2014      	movs	r0, #20
    6fa8:	f241 314b 	movw	r1, #4939	; 0x134b
    6fac:	f001 fc03 	bl	87b6 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6fb0:	2020      	movs	r0, #32
    6fb2:	f240 1101 	movw	r1, #257	; 0x101
    6fb6:	f001 fbfe 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6fba:	2003      	movs	r0, #3
    6fbc:	2129      	movs	r1, #41	; 0x29
    6fbe:	f001 fbfa 	bl	87b6 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    6fc2:	2006      	movs	r0, #6
    6fc4:	21f1      	movs	r1, #241	; 0xf1
    6fc6:	f001 fbf6 	bl	87b6 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6fca:	f001 fcc5 	bl	8958 <cc2400_status>
    6fce:	0641      	lsls	r1, r0, #25
    6fd0:	d5fb      	bpl.n	6fca <led_specan+0x42>
	while ((cc2400_status() & FS_LOCK));
    6fd2:	f001 fcc1 	bl	8958 <cc2400_status>
    6fd6:	f000 0004 	and.w	r0, r0, #4
    6fda:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    6fde:	2800      	cmp	r0, #0
    6fe0:	d1f7      	bne.n	6fd2 <led_specan+0x4a>

	while (requested_mode == MODE_LED_SPECAN) {
    6fe2:	4b30      	ldr	r3, [pc, #192]	; (70a4 <led_specan+0x11c>)
    6fe4:	7c9b      	ldrb	r3, [r3, #18]
    6fe6:	2b07      	cmp	r3, #7
    6fe8:	d155      	bne.n	7096 <led_specan+0x10e>
		cc2400_set(FSDIV, channels[i] - 1);
    6fea:	aa04      	add	r2, sp, #16
    6fec:	eb02 0344 	add.w	r3, r2, r4, lsl #1
    6ff0:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    6ff4:	2002      	movs	r0, #2
    6ff6:	3901      	subs	r1, #1
    6ff8:	b289      	uxth	r1, r1
    6ffa:	f001 fbdc 	bl	87b6 <cc2400_set>
		cc2400_strobe(SFSON);
    6ffe:	2061      	movs	r0, #97	; 0x61
    7000:	f001 fcb1 	bl	8966 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7004:	f001 fca8 	bl	8958 <cc2400_status>
    7008:	0742      	lsls	r2, r0, #29
    700a:	d5fb      	bpl.n	7004 <led_specan+0x7c>
		cc2400_strobe(SRX);
    700c:	2062      	movs	r0, #98	; 0x62
    700e:	f001 fcaa 	bl	8966 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    7012:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7016:	9301      	str	r3, [sp, #4]
    7018:	9b01      	ldr	r3, [sp, #4]
    701a:	3b01      	subs	r3, #1
    701c:	9301      	str	r3, [sp, #4]
    701e:	2b00      	cmp	r3, #0
    7020:	d1fa      	bne.n	7018 <led_specan+0x90>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    7022:	2006      	movs	r0, #6
    7024:	f001 fbbe 	bl	87a4 <cc2400_get>
		if (lvl > rssi_threshold) {
    7028:	4b1f      	ldr	r3, [pc, #124]	; (70a8 <led_specan+0x120>)
    702a:	f340 2007 	sbfx	r0, r0, #8, #8
    702e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    7032:	b25b      	sxtb	r3, r3
    7034:	4298      	cmp	r0, r3
    7036:	dd0c      	ble.n	7052 <led_specan+0xca>
			switch (i) {
    7038:	2c01      	cmp	r4, #1
    703a:	d007      	beq.n	704c <led_specan+0xc4>
    703c:	d303      	bcc.n	7046 <led_specan+0xbe>
    703e:	2c02      	cmp	r4, #2
    7040:	d116      	bne.n	7070 <led_specan+0xe8>
					break;
				case 1:
					RXLED_SET;
					break;
				case 2:
					USRLED_SET;
    7042:	4b1a      	ldr	r3, [pc, #104]	; (70ac <led_specan+0x124>)
    7044:	e013      	b.n	706e <led_specan+0xe6>
		volatile u32 j = 500; while (--j); //FIXME crude delay
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
		if (lvl > rssi_threshold) {
			switch (i) {
				case 0:
					TXLED_SET;
    7046:	f44f 7280 	mov.w	r2, #256	; 0x100
    704a:	e000      	b.n	704e <led_specan+0xc6>
					break;
				case 1:
					RXLED_SET;
    704c:	2210      	movs	r2, #16
    704e:	4b17      	ldr	r3, [pc, #92]	; (70ac <led_specan+0x124>)
    7050:	e00b      	b.n	706a <led_specan+0xe2>
					USRLED_SET;
					break;
			}
		}
		else {
			switch (i) {
    7052:	2c01      	cmp	r4, #1
    7054:	d007      	beq.n	7066 <led_specan+0xde>
    7056:	d303      	bcc.n	7060 <led_specan+0xd8>
    7058:	2c02      	cmp	r4, #2
    705a:	d109      	bne.n	7070 <led_specan+0xe8>
					break;
				case 1:
					RXLED_CLR;
					break;
				case 2:
					USRLED_CLR;
    705c:	4b14      	ldr	r3, [pc, #80]	; (70b0 <led_specan+0x128>)
    705e:	e006      	b.n	706e <led_specan+0xe6>
			}
		}
		else {
			switch (i) {
				case 0:
					TXLED_CLR;
    7060:	f44f 7280 	mov.w	r2, #256	; 0x100
    7064:	e000      	b.n	7068 <led_specan+0xe0>
					break;
				case 1:
					RXLED_CLR;
    7066:	2210      	movs	r2, #16
    7068:	4b11      	ldr	r3, [pc, #68]	; (70b0 <led_specan+0x128>)
    706a:	601a      	str	r2, [r3, #0]
					break;
    706c:	e000      	b.n	7070 <led_specan+0xe8>
				case 2:
					USRLED_CLR;
    706e:	601c      	str	r4, [r3, #0]
					break;
			}
		}

		i = (i+1) % 3;
    7070:	2303      	movs	r3, #3
    7072:	3401      	adds	r4, #1
    7074:	fb94 f2f3 	sdiv	r2, r4, r3
    7078:	fb03 4412 	mls	r4, r3, r2, r4

		handle_usb(clkn);
    707c:	4b0d      	ldr	r3, [pc, #52]	; (70b4 <led_specan+0x12c>)
					USRLED_CLR;
					break;
			}
		}

		i = (i+1) % 3;
    707e:	b2e4      	uxtb	r4, r4

		handle_usb(clkn);
    7080:	6818      	ldr	r0, [r3, #0]
    7082:	f000 fb89 	bl	7798 <handle_usb>

		cc2400_strobe(SRFOFF);
    7086:	2064      	movs	r0, #100	; 0x64
    7088:	f001 fc6d 	bl	8966 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    708c:	f001 fc64 	bl	8958 <cc2400_status>
    7090:	0743      	lsls	r3, r0, #29
    7092:	d4fb      	bmi.n	708c <led_specan+0x104>
    7094:	e7a5      	b.n	6fe2 <led_specan+0x5a>
	}
}
    7096:	b004      	add	sp, #16
    7098:	bd10      	pop	{r4, pc}
    709a:	bf00      	nop
    709c:	0000a5d6 	.word	0x0000a5d6
    70a0:	2009c058 	.word	0x2009c058
    70a4:	10000e34 	.word	0x10000e34
    70a8:	1000044c 	.word	0x1000044c
    70ac:	2009c038 	.word	0x2009c038
    70b0:	2009c03c 	.word	0x2009c03c
    70b4:	1000105c 	.word	0x1000105c

000070b8 <main>:

int main()
{
    70b8:	b510      	push	{r4, lr}
	ubertooth_init();
    70ba:	f001 fd17 	bl	8aec <ubertooth_init>
	clkn_init();
    70be:	f000 fc95 	bl	79ec <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    70c2:	4859      	ldr	r0, [pc, #356]	; (7228 <main+0x170>)
    70c4:	f000 fac6 	bl	7654 <ubertooth_usb_init>
	cc2400_idle();
    70c8:	f7fd fa74 	bl	45b4 <cc2400_idle>

	while (1) {
		handle_usb(clkn);
    70cc:	4b57      	ldr	r3, [pc, #348]	; (722c <main+0x174>)
		if(requested_mode != mode) {
    70ce:	4c58      	ldr	r4, [pc, #352]	; (7230 <main+0x178>)
	clkn_init();
	ubertooth_usb_init(vendor_request_handler);
	cc2400_idle();

	while (1) {
		handle_usb(clkn);
    70d0:	6818      	ldr	r0, [r3, #0]
    70d2:	f000 fb61 	bl	7798 <handle_usb>
		if(requested_mode != mode) {
    70d6:	7ca2      	ldrb	r2, [r4, #18]
    70d8:	7c63      	ldrb	r3, [r4, #17]
    70da:	429a      	cmp	r2, r3
    70dc:	d0f6      	beq.n	70cc <main+0x14>
			switch (requested_mode) {
    70de:	7ca3      	ldrb	r3, [r4, #18]
    70e0:	2b19      	cmp	r3, #25
    70e2:	d8f3      	bhi.n	70cc <main+0x14>
    70e4:	a201      	add	r2, pc, #4	; (adr r2, 70ec <main+0x34>)
    70e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    70ea:	bf00      	nop
    70ec:	000070c9 	.word	0x000070c9
    70f0:	00007165 	.word	0x00007165
    70f4:	0000716f 	.word	0x0000716f
    70f8:	00007193 	.word	0x00007193
    70fc:	000071bd 	.word	0x000071bd
    7100:	000071a1 	.word	0x000071a1
    7104:	000071b1 	.word	0x000071b1
    7108:	000071c3 	.word	0x000071c3
    710c:	00007179 	.word	0x00007179
    7110:	0000717d 	.word	0x0000717d
    7114:	00007189 	.word	0x00007189
    7118:	00007155 	.word	0x00007155
    711c:	0000718f 	.word	0x0000718f
    7120:	000071c9 	.word	0x000071c9
    7124:	00007161 	.word	0x00007161
    7128:	000071d5 	.word	0x000071d5
    712c:	000071df 	.word	0x000071df
    7130:	000071e5 	.word	0x000071e5
    7134:	000071ed 	.word	0x000071ed
    7138:	000071f5 	.word	0x000071f5
    713c:	000071fd 	.word	0x000071fd
    7140:	00007205 	.word	0x00007205
    7144:	0000720d 	.word	0x0000720d
    7148:	00007215 	.word	0x00007215
    714c:	0000721d 	.word	0x0000721d
    7150:	00007183 	.word	0x00007183
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    7154:	2001      	movs	r0, #1
    7156:	f001 fa53 	bl	8600 <wait>
					reset();
    715a:	f001 fcd1 	bl	8b00 <reset>
					break;
    715e:	e7b5      	b.n	70cc <main+0x14>
				case MODE_AFH:
					mode = MODE_AFH;
    7160:	230e      	movs	r3, #14
    7162:	e000      	b.n	7166 <main+0xae>
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    7164:	2301      	movs	r3, #1
    7166:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    7168:	f7fe fa98 	bl	569c <bt_stream_rx>
					break;
    716c:	e7ae      	b.n	70cc <main+0x14>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    716e:	2302      	movs	r3, #2
    7170:	7463      	strb	r3, [r4, #17]
					br_transmit();
    7172:	f7fe fb41 	bl	57f8 <br_transmit>
					break;
    7176:	e7a9      	b.n	70cc <main+0x14>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    7178:	2308      	movs	r3, #8
    717a:	e7f4      	b.n	7166 <main+0xae>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    717c:	f7ff f9da 	bl	6534 <bt_follow_le>
					break;
    7180:	e7a4      	b.n	70cc <main+0x14>
				//JWHUR cfo estimation tracking
				case MODE_BT_CFO_LE:
					bt_tracking_le();
    7182:	f7ff f9e7 	bl	6554 <bt_tracking_le>
					break;
    7186:	e7a1      	b.n	70cc <main+0x14>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    7188:	f7ff fc12 	bl	69b0 <bt_promisc_le>
					break;
    718c:	e79e      	b.n	70cc <main+0x14>
				case MODE_BT_SLAVE_LE:
					mode = MODE_BT_SLAVE_LE;
    718e:	230c      	movs	r3, #12
    7190:	e045      	b.n	721e <main+0x166>
					bt_slave_le(0x000f);
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    7192:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    7194:	4826      	ldr	r0, [pc, #152]	; (7230 <main+0x178>)
    7196:	4927      	ldr	r1, [pc, #156]	; (7234 <main+0x17c>)
				case MODE_BT_SLAVE_LE:
					mode = MODE_BT_SLAVE_LE;
					bt_slave_le(0x000f);
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    7198:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    719a:	f000 ff37 	bl	800c <cc2400_txtest>
					break;
    719e:	e795      	b.n	70cc <main+0x14>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    71a0:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    71a2:	4824      	ldr	r0, [pc, #144]	; (7234 <main+0x17c>)
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
					cc2400_txtest(&modulation, &channel);
					break;
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    71a4:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    71a6:	f000 fd35 	bl	7c14 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    71aa:	2300      	movs	r3, #0
    71ac:	74a3      	strb	r3, [r4, #18]
					break;
    71ae:	e78d      	b.n	70cc <main+0x14>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    71b0:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    71b2:	4820      	ldr	r0, [pc, #128]	; (7234 <main+0x17c>)
					mode = MODE_RANGE_TEST;
					cc2400_rangetest(&channel);
					requested_mode = MODE_IDLE;
					break;
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    71b4:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    71b6:	f000 fe71 	bl	7e9c <cc2400_repeater>
					break;
    71ba:	e787      	b.n	70cc <main+0x14>
				case MODE_SPECAN:
					specan();
    71bc:	f7ff fe5a 	bl	6e74 <specan>
					break;
    71c0:	e784      	b.n	70cc <main+0x14>
				case MODE_LED_SPECAN:
					led_specan();
    71c2:	f7ff fee1 	bl	6f88 <led_specan>
					break;
    71c6:	e781      	b.n	70cc <main+0x14>
				case MODE_EGO:
					mode = MODE_EGO;
    71c8:	230d      	movs	r3, #13
    71ca:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    71cc:	7d20      	ldrb	r0, [r4, #20]
    71ce:	f001 f985 	bl	84dc <ego_main>
					break;
    71d2:	e77b      	b.n	70cc <main+0x14>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    71d4:	230f      	movs	r3, #15
    71d6:	7463      	strb	r3, [r4, #17]
					rx_generic();
    71d8:	f7ff fdc2 	bl	6d60 <rx_generic>
					break;
    71dc:	e776      	b.n	70cc <main+0x14>
				case MODE_TX_GENERIC:
					tx_generic();
    71de:	f7ff fdcf 	bl	6d80 <tx_generic>
					break;
    71e2:	e773      	b.n	70cc <main+0x14>
				case MODE_IDLE:
					cc2400_idle();
					break;
				// JWHUR POWER CONTROL
				case MODE_BT_SLAVE_LE_P0:
					mode = MODE_BT_SLAVE_LE_P0;
    71e4:	2311      	movs	r3, #17
    71e6:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x0008);
    71e8:	2008      	movs	r0, #8
    71ea:	e01a      	b.n	7222 <main+0x16a>
					break;
				case MODE_BT_SLAVE_LE_P1:
					mode = MODE_BT_SLAVE_LE_P1;
    71ec:	2312      	movs	r3, #18
    71ee:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x0009);
    71f0:	2009      	movs	r0, #9
    71f2:	e016      	b.n	7222 <main+0x16a>
					break;
				case MODE_BT_SLAVE_LE_P2:
					mode = MODE_BT_SLAVE_LE_P2;
    71f4:	2313      	movs	r3, #19
    71f6:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000a);
    71f8:	200a      	movs	r0, #10
    71fa:	e012      	b.n	7222 <main+0x16a>
					break;
				case MODE_BT_SLAVE_LE_P3:
					mode = MODE_BT_SLAVE_LE_P3;
    71fc:	2314      	movs	r3, #20
    71fe:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000b);
    7200:	200b      	movs	r0, #11
    7202:	e00e      	b.n	7222 <main+0x16a>
					break;
				case MODE_BT_SLAVE_LE_P4:
					mode = MODE_BT_SLAVE_LE_P4;
    7204:	2315      	movs	r3, #21
    7206:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000c);
    7208:	200c      	movs	r0, #12
    720a:	e00a      	b.n	7222 <main+0x16a>
					break;
				case MODE_BT_SLAVE_LE_P5:
					mode = MODE_BT_SLAVE_LE_P5;
    720c:	2316      	movs	r3, #22
    720e:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000d);
    7210:	200d      	movs	r0, #13
    7212:	e006      	b.n	7222 <main+0x16a>
					break;
				case MODE_BT_SLAVE_LE_P6:
					mode = MODE_BT_SLAVE_LE_P6;
    7214:	2317      	movs	r3, #23
    7216:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000e);
    7218:	200e      	movs	r0, #14
    721a:	e002      	b.n	7222 <main+0x16a>
					break;
				case MODE_BT_SLAVE_LE_P7:
					mode = MODE_BT_SLAVE_LE_P7;
    721c:	2318      	movs	r3, #24
    721e:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000f);
    7220:	200f      	movs	r0, #15
    7222:	f7ff fbfd 	bl	6a20 <bt_slave_le>
					break;
    7226:	e751      	b.n	70cc <main+0x14>
    7228:	000048d5 	.word	0x000048d5
    722c:	1000105c 	.word	0x1000105c
    7230:	10000e34 	.word	0x10000e34
    7234:	1000044c 	.word	0x1000044c

00007238 <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    7238:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    723a:	4b42      	ldr	r3, [pc, #264]	; (7344 <precalc+0x10c>)
	syncword = 0;
    723c:	4842      	ldr	r0, [pc, #264]	; (7348 <precalc+0x110>)
/* do all of the one time precalculation */
void precalc(void)
{
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    723e:	6819      	ldr	r1, [r3, #0]
	syncword = 0;
    7240:	2200      	movs	r2, #0
    7242:	2300      	movs	r3, #0
    7244:	e9c0 2300 	strd	r2, r3, [r0]
    7248:	2300      	movs	r3, #0
    724a:	0058      	lsls	r0, r3, #1

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    724c:	224f      	movs	r2, #79	; 0x4f
    724e:	fb90 f4f2 	sdiv	r4, r0, r2
    7252:	fb02 0214 	mls	r2, r2, r4, r0
    7256:	4e3d      	ldr	r6, [pc, #244]	; (734c <precalc+0x114>)
    7258:	559a      	strb	r2, [r3, r6]
    725a:	3301      	adds	r3, #1
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    725c:	2b4f      	cmp	r3, #79	; 0x4f
    725e:	d1f4      	bne.n	724a <precalc+0x12>
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    7260:	4b3b      	ldr	r3, [pc, #236]	; (7350 <precalc+0x118>)
    7262:	f3c1 52c4 	ubfx	r2, r1, #23, #5
    7266:	701a      	strb	r2, [r3, #0]
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    7268:	f3c1 1407 	ubfx	r4, r1, #4, #8
    726c:	f3c1 00c7 	ubfx	r0, r1, #3, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    7270:	4b38      	ldr	r3, [pc, #224]	; (7354 <precalc+0x11c>)
    7272:	f3c1 42c3 	ubfx	r2, r1, #19, #4
	c1 = ((address >> 4) & 0x10) +
    7276:	f000 0508 	and.w	r5, r0, #8
    727a:	f004 0710 	and.w	r7, r4, #16
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    727e:	701a      	strb	r2, [r3, #0]
	c1 = ((address >> 4) & 0x10) +
    7280:	442f      	add	r7, r5
    7282:	f3c1 0287 	ubfx	r2, r1, #2, #8
    7286:	f001 0501 	and.w	r5, r1, #1
    728a:	f3c1 0347 	ubfx	r3, r1, #1, #8
    728e:	442f      	add	r7, r5
    7290:	f002 0504 	and.w	r5, r2, #4
    7294:	442f      	add	r7, r5
    7296:	f003 0502 	and.w	r5, r3, #2
    729a:	442f      	add	r7, r5
    729c:	4d2e      	ldr	r5, [pc, #184]	; (7358 <precalc+0x120>)
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    729e:	f004 0408 	and.w	r4, r4, #8


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    72a2:	702f      	strb	r7, [r5, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    72a4:	4d2d      	ldr	r5, [pc, #180]	; (735c <precalc+0x124>)
    72a6:	f3c1 2788 	ubfx	r7, r1, #10, #9
    72aa:	802f      	strh	r7, [r5, #0]
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
    72ac:	098f      	lsrs	r7, r1, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    72ae:	09cd      	lsrs	r5, r1, #7
    72b0:	f007 0720 	and.w	r7, r7, #32
    72b4:	f005 0540 	and.w	r5, r5, #64	; 0x40
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    72b8:	0949      	lsrs	r1, r1, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    72ba:	443d      	add	r5, r7
    72bc:	f001 0110 	and.w	r1, r1, #16
    72c0:	4429      	add	r1, r5
    72c2:	440c      	add	r4, r1
    72c4:	f000 0004 	and.w	r0, r0, #4
    72c8:	4420      	add	r0, r4
    72ca:	f002 0202 	and.w	r2, r2, #2
    72ce:	4402      	add	r2, r0
    72d0:	f003 0301 	and.w	r3, r3, #1
    72d4:	4922      	ldr	r1, [pc, #136]	; (7360 <precalc+0x128>)
    72d6:	4413      	add	r3, r2
    72d8:	700b      	strb	r3, [r1, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    72da:	4b22      	ldr	r3, [pc, #136]	; (7364 <precalc+0x12c>)
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	b383      	cbz	r3, 7342 <precalc+0x10a>
    72e0:	2400      	movs	r4, #0
    72e2:	46a4      	mov	ip, r4
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    72e4:	4f20      	ldr	r7, [pc, #128]	; (7368 <precalc+0x130>)
    72e6:	2300      	movs	r3, #0
    72e8:	5de2      	ldrb	r2, [r4, r7]

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    72ea:	2500      	movs	r5, #0
    72ec:	ea52 0103 	orrs.w	r1, r2, r3
    72f0:	d008      	beq.n	7304 <precalc+0xcc>
		n &= n - 1;
    72f2:	f112 30ff 	adds.w	r0, r2, #4294967295	; 0xffffffff
    72f6:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    72fa:	3501      	adds	r5, #1
		n &= n - 1;
    72fc:	4002      	ands	r2, r0
    72fe:	400b      	ands	r3, r1

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    7300:	b2ed      	uxtb	r5, r5
    7302:	e7f3      	b.n	72ec <precalc+0xb4>
    7304:	3401      	adds	r4, #1
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    7306:	4465      	add	r5, ip
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    7308:	2c0a      	cmp	r4, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    730a:	b2ed      	uxtb	r5, r5
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    730c:	d001      	beq.n	7312 <precalc+0xda>
			used_channels += count_bits((uint64_t) afh_map[i]);
    730e:	46ac      	mov	ip, r5
    7310:	e7e8      	b.n	72e4 <precalc+0xac>
    7312:	4b16      	ldr	r3, [pc, #88]	; (736c <precalc+0x134>)
    7314:	701d      	strb	r5, [r3, #0]
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    7316:	2300      	movs	r3, #0
    7318:	461a      	mov	r2, r3
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    731a:	214f      	movs	r1, #79	; 0x4f
    731c:	fb93 f0f1 	sdiv	r0, r3, r1
    7320:	fb01 3010 	mls	r0, r1, r0, r3
    7324:	b2c1      	uxtb	r1, r0
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    7326:	08cc      	lsrs	r4, r1, #3
    7328:	5d3c      	ldrb	r4, [r7, r4]
    732a:	f000 0007 	and.w	r0, r0, #7
    732e:	fa44 f000 	asr.w	r0, r4, r0
    7332:	07c0      	lsls	r0, r0, #31
    7334:	d502      	bpl.n	733c <precalc+0x104>
				bank[j++] = chan;
    7336:	1c50      	adds	r0, r2, #1
    7338:	54b1      	strb	r1, [r6, r2]
    733a:	b2c2      	uxtb	r2, r0
    733c:	3302      	adds	r3, #2
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    733e:	2b9e      	cmp	r3, #158	; 0x9e
    7340:	d1eb      	bne.n	731a <precalc+0xe2>
    7342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7344:	10001560 	.word	0x10001560
    7348:	100011b0 	.word	0x100011b0
    734c:	100015c5 	.word	0x100015c5
    7350:	100015c3 	.word	0x100015c3
    7354:	10001570 	.word	0x10001570
    7358:	100015c4 	.word	0x100015c4
    735c:	10001572 	.word	0x10001572
    7360:	10001614 	.word	0x10001614
    7364:	100014df 	.word	0x100014df
    7368:	10001043 	.word	0x10001043
    736c:	10001041 	.word	0x10001041

00007370 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    7370:	b5f0      	push	{r4, r5, r6, r7, lr}
    7372:	b087      	sub	sp, #28
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    7374:	f3c0 02d8 	ubfx	r2, r0, #3, #25
	f = base_f % 79;
    7378:	214f      	movs	r1, #79	; 0x4f
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    737a:	f022 020f 	bic.w	r2, r2, #15
	f = base_f % 79;
    737e:	fbb2 f7f1 	udiv	r7, r2, r1
    7382:	fb01 2717 	mls	r7, r1, r7, r2
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    7386:	493f      	ldr	r1, [pc, #252]	; (7484 <next_hop+0x114>)
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
    7388:	f3c0 0340 	ubfx	r3, r0, #1, #1
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    738c:	f891 c000 	ldrb.w	ip, [r1]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    7390:	211f      	movs	r1, #31

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    7392:	015e      	lsls	r6, r3, #5
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    7394:	434b      	muls	r3, r1
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    7396:	ea8c 4c10 	eor.w	ip, ip, r0, lsr #16
    739a:	f00c 0c1f 	and.w	ip, ip, #31
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    739e:	ea8c 0c03 	eor.w	ip, ip, r3
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    73a2:	4b39      	ldr	r3, [pc, #228]	; (7488 <next_hop+0x118>)

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    73a4:	b2b6      	uxth	r6, r6
	a = (a1 ^ (clock >> 21)) & 0x1f;
    73a6:	781c      	ldrb	r4, [r3, #0]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    73a8:	4b38      	ldr	r3, [pc, #224]	; (748c <next_hop+0x11c>)
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    73aa:	ea84 5450 	eor.w	r4, r4, r0, lsr #21
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    73ae:	781b      	ldrb	r3, [r3, #0]
    73b0:	eb04 0490 	add.w	r4, r4, r0, lsr #2
    73b4:	405c      	eors	r4, r3
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    73b6:	4b36      	ldr	r3, [pc, #216]	; (7490 <next_hop+0x120>)

/* 5 bit permutation */
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    73b8:	400c      	ands	r4, r1
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    73ba:	881b      	ldrh	r3, [r3, #0]
    73bc:	ea83 10d0 	eor.w	r0, r3, r0, lsr #7
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
	p_high &= 0x1f;
	p_low &= 0x1ff;
    73c0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    73c4:	b280      	uxth	r0, r0
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    73c6:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
    73c8:	fa40 f103 	asr.w	r1, r0, r3
    73cc:	ad02      	add	r5, sp, #8
    73ce:	f001 0101 	and.w	r1, r1, #1
    73d2:	5559      	strb	r1, [r3, r5]
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    73d4:	3301      	adds	r3, #1
    73d6:	2b09      	cmp	r3, #9
    73d8:	d1f6      	bne.n	73c8 <next_hop+0x58>
    73da:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;
    73dc:	fa4c f003 	asr.w	r0, ip, r3
    73e0:	18e9      	adds	r1, r5, r3
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    73e2:	3301      	adds	r3, #1
		p[i+9] = (p_high >> i) & 0x01;
    73e4:	f000 0001 	and.w	r0, r0, #1
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    73e8:	2b05      	cmp	r3, #5
		p[i+9] = (p_high >> i) & 0x01;
    73ea:	7248      	strb	r0, [r1, #9]
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    73ec:	d1f6      	bne.n	73dc <next_hop+0x6c>
    73ee:	2300      	movs	r3, #0
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;
    73f0:	fa44 f103 	asr.w	r1, r4, r3
    73f4:	f001 0101 	and.w	r1, r1, #1
    73f8:	f80d 1003 	strb.w	r1, [sp, r3]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    73fc:	3301      	adds	r3, #1
    73fe:	2b05      	cmp	r3, #5
    7400:	d1f6      	bne.n	73f0 <next_hop+0x80>
    7402:	230d      	movs	r3, #13
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    7404:	5ce9      	ldrb	r1, [r5, r3]
    7406:	b179      	cbz	r1, 7428 <next_hop+0xb8>
			tmp = z_bit[index1[i]];
    7408:	4922      	ldr	r1, [pc, #136]	; (7494 <next_hop+0x124>)
    740a:	a806      	add	r0, sp, #24
    740c:	5c5c      	ldrb	r4, [r3, r1]
			z_bit[index1[i]] = z_bit[index2[i]];
    740e:	310e      	adds	r1, #14

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    7410:	4404      	add	r4, r0
			z_bit[index1[i]] = z_bit[index2[i]];
    7412:	5c58      	ldrb	r0, [r3, r1]
    7414:	a906      	add	r1, sp, #24
    7416:	4408      	add	r0, r1

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    7418:	f814 cc18 	ldrb.w	ip, [r4, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    741c:	f810 1c18 	ldrb.w	r1, [r0, #-24]
    7420:	f804 1c18 	strb.w	r1, [r4, #-24]
			z_bit[index2[i]] = tmp;
    7424:	f800 cc18 	strb.w	ip, [r0, #-24]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    7428:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    742c:	d2ea      	bcs.n	7404 <next_hop+0x94>
    742e:	2100      	movs	r1, #0
    7430:	460b      	mov	r3, r1
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
		output += z_bit[i] << i;
    7432:	f81d 0003 	ldrb.w	r0, [sp, r3]
    7436:	4098      	lsls	r0, r3
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    7438:	3301      	adds	r3, #1
		output += z_bit[i] << i;
    743a:	4401      	add	r1, r0
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    743c:	2b05      	cmp	r3, #5
		output += z_bit[i] << i;
    743e:	b2c9      	uxtb	r1, r1
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    7440:	d1f7      	bne.n	7432 <next_hop+0xc2>
	perm = perm5(
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    7442:	4b15      	ldr	r3, [pc, #84]	; (7498 <next_hop+0x128>)
    7444:	4437      	add	r7, r6
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	4419      	add	r1, r3
    744a:	440f      	add	r7, r1
    744c:	234f      	movs	r3, #79	; 0x4f
    744e:	fbb7 f0f3 	udiv	r0, r7, r3
    7452:	fb03 7710 	mls	r7, r3, r0, r7
    7456:	4b11      	ldr	r3, [pc, #68]	; (749c <next_hop+0x12c>)
    7458:	5dd8      	ldrb	r0, [r3, r7]
	if(afh_enabled) {
    745a:	4b11      	ldr	r3, [pc, #68]	; (74a0 <next_hop+0x130>)
    745c:	781b      	ldrb	r3, [r3, #0]
    745e:	b16b      	cbz	r3, 747c <next_hop+0x10c>
		f_dash = base_f % used_channels;
    7460:	4b10      	ldr	r3, [pc, #64]	; (74a4 <next_hop+0x134>)
    7462:	781b      	ldrb	r3, [r3, #0]
    7464:	fbb2 f0f3 	udiv	r0, r2, r3
    7468:	fb03 2210 	mls	r2, r3, r0, r2
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    746c:	4416      	add	r6, r2
    746e:	440e      	add	r6, r1
    7470:	fbb6 f1f3 	udiv	r1, r6, r3
    7474:	fb03 6611 	mls	r6, r3, r1, r6
    7478:	4b0b      	ldr	r3, [pc, #44]	; (74a8 <next_hop+0x138>)
    747a:	5d98      	ldrb	r0, [r3, r6]
	}
	return (2402 + next_channel);

}
    747c:	f600 1062 	addw	r0, r0, #2402	; 0x962
    7480:	b007      	add	sp, #28
    7482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7484:	100015c4 	.word	0x100015c4
    7488:	100015c3 	.word	0x100015c3
    748c:	10001570 	.word	0x10001570
    7490:	10001572 	.word	0x10001572
    7494:	0000a5e7 	.word	0x0000a5e7
    7498:	10001614 	.word	0x10001614
    749c:	100015c5 	.word	0x100015c5
    74a0:	100014df 	.word	0x100014df
    74a4:	10001041 	.word	0x10001041
    74a8:	10001574 	.word	0x10001574

000074ac <btle_channel_index>:
}

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
    74ac:	0840      	lsrs	r0, r0, #1
    74ae:	d00a      	beq.n	74c6 <btle_channel_index+0x1a>
		idx = 37;
	else if (channel < 12)
    74b0:	280b      	cmp	r0, #11
    74b2:	d801      	bhi.n	74b8 <btle_channel_index+0xc>
		idx = channel - 1;
    74b4:	3801      	subs	r0, #1
    74b6:	e004      	b.n	74c2 <btle_channel_index+0x16>
	else if (channel == 12)
    74b8:	280c      	cmp	r0, #12
    74ba:	d006      	beq.n	74ca <btle_channel_index+0x1e>
		idx = 38;
	else if (channel < 39)
    74bc:	2826      	cmp	r0, #38	; 0x26
    74be:	d806      	bhi.n	74ce <btle_channel_index+0x22>
		idx = channel - 2;
    74c0:	3802      	subs	r0, #2
    74c2:	b2c0      	uxtb	r0, r0
    74c4:	4770      	bx	lr

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
		idx = 37;
    74c6:	2025      	movs	r0, #37	; 0x25
    74c8:	4770      	bx	lr
	else if (channel < 12)
		idx = channel - 1;
	else if (channel == 12)
		idx = 38;
    74ca:	2026      	movs	r0, #38	; 0x26
    74cc:	4770      	bx	lr
	else if (channel < 39)
		idx = channel - 2;
	else
		idx = 39;
    74ce:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    74d0:	4770      	bx	lr

000074d2 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    74d2:	280a      	cmp	r0, #10
    74d4:	d802      	bhi.n	74dc <btle_channel_index_to_phys+0xa>
		phys = 2404 + 2 * idx;
    74d6:	f200 40b2 	addw	r0, r0, #1202	; 0x4b2
    74da:	e003      	b.n	74e4 <btle_channel_index_to_phys+0x12>
	else if (idx < 37)
    74dc:	2824      	cmp	r0, #36	; 0x24
    74de:	d803      	bhi.n	74e8 <btle_channel_index_to_phys+0x16>
		phys = 2428 + 2 * (idx - 11);
    74e0:	f200 40b3 	addw	r0, r0, #1203	; 0x4b3
    74e4:	0040      	lsls	r0, r0, #1
    74e6:	4770      	bx	lr
	else if (idx == 37)
    74e8:	2825      	cmp	r0, #37	; 0x25
    74ea:	d007      	beq.n	74fc <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
		phys = 2426;
    74ec:	f640 137a 	movw	r3, #2426	; 0x97a
    74f0:	2826      	cmp	r0, #38	; 0x26
    74f2:	bf0c      	ite	eq
    74f4:	4618      	moveq	r0, r3
    74f6:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    74fa:	4770      	bx	lr
	if (idx < 11)
		phys = 2404 + 2 * idx;
	else if (idx < 37)
		phys = 2428 + 2 * (idx - 11);
	else if (idx == 37)
		phys = 2402;
    74fc:	f640 1062 	movw	r0, #2402	; 0x962
	else if (idx == 38)
		phys = 2426;
	else
		phys = 2480;
	return phys;
}
    7500:	4770      	bx	lr

00007502 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    7502:	b538      	push	{r3, r4, r5, lr}
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    7504:	7d45      	ldrb	r5, [r0, #21]

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    7506:	4604      	mov	r4, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    7508:	4628      	mov	r0, r5
    750a:	f7ff ffe2 	bl	74d2 <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    750e:	7da2      	ldrb	r2, [r4, #22]
    7510:	2325      	movs	r3, #37	; 0x25
    7512:	442a      	add	r2, r5
    7514:	fb92 f1f3 	sdiv	r1, r2, r3
    7518:	fb03 2311 	mls	r3, r3, r1, r2
    751c:	7563      	strb	r3, [r4, #21]
	return phys;
}
    751e:	bd38      	pop	{r3, r4, r5, pc}

00007520 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    7520:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    7522:	2300      	movs	r3, #0
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
    7524:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    7528:	4293      	cmp	r3, r2
    752a:	da14      	bge.n	7556 <btle_calc_crc+0x36>
		u8 cur = data[i];
    752c:	5ccd      	ldrb	r5, [r1, r3]
    752e:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			int next_bit = (state ^ cur) & 1;
    7530:	ea85 0600 	eor.w	r6, r5, r0
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    7534:	f016 0f01 	tst.w	r6, #1
    7538:	ea4f 0555 	mov.w	r5, r5, lsr #1
    753c:	ea4f 0050 	mov.w	r0, r0, lsr #1
    7540:	d005      	beq.n	754e <btle_calc_crc+0x2e>
				state |= 1 << 23;
    7542:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
				state ^= lfsr_mask;
    7546:	f480 00b4 	eor.w	r0, r0, #5898240	; 0x5a0000
    754a:	f480 40c0 	eor.w	r0, r0, #24576	; 0x6000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    754e:	3c01      	subs	r4, #1
    7550:	d1ee      	bne.n	7530 <btle_calc_crc+0x10>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    7552:	3301      	adds	r3, #1
    7554:	e7e8      	b.n	7528 <btle_calc_crc+0x8>
			}
		}
	}

	return state;
}
    7556:	bd70      	pop	{r4, r5, r6, pc}

00007558 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    7558:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    755a:	3a01      	subs	r2, #1
    755c:	2a00      	cmp	r2, #0
    755e:	db14      	blt.n	758a <btle_reverse_crc+0x32>
		u8 cur = data[i];
    7560:	5c8d      	ldrb	r5, [r1, r2]
    7562:	2307      	movs	r3, #7
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
    7564:	0dc4      	lsrs	r4, r0, #23
			state = (state << 1) & 0xffffff;
    7566:	0040      	lsls	r0, r0, #1
    7568:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    756c:	fa45 f003 	asr.w	r0, r5, r3
    7570:	f000 0001 	and.w	r0, r0, #1
    7574:	4060      	eors	r0, r4
    7576:	4330      	orrs	r0, r6
			if (top_bit)
    7578:	b11c      	cbz	r4, 7582 <btle_reverse_crc+0x2a>
				state ^= lfsr_mask;
    757a:	f480 0034 	eor.w	r0, r0, #11796480	; 0xb40000
    757e:	f480 4040 	eor.w	r0, r0, #49152	; 0xc000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    7582:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    7586:	d2ed      	bcs.n	7564 <btle_reverse_crc+0xc>
    7588:	e7e7      	b.n	755a <btle_reverse_crc+0x2>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    758a:	2300      	movs	r3, #0
    758c:	461a      	mov	r2, r3
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    758e:	fa20 f103 	lsr.w	r1, r0, r3
    7592:	f1c3 0417 	rsb	r4, r3, #23
    7596:	f001 0101 	and.w	r1, r1, #1
    759a:	40a1      	lsls	r1, r4
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    759c:	3301      	adds	r3, #1
    759e:	2b18      	cmp	r3, #24
		ret |= ((state >> i) & 1) << (23 - i);
    75a0:	ea42 0201 	orr.w	r2, r2, r1
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    75a4:	d1f3      	bne.n	758e <btle_reverse_crc+0x36>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
}
    75a6:	4610      	mov	r0, r2
    75a8:	bd70      	pop	{r4, r5, r6, pc}
    75aa:	0000      	movs	r0, r0

000075ac <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    75ac:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    75ae:	2300      	movs	r3, #0
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    75b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    75b4:	4293      	cmp	r3, r2
    75b6:	da09      	bge.n	75cc <btle_crcgen_lut+0x20>
		key = data[i] ^ (state & 0xff);
    75b8:	5ccd      	ldrb	r5, [r1, r3]
		state = (state >> 8) ^ btle_crc_lut[key];
    75ba:	4c05      	ldr	r4, [pc, #20]	; (75d0 <btle_crcgen_lut+0x24>)
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
		key = data[i] ^ (state & 0xff);
    75bc:	4045      	eors	r5, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    75be:	b2ed      	uxtb	r5, r5
    75c0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    75c4:	3301      	adds	r3, #1
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
    75c6:	ea84 2010 	eor.w	r0, r4, r0, lsr #8
    75ca:	e7f3      	b.n	75b4 <btle_crcgen_lut+0x8>
	}
	return state;
}
    75cc:	bd30      	pop	{r4, r5, pc}
    75ce:	bf00      	nop
    75d0:	100004a0 	.word	0x100004a0

000075d4 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    75d4:	b513      	push	{r0, r1, r4, lr}
    75d6:	460b      	mov	r3, r1
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    75d8:	8841      	ldrh	r1, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    75da:	6812      	ldr	r2, [r2, #0]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    75dc:	f8ad 1004 	strh.w	r1, [sp, #4]
    75e0:	8881      	ldrh	r1, [r0, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    75e2:	7840      	ldrb	r0, [r0, #1]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    75e4:	f8ad 1006 	strh.w	r1, [sp, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    75e8:	4904      	ldr	r1, [pc, #16]	; (75fc <usb_vendor_request_handler+0x28>)
    75ea:	680c      	ldr	r4, [r1, #0]
    75ec:	a901      	add	r1, sp, #4
    75ee:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    75f0:	1e43      	subs	r3, r0, #1
    75f2:	4258      	negs	r0, r3
    75f4:	4158      	adcs	r0, r3
    75f6:	b002      	add	sp, #8
    75f8:	bd10      	pop	{r4, pc}
    75fa:	bf00      	nop
    75fc:	1000371c 	.word	0x1000371c

00007600 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    7600:	b530      	push	{r4, r5, lr}
    7602:	b087      	sub	sp, #28
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    7604:	ad01      	add	r5, sp, #4
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
	return (BOOL) (rv==1);
}


void set_serial_descriptor(u8 *descriptors) {
    7606:	4604      	mov	r4, r0
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    7608:	4669      	mov	r1, sp
    760a:	4628      	mov	r0, r5
    760c:	f001 faae 	bl	8b6c <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    7610:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7614:	b9e2      	cbnz	r2, 7650 <set_serial_descriptor+0x50>
    7616:	4623      	mov	r3, r4
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    7618:	3201      	adds	r2, #1
    761a:	5ca9      	ldrb	r1, [r5, r2]
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    761c:	2000      	movs	r0, #0
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    761e:	090c      	lsrs	r4, r1, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7620:	2c09      	cmp	r4, #9
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
    7622:	f001 010f 	and.w	r1, r1, #15
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7626:	bf86      	itte	hi
    7628:	3457      	addhi	r4, #87	; 0x57
    762a:	b2e4      	uxtbhi	r4, r4
    762c:	3430      	addls	r4, #48	; 0x30
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    762e:	2909      	cmp	r1, #9
    7630:	bf86      	itte	hi
    7632:	3157      	addhi	r1, #87	; 0x57
    7634:	b2c9      	uxtbhi	r1, r1
    7636:	3130      	addls	r1, #48	; 0x30
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    7638:	2a10      	cmp	r2, #16
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    763a:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
			desc[1+ i * 4] = 0;
    763e:	f883 007d 	strb.w	r0, [r3, #125]	; 0x7d
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7642:	f883 107e 	strb.w	r1, [r3, #126]	; 0x7e
			desc[3 + i * 4] = 0;
    7646:	f883 007f 	strb.w	r0, [r3, #127]	; 0x7f
    764a:	f103 0304 	add.w	r3, r3, #4
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    764e:	d1e3      	bne.n	7618 <set_serial_descriptor+0x18>
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[3 + i * 4] = 0;
		}
	}
}
    7650:	b007      	add	sp, #28
    7652:	bd30      	pop	{r4, r5, pc}

00007654 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    7654:	b538      	push	{r3, r4, r5, lr}
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    7656:	4c0d      	ldr	r4, [pc, #52]	; (768c <ubertooth_usb_init+0x38>)
		}
	}
}

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    7658:	4605      	mov	r5, r0
	// initialise stack
	USBInit();
    765a:	f001 fb65 	bl	8d28 <USBInit>

	set_serial_descriptor(abDescriptors);
    765e:	4620      	mov	r0, r4
    7660:	f7ff ffce 	bl	7600 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    7664:	4620      	mov	r0, r4
    7666:	f001 fd9d 	bl	91a4 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    766a:	4b09      	ldr	r3, [pc, #36]	; (7690 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    766c:	4a09      	ldr	r2, [pc, #36]	; (7694 <ubertooth_usb_init+0x40>)
    766e:	2002      	movs	r0, #2
    7670:	4909      	ldr	r1, [pc, #36]	; (7698 <ubertooth_usb_init+0x44>)
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);

	// Request handler
	v_req_handler = vendor_req_handler;
    7672:	601d      	str	r5, [r3, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    7674:	f001 fb4e 	bl	8d14 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    7678:	4908      	ldr	r1, [pc, #32]	; (769c <ubertooth_usb_init+0x48>)
    767a:	20ff      	movs	r0, #255	; 0xff
    767c:	f001 fd78 	bl	9170 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    7680:	2001      	movs	r0, #1
    7682:	f001 fbe6 	bl	8e52 <USBHwConnect>

	return 0;
}
    7686:	2000      	movs	r0, #0
    7688:	bd38      	pop	{r3, r4, r5, pc}
    768a:	bf00      	nop
    768c:	100008a0 	.word	0x100008a0
    7690:	1000371c 	.word	0x1000371c
    7694:	10003618 	.word	0x10003618
    7698:	000075d5 	.word	0x000075d5
    769c:	0000a603 	.word	0x0000a603

000076a0 <queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    76a0:	4b04      	ldr	r3, [pc, #16]	; (76b4 <queue_init+0x14>)
    76a2:	2100      	movs	r1, #0
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    76a4:	4804      	ldr	r0, [pc, #16]	; (76b8 <queue_init+0x18>)
    76a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    76aa:	6019      	str	r1, [r3, #0]
	tail = 0;
    76ac:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    76ae:	f7fc bdbf 	b.w	4230 <memset>
    76b2:	bf00      	nop
    76b4:	10000eb4 	.word	0x10000eb4
    76b8:	10001618 	.word	0x10001618

000076bc <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
    76bc:	4b0a      	ldr	r3, [pc, #40]	; (76e8 <usb_enqueue+0x2c>)
    76be:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    76c0:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    76c2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    76c6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    76ca:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    76cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    76d0:	4291      	cmp	r1, r2
    76d2:	d006      	beq.n	76e2 <usb_enqueue+0x26>
		return NULL;
	}

	++tail;
    76d4:	685a      	ldr	r2, [r3, #4]
    76d6:	3201      	adds	r2, #1
    76d8:	605a      	str	r2, [r3, #4]
	return &fifo[t];
    76da:	4b04      	ldr	r3, [pc, #16]	; (76ec <usb_enqueue+0x30>)
    76dc:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    76e0:	4770      	bx	lr
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    76e2:	2000      	movs	r0, #0
	}

	++tail;
	return &fifo[t];

}
    76e4:	4770      	bx	lr
    76e6:	bf00      	nop
    76e8:	10000eb4 	.word	0x10000eb4
    76ec:	10001618 	.word	0x10001618

000076f0 <usb_enqueue_time>:

//JWHUR
usb_time_rx *usb_enqueue_time(void)
{
	u8 h = head & 0x7F;
    76f0:	4b0a      	ldr	r3, [pc, #40]	; (771c <usb_enqueue_time+0x2c>)
    76f2:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    76f4:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    76f6:	f001 017f 	and.w	r1, r1, #127	; 0x7f

//JWHUR
usb_time_rx *usb_enqueue_time(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    76fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    76fe:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    7700:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7704:	4291      	cmp	r1, r2
    7706:	d006      	beq.n	7716 <usb_enqueue_time+0x26>
		return NULL;
	}

	++tail;
    7708:	685a      	ldr	r2, [r3, #4]
    770a:	3201      	adds	r2, #1
    770c:	605a      	str	r2, [r3, #4]
	return &fifo[t];
    770e:	4b04      	ldr	r3, [pc, #16]	; (7720 <usb_enqueue_time+0x30>)
    7710:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    7714:	4770      	bx	lr
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    7716:	2000      	movs	r0, #0
	}

	++tail;
	return &fifo[t];

}
    7718:	4770      	bx	lr
    771a:	bf00      	nop
    771c:	10000eb4 	.word	0x10000eb4
    7720:	10001618 	.word	0x10001618

00007724 <dequeue>:


usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    7724:	4b08      	ldr	r3, [pc, #32]	; (7748 <dequeue+0x24>)
    7726:	6818      	ldr	r0, [r3, #0]
	u8 t = tail & 0x7F;
    7728:	685a      	ldr	r2, [r3, #4]
}


usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    772a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
    772e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7732:	4290      	cmp	r0, r2
    7734:	d006      	beq.n	7744 <dequeue+0x20>
		return NULL;
	}

	++head;
    7736:	681a      	ldr	r2, [r3, #0]
    7738:	3201      	adds	r2, #1
    773a:	601a      	str	r2, [r3, #0]
	return &fifo[h];
    773c:	4b03      	ldr	r3, [pc, #12]	; (774c <dequeue+0x28>)
    773e:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    7742:	4770      	bx	lr
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
		return NULL;
    7744:	2000      	movs	r0, #0
	}

	++head;
	return &fifo[h];
}
    7746:	4770      	bx	lr
    7748:	10000eb4 	.word	0x10000eb4
    774c:	10001618 	.word	0x10001618

00007750 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    7750:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7752:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    7754:	f7ff ffe6 	bl	7724 <dequeue>
    7758:	4b0d      	ldr	r3, [pc, #52]	; (7790 <dequeue_send+0x40>)
	if (pkt != NULL) {
    775a:	4604      	mov	r4, r0
    775c:	b138      	cbz	r0, 776e <dequeue_send+0x1e>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    775e:	2082      	movs	r0, #130	; 0x82
    7760:	4621      	mov	r1, r4
    7762:	2240      	movs	r2, #64	; 0x40

int dequeue_send(u32 clkn)
{
	usb_pkt_rx *pkt = dequeue();
	if (pkt != NULL) {
		last_usb_pkt = clkn;
    7764:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    7766:	f001 fba5 	bl	8eb4 <USBHwEPWrite>
		return 1;
    776a:	2001      	movs	r0, #1
    776c:	e00e      	b.n	778c <dequeue_send+0x3c>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    776e:	689a      	ldr	r2, [r3, #8]
    7770:	4908      	ldr	r1, [pc, #32]	; (7794 <dequeue_send+0x44>)
    7772:	1aaa      	subs	r2, r5, r2
    7774:	428a      	cmp	r2, r1
    7776:	d908      	bls.n	778a <dequeue_send+0x3a>
			u8 pkt_type = KEEP_ALIVE;
    7778:	2203      	movs	r2, #3
    777a:	a902      	add	r1, sp, #8
    777c:	f801 2d01 	strb.w	r2, [r1, #-1]!
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7780:	2082      	movs	r0, #130	; 0x82
    7782:	2201      	movs	r2, #1
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
		return 1;
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
			u8 pkt_type = KEEP_ALIVE;
			last_usb_pkt = clkn;
    7784:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7786:	f001 fb95 	bl	8eb4 <USBHwEPWrite>
		}
		return 0;
    778a:	4620      	mov	r0, r4
	}
}
    778c:	b003      	add	sp, #12
    778e:	bd30      	pop	{r4, r5, pc}
    7790:	10000eb4 	.word	0x10000eb4
    7794:	00061a80 	.word	0x00061a80

00007798 <handle_usb>:

void handle_usb(u32 clkn)
{
    7798:	b538      	push	{r3, r4, r5, lr}
    779a:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    779c:	2082      	movs	r0, #130	; 0x82
    779e:	f001 fb63 	bl	8e68 <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    77a2:	0681      	lsls	r1, r0, #26
void handle_usb(u32 clkn)
{
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    77a4:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    77a6:	d402      	bmi.n	77ae <handle_usb+0x16>
		dequeue_send(clkn);
    77a8:	4620      	mov	r0, r4
    77aa:	f7ff ffd1 	bl	7750 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    77ae:	066a      	lsls	r2, r5, #25
    77b0:	d402      	bmi.n	77b8 <handle_usb+0x20>
		dequeue_send(clkn);
    77b2:	4620      	mov	r0, r4
    77b4:	f7ff ffcc 	bl	7750 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    77b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!(epstat & EPSTAT_B2FULL)) {
		dequeue_send(clkn);
	}

	/* polled "interrupt" */
	USBHwISR();
    77bc:	f001 bbe6 	b.w	8f8c <USBHwISR>

000077c0 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    77c0:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    77c2:	229e      	movs	r2, #158	; 0x9e
    77c4:	4807      	ldr	r0, [pc, #28]	; (77e4 <rssi_reset+0x24>)
    77c6:	2100      	movs	r1, #0
    77c8:	f7fc fd32 	bl	4230 <memset>

	rssi_count = 0;
    77cc:	4a06      	ldr	r2, [pc, #24]	; (77e8 <rssi_reset+0x28>)
    77ce:	2300      	movs	r3, #0
    77d0:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    77d2:	4a06      	ldr	r2, [pc, #24]	; (77ec <rssi_reset+0x2c>)
    77d4:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    77d6:	4b06      	ldr	r3, [pc, #24]	; (77f0 <rssi_reset+0x30>)
    77d8:	2280      	movs	r2, #128	; 0x80
    77da:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    77dc:	4b05      	ldr	r3, [pc, #20]	; (77f4 <rssi_reset+0x34>)
    77de:	227f      	movs	r2, #127	; 0x7f
    77e0:	701a      	strb	r2, [r3, #0]
    77e2:	bd08      	pop	{r3, pc}
    77e4:	10000ec0 	.word	0x10000ec0
    77e8:	100014de 	.word	0x100014de
    77ec:	10003720 	.word	0x10003720
    77f0:	10001040 	.word	0x10001040
    77f4:	10001042 	.word	0x10001042

000077f8 <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    77f8:	4b0b      	ldr	r3, [pc, #44]	; (7828 <rssi_add+0x30>)
    77fa:	f993 2000 	ldrsb.w	r2, [r3]
    77fe:	4290      	cmp	r0, r2
    7800:	bfa8      	it	ge
    7802:	4602      	movge	r2, r0
    7804:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    7806:	4b09      	ldr	r3, [pc, #36]	; (782c <rssi_add+0x34>)
    7808:	f993 2000 	ldrsb.w	r2, [r3]
    780c:	4290      	cmp	r0, r2
    780e:	bfb8      	it	lt
    7810:	4602      	movlt	r2, r0
    7812:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    7814:	4b06      	ldr	r3, [pc, #24]	; (7830 <rssi_add+0x38>)
    7816:	681a      	ldr	r2, [r3, #0]
    7818:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    781c:	6018      	str	r0, [r3, #0]
	rssi_count += 1;
    781e:	4b05      	ldr	r3, [pc, #20]	; (7834 <rssi_add+0x3c>)
    7820:	781a      	ldrb	r2, [r3, #0]
    7822:	3201      	adds	r2, #1
    7824:	701a      	strb	r2, [r3, #0]
    7826:	4770      	bx	lr
    7828:	10001040 	.word	0x10001040
    782c:	10001042 	.word	0x10001042
    7830:	10003720 	.word	0x10003720
    7834:	100014de 	.word	0x100014de

00007838 <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    7838:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    783a:	f640 1362 	movw	r3, #2402	; 0x962
    783e:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7842:	bf38      	it	cc
    7844:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    7846:	4b0d      	ldr	r3, [pc, #52]	; (787c <rssi_iir_update+0x44>)
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;

	int i = channel - 2402;
    7848:	f6a0 1062 	subw	r0, r0, #2402	; 0x962

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    784c:	781b      	ldrb	r3, [r3, #0]
    784e:	b123      	cbz	r3, 785a <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    7850:	4a0b      	ldr	r2, [pc, #44]	; (7880 <rssi_iir_update+0x48>)
    7852:	6812      	ldr	r2, [r2, #0]
    7854:	3280      	adds	r2, #128	; 0x80
    7856:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    785a:	2403      	movs	r4, #3
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    785c:	4a09      	ldr	r2, [pc, #36]	; (7884 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    785e:	4363      	muls	r3, r4
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7860:	f932 1010 	ldrsh.w	r1, [r2, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7864:	24fd      	movs	r4, #253	; 0xfd
    7866:	fb04 3301 	mla	r3, r4, r1, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    786a:	f44f 7180 	mov.w	r1, #256	; 0x100
    786e:	3380      	adds	r3, #128	; 0x80
    7870:	fb93 f3f1 	sdiv	r3, r3, r1
    7874:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    7878:	bd10      	pop	{r4, pc}
    787a:	bf00      	nop
    787c:	100014de 	.word	0x100014de
    7880:	10003720 	.word	0x10003720
    7884:	10000ec0 	.word	0x10000ec0

00007888 <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    7888:	f640 1362 	movw	r3, #2402	; 0x962
    788c:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7890:	bf38      	it	cc
    7892:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    7894:	4a05      	ldr	r2, [pc, #20]	; (78ac <rssi_get_avg+0x24>)
    7896:	f6a0 1362 	subw	r3, r0, #2402	; 0x962
    789a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
    789e:	f44f 7380 	mov.w	r3, #256	; 0x100
    78a2:	3080      	adds	r0, #128	; 0x80
    78a4:	fb90 f0f3 	sdiv	r0, r0, r3
}
    78a8:	b240      	sxtb	r0, r0
    78aa:	4770      	bx	lr
    78ac:	10000ec0 	.word	0x10000ec0

000078b0 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    78b0:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    78b2:	4d15      	ldr	r5, [pc, #84]	; (7908 <cs_threshold_calc_and_set+0x58>)
    78b4:	782c      	ldrb	r4, [r5, #0]
    78b6:	b263      	sxtb	r3, r4
    78b8:	2b00      	cmp	r3, #0
    78ba:	dd05      	ble.n	78c8 <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    78bc:	f7ff ffe4 	bl	7888 <rssi_get_avg>
		level = rssi - 54 + cs_threshold_req;
    78c0:	782c      	ldrb	r4, [r5, #0]
    78c2:	3c36      	subs	r4, #54	; 0x36
    78c4:	4420      	add	r0, r4
    78c6:	b2c4      	uxtb	r4, r0
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
	level = level > -20 ? -20 : level;
    78c8:	f06f 0377 	mvn.w	r3, #119	; 0x77
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
    78cc:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    78ce:	429c      	cmp	r4, r3
    78d0:	bfb8      	it	lt
    78d2:	461c      	movlt	r4, r3
    78d4:	f06f 0313 	mvn.w	r3, #19
    78d8:	429c      	cmp	r4, r3
    78da:	bfa8      	it	ge
    78dc:	461c      	movge	r4, r3
    78de:	b2e4      	uxtb	r4, r4
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    78e0:	f104 0138 	add.w	r1, r4, #56	; 0x38
    78e4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    78e8:	2006      	movs	r0, #6
    78ea:	f041 0103 	orr.w	r1, r1, #3
    78ee:	f000 ff62 	bl	87b6 <cc2400_set>
	cs_threshold_cur = level;
    78f2:	4b06      	ldr	r3, [pc, #24]	; (790c <cs_threshold_calc_and_set+0x5c>)
    78f4:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    78f6:	b264      	sxtb	r4, r4
    78f8:	f114 0f77 	cmn.w	r4, #119	; 0x77
    78fc:	4b04      	ldr	r3, [pc, #16]	; (7910 <cs_threshold_calc_and_set+0x60>)
    78fe:	bfac      	ite	ge
    7900:	2400      	movge	r4, #0
    7902:	2401      	movlt	r4, #1
    7904:	701c      	strb	r4, [r3, #0]
    7906:	bd38      	pop	{r3, r4, r5, pc}
    7908:	100014e0 	.word	0x100014e0
    790c:	10001558 	.word	0x10001558
    7910:	100011a8 	.word	0x100011a8

00007914 <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    7914:	4b07      	ldr	r3, [pc, #28]	; (7934 <cs_trigger_enable+0x20>)
    7916:	2200      	movs	r2, #0
    7918:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    791a:	4b07      	ldr	r3, [pc, #28]	; (7938 <cs_trigger_enable+0x24>)
    791c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7920:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7922:	4b06      	ldr	r3, [pc, #24]	; (793c <cs_trigger_enable+0x28>)
    7924:	2204      	movs	r2, #4
    7926:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    7928:	689a      	ldr	r2, [r3, #8]
    792a:	f042 0204 	orr.w	r2, r2, #4
    792e:	609a      	str	r2, [r3, #8]
    7930:	4770      	bx	lr
    7932:	bf00      	nop
    7934:	10001559 	.word	0x10001559
    7938:	e000e100 	.word	0xe000e100
    793c:	400280ac 	.word	0x400280ac

00007940 <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    7940:	4b07      	ldr	r3, [pc, #28]	; (7960 <cs_trigger_disable+0x20>)
    7942:	681a      	ldr	r2, [r3, #0]
    7944:	f022 0204 	bic.w	r2, r2, #4
    7948:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    794a:	2204      	movs	r2, #4
    794c:	f843 2c08 	str.w	r2, [r3, #-8]
	ICER0 = ICER0_ICE_EINT3;
    7950:	4b04      	ldr	r3, [pc, #16]	; (7964 <cs_trigger_disable+0x24>)
    7952:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7956:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    7958:	4b03      	ldr	r3, [pc, #12]	; (7968 <cs_trigger_disable+0x28>)
    795a:	2200      	movs	r2, #0
    795c:	701a      	strb	r2, [r3, #0]
    795e:	4770      	bx	lr
    7960:	400280b4 	.word	0x400280b4
    7964:	e000e180 	.word	0xe000e180
    7968:	10001559 	.word	0x10001559

0000796c <cs_reset>:
}

void cs_reset(void)
{
    796c:	b508      	push	{r3, lr}
	cs_trigger_disable();
    796e:	f7ff ffe7 	bl	7940 <cs_trigger_disable>

	cs_no_squelch = 0;
    7972:	4b04      	ldr	r3, [pc, #16]	; (7984 <cs_reset+0x18>)
    7974:	2200      	movs	r2, #0
    7976:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    7978:	4a03      	ldr	r2, [pc, #12]	; (7988 <cs_reset+0x1c>)
    797a:	2388      	movs	r3, #136	; 0x88
    797c:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    797e:	4a03      	ldr	r2, [pc, #12]	; (798c <cs_reset+0x20>)
    7980:	7013      	strb	r3, [r2, #0]
    7982:	bd08      	pop	{r3, pc}
    7984:	100011a8 	.word	0x100011a8
    7988:	100014e0 	.word	0x100014e0
    798c:	10001558 	.word	0x10001558

00007990 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    7990:	4b0a      	ldr	r3, [pc, #40]	; (79bc <clkn_stop+0x2c>)
    7992:	2202      	movs	r2, #2
    7994:	601a      	str	r2, [r3, #0]

	clkn = 0;
    7996:	4a0a      	ldr	r2, [pc, #40]	; (79c0 <clkn_stop+0x30>)
    7998:	2300      	movs	r3, #0
    799a:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    799c:	4a09      	ldr	r2, [pc, #36]	; (79c4 <clkn_stop+0x34>)
    799e:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    79a0:	4a09      	ldr	r2, [pc, #36]	; (79c8 <clkn_stop+0x38>)
    79a2:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    79a4:	4a09      	ldr	r2, [pc, #36]	; (79cc <clkn_stop+0x3c>)
    79a6:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    79a8:	4a09      	ldr	r2, [pc, #36]	; (79d0 <clkn_stop+0x40>)
    79aa:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    79ac:	4a09      	ldr	r2, [pc, #36]	; (79d4 <clkn_stop+0x44>)
    79ae:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    79b0:	4a09      	ldr	r2, [pc, #36]	; (79d8 <clkn_stop+0x48>)
    79b2:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    79b4:	4a09      	ldr	r2, [pc, #36]	; (79dc <clkn_stop+0x4c>)
    79b6:	6013      	str	r3, [r2, #0]
    79b8:	4770      	bx	lr
    79ba:	bf00      	nop
    79bc:	40004004 	.word	0x40004004
    79c0:	1000105c 	.word	0x1000105c
    79c4:	10001038 	.word	0x10001038
    79c8:	10001050 	.word	0x10001050
    79cc:	100011aa 	.word	0x100011aa
    79d0:	100014dc 	.word	0x100014dc
    79d4:	10001058 	.word	0x10001058
    79d8:	10001054 	.word	0x10001054
    79dc:	10001514 	.word	0x10001514

000079e0 <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    79e0:	4b01      	ldr	r3, [pc, #4]	; (79e8 <clkn_start+0x8>)
    79e2:	2201      	movs	r2, #1
    79e4:	601a      	str	r2, [r3, #0]
    79e6:	4770      	bx	lr
    79e8:	40004004 	.word	0x40004004

000079ec <clkn_init>:
}

void clkn_init()
{
    79ec:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    79ee:	f7ff ffcf 	bl	7990 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    79f2:	4b06      	ldr	r3, [pc, #24]	; (7a0c <clkn_init+0x20>)
    79f4:	2204      	movs	r2, #4
    79f6:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    79f8:	f502 6243 	add.w	r2, r2, #3120	; 0xc30
    79fc:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    79fe:	2203      	movs	r2, #3
    7a00:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    7a02:	4b03      	ldr	r3, [pc, #12]	; (7a10 <clkn_init+0x24>)
    7a04:	2202      	movs	r2, #2
    7a06:	601a      	str	r2, [r3, #0]
    7a08:	bd08      	pop	{r3, pc}
    7a0a:	bf00      	nop
    7a0c:	4000400c 	.word	0x4000400c
    7a10:	e000e100 	.word	0xe000e100

00007a14 <dma_disable>:
{
	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    7a14:	4b15      	ldr	r3, [pc, #84]	; (7a6c <dma_disable+0x58>)
    7a16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7a1a:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    7a1c:	4a14      	ldr	r2, [pc, #80]	; (7a70 <dma_disable+0x5c>)
    7a1e:	2300      	movs	r3, #0
    7a20:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    7a22:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    7a24:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    7a26:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    7a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    7a2c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    7a30:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    7a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    7a38:	23ff      	movs	r3, #255	; 0xff
    7a3a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    7a3e:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    7a40:	6093      	str	r3, [r2, #8]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    7a42:	4b0c      	ldr	r3, [pc, #48]	; (7a74 <dma_disable+0x60>)
    7a44:	681a      	ldr	r2, [r3, #0]
    7a46:	f022 0201 	bic.w	r2, r2, #1
    7a4a:	601a      	str	r2, [r3, #0]
	while (DMACConfig & DMACConfig_E);
    7a4c:	681a      	ldr	r2, [r3, #0]
    7a4e:	f012 0201 	ands.w	r2, r2, #1
    7a52:	d1fb      	bne.n	7a4c <dma_disable+0x38>

	/* reset interrupt counters */
	rx_tc = 0;
    7a54:	4b08      	ldr	r3, [pc, #32]	; (7a78 <dma_disable+0x64>)
    7a56:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    7a58:	4b08      	ldr	r3, [pc, #32]	; (7a7c <dma_disable+0x68>)
    7a5a:	601a      	str	r2, [r3, #0]

	active_rxbuf = &rxbuf1[0];
    7a5c:	4a08      	ldr	r2, [pc, #32]	; (7a80 <dma_disable+0x6c>)
    7a5e:	4b09      	ldr	r3, [pc, #36]	; (7a84 <dma_disable+0x70>)
    7a60:	601a      	str	r2, [r3, #0]
	idle_rxbuf = &rxbuf2[0];
    7a62:	4a09      	ldr	r2, [pc, #36]	; (7a88 <dma_disable+0x74>)
    7a64:	4b09      	ldr	r3, [pc, #36]	; (7a8c <dma_disable+0x78>)
    7a66:	601a      	str	r2, [r3, #0]
    7a68:	4770      	bx	lr
    7a6a:	bf00      	nop
    7a6c:	e000e180 	.word	0xe000e180
    7a70:	50004110 	.word	0x50004110
    7a74:	50004030 	.word	0x50004030
    7a78:	1000103c 	.word	0x1000103c
    7a7c:	10001554 	.word	0x10001554
    7a80:	10001521 	.word	0x10001521
    7a84:	1000109c 	.word	0x1000109c
    7a88:	100014e1 	.word	0x100014e1
    7a8c:	100011b8 	.word	0x100011b8

00007a90 <dma_init>:
}

void dma_init()
{
    7a90:	b508      	push	{r3, lr}
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    7a92:	4b14      	ldr	r3, [pc, #80]	; (7ae4 <dma_init+0x54>)
    7a94:	681a      	ldr	r2, [r3, #0]
    7a96:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    7a9a:	601a      	str	r2, [r3, #0]

	dma_disable();
    7a9c:	f7ff ffba 	bl	7a14 <dma_disable>

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7aa0:	4b11      	ldr	r3, [pc, #68]	; (7ae8 <dma_init+0x58>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7aa2:	4a12      	ldr	r2, [pc, #72]	; (7aec <dma_init+0x5c>)
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7aa4:	4812      	ldr	r0, [pc, #72]	; (7af0 <dma_init+0x60>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7aa6:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7aa8:	4a12      	ldr	r2, [pc, #72]	; (7af4 <dma_init+0x64>)
	rx_dma_lli1.control = (DMA_SIZE) |
    7aaa:	4913      	ldr	r1, [pc, #76]	; (7af8 <dma_init+0x68>)
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    7aac:	6010      	str	r0, [r2, #0]
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7aae:	6018      	str	r0, [r3, #0]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7ab0:	4812      	ldr	r0, [pc, #72]	; (7afc <dma_init+0x6c>)
	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7ab2:	609a      	str	r2, [r3, #8]
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
    7ab4:	60d1      	str	r1, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7ab6:	6050      	str	r0, [r2, #4]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    7ab8:	6093      	str	r3, [r2, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7aba:	4a11      	ldr	r2, [pc, #68]	; (7b00 <dma_init+0x70>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    7abc:	60d9      	str	r1, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7abe:	2101      	movs	r1, #1
    7ac0:	6011      	str	r1, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
    7ac2:	6811      	ldr	r1, [r2, #0]
    7ac4:	07c9      	lsls	r1, r1, #31
    7ac6:	d5fc      	bpl.n	7ac2 <dma_init+0x32>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    7ac8:	681a      	ldr	r2, [r3, #0]
    7aca:	490e      	ldr	r1, [pc, #56]	; (7b04 <dma_init+0x74>)
    7acc:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    7ace:	685a      	ldr	r2, [r3, #4]
    7ad0:	604a      	str	r2, [r1, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    7ad2:	689a      	ldr	r2, [r3, #8]
    7ad4:	608a      	str	r2, [r1, #8]
	DMACC0Control = rx_dma_lli1.control;
    7ad6:	68da      	ldr	r2, [r3, #12]
    7ad8:	4b0b      	ldr	r3, [pc, #44]	; (7b08 <dma_init+0x78>)
    7ada:	601a      	str	r2, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    7adc:	f24d 0206 	movw	r2, #53254	; 0xd006
    7ae0:	605a      	str	r2, [r3, #4]
    7ae2:	bd08      	pop	{r3, pc}
    7ae4:	400fc0c4 	.word	0x400fc0c4
    7ae8:	100037e4 	.word	0x100037e4
    7aec:	10001521 	.word	0x10001521
    7af0:	40030008 	.word	0x40030008
    7af4:	100037d4 	.word	0x100037d4
    7af8:	88009032 	.word	0x88009032
    7afc:	100014e1 	.word	0x100014e1
    7b00:	50004030 	.word	0x50004030
    7b04:	50004100 	.word	0x50004100
    7b08:	5000410c 	.word	0x5000410c

00007b0c <dma_init_le>:
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */
}

void dma_init_le()
{
    7b0c:	b508      	push	{r3, lr}
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    7b0e:	4b1a      	ldr	r3, [pc, #104]	; (7b78 <dma_init_le+0x6c>)
    7b10:	681a      	ldr	r2, [r3, #0]
    7b12:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    7b16:	601a      	str	r2, [r3, #0]

	dma_disable();
    7b18:	f7ff ff7c 	bl	7a14 <dma_disable>

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7b1c:	4b17      	ldr	r3, [pc, #92]	; (7b7c <dma_init_le+0x70>)
    7b1e:	2201      	movs	r2, #1
    7b20:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    7b22:	681a      	ldr	r2, [r3, #0]
    7b24:	07d0      	lsls	r0, r2, #31
    7b26:	d5fc      	bpl.n	7b22 <dma_init_le+0x16>
    7b28:	4b15      	ldr	r3, [pc, #84]	; (7b80 <dma_init_le+0x74>)
    7b2a:	2200      	movs	r2, #0

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7b2c:	4915      	ldr	r1, [pc, #84]	; (7b84 <dma_init_le+0x78>)
    7b2e:	f843 1c10 	str.w	r1, [r3, #-16]
    7b32:	4915      	ldr	r1, [pc, #84]	; (7b88 <dma_init_le+0x7c>)
    7b34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    7b38:	f843 1c0c 	str.w	r1, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7b3c:	2a0a      	cmp	r2, #10
    7b3e:	bf14      	ite	ne
    7b40:	4619      	movne	r1, r3
    7b42:	2100      	moveq	r1, #0
    7b44:	f843 1c08 	str.w	r1, [r3, #-8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7b48:	3201      	adds	r2, #1
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7b4a:	4910      	ldr	r1, [pc, #64]	; (7b8c <dma_init_le+0x80>)

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7b4c:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7b4e:	f843 1c04 	str.w	r1, [r3, #-4]
    7b52:	f103 0310 	add.w	r3, r3, #16

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7b56:	d1e9      	bne.n	7b2c <dma_init_le+0x20>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    7b58:	4b0d      	ldr	r3, [pc, #52]	; (7b90 <dma_init_le+0x84>)
    7b5a:	490e      	ldr	r1, [pc, #56]	; (7b94 <dma_init_le+0x88>)
    7b5c:	681a      	ldr	r2, [r3, #0]
    7b5e:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7b60:	685a      	ldr	r2, [r3, #4]
    7b62:	604a      	str	r2, [r1, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7b64:	689a      	ldr	r2, [r3, #8]
    7b66:	608a      	str	r2, [r1, #8]
	DMACC0Control = le_dma_lli[0].control;
    7b68:	68da      	ldr	r2, [r3, #12]
    7b6a:	4b0b      	ldr	r3, [pc, #44]	; (7b98 <dma_init_le+0x8c>)
    7b6c:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    7b6e:	f24d 0206 	movw	r2, #53254	; 0xd006
    7b72:	605a      	str	r2, [r3, #4]
    7b74:	bd08      	pop	{r3, pc}
    7b76:	bf00      	nop
    7b78:	400fc0c4 	.word	0x400fc0c4
    7b7c:	50004030 	.word	0x50004030
    7b80:	10003734 	.word	0x10003734
    7b84:	40030008 	.word	0x40030008
    7b88:	10001521 	.word	0x10001521
    7b8c:	88001004 	.word	0x88001004
    7b90:	10003724 	.word	0x10003724
    7b94:	50004100 	.word	0x50004100
    7b98:	5000410c 	.word	0x5000410c

00007b9c <dio_ssp_start>:


void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    7b9c:	4a0d      	ldr	r2, [pc, #52]	; (7bd4 <dio_ssp_start+0x38>)
    7b9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7ba2:	6013      	str	r3, [r2, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7ba4:	4a0c      	ldr	r2, [pc, #48]	; (7bd8 <dio_ssp_start+0x3c>)
    7ba6:	6811      	ldr	r1, [r2, #0]
    7ba8:	f041 0101 	orr.w	r1, r1, #1
    7bac:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7bae:	f852 1c20 	ldr.w	r1, [r2, #-32]
    7bb2:	f041 0102 	orr.w	r1, r1, #2
    7bb6:	f842 1c20 	str.w	r1, [r2, #-32]


static void dma_enable(void)
{
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    7bba:	4a08      	ldr	r2, [pc, #32]	; (7bdc <dio_ssp_start+0x40>)
    7bbc:	6811      	ldr	r1, [r2, #0]
    7bbe:	f041 0101 	orr.w	r1, r1, #1
    7bc2:	6011      	str	r1, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    7bc4:	4a06      	ldr	r2, [pc, #24]	; (7be0 <dio_ssp_start+0x44>)
    7bc6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7bca:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;

	dma_enable();

	/* activate slave select pin */
	DIO_SSEL_CLR;
    7bcc:	4a05      	ldr	r2, [pc, #20]	; (7be4 <dio_ssp_start+0x48>)
    7bce:	6013      	str	r3, [r2, #0]
    7bd0:	4770      	bx	lr
    7bd2:	bf00      	nop
    7bd4:	2009c098 	.word	0x2009c098
    7bd8:	40030024 	.word	0x40030024
    7bdc:	50004110 	.word	0x50004110
    7be0:	e000e100 	.word	0xe000e100
    7be4:	2009c09c 	.word	0x2009c09c

00007be8 <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    7be8:	4b08      	ldr	r3, [pc, #32]	; (7c0c <dio_ssp_stop+0x24>)
    7bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7bee:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7bf0:	4b07      	ldr	r3, [pc, #28]	; (7c10 <dio_ssp_stop+0x28>)
    7bf2:	681a      	ldr	r2, [r3, #0]
    7bf4:	f022 0201 	bic.w	r2, r2, #1
    7bf8:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    7bfa:	f853 2c20 	ldr.w	r2, [r3, #-32]
    7bfe:	f022 0202 	bic.w	r2, r2, #2
    7c02:	f843 2c20 	str.w	r2, [r3, #-32]

	dma_disable();
    7c06:	f7ff bf05 	b.w	7a14 <dma_disable>
    7c0a:	bf00      	nop
    7c0c:	2009c098 	.word	0x2009c098
    7c10:	40030024 	.word	0x40030024

00007c14 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    7c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c18:	b096      	sub	sp, #88	; 0x58
    7c1a:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    7c1c:	2315      	movs	r3, #21
    7c1e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	txbuf[1] = 0; // request
    7c22:	2300      	movs	r3, #0
    7c24:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    7c28:	4681      	mov	r9, r0

	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
    7c2a:	233a      	movs	r3, #58	; 0x3a
    7c2c:	f107 0058 	add.w	r0, r7, #88	; 0x58
    7c30:	f840 3d58 	str.w	r3, [r0, #-88]!
	iap_entry(command, result);
    7c34:	4b94      	ldr	r3, [pc, #592]	; (7e88 <cc2400_rangetest+0x274>)
    7c36:	4638      	mov	r0, r7
    7c38:	f107 0114 	add.w	r1, r7, #20
    7c3c:	681b      	ldr	r3, [r3, #0]
    7c3e:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    7c40:	7d3a      	ldrb	r2, [r7, #20]
    7c42:	46ea      	mov	sl, sp
    7c44:	2a00      	cmp	r2, #0
    7c46:	f040 811b 	bne.w	7e80 <cc2400_rangetest+0x26c>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    7c4a:	69bb      	ldr	r3, [r7, #24]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7c4c:	2012      	movs	r0, #18
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    7c4e:	0e19      	lsrs	r1, r3, #24
    7c50:	f887 1042 	strb.w	r1, [r7, #66]	; 0x42
	txbuf[3] = (result[1] >> 16) & 0xFF;
    7c54:	0c19      	lsrs	r1, r3, #16
    7c56:	f887 1043 	strb.w	r1, [r7, #67]	; 0x43
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
    7c5a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    7c5e:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    7c60:	69fb      	ldr	r3, [r7, #28]
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    7c62:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    7c66:	0e19      	lsrs	r1, r3, #24
    7c68:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	txbuf[7] = (result[2] >> 16) & 0xFF;
    7c6c:	0c19      	lsrs	r1, r3, #16
    7c6e:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
    7c72:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    7c76:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    7c78:	6a3b      	ldr	r3, [r7, #32]
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    7c7a:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    7c7e:	0e19      	lsrs	r1, r3, #24
    7c80:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[11] = (result[3] >> 16) & 0xFF;
    7c84:	0c19      	lsrs	r1, r3, #16
    7c86:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
    7c8a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    7c8e:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    7c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    7c92:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    7c96:	0e19      	lsrs	r1, r3, #24
    7c98:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[15] = (result[4] >> 16) & 0xFF;
    7c9c:	0c19      	lsrs	r1, r3, #16
    7c9e:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[16] = (result[4] >> 8) & 0xFF;
    7ca2:	0a19      	lsrs	r1, r3, #8
    7ca4:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[17] = result[4] & 0xFF;
    7ca8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7cac:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
    7cb0:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
    7cb2:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
	txbuf[19] = 0; // request number
    7cb6:	f887 2053 	strb.w	r2, [r7, #83]	; 0x53
	txbuf[20] = 0xff; // reply pa
    7cba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	txbuf[21] = 0xff; // reply number
    7cbe:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7cc2:	f000 fd78 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    7cc6:	2014      	movs	r0, #20
    7cc8:	f241 314b 	movw	r1, #4939	; 0x134b
    7ccc:	f000 fd73 	bl	87b6 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    7cd0:	2020      	movs	r0, #32
    7cd2:	f640 51f1 	movw	r1, #3569	; 0xdf1
    7cd6:	f000 fd6e 	bl	87b6 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    7cda:	f8b9 1000 	ldrh.w	r1, [r9]
    7cde:	2002      	movs	r0, #2
    7ce0:	b289      	uxth	r1, r1
    7ce2:	f000 fd68 	bl	87b6 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    7ce6:	202d      	movs	r0, #45	; 0x2d
    7ce8:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    7cec:	f000 fd63 	bl	87b6 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    7cf0:	202c      	movs	r0, #44	; 0x2c
    7cf2:	f241 5184 	movw	r1, #5508	; 0x1584
    7cf6:	f000 fd5e 	bl	87b6 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    7cfa:	2005      	movs	r0, #5
    7cfc:	2108      	movs	r1, #8
    7cfe:	f000 fd5a 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    7d02:	2003      	movs	r0, #3
    7d04:	2129      	movs	r1, #41	; 0x29
    7d06:	f000 fd56 	bl	87b6 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7d0a:	f000 fe25 	bl	8958 <cc2400_status>
    7d0e:	0646      	lsls	r6, r0, #25
    7d10:	d5fb      	bpl.n	7d0a <cc2400_rangetest+0xf6>
	cc2400_strobe(SFSON);
    7d12:	2061      	movs	r0, #97	; 0x61
    7d14:	f000 fe27 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7d18:	f000 fe1e 	bl	8958 <cc2400_status>
    7d1c:	0745      	lsls	r5, r0, #29
    7d1e:	d5fb      	bpl.n	7d18 <cc2400_rangetest+0x104>
	TXLED_SET;
    7d20:	4b5a      	ldr	r3, [pc, #360]	; (7e8c <cc2400_rangetest+0x278>)
    7d22:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d26:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7d28:	2280      	movs	r2, #128	; 0x80
    7d2a:	621a      	str	r2, [r3, #32]
#endif
	for (pa = 0; pa < 8; pa++) {
    7d2c:	2400      	movs	r4, #0
		cc2400_set(FREND, 8 | pa);
    7d2e:	2005      	movs	r0, #5
    7d30:	f044 0108 	orr.w	r1, r4, #8
    7d34:	f000 fd3f 	bl	87b6 <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7d38:	2500      	movs	r5, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
    7d3a:	f887 4052 	strb.w	r4, [r7, #82]	; 0x52
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
    7d3e:	f887 5053 	strb.w	r5, [r7, #83]	; 0x53
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7d42:	200e      	movs	r0, #14
    7d44:	f000 fd2e 	bl	87a4 <cc2400_get>
    7d48:	f000 001f 	and.w	r0, r0, #31
    7d4c:	280f      	cmp	r0, #15
    7d4e:	d1f8      	bne.n	7d42 <cc2400_rangetest+0x12e>
    7d50:	2600      	movs	r6, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    7d52:	f107 0840 	add.w	r8, r7, #64	; 0x40
    7d56:	f818 1006 	ldrb.w	r1, [r8, r6]
    7d5a:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7d5c:	3601      	adds	r6, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    7d5e:	f000 fd65 	bl	882c <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7d62:	2e16      	cmp	r6, #22
    7d64:	d1f5      	bne.n	7d52 <cc2400_rangetest+0x13e>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    7d66:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7d68:	3501      	adds	r5, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    7d6a:	f000 fdfc 	bl	8966 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7d6e:	2d10      	cmp	r5, #16
    7d70:	d1e5      	bne.n	7d3e <cc2400_rangetest+0x12a>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    7d72:	3401      	adds	r4, #1
    7d74:	b2e4      	uxtb	r4, r4
    7d76:	2c08      	cmp	r4, #8
    7d78:	d1d9      	bne.n	7d2e <cc2400_rangetest+0x11a>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7d7a:	200e      	movs	r0, #14
    7d7c:	f000 fd12 	bl	87a4 <cc2400_get>
    7d80:	f000 001f 	and.w	r0, r0, #31
    7d84:	280f      	cmp	r0, #15
    7d86:	d1f8      	bne.n	7d7a <cc2400_rangetest+0x166>
	TXLED_CLR;
    7d88:	4b41      	ldr	r3, [pc, #260]	; (7e90 <cc2400_rangetest+0x27c>)
    7d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d8e:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    7d90:	2064      	movs	r0, #100	; 0x64
    7d92:	f000 fde8 	bl	8966 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7d96:	f000 fddf 	bl	8958 <cc2400_status>
    7d9a:	0744      	lsls	r4, r0, #29
    7d9c:	d4fb      	bmi.n	7d96 <cc2400_rangetest+0x182>
	cc2400_set(FSDIV, *chan_ptr - 1);
    7d9e:	f8b9 1000 	ldrh.w	r1, [r9]
    7da2:	2002      	movs	r0, #2
    7da4:	b289      	uxth	r1, r1
    7da6:	3901      	subs	r1, #1
    7da8:	b289      	uxth	r1, r1
    7daa:	f000 fd04 	bl	87b6 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7dae:	f000 fdd3 	bl	8958 <cc2400_status>
    7db2:	0640      	lsls	r0, r0, #25
    7db4:	d5fb      	bpl.n	7dae <cc2400_rangetest+0x19a>
	cc2400_strobe(SFSON);
    7db6:	2061      	movs	r0, #97	; 0x61
    7db8:	f000 fdd5 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7dbc:	f000 fdcc 	bl	8958 <cc2400_status>
    7dc0:	0741      	lsls	r1, r0, #29
    7dc2:	d5fb      	bpl.n	7dbc <cc2400_rangetest+0x1a8>
	RXLED_SET;
    7dc4:	4b31      	ldr	r3, [pc, #196]	; (7e8c <cc2400_rangetest+0x278>)
    7dc6:	2210      	movs	r2, #16
    7dc8:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7dca:	200e      	movs	r0, #14
    7dcc:	f000 fcea 	bl	87a4 <cc2400_get>
    7dd0:	f000 001f 	and.w	r0, r0, #31
    7dd4:	280f      	cmp	r0, #15
    7dd6:	d1f8      	bne.n	7dca <cc2400_rangetest+0x1b6>
		cc2400_strobe(SRX);
    7dd8:	2062      	movs	r0, #98	; 0x62
    7dda:	f000 fdc4 	bl	8966 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    7dde:	f000 fdbb 	bl	8958 <cc2400_status>
    7de2:	06c2      	lsls	r2, r0, #27
    7de4:	d5fb      	bpl.n	7dde <cc2400_rangetest+0x1ca>
		USRLED_SET;
    7de6:	4b29      	ldr	r3, [pc, #164]	; (7e8c <cc2400_rangetest+0x278>)
    7de8:	2202      	movs	r2, #2
    7dea:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    7dec:	2400      	movs	r4, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
    7dee:	2070      	movs	r0, #112	; 0x70
    7df0:	f000 fce6 	bl	87c0 <cc2400_get8>
    7df4:	f107 0528 	add.w	r5, r7, #40	; 0x28
    7df8:	5528      	strb	r0, [r5, r4]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    7dfa:	3401      	adds	r4, #1
    7dfc:	2c16      	cmp	r4, #22
    7dfe:	d1f6      	bne.n	7dee <cc2400_rangetest+0x1da>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    7e00:	f000 fdaa 	bl	8958 <cc2400_status>
    7e04:	0703      	lsls	r3, r0, #28
    7e06:	d402      	bmi.n	7e0e <cc2400_rangetest+0x1fa>
			break;
		USRLED_CLR;
    7e08:	2202      	movs	r2, #2
    7e0a:	4b21      	ldr	r3, [pc, #132]	; (7e90 <cc2400_rangetest+0x27c>)
    7e0c:	e7dc      	b.n	7dc8 <cc2400_rangetest+0x1b4>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7e0e:	200e      	movs	r0, #14
    7e10:	f000 fcc8 	bl	87a4 <cc2400_get>
    7e14:	f000 001f 	and.w	r0, r0, #31
    7e18:	280f      	cmp	r0, #15
    7e1a:	d1f8      	bne.n	7e0e <cc2400_rangetest+0x1fa>
	cc2400_strobe(SRFOFF);
    7e1c:	2064      	movs	r0, #100	; 0x64
    7e1e:	f000 fda2 	bl	8966 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7e22:	f000 fd99 	bl	8958 <cc2400_status>
    7e26:	f000 0004 	and.w	r0, r0, #4
    7e2a:	f000 03ff 	and.w	r3, r0, #255	; 0xff
    7e2e:	2800      	cmp	r0, #0
    7e30:	d1f7      	bne.n	7e22 <cc2400_rangetest+0x20e>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    7e32:	4a18      	ldr	r2, [pc, #96]	; (7e94 <cc2400_rangetest+0x280>)
    7e34:	2180      	movs	r1, #128	; 0x80
    7e36:	6011      	str	r1, [r2, #0]
#endif
	RXLED_CLR;
    7e38:	2110      	movs	r1, #16
    7e3a:	f842 1c20 	str.w	r1, [r2, #-32]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    7e3e:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
    7e42:	4a15      	ldr	r2, [pc, #84]	; (7e98 <cc2400_rangetest+0x284>)
    7e44:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
    7e46:	7050      	strb	r0, [r2, #1]
	rr.request_num = rxbuf[19];
    7e48:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    7e4c:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
    7e50:	7090      	strb	r0, [r2, #2]
	rr.reply_pa    = rxbuf[20];
    7e52:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
    7e56:	70d0      	strb	r0, [r2, #3]
	rr.reply_num   = rxbuf[21];
    7e58:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    7e5c:	7110      	strb	r0, [r2, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
    7e5e:	5cec      	ldrb	r4, [r5, r3]
    7e60:	f818 0003 	ldrb.w	r0, [r8, r3]
    7e64:	4284      	cmp	r4, r0
    7e66:	bf18      	it	ne
    7e68:	1c99      	addne	r1, r3, #2
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    7e6a:	f103 0301 	add.w	r3, r3, #1
    7e6e:	bf18      	it	ne
    7e70:	b2c9      	uxtbne	r1, r1
    7e72:	2b12      	cmp	r3, #18
    7e74:	d1f3      	bne.n	7e5e <cc2400_rangetest+0x24a>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    7e76:	4b06      	ldr	r3, [pc, #24]	; (7e90 <cc2400_rangetest+0x27c>)
    7e78:	7011      	strb	r1, [r2, #0]
    7e7a:	2202      	movs	r2, #2
    7e7c:	601a      	str	r2, [r3, #0]
    7e7e:	46d5      	mov	sp, sl
#endif
}
    7e80:	3758      	adds	r7, #88	; 0x58
    7e82:	46bd      	mov	sp, r7
    7e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e88:	0000a680 	.word	0x0000a680
    7e8c:	2009c038 	.word	0x2009c038
    7e90:	2009c03c 	.word	0x2009c03c
    7e94:	2009c05c 	.word	0x2009c05c
    7e98:	1000151c 	.word	0x1000151c

00007e9c <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    7e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e9e:	b087      	sub	sp, #28
    7ea0:	4607      	mov	r7, r0
	u8 pa = 0;
	u8 buf[len];

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    7ea2:	2012      	movs	r0, #18
    7ea4:	f642 3122 	movw	r1, #11042	; 0x2b22
    7ea8:	f000 fc85 	bl	87b6 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    7eac:	2014      	movs	r0, #20
    7eae:	f241 314b 	movw	r1, #4939	; 0x134b
    7eb2:	f000 fc80 	bl	87b6 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    7eb6:	8839      	ldrh	r1, [r7, #0]
    7eb8:	2002      	movs	r0, #2
    7eba:	b289      	uxth	r1, r1
    7ebc:	3901      	subs	r1, #1
    7ebe:	b289      	uxth	r1, r1
    7ec0:	f000 fc79 	bl	87b6 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    7ec4:	202d      	movs	r0, #45	; 0x2d
    7ec6:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    7eca:	f000 fc74 	bl	87b6 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    7ece:	202c      	movs	r0, #44	; 0x2c
    7ed0:	f241 5184 	movw	r1, #5508	; 0x1584
    7ed4:	f000 fc6f 	bl	87b6 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    7ed8:	2005      	movs	r0, #5
    7eda:	2108      	movs	r1, #8
    7edc:	f000 fc6b 	bl	87b6 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7ee0:	2003      	movs	r0, #3
    7ee2:	2129      	movs	r1, #41	; 0x29
    7ee4:	f000 fc67 	bl	87b6 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7ee8:	f000 fd36 	bl	8958 <cc2400_status>
    7eec:	0643      	lsls	r3, r0, #25
    7eee:	d5fb      	bpl.n	7ee8 <cc2400_repeater+0x4c>
		cc2400_strobe(SFSON);
    7ef0:	2061      	movs	r0, #97	; 0x61
    7ef2:	f000 fd38 	bl	8966 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7ef6:	f000 fd2f 	bl	8958 <cc2400_status>
    7efa:	0746      	lsls	r6, r0, #29
    7efc:	d5fb      	bpl.n	7ef6 <cc2400_repeater+0x5a>
		RXLED_SET;
    7efe:	4b41      	ldr	r3, [pc, #260]	; (8004 <cc2400_repeater+0x168>)
    7f00:	2210      	movs	r2, #16
    7f02:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    7f04:	f44f 7280 	mov.w	r2, #256	; 0x100
    7f08:	605a      	str	r2, [r3, #4]
		USRLED_CLR;
    7f0a:	2202      	movs	r2, #2
    7f0c:	605a      	str	r2, [r3, #4]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    7f0e:	2280      	movs	r2, #128	; 0x80
    7f10:	621a      	str	r2, [r3, #32]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7f12:	200e      	movs	r0, #14
    7f14:	f000 fc46 	bl	87a4 <cc2400_get>
    7f18:	f000 001f 	and.w	r0, r0, #31
    7f1c:	280f      	cmp	r0, #15
    7f1e:	d1f8      	bne.n	7f12 <cc2400_repeater+0x76>
			USRLED_CLR;
    7f20:	4b39      	ldr	r3, [pc, #228]	; (8008 <cc2400_repeater+0x16c>)
    7f22:	2202      	movs	r2, #2
    7f24:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    7f26:	2062      	movs	r0, #98	; 0x62
    7f28:	f000 fd1d 	bl	8966 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    7f2c:	f000 fd14 	bl	8958 <cc2400_status>
    7f30:	06c5      	lsls	r5, r0, #27
    7f32:	d5fb      	bpl.n	7f2c <cc2400_repeater+0x90>
			USRLED_SET;
    7f34:	4b33      	ldr	r3, [pc, #204]	; (8004 <cc2400_repeater+0x168>)
    7f36:	2202      	movs	r2, #2
    7f38:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    7f3a:	2400      	movs	r4, #0
				buf[i] = cc2400_get8(FIFOREG);
    7f3c:	2070      	movs	r0, #112	; 0x70
    7f3e:	f000 fc3f 	bl	87c0 <cc2400_get8>
    7f42:	f80d 0004 	strb.w	r0, [sp, r4]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    7f46:	3401      	adds	r4, #1
    7f48:	2c16      	cmp	r4, #22
    7f4a:	d1f7      	bne.n	7f3c <cc2400_repeater+0xa0>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    7f4c:	f000 fd04 	bl	8958 <cc2400_status>
    7f50:	0704      	lsls	r4, r0, #28
    7f52:	d5de      	bpl.n	7f12 <cc2400_repeater+0x76>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
    7f54:	4b2c      	ldr	r3, [pc, #176]	; (8008 <cc2400_repeater+0x16c>)
    7f56:	2202      	movs	r2, #2
    7f58:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    7f5a:	2210      	movs	r2, #16
    7f5c:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    7f5e:	2064      	movs	r0, #100	; 0x64
    7f60:	f000 fd01 	bl	8966 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7f64:	f000 fcf8 	bl	8958 <cc2400_status>
    7f68:	0740      	lsls	r0, r0, #29
    7f6a:	d4fb      	bmi.n	7f64 <cc2400_repeater+0xc8>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7f6c:	f000 fcf4 	bl	8958 <cc2400_status>
    7f70:	0641      	lsls	r1, r0, #25
    7f72:	d5fb      	bpl.n	7f6c <cc2400_repeater+0xd0>
		cc2400_set(FSDIV, *chan_ptr);
    7f74:	8839      	ldrh	r1, [r7, #0]
    7f76:	2002      	movs	r0, #2
    7f78:	b289      	uxth	r1, r1
    7f7a:	f000 fc1c 	bl	87b6 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7f7e:	f000 fceb 	bl	8958 <cc2400_status>
    7f82:	0642      	lsls	r2, r0, #25
    7f84:	d5fb      	bpl.n	7f7e <cc2400_repeater+0xe2>
		cc2400_strobe(SFSON);
    7f86:	2061      	movs	r0, #97	; 0x61
    7f88:	f000 fced 	bl	8966 <cc2400_strobe>
		TXLED_SET;
    7f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004 <cc2400_repeater+0x168>)
    7f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7f92:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    7f94:	2315      	movs	r3, #21
    7f96:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    7f9a:	2301      	movs	r3, #1
    7f9c:	f88d 3001 	strb.w	r3, [sp, #1]
		for (pa = 0; pa < 8; pa++) {
    7fa0:	2400      	movs	r4, #0
			cc2400_set(FREND, 8 | pa);
    7fa2:	2005      	movs	r0, #5
    7fa4:	f044 0108 	orr.w	r1, r4, #8
    7fa8:	f000 fc05 	bl	87b6 <cc2400_set>
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7fac:	2500      	movs	r5, #0
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
    7fae:	f88d 4014 	strb.w	r4, [sp, #20]
			for (i = 0; i < 16; i++) {
				buf[21] = i;
    7fb2:	f88d 5015 	strb.w	r5, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7fb6:	200e      	movs	r0, #14
    7fb8:	f000 fbf4 	bl	87a4 <cc2400_get>
    7fbc:	f000 001f 	and.w	r0, r0, #31
    7fc0:	280f      	cmp	r0, #15
    7fc2:	d1f8      	bne.n	7fb6 <cc2400_repeater+0x11a>
    7fc4:	2600      	movs	r6, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    7fc6:	f81d 1006 	ldrb.w	r1, [sp, r6]
    7fca:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7fcc:	3601      	adds	r6, #1
					cc2400_set8(FIFOREG, buf[j]);
    7fce:	f000 fc2d 	bl	882c <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7fd2:	2e16      	cmp	r6, #22
    7fd4:	d1f7      	bne.n	7fc6 <cc2400_repeater+0x12a>
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    7fd6:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7fd8:	3501      	adds	r5, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    7fda:	f000 fcc4 	bl	8966 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7fde:	2d10      	cmp	r5, #16
    7fe0:	d1e7      	bne.n	7fb2 <cc2400_repeater+0x116>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    7fe2:	3401      	adds	r4, #1
    7fe4:	b2e4      	uxtb	r4, r4
    7fe6:	2c08      	cmp	r4, #8
    7fe8:	d1db      	bne.n	7fa2 <cc2400_repeater+0x106>
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    7fea:	4b07      	ldr	r3, [pc, #28]	; (8008 <cc2400_repeater+0x16c>)
    7fec:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ff0:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    7ff2:	2064      	movs	r0, #100	; 0x64
    7ff4:	f000 fcb7 	bl	8966 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7ff8:	f000 fcae 	bl	8958 <cc2400_status>
    7ffc:	0743      	lsls	r3, r0, #29
    7ffe:	d4fb      	bmi.n	7ff8 <cc2400_repeater+0x15c>
    8000:	e74f      	b.n	7ea2 <cc2400_repeater+0x6>
    8002:	bf00      	nop
    8004:	2009c038 	.word	0x2009c038
    8008:	2009c03c 	.word	0x2009c03c

0000800c <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    800c:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    800e:	7803      	ldrb	r3, [r0, #0]
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8010:	460d      	mov	r5, r1
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8012:	b123      	cbz	r3, 801e <cc2400_txtest+0x12>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8014:	7803      	ldrb	r3, [r0, #0]
    8016:	2b01      	cmp	r3, #1
    8018:	d12f      	bne.n	807a <cc2400_txtest+0x6e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    801a:	2440      	movs	r4, #64	; 0x40
    801c:	e000      	b.n	8020 <cc2400_txtest+0x14>
void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    801e:	2429      	movs	r4, #41	; 0x29
		mdmctrl = 0x0040; // 250 kHz frequency deviation
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    8020:	2012      	movs	r0, #18
    8022:	f642 3122 	movw	r1, #11042	; 0x2b22
    8026:	f000 fbc6 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    802a:	2014      	movs	r0, #20
    802c:	f243 314b 	movw	r1, #13131	; 0x334b
    8030:	f000 fbc1 	bl	87b6 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    8034:	2020      	movs	r0, #32
    8036:	f640 51f1 	movw	r1, #3569	; 0xdf1
    803a:	f000 fbbc 	bl	87b6 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    803e:	8829      	ldrh	r1, [r5, #0]
    8040:	2002      	movs	r0, #2
    8042:	b289      	uxth	r1, r1
    8044:	f000 fbb7 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    8048:	2003      	movs	r0, #3
    804a:	4621      	mov	r1, r4
    804c:	f000 fbb3 	bl	87b6 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8050:	f000 fc82 	bl	8958 <cc2400_status>
    8054:	0641      	lsls	r1, r0, #25
    8056:	d5fb      	bpl.n	8050 <cc2400_txtest+0x44>
	cc2400_strobe(SFSON);
    8058:	2061      	movs	r0, #97	; 0x61
    805a:	f000 fc84 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    805e:	f000 fc7b 	bl	8958 <cc2400_status>
    8062:	0742      	lsls	r2, r0, #29
    8064:	d5fb      	bpl.n	805e <cc2400_txtest+0x52>
	TXLED_SET;
    8066:	4b05      	ldr	r3, [pc, #20]	; (807c <cc2400_txtest+0x70>)
    8068:	f44f 7280 	mov.w	r2, #256	; 0x100
    806c:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    806e:	2063      	movs	r0, #99	; 0x63
    8070:	f000 fc79 	bl	8966 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8074:	4b02      	ldr	r3, [pc, #8]	; (8080 <cc2400_txtest+0x74>)
    8076:	2280      	movs	r2, #128	; 0x80
    8078:	601a      	str	r2, [r3, #0]
    807a:	bd38      	pop	{r3, r4, r5, pc}
    807c:	2009c038 	.word	0x2009c038
    8080:	2009c058 	.word	0x2009c058

00008084 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    8084:	4b04      	ldr	r3, [pc, #16]	; (8098 <ssp_stop+0x14>)
    8086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    808a:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    808c:	4b03      	ldr	r3, [pc, #12]	; (809c <ssp_stop+0x18>)
    808e:	681a      	ldr	r2, [r3, #0]
    8090:	f022 0202 	bic.w	r2, r2, #2
    8094:	601a      	str	r2, [r3, #0]
    8096:	4770      	bx	lr
    8098:	2009c098 	.word	0x2009c098
    809c:	40030004 	.word	0x40030004

000080a0 <do_rx>:
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    80a0:	2300      	movs	r3, #0
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    80a2:	4a05      	ldr	r2, [pc, #20]	; (80b8 <do_rx+0x18>)
    80a4:	6812      	ldr	r2, [r2, #0]
    80a6:	0752      	lsls	r2, r2, #29
    80a8:	d5fb      	bpl.n	80a2 <do_rx+0x2>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    80aa:	4a04      	ldr	r2, [pc, #16]	; (80bc <do_rx+0x1c>)
    80ac:	6812      	ldr	r2, [r2, #0]
    80ae:	54c2      	strb	r2, [r0, r3]
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    80b0:	3301      	adds	r3, #1
    80b2:	2b24      	cmp	r3, #36	; 0x24
    80b4:	d1f5      	bne.n	80a2 <do_rx+0x2>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    80b6:	4770      	bx	lr
    80b8:	4003000c 	.word	0x4003000c
    80bc:	40030008 	.word	0x40030008

000080c0 <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    80c0:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    80c2:	4b08      	ldr	r3, [pc, #32]	; (80e4 <sleep_ms+0x24>)
    80c4:	4a08      	ldr	r2, [pc, #32]	; (80e8 <sleep_ms+0x28>)
    80c6:	681b      	ldr	r3, [r3, #0]
    80c8:	6812      	ldr	r2, [r2, #0]
    80ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    80ce:	f640 4435 	movw	r4, #3125	; 0xc35
    80d2:	fb04 2303 	mla	r3, r4, r3, r2
    80d6:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    80d8:	f242 7310 	movw	r3, #10000	; 0x2710
    80dc:	4359      	muls	r1, r3
    80de:	60c1      	str	r1, [r0, #12]
    80e0:	bd10      	pop	{r4, pc}
    80e2:	bf00      	nop
    80e4:	1000105c 	.word	0x1000105c
    80e8:	40004008 	.word	0x40004008

000080ec <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    80ec:	4b0b      	ldr	r3, [pc, #44]	; (811c <sleep_elapsed+0x30>)
    80ee:	4a0c      	ldr	r2, [pc, #48]	; (8120 <sleep_elapsed+0x34>)
    80f0:	681b      	ldr	r3, [r3, #0]
    80f2:	6812      	ldr	r2, [r2, #0]
    80f4:	f640 4135 	movw	r1, #3125	; 0xc35
    80f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    80fc:	fb01 2303 	mla	r3, r1, r3, r2
	if (now < state->sleep_start)
    8100:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    8102:	68c0      	ldr	r0, [r0, #12]
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
	if (now < state->sleep_start)
    8104:	4293      	cmp	r3, r2
		now += 3276800000;
    8106:	bf3c      	itt	cc
    8108:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    810c:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    8110:	1a9b      	subs	r3, r3, r2
}
    8112:	4283      	cmp	r3, r0
    8114:	bf34      	ite	cc
    8116:	2000      	movcc	r0, #0
    8118:	2001      	movcs	r0, #1
    811a:	4770      	bx	lr
    811c:	1000105c 	.word	0x1000105c
    8120:	40004008 	.word	0x40004008

00008124 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    8124:	4770      	bx	lr
    8126:	0000      	movs	r0, r0

00008128 <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    8128:	2300      	movs	r3, #0
    812a:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    812c:	4b03      	ldr	r3, [pc, #12]	; (813c <init_state+0x14>)
    812e:	f640 1268 	movw	r2, #2408	; 0x968
    8132:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    8134:	2301      	movs	r3, #1
    8136:	7003      	strb	r3, [r0, #0]
    8138:	4770      	bx	lr
    813a:	bf00      	nop
    813c:	1000044c 	.word	0x1000044c

00008140 <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    8140:	2301      	movs	r3, #1
    8142:	7003      	strb	r3, [r0, #0]
    8144:	4770      	bx	lr
    8146:	0000      	movs	r0, r0

00008148 <start_rf_state>:
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    8148:	b510      	push	{r4, lr}
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    814a:	f647 71ff 	movw	r1, #32767	; 0x7fff
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    814e:	4604      	mov	r4, r0
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    8150:	200d      	movs	r0, #13
    8152:	f000 fb30 	bl	87b6 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8156:	2012      	movs	r0, #18
    8158:	f642 3122 	movw	r1, #11042	; 0x2b22
    815c:	f000 fb2b 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8160:	2014      	movs	r0, #20
    8162:	f241 314b 	movw	r1, #4939	; 0x134b
    8166:	f000 fb26 	bl	87b6 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    816a:	2020      	movs	r0, #32
    816c:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8170:	f000 fb21 	bl	87b6 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8174:	4b1e      	ldr	r3, [pc, #120]	; (81f0 <start_rf_state+0xa8>)
    8176:	2002      	movs	r0, #2
    8178:	8819      	ldrh	r1, [r3, #0]
    817a:	b289      	uxth	r1, r1
    817c:	3901      	subs	r1, #1
    817e:	b289      	uxth	r1, r1
    8180:	f000 fb19 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8184:	2003      	movs	r0, #3
    8186:	2126      	movs	r1, #38	; 0x26
    8188:	f000 fb15 	bl	87b6 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    818c:	2021      	movs	r0, #33	; 0x21
    818e:	2103      	movs	r1, #3
    8190:	f000 fb11 	bl	87b6 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    8194:	202d      	movs	r0, #45	; 0x2d
    8196:	f246 310f 	movw	r1, #25359	; 0x630f
    819a:	f000 fb0c 	bl	87b6 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    819e:	202c      	movs	r0, #44	; 0x2c
    81a0:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    81a4:	f000 fb07 	bl	87b6 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    81a8:	f000 fbd6 	bl	8958 <cc2400_status>
    81ac:	0640      	lsls	r0, r0, #25
    81ae:	d5fb      	bpl.n	81a8 <start_rf_state+0x60>
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    81b0:	4a10      	ldr	r2, [pc, #64]	; (81f4 <start_rf_state+0xac>)
    81b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    81b6:	6013      	str	r3, [r2, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    81b8:	4a0f      	ldr	r2, [pc, #60]	; (81f8 <start_rf_state+0xb0>)

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    81ba:	2061      	movs	r0, #97	; 0x61
static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    81bc:	6811      	ldr	r1, [r2, #0]
    81be:	f041 0102 	orr.w	r1, r1, #2
    81c2:	6011      	str	r1, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    81c4:	4a0d      	ldr	r2, [pc, #52]	; (81fc <start_rf_state+0xb4>)
    81c6:	6013      	str	r3, [r2, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    81c8:	f000 fbcd 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    81cc:	f000 fbc4 	bl	8958 <cc2400_status>
    81d0:	0741      	lsls	r1, r0, #29
    81d2:	d5fb      	bpl.n	81cc <start_rf_state+0x84>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    81d4:	200e      	movs	r0, #14
    81d6:	f000 fae5 	bl	87a4 <cc2400_get>
    81da:	f000 001f 	and.w	r0, r0, #31
    81de:	280f      	cmp	r0, #15
    81e0:	d1f8      	bne.n	81d4 <start_rf_state+0x8c>

	cc2400_strobe(SRX);
    81e2:	2062      	movs	r0, #98	; 0x62
    81e4:	f000 fbbf 	bl	8966 <cc2400_strobe>
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
    81e8:	2302      	movs	r3, #2
    81ea:	7023      	strb	r3, [r4, #0]
    81ec:	bd10      	pop	{r4, pc}
    81ee:	bf00      	nop
    81f0:	1000044c 	.word	0x1000044c
    81f4:	2009c098 	.word	0x2009c098
    81f8:	40030004 	.word	0x40030004
    81fc:	2009c09c 	.word	0x2009c09c

00008200 <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    8200:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    8202:	f647 71ff 	movw	r1, #32767	; 0x7fff
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    8206:	4604      	mov	r4, r0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    8208:	200d      	movs	r0, #13
    820a:	f000 fad4 	bl	87b6 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    820e:	2012      	movs	r0, #18
    8210:	f642 3122 	movw	r1, #11042	; 0x2b22
    8214:	f000 facf 	bl	87b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8218:	2014      	movs	r0, #20
    821a:	f243 314b 	movw	r1, #13131	; 0x334b
    821e:	f000 faca 	bl	87b6 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8222:	2020      	movs	r0, #32
    8224:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8228:	f000 fac5 	bl	87b6 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    822c:	4b1a      	ldr	r3, [pc, #104]	; (8298 <start_jamming_state+0x98>)
    822e:	2002      	movs	r0, #2
    8230:	8819      	ldrh	r1, [r3, #0]
    8232:	b289      	uxth	r1, r1
    8234:	f000 fabf 	bl	87b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8238:	2003      	movs	r0, #3
    823a:	2126      	movs	r1, #38	; 0x26
    823c:	f000 fabb 	bl	87b6 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8240:	2021      	movs	r0, #33	; 0x21
    8242:	2103      	movs	r1, #3
    8244:	f000 fab7 	bl	87b6 <cc2400_set>
	cc2400_set(FREND, 0xf);
    8248:	2005      	movs	r0, #5
    824a:	210f      	movs	r1, #15
    824c:	f000 fab3 	bl	87b6 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8250:	f000 fb82 	bl	8958 <cc2400_status>
    8254:	0642      	lsls	r2, r0, #25
    8256:	d5fb      	bpl.n	8250 <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    8258:	2061      	movs	r0, #97	; 0x61
    825a:	f000 fb84 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    825e:	f000 fb7b 	bl	8958 <cc2400_status>
    8262:	0743      	lsls	r3, r0, #29
    8264:	d5fb      	bpl.n	825e <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8266:	200e      	movs	r0, #14
    8268:	f000 fa9c 	bl	87a4 <cc2400_get>
    826c:	f000 001f 	and.w	r0, r0, #31
    8270:	280f      	cmp	r0, #15
    8272:	d1f8      	bne.n	8266 <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8274:	4b09      	ldr	r3, [pc, #36]	; (829c <start_jamming_state+0x9c>)
    8276:	2280      	movs	r2, #128	; 0x80
    8278:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    827a:	2063      	movs	r0, #99	; 0x63
    827c:	f000 fb73 	bl	8966 <cc2400_strobe>
	TXLED_SET;
    8280:	4b07      	ldr	r3, [pc, #28]	; (82a0 <start_jamming_state+0xa0>)
    8282:	f44f 7280 	mov.w	r2, #256	; 0x100
    8286:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    8288:	2305      	movs	r3, #5
    828a:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    828c:	69a3      	ldr	r3, [r4, #24]
    828e:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8290:	f644 6320 	movw	r3, #20000	; 0x4e20
    8294:	60e3      	str	r3, [r4, #12]
    8296:	bd10      	pop	{r4, pc}
    8298:	1000044c 	.word	0x1000044c
    829c:	2009c058 	.word	0x2009c058
    82a0:	2009c038 	.word	0x2009c038

000082a4 <sleep_state>:
		ssp_stop();
		state->timer_active = 1;
	}
}

static void sleep_state(ego_fsm_state_t *state) {
    82a4:	b510      	push	{r4, lr}
    82a6:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    82a8:	f7ff ff20 	bl	80ec <sleep_elapsed>
    82ac:	b1b0      	cbz	r0, 82dc <sleep_state+0x38>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    82ae:	6863      	ldr	r3, [r4, #4]
    82b0:	1c5a      	adds	r2, r3, #1
    82b2:	4b0b      	ldr	r3, [pc, #44]	; (82e0 <sleep_state+0x3c>)
    82b4:	4013      	ands	r3, r2
    82b6:	2b00      	cmp	r3, #0
    82b8:	da03      	bge.n	82c2 <sleep_state+0x1e>
    82ba:	3b01      	subs	r3, #1
    82bc:	f063 0303 	orn	r3, r3, #3
    82c0:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    82c2:	4a08      	ldr	r2, [pc, #32]	; (82e4 <sleep_state+0x40>)
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    82c4:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    82c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    82ca:	4b07      	ldr	r3, [pc, #28]	; (82e8 <sleep_state+0x44>)

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    82cc:	4620      	mov	r0, r4
    82ce:	2107      	movs	r1, #7

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
		channel = channels[state->channel_index];
    82d0:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    82d2:	f7ff fef5 	bl	80c0 <sleep_ms>
		state->timer_active = 1;
    82d6:	2301      	movs	r3, #1
    82d8:	6123      	str	r3, [r4, #16]

		state->state = EGO_ST_START_RX;
    82da:	7023      	strb	r3, [r4, #0]
    82dc:	bd10      	pop	{r4, pc}
    82de:	bf00      	nop
    82e0:	80000003 	.word	0x80000003
    82e4:	0000a62c 	.word	0x0000a62c
    82e8:	1000044c 	.word	0x1000044c

000082ec <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    82ec:	b510      	push	{r4, lr}
    82ee:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    82f0:	f7ff fefc 	bl	80ec <sleep_elapsed>
    82f4:	b130      	cbz	r0, 8304 <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    82f6:	2301      	movs	r3, #1
    82f8:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    82fa:	6123      	str	r3, [r4, #16]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    82fc:	69a3      	ldr	r3, [r4, #24]
    82fe:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8300:	4b01      	ldr	r3, [pc, #4]	; (8308 <jam_sleep_state+0x1c>)
    8302:	60e3      	str	r3, [r4, #12]
    8304:	bd10      	pop	{r4, pc}
    8306:	bf00      	nop
    8308:	0001adb0 	.word	0x0001adb0

0000830c <jamming_state>:

	state->state = EGO_ST_JAMMING;
	sleep_ms_anchor(state, 2);
}

void jamming_state(ego_fsm_state_t *state) {
    830c:	b510      	push	{r4, lr}
    830e:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8310:	f7ff feec 	bl	80ec <sleep_elapsed>
    8314:	b300      	cbz	r0, 8358 <jamming_state+0x4c>
		cc2400_strobe(SRFOFF);
    8316:	2064      	movs	r0, #100	; 0x64
    8318:	f000 fb25 	bl	8966 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    831c:	4b0f      	ldr	r3, [pc, #60]	; (835c <jamming_state+0x50>)
    831e:	2280      	movs	r2, #128	; 0x80
    8320:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    8322:	f44f 7280 	mov.w	r2, #256	; 0x100
    8326:	f843 2c20 	str.w	r2, [r3, #-32]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    832a:	6863      	ldr	r3, [r4, #4]
    832c:	1c5a      	adds	r2, r3, #1
    832e:	4b0c      	ldr	r3, [pc, #48]	; (8360 <jamming_state+0x54>)
    8330:	4013      	ands	r3, r2
    8332:	2b00      	cmp	r3, #0
    8334:	da03      	bge.n	833e <jamming_state+0x32>
    8336:	3b01      	subs	r3, #1
    8338:	f063 0303 	orn	r3, r3, #3
    833c:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    833e:	4a09      	ldr	r2, [pc, #36]	; (8364 <jamming_state+0x58>)
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    8340:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    8342:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    8346:	4b08      	ldr	r3, [pc, #32]	; (8368 <jamming_state+0x5c>)
    8348:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    834a:	2303      	movs	r3, #3
    834c:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    834e:	69a3      	ldr	r3, [r4, #24]
    8350:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8352:	f64e 2360 	movw	r3, #60000	; 0xea60
    8356:	60e3      	str	r3, [r4, #12]
    8358:	bd10      	pop	{r4, pc}
    835a:	bf00      	nop
    835c:	2009c05c 	.word	0x2009c05c
    8360:	80000003 	.word	0x80000003
    8364:	0000a62c 	.word	0x0000a62c
    8368:	1000044c 	.word	0x1000044c

0000836c <continuous_cap_state>:
// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
    836c:	b510      	push	{r4, lr}
    836e:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    8370:	2100      	movs	r1, #0
    8372:	2228      	movs	r2, #40	; 0x28
    8374:	4668      	mov	r0, sp
    8376:	f7fb ff5b 	bl	4230 <memset>
		.rxtime = CLK100NS,
    837a:	4b17      	ldr	r3, [pc, #92]	; (83d8 <continuous_cap_state+0x6c>)
    837c:	4a17      	ldr	r2, [pc, #92]	; (83dc <continuous_cap_state+0x70>)
    837e:	681b      	ldr	r3, [r3, #0]
    8380:	6812      	ldr	r2, [r2, #0]
    8382:	f640 4135 	movw	r1, #3125	; 0xc35
    8386:	f3c3 0313 	ubfx	r3, r3, #0, #20
    838a:	fb01 2303 	mla	r3, r1, r3, r2
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    838e:	9309      	str	r3, [sp, #36]	; 0x24
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    8390:	f000 fae2 	bl	8958 <cc2400_status>
static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    8394:	06c0      	lsls	r0, r0, #27
    8396:	d51d      	bpl.n	83d4 <continuous_cap_state+0x68>
		RXLED_SET;
    8398:	4b11      	ldr	r3, [pc, #68]	; (83e0 <continuous_cap_state+0x74>)
    839a:	2410      	movs	r4, #16
    839c:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    839e:	4668      	mov	r0, sp
    83a0:	f7ff fe7e 	bl	80a0 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    83a4:	2006      	movs	r0, #6
    83a6:	4669      	mov	r1, sp
    83a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    83aa:	f7fc fe23 	bl	4ff4 <enqueue_with_ts>
		RXLED_CLR;
    83ae:	4b0d      	ldr	r3, [pc, #52]	; (83e4 <continuous_cap_state+0x78>)

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    83b0:	2061      	movs	r0, #97	; 0x61

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    83b2:	601c      	str	r4, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    83b4:	f000 fad7 	bl	8966 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    83b8:	f000 face 	bl	8958 <cc2400_status>
    83bc:	0741      	lsls	r1, r0, #29
    83be:	d5fb      	bpl.n	83b8 <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    83c0:	200e      	movs	r0, #14
    83c2:	f000 f9ef 	bl	87a4 <cc2400_get>
    83c6:	f000 001f 	and.w	r0, r0, #31
    83ca:	280f      	cmp	r0, #15
    83cc:	d1f8      	bne.n	83c0 <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    83ce:	2062      	movs	r0, #98	; 0x62
    83d0:	f000 fac9 	bl	8966 <cc2400_strobe>
	}
}
    83d4:	b00a      	add	sp, #40	; 0x28
    83d6:	bd10      	pop	{r4, pc}
    83d8:	1000105c 	.word	0x1000105c
    83dc:	40004008 	.word	0x40004008
    83e0:	2009c038 	.word	0x2009c038
    83e4:	2009c03c 	.word	0x2009c03c

000083e8 <jam_cap_state>:

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
    83e8:	b510      	push	{r4, lr}
    83ea:	4604      	mov	r4, r0
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    83ec:	f000 fab4 	bl	8958 <cc2400_status>
	}
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
    83f0:	06c3      	lsls	r3, r0, #27
    83f2:	d50e      	bpl.n	8412 <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
    83f4:	2304      	movs	r3, #4
    83f6:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    83f8:	2301      	movs	r3, #1
    83fa:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    83fc:	4b11      	ldr	r3, [pc, #68]	; (8444 <jam_cap_state+0x5c>)
    83fe:	4a12      	ldr	r2, [pc, #72]	; (8448 <jam_cap_state+0x60>)
    8400:	681b      	ldr	r3, [r3, #0]
    8402:	6812      	ldr	r2, [r2, #0]
    8404:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8408:	f640 4135 	movw	r1, #3125	; 0xc35
    840c:	fb01 2303 	mla	r3, r1, r3, r2
    8410:	61a3      	str	r3, [r4, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    8412:	6923      	ldr	r3, [r4, #16]
    8414:	b15b      	cbz	r3, 842e <jam_cap_state+0x46>
    8416:	4620      	mov	r0, r4
    8418:	f7ff fe68 	bl	80ec <sleep_elapsed>
    841c:	b138      	cbz	r0, 842e <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    841e:	2304      	movs	r3, #4
    8420:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    8422:	2300      	movs	r3, #0
    8424:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    8426:	4620      	mov	r0, r4
    8428:	210b      	movs	r1, #11
    842a:	f7ff fe49 	bl	80c0 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    842e:	7823      	ldrb	r3, [r4, #0]
    8430:	2b02      	cmp	r3, #2
    8432:	d006      	beq.n	8442 <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    8434:	2064      	movs	r0, #100	; 0x64
    8436:	f000 fa96 	bl	8966 <cc2400_strobe>
		ssp_stop();
	}
}
    843a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
		cc2400_strobe(SRFOFF);
		ssp_stop();
    843e:	f7ff be21 	b.w	8084 <ssp_stop>
    8442:	bd10      	pop	{r4, pc}
    8444:	1000105c 	.word	0x1000105c
    8448:	40004008 	.word	0x40004008

0000844c <cap_state>:
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    844c:	b530      	push	{r4, r5, lr}
    844e:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    8450:	2100      	movs	r1, #0
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    8452:	4604      	mov	r4, r0
	ego_packet_t packet = {
    8454:	2228      	movs	r2, #40	; 0x28
    8456:	4668      	mov	r0, sp
    8458:	f7fb feea 	bl	4230 <memset>
		.rxtime = CLK100NS,
    845c:	4b1b      	ldr	r3, [pc, #108]	; (84cc <cap_state+0x80>)
    845e:	4a1c      	ldr	r2, [pc, #112]	; (84d0 <cap_state+0x84>)
    8460:	681b      	ldr	r3, [r3, #0]
    8462:	6812      	ldr	r2, [r2, #0]
    8464:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8468:	f640 4135 	movw	r1, #3125	; 0xc35
    846c:	fb01 2303 	mla	r3, r1, r3, r2
	};

	if (sleep_elapsed(state)) {
    8470:	4620      	mov	r0, r4
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    8472:	9309      	str	r3, [sp, #36]	; 0x24
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    8474:	f7ff fe3a 	bl	80ec <sleep_elapsed>
    8478:	b128      	cbz	r0, 8486 <cap_state+0x3a>
		sleep_ms(state, 4);
    847a:	4620      	mov	r0, r4
    847c:	2104      	movs	r1, #4
    847e:	f7ff fe1f 	bl	80c0 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8482:	2303      	movs	r3, #3
    8484:	7023      	strb	r3, [r4, #0]
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    8486:	f000 fa67 	bl	8958 <cc2400_status>
	if (sleep_elapsed(state)) {
		sleep_ms(state, 4);
		state->state = EGO_ST_SLEEP;
	}

	if (sync_received()) {
    848a:	06c2      	lsls	r2, r0, #27
    848c:	d512      	bpl.n	84b4 <cap_state+0x68>
		RXLED_SET;
    848e:	4b11      	ldr	r3, [pc, #68]	; (84d4 <cap_state+0x88>)
    8490:	2510      	movs	r5, #16
    8492:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    8494:	4668      	mov	r0, sp
    8496:	f7ff fe03 	bl	80a0 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    849a:	4669      	mov	r1, sp
    849c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    849e:	2006      	movs	r0, #6
    84a0:	f7fc fda8 	bl	4ff4 <enqueue_with_ts>
		RXLED_CLR;
    84a4:	4b0c      	ldr	r3, [pc, #48]	; (84d8 <cap_state+0x8c>)

		sleep_ms(state, 6);
    84a6:	4620      	mov	r0, r4

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    84a8:	601d      	str	r5, [r3, #0]

		sleep_ms(state, 6);
    84aa:	2106      	movs	r1, #6
    84ac:	f7ff fe08 	bl	80c0 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    84b0:	2303      	movs	r3, #3
    84b2:	7023      	strb	r3, [r4, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    84b4:	7823      	ldrb	r3, [r4, #0]
    84b6:	2b02      	cmp	r3, #2
    84b8:	d006      	beq.n	84c8 <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    84ba:	2064      	movs	r0, #100	; 0x64
    84bc:	f000 fa53 	bl	8966 <cc2400_strobe>
		ssp_stop();
    84c0:	f7ff fde0 	bl	8084 <ssp_stop>
		state->timer_active = 1;
    84c4:	2301      	movs	r3, #1
    84c6:	6123      	str	r3, [r4, #16]
	}
}
    84c8:	b00b      	add	sp, #44	; 0x2c
    84ca:	bd30      	pop	{r4, r5, pc}
    84cc:	1000105c 	.word	0x1000105c
    84d0:	40004008 	.word	0x40004008
    84d4:	2009c038 	.word	0x2009c038
    84d8:	2009c03c 	.word	0x2009c03c

000084dc <ego_main>:
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    84dc:	b530      	push	{r4, r5, lr}
    84de:	b089      	sub	sp, #36	; 0x24
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    84e0:	2100      	movs	r1, #0
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    84e2:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    84e4:	221c      	movs	r2, #28
    84e6:	a801      	add	r0, sp, #4
    84e8:	f7fb fea2 	bl	4230 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    84ec:	2c01      	cmp	r4, #1
    84ee:	4d14      	ldr	r5, [pc, #80]	; (8540 <ego_main+0x64>)
    84f0:	d009      	beq.n	8506 <ego_main+0x2a>
    84f2:	d306      	bcc.n	8502 <ego_main+0x26>
    84f4:	2c02      	cmp	r4, #2
    84f6:	d101      	bne.n	84fc <ego_main+0x20>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
			break;
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    84f8:	4c12      	ldr	r4, [pc, #72]	; (8544 <ego_main+0x68>)
			break;
    84fa:	e005      	b.n	8508 <ego_main+0x2c>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    84fc:	2300      	movs	r3, #0
    84fe:	702b      	strb	r3, [r5, #0]
    8500:	e01b      	b.n	853a <ego_main+0x5e>
		jamming_state,
	};

	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
    8502:	4c11      	ldr	r4, [pc, #68]	; (8548 <ego_main+0x6c>)
    8504:	e000      	b.n	8508 <ego_main+0x2c>
			break;
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    8506:	4c11      	ldr	r4, [pc, #68]	; (854c <ego_main+0x70>)
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
}

static void ego_init(void) {
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    8508:	4b11      	ldr	r3, [pc, #68]	; (8550 <ego_main+0x74>)
    850a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    850e:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    8510:	f000 f8c0 	bl	8694 <dio_ssp_init>
	}

	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
    8514:	782b      	ldrb	r3, [r5, #0]
    8516:	2b0d      	cmp	r3, #13
    8518:	d106      	bne.n	8528 <ego_main+0x4c>
			break;
		handler[state.state](&state);
    851a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    851e:	a801      	add	r0, sp, #4
    8520:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    8524:	4798      	blx	r3
	}
    8526:	e7f5      	b.n	8514 <ego_main+0x38>

	dio_ssp_init();
}

static void ego_deinit(void) {
	cc2400_strobe(SRFOFF);
    8528:	2064      	movs	r0, #100	; 0x64
    852a:	f000 fa1c 	bl	8966 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    852e:	f7ff fda9 	bl	8084 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8532:	4b08      	ldr	r3, [pc, #32]	; (8554 <ego_main+0x78>)
    8534:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8538:	601a      	str	r2, [r3, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    853a:	b009      	add	sp, #36	; 0x24
    853c:	bd30      	pop	{r4, r5, pc}
    853e:	bf00      	nop
    8540:	10000e46 	.word	0x10000e46
    8544:	0000a668 	.word	0x0000a668
    8548:	0000a634 	.word	0x0000a634
    854c:	0000a650 	.word	0x0000a650
    8550:	e000e100 	.word	0xe000e100
    8554:	e000e180 	.word	0xe000e180

00008558 <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    8558:	f000 bd18 	b.w	8f8c <USBHwISR>

0000855c <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    855c:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    855e:	2300      	movs	r3, #0
    8560:	4a0c      	ldr	r2, [pc, #48]	; (8594 <Reset_Handler+0x38>)
    8562:	490d      	ldr	r1, [pc, #52]	; (8598 <Reset_Handler+0x3c>)
    8564:	1898      	adds	r0, r3, r2
    8566:	4288      	cmp	r0, r1
    8568:	d204      	bcs.n	8574 <Reset_Handler+0x18>
	{
		*dest++ = *src++;
    856a:	490c      	ldr	r1, [pc, #48]	; (859c <Reset_Handler+0x40>)
    856c:	5859      	ldr	r1, [r3, r1]
    856e:	5099      	str	r1, [r3, r2]
    8570:	3304      	adds	r3, #4
    8572:	e7f5      	b.n	8560 <Reset_Handler+0x4>
{
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    8574:	4b0a      	ldr	r3, [pc, #40]	; (85a0 <Reset_Handler+0x44>)
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    8576:	4a0b      	ldr	r2, [pc, #44]	; (85a4 <Reset_Handler+0x48>)
    8578:	4293      	cmp	r3, r2
    857a:	d203      	bcs.n	8584 <Reset_Handler+0x28>
	{
		*src++ = 0;
    857c:	2200      	movs	r2, #0
    857e:	f843 2b04 	str.w	r2, [r3], #4
    8582:	e7f8      	b.n	8576 <Reset_Handler+0x1a>
	}

	__libc_init_array();
    8584:	f7fb fe26 	bl	41d4 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    8588:	4b07      	ldr	r3, [pc, #28]	; (85a8 <Reset_Handler+0x4c>)
    858a:	4a08      	ldr	r2, [pc, #32]	; (85ac <Reset_Handler+0x50>)
    858c:	601a      	str	r2, [r3, #0]

	main();
    858e:	f7fe fd93 	bl	70b8 <main>
    8592:	e7fe      	b.n	8592 <Reset_Handler+0x36>
    8594:	10000020 	.word	0x10000020
    8598:	10000e14 	.word	0x10000e14
    859c:	0000a6d0 	.word	0x0000a6d0
    85a0:	10000e18 	.word	0x10000e18
    85a4:	100037f8 	.word	0x100037f8
    85a8:	e000ed08 	.word	0xe000ed08
    85ac:	00004000 	.word	0x00004000

000085b0 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    85b0:	e7fe      	b.n	85b0 <ADC_IRQHandler>
    85b2:	0000      	movs	r0, r0

000085b4 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    85b4:	4a04      	ldr	r2, [pc, #16]	; (85c8 <spi_delay+0x14>)
    85b6:	230a      	movs	r3, #10
    85b8:	6013      	str	r3, [r2, #0]
       while (--delay_counter);
    85ba:	6813      	ldr	r3, [r2, #0]
    85bc:	3b01      	subs	r3, #1
    85be:	6013      	str	r3, [r2, #0]
    85c0:	2b00      	cmp	r3, #0
    85c2:	d1fa      	bne.n	85ba <spi_delay+0x6>
}
    85c4:	4770      	bx	lr
    85c6:	bf00      	nop
    85c8:	10000f60 	.word	0x10000f60

000085cc <rbit>:
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
  u32 result = 0;
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    85cc:	fa90 f0a0 	rbit	r0, r0
  return result;
}
    85d0:	4770      	bx	lr
    85d2:	0000      	movs	r0, r0

000085d4 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    85d4:	0883      	lsrs	r3, r0, #2
    85d6:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    85da:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    85de:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    85e2:	eb03 2390 	add.w	r3, r3, r0, lsr #10
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    85e6:	4a05      	ldr	r2, [pc, #20]	; (85fc <wait_us+0x28>)
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    85e8:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    85ec:	6050      	str	r0, [r2, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    85ee:	6853      	ldr	r3, [r2, #4]
    85f0:	3b01      	subs	r3, #1
    85f2:	6053      	str	r3, [r2, #4]
    85f4:	2b00      	cmp	r3, #0
    85f6:	d1fa      	bne.n	85ee <wait_us+0x1a>
}
    85f8:	4770      	bx	lr
    85fa:	bf00      	nop
    85fc:	10000f60 	.word	0x10000f60

00008600 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8600:	4b01      	ldr	r3, [pc, #4]	; (8608 <wait+0x8>)
    8602:	4358      	muls	r0, r3
    8604:	f7ff bfe6 	b.w	85d4 <wait_us>
    8608:	000f4240 	.word	0x000f4240

0000860c <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    860c:	4a10      	ldr	r2, [pc, #64]	; (8650 <all_pins_off+0x44>)
    860e:	2300      	movs	r3, #0
    8610:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    8612:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    8614:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    8616:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    8618:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    861a:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    861c:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    861e:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    8620:	4a0c      	ldr	r2, [pc, #48]	; (8654 <all_pins_off+0x48>)
    8622:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    8624:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    8626:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    8628:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    862a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    862e:	4a0a      	ldr	r2, [pc, #40]	; (8658 <all_pins_off+0x4c>)
    8630:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    8632:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    8634:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    8636:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    8638:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    863a:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    863c:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    863e:	4a07      	ldr	r2, [pc, #28]	; (865c <all_pins_off+0x50>)
    8640:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    8642:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    8644:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    8646:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    8648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    864c:	4770      	bx	lr
    864e:	bf00      	nop
    8650:	4002c000 	.word	0x4002c000
    8654:	2009c000 	.word	0x2009c000
    8658:	4002c040 	.word	0x4002c040
    865c:	2009c014 	.word	0x2009c014

00008660 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    8660:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    8662:	f7ff ffd3 	bl	860c <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    8666:	4a0a      	ldr	r2, [pc, #40]	; (8690 <gpio_init+0x30>)
    8668:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    866a:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    866e:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    8670:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    8672:	f240 11b1 	movw	r1, #433	; 0x1b1
    8676:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    8678:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    867c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    867e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    8682:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    8684:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    8686:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    8688:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    868a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    868e:	bd08      	pop	{r3, pc}
    8690:	2009c000 	.word	0x2009c000

00008694 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    8694:	4b11      	ldr	r3, [pc, #68]	; (86dc <dio_ssp_init+0x48>)
    8696:	681a      	ldr	r2, [r3, #0]
    8698:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    869c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    86a0:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    86a2:	681a      	ldr	r2, [r3, #0]
    86a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    86a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    86ac:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    86ae:	681a      	ldr	r2, [r3, #0]
    86b0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    86b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    86b8:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    86ba:	681a      	ldr	r2, [r3, #0]
    86bc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    86c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    86c4:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    86c6:	4b06      	ldr	r3, [pc, #24]	; (86e0 <dio_ssp_init+0x4c>)
    86c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    86cc:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    86ce:	4b05      	ldr	r3, [pc, #20]	; (86e4 <dio_ssp_init+0x50>)
    86d0:	22c7      	movs	r2, #199	; 0xc7
    86d2:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    86d4:	220c      	movs	r2, #12
    86d6:	605a      	str	r2, [r3, #4]
    86d8:	4770      	bx	lr
    86da:	bf00      	nop
    86dc:	4002c000 	.word	0x4002c000
    86e0:	2009c098 	.word	0x2009c098
    86e4:	40030000 	.word	0x40030000

000086e8 <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    86e8:	4b09      	ldr	r3, [pc, #36]	; (8710 <atest_init+0x28>)
    86ea:	681a      	ldr	r2, [r3, #0]
    86ec:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
    86f0:	601a      	str	r2, [r3, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    86f2:	4b08      	ldr	r3, [pc, #32]	; (8714 <atest_init+0x2c>)
    86f4:	681a      	ldr	r2, [r3, #0]
    86f6:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
    86fa:	601a      	str	r2, [r3, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    86fc:	4b06      	ldr	r3, [pc, #24]	; (8718 <atest_init+0x30>)
    86fe:	681a      	ldr	r2, [r3, #0]
    8700:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    8704:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    8706:	681a      	ldr	r2, [r3, #0]
    8708:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    870c:	601a      	str	r2, [r3, #0]
    870e:	4770      	bx	lr
    8710:	4002c004 	.word	0x4002c004
    8714:	2009c000 	.word	0x2009c000
    8718:	4002c044 	.word	0x4002c044

0000871c <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    871c:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    871e:	2401      	movs	r4, #1
    8720:	1e43      	subs	r3, r0, #1
    8722:	409c      	lsls	r4, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    8724:	2220      	movs	r2, #32

	while (len--) {
    8726:	3801      	subs	r0, #1

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    8728:	4b0d      	ldr	r3, [pc, #52]	; (8760 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    872a:	b2c0      	uxtb	r0, r0
    872c:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    872e:	601a      	str	r2, [r3, #0]
    8730:	4b0c      	ldr	r3, [pc, #48]	; (8764 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    8732:	d011      	beq.n	8758 <cc2400_spi+0x3c>
		if (data & msb)
    8734:	4221      	tst	r1, r4
			MOSI_SET;
		else
			MOSI_CLR;
    8736:	bf08      	it	eq
    8738:	4d09      	ldreq	r5, [pc, #36]	; (8760 <cc2400_spi+0x44>)
    873a:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
		if (data & msb)
			MOSI_SET;
    873e:	bf14      	ite	ne
    8740:	601a      	strne	r2, [r3, #0]
		else
			MOSI_CLR;
    8742:	602a      	streq	r2, [r5, #0]
		data <<= 1;

		SCLK_SET;
    8744:	2210      	movs	r2, #16
    8746:	601a      	str	r2, [r3, #0]
		if (MISO)
    8748:	4b07      	ldr	r3, [pc, #28]	; (8768 <cc2400_spi+0x4c>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    874a:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    874c:	681b      	ldr	r3, [r3, #0]
    874e:	079b      	lsls	r3, r3, #30
			data |= 1;
    8750:	bf48      	it	mi
    8752:	f041 0101 	orrmi.w	r1, r1, #1
    8756:	e7e6      	b.n	8726 <cc2400_spi+0xa>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    8758:	2220      	movs	r2, #32
    875a:	601a      	str	r2, [r3, #0]

	return data;
}
    875c:	4608      	mov	r0, r1
    875e:	bd30      	pop	{r4, r5, pc}
    8760:	2009c05c 	.word	0x2009c05c
    8764:	2009c058 	.word	0x2009c058
    8768:	2009c054 	.word	0x2009c054

0000876c <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    876c:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    876e:	4c0a      	ldr	r4, [pc, #40]	; (8798 <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    8770:	f7ff ffba 	bl	86e8 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    8774:	f44f 7300 	mov.w	r3, #512	; 0x200
    8778:	6023      	str	r3, [r4, #0]
	wait_us(50);
    877a:	2032      	movs	r0, #50	; 0x32
    877c:	f7ff ff2a 	bl	85d4 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    8780:	4b06      	ldr	r3, [pc, #24]	; (879c <cc2400_init+0x30>)
    8782:	2220      	movs	r2, #32
    8784:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    8786:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    878a:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    878c:	2018      	movs	r0, #24
    878e:	4904      	ldr	r1, [pc, #16]	; (87a0 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    8790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8794:	f7ff bfc2 	b.w	871c <cc2400_spi>
    8798:	2009c038 	.word	0x2009c038
    879c:	2009c058 	.word	0x2009c058
    87a0:	000d7fff 	.word	0x000d7fff

000087a4 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    87a4:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    87a6:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    87aa:	0409      	lsls	r1, r1, #16
    87ac:	2018      	movs	r0, #24
    87ae:	f7ff ffb5 	bl	871c <cc2400_spi>
	return in & 0xFFFF;
}
    87b2:	b280      	uxth	r0, r0
    87b4:	bd08      	pop	{r3, pc}

000087b6 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    87b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    87ba:	2018      	movs	r0, #24
    87bc:	f7ff bfae 	b.w	871c <cc2400_spi>

000087c0 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    87c0:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    87c2:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    87c6:	0209      	lsls	r1, r1, #8
    87c8:	2010      	movs	r0, #16
    87ca:	f7ff ffa7 	bl	871c <cc2400_spi>
	return in & 0xFF;
}
    87ce:	b2c0      	uxtb	r0, r0
    87d0:	bd08      	pop	{r3, pc}
    87d2:	0000      	movs	r0, r0

000087d4 <cc2400_get_rev>:

//JWHUR cc2400_get_rev
u8 cc2400_get_rev (u8 reg)
{
    87d4:	b510      	push	{r4, lr}
	u32 out = (reg | 0x80) << 8;
	u32 msb = 1 << 15;
	u8 len = 16;
	CSN_CLR;
    87d6:	4b12      	ldr	r3, [pc, #72]	; (8820 <cc2400_get_rev+0x4c>)
    87d8:	2220      	movs	r2, #32
}

//JWHUR cc2400_get_rev
u8 cc2400_get_rev (u8 reg)
{
	u32 out = (reg | 0x80) << 8;
    87da:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	u32 msb = 1 << 15;
	u8 len = 16;
	CSN_CLR;
    87de:	601a      	str	r2, [r3, #0]
}

//JWHUR cc2400_get_rev
u8 cc2400_get_rev (u8 reg)
{
	u32 out = (reg | 0x80) << 8;
    87e0:	0200      	lsls	r0, r0, #8
	u32 msb = 1 << 15;
	u8 len = 16;
	CSN_CLR;
	while (len--) {
    87e2:	2211      	movs	r2, #17
    87e4:	1e53      	subs	r3, r2, #1
    87e6:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    87ea:	4b0e      	ldr	r3, [pc, #56]	; (8824 <cc2400_get_rev+0x50>)
    87ec:	d014      	beq.n	8818 <cc2400_get_rev+0x44>
		if (out & msb) MOSI_SET;
    87ee:	f410 4f00 	tst.w	r0, #32768	; 0x8000
		else MOSI_CLR;
    87f2:	bf08      	it	eq
    87f4:	4c0a      	ldreq	r4, [pc, #40]	; (8820 <cc2400_get_rev+0x4c>)
    87f6:	f04f 0101 	mov.w	r1, #1
	u32 out = (reg | 0x80) << 8;
	u32 msb = 1 << 15;
	u8 len = 16;
	CSN_CLR;
	while (len--) {
		if (out & msb) MOSI_SET;
    87fa:	bf14      	ite	ne
    87fc:	6019      	strne	r1, [r3, #0]
		else MOSI_CLR;
    87fe:	6021      	streq	r1, [r4, #0]
		out <<= 1;
		SCLK_SET;
    8800:	2110      	movs	r1, #16
    8802:	6019      	str	r1, [r3, #0]
		if (MISO) out |= 1;
    8804:	4b08      	ldr	r3, [pc, #32]	; (8828 <cc2400_get_rev+0x54>)
	u8 len = 16;
	CSN_CLR;
	while (len--) {
		if (out & msb) MOSI_SET;
		else MOSI_CLR;
		out <<= 1;
    8806:	0040      	lsls	r0, r0, #1
		SCLK_SET;
		if (MISO) out |= 1;
    8808:	681b      	ldr	r3, [r3, #0]
    880a:	079c      	lsls	r4, r3, #30
		SCLK_CLR;
    880c:	4b04      	ldr	r3, [pc, #16]	; (8820 <cc2400_get_rev+0x4c>)
	while (len--) {
		if (out & msb) MOSI_SET;
		else MOSI_CLR;
		out <<= 1;
		SCLK_SET;
		if (MISO) out |= 1;
    880e:	bf48      	it	mi
    8810:	f040 0001 	orrmi.w	r0, r0, #1
		SCLK_CLR;
    8814:	6019      	str	r1, [r3, #0]
    8816:	e7e5      	b.n	87e4 <cc2400_get_rev+0x10>
	}
	CSN_SET;
    8818:	2220      	movs	r2, #32
    881a:	601a      	str	r2, [r3, #0]
	return out & 0xFF;
}
    881c:	b2c0      	uxtb	r0, r0
    881e:	bd10      	pop	{r4, pc}
    8820:	2009c05c 	.word	0x2009c05c
    8824:	2009c058 	.word	0x2009c058
    8828:	2009c054 	.word	0x2009c054

0000882c <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    882c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    8830:	2010      	movs	r0, #16
    8832:	f7ff bf73 	b.w	871c <cc2400_spi>
    8836:	0000      	movs	r0, r0

00008838 <cc2400_fifo_write>:
       while (--delay_counter);
}


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    8838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    883a:	4b21      	ldr	r3, [pc, #132]	; (88c0 <cc2400_fifo_write+0x88>)
    883c:	2220      	movs	r2, #32
    883e:	601a      	str	r2, [r3, #0]
    8840:	2308      	movs	r3, #8


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
    8842:	2270      	movs	r2, #112	; 0x70

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    8844:	f012 0f80 	tst.w	r2, #128	; 0x80
    8848:	4d1e      	ldr	r5, [pc, #120]	; (88c4 <cc2400_fifo_write+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    884a:	bf08      	it	eq
    884c:	4e1c      	ldreq	r6, [pc, #112]	; (88c0 <cc2400_fifo_write+0x88>)
    884e:	f04f 0401 	mov.w	r4, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    8852:	bf14      	ite	ne
    8854:	602c      	strne	r4, [r5, #0]
		else
			MOSI_CLR;
    8856:	6034      	streq	r4, [r6, #0]
		reg <<= 1;
		SCLK_SET;
    8858:	2410      	movs	r4, #16
    885a:	602c      	str	r4, [r5, #0]
    885c:	3b01      	subs	r3, #1
		SCLK_CLR;
    885e:	4d18      	ldr	r5, [pc, #96]	; (88c0 <cc2400_fifo_write+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    8860:	0052      	lsls	r2, r2, #1
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8862:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    8866:	b2d2      	uxtb	r2, r2
		SCLK_SET;
		SCLK_CLR;
    8868:	602c      	str	r4, [r5, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    886a:	d1eb      	bne.n	8844 <cc2400_fifo_write+0xc>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    886c:	b2da      	uxtb	r2, r3
    886e:	4282      	cmp	r2, r0
    8870:	d217      	bcs.n	88a2 <cc2400_fifo_write+0x6a>
		temp = data[i];
    8872:	5cca      	ldrb	r2, [r1, r3]
    8874:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
    8876:	f012 0f80 	tst.w	r2, #128	; 0x80
    887a:	4e12      	ldr	r6, [pc, #72]	; (88c4 <cc2400_fifo_write+0x8c>)
				MOSI_SET;
			else
				MOSI_CLR;
    887c:	bf08      	it	eq
    887e:	4f10      	ldreq	r7, [pc, #64]	; (88c0 <cc2400_fifo_write+0x88>)
    8880:	f04f 0501 	mov.w	r5, #1

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
    8884:	bf14      	ite	ne
    8886:	6035      	strne	r5, [r6, #0]
			else
				MOSI_CLR;
    8888:	603d      	streq	r5, [r7, #0]
			temp <<= 1;
			SCLK_SET;
    888a:	2510      	movs	r5, #16
    888c:	6035      	str	r5, [r6, #0]
    888e:	3c01      	subs	r4, #1
			SCLK_CLR;
    8890:	4e0b      	ldr	r6, [pc, #44]	; (88c0 <cc2400_fifo_write+0x88>)
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    8892:	0052      	lsls	r2, r2, #1
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    8894:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    8898:	b2d2      	uxtb	r2, r2
			SCLK_SET;
			SCLK_CLR;
    889a:	6035      	str	r5, [r6, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    889c:	d1eb      	bne.n	8876 <cc2400_fifo_write+0x3e>
    889e:	3301      	adds	r3, #1
    88a0:	e7e4      	b.n	886c <cc2400_fifo_write+0x34>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    88a2:	2308      	movs	r3, #8
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    88a4:	4c07      	ldr	r4, [pc, #28]	; (88c4 <cc2400_fifo_write+0x8c>)
		SCLK_CLR;
    88a6:	4906      	ldr	r1, [pc, #24]	; (88c0 <cc2400_fifo_write+0x88>)
    88a8:	3b01      	subs	r3, #1
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    88aa:	2210      	movs	r2, #16
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    88ac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		SCLK_SET;
    88b0:	6022      	str	r2, [r4, #0]
		SCLK_CLR;
    88b2:	600a      	str	r2, [r1, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    88b4:	d1f6      	bne.n	88a4 <cc2400_fifo_write+0x6c>
		SCLK_SET;
		SCLK_CLR;
	}
	
	spi_delay();
    88b6:	f7ff fe7d 	bl	85b4 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    88ba:	2320      	movs	r3, #32
    88bc:	6023      	str	r3, [r4, #0]
    88be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88c0:	2009c05c 	.word	0x2009c05c
    88c4:	2009c058 	.word	0x2009c058

000088c8 <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    88c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    88cc:	4b20      	ldr	r3, [pc, #128]	; (8950 <cc2400_fifo_read+0x88>)
    88ce:	2220      	movs	r2, #32
    88d0:	601a      	str	r2, [r3, #0]
	/* end transaction by raising CSN */
	CSN_SET;
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    88d2:	4607      	mov	r7, r0
    88d4:	4688      	mov	r8, r1
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    88d6:	2508      	movs	r5, #8
/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
	u8 msb = 1 << 7;
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;
    88d8:	23f0      	movs	r3, #240	; 0xf0

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    88da:	f013 0f80 	tst.w	r3, #128	; 0x80
    88de:	491d      	ldr	r1, [pc, #116]	; (8954 <cc2400_fifo_read+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    88e0:	bf08      	it	eq
    88e2:	481b      	ldreq	r0, [pc, #108]	; (8950 <cc2400_fifo_read+0x88>)
    88e4:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    88e8:	bf14      	ite	ne
    88ea:	600a      	strne	r2, [r1, #0]
		else
			MOSI_CLR;
    88ec:	6002      	streq	r2, [r0, #0]
		reg <<= 1;
		SCLK_SET;
    88ee:	2210      	movs	r2, #16
    88f0:	600a      	str	r2, [r1, #0]
    88f2:	3d01      	subs	r5, #1
		SCLK_CLR;
    88f4:	4916      	ldr	r1, [pc, #88]	; (8950 <cc2400_fifo_read+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    88f6:	005b      	lsls	r3, r3, #1
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    88f8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    88fc:	b2db      	uxtb	r3, r3
		SCLK_SET;
		SCLK_CLR;
    88fe:	600a      	str	r2, [r1, #0]
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8900:	d1eb      	bne.n	88da <cc2400_fifo_read+0x12>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    8902:	b2eb      	uxtb	r3, r5
    8904:	42bb      	cmp	r3, r7
    8906:	d21b      	bcs.n	8940 <cc2400_fifo_read+0x78>
    8908:	2608      	movs	r6, #8
    890a:	2400      	movs	r4, #0
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
    890c:	f7ff fe52 	bl	85b4 <spi_delay>
			SCLK_SET;
    8910:	4b10      	ldr	r3, [pc, #64]	; (8954 <cc2400_fifo_read+0x8c>)
    8912:	2210      	movs	r2, #16
    8914:	601a      	str	r2, [r3, #0]
			temp <<= 1;
			if (MISO)
    8916:	3b04      	subs	r3, #4
    8918:	681b      	ldr	r3, [r3, #0]
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    891a:	0064      	lsls	r4, r4, #1
			if (MISO)
    891c:	079b      	lsls	r3, r3, #30
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    891e:	b2e4      	uxtb	r4, r4
			if (MISO)
				temp |= 1;
    8920:	bf48      	it	mi
    8922:	f044 0401 	orrmi.w	r4, r4, #1
    8926:	3e01      	subs	r6, #1
			spi_delay();
    8928:	f7ff fe44 	bl	85b4 <spi_delay>
			SCLK_CLR;
    892c:	4b08      	ldr	r3, [pc, #32]	; (8950 <cc2400_fifo_read+0x88>)
    892e:	2210      	movs	r2, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8930:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
			SCLK_SET;
			temp <<= 1;
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
    8934:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8936:	d1e9      	bne.n	890c <cc2400_fifo_read+0x44>
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
		}
		buf[i] = temp;
    8938:	f808 4005 	strb.w	r4, [r8, r5]
    893c:	3501      	adds	r5, #1
    893e:	e7e0      	b.n	8902 <cc2400_fifo_read+0x3a>
	}

	/* end transaction by raising CSN */
	spi_delay();
    8940:	f7ff fe38 	bl	85b4 <spi_delay>
	CSN_SET;
    8944:	4b03      	ldr	r3, [pc, #12]	; (8954 <cc2400_fifo_read+0x8c>)
    8946:	2220      	movs	r2, #32
    8948:	601a      	str	r2, [r3, #0]
    894a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    894e:	bf00      	nop
    8950:	2009c05c 	.word	0x2009c05c
    8954:	2009c058 	.word	0x2009c058

00008958 <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    8958:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    895a:	2100      	movs	r1, #0
    895c:	2008      	movs	r0, #8
    895e:	f7ff fedd 	bl	871c <cc2400_spi>
}
    8962:	b2c0      	uxtb	r0, r0
    8964:	bd08      	pop	{r3, pc}

00008966 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    8966:	b508      	push	{r3, lr}
    8968:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    896a:	2008      	movs	r0, #8
    896c:	f7ff fed6 	bl	871c <cc2400_spi>
}
    8970:	b2c0      	uxtb	r0, r0
    8972:	bd08      	pop	{r3, pc}

00008974 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    8974:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8976:	2018      	movs	r0, #24
    8978:	2100      	movs	r1, #0
    897a:	f7ff fecf 	bl	871c <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    897e:	2000      	movs	r0, #0
    8980:	f7ff ff10 	bl	87a4 <cc2400_get>
    8984:	2800      	cmp	r0, #0
    8986:	d1fa      	bne.n	897e <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8988:	2018      	movs	r0, #24
    898a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    898e:	f7ff fec5 	bl	871c <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    8992:	2000      	movs	r0, #0
    8994:	f7ff ff06 	bl	87a4 <cc2400_get>
    8998:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    899c:	d1f9      	bne.n	8992 <cc2400_reset+0x1e>
}
    899e:	bd08      	pop	{r3, pc}

000089a0 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    89a0:	b510      	push	{r4, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    89a2:	4b46      	ldr	r3, [pc, #280]	; (8abc <clock_start+0x11c>)
    89a4:	f244 023a 	movw	r2, #16442	; 0x403a
    89a8:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    89aa:	2200      	movs	r2, #0
    89ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    89b0:	3380      	adds	r3, #128	; 0x80
    89b2:	681a      	ldr	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    89b4:	21aa      	movs	r1, #170	; 0xaa

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    89b6:	f022 0202 	bic.w	r2, r2, #2
    89ba:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    89bc:	4a40      	ldr	r2, [pc, #256]	; (8ac0 <clock_start+0x120>)
    89be:	6011      	str	r1, [r2, #0]
    89c0:	2155      	movs	r1, #85	; 0x55
    89c2:	6011      	str	r1, [r2, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    89c4:	4a3f      	ldr	r2, [pc, #252]	; (8ac4 <clock_start+0x124>)
    89c6:	6812      	ldr	r2, [r2, #0]
    89c8:	0190      	lsls	r0, r2, #6
    89ca:	d4fb      	bmi.n	89c4 <clock_start+0x24>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    89cc:	681a      	ldr	r2, [r3, #0]
    89ce:	f022 0201 	bic.w	r2, r2, #1
    89d2:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    89d4:	4b3a      	ldr	r3, [pc, #232]	; (8ac0 <clock_start+0x120>)
    89d6:	22aa      	movs	r2, #170	; 0xaa
    89d8:	601a      	str	r2, [r3, #0]
    89da:	2255      	movs	r2, #85	; 0x55
    89dc:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    89de:	4b39      	ldr	r3, [pc, #228]	; (8ac4 <clock_start+0x124>)
    89e0:	681b      	ldr	r3, [r3, #0]
    89e2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    89e6:	d1fa      	bne.n	89de <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    89e8:	4a37      	ldr	r2, [pc, #220]	; (8ac8 <clock_start+0x128>)
    89ea:	6013      	str	r3, [r2, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    89ec:	f7ff ffc2 	bl	8974 <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    89f0:	2018      	movs	r0, #24
    89f2:	4936      	ldr	r1, [pc, #216]	; (8acc <clock_start+0x12c>)
    89f4:	f7ff fe92 	bl	871c <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    89f8:	2060      	movs	r0, #96	; 0x60
    89fa:	f7ff ffb4 	bl	8966 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    89fe:	f7ff ffab 	bl	8958 <cc2400_status>
    8a02:	0641      	lsls	r1, r0, #25
    8a04:	d5fb      	bpl.n	89fe <clock_start+0x5e>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    8a06:	4b32      	ldr	r3, [pc, #200]	; (8ad0 <clock_start+0x130>)
    8a08:	2220      	movs	r2, #32
    8a0a:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    8a0c:	681a      	ldr	r2, [r3, #0]
    8a0e:	0652      	lsls	r2, r2, #25
    8a10:	d5fc      	bpl.n	8a0c <clock_start+0x6c>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    8a12:	4b30      	ldr	r3, [pc, #192]	; (8ad4 <clock_start+0x134>)
    8a14:	2208      	movs	r2, #8
    8a16:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    8a18:	2200      	movs	r2, #0
    8a1a:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    8a1c:	2201      	movs	r2, #1
    8a1e:	f843 2c9c 	str.w	r2, [r3, #-156]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    8a22:	4a2d      	ldr	r2, [pc, #180]	; (8ad8 <clock_start+0x138>)
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
#endif
	PCLKSEL1  = 0;

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    8a24:	3b9c      	subs	r3, #156	; 0x9c

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    8a26:	f843 2c88 	str.w	r2, [r3, #-136]
	PLL0FEED_SEQUENCE;
    8a2a:	21aa      	movs	r1, #170	; 0xaa
    8a2c:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    8a2e:	482b      	ldr	r0, [pc, #172]	; (8adc <clock_start+0x13c>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    8a30:	f843 1c80 	str.w	r1, [r3, #-128]
    8a34:	f843 2c80 	str.w	r2, [r3, #-128]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    8a38:	6804      	ldr	r4, [r0, #0]
    8a3a:	f044 0401 	orr.w	r4, r4, #1
    8a3e:	6004      	str	r4, [r0, #0]
	PLL0FEED_SEQUENCE;
    8a40:	f843 1c80 	str.w	r1, [r3, #-128]
    8a44:	f843 2c80 	str.w	r2, [r3, #-128]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    8a48:	4b1e      	ldr	r3, [pc, #120]	; (8ac4 <clock_start+0x124>)
    8a4a:	681b      	ldr	r3, [r3, #0]
    8a4c:	01db      	lsls	r3, r3, #7
    8a4e:	d5fb      	bpl.n	8a48 <clock_start+0xa8>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    8a50:	4b1d      	ldr	r3, [pc, #116]	; (8ac8 <clock_start+0x128>)
    8a52:	2203      	movs	r2, #3
    8a54:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    8a56:	f853 2c84 	ldr.w	r2, [r3, #-132]
    8a5a:	f042 0202 	orr.w	r2, r2, #2
    8a5e:	f843 2c84 	str.w	r2, [r3, #-132]
	PLL0FEED_SEQUENCE;
    8a62:	22aa      	movs	r2, #170	; 0xaa
    8a64:	f843 2c78 	str.w	r2, [r3, #-120]
    8a68:	2255      	movs	r2, #85	; 0x55
    8a6a:	f843 2c78 	str.w	r2, [r3, #-120]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    8a6e:	4b15      	ldr	r3, [pc, #84]	; (8ac4 <clock_start+0x124>)
    8a70:	681b      	ldr	r3, [r3, #0]
    8a72:	019c      	lsls	r4, r3, #6
    8a74:	d5fb      	bpl.n	8a6e <clock_start+0xce>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    8a76:	4b1a      	ldr	r3, [pc, #104]	; (8ae0 <clock_start+0x140>)
    8a78:	2222      	movs	r2, #34	; 0x22
    8a7a:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    8a7c:	21aa      	movs	r1, #170	; 0xaa
    8a7e:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    8a80:	4818      	ldr	r0, [pc, #96]	; (8ae4 <clock_start+0x144>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    8a82:	6099      	str	r1, [r3, #8]
    8a84:	609a      	str	r2, [r3, #8]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    8a86:	6804      	ldr	r4, [r0, #0]
    8a88:	f044 0401 	orr.w	r4, r4, #1
    8a8c:	6004      	str	r4, [r0, #0]
	PLL1FEED_SEQUENCE;
    8a8e:	6099      	str	r1, [r3, #8]
    8a90:	609a      	str	r2, [r3, #8]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    8a92:	4b15      	ldr	r3, [pc, #84]	; (8ae8 <clock_start+0x148>)
    8a94:	681a      	ldr	r2, [r3, #0]
    8a96:	05d0      	lsls	r0, r2, #23
    8a98:	d5fb      	bpl.n	8a92 <clock_start+0xf2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    8a9a:	681a      	ldr	r2, [r3, #0]
    8a9c:	0551      	lsls	r1, r2, #21
    8a9e:	d5fc      	bpl.n	8a9a <clock_start+0xfa>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    8aa0:	4b10      	ldr	r3, [pc, #64]	; (8ae4 <clock_start+0x144>)
    8aa2:	681a      	ldr	r2, [r3, #0]
    8aa4:	f042 0202 	orr.w	r2, r2, #2
    8aa8:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    8aaa:	22aa      	movs	r2, #170	; 0xaa
    8aac:	60da      	str	r2, [r3, #12]
    8aae:	2255      	movs	r2, #85	; 0x55
    8ab0:	60da      	str	r2, [r3, #12]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    8ab2:	4b0d      	ldr	r3, [pc, #52]	; (8ae8 <clock_start+0x148>)
    8ab4:	681b      	ldr	r3, [r3, #0]
    8ab6:	059a      	lsls	r2, r3, #22
    8ab8:	d5fb      	bpl.n	8ab2 <clock_start+0x112>
}
    8aba:	bd10      	pop	{r4, pc}
    8abc:	400fc000 	.word	0x400fc000
    8ac0:	400fc08c 	.word	0x400fc08c
    8ac4:	400fc088 	.word	0x400fc088
    8ac8:	400fc104 	.word	0x400fc104
    8acc:	00081570 	.word	0x00081570
    8ad0:	400fc1a0 	.word	0x400fc1a0
    8ad4:	400fc1a8 	.word	0x400fc1a8
    8ad8:	00010018 	.word	0x00010018
    8adc:	400fc080 	.word	0x400fc080
    8ae0:	400fc0a4 	.word	0x400fc0a4
    8ae4:	400fc0a0 	.word	0x400fc0a0
    8ae8:	400fc0a8 	.word	0x400fc0a8

00008aec <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    8aec:	b508      	push	{r3, lr}
	gpio_init();
    8aee:	f7ff fdb7 	bl	8660 <gpio_init>
	cc2400_init();
    8af2:	f7ff fe3b 	bl	876c <cc2400_init>
	clock_start();
}
    8af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ubertooth_init()
{
	gpio_init();
	cc2400_init();
	clock_start();
    8afa:	f7ff bf51 	b.w	89a0 <clock_start>
    8afe:	0000      	movs	r0, r0

00008b00 <reset>:
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
}

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    8b00:	b508      	push	{r3, lr}
	all_pins_off();
    8b02:	f7ff fd83 	bl	860c <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    8b06:	4b09      	ldr	r3, [pc, #36]	; (8b2c <reset+0x2c>)
    8b08:	2202      	movs	r2, #2
    8b0a:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    8b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b10:	681a      	ldr	r2, [r3, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8b12:	4807      	ldr	r0, [pc, #28]	; (8b30 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    8b14:	f042 0203 	orr.w	r2, r2, #3
    8b18:	601a      	str	r2, [r3, #0]
	WDFEED_SEQUENCE;
    8b1a:	22aa      	movs	r2, #170	; 0xaa
    8b1c:	609a      	str	r2, [r3, #8]
    8b1e:	2255      	movs	r2, #85	; 0x55
    8b20:	609a      	str	r2, [r3, #8]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    8b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8b26:	f7ff bd55 	b.w	85d4 <wait_us>
    8b2a:	bf00      	nop
    8b2c:	2009c03c 	.word	0x2009c03c
    8b30:	000f4240 	.word	0x000f4240

00008b34 <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8b34:	b530      	push	{r4, r5, lr}
    8b36:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8b38:	2336      	movs	r3, #54	; 0x36
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8b3a:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8b3c:	a80a      	add	r0, sp, #40	; 0x28
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8b3e:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8b40:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8b44:	a905      	add	r1, sp, #20
    8b46:	4668      	mov	r0, sp
    8b48:	4b07      	ldr	r3, [pc, #28]	; (8b68 <get_part_num+0x34>)
    8b4a:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    8b4c:	9b05      	ldr	r3, [sp, #20]
    8b4e:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    8b50:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8b52:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    8b54:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8b56:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    8b58:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    8b5a:	0e1b      	lsrs	r3, r3, #24
    8b5c:	7123      	strb	r3, [r4, #4]
	*len = 5;
    8b5e:	2305      	movs	r3, #5
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    8b60:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	*len = 5;
    8b62:	602b      	str	r3, [r5, #0]
	
}
    8b64:	b00b      	add	sp, #44	; 0x2c
    8b66:	bd30      	pop	{r4, r5, pc}
    8b68:	1fff1ff1 	.word	0x1fff1ff1

00008b6c <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    8b6c:	b530      	push	{r4, r5, lr}
    8b6e:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8b70:	233a      	movs	r3, #58	; 0x3a
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    8b72:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8b74:	a80a      	add	r0, sp, #40	; 0x28
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    8b76:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8b78:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8b7c:	a905      	add	r1, sp, #20
    8b7e:	4668      	mov	r0, sp
    8b80:	4b13      	ldr	r3, [pc, #76]	; (8bd0 <get_device_serial+0x64>)
    8b82:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    8b84:	9b05      	ldr	r3, [sp, #20]
    8b86:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    8b88:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8b8a:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    8b8c:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8b8e:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    8b90:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    8b92:	0e1b      	lsrs	r3, r3, #24
    8b94:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    8b96:	9b07      	ldr	r3, [sp, #28]
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    8b98:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
    8b9a:	0a1a      	lsrs	r2, r3, #8
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
    8b9c:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    8b9e:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    8ba0:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    8ba2:	0e1b      	lsrs	r3, r3, #24
    8ba4:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    8ba6:	9b08      	ldr	r3, [sp, #32]
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
    8ba8:	71e2      	strb	r2, [r4, #7]
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
    8baa:	0a1a      	lsrs	r2, r3, #8
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
    8bac:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    8bae:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    8bb0:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    8bb2:	0e1b      	lsrs	r3, r3, #24
    8bb4:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    8bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
    8bb8:	72e2      	strb	r2, [r4, #11]
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
    8bba:	0a1a      	lsrs	r2, r3, #8
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
    8bbc:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    8bbe:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    8bc0:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    8bc2:	0e1b      	lsrs	r3, r3, #24
    8bc4:	7423      	strb	r3, [r4, #16]
	*len = 17;
    8bc6:	2311      	movs	r3, #17
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
	buffer[15] = (result[4] >> 16) & 0xFF;
    8bc8:	73e2      	strb	r2, [r4, #15]
	buffer[16] = (result[4] >> 24) & 0xFF;
	*len = 17;
    8bca:	602b      	str	r3, [r5, #0]
}
    8bcc:	b00b      	add	sp, #44	; 0x2c
    8bce:	bd30      	pop	{r4, r5, pc}
    8bd0:	1fff1ff1 	.word	0x1fff1ff1

00008bd4 <set_isp>:

void set_isp(void)
{
    8bd4:	b500      	push	{lr}
    8bd6:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    8bd8:	2339      	movs	r3, #57	; 0x39
    8bda:	a80a      	add	r0, sp, #40	; 0x28
    8bdc:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8be0:	a905      	add	r1, sp, #20
    8be2:	4668      	mov	r0, sp
    8be4:	4b02      	ldr	r3, [pc, #8]	; (8bf0 <set_isp+0x1c>)
    8be6:	4798      	blx	r3
}
    8be8:	b00b      	add	sp, #44	; 0x2c
    8bea:	f85d fb04 	ldr.w	pc, [sp], #4
    8bee:	bf00      	nop
    8bf0:	1fff1ff1 	.word	0x1fff1ff1

00008bf4 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    8bf4:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8bf6:	4c08      	ldr	r4, [pc, #32]	; (8c18 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    8bf8:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8bfa:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    8bfc:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8bfe:	2d40      	cmp	r5, #64	; 0x40
    8c00:	bfa8      	it	ge
    8c02:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    8c04:	462a      	mov	r2, r5
    8c06:	f000 f955 	bl	8eb4 <USBHwEPWrite>
	pbData += iChunk;
    8c0a:	6863      	ldr	r3, [r4, #4]
    8c0c:	442b      	add	r3, r5
    8c0e:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    8c10:	6823      	ldr	r3, [r4, #0]
    8c12:	1b5d      	subs	r5, r3, r5
    8c14:	6025      	str	r5, [r4, #0]
    8c16:	bd38      	pop	{r3, r4, r5, pc}
    8c18:	10000f68 	.word	0x10000f68

00008c1c <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    8c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    8c1e:	4b11      	ldr	r3, [pc, #68]	; (8c64 <_HandleRequest.constprop.1+0x48>)
    8c20:	7a1c      	ldrb	r4, [r3, #8]
    8c22:	461d      	mov	r5, r3
    8c24:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    8c28:	2c02      	cmp	r4, #2
    8c2a:	d10d      	bne.n	8c48 <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    8c2c:	2200      	movs	r2, #0
    8c2e:	a902      	add	r1, sp, #8
    8c30:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    8c34:	f103 0008 	add.w	r0, r3, #8
    8c38:	f103 0210 	add.w	r2, r3, #16
    8c3c:	3304      	adds	r3, #4
    8c3e:	f000 fa63 	bl	9108 <USBFilterOsVendorMessage>
    8c42:	b108      	cbz	r0, 8c48 <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    8c44:	9801      	ldr	r0, [sp, #4]
    8c46:	e00a      	b.n	8c5e <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    8c48:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    8c4c:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    8c4e:	b12b      	cbz	r3, 8c5c <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    8c50:	4805      	ldr	r0, [pc, #20]	; (8c68 <_HandleRequest.constprop.1+0x4c>)
    8c52:	f100 0108 	add.w	r1, r0, #8
    8c56:	1f02      	subs	r2, r0, #4
    8c58:	4798      	blx	r3
    8c5a:	e000      	b.n	8c5e <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    8c5c:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    8c5e:	b003      	add	sp, #12
    8c60:	bd30      	pop	{r4, r5, pc}
    8c62:	bf00      	nop
    8c64:	10000f68 	.word	0x10000f68
    8c68:	10000f70 	.word	0x10000f70

00008c6c <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    8c6c:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    8c6e:	2800      	cmp	r0, #0
    8c70:	d14a      	bne.n	8d08 <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    8c72:	f001 0304 	and.w	r3, r1, #4
    8c76:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    8c7a:	4c25      	ldr	r4, [pc, #148]	; (8d10 <USBHandleControlTransfer+0xa4>)
    8c7c:	b30b      	cbz	r3, 8cc2 <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    8c7e:	2208      	movs	r2, #8
    8c80:	f104 0108 	add.w	r1, r4, #8
    8c84:	f000 f946 	bl	8f14 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8c88:	7a22      	ldrb	r2, [r4, #8]
    8c8a:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    8c8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c94:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    8c96:	89e3      	ldrh	r3, [r4, #14]
    8c98:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    8c9a:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    8c9c:	b10b      	cbz	r3, 8ca2 <USBHandleControlTransfer+0x36>
    8c9e:	09d2      	lsrs	r2, r2, #7
    8ca0:	d034      	beq.n	8d0c <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    8ca2:	f7ff ffbb 	bl	8c1c <_HandleRequest.constprop.1>
    8ca6:	b928      	cbnz	r0, 8cb4 <USBHandleControlTransfer+0x48>
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8ca8:	2080      	movs	r0, #128	; 0x80
    8caa:	2101      	movs	r1, #1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8cb0:	f000 b8f4 	b.w	8e9c <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    8cb4:	89e2      	ldrh	r2, [r4, #14]
    8cb6:	6923      	ldr	r3, [r4, #16]
    8cb8:	429a      	cmp	r2, r3
    8cba:	bfd4      	ite	le
    8cbc:	6022      	strle	r2, [r4, #0]
    8cbe:	6023      	strgt	r3, [r4, #0]
    8cc0:	e019      	b.n	8cf6 <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    8cc2:	6822      	ldr	r2, [r4, #0]
    8cc4:	2a00      	cmp	r2, #0
    8cc6:	dd1a      	ble.n	8cfe <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    8cc8:	6861      	ldr	r1, [r4, #4]
    8cca:	f000 f923 	bl	8f14 <USBHwEPRead>
				if (iChunk < 0) {
    8cce:	2800      	cmp	r0, #0
    8cd0:	dbea      	blt.n	8ca8 <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    8cd2:	6863      	ldr	r3, [r4, #4]
    8cd4:	4403      	add	r3, r0
    8cd6:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    8cd8:	6823      	ldr	r3, [r4, #0]
    8cda:	1a18      	subs	r0, r3, r0
    8cdc:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    8cde:	b9a8      	cbnz	r0, 8d0c <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8ce0:	7a23      	ldrb	r3, [r4, #8]
    8ce2:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    8ce6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cec:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    8cee:	f7ff ff95 	bl	8c1c <_HandleRequest.constprop.1>
    8cf2:	2800      	cmp	r0, #0
    8cf4:	d0d8      	beq.n	8ca8 <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    8cfa:	f7ff bf7b 	b.w	8bf4 <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    8cfe:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    8d04:	f000 b906 	b.w	8f14 <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    8d08:	2880      	cmp	r0, #128	; 0x80
    8d0a:	d0f4      	beq.n	8cf6 <USBHandleControlTransfer+0x8a>
    8d0c:	bd10      	pop	{r4, pc}
    8d0e:	bf00      	nop
    8d10:	10000f68 	.word	0x10000f68

00008d14 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    8d14:	4b02      	ldr	r3, [pc, #8]	; (8d20 <USBRegisterRequestHandler+0xc>)
    8d16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8d1a:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    8d1c:	6242      	str	r2, [r0, #36]	; 0x24
    8d1e:	4770      	bx	lr
    8d20:	10000f68 	.word	0x10000f68

00008d24 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    8d24:	4770      	bx	lr
    8d26:	0000      	movs	r0, r0

00008d28 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    8d28:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    8d2a:	4c0e      	ldr	r4, [pc, #56]	; (8d64 <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    8d2c:	f000 f994 	bl	9058 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    8d30:	480d      	ldr	r0, [pc, #52]	; (8d68 <USBInit+0x40>)
    8d32:	f000 f87d 	bl	8e30 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    8d36:	4621      	mov	r1, r4
    8d38:	2000      	movs	r0, #0
    8d3a:	f000 f85f 	bl	8dfc <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    8d3e:	4621      	mov	r1, r4
    8d40:	2080      	movs	r0, #128	; 0x80
    8d42:	f000 f85b 	bl	8dfc <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    8d46:	2000      	movs	r0, #0
    8d48:	2140      	movs	r1, #64	; 0x40
    8d4a:	f000 f83b 	bl	8dc4 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    8d4e:	2080      	movs	r0, #128	; 0x80
    8d50:	2140      	movs	r1, #64	; 0x40
    8d52:	f000 f837 	bl	8dc4 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    8d56:	2000      	movs	r0, #0
    8d58:	4904      	ldr	r1, [pc, #16]	; (8d6c <USBInit+0x44>)
    8d5a:	4a05      	ldr	r2, [pc, #20]	; (8d70 <USBInit+0x48>)
    8d5c:	f7ff ffda 	bl	8d14 <USBRegisterRequestHandler>

	return TRUE;
}
    8d60:	2001      	movs	r0, #1
    8d62:	bd10      	pop	{r4, pc}
    8d64:	00008c6d 	.word	0x00008c6d
    8d68:	00008d25 	.word	0x00008d25
    8d6c:	00009209 	.word	0x00009209
    8d70:	10000f9c 	.word	0x10000f9c

00008d74 <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    8d74:	4b03      	ldr	r3, [pc, #12]	; (8d84 <Wait4DevInt+0x10>)
    8d76:	681b      	ldr	r3, [r3, #0]
    8d78:	4003      	ands	r3, r0
    8d7a:	4283      	cmp	r3, r0
    8d7c:	d1fa      	bne.n	8d74 <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    8d7e:	4b02      	ldr	r3, [pc, #8]	; (8d88 <Wait4DevInt+0x14>)
    8d80:	6018      	str	r0, [r3, #0]
    8d82:	4770      	bx	lr
    8d84:	5000c200 	.word	0x5000c200
    8d88:	5000c208 	.word	0x5000c208

00008d8c <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    8d8c:	4b04      	ldr	r3, [pc, #16]	; (8da0 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8d8e:	0400      	lsls	r0, r0, #16
    8d90:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    8d94:	2230      	movs	r2, #48	; 0x30
    8d96:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8d98:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    8d9a:	2010      	movs	r0, #16
    8d9c:	f7ff bfea 	b.w	8d74 <Wait4DevInt>
    8da0:	5000c208 	.word	0x5000c208

00008da4 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    8da4:	b510      	push	{r4, lr}
    8da6:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8da8:	0424      	lsls	r4, r4, #16
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    // write command code
    USBHwCmd(bCmd);
    8daa:	f7ff ffef 	bl	8d8c <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8dae:	4b04      	ldr	r3, [pc, #16]	; (8dc0 <USBHwCmdWrite+0x1c>)
    8db0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    8db4:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    8db6:	2010      	movs	r0, #16
}
    8db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    8dbc:	f7ff bfda 	b.w	8d74 <Wait4DevInt>
    8dc0:	5000c210 	.word	0x5000c210

00008dc4 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    8dc4:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    8dc6:	f000 040f 	and.w	r4, r0, #15
    8dca:	09c0      	lsrs	r0, r0, #7
    8dcc:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    8dd0:	2201      	movs	r2, #1
    8dd2:	40a2      	lsls	r2, r4
    8dd4:	4b08      	ldr	r3, [pc, #32]	; (8df8 <USBHwEPConfig+0x34>)
    8dd6:	6818      	ldr	r0, [r3, #0]
    8dd8:	4302      	orrs	r2, r0
    8dda:	601a      	str	r2, [r3, #0]
    USBEpIn = idx;
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    8ddc:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    8de0:	605c      	str	r4, [r3, #4]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    8de2:	6099      	str	r1, [r3, #8]
    Wait4DevInt(EP_RLZED);
    8de4:	f7ff ffc6 	bl	8d74 <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8de8:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    8dec:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    8dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8df2:	f7ff bfd7 	b.w	8da4 <USBHwCmdWrite>
    8df6:	bf00      	nop
    8df8:	5000c244 	.word	0x5000c244

00008dfc <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8dfc:	4a0a      	ldr	r2, [pc, #40]	; (8e28 <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    8dfe:	f000 030f 	and.w	r3, r0, #15
    8e02:	09c0      	lsrs	r0, r0, #7

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8e04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    8e08:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    8e0c:	2101      	movs	r1, #1
    8e0e:	fa01 f000 	lsl.w	r0, r1, r0
    8e12:	4b06      	ldr	r3, [pc, #24]	; (8e2c <USBHwRegisterEPIntHandler+0x30>)
    8e14:	681a      	ldr	r2, [r3, #0]
    8e16:	4310      	orrs	r0, r2
    8e18:	6018      	str	r0, [r3, #0]
    USBDevIntEn |= EP_SLOW;
    8e1a:	f853 2c30 	ldr.w	r2, [r3, #-48]
    8e1e:	f042 0204 	orr.w	r2, r2, #4
    8e22:	f843 2c30 	str.w	r2, [r3, #-48]
    8e26:	4770      	bx	lr
    8e28:	10000fa4 	.word	0x10000fa4
    8e2c:	5000c234 	.word	0x5000c234

00008e30 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    8e30:	4b03      	ldr	r3, [pc, #12]	; (8e40 <USBHwRegisterDevIntHandler+0x10>)
    8e32:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    8e34:	4b03      	ldr	r3, [pc, #12]	; (8e44 <USBHwRegisterDevIntHandler+0x14>)
    8e36:	681a      	ldr	r2, [r3, #0]
    8e38:	f042 0208 	orr.w	r2, r2, #8
    8e3c:	601a      	str	r2, [r3, #0]
    8e3e:	4770      	bx	lr
    8e40:	10000fa4 	.word	0x10000fa4
    8e44:	5000c204 	.word	0x5000c204

00008e48 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    8e48:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    8e4c:	20d0      	movs	r0, #208	; 0xd0
    8e4e:	f7ff bfa9 	b.w	8da4 <USBHwCmdWrite>

00008e52 <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    8e52:	1c01      	adds	r1, r0, #0
    8e54:	bf18      	it	ne
    8e56:	2101      	movne	r1, #1
    8e58:	20fe      	movs	r0, #254	; 0xfe
    8e5a:	f7ff bfa3 	b.w	8da4 <USBHwCmdWrite>

00008e5e <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    8e5e:	4601      	mov	r1, r0
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    8e60:	20f3      	movs	r0, #243	; 0xf3
    8e62:	f7ff bf9f 	b.w	8da4 <USBHwCmdWrite>
    8e66:	0000      	movs	r0, r0

00008e68 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    8e68:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    8e6a:	f000 040f 	and.w	r4, r0, #15
    8e6e:	09c0      	lsrs	r0, r0, #7
    8e70:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8e74:	4620      	mov	r0, r4
    8e76:	f7ff ff89 	bl	8d8c <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8e7a:	0424      	lsls	r4, r4, #16
    8e7c:	4b05      	ldr	r3, [pc, #20]	; (8e94 <USBHwEPGetStatus+0x2c>)
    8e7e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    8e82:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    8e84:	2020      	movs	r0, #32
    8e86:	f7ff ff75 	bl	8d74 <Wait4DevInt>
    return USBCmdData;
    8e8a:	4b03      	ldr	r3, [pc, #12]	; (8e98 <USBHwEPGetStatus+0x30>)
    8e8c:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    8e8e:	b2c0      	uxtb	r0, r0
    8e90:	bd10      	pop	{r4, pc}
    8e92:	bf00      	nop
    8e94:	5000c210 	.word	0x5000c210
    8e98:	5000c214 	.word	0x5000c214

00008e9c <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    8e9c:	f000 030f 	and.w	r3, r0, #15
    8ea0:	09c0      	lsrs	r0, r0, #7
    8ea2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    8ea6:	3100      	adds	r1, #0
    8ea8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8eac:	bf18      	it	ne
    8eae:	2101      	movne	r1, #1
    8eb0:	f7ff bf78 	b.w	8da4 <USBHwCmdWrite>

00008eb4 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    8eb4:	b510      	push	{r4, lr}
    U32 idx;
    
    idx = EP2IDX(bEP);
    8eb6:	f000 030f 	and.w	r3, r0, #15
    8eba:	09c0      	lsrs	r0, r0, #7
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    8ebc:	4614      	mov	r4, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    8ebe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    8ec2:	4a11      	ldr	r2, [pc, #68]	; (8f08 <USBHwEPWrite+0x54>)
    8ec4:	009b      	lsls	r3, r3, #2
    8ec6:	f043 0302 	orr.w	r3, r3, #2
    8eca:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    8ecc:	4b0f      	ldr	r3, [pc, #60]	; (8f0c <USBHwEPWrite+0x58>)
    8ece:	601c      	str	r4, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    8ed0:	4b0d      	ldr	r3, [pc, #52]	; (8f08 <USBHwEPWrite+0x54>)
    8ed2:	681a      	ldr	r2, [r3, #0]
    8ed4:	f012 0202 	ands.w	r2, r2, #2
    8ed8:	d00e      	beq.n	8ef8 <USBHwEPWrite+0x44>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    8eda:	788a      	ldrb	r2, [r1, #2]
    8edc:	78cb      	ldrb	r3, [r1, #3]
    8ede:	0412      	lsls	r2, r2, #16
    8ee0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    8ee4:	780b      	ldrb	r3, [r1, #0]
        pbBuf += 4;
    8ee6:	3104      	adds	r1, #4
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    8ee8:	431a      	orrs	r2, r3
    8eea:	f811 3c03 	ldrb.w	r3, [r1, #-3]
    8eee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    8ef2:	4b07      	ldr	r3, [pc, #28]	; (8f10 <USBHwEPWrite+0x5c>)
    8ef4:	601a      	str	r2, [r3, #0]
    8ef6:	e7eb      	b.n	8ed0 <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    8ef8:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    8efa:	f7ff ff47 	bl	8d8c <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    8efe:	20fa      	movs	r0, #250	; 0xfa
    8f00:	f7ff ff44 	bl	8d8c <USBHwCmd>
    
    return iLen;
}
    8f04:	4620      	mov	r0, r4
    8f06:	bd10      	pop	{r4, pc}
    8f08:	5000c228 	.word	0x5000c228
    8f0c:	5000c224 	.word	0x5000c224
    8f10:	5000c21c 	.word	0x5000c21c

00008f14 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    8f14:	b538      	push	{r3, r4, r5, lr}
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    8f16:	f000 030f 	and.w	r3, r0, #15
    8f1a:	09c0      	lsrs	r0, r0, #7
    8f1c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    8f20:	4c14      	ldr	r4, [pc, #80]	; (8f74 <USBHwEPRead+0x60>)
    8f22:	009b      	lsls	r3, r3, #2
    8f24:	f043 0301 	orr.w	r3, r3, #1
    8f28:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    8f2a:	4b13      	ldr	r3, [pc, #76]	; (8f78 <USBHwEPRead+0x64>)
    8f2c:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    8f2e:	051d      	lsls	r5, r3, #20
    8f30:	d5fb      	bpl.n	8f2a <USBHwEPRead+0x16>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    8f32:	055c      	lsls	r4, r3, #21
    8f34:	d51b      	bpl.n	8f6e <USBHwEPRead+0x5a>
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    8f36:	f3c3 0509 	ubfx	r5, r3, #0, #10
    
    // get data
    dwData = 0;
    8f3a:	2300      	movs	r3, #0
    for (i = 0; i < dwLen; i++) {
    8f3c:	461c      	mov	r4, r3
    8f3e:	42ac      	cmp	r4, r5
    8f40:	d00b      	beq.n	8f5a <USBHwEPRead+0x46>
        if ((i % 4) == 0) {
    8f42:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    8f46:	bf04      	itt	eq
    8f48:	4b0c      	ldreq	r3, [pc, #48]	; (8f7c <USBHwEPRead+0x68>)
    8f4a:	681b      	ldreq	r3, [r3, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    8f4c:	b111      	cbz	r1, 8f54 <USBHwEPRead+0x40>
    8f4e:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    8f50:	bf38      	it	cc
    8f52:	550b      	strbcc	r3, [r1, r4]
        }
        dwData >>= 8;
    8f54:	0a1b      	lsrs	r3, r3, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    8f56:	3401      	adds	r4, #1
    8f58:	e7f1      	b.n	8f3e <USBHwEPRead+0x2a>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    8f5a:	4b06      	ldr	r3, [pc, #24]	; (8f74 <USBHwEPRead+0x60>)
    8f5c:	2200      	movs	r2, #0
    8f5e:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    8f60:	f7ff ff14 	bl	8d8c <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    8f64:	20f2      	movs	r0, #242	; 0xf2
    8f66:	f7ff ff11 	bl	8d8c <USBHwCmd>
    
    return dwLen;
    8f6a:	4620      	mov	r0, r4
    8f6c:	bd38      	pop	{r3, r4, r5, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    8f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    8f72:	bd38      	pop	{r3, r4, r5, pc}
    8f74:	5000c228 	.word	0x5000c228
    8f78:	5000c220 	.word	0x5000c220
    8f7c:	5000c218 	.word	0x5000c218

00008f80 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    8f80:	1c01      	adds	r1, r0, #0
    8f82:	bf18      	it	ne
    8f84:	2101      	movne	r1, #1
    8f86:	20d8      	movs	r0, #216	; 0xd8
    8f88:	f7ff bf0c 	b.w	8da4 <USBHwCmdWrite>

00008f8c <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    8f8c:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    8f8e:	4b29      	ldr	r3, [pc, #164]	; (9034 <USBHwISR+0xa8>)
    8f90:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    8f92:	07e1      	lsls	r1, r4, #31
    8f94:	d511      	bpl.n	8fba <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    8f96:	2201      	movs	r2, #1
    8f98:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    8f9a:	4b27      	ldr	r3, [pc, #156]	; (9038 <USBHwISR+0xac>)
    8f9c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    8f9e:	b165      	cbz	r5, 8fba <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8fa0:	20f5      	movs	r0, #245	; 0xf5
    8fa2:	f7ff fef3 	bl	8d8c <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8fa6:	4b25      	ldr	r3, [pc, #148]	; (903c <USBHwISR+0xb0>)
    8fa8:	4a25      	ldr	r2, [pc, #148]	; (9040 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    8faa:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8fac:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    8fae:	f7ff fee1 	bl	8d74 <Wait4DevInt>
    return USBCmdData;
    8fb2:	4b24      	ldr	r3, [pc, #144]	; (9044 <USBHwISR+0xb8>)
    8fb4:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    8fb6:	b2c0      	uxtb	r0, r0
    8fb8:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    8fba:	0722      	lsls	r2, r4, #28
    8fbc:	d517      	bpl.n	8fee <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    8fbe:	4b22      	ldr	r3, [pc, #136]	; (9048 <USBHwISR+0xbc>)
    8fc0:	2208      	movs	r2, #8
    8fc2:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8fc4:	20fe      	movs	r0, #254	; 0xfe
    8fc6:	f7ff fee1 	bl	8d8c <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8fca:	4b1c      	ldr	r3, [pc, #112]	; (903c <USBHwISR+0xb0>)
    8fcc:	4a1f      	ldr	r2, [pc, #124]	; (904c <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    8fce:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8fd0:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    8fd2:	f7ff fecf 	bl	8d74 <Wait4DevInt>
    return USBCmdData;
    8fd6:	4b1b      	ldr	r3, [pc, #108]	; (9044 <USBHwISR+0xb8>)
    8fd8:	6818      	ldr	r0, [r3, #0]
    8fda:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    8fdc:	f010 0f1a 	tst.w	r0, #26
    8fe0:	d005      	beq.n	8fee <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    8fe2:	4b15      	ldr	r3, [pc, #84]	; (9038 <USBHwISR+0xac>)
    8fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8fe6:	b113      	cbz	r3, 8fee <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    8fe8:	f000 0015 	and.w	r0, r0, #21
    8fec:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    8fee:	0763      	lsls	r3, r4, #29
    8ff0:	d51e      	bpl.n	9030 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    8ff2:	4b15      	ldr	r3, [pc, #84]	; (9048 <USBHwISR+0xbc>)
    8ff4:	2204      	movs	r2, #4
    8ff6:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    8ff8:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
    8ffa:	2301      	movs	r3, #1
    8ffc:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    8ffe:	4a14      	ldr	r2, [pc, #80]	; (9050 <USBHwISR+0xc4>)
    9000:	6812      	ldr	r2, [r2, #0]
    9002:	4213      	tst	r3, r2
    9004:	d011      	beq.n	902a <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    9006:	4a13      	ldr	r2, [pc, #76]	; (9054 <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    9008:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    900a:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    900c:	f7ff feb2 	bl	8d74 <Wait4DevInt>
                bEPStat = USBCmdData;
    9010:	4b0c      	ldr	r3, [pc, #48]	; (9044 <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    9012:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    9014:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    9016:	4b08      	ldr	r3, [pc, #32]	; (9038 <USBHwISR+0xac>)
    9018:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    901c:	b12b      	cbz	r3, 902a <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    901e:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    9022:	b2c0      	uxtb	r0, r0
    9024:	f001 011f 	and.w	r1, r1, #31
    9028:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    902a:	3401      	adds	r4, #1
    902c:	2c20      	cmp	r4, #32
    902e:	d1e4      	bne.n	8ffa <USBHwISR+0x6e>
    9030:	bd38      	pop	{r3, r4, r5, pc}
    9032:	bf00      	nop
    9034:	5000c200 	.word	0x5000c200
    9038:	10000fa4 	.word	0x10000fa4
    903c:	5000c210 	.word	0x5000c210
    9040:	00f50200 	.word	0x00f50200
    9044:	5000c214 	.word	0x5000c214
    9048:	5000c208 	.word	0x5000c208
    904c:	00fe0200 	.word	0x00fe0200
    9050:	5000c230 	.word	0x5000c230
    9054:	5000c238 	.word	0x5000c238

00009058 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    9058:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    905a:	4b24      	ldr	r3, [pc, #144]	; (90ec <USBHwInit+0x94>)
    905c:	681a      	ldr	r2, [r3, #0]
    905e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    9062:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    9066:	601a      	str	r2, [r3, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    9068:	f853 2c04 	ldr.w	r2, [r3, #-4]
    906c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    9070:	f042 0210 	orr.w	r2, r2, #16
    9074:	f843 2c04 	str.w	r2, [r3, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    9078:	f853 2c04 	ldr.w	r2, [r3, #-4]
    907c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    9080:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    9084:	f843 2c04 	str.w	r2, [r3, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    9088:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    908c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
    9090:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    9094:	f843 2c0c 	str.w	r2, [r3, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    9098:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    909c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    90a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    90a4:	f843 2c0c 	str.w	r2, [r3, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    90a8:	4b11      	ldr	r3, [pc, #68]	; (90f0 <USBHwInit+0x98>)
    90aa:	681a      	ldr	r2, [r3, #0]
    90ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    90b0:	601a      	str	r2, [r3, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    90b2:	4b10      	ldr	r3, [pc, #64]	; (90f4 <USBHwInit+0x9c>)
    90b4:	681a      	ldr	r2, [r3, #0]
    90b6:	f042 0212 	orr.w	r2, r2, #18
    90ba:	601a      	str	r2, [r3, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    90bc:	4b0e      	ldr	r3, [pc, #56]	; (90f8 <USBHwInit+0xa0>)
    90be:	681a      	ldr	r2, [r3, #0]
    90c0:	0792      	lsls	r2, r2, #30
    90c2:	d5fb      	bpl.n	90bc <USBHwInit+0x64>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    90c4:	681a      	ldr	r2, [r3, #0]
    90c6:	06d0      	lsls	r0, r2, #27
    90c8:	d5fc      	bpl.n	90c4 <USBHwInit+0x6c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    90ca:	4b0c      	ldr	r3, [pc, #48]	; (90fc <USBHwInit+0xa4>)
    90cc:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    90ce:	4a0c      	ldr	r2, [pc, #48]	; (9100 <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    90d0:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    90d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    90d6:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    90d8:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    90da:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    90dc:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    90de:	4b09      	ldr	r3, [pc, #36]	; (9104 <USBHwInit+0xac>)
    90e0:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    90e2:	f7ff febc 	bl	8e5e <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    90e6:	2001      	movs	r0, #1
    90e8:	bd08      	pop	{r3, pc}
    90ea:	bf00      	nop
    90ec:	4002c010 	.word	0x4002c010
    90f0:	400fc0c4 	.word	0x400fc0c4
    90f4:	5000cff4 	.word	0x5000cff4
    90f8:	5000cff8 	.word	0x5000cff8
    90fc:	5000c204 	.word	0x5000c204
    9100:	5000c208 	.word	0x5000c208
    9104:	5000c240 	.word	0x5000c240

00009108 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    9108:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    910a:	4c16      	ldr	r4, [pc, #88]	; (9164 <USBFilterOsVendorMessage+0x5c>)
    910c:	2500      	movs	r5, #0
    910e:	7824      	ldrb	r4, [r4, #0]
    9110:	b314      	cbz	r4, 9158 <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    9112:	7846      	ldrb	r6, [r0, #1]
    9114:	42a6      	cmp	r6, r4
    9116:	d121      	bne.n	915c <USBFilterOsVendorMessage+0x54>
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    9118:	8884      	ldrh	r4, [r0, #4]
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    911a:	600d      	str	r5, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    911c:	2c04      	cmp	r4, #4
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
	
		int iRequestLength = pSetup->wLength;
    911e:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    9120:	8845      	ldrh	r5, [r0, #2]
	
		switch (pSetup->wIndex) {
    9122:	d005      	beq.n	9130 <USBFilterOsVendorMessage+0x28>
    9124:	2c05      	cmp	r4, #5
    9126:	d11b      	bne.n	9160 <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    9128:	480f      	ldr	r0, [pc, #60]	; (9168 <USBFilterOsVendorMessage+0x60>)
    912a:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    912c:	2092      	movs	r0, #146	; 0x92
    912e:	e002      	b.n	9136 <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    9130:	480e      	ldr	r0, [pc, #56]	; (916c <USBFilterOsVendorMessage+0x64>)
    9132:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    9134:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    9136:	6010      	str	r0, [r2, #0]
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
    9138:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    913a:	0a28      	lsrs	r0, r5, #8
    913c:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    913e:	4284      	cmp	r4, r0
    9140:	db0e      	blt.n	9160 <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    9142:	681d      	ldr	r5, [r3, #0]
    9144:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    9146:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    9148:	601d      	str	r5, [r3, #0]
    914a:	42b0      	cmp	r0, r6
    914c:	bfd4      	ite	le
    914e:	6010      	strle	r0, [r2, #0]
    9150:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    9152:	2001      	movs	r0, #1
    9154:	6008      	str	r0, [r1, #0]
		return TRUE;
    9156:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    9158:	4620      	mov	r0, r4
    915a:	bd70      	pop	{r4, r5, r6, pc}
    915c:	4628      	mov	r0, r5
    915e:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    9160:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    9162:	bd70      	pop	{r4, r5, r6, pc}
    9164:	10000fec 	.word	0x10000fec
    9168:	1000095d 	.word	0x1000095d
    916c:	0000a684 	.word	0x0000a684

00009170 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    9170:	b510      	push	{r4, lr}
	bMsVendorIndex = bVendorRequestIndex;
    9172:	4b0a      	ldr	r3, [pc, #40]	; (919c <USBRegisterWinusbInterface+0x2c>)
    9174:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    9176:	b179      	cbz	r1, 9198 <USBRegisterWinusbInterface+0x28>
    9178:	4b09      	ldr	r3, [pc, #36]	; (91a0 <USBRegisterWinusbInterface+0x30>)
    917a:	2200      	movs	r2, #0
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    917c:	5c8c      	ldrb	r4, [r1, r2]
    917e:	1e98      	subs	r0, r3, #2
    9180:	b13c      	cbz	r4, 9192 <USBRegisterWinusbInterface+0x22>
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    9182:	3201      	adds	r2, #1
    9184:	2a26      	cmp	r2, #38	; 0x26
    9186:	4618      	mov	r0, r3
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    9188:	f803 4c02 	strb.w	r4, [r3, #-2]
    918c:	f103 0302 	add.w	r3, r3, #2
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    9190:	d1f4      	bne.n	917c <USBRegisterWinusbInterface+0xc>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    9192:	2300      	movs	r3, #0
    9194:	7003      	strb	r3, [r0, #0]
	pbWriteCursor[2] = 0;
    9196:	7083      	strb	r3, [r0, #2]
    9198:	bd10      	pop	{r4, pc}
    919a:	bf00      	nop
    919c:	10000fec 	.word	0x10000fec
    91a0:	100009a1 	.word	0x100009a1

000091a4 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    91a4:	4b01      	ldr	r3, [pc, #4]	; (91ac <USBRegisterDescriptors+0x8>)
    91a6:	6058      	str	r0, [r3, #4]
    91a8:	4770      	bx	lr
    91aa:	bf00      	nop
    91ac:	10000fec 	.word	0x10000fec

000091b0 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    91b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    91b2:	0a05      	lsrs	r5, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    91b4:	2d03      	cmp	r5, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    91b6:	b2c6      	uxtb	r6, r0
    91b8:	4911      	ldr	r1, [pc, #68]	; (9200 <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    91ba:	d108      	bne.n	91ce <USBGetDescriptor+0x1e>
    91bc:	2eee      	cmp	r6, #238	; 0xee
    91be:	d106      	bne.n	91ce <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    91c0:	4810      	ldr	r0, [pc, #64]	; (9204 <USBGetDescriptor+0x54>)
    91c2:	7809      	ldrb	r1, [r1, #0]
	
	*ppbData = abOsStringDescriptor;
    91c4:	3092      	adds	r0, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    91c6:	7401      	strb	r1, [r0, #16]
	
	*ppbData = abOsStringDescriptor;
    91c8:	6018      	str	r0, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    91ca:	2312      	movs	r3, #18
    91cc:	e012      	b.n	91f4 <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    91ce:	6849      	ldr	r1, [r1, #4]
	iCurIndex = 0;
    91d0:	2400      	movs	r4, #0
	
	while (pab[DESC_bLength] != 0) {
    91d2:	e001      	b.n	91d8 <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    91d4:	3401      	adds	r4, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    91d6:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    91d8:	7808      	ldrb	r0, [r1, #0]
    91da:	b180      	cbz	r0, 91fe <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    91dc:	784f      	ldrb	r7, [r1, #1]
    91de:	42af      	cmp	r7, r5
    91e0:	d1f9      	bne.n	91d6 <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    91e2:	42b4      	cmp	r4, r6
    91e4:	d1f6      	bne.n	91d4 <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    91e6:	2d02      	cmp	r5, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    91e8:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    91ea:	d106      	bne.n	91fa <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    91ec:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    91ee:	788b      	ldrb	r3, [r1, #2]
    91f0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    91f4:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    91f6:	2001      	movs	r0, #1
    91f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    91fa:	780b      	ldrb	r3, [r1, #0]
    91fc:	e7fa      	b.n	91f4 <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    91fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9200:	10000fec 	.word	0x10000fec
    9204:	1000095d 	.word	0x1000095d

00009208 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    9208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    920c:	4e4b      	ldr	r6, [pc, #300]	; (933c <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    920e:	4604      	mov	r4, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9210:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    9212:	460d      	mov	r5, r1
    9214:	4617      	mov	r7, r2
    9216:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9218:	b943      	cbnz	r3, 922c <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    921a:	7826      	ldrb	r6, [r4, #0]
    921c:	f006 061f 	and.w	r6, r6, #31
    9220:	2e01      	cmp	r6, #1
    9222:	d053      	beq.n	92cc <USBHandleStandardRequest+0xc4>
    9224:	d306      	bcc.n	9234 <USBHandleStandardRequest+0x2c>
    9226:	2e02      	cmp	r6, #2
    9228:	d062      	beq.n	92f0 <USBHandleStandardRequest+0xe8>
    922a:	e081      	b.n	9330 <USBHandleStandardRequest+0x128>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    922c:	4798      	blx	r3
    922e:	2800      	cmp	r0, #0
    9230:	d0f3      	beq.n	921a <USBHandleStandardRequest+0x12>
    9232:	e080      	b.n	9336 <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9234:	7862      	ldrb	r2, [r4, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    9236:	683b      	ldr	r3, [r7, #0]

	switch (pSetup->bRequest) {
    9238:	2a09      	cmp	r2, #9
    923a:	d879      	bhi.n	9330 <USBHandleStandardRequest+0x128>
    923c:	e8df f002 	tbb	[pc, r2]
    9240:	78787805 	.word	0x78787805
    9244:	780d0978 	.word	0x780d0978
    9248:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    924a:	2200      	movs	r2, #0
    924c:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    924e:	705a      	strb	r2, [r3, #1]
    9250:	e045      	b.n	92de <USBHandleStandardRequest+0xd6>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    9252:	78a0      	ldrb	r0, [r4, #2]
    9254:	f7ff fdf8 	bl	8e48 <USBHwSetAddress>
    9258:	e06d      	b.n	9336 <USBHandleStandardRequest+0x12e>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    925a:	8860      	ldrh	r0, [r4, #2]
    925c:	88a1      	ldrh	r1, [r4, #4]
    925e:	462a      	mov	r2, r5
    9260:	463b      	mov	r3, r7
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    9262:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    9266:	f7ff bfa3 	b.w	91b0 <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    926a:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    926e:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    9270:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    9272:	6028      	str	r0, [r5, #0]
    9274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    9278:	78a6      	ldrb	r6, [r4, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    927a:	b90e      	cbnz	r6, 9280 <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    927c:	4630      	mov	r0, r6
    927e:	e01f      	b.n	92c0 <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    9280:	27ff      	movs	r7, #255	; 0xff
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    9282:	f8d8 5004 	ldr.w	r5, [r8, #4]
		bCurConfig = 0xFF;
    9286:	46b9      	mov	r9, r7
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    9288:	782b      	ldrb	r3, [r5, #0]
    928a:	b1c3      	cbz	r3, 92be <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    928c:	786b      	ldrb	r3, [r5, #1]
    928e:	2b04      	cmp	r3, #4
    9290:	d006      	beq.n	92a0 <USBHandleStandardRequest+0x98>
    9292:	2b05      	cmp	r3, #5
    9294:	d006      	beq.n	92a4 <USBHandleStandardRequest+0x9c>
    9296:	2b02      	cmp	r3, #2
    9298:	d10e      	bne.n	92b8 <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    929a:	f895 9005 	ldrb.w	r9, [r5, #5]
    929e:	e00b      	b.n	92b8 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    92a0:	78ef      	ldrb	r7, [r5, #3]
    92a2:	e009      	b.n	92b8 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    92a4:	45b1      	cmp	r9, r6
    92a6:	d107      	bne.n	92b8 <USBHandleStandardRequest+0xb0>
    92a8:	b937      	cbnz	r7, 92b8 <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    92aa:	7969      	ldrb	r1, [r5, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    92ac:	792b      	ldrb	r3, [r5, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    92ae:	78a8      	ldrb	r0, [r5, #2]
    92b0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    92b4:	f7ff fd86 	bl	8dc4 <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    92b8:	782b      	ldrb	r3, [r5, #0]
    92ba:	441d      	add	r5, r3
    92bc:	e7e4      	b.n	9288 <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    92be:	2001      	movs	r0, #1
    92c0:	f7ff fe5e 	bl	8f80 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    92c4:	8863      	ldrh	r3, [r4, #2]
    92c6:	f888 300c 	strb.w	r3, [r8, #12]
    92ca:	e034      	b.n	9336 <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    92cc:	7863      	ldrb	r3, [r4, #1]
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    92ce:	683a      	ldr	r2, [r7, #0]
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    92d0:	2b0a      	cmp	r3, #10
    92d2:	d006      	beq.n	92e2 <USBHandleStandardRequest+0xda>
    92d4:	2b0b      	cmp	r3, #11
    92d6:	d007      	beq.n	92e8 <USBHandleStandardRequest+0xe0>
    92d8:	bb53      	cbnz	r3, 9330 <USBHandleStandardRequest+0x128>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    92da:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    92dc:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    92de:	2302      	movs	r3, #2
    92e0:	e004      	b.n	92ec <USBHandleStandardRequest+0xe4>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    92e2:	2300      	movs	r3, #0
    92e4:	7013      	strb	r3, [r2, #0]
    92e6:	e016      	b.n	9316 <USBHandleStandardRequest+0x10e>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    92e8:	8863      	ldrh	r3, [r4, #2]
    92ea:	bb0b      	cbnz	r3, 9330 <USBHandleStandardRequest+0x128>
			return FALSE;
		}
		*piLen = 0;
    92ec:	602b      	str	r3, [r5, #0]
    92ee:	e022      	b.n	9336 <USBHandleStandardRequest+0x12e>
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    92f0:	f8d7 8000 	ldr.w	r8, [r7]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    92f4:	7867      	ldrb	r7, [r4, #1]
    92f6:	2f01      	cmp	r7, #1
    92f8:	d00f      	beq.n	931a <USBHandleStandardRequest+0x112>
    92fa:	d302      	bcc.n	9302 <USBHandleStandardRequest+0xfa>
    92fc:	2f03      	cmp	r7, #3
    92fe:	d010      	beq.n	9322 <USBHandleStandardRequest+0x11a>
    9300:	e016      	b.n	9330 <USBHandleStandardRequest+0x128>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    9302:	7920      	ldrb	r0, [r4, #4]
    9304:	f7ff fdb0 	bl	8e68 <USBHwEPGetStatus>
		pbData[1] = 0;
    9308:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    930a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    930e:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    9312:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    9316:	602e      	str	r6, [r5, #0]
    9318:	e00d      	b.n	9336 <USBHandleStandardRequest+0x12e>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    931a:	8861      	ldrh	r1, [r4, #2]
    931c:	b941      	cbnz	r1, 9330 <USBHandleStandardRequest+0x128>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    931e:	7920      	ldrb	r0, [r4, #4]
    9320:	e003      	b.n	932a <USBHandleStandardRequest+0x122>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    9322:	8863      	ldrh	r3, [r4, #2]
    9324:	b923      	cbnz	r3, 9330 <USBHandleStandardRequest+0x128>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    9326:	7920      	ldrb	r0, [r4, #4]
    9328:	2101      	movs	r1, #1
    932a:	f7ff fdb7 	bl	8e9c <USBHwEPStall>
    932e:	e002      	b.n	9336 <USBHandleStandardRequest+0x12e>
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
    9330:	2000      	movs	r0, #0
    9332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
		return TRUE;
    9336:	2001      	movs	r0, #1
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    9338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    933c:	10000fec 	.word	0x10000fec

00009340 <__aeabi_llsl>:
    9340:	4091      	lsls	r1, r2
    9342:	1c03      	adds	r3, r0, #0
    9344:	4090      	lsls	r0, r2
    9346:	469c      	mov	ip, r3
    9348:	3a20      	subs	r2, #32
    934a:	4093      	lsls	r3, r2
    934c:	4319      	orrs	r1, r3
    934e:	4252      	negs	r2, r2
    9350:	4663      	mov	r3, ip
    9352:	40d3      	lsrs	r3, r2
    9354:	4319      	orrs	r1, r3
    9356:	4770      	bx	lr

00009358 <malloc>:
    9358:	f240 4348 	movw	r3, #1096	; 0x448
    935c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9360:	4601      	mov	r1, r0
    9362:	6818      	ldr	r0, [r3, #0]
    9364:	f000 b800 	b.w	9368 <_malloc_r>

00009368 <_malloc_r>:
    9368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    936c:	f101 050b 	add.w	r5, r1, #11
    9370:	2d16      	cmp	r5, #22
    9372:	bf87      	ittee	hi
    9374:	f025 0507 	bichi.w	r5, r5, #7
    9378:	0feb      	lsrhi	r3, r5, #31
    937a:	2300      	movls	r3, #0
    937c:	2510      	movls	r5, #16
    937e:	428d      	cmp	r5, r1
    9380:	bf2c      	ite	cs
    9382:	4619      	movcs	r1, r3
    9384:	f043 0101 	orrcc.w	r1, r3, #1
    9388:	b083      	sub	sp, #12
    938a:	4607      	mov	r7, r0
    938c:	2900      	cmp	r1, #0
    938e:	f040 80b4 	bne.w	94fa <_malloc_r+0x192>
    9392:	f000 fb45 	bl	9a20 <__malloc_lock>
    9396:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    939a:	d21f      	bcs.n	93dc <_malloc_r+0x74>
    939c:	f640 2604 	movw	r6, #2564	; 0xa04
    93a0:	f2c1 0600 	movt	r6, #4096	; 0x1000
    93a4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    93a8:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
    93ac:	68dc      	ldr	r4, [r3, #12]
    93ae:	429c      	cmp	r4, r3
    93b0:	f000 81f4 	beq.w	979c <_malloc_r+0x434>
    93b4:	6863      	ldr	r3, [r4, #4]
    93b6:	68e2      	ldr	r2, [r4, #12]
    93b8:	f023 0303 	bic.w	r3, r3, #3
    93bc:	4423      	add	r3, r4
    93be:	6858      	ldr	r0, [r3, #4]
    93c0:	68a1      	ldr	r1, [r4, #8]
    93c2:	f040 0501 	orr.w	r5, r0, #1
    93c6:	60ca      	str	r2, [r1, #12]
    93c8:	4638      	mov	r0, r7
    93ca:	6091      	str	r1, [r2, #8]
    93cc:	605d      	str	r5, [r3, #4]
    93ce:	f000 fb29 	bl	9a24 <__malloc_unlock>
    93d2:	3408      	adds	r4, #8
    93d4:	4620      	mov	r0, r4
    93d6:	b003      	add	sp, #12
    93d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93dc:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    93e0:	bf04      	itt	eq
    93e2:	217e      	moveq	r1, #126	; 0x7e
    93e4:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
    93e8:	f040 808e 	bne.w	9508 <_malloc_r+0x1a0>
    93ec:	f640 2604 	movw	r6, #2564	; 0xa04
    93f0:	f2c1 0600 	movt	r6, #4096	; 0x1000
    93f4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    93f8:	68cc      	ldr	r4, [r1, #12]
    93fa:	42a1      	cmp	r1, r4
    93fc:	d106      	bne.n	940c <_malloc_r+0xa4>
    93fe:	e00d      	b.n	941c <_malloc_r+0xb4>
    9400:	2b00      	cmp	r3, #0
    9402:	f280 8163 	bge.w	96cc <_malloc_r+0x364>
    9406:	68e4      	ldr	r4, [r4, #12]
    9408:	42a1      	cmp	r1, r4
    940a:	d007      	beq.n	941c <_malloc_r+0xb4>
    940c:	6862      	ldr	r2, [r4, #4]
    940e:	f022 0203 	bic.w	r2, r2, #3
    9412:	1b53      	subs	r3, r2, r5
    9414:	2b0f      	cmp	r3, #15
    9416:	ddf3      	ble.n	9400 <_malloc_r+0x98>
    9418:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    941c:	f10c 0c01 	add.w	ip, ip, #1
    9420:	f640 2304 	movw	r3, #2564	; 0xa04
    9424:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9428:	6934      	ldr	r4, [r6, #16]
    942a:	f103 0e08 	add.w	lr, r3, #8
    942e:	4574      	cmp	r4, lr
    9430:	bf08      	it	eq
    9432:	685a      	ldreq	r2, [r3, #4]
    9434:	d021      	beq.n	947a <_malloc_r+0x112>
    9436:	6861      	ldr	r1, [r4, #4]
    9438:	f021 0103 	bic.w	r1, r1, #3
    943c:	1b4a      	subs	r2, r1, r5
    943e:	2a0f      	cmp	r2, #15
    9440:	f300 8190 	bgt.w	9764 <_malloc_r+0x3fc>
    9444:	2a00      	cmp	r2, #0
    9446:	f8c3 e014 	str.w	lr, [r3, #20]
    944a:	f8c3 e010 	str.w	lr, [r3, #16]
    944e:	da66      	bge.n	951e <_malloc_r+0x1b6>
    9450:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9454:	f080 815f 	bcs.w	9716 <_malloc_r+0x3ae>
    9458:	08c9      	lsrs	r1, r1, #3
    945a:	108a      	asrs	r2, r1, #2
    945c:	f04f 0801 	mov.w	r8, #1
    9460:	fa08 f802 	lsl.w	r8, r8, r2
    9464:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    9468:	685a      	ldr	r2, [r3, #4]
    946a:	6888      	ldr	r0, [r1, #8]
    946c:	ea48 0202 	orr.w	r2, r8, r2
    9470:	60a0      	str	r0, [r4, #8]
    9472:	60e1      	str	r1, [r4, #12]
    9474:	605a      	str	r2, [r3, #4]
    9476:	608c      	str	r4, [r1, #8]
    9478:	60c4      	str	r4, [r0, #12]
    947a:	ea4f 03ac 	mov.w	r3, ip, asr #2
    947e:	2001      	movs	r0, #1
    9480:	4098      	lsls	r0, r3
    9482:	4290      	cmp	r0, r2
    9484:	d858      	bhi.n	9538 <_malloc_r+0x1d0>
    9486:	4202      	tst	r2, r0
    9488:	d106      	bne.n	9498 <_malloc_r+0x130>
    948a:	f02c 0c03 	bic.w	ip, ip, #3
    948e:	0040      	lsls	r0, r0, #1
    9490:	4202      	tst	r2, r0
    9492:	f10c 0c04 	add.w	ip, ip, #4
    9496:	d0fa      	beq.n	948e <_malloc_r+0x126>
    9498:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
    949c:	4644      	mov	r4, r8
    949e:	46e1      	mov	r9, ip
    94a0:	68e3      	ldr	r3, [r4, #12]
    94a2:	429c      	cmp	r4, r3
    94a4:	d107      	bne.n	94b6 <_malloc_r+0x14e>
    94a6:	e170      	b.n	978a <_malloc_r+0x422>
    94a8:	2a00      	cmp	r2, #0
    94aa:	f280 8181 	bge.w	97b0 <_malloc_r+0x448>
    94ae:	68db      	ldr	r3, [r3, #12]
    94b0:	429c      	cmp	r4, r3
    94b2:	f000 816a 	beq.w	978a <_malloc_r+0x422>
    94b6:	6859      	ldr	r1, [r3, #4]
    94b8:	f021 0103 	bic.w	r1, r1, #3
    94bc:	1b4a      	subs	r2, r1, r5
    94be:	2a0f      	cmp	r2, #15
    94c0:	ddf2      	ble.n	94a8 <_malloc_r+0x140>
    94c2:	461c      	mov	r4, r3
    94c4:	f854 cf08 	ldr.w	ip, [r4, #8]!
    94c8:	68d9      	ldr	r1, [r3, #12]
    94ca:	f045 0901 	orr.w	r9, r5, #1
    94ce:	f042 0801 	orr.w	r8, r2, #1
    94d2:	441d      	add	r5, r3
    94d4:	f8c3 9004 	str.w	r9, [r3, #4]
    94d8:	4638      	mov	r0, r7
    94da:	f8cc 100c 	str.w	r1, [ip, #12]
    94de:	f8c1 c008 	str.w	ip, [r1, #8]
    94e2:	6175      	str	r5, [r6, #20]
    94e4:	6135      	str	r5, [r6, #16]
    94e6:	f8c5 e00c 	str.w	lr, [r5, #12]
    94ea:	f8c5 e008 	str.w	lr, [r5, #8]
    94ee:	f8c5 8004 	str.w	r8, [r5, #4]
    94f2:	50aa      	str	r2, [r5, r2]
    94f4:	f000 fa96 	bl	9a24 <__malloc_unlock>
    94f8:	e76c      	b.n	93d4 <_malloc_r+0x6c>
    94fa:	230c      	movs	r3, #12
    94fc:	2400      	movs	r4, #0
    94fe:	6003      	str	r3, [r0, #0]
    9500:	4620      	mov	r0, r4
    9502:	b003      	add	sp, #12
    9504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9508:	f1bc 0f04 	cmp.w	ip, #4
    950c:	f200 80ef 	bhi.w	96ee <_malloc_r+0x386>
    9510:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    9514:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    9518:	ea4f 014c 	mov.w	r1, ip, lsl #1
    951c:	e766      	b.n	93ec <_malloc_r+0x84>
    951e:	4421      	add	r1, r4
    9520:	684b      	ldr	r3, [r1, #4]
    9522:	4638      	mov	r0, r7
    9524:	f043 0301 	orr.w	r3, r3, #1
    9528:	604b      	str	r3, [r1, #4]
    952a:	f000 fa7b 	bl	9a24 <__malloc_unlock>
    952e:	3408      	adds	r4, #8
    9530:	4620      	mov	r0, r4
    9532:	b003      	add	sp, #12
    9534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9538:	68b4      	ldr	r4, [r6, #8]
    953a:	6863      	ldr	r3, [r4, #4]
    953c:	f023 0903 	bic.w	r9, r3, #3
    9540:	454d      	cmp	r5, r9
    9542:	d804      	bhi.n	954e <_malloc_r+0x1e6>
    9544:	ebc5 0309 	rsb	r3, r5, r9
    9548:	2b0f      	cmp	r3, #15
    954a:	f300 80af 	bgt.w	96ac <_malloc_r+0x344>
    954e:	f241 0304 	movw	r3, #4100	; 0x1004
    9552:	f640 6a10 	movw	sl, #3600	; 0xe10
    9556:	f2c1 0300 	movt	r3, #4096	; 0x1000
    955a:	f2c1 0a00 	movt	sl, #4096	; 0x1000
    955e:	681b      	ldr	r3, [r3, #0]
    9560:	f8da 1000 	ldr.w	r1, [sl]
    9564:	442b      	add	r3, r5
    9566:	3101      	adds	r1, #1
    9568:	bf1d      	ittte	ne
    956a:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
    956e:	330f      	addne	r3, #15
    9570:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
    9574:	f103 0c10 	addeq.w	ip, r3, #16
    9578:	bf18      	it	ne
    957a:	f023 0c0f 	bicne.w	ip, r3, #15
    957e:	eb04 0209 	add.w	r2, r4, r9
    9582:	4661      	mov	r1, ip
    9584:	4638      	mov	r0, r7
    9586:	e88d 1004 	stmia.w	sp, {r2, ip}
    958a:	f000 fa4d 	bl	9a28 <_sbrk_r>
    958e:	e89d 1004 	ldmia.w	sp, {r2, ip}
    9592:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9596:	4680      	mov	r8, r0
    9598:	f000 8120 	beq.w	97dc <_malloc_r+0x474>
    959c:	4282      	cmp	r2, r0
    959e:	f200 811a 	bhi.w	97d6 <_malloc_r+0x46e>
    95a2:	f241 0b08 	movw	fp, #4104	; 0x1008
    95a6:	f2c1 0b00 	movt	fp, #4096	; 0x1000
    95aa:	f8db 3000 	ldr.w	r3, [fp]
    95ae:	4542      	cmp	r2, r8
    95b0:	4463      	add	r3, ip
    95b2:	f8cb 3000 	str.w	r3, [fp]
    95b6:	f000 815f 	beq.w	9878 <_malloc_r+0x510>
    95ba:	f8da 0000 	ldr.w	r0, [sl]
    95be:	f640 6110 	movw	r1, #3600	; 0xe10
    95c2:	3001      	adds	r0, #1
    95c4:	bf1c      	itt	ne
    95c6:	ebc2 0208 	rsbne	r2, r2, r8
    95ca:	189b      	addne	r3, r3, r2
    95cc:	f2c1 0100 	movt	r1, #4096	; 0x1000
    95d0:	bf0c      	ite	eq
    95d2:	f8c1 8000 	streq.w	r8, [r1]
    95d6:	f8cb 3000 	strne.w	r3, [fp]
    95da:	f018 0307 	ands.w	r3, r8, #7
    95de:	bf1f      	itttt	ne
    95e0:	f1c3 0208 	rsbne	r2, r3, #8
    95e4:	4490      	addne	r8, r2
    95e6:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
    95ea:	f103 0a08 	addne.w	sl, r3, #8
    95ee:	eb08 030c 	add.w	r3, r8, ip
    95f2:	bf08      	it	eq
    95f4:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
    95f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    95fc:	ebc3 0a0a 	rsb	sl, r3, sl
    9600:	4651      	mov	r1, sl
    9602:	4638      	mov	r0, r7
    9604:	f000 fa10 	bl	9a28 <_sbrk_r>
    9608:	1c43      	adds	r3, r0, #1
    960a:	bf18      	it	ne
    960c:	ebc8 0100 	rsbne	r1, r8, r0
    9610:	f8db 3000 	ldr.w	r3, [fp]
    9614:	bf15      	itete	ne
    9616:	4451      	addne	r1, sl
    9618:	f04f 0a00 	moveq.w	sl, #0
    961c:	f041 0101 	orrne.w	r1, r1, #1
    9620:	2101      	moveq	r1, #1
    9622:	f241 0208 	movw	r2, #4104	; 0x1008
    9626:	4453      	add	r3, sl
    9628:	42b4      	cmp	r4, r6
    962a:	f8c6 8008 	str.w	r8, [r6, #8]
    962e:	f8cb 3000 	str.w	r3, [fp]
    9632:	f8c8 1004 	str.w	r1, [r8, #4]
    9636:	f2c1 0200 	movt	r2, #4096	; 0x1000
    963a:	d018      	beq.n	966e <_malloc_r+0x306>
    963c:	f1b9 0f0f 	cmp.w	r9, #15
    9640:	f240 80fb 	bls.w	983a <_malloc_r+0x4d2>
    9644:	6861      	ldr	r1, [r4, #4]
    9646:	f1a9 000c 	sub.w	r0, r9, #12
    964a:	f020 0007 	bic.w	r0, r0, #7
    964e:	f001 0101 	and.w	r1, r1, #1
    9652:	ea40 0c01 	orr.w	ip, r0, r1
    9656:	f04f 0e05 	mov.w	lr, #5
    965a:	1821      	adds	r1, r4, r0
    965c:	280f      	cmp	r0, #15
    965e:	f8c4 c004 	str.w	ip, [r4, #4]
    9662:	f8c1 e004 	str.w	lr, [r1, #4]
    9666:	f8c1 e008 	str.w	lr, [r1, #8]
    966a:	f200 8111 	bhi.w	9890 <_malloc_r+0x528>
    966e:	f241 0200 	movw	r2, #4096	; 0x1000
    9672:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9676:	6811      	ldr	r1, [r2, #0]
    9678:	68b4      	ldr	r4, [r6, #8]
    967a:	428b      	cmp	r3, r1
    967c:	bf88      	it	hi
    967e:	6013      	strhi	r3, [r2, #0]
    9680:	f640 72fc 	movw	r2, #4092	; 0xffc
    9684:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9688:	6811      	ldr	r1, [r2, #0]
    968a:	428b      	cmp	r3, r1
    968c:	bf88      	it	hi
    968e:	6013      	strhi	r3, [r2, #0]
    9690:	6862      	ldr	r2, [r4, #4]
    9692:	f022 0203 	bic.w	r2, r2, #3
    9696:	4295      	cmp	r5, r2
    9698:	ebc5 0302 	rsb	r3, r5, r2
    969c:	d801      	bhi.n	96a2 <_malloc_r+0x33a>
    969e:	2b0f      	cmp	r3, #15
    96a0:	dc04      	bgt.n	96ac <_malloc_r+0x344>
    96a2:	4638      	mov	r0, r7
    96a4:	f000 f9be 	bl	9a24 <__malloc_unlock>
    96a8:	2400      	movs	r4, #0
    96aa:	e693      	b.n	93d4 <_malloc_r+0x6c>
    96ac:	f045 0201 	orr.w	r2, r5, #1
    96b0:	f043 0301 	orr.w	r3, r3, #1
    96b4:	4425      	add	r5, r4
    96b6:	6062      	str	r2, [r4, #4]
    96b8:	4638      	mov	r0, r7
    96ba:	60b5      	str	r5, [r6, #8]
    96bc:	606b      	str	r3, [r5, #4]
    96be:	f000 f9b1 	bl	9a24 <__malloc_unlock>
    96c2:	3408      	adds	r4, #8
    96c4:	4620      	mov	r0, r4
    96c6:	b003      	add	sp, #12
    96c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96cc:	4422      	add	r2, r4
    96ce:	6850      	ldr	r0, [r2, #4]
    96d0:	68e3      	ldr	r3, [r4, #12]
    96d2:	68a1      	ldr	r1, [r4, #8]
    96d4:	f040 0501 	orr.w	r5, r0, #1
    96d8:	60cb      	str	r3, [r1, #12]
    96da:	4638      	mov	r0, r7
    96dc:	6099      	str	r1, [r3, #8]
    96de:	6055      	str	r5, [r2, #4]
    96e0:	f000 f9a0 	bl	9a24 <__malloc_unlock>
    96e4:	3408      	adds	r4, #8
    96e6:	4620      	mov	r0, r4
    96e8:	b003      	add	sp, #12
    96ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96ee:	f1bc 0f14 	cmp.w	ip, #20
    96f2:	bf9c      	itt	ls
    96f4:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
    96f8:	ea4f 014c 	movls.w	r1, ip, lsl #1
    96fc:	f67f ae76 	bls.w	93ec <_malloc_r+0x84>
    9700:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    9704:	f200 808f 	bhi.w	9826 <_malloc_r+0x4be>
    9708:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    970c:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    9710:	ea4f 014c 	mov.w	r1, ip, lsl #1
    9714:	e66a      	b.n	93ec <_malloc_r+0x84>
    9716:	0a4b      	lsrs	r3, r1, #9
    9718:	2b04      	cmp	r3, #4
    971a:	d958      	bls.n	97ce <_malloc_r+0x466>
    971c:	2b14      	cmp	r3, #20
    971e:	bf9c      	itt	ls
    9720:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
    9724:	0050      	lslls	r0, r2, #1
    9726:	d905      	bls.n	9734 <_malloc_r+0x3cc>
    9728:	2b54      	cmp	r3, #84	; 0x54
    972a:	f200 80ba 	bhi.w	98a2 <_malloc_r+0x53a>
    972e:	0b0a      	lsrs	r2, r1, #12
    9730:	326e      	adds	r2, #110	; 0x6e
    9732:	0050      	lsls	r0, r2, #1
    9734:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9738:	6883      	ldr	r3, [r0, #8]
    973a:	f640 2804 	movw	r8, #2564	; 0xa04
    973e:	4283      	cmp	r3, r0
    9740:	f2c1 0800 	movt	r8, #4096	; 0x1000
    9744:	d07f      	beq.n	9846 <_malloc_r+0x4de>
    9746:	685a      	ldr	r2, [r3, #4]
    9748:	f022 0203 	bic.w	r2, r2, #3
    974c:	4291      	cmp	r1, r2
    974e:	d202      	bcs.n	9756 <_malloc_r+0x3ee>
    9750:	689b      	ldr	r3, [r3, #8]
    9752:	4298      	cmp	r0, r3
    9754:	d1f7      	bne.n	9746 <_malloc_r+0x3de>
    9756:	68d9      	ldr	r1, [r3, #12]
    9758:	6872      	ldr	r2, [r6, #4]
    975a:	60e1      	str	r1, [r4, #12]
    975c:	60a3      	str	r3, [r4, #8]
    975e:	608c      	str	r4, [r1, #8]
    9760:	60dc      	str	r4, [r3, #12]
    9762:	e68a      	b.n	947a <_malloc_r+0x112>
    9764:	f045 0601 	orr.w	r6, r5, #1
    9768:	f042 0101 	orr.w	r1, r2, #1
    976c:	4425      	add	r5, r4
    976e:	6066      	str	r6, [r4, #4]
    9770:	4638      	mov	r0, r7
    9772:	615d      	str	r5, [r3, #20]
    9774:	611d      	str	r5, [r3, #16]
    9776:	f8c5 e00c 	str.w	lr, [r5, #12]
    977a:	f8c5 e008 	str.w	lr, [r5, #8]
    977e:	6069      	str	r1, [r5, #4]
    9780:	50aa      	str	r2, [r5, r2]
    9782:	3408      	adds	r4, #8
    9784:	f000 f94e 	bl	9a24 <__malloc_unlock>
    9788:	e624      	b.n	93d4 <_malloc_r+0x6c>
    978a:	f109 0901 	add.w	r9, r9, #1
    978e:	f019 0f03 	tst.w	r9, #3
    9792:	f104 0408 	add.w	r4, r4, #8
    9796:	f47f ae83 	bne.w	94a0 <_malloc_r+0x138>
    979a:	e028      	b.n	97ee <_malloc_r+0x486>
    979c:	f104 0308 	add.w	r3, r4, #8
    97a0:	6964      	ldr	r4, [r4, #20]
    97a2:	42a3      	cmp	r3, r4
    97a4:	bf08      	it	eq
    97a6:	f10c 0c02 	addeq.w	ip, ip, #2
    97aa:	f43f ae39 	beq.w	9420 <_malloc_r+0xb8>
    97ae:	e601      	b.n	93b4 <_malloc_r+0x4c>
    97b0:	4419      	add	r1, r3
    97b2:	6848      	ldr	r0, [r1, #4]
    97b4:	461c      	mov	r4, r3
    97b6:	f854 2f08 	ldr.w	r2, [r4, #8]!
    97ba:	68db      	ldr	r3, [r3, #12]
    97bc:	f040 0501 	orr.w	r5, r0, #1
    97c0:	604d      	str	r5, [r1, #4]
    97c2:	4638      	mov	r0, r7
    97c4:	60d3      	str	r3, [r2, #12]
    97c6:	609a      	str	r2, [r3, #8]
    97c8:	f000 f92c 	bl	9a24 <__malloc_unlock>
    97cc:	e602      	b.n	93d4 <_malloc_r+0x6c>
    97ce:	098a      	lsrs	r2, r1, #6
    97d0:	3238      	adds	r2, #56	; 0x38
    97d2:	0050      	lsls	r0, r2, #1
    97d4:	e7ae      	b.n	9734 <_malloc_r+0x3cc>
    97d6:	42b4      	cmp	r4, r6
    97d8:	f43f aee3 	beq.w	95a2 <_malloc_r+0x23a>
    97dc:	68b4      	ldr	r4, [r6, #8]
    97de:	6862      	ldr	r2, [r4, #4]
    97e0:	f022 0203 	bic.w	r2, r2, #3
    97e4:	e757      	b.n	9696 <_malloc_r+0x32e>
    97e6:	f8d8 8000 	ldr.w	r8, [r8]
    97ea:	4598      	cmp	r8, r3
    97ec:	d16b      	bne.n	98c6 <_malloc_r+0x55e>
    97ee:	f01c 0f03 	tst.w	ip, #3
    97f2:	f1a8 0308 	sub.w	r3, r8, #8
    97f6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    97fa:	d1f4      	bne.n	97e6 <_malloc_r+0x47e>
    97fc:	6873      	ldr	r3, [r6, #4]
    97fe:	ea23 0300 	bic.w	r3, r3, r0
    9802:	6073      	str	r3, [r6, #4]
    9804:	0040      	lsls	r0, r0, #1
    9806:	4298      	cmp	r0, r3
    9808:	f63f ae96 	bhi.w	9538 <_malloc_r+0x1d0>
    980c:	2800      	cmp	r0, #0
    980e:	f43f ae93 	beq.w	9538 <_malloc_r+0x1d0>
    9812:	4203      	tst	r3, r0
    9814:	46cc      	mov	ip, r9
    9816:	f47f ae3f 	bne.w	9498 <_malloc_r+0x130>
    981a:	0040      	lsls	r0, r0, #1
    981c:	4203      	tst	r3, r0
    981e:	f10c 0c04 	add.w	ip, ip, #4
    9822:	d0fa      	beq.n	981a <_malloc_r+0x4b2>
    9824:	e638      	b.n	9498 <_malloc_r+0x130>
    9826:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    982a:	d816      	bhi.n	985a <_malloc_r+0x4f2>
    982c:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    9830:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    9834:	ea4f 014c 	mov.w	r1, ip, lsl #1
    9838:	e5d8      	b.n	93ec <_malloc_r+0x84>
    983a:	2301      	movs	r3, #1
    983c:	f8c8 3004 	str.w	r3, [r8, #4]
    9840:	4644      	mov	r4, r8
    9842:	2200      	movs	r2, #0
    9844:	e727      	b.n	9696 <_malloc_r+0x32e>
    9846:	1092      	asrs	r2, r2, #2
    9848:	2001      	movs	r0, #1
    984a:	4090      	lsls	r0, r2
    984c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9850:	4619      	mov	r1, r3
    9852:	4302      	orrs	r2, r0
    9854:	f8c8 2004 	str.w	r2, [r8, #4]
    9858:	e77f      	b.n	975a <_malloc_r+0x3f2>
    985a:	f240 5354 	movw	r3, #1364	; 0x554
    985e:	459c      	cmp	ip, r3
    9860:	bf9d      	ittte	ls
    9862:	ea4f 4c95 	movls.w	ip, r5, lsr #18
    9866:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
    986a:	ea4f 014c 	movls.w	r1, ip, lsl #1
    986e:	21fc      	movhi	r1, #252	; 0xfc
    9870:	bf88      	it	hi
    9872:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
    9876:	e5b9      	b.n	93ec <_malloc_r+0x84>
    9878:	f3c2 010b 	ubfx	r1, r2, #0, #12
    987c:	2900      	cmp	r1, #0
    987e:	f47f ae9c 	bne.w	95ba <_malloc_r+0x252>
    9882:	eb0c 0109 	add.w	r1, ip, r9
    9886:	68b2      	ldr	r2, [r6, #8]
    9888:	f041 0101 	orr.w	r1, r1, #1
    988c:	6051      	str	r1, [r2, #4]
    988e:	e6ee      	b.n	966e <_malloc_r+0x306>
    9890:	f104 0108 	add.w	r1, r4, #8
    9894:	4638      	mov	r0, r7
    9896:	9200      	str	r2, [sp, #0]
    9898:	f000 f95c 	bl	9b54 <_free_r>
    989c:	9a00      	ldr	r2, [sp, #0]
    989e:	6813      	ldr	r3, [r2, #0]
    98a0:	e6e5      	b.n	966e <_malloc_r+0x306>
    98a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    98a6:	d803      	bhi.n	98b0 <_malloc_r+0x548>
    98a8:	0bca      	lsrs	r2, r1, #15
    98aa:	3277      	adds	r2, #119	; 0x77
    98ac:	0050      	lsls	r0, r2, #1
    98ae:	e741      	b.n	9734 <_malloc_r+0x3cc>
    98b0:	f240 5254 	movw	r2, #1364	; 0x554
    98b4:	4293      	cmp	r3, r2
    98b6:	bf9d      	ittte	ls
    98b8:	0c8a      	lsrls	r2, r1, #18
    98ba:	327c      	addls	r2, #124	; 0x7c
    98bc:	0050      	lslls	r0, r2, #1
    98be:	20fc      	movhi	r0, #252	; 0xfc
    98c0:	bf88      	it	hi
    98c2:	227e      	movhi	r2, #126	; 0x7e
    98c4:	e736      	b.n	9734 <_malloc_r+0x3cc>
    98c6:	6873      	ldr	r3, [r6, #4]
    98c8:	e79c      	b.n	9804 <_malloc_r+0x49c>
    98ca:	bf00      	nop

000098cc <memcmp>:
    98cc:	2a03      	cmp	r2, #3
    98ce:	b470      	push	{r4, r5, r6}
    98d0:	d914      	bls.n	98fc <memcmp+0x30>
    98d2:	ea40 0301 	orr.w	r3, r0, r1
    98d6:	079b      	lsls	r3, r3, #30
    98d8:	d111      	bne.n	98fe <memcmp+0x32>
    98da:	460c      	mov	r4, r1
    98dc:	4603      	mov	r3, r0
    98de:	6825      	ldr	r5, [r4, #0]
    98e0:	681e      	ldr	r6, [r3, #0]
    98e2:	4621      	mov	r1, r4
    98e4:	42ae      	cmp	r6, r5
    98e6:	4618      	mov	r0, r3
    98e8:	f104 0404 	add.w	r4, r4, #4
    98ec:	f103 0304 	add.w	r3, r3, #4
    98f0:	d104      	bne.n	98fc <memcmp+0x30>
    98f2:	3a04      	subs	r2, #4
    98f4:	2a03      	cmp	r2, #3
    98f6:	4618      	mov	r0, r3
    98f8:	4621      	mov	r1, r4
    98fa:	d8f0      	bhi.n	98de <memcmp+0x12>
    98fc:	b1c2      	cbz	r2, 9930 <memcmp+0x64>
    98fe:	7805      	ldrb	r5, [r0, #0]
    9900:	780c      	ldrb	r4, [r1, #0]
    9902:	42a5      	cmp	r5, r4
    9904:	bf04      	itt	eq
    9906:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
    990a:	2300      	moveq	r3, #0
    990c:	d006      	beq.n	991c <memcmp+0x50>
    990e:	e00c      	b.n	992a <memcmp+0x5e>
    9910:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    9914:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    9918:	42a5      	cmp	r5, r4
    991a:	d106      	bne.n	992a <memcmp+0x5e>
    991c:	4293      	cmp	r3, r2
    991e:	f103 0301 	add.w	r3, r3, #1
    9922:	d1f5      	bne.n	9910 <memcmp+0x44>
    9924:	2000      	movs	r0, #0
    9926:	bc70      	pop	{r4, r5, r6}
    9928:	4770      	bx	lr
    992a:	1b28      	subs	r0, r5, r4
    992c:	bc70      	pop	{r4, r5, r6}
    992e:	4770      	bx	lr
    9930:	4610      	mov	r0, r2
    9932:	e7f8      	b.n	9926 <memcmp+0x5a>

00009934 <memcpy>:
    9934:	4684      	mov	ip, r0
    9936:	ea41 0300 	orr.w	r3, r1, r0
    993a:	f013 0303 	ands.w	r3, r3, #3
    993e:	d149      	bne.n	99d4 <memcpy+0xa0>
    9940:	3a40      	subs	r2, #64	; 0x40
    9942:	d323      	bcc.n	998c <memcpy+0x58>
    9944:	680b      	ldr	r3, [r1, #0]
    9946:	6003      	str	r3, [r0, #0]
    9948:	684b      	ldr	r3, [r1, #4]
    994a:	6043      	str	r3, [r0, #4]
    994c:	688b      	ldr	r3, [r1, #8]
    994e:	6083      	str	r3, [r0, #8]
    9950:	68cb      	ldr	r3, [r1, #12]
    9952:	60c3      	str	r3, [r0, #12]
    9954:	690b      	ldr	r3, [r1, #16]
    9956:	6103      	str	r3, [r0, #16]
    9958:	694b      	ldr	r3, [r1, #20]
    995a:	6143      	str	r3, [r0, #20]
    995c:	698b      	ldr	r3, [r1, #24]
    995e:	6183      	str	r3, [r0, #24]
    9960:	69cb      	ldr	r3, [r1, #28]
    9962:	61c3      	str	r3, [r0, #28]
    9964:	6a0b      	ldr	r3, [r1, #32]
    9966:	6203      	str	r3, [r0, #32]
    9968:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    996a:	6243      	str	r3, [r0, #36]	; 0x24
    996c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    996e:	6283      	str	r3, [r0, #40]	; 0x28
    9970:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    9972:	62c3      	str	r3, [r0, #44]	; 0x2c
    9974:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    9976:	6303      	str	r3, [r0, #48]	; 0x30
    9978:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    997a:	6343      	str	r3, [r0, #52]	; 0x34
    997c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    997e:	6383      	str	r3, [r0, #56]	; 0x38
    9980:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    9982:	63c3      	str	r3, [r0, #60]	; 0x3c
    9984:	3040      	adds	r0, #64	; 0x40
    9986:	3140      	adds	r1, #64	; 0x40
    9988:	3a40      	subs	r2, #64	; 0x40
    998a:	d2db      	bcs.n	9944 <memcpy+0x10>
    998c:	3230      	adds	r2, #48	; 0x30
    998e:	d30b      	bcc.n	99a8 <memcpy+0x74>
    9990:	680b      	ldr	r3, [r1, #0]
    9992:	6003      	str	r3, [r0, #0]
    9994:	684b      	ldr	r3, [r1, #4]
    9996:	6043      	str	r3, [r0, #4]
    9998:	688b      	ldr	r3, [r1, #8]
    999a:	6083      	str	r3, [r0, #8]
    999c:	68cb      	ldr	r3, [r1, #12]
    999e:	60c3      	str	r3, [r0, #12]
    99a0:	3010      	adds	r0, #16
    99a2:	3110      	adds	r1, #16
    99a4:	3a10      	subs	r2, #16
    99a6:	d2f3      	bcs.n	9990 <memcpy+0x5c>
    99a8:	320c      	adds	r2, #12
    99aa:	d305      	bcc.n	99b8 <memcpy+0x84>
    99ac:	f851 3b04 	ldr.w	r3, [r1], #4
    99b0:	f840 3b04 	str.w	r3, [r0], #4
    99b4:	3a04      	subs	r2, #4
    99b6:	d2f9      	bcs.n	99ac <memcpy+0x78>
    99b8:	3204      	adds	r2, #4
    99ba:	d008      	beq.n	99ce <memcpy+0x9a>
    99bc:	07d2      	lsls	r2, r2, #31
    99be:	bf1c      	itt	ne
    99c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    99c4:	f800 3b01 	strbne.w	r3, [r0], #1
    99c8:	d301      	bcc.n	99ce <memcpy+0x9a>
    99ca:	880b      	ldrh	r3, [r1, #0]
    99cc:	8003      	strh	r3, [r0, #0]
    99ce:	4660      	mov	r0, ip
    99d0:	4770      	bx	lr
    99d2:	bf00      	nop
    99d4:	2a08      	cmp	r2, #8
    99d6:	d313      	bcc.n	9a00 <memcpy+0xcc>
    99d8:	078b      	lsls	r3, r1, #30
    99da:	d0b1      	beq.n	9940 <memcpy+0xc>
    99dc:	f010 0303 	ands.w	r3, r0, #3
    99e0:	d0ae      	beq.n	9940 <memcpy+0xc>
    99e2:	f1c3 0304 	rsb	r3, r3, #4
    99e6:	1ad2      	subs	r2, r2, r3
    99e8:	07db      	lsls	r3, r3, #31
    99ea:	bf1c      	itt	ne
    99ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
    99f0:	f800 3b01 	strbne.w	r3, [r0], #1
    99f4:	d3a4      	bcc.n	9940 <memcpy+0xc>
    99f6:	f831 3b02 	ldrh.w	r3, [r1], #2
    99fa:	f820 3b02 	strh.w	r3, [r0], #2
    99fe:	e79f      	b.n	9940 <memcpy+0xc>
    9a00:	3a04      	subs	r2, #4
    9a02:	d3d9      	bcc.n	99b8 <memcpy+0x84>
    9a04:	3a01      	subs	r2, #1
    9a06:	f811 3b01 	ldrb.w	r3, [r1], #1
    9a0a:	f800 3b01 	strb.w	r3, [r0], #1
    9a0e:	d2f9      	bcs.n	9a04 <memcpy+0xd0>
    9a10:	780b      	ldrb	r3, [r1, #0]
    9a12:	7003      	strb	r3, [r0, #0]
    9a14:	784b      	ldrb	r3, [r1, #1]
    9a16:	7043      	strb	r3, [r0, #1]
    9a18:	788b      	ldrb	r3, [r1, #2]
    9a1a:	7083      	strb	r3, [r0, #2]
    9a1c:	4660      	mov	r0, ip
    9a1e:	4770      	bx	lr

00009a20 <__malloc_lock>:
    9a20:	4770      	bx	lr
    9a22:	bf00      	nop

00009a24 <__malloc_unlock>:
    9a24:	4770      	bx	lr
    9a26:	bf00      	nop

00009a28 <_sbrk_r>:
    9a28:	b538      	push	{r3, r4, r5, lr}
    9a2a:	f243 74f4 	movw	r4, #14324	; 0x37f4
    9a2e:	2300      	movs	r3, #0
    9a30:	4605      	mov	r5, r0
    9a32:	f2c1 0400 	movt	r4, #4096	; 0x1000
    9a36:	4608      	mov	r0, r1
    9a38:	6023      	str	r3, [r4, #0]
    9a3a:	f000 f957 	bl	9cec <_sbrk>
    9a3e:	1c43      	adds	r3, r0, #1
    9a40:	d000      	beq.n	9a44 <_sbrk_r+0x1c>
    9a42:	bd38      	pop	{r3, r4, r5, pc}
    9a44:	6823      	ldr	r3, [r4, #0]
    9a46:	2b00      	cmp	r3, #0
    9a48:	d0fb      	beq.n	9a42 <_sbrk_r+0x1a>
    9a4a:	602b      	str	r3, [r5, #0]
    9a4c:	bd38      	pop	{r3, r4, r5, pc}
    9a4e:	bf00      	nop

00009a50 <strlen>:
    9a50:	f020 0103 	bic.w	r1, r0, #3
    9a54:	f010 0003 	ands.w	r0, r0, #3
    9a58:	f1c0 0000 	rsb	r0, r0, #0
    9a5c:	f851 3b04 	ldr.w	r3, [r1], #4
    9a60:	f100 0c04 	add.w	ip, r0, #4
    9a64:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    9a68:	f06f 0200 	mvn.w	r2, #0
    9a6c:	bf1c      	itt	ne
    9a6e:	fa22 f20c 	lsrne.w	r2, r2, ip
    9a72:	4313      	orrne	r3, r2
    9a74:	f04f 0c01 	mov.w	ip, #1
    9a78:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    9a7c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    9a80:	eba3 020c 	sub.w	r2, r3, ip
    9a84:	ea22 0203 	bic.w	r2, r2, r3
    9a88:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    9a8c:	bf04      	itt	eq
    9a8e:	f851 3b04 	ldreq.w	r3, [r1], #4
    9a92:	3004      	addeq	r0, #4
    9a94:	d0f4      	beq.n	9a80 <strlen+0x30>
    9a96:	f013 0fff 	tst.w	r3, #255	; 0xff
    9a9a:	bf1f      	itttt	ne
    9a9c:	3001      	addne	r0, #1
    9a9e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    9aa2:	3001      	addne	r0, #1
    9aa4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    9aa8:	bf18      	it	ne
    9aaa:	3001      	addne	r0, #1
    9aac:	4770      	bx	lr
    9aae:	bf00      	nop

00009ab0 <_malloc_trim_r>:
    9ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ab2:	f640 2404 	movw	r4, #2564	; 0xa04
    9ab6:	f2c1 0400 	movt	r4, #4096	; 0x1000
    9aba:	460f      	mov	r7, r1
    9abc:	4605      	mov	r5, r0
    9abe:	f7ff ffaf 	bl	9a20 <__malloc_lock>
    9ac2:	68a3      	ldr	r3, [r4, #8]
    9ac4:	685e      	ldr	r6, [r3, #4]
    9ac6:	f026 0603 	bic.w	r6, r6, #3
    9aca:	1bf7      	subs	r7, r6, r7
    9acc:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
    9ad0:	0b3f      	lsrs	r7, r7, #12
    9ad2:	3f01      	subs	r7, #1
    9ad4:	033f      	lsls	r7, r7, #12
    9ad6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    9ada:	db07      	blt.n	9aec <_malloc_trim_r+0x3c>
    9adc:	4628      	mov	r0, r5
    9ade:	2100      	movs	r1, #0
    9ae0:	f7ff ffa2 	bl	9a28 <_sbrk_r>
    9ae4:	68a3      	ldr	r3, [r4, #8]
    9ae6:	4433      	add	r3, r6
    9ae8:	4298      	cmp	r0, r3
    9aea:	d004      	beq.n	9af6 <_malloc_trim_r+0x46>
    9aec:	4628      	mov	r0, r5
    9aee:	f7ff ff99 	bl	9a24 <__malloc_unlock>
    9af2:	2000      	movs	r0, #0
    9af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9af6:	4628      	mov	r0, r5
    9af8:	4279      	negs	r1, r7
    9afa:	f7ff ff95 	bl	9a28 <_sbrk_r>
    9afe:	3001      	adds	r0, #1
    9b00:	d010      	beq.n	9b24 <_malloc_trim_r+0x74>
    9b02:	f241 0308 	movw	r3, #4104	; 0x1008
    9b06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9b0a:	681a      	ldr	r2, [r3, #0]
    9b0c:	68a1      	ldr	r1, [r4, #8]
    9b0e:	1bf6      	subs	r6, r6, r7
    9b10:	f046 0601 	orr.w	r6, r6, #1
    9b14:	4628      	mov	r0, r5
    9b16:	1bd7      	subs	r7, r2, r7
    9b18:	604e      	str	r6, [r1, #4]
    9b1a:	601f      	str	r7, [r3, #0]
    9b1c:	f7ff ff82 	bl	9a24 <__malloc_unlock>
    9b20:	2001      	movs	r0, #1
    9b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b24:	4628      	mov	r0, r5
    9b26:	2100      	movs	r1, #0
    9b28:	f7ff ff7e 	bl	9a28 <_sbrk_r>
    9b2c:	68a3      	ldr	r3, [r4, #8]
    9b2e:	1ac2      	subs	r2, r0, r3
    9b30:	2a0f      	cmp	r2, #15
    9b32:	dddb      	ble.n	9aec <_malloc_trim_r+0x3c>
    9b34:	f640 6110 	movw	r1, #3600	; 0xe10
    9b38:	f2c1 0100 	movt	r1, #4096	; 0x1000
    9b3c:	680c      	ldr	r4, [r1, #0]
    9b3e:	f241 0108 	movw	r1, #4104	; 0x1008
    9b42:	f042 0201 	orr.w	r2, r2, #1
    9b46:	1b00      	subs	r0, r0, r4
    9b48:	f2c1 0100 	movt	r1, #4096	; 0x1000
    9b4c:	605a      	str	r2, [r3, #4]
    9b4e:	6008      	str	r0, [r1, #0]
    9b50:	e7cc      	b.n	9aec <_malloc_trim_r+0x3c>
    9b52:	bf00      	nop

00009b54 <_free_r>:
    9b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9b58:	460e      	mov	r6, r1
    9b5a:	4681      	mov	r9, r0
    9b5c:	2900      	cmp	r1, #0
    9b5e:	d060      	beq.n	9c22 <_free_r+0xce>
    9b60:	f7ff ff5e 	bl	9a20 <__malloc_lock>
    9b64:	f856 1c04 	ldr.w	r1, [r6, #-4]
    9b68:	f1a6 0408 	sub.w	r4, r6, #8
    9b6c:	f021 0301 	bic.w	r3, r1, #1
    9b70:	18e2      	adds	r2, r4, r3
    9b72:	6857      	ldr	r7, [r2, #4]
    9b74:	f640 2504 	movw	r5, #2564	; 0xa04
    9b78:	f2c1 0500 	movt	r5, #4096	; 0x1000
    9b7c:	f027 0003 	bic.w	r0, r7, #3
    9b80:	68af      	ldr	r7, [r5, #8]
    9b82:	4297      	cmp	r7, r2
    9b84:	d062      	beq.n	9c4c <_free_r+0xf8>
    9b86:	f011 0c01 	ands.w	ip, r1, #1
    9b8a:	6050      	str	r0, [r2, #4]
    9b8c:	bf18      	it	ne
    9b8e:	2100      	movne	r1, #0
    9b90:	d111      	bne.n	9bb6 <_free_r+0x62>
    9b92:	f856 1c08 	ldr.w	r1, [r6, #-8]
    9b96:	f105 0808 	add.w	r8, r5, #8
    9b9a:	1a64      	subs	r4, r4, r1
    9b9c:	68a6      	ldr	r6, [r4, #8]
    9b9e:	440b      	add	r3, r1
    9ba0:	4546      	cmp	r6, r8
    9ba2:	bf1d      	ittte	ne
    9ba4:	f8d4 800c 	ldrne.w	r8, [r4, #12]
    9ba8:	4661      	movne	r1, ip
    9baa:	f8c6 800c 	strne.w	r8, [r6, #12]
    9bae:	2101      	moveq	r1, #1
    9bb0:	bf18      	it	ne
    9bb2:	f8c8 6008 	strne.w	r6, [r8, #8]
    9bb6:	1816      	adds	r6, r2, r0
    9bb8:	6876      	ldr	r6, [r6, #4]
    9bba:	07f6      	lsls	r6, r6, #31
    9bbc:	d408      	bmi.n	9bd0 <_free_r+0x7c>
    9bbe:	4403      	add	r3, r0
    9bc0:	6890      	ldr	r0, [r2, #8]
    9bc2:	b911      	cbnz	r1, 9bca <_free_r+0x76>
    9bc4:	4e48      	ldr	r6, [pc, #288]	; (9ce8 <_free_r+0x194>)
    9bc6:	42b0      	cmp	r0, r6
    9bc8:	d05f      	beq.n	9c8a <_free_r+0x136>
    9bca:	68d2      	ldr	r2, [r2, #12]
    9bcc:	60c2      	str	r2, [r0, #12]
    9bce:	6090      	str	r0, [r2, #8]
    9bd0:	f043 0201 	orr.w	r2, r3, #1
    9bd4:	6062      	str	r2, [r4, #4]
    9bd6:	50e3      	str	r3, [r4, r3]
    9bd8:	b9f1      	cbnz	r1, 9c18 <_free_r+0xc4>
    9bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9bde:	d322      	bcc.n	9c26 <_free_r+0xd2>
    9be0:	0a5a      	lsrs	r2, r3, #9
    9be2:	2a04      	cmp	r2, #4
    9be4:	d85a      	bhi.n	9c9c <_free_r+0x148>
    9be6:	0998      	lsrs	r0, r3, #6
    9be8:	3038      	adds	r0, #56	; 0x38
    9bea:	0041      	lsls	r1, r0, #1
    9bec:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    9bf0:	68aa      	ldr	r2, [r5, #8]
    9bf2:	f640 2104 	movw	r1, #2564	; 0xa04
    9bf6:	42aa      	cmp	r2, r5
    9bf8:	f2c1 0100 	movt	r1, #4096	; 0x1000
    9bfc:	d05a      	beq.n	9cb4 <_free_r+0x160>
    9bfe:	6851      	ldr	r1, [r2, #4]
    9c00:	f021 0103 	bic.w	r1, r1, #3
    9c04:	428b      	cmp	r3, r1
    9c06:	d202      	bcs.n	9c0e <_free_r+0xba>
    9c08:	6892      	ldr	r2, [r2, #8]
    9c0a:	4295      	cmp	r5, r2
    9c0c:	d1f7      	bne.n	9bfe <_free_r+0xaa>
    9c0e:	68d3      	ldr	r3, [r2, #12]
    9c10:	60e3      	str	r3, [r4, #12]
    9c12:	60a2      	str	r2, [r4, #8]
    9c14:	609c      	str	r4, [r3, #8]
    9c16:	60d4      	str	r4, [r2, #12]
    9c18:	4648      	mov	r0, r9
    9c1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9c1e:	f7ff bf01 	b.w	9a24 <__malloc_unlock>
    9c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9c26:	08db      	lsrs	r3, r3, #3
    9c28:	109a      	asrs	r2, r3, #2
    9c2a:	2001      	movs	r0, #1
    9c2c:	4090      	lsls	r0, r2
    9c2e:	6869      	ldr	r1, [r5, #4]
    9c30:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    9c34:	689a      	ldr	r2, [r3, #8]
    9c36:	4301      	orrs	r1, r0
    9c38:	6069      	str	r1, [r5, #4]
    9c3a:	60a2      	str	r2, [r4, #8]
    9c3c:	60e3      	str	r3, [r4, #12]
    9c3e:	4648      	mov	r0, r9
    9c40:	609c      	str	r4, [r3, #8]
    9c42:	60d4      	str	r4, [r2, #12]
    9c44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9c48:	f7ff beec 	b.w	9a24 <__malloc_unlock>
    9c4c:	07cf      	lsls	r7, r1, #31
    9c4e:	4418      	add	r0, r3
    9c50:	d407      	bmi.n	9c62 <_free_r+0x10e>
    9c52:	f856 1c08 	ldr.w	r1, [r6, #-8]
    9c56:	1a64      	subs	r4, r4, r1
    9c58:	68e3      	ldr	r3, [r4, #12]
    9c5a:	68a2      	ldr	r2, [r4, #8]
    9c5c:	4408      	add	r0, r1
    9c5e:	60d3      	str	r3, [r2, #12]
    9c60:	609a      	str	r2, [r3, #8]
    9c62:	f640 620c 	movw	r2, #3596	; 0xe0c
    9c66:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9c6a:	6813      	ldr	r3, [r2, #0]
    9c6c:	f040 0201 	orr.w	r2, r0, #1
    9c70:	4298      	cmp	r0, r3
    9c72:	6062      	str	r2, [r4, #4]
    9c74:	60ac      	str	r4, [r5, #8]
    9c76:	d3cf      	bcc.n	9c18 <_free_r+0xc4>
    9c78:	f241 0304 	movw	r3, #4100	; 0x1004
    9c7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9c80:	6819      	ldr	r1, [r3, #0]
    9c82:	4648      	mov	r0, r9
    9c84:	f7ff ff14 	bl	9ab0 <_malloc_trim_r>
    9c88:	e7c6      	b.n	9c18 <_free_r+0xc4>
    9c8a:	f043 0201 	orr.w	r2, r3, #1
    9c8e:	616c      	str	r4, [r5, #20]
    9c90:	612c      	str	r4, [r5, #16]
    9c92:	60e0      	str	r0, [r4, #12]
    9c94:	60a0      	str	r0, [r4, #8]
    9c96:	6062      	str	r2, [r4, #4]
    9c98:	50e3      	str	r3, [r4, r3]
    9c9a:	e7bd      	b.n	9c18 <_free_r+0xc4>
    9c9c:	2a14      	cmp	r2, #20
    9c9e:	bf9c      	itt	ls
    9ca0:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
    9ca4:	0041      	lslls	r1, r0, #1
    9ca6:	d9a1      	bls.n	9bec <_free_r+0x98>
    9ca8:	2a54      	cmp	r2, #84	; 0x54
    9caa:	d80b      	bhi.n	9cc4 <_free_r+0x170>
    9cac:	0b18      	lsrs	r0, r3, #12
    9cae:	306e      	adds	r0, #110	; 0x6e
    9cb0:	0041      	lsls	r1, r0, #1
    9cb2:	e79b      	b.n	9bec <_free_r+0x98>
    9cb4:	1080      	asrs	r0, r0, #2
    9cb6:	2501      	movs	r5, #1
    9cb8:	4085      	lsls	r5, r0
    9cba:	6848      	ldr	r0, [r1, #4]
    9cbc:	4613      	mov	r3, r2
    9cbe:	4328      	orrs	r0, r5
    9cc0:	6048      	str	r0, [r1, #4]
    9cc2:	e7a5      	b.n	9c10 <_free_r+0xbc>
    9cc4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    9cc8:	d803      	bhi.n	9cd2 <_free_r+0x17e>
    9cca:	0bd8      	lsrs	r0, r3, #15
    9ccc:	3077      	adds	r0, #119	; 0x77
    9cce:	0041      	lsls	r1, r0, #1
    9cd0:	e78c      	b.n	9bec <_free_r+0x98>
    9cd2:	f240 5154 	movw	r1, #1364	; 0x554
    9cd6:	428a      	cmp	r2, r1
    9cd8:	bf9d      	ittte	ls
    9cda:	0c98      	lsrls	r0, r3, #18
    9cdc:	307c      	addls	r0, #124	; 0x7c
    9cde:	0041      	lslls	r1, r0, #1
    9ce0:	21fc      	movhi	r1, #252	; 0xfc
    9ce2:	bf88      	it	hi
    9ce4:	207e      	movhi	r0, #126	; 0x7e
    9ce6:	e781      	b.n	9bec <_free_r+0x98>
    9ce8:	10000a0c 	.word	0x10000a0c

00009cec <_sbrk>:
    9cec:	f241 0330 	movw	r3, #4144	; 0x1030
    9cf0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9cf4:	6819      	ldr	r1, [r3, #0]
    9cf6:	f243 72f8 	movw	r2, #14328	; 0x37f8
    9cfa:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9cfe:	2900      	cmp	r1, #0
    9d00:	bf18      	it	ne
    9d02:	460a      	movne	r2, r1
    9d04:	4410      	add	r0, r2
    9d06:	6018      	str	r0, [r3, #0]
    9d08:	4610      	mov	r0, r2
    9d0a:	4770      	bx	lr
    9d0c:	00000043 	.word	0x00000043

00009d10 <_global_impure_ptr>:
    9d10:	10000020                                 ...

00009d14 <whitening_index>:
    9d14:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    9d24:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    9d34:	5a541b28 662f703f                       (.TZ?p/f

00009d3c <whitening>:
    9d3c:	01010101 01000100 00000100 00010000     ................
    9d4c:	01000101 00010101 01010100 00010000     ................
    9d5c:	01010001 01010000 00000000 00010100     ................
    9d6c:	01000101 01010100 00000100 00010100     ................
    9d7c:	00000100 00000100 00000000 01000001     ................
    9d8c:	01010000 00000100 01010101 01010100     ................
    9d9c:	00000000 01010101 00010101 01010000     ................
    9dac:	01010001 01000000 00000100 75010001              ...............

00009dbb <compile_info>:
    9dbb:	72656275 746f6f74 30322068 302d3731     ubertooth 2017-0
    9dcb:	32522d33 776d2820 6d406c6e 2d6c6e77     3-R2 (mwnl@mwnl-
    9ddb:	6f6e656c 20296f76 38313032 3730202e     lenovo) 2018. 07
    9deb:	3931202e eb28202e 2029a9aa 323a3232     . 19. (...) 22:2
    9dfb:	32333a38 54534b20 bcb24000                       8:32 KST.

00009e04 <whitening_word>:
    9e04:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    9e14:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    9e24:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    9e34:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    9e44:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    9e54:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    9e64:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    9e74:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    9e84:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    9e94:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    9ea4:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    9eb4:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    9ec4:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    9ed4:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    9ee4:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    9ef4:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    9f04:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    9f14:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    9f24:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    9f34:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    9f44:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    9f54:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    9f64:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    9f74:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    9f84:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    9f94:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    9fa4:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    9fb4:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    9fc4:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    9fd4:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    9fe4:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    9ff4:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    a004:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    a014:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    a024:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    a034:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    a044:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    a054:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    a064:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    a074:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    a084:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    a094:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    a0a4:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    a0b4:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    a0c4:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    a0d4:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    a0e4:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    a0f4:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    a104:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    a114:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    a124:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    a134:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    a144:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    a154:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    a164:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    a174:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    a184:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    a194:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    a1a4:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    a1b4:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    a1c4:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    a1d4:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    a1e4:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    a1f4:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    a204:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    a214:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    a224:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    a234:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    a244:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    a254:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    a264:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    a274:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    a284:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    a294:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    a2a4:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    a2b4:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    a2c4:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    a2d4:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    a2e4:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    a2f4:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    a304:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    a314:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    a324:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    a334:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    a344:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    a354:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    a364:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    a374:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    a384:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    a394:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    a3a4:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    a3b4:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    a3c4:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    a3d4:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    a3e4:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    a3f4:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    a404:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    a414:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    a424:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    a434:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    a444:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    a454:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    a464:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    a474:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    a484:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    a494:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    a4a4:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    a4b4:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    a4c4:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    a4d4:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    a4e4:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    a4f4:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    a504:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    a514:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    a524:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    a534:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    a544:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    a554:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    a564:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    a574:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000a584 <hop_interval_lut>:
    a584:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    a594:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    a5a4:	120c0916 00000024 00000001 00000001     ....$...........
    a5b4:	00000001 00000001 097a0962 1d4209b0     ........b.z...B.
    a5c4:	ffffffff 0303ffff 1612feaa 0010feaa     ................
    a5d4:	096caa02 099e0985 37313032 2d33302d     ..l.....2017-03-
    a5e4:	00003252                                         R2.

0000a5e7 <index1.3911>:
    a5e7:	03010200 03000100 01020001 03010100              ..............

0000a5f5 <index2.3912>:
    a5f5:	04020301 04020304 03040304 387b0203     ..............{8
    a605:	37346361 2d383861 36326363 6161342d     ac47a88-cc26-4aa
    a615:	38382d39 342d6237 38616332 37306663     9-887b-42ca8cf07
    a625:	7d333661 68000000                                a63}...

0000a62c <channels>:
    a62c:	09720968 09a50977                       h.r.w...

0000a634 <follow_handler.4002>:
    a634:	00008129 00008149 0000844d 000082a5     )...I...M.......
    a644:	00008125 00008125 00008125              %...%...%...

0000a650 <continuous_rx_handler.4003>:
    a650:	00008141 00008149 0000836d 00008125     A...I...m...%...
    a660:	00008125 00008125                       %...%...

0000a668 <jam_handler.4004>:
    a668:	00008129 00008149 000083e9 000082ed     )...I...........
    a678:	00008201 0000830d                       ........

0000a680 <iap_entry>:
    a680:	1fff1ff1                                ....

0000a684 <abExtendedOsFeatureDescriptor>:
    a684:	00000028 00040100 00000001 00000000     (...............
    a694:	49570100 4253554e 00000000 00000000     ..WINUSB........
    a6a4:	00000000 00000000                       ........

0000a6ac <_init>:
    a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6ae:	bf00      	nop
    a6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a6b2:	bc08      	pop	{r3}
    a6b4:	469e      	mov	lr, r3
    a6b6:	4770      	bx	lr

0000a6b8 <__init_array_start>:
    a6b8:	00004371 	.word	0x00004371

0000a6bc <__frame_dummy_init_array_entry>:
    a6bc:	00004155                                UA..

0000a6c0 <_fini>:
    a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6c2:	bf00      	nop
    a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a6c6:	bc08      	pop	{r3}
    a6c8:	469e      	mov	lr, r3
    a6ca:	4770      	bx	lr

0000a6cc <__fini_array_start>:
    a6cc:	00004125 	.word	0x00004125

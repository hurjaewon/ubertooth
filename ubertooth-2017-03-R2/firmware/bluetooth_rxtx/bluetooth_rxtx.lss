
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005630  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000009dd  10000020  00009630  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002954  10000a00  0000a00d  00010a00  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000109fd  2**0
                  CONTENTS, READONLY
  5 .comment      0000001f  00000000  00000000  00010a26  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000b7fe  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ef0  00000000  00000000  0001c243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000056e4  00000000  00000000  0001f133  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000858  00000000  00000000  00024818  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008b0  00000000  00000000  00025070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000033b6  00000000  00000000  00025920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002d79  00000000  00000000  00028cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001460  00000000  00000000  0002ba50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 19 7d 00 00 6d 7d 00 00 6d 7d 00 00     .?...}..m}..m}..
    4010:	6d 7d 00 00 6d 7d 00 00 6d 7d 00 00 00 00 00 00     m}..m}..m}......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 6d 7d 00 00     ............m}..
    4030:	6d 7d 00 00 00 00 00 00 6d 7d 00 00 6d 7d 00 00     m}......m}..m}..
    4040:	6d 7d 00 00 7d 4f 00 00 6d 7d 00 00 6d 7d 00 00     m}..}O..m}..m}..
    4050:	6d 7d 00 00 6d 7d 00 00 6d 7d 00 00 6d 7d 00 00     m}..m}..m}..m}..
    4060:	6d 7d 00 00 6d 7d 00 00 6d 7d 00 00 6d 7d 00 00     m}..m}..m}..m}..
    4070:	6d 7d 00 00 6d 7d 00 00 6d 7d 00 00 6d 7d 00 00     m}..m}..m}..m}..
    4080:	6d 7d 00 00 6d 7d 00 00 6d 7d 00 00 6d 7d 00 00     m}..m}..m}..m}..
    4090:	6d 7d 00 00 bd 50 00 00 6d 7d 00 00 6d 7d 00 00     m}...P..m}..m}..
    40a0:	15 7d 00 00 6d 7d 00 00 f1 50 00 00 6d 7d 00 00     .}..m}...P..m}..
    40b0:	6d 7d 00 00 6d 7d 00 00 6d 7d 00 00 6d 7d 00 00     m}..m}..m}..m}..
    40c0:	6d 7d 00 00 6d 7d 00 00 6d 7d 00 00                 m}..m}..m}..

000040cc <deregister_tm_clones>:
    40cc:	b508      	push	{r3, lr}
    40ce:	f640 2000 	movw	r0, #2560	; 0xa00
    40d2:	4b07      	ldr	r3, [pc, #28]	; (40f0 <deregister_tm_clones+0x24>)
    40d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    40d8:	1a1b      	subs	r3, r3, r0
    40da:	2b06      	cmp	r3, #6
    40dc:	d800      	bhi.n	40e0 <deregister_tm_clones+0x14>
    40de:	bd08      	pop	{r3, pc}
    40e0:	f240 0300 	movw	r3, #0
    40e4:	f2c0 0300 	movt	r3, #0
    40e8:	2b00      	cmp	r3, #0
    40ea:	d0f8      	beq.n	40de <deregister_tm_clones+0x12>
    40ec:	4798      	blx	r3
    40ee:	e7f6      	b.n	40de <deregister_tm_clones+0x12>
    40f0:	10000a03 	.word	0x10000a03

000040f4 <register_tm_clones>:
    40f4:	b508      	push	{r3, lr}
    40f6:	f640 2000 	movw	r0, #2560	; 0xa00
    40fa:	f640 2300 	movw	r3, #2560	; 0xa00
    40fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4102:	f2c1 0000 	movt	r0, #4096	; 0x1000
    4106:	1a1b      	subs	r3, r3, r0
    4108:	109b      	asrs	r3, r3, #2
    410a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    410e:	1059      	asrs	r1, r3, #1
    4110:	d100      	bne.n	4114 <register_tm_clones+0x20>
    4112:	bd08      	pop	{r3, pc}
    4114:	f240 0200 	movw	r2, #0
    4118:	f2c0 0200 	movt	r2, #0
    411c:	2a00      	cmp	r2, #0
    411e:	d0f8      	beq.n	4112 <register_tm_clones+0x1e>
    4120:	4790      	blx	r2
    4122:	e7f6      	b.n	4112 <register_tm_clones+0x1e>

00004124 <__do_global_dtors_aux>:
    4124:	b510      	push	{r4, lr}
    4126:	f640 2400 	movw	r4, #2560	; 0xa00
    412a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    412e:	7823      	ldrb	r3, [r4, #0]
    4130:	b973      	cbnz	r3, 4150 <__do_global_dtors_aux+0x2c>
    4132:	f7ff ffcb 	bl	40cc <deregister_tm_clones>
    4136:	f240 0300 	movw	r3, #0
    413a:	f2c0 0300 	movt	r3, #0
    413e:	b12b      	cbz	r3, 414c <__do_global_dtors_aux+0x28>
    4140:	f249 6008 	movw	r0, #38408	; 0x9608
    4144:	f2c0 0000 	movt	r0, #0
    4148:	f3af 8000 	nop.w
    414c:	2301      	movs	r3, #1
    414e:	7023      	strb	r3, [r4, #0]
    4150:	bd10      	pop	{r4, pc}
    4152:	bf00      	nop

00004154 <frame_dummy>:
    4154:	b508      	push	{r3, lr}
    4156:	f240 0300 	movw	r3, #0
    415a:	f2c0 0300 	movt	r3, #0
    415e:	b14b      	cbz	r3, 4174 <frame_dummy+0x20>
    4160:	f249 6008 	movw	r0, #38408	; 0x9608
    4164:	f640 2104 	movw	r1, #2564	; 0xa04
    4168:	f2c0 0000 	movt	r0, #0
    416c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4170:	f3af 8000 	nop.w
    4174:	f640 2000 	movw	r0, #2560	; 0xa00
    4178:	f2c1 0000 	movt	r0, #4096	; 0x1000
    417c:	6803      	ldr	r3, [r0, #0]
    417e:	b12b      	cbz	r3, 418c <frame_dummy+0x38>
    4180:	f240 0300 	movw	r3, #0
    4184:	f2c0 0300 	movt	r3, #0
    4188:	b103      	cbz	r3, 418c <frame_dummy+0x38>
    418a:	4798      	blx	r3
    418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4190:	e7b0      	b.n	40f4 <register_tm_clones>
    4192:	bf00      	nop

00004194 <atexit>:
    4194:	4601      	mov	r1, r0
    4196:	2000      	movs	r0, #0
    4198:	4602      	mov	r2, r0
    419a:	4603      	mov	r3, r0
    419c:	f000 b892 	b.w	42c4 <__register_exitproc>

000041a0 <__libc_fini_array>:
    41a0:	b538      	push	{r3, r4, r5, lr}
    41a2:	f249 642c 	movw	r4, #38444	; 0x962c
    41a6:	f249 6528 	movw	r5, #38440	; 0x9628
    41aa:	f2c0 0500 	movt	r5, #0
    41ae:	f2c0 0400 	movt	r4, #0
    41b2:	1b64      	subs	r4, r4, r5
    41b4:	10a4      	asrs	r4, r4, #2
    41b6:	bf18      	it	ne
    41b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    41bc:	d005      	beq.n	41ca <__libc_fini_array+0x2a>
    41be:	3c01      	subs	r4, #1
    41c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    41c4:	4798      	blx	r3
    41c6:	2c00      	cmp	r4, #0
    41c8:	d1f9      	bne.n	41be <__libc_fini_array+0x1e>
    41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41ce:	f005 ba25 	b.w	961c <_fini>
    41d2:	bf00      	nop

000041d4 <__libc_init_array>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	f249 6614 	movw	r6, #38420	; 0x9614
    41da:	f249 6514 	movw	r5, #38420	; 0x9614
    41de:	f2c0 0500 	movt	r5, #0
    41e2:	f2c0 0600 	movt	r6, #0
    41e6:	1b76      	subs	r6, r6, r5
    41e8:	10b6      	asrs	r6, r6, #2
    41ea:	bf1c      	itt	ne
    41ec:	3d04      	subne	r5, #4
    41ee:	2400      	movne	r4, #0
    41f0:	d005      	beq.n	41fe <__libc_init_array+0x2a>
    41f2:	3401      	adds	r4, #1
    41f4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    41f8:	4798      	blx	r3
    41fa:	42a6      	cmp	r6, r4
    41fc:	d1f9      	bne.n	41f2 <__libc_init_array+0x1e>
    41fe:	f249 661c 	movw	r6, #38428	; 0x961c
    4202:	f249 6514 	movw	r5, #38420	; 0x9614
    4206:	f2c0 0500 	movt	r5, #0
    420a:	f2c0 0600 	movt	r6, #0
    420e:	1b76      	subs	r6, r6, r5
    4210:	f005 f9fa 	bl	9608 <_init>
    4214:	10b6      	asrs	r6, r6, #2
    4216:	bf1c      	itt	ne
    4218:	3d04      	subne	r5, #4
    421a:	2400      	movne	r4, #0
    421c:	d006      	beq.n	422c <__libc_init_array+0x58>
    421e:	3401      	adds	r4, #1
    4220:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4224:	4798      	blx	r3
    4226:	42a6      	cmp	r6, r4
    4228:	d1f9      	bne.n	421e <__libc_init_array+0x4a>
    422a:	bd70      	pop	{r4, r5, r6, pc}
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	bf00      	nop

00004230 <memset>:
    4230:	b4f0      	push	{r4, r5, r6, r7}
    4232:	0784      	lsls	r4, r0, #30
    4234:	d043      	beq.n	42be <memset+0x8e>
    4236:	1e54      	subs	r4, r2, #1
    4238:	2a00      	cmp	r2, #0
    423a:	d03e      	beq.n	42ba <memset+0x8a>
    423c:	b2cd      	uxtb	r5, r1
    423e:	4603      	mov	r3, r0
    4240:	e003      	b.n	424a <memset+0x1a>
    4242:	1e62      	subs	r2, r4, #1
    4244:	2c00      	cmp	r4, #0
    4246:	d038      	beq.n	42ba <memset+0x8a>
    4248:	4614      	mov	r4, r2
    424a:	f803 5b01 	strb.w	r5, [r3], #1
    424e:	079a      	lsls	r2, r3, #30
    4250:	d1f7      	bne.n	4242 <memset+0x12>
    4252:	2c03      	cmp	r4, #3
    4254:	d92a      	bls.n	42ac <memset+0x7c>
    4256:	b2cd      	uxtb	r5, r1
    4258:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    425c:	2c0f      	cmp	r4, #15
    425e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4262:	d915      	bls.n	4290 <memset+0x60>
    4264:	f1a4 0710 	sub.w	r7, r4, #16
    4268:	093f      	lsrs	r7, r7, #4
    426a:	f103 0610 	add.w	r6, r3, #16
    426e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    4272:	461a      	mov	r2, r3
    4274:	6015      	str	r5, [r2, #0]
    4276:	6055      	str	r5, [r2, #4]
    4278:	6095      	str	r5, [r2, #8]
    427a:	60d5      	str	r5, [r2, #12]
    427c:	3210      	adds	r2, #16
    427e:	42b2      	cmp	r2, r6
    4280:	d1f8      	bne.n	4274 <memset+0x44>
    4282:	f004 040f 	and.w	r4, r4, #15
    4286:	3701      	adds	r7, #1
    4288:	2c03      	cmp	r4, #3
    428a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    428e:	d90d      	bls.n	42ac <memset+0x7c>
    4290:	461e      	mov	r6, r3
    4292:	4622      	mov	r2, r4
    4294:	3a04      	subs	r2, #4
    4296:	2a03      	cmp	r2, #3
    4298:	f846 5b04 	str.w	r5, [r6], #4
    429c:	d8fa      	bhi.n	4294 <memset+0x64>
    429e:	1f22      	subs	r2, r4, #4
    42a0:	f022 0203 	bic.w	r2, r2, #3
    42a4:	3204      	adds	r2, #4
    42a6:	4413      	add	r3, r2
    42a8:	f004 0403 	and.w	r4, r4, #3
    42ac:	b12c      	cbz	r4, 42ba <memset+0x8a>
    42ae:	b2c9      	uxtb	r1, r1
    42b0:	441c      	add	r4, r3
    42b2:	f803 1b01 	strb.w	r1, [r3], #1
    42b6:	42a3      	cmp	r3, r4
    42b8:	d1fb      	bne.n	42b2 <memset+0x82>
    42ba:	bcf0      	pop	{r4, r5, r6, r7}
    42bc:	4770      	bx	lr
    42be:	4614      	mov	r4, r2
    42c0:	4603      	mov	r3, r0
    42c2:	e7c6      	b.n	4252 <memset+0x22>

000042c4 <__register_exitproc>:
    42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c6:	f648 4470 	movw	r4, #35952	; 0x8c70
    42ca:	f2c0 0400 	movt	r4, #0
    42ce:	6826      	ldr	r6, [r4, #0]
    42d0:	b085      	sub	sp, #20
    42d2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    42d6:	4607      	mov	r7, r0
    42d8:	2c00      	cmp	r4, #0
    42da:	d043      	beq.n	4364 <__register_exitproc+0xa0>
    42dc:	6865      	ldr	r5, [r4, #4]
    42de:	2d1f      	cmp	r5, #31
    42e0:	dd21      	ble.n	4326 <__register_exitproc+0x62>
    42e2:	f240 0400 	movw	r4, #0
    42e6:	f2c0 0400 	movt	r4, #0
    42ea:	b91c      	cbnz	r4, 42f4 <__register_exitproc+0x30>
    42ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f0:	b005      	add	sp, #20
    42f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42f8:	9103      	str	r1, [sp, #12]
    42fa:	9202      	str	r2, [sp, #8]
    42fc:	9301      	str	r3, [sp, #4]
    42fe:	f3af 8000 	nop.w
    4302:	9903      	ldr	r1, [sp, #12]
    4304:	4604      	mov	r4, r0
    4306:	9a02      	ldr	r2, [sp, #8]
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	2800      	cmp	r0, #0
    430c:	d0ee      	beq.n	42ec <__register_exitproc+0x28>
    430e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    4312:	2000      	movs	r0, #0
    4314:	6025      	str	r5, [r4, #0]
    4316:	6060      	str	r0, [r4, #4]
    4318:	4605      	mov	r5, r0
    431a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    431e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    4322:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    4326:	b93f      	cbnz	r7, 4338 <__register_exitproc+0x74>
    4328:	1c6b      	adds	r3, r5, #1
    432a:	2000      	movs	r0, #0
    432c:	3502      	adds	r5, #2
    432e:	6063      	str	r3, [r4, #4]
    4330:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    4334:	b005      	add	sp, #20
    4336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4338:	2601      	movs	r6, #1
    433a:	40ae      	lsls	r6, r5
    433c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    4340:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    4344:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    4348:	2f02      	cmp	r7, #2
    434a:	ea42 0206 	orr.w	r2, r2, r6
    434e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    4352:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4356:	bf02      	ittt	eq
    4358:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
    435c:	431e      	orreq	r6, r3
    435e:	f8c4 618c 	streq.w	r6, [r4, #396]	; 0x18c
    4362:	e7e1      	b.n	4328 <__register_exitproc+0x64>
    4364:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    4368:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    436c:	e7b6      	b.n	42dc <__register_exitproc+0x18>
    436e:	bf00      	nop

00004370 <register_fini>:
    4370:	f240 0300 	movw	r3, #0
    4374:	f2c0 0300 	movt	r3, #0
    4378:	b12b      	cbz	r3, 4386 <register_fini+0x16>
    437a:	f244 10a1 	movw	r0, #16801	; 0x41a1
    437e:	f2c0 0000 	movt	r0, #0
    4382:	f7ff bf07 	b.w	4194 <atexit>
    4386:	4770      	bx	lr

00004388 <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    4388:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    438a:	2300      	movs	r3, #0
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;
    438c:	461a      	mov	r2, r3

	for(size_t i=0; i<8; i++)
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    438e:	fa40 f103 	asr.w	r1, r0, r3
    4392:	f1c3 0407 	rsb	r4, r3, #7
    4396:	f001 0101 	and.w	r1, r1, #1
    439a:	40a1      	lsls	r1, r4

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    439c:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    439e:	430a      	orrs	r2, r1

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43a0:	2b08      	cmp	r3, #8
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    43a2:	b2d2      	uxtb	r2, r2

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43a4:	d1f3      	bne.n	438e <reverse8+0x6>
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
	}

	return reversed;
}
    43a6:	4610      	mov	r0, r2
    43a8:	bd10      	pop	{r4, pc}
    43aa:	0000      	movs	r0, r0

000043ac <cc2400_rx>:
	target.syncword = 0;
}

/* start un-buffered rx */
static void cc2400_rx()
{
    43ac:	b538      	push	{r3, r4, r5, lr}
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    43ae:	4b25      	ldr	r3, [pc, #148]	; (4444 <cc2400_rx+0x98>)
    43b0:	4c25      	ldr	r4, [pc, #148]	; (4448 <cc2400_rx+0x9c>)
    43b2:	781a      	ldrb	r2, [r3, #0]
    43b4:	b112      	cbz	r2, 43bc <cc2400_rx+0x10>
    43b6:	781a      	ldrb	r2, [r3, #0]
    43b8:	2a01      	cmp	r2, #1
    43ba:	d128      	bne.n	440e <cc2400_rx+0x62>
		if (modulation == MOD_BT_BASIC_RATE) {
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	b133      	cbz	r3, 43ce <cc2400_rx+0x22>
			mdmctrl = 0x0029; // 160 kHz frequency deviation
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    43c0:	4b20      	ldr	r3, [pc, #128]	; (4444 <cc2400_rx+0x98>)
    43c2:	781d      	ldrb	r5, [r3, #0]
}

/* start un-buffered rx */
static void cc2400_rx()
{
	u16 mdmctrl = 0;
    43c4:	2d01      	cmp	r5, #1
    43c6:	bf0c      	ite	eq
    43c8:	2540      	moveq	r5, #64	; 0x40
    43ca:	2500      	movne	r5, #0
    43cc:	e000      	b.n	43d0 <cc2400_rx+0x24>

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
		if (modulation == MOD_BT_BASIC_RATE) {
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    43ce:	2529      	movs	r5, #41	; 0x29
		} else if (modulation == MOD_BT_LOW_ENERGY) {
			mdmctrl = 0x0040; // 250 kHz frequency deviation
		}
		cc2400_set(MANAND,  0x7fff);
    43d0:	200d      	movs	r0, #13
    43d2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    43d6:	f003 fdcc 	bl	7f72 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    43da:	2012      	movs	r0, #18
    43dc:	f642 3122 	movw	r1, #11042	; 0x2b22
    43e0:	f003 fdc7 	bl	7f72 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
    43e4:	2014      	movs	r0, #20
    43e6:	f241 314b 	movw	r1, #4939	; 0x134b
    43ea:	f003 fdc2 	bl	7f72 <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    43ee:	2020      	movs	r0, #32
    43f0:	f240 1101 	movw	r1, #257	; 0x101
    43f4:	f003 fdbd 	bl	7f72 <cc2400_set>
		//      |  | |   |  +--------> CRC off
		//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
		//      |  | +---------------> 2 preamble bytes of 01010101
		//      |  +-----------------> not packet mode
			//      +--------------------> un-buffered mode
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    43f8:	8821      	ldrh	r1, [r4, #0]
    43fa:	2002      	movs	r0, #2
    43fc:	b289      	uxth	r1, r1
    43fe:	3901      	subs	r1, #1
    4400:	b289      	uxth	r1, r1
    4402:	f003 fdb6 	bl	7f72 <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    4406:	2003      	movs	r0, #3
    4408:	4629      	mov	r1, r5
    440a:	f003 fdb2 	bl	7f72 <cc2400_set>
	}

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    440e:	8820      	ldrh	r0, [r4, #0]
    4410:	b280      	uxth	r0, r0
    4412:	f002 fe2b 	bl	706c <cs_threshold_calc_and_set>

	clkn_start();
    4416:	f002 fec1 	bl	719c <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    441a:	f003 fe4d 	bl	80b8 <cc2400_status>
    441e:	0642      	lsls	r2, r0, #25
    4420:	d5fb      	bpl.n	441a <cc2400_rx+0x6e>
	cc2400_strobe(SFSON);
    4422:	2061      	movs	r0, #97	; 0x61
    4424:	f003 fe4f 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4428:	f003 fe46 	bl	80b8 <cc2400_status>
    442c:	0743      	lsls	r3, r0, #29
    442e:	d5fb      	bpl.n	4428 <cc2400_rx+0x7c>
	cc2400_strobe(SRX);
    4430:	2062      	movs	r0, #98	; 0x62
    4432:	f003 fe48 	bl	80c6 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    4436:	4b05      	ldr	r3, [pc, #20]	; (444c <cc2400_rx+0xa0>)
    4438:	2280      	movs	r2, #128	; 0x80
    443a:	601a      	str	r2, [r3, #0]
	HGM_SET;
    443c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4440:	601a      	str	r2, [r3, #0]
    4442:	bd38      	pop	{r3, r4, r5, pc}
    4444:	10000a1c 	.word	0x10000a1c
    4448:	10000448 	.word	0x10000448
    444c:	2009c058 	.word	0x2009c058

00004450 <cc2400_rx_sync>:
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4450:	b570      	push	{r4, r5, r6, lr}
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4452:	4b28      	ldr	r3, [pc, #160]	; (44f4 <cc2400_rx_sync+0xa4>)
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4454:	4604      	mov	r4, r0
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4456:	781a      	ldrb	r2, [r3, #0]
    4458:	b132      	cbz	r2, 4468 <cc2400_rx_sync+0x18>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	2b01      	cmp	r3, #1
    445e:	d147      	bne.n	44f0 <cc2400_rx_sync+0xa0>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    4460:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    4462:	f240 5661 	movw	r6, #1377	; 0x561
    4466:	e002      	b.n	446e <cc2400_rx_sync+0x1e>
static void cc2400_rx_sync(u32 sync)
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    4468:	2529      	movs	r5, #41	; 0x29
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    446a:	f240 4661 	movw	r6, #1121	; 0x461
	} else {
		/* oops */
		return;
	}

	cc2400_set(MANAND,  0x7fff);
    446e:	200d      	movs	r0, #13
    4470:	f647 71ff 	movw	r1, #32767	; 0x7fff
    4474:	f003 fd7d 	bl	7f72 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    4478:	2012      	movs	r0, #18
    447a:	f642 3122 	movw	r1, #11042	; 0x2b22
    447e:	f003 fd78 	bl	7f72 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    4482:	2014      	movs	r0, #20
    4484:	f241 214b 	movw	r1, #4683	; 0x124b
    4488:	f003 fd73 	bl	7f72 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    448c:	2020      	movs	r0, #32
    448e:	4631      	mov	r1, r6
    4490:	f003 fd6f 	bl	7f72 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    4494:	b2a1      	uxth	r1, r4
    4496:	202c      	movs	r0, #44	; 0x2c
    4498:	f003 fd6b 	bl	7f72 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    449c:	0c21      	lsrs	r1, r4, #16

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    449e:	4c16      	ldr	r4, [pc, #88]	; (44f8 <cc2400_rx_sync+0xa8>)
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    44a0:	202d      	movs	r0, #45	; 0x2d
    44a2:	f003 fd66 	bl	7f72 <cc2400_set>

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    44a6:	8821      	ldrh	r1, [r4, #0]
    44a8:	2002      	movs	r0, #2
    44aa:	b289      	uxth	r1, r1
    44ac:	3901      	subs	r1, #1
    44ae:	b289      	uxth	r1, r1
    44b0:	f003 fd5f 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    44b4:	2003      	movs	r0, #3
    44b6:	4629      	mov	r1, r5
    44b8:	f003 fd5b 	bl	7f72 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    44bc:	8820      	ldrh	r0, [r4, #0]
    44be:	b280      	uxth	r0, r0
    44c0:	f002 fdd4 	bl	706c <cs_threshold_calc_and_set>

	clkn_start();
    44c4:	f002 fe6a 	bl	719c <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    44c8:	f003 fdf6 	bl	80b8 <cc2400_status>
    44cc:	0640      	lsls	r0, r0, #25
    44ce:	d5fb      	bpl.n	44c8 <cc2400_rx_sync+0x78>
	cc2400_strobe(SFSON);
    44d0:	2061      	movs	r0, #97	; 0x61
    44d2:	f003 fdf8 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    44d6:	f003 fdef 	bl	80b8 <cc2400_status>
    44da:	0741      	lsls	r1, r0, #29
    44dc:	d5fb      	bpl.n	44d6 <cc2400_rx_sync+0x86>
	cc2400_strobe(SRX);
    44de:	2062      	movs	r0, #98	; 0x62
    44e0:	f003 fdf1 	bl	80c6 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    44e4:	4b05      	ldr	r3, [pc, #20]	; (44fc <cc2400_rx_sync+0xac>)
    44e6:	2280      	movs	r2, #128	; 0x80
    44e8:	601a      	str	r2, [r3, #0]
	HGM_SET;
    44ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    44ee:	601a      	str	r2, [r3, #0]
    44f0:	bd70      	pop	{r4, r5, r6, pc}
    44f2:	bf00      	nop
    44f4:	10000a1c 	.word	0x10000a1c
    44f8:	10000448 	.word	0x10000448
    44fc:	2009c058 	.word	0x2009c058

00004500 <enqueue>:

/* Unpacked symbol buffers (two rxbufs) */
char unpacked[DMA_SIZE*8*2];

static int enqueue(uint8_t type, uint8_t* buf)
{
    4500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4502:	4606      	mov	r6, r0
    4504:	460f      	mov	r7, r1
	usb_pkt_rx* f = usb_enqueue();
    4506:	f002 fcd1 	bl	6eac <usb_enqueue>
    450a:	4d1e      	ldr	r5, [pc, #120]	; (4584 <enqueue+0x84>)

	/* fail if queue is full */
	if (f == NULL) {
    450c:	4604      	mov	r4, r0
    450e:	b920      	cbnz	r0, 451a <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    4510:	786b      	ldrb	r3, [r5, #1]
    4512:	f043 0304 	orr.w	r3, r3, #4
    4516:	706b      	strb	r3, [r5, #1]
		return 0;
    4518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	f->pkt_type = type;
	if(type == SPECAN) {
    451a:	2e04      	cmp	r6, #4
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    451c:	7006      	strb	r6, [r0, #0]
	if(type == SPECAN) {
    451e:	d10e      	bne.n	453e <enqueue+0x3e>
		f->clkn_high = (clkn >> 20) & 0xff;
    4520:	4b19      	ldr	r3, [pc, #100]	; (4588 <enqueue+0x88>)
		f->clk100ns = CLK100NS;
    4522:	f640 4135 	movw	r1, #3125	; 0xc35
		return 0;
	}

	f->pkt_type = type;
	if(type == SPECAN) {
		f->clkn_high = (clkn >> 20) & 0xff;
    4526:	681a      	ldr	r2, [r3, #0]
    4528:	0d12      	lsrs	r2, r2, #20
    452a:	70c2      	strb	r2, [r0, #3]
		f->clk100ns = CLK100NS;
    452c:	4a17      	ldr	r2, [pc, #92]	; (458c <enqueue+0x8c>)
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	6812      	ldr	r2, [r2, #0]
    4532:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4536:	fb01 2303 	mla	r3, r1, r3, r2
    453a:	6043      	str	r3, [r0, #4]
    453c:	e015      	b.n	456a <enqueue+0x6a>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    453e:	78ab      	ldrb	r3, [r5, #2]
    4540:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    4542:	686b      	ldr	r3, [r5, #4]
    4544:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    4546:	892b      	ldrh	r3, [r5, #8]
    4548:	b29b      	uxth	r3, r3
    454a:	3b62      	subs	r3, #98	; 0x62
    454c:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    454e:	4b10      	ldr	r3, [pc, #64]	; (4590 <enqueue+0x90>)
    4550:	781b      	ldrb	r3, [r3, #0]
    4552:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    4554:	4b0f      	ldr	r3, [pc, #60]	; (4594 <enqueue+0x94>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    455a:	8928      	ldrh	r0, [r5, #8]
    455c:	b280      	uxth	r0, r0
    455e:	f002 fd71 	bl	7044 <rssi_get_avg>
		f->rssi_count = rssi_count;
    4562:	4b0d      	ldr	r3, [pc, #52]	; (4598 <enqueue+0x98>)
		f->clkn_high = idle_buf_clkn_high;
		f->clk100ns = idle_buf_clk100ns;
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
		f->rssi_min = rssi_min;
		f->rssi_max = rssi_max;
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4564:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    4566:	781b      	ldrb	r3, [r3, #0]
    4568:	72e3      	strb	r3, [r4, #11]
	}

	memcpy(f->data, buf, DMA_SIZE);
    456a:	f104 000e 	add.w	r0, r4, #14
    456e:	4639      	mov	r1, r7
    4570:	2232      	movs	r2, #50	; 0x32
    4572:	f004 fad5 	bl	8b20 <memcpy>

	f->status = status;
    4576:	786b      	ldrb	r3, [r5, #1]
	status = 0;

	return 1;
    4578:	2001      	movs	r0, #1
		f->rssi_count = rssi_count;
	}

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    457a:	7063      	strb	r3, [r4, #1]
	status = 0;
    457c:	2300      	movs	r3, #0
    457e:	706b      	strb	r3, [r5, #1]

	return 1;
}
    4580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4582:	bf00      	nop
    4584:	10000a1c 	.word	0x10000a1c
    4588:	10000bc4 	.word	0x10000bc4
    458c:	40004008 	.word	0x40004008
    4590:	10000baa 	.word	0x10000baa
    4594:	10000ba8 	.word	0x10000ba8
    4598:	10001046 	.word	0x10001046

0000459c <le_set_access_address>:
	// reset GIO
	cc2400_set(IOCFG, gio_save);
}

/* set LE access address */
static void le_set_access_address(u32 aa) {
    459c:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    459e:	4c04      	ldr	r4, [pc, #16]	; (45b0 <le_set_access_address+0x14>)
    45a0:	6060      	str	r0, [r4, #4]
	aa_rev = rbit(aa);
    45a2:	f003 fbf1 	bl	7d88 <rbit>
	le.syncl = aa_rev & 0xffff;
    45a6:	8160      	strh	r0, [r4, #10]
	le.synch = aa_rev >> 16;
    45a8:	0c00      	lsrs	r0, r0, #16
    45aa:	8120      	strh	r0, [r4, #8]
    45ac:	bd10      	pop	{r4, pc}
    45ae:	bf00      	nop
    45b0:	10000448 	.word	0x10000448

000045b4 <cc2400_idle>:
		}
	}
}

static void cc2400_idle()
{
    45b4:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    45b6:	2064      	movs	r0, #100	; 0x64
    45b8:	f003 fd85 	bl	80c6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    45bc:	f003 fd7c 	bl	80b8 <cc2400_status>
    45c0:	f000 0004 	and.w	r0, r0, #4
    45c4:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    45c8:	2800      	cmp	r0, #0
    45ca:	d1f7      	bne.n	45bc <cc2400_idle+0x8>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    45cc:	4b20      	ldr	r3, [pc, #128]	; (4650 <cc2400_idle+0x9c>)
    45ce:	2280      	movs	r2, #128	; 0x80
    45d0:	601a      	str	r2, [r3, #0]
	HGM_CLR;
#endif

	RXLED_CLR;
    45d2:	2110      	movs	r1, #16
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
	HGM_CLR;
    45d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    45d8:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    45da:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    45de:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    45e2:	2202      	movs	r2, #2
    45e4:	f843 2c20 	str.w	r2, [r3, #-32]

	clkn_stop();
    45e8:	f002 fdb0 	bl	714c <clkn_stop>
	dio_ssp_stop();
    45ec:	f002 feda 	bl	73a4 <dio_ssp_stop>
	cs_reset();
    45f0:	f002 fd9a 	bl	7128 <cs_reset>
	rssi_reset();
    45f4:	f002 fcc2 	bl	6f7c <rssi_reset>

	/* hopping stuff */
	hop_mode = HOP_NONE;
    45f8:	4b16      	ldr	r3, [pc, #88]	; (4654 <cc2400_idle+0xa0>)
	do_hop = 0;
	channel = 2441;
    45fa:	4a17      	ldr	r2, [pc, #92]	; (4658 <cc2400_idle+0xa4>)
    45fc:	f640 1189 	movw	r1, #2441	; 0x989
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    4600:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    4602:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    4604:	8011      	strh	r1, [r2, #0]
	hop_direct_channel = 0;
	hop_timeout = 158;
    4606:	219e      	movs	r1, #158	; 0x9e

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
    4608:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    460a:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	requested_channel = 0;
	le_adv_channel = 2402;
    460e:	f640 1162 	movw	r1, #2402	; 0x962
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
	hop_timeout = 158;
	requested_channel = 0;
    4612:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    4614:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a


	/* bulk USB stuff */
	idle_buf_clkn_high = 0;
    4618:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    461a:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    461c:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    461e:	741c      	strb	r4, [r3, #16]
	status = 0;
    4620:	705c      	strb	r4, [r3, #1]

	/* operation mode */
	mode = MODE_IDLE;
    4622:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    4624:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    4626:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    4628:	751c      	strb	r4, [r3, #20]

	modulation = MOD_BT_BASIC_RATE;
    462a:	701c      	strb	r4, [r3, #0]

	/* specan stuff */
	low_freq = 2400;
    462c:	f44f 6316 	mov.w	r3, #2400	; 0x960
    4630:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	high_freq = 2483;
    4634:	3353      	adds	r3, #83	; 0x53
    4636:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
	rssi_threshold = -30;

	target.address = 0;
    463a:	4908      	ldr	r1, [pc, #32]	; (465c <cc2400_idle+0xa8>)
	modulation = MOD_BT_BASIC_RATE;

	/* specan stuff */
	low_freq = 2400;
	high_freq = 2483;
	rssi_threshold = -30;
    463c:	23e2      	movs	r3, #226	; 0xe2
    463e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

	target.address = 0;
    4642:	2200      	movs	r2, #0
    4644:	2300      	movs	r3, #0
    4646:	e9c1 2300 	strd	r2, r3, [r1]
	target.syncword = 0;
    464a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    464e:	bd10      	pop	{r4, pc}
    4650:	2009c05c 	.word	0x2009c05c
    4654:	10000a1c 	.word	0x10000a1c
    4658:	10000448 	.word	0x10000448
    465c:	100010c0 	.word	0x100010c0

00004660 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    4660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    4664:	4c39      	ldr	r4, [pc, #228]	; (474c <cb_follow_le+0xec>)
    4666:	8820      	ldrh	r0, [r4, #0]
    4668:	4626      	mov	r6, r4
    466a:	b280      	uxth	r0, r0
    466c:	3862      	subs	r0, #98	; 0x62
    466e:	b2c0      	uxtb	r0, r0
    4670:	f002 fb14 	bl	6c9c <btle_channel_index>
    4674:	4936      	ldr	r1, [pc, #216]	; (4750 <cb_follow_le+0xf0>)

	u32 access_address = 0;
    4676:	2200      	movs	r2, #0

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    4678:	5c0d      	ldrb	r5, [r1, r0]

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    467a:	4613      	mov	r3, r2
    467c:	468c      	mov	ip, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    467e:	4f35      	ldr	r7, [pc, #212]	; (4754 <cb_follow_le+0xf4>)
    4680:	5dd9      	ldrb	r1, [r3, r7]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4682:	3301      	adds	r3, #1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4684:	07c9      	lsls	r1, r1, #31
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4686:	2b1f      	cmp	r3, #31
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4688:	ea41 0252 	orr.w	r2, r1, r2, lsr #1
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    468c:	d1f7      	bne.n	467e <cb_follow_le+0x1e>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    468e:	6871      	ldr	r1, [r6, #4]
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4690:	5cf8      	ldrb	r0, [r7, r3]
    4692:	07c0      	lsls	r0, r0, #31
    4694:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
		if (access_address == le.access_address) {
    4698:	428a      	cmp	r2, r1
    469a:	d14f      	bne.n	473c <cb_follow_le+0xdc>
    469c:	2200      	movs	r2, #0
    469e:	eb07 0803 	add.w	r8, r7, r3
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46a2:	2000      	movs	r0, #0
    46a4:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    46a8:	4601      	mov	r1, r0
    46aa:	eb08 0401 	add.w	r4, r8, r1
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
    46ae:	2a03      	cmp	r2, #3
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
    46b0:	f814 4c1f 	ldrb.w	r4, [r4, #-31]
					if (j >= 4) { // unwhiten data bytes
    46b4:	dd0c      	ble.n	46d0 <cb_follow_le+0x70>
						bit ^= whitening[idx];
    46b6:	eb0c 0e05 	add.w	lr, ip, r5
    46ba:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    46be:	3501      	adds	r5, #1
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
    46c0:	ea84 040e 	eor.w	r4, r4, lr
						idx = (idx + 1) % sizeof(whitening);
    46c4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    46c8:	fbb5 f9fe 	udiv	r9, r5, lr
    46cc:	fb0e 5519 	mls	r5, lr, r9, r5
					}
					byte |= bit << k;
    46d0:	408c      	lsls	r4, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46d2:	3101      	adds	r1, #1
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    46d4:	4320      	orrs	r0, r4
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46d6:	2908      	cmp	r1, #8
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    46d8:	b2c0      	uxtb	r0, r0
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46da:	d1e6      	bne.n	46aa <cb_follow_le+0x4a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    46dc:	4c1e      	ldr	r4, [pc, #120]	; (4758 <cb_follow_le+0xf8>)
    46de:	6821      	ldr	r1, [r4, #0]
    46e0:	5488      	strb	r0, [r1, r2]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    46e2:	3201      	adds	r2, #1
    46e4:	2a2e      	cmp	r2, #46	; 0x2e
    46e6:	d1da      	bne.n	469e <cb_follow_le+0x3e>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    46e8:	6973      	ldr	r3, [r6, #20]
    46ea:	b95b      	cbnz	r3, 4704 <cb_follow_le+0xa4>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    46ec:	6821      	ldr	r1, [r4, #0]
    46ee:	2001      	movs	r0, #1
    46f0:	f7ff ff06 	bl	4500 <enqueue>
			RXLED_SET;
    46f4:	4b19      	ldr	r3, [pc, #100]	; (475c <cb_follow_le+0xfc>)
    46f6:	2210      	movs	r2, #16
    46f8:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    46fa:	4b19      	ldr	r3, [pc, #100]	; (4760 <cb_follow_le+0x100>)
    46fc:	6820      	ldr	r0, [r4, #0]
    46fe:	699b      	ldr	r3, [r3, #24]
    4700:	4798      	blx	r3

			break;
    4702:	e01f      	b.n	4744 <cb_follow_le+0xe4>
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    4704:	6823      	ldr	r3, [r4, #0]
    4706:	795d      	ldrb	r5, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4708:	4b10      	ldr	r3, [pc, #64]	; (474c <cb_follow_le+0xec>)
    470a:	6821      	ldr	r1, [r4, #0]
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    470c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4710:	1caa      	adds	r2, r5, #2
    4712:	6918      	ldr	r0, [r3, #16]
    4714:	3104      	adds	r1, #4
    4716:	f002 fb41 	bl	6d9c <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    471a:	6822      	ldr	r2, [r4, #0]
    471c:	f105 0308 	add.w	r3, r5, #8
    4720:	5cd1      	ldrb	r1, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    4722:	6822      	ldr	r2, [r4, #0]
    4724:	1deb      	adds	r3, r5, #7
    4726:	5cd3      	ldrb	r3, [r2, r3]
							 |  idle_rxbuf[4+len+0];
    4728:	6822      	ldr	r2, [r4, #0]
    472a:	3506      	adds	r5, #6
    472c:	5d52      	ldrb	r2, [r2, r5]
			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
							 | (idle_rxbuf[4+len+1] << 8)
    472e:	021b      	lsls	r3, r3, #8
    4730:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
							 |  idle_rxbuf[4+len+0];
    4734:	4313      	orrs	r3, r2
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    4736:	4298      	cmp	r0, r3
    4738:	d104      	bne.n	4744 <cb_follow_le+0xe4>
    473a:	e7d7      	b.n	46ec <cb_follow_le+0x8c>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    473c:	3301      	adds	r3, #1
    473e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    4742:	d1a5      	bne.n	4690 <cb_follow_le+0x30>
			break;
		}
	}

	return 1;
}
    4744:	2001      	movs	r0, #1
    4746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    474a:	bf00      	nop
    474c:	10000448 	.word	0x10000448
    4750:	00008c74 	.word	0x00008c74
    4754:	10000d24 	.word	0x10000d24
    4758:	10000d20 	.word	0x10000d20
    475c:	2009c038 	.word	0x2009c038
    4760:	10000a1c 	.word	0x10000a1c

00004764 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4764:	b538      	push	{r3, r4, r5, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4766:	4b58      	ldr	r3, [pc, #352]	; (48c8 <connection_follow_cb+0x164>)
}

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4768:	4605      	mov	r5, r0
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    476a:	7e1a      	ldrb	r2, [r3, #24]
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	// u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
	u8 header = packet[HEADER_IDX];
    476c:	7901      	ldrb	r1, [r0, #4]
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    476e:	2a02      	cmp	r2, #2
    4770:	461c      	mov	r4, r3
    4772:	d113      	bne.n	479c <connection_follow_cb+0x38>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    4774:	2203      	movs	r2, #3
    4776:	761a      	strb	r2, [r3, #24]
		le.conn_epoch = clkn;
    4778:	4a54      	ldr	r2, [pc, #336]	; (48cc <connection_follow_cb+0x168>)
    477a:	6812      	ldr	r2, [r2, #0]
    477c:	61da      	str	r2, [r3, #28]
		le.interval_timer = le.conn_interval - 1;
    477e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    4780:	3a01      	subs	r2, #1
    4782:	b292      	uxth	r2, r2
    4784:	841a      	strh	r2, [r3, #32]
		le.conn_count = 0;
    4786:	2200      	movs	r2, #0
    4788:	849a      	strh	r2, [r3, #36]	; 0x24
		le.update_pending = 0;
    478a:	62da      	str	r2, [r3, #44]	; 0x2c

		// hue hue hue
		if (jam_mode != JAM_NONE)
    478c:	4b50      	ldr	r3, [pc, #320]	; (48d0 <connection_follow_cb+0x16c>)
    478e:	7cda      	ldrb	r2, [r3, #19]
    4790:	2a00      	cmp	r2, #0
    4792:	f000 8098 	beq.w	48c6 <connection_follow_cb+0x162>
			le_jam_count = JAM_COUNT_DEFAULT;
    4796:	2228      	movs	r2, #40	; 0x28
    4798:	61da      	str	r2, [r3, #28]
    479a:	bd38      	pop	{r3, r4, r5, pc}

	} else if (le.link_state == LINK_CONNECTED) {
    479c:	2a03      	cmp	r2, #3
    479e:	d13b      	bne.n	4818 <connection_follow_cb+0xb4>
		u8 llid =  header & 0x03;

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		// hue hue hue
		if (jam_mode != JAM_NONE)
			le_jam_count = JAM_COUNT_DEFAULT;

	} else if (le.link_state == LINK_CONNECTED) {
		u8 llid =  header & 0x03;
    47a2:	f001 0103 	and.w	r1, r1, #3

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47a6:	b1a3      	cbz	r3, 47d2 <connection_follow_cb+0x6e>
    47a8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    47aa:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    47ac:	b29b      	uxth	r3, r3
    47ae:	429a      	cmp	r2, r3
    47b0:	d10f      	bne.n	47d2 <connection_follow_cb+0x6e>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    47b2:	4b46      	ldr	r3, [pc, #280]	; (48cc <connection_follow_cb+0x168>)
    47b4:	681b      	ldr	r3, [r3, #0]
    47b6:	61e3      	str	r3, [r4, #28]
			le.conn_interval = le.interval_update;
    47b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    47ba:	8463      	strh	r3, [r4, #34]	; 0x22
			le.interval_timer = le.interval_update - 1;
    47bc:	3b01      	subs	r3, #1
    47be:	b29b      	uxth	r3, r3
    47c0:	8423      	strh	r3, [r4, #32]
			le.win_size = le.win_size_update;
    47c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    47c6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			le.win_offset = le.win_offset_update;
    47ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    47cc:	8523      	strh	r3, [r4, #40]	; 0x28
			le.update_pending = 0;
    47ce:	2300      	movs	r3, #0
    47d0:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		if (llid == 0x03 && data[0] == 0x00) {
    47d2:	2903      	cmp	r1, #3
    47d4:	d177      	bne.n	48c6 <connection_follow_cb+0x162>
    47d6:	79ab      	ldrb	r3, [r5, #6]
    47d8:	2b00      	cmp	r3, #0
    47da:	d174      	bne.n	48c6 <connection_follow_cb+0x162>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    47dc:	79eb      	ldrb	r3, [r5, #7]
    47de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    47e2:	7a6a      	ldrb	r2, [r5, #9]
    47e4:	7a2b      	ldrb	r3, [r5, #8]
    47e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47ea:	86e3      	strh	r3, [r4, #54]	; 0x36
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    47ec:	7aea      	ldrb	r2, [r5, #11]
    47ee:	7aab      	ldrb	r3, [r5, #10]
    47f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47f4:	8663      	strh	r3, [r4, #50]	; 0x32
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    47f6:	7c6a      	ldrb	r2, [r5, #17]
    47f8:	7c2b      	ldrb	r3, [r5, #16]
    47fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    47fe:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4800:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    4802:	b292      	uxth	r2, r2
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4804:	8623      	strh	r3, [r4, #48]	; 0x30
			if (le.update_instant - le.conn_count < 32767)
    4806:	1a9b      	subs	r3, r3, r2
    4808:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    480c:	4293      	cmp	r3, r2
    480e:	dc5a      	bgt.n	48c6 <connection_follow_cb+0x162>
				le.update_pending = 1;
    4810:	4b2d      	ldr	r3, [pc, #180]	; (48c8 <connection_follow_cb+0x164>)
    4812:	2201      	movs	r2, #1
    4814:	62da      	str	r2, [r3, #44]	; 0x2c
    4816:	bd38      	pop	{r3, r4, r5, pc}
		}

	} else if (le.link_state == LINK_LISTENING) {
    4818:	2a01      	cmp	r2, #1
    481a:	d154      	bne.n	48c6 <connection_follow_cb+0x162>
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
    481c:	f001 010f 	and.w	r1, r1, #15
    4820:	2905      	cmp	r1, #5
    4822:	d150      	bne.n	48c6 <connection_follow_cb+0x162>
			uint16_t conn_interval;

			// ignore packets with incorrect length
			if (*data_len != 34)
    4824:	7943      	ldrb	r3, [r0, #5]
    4826:	2b22      	cmp	r3, #34	; 0x22
    4828:	d14d      	bne.n	48c6 <connection_follow_cb+0x162>
				return;

			// conn interval must be [7.5 ms, 4.0s] in units of 1.25 ms
			conn_interval = (packet[29] << 8) | packet[28];
    482a:	7f03      	ldrb	r3, [r0, #28]
    482c:	7f42      	ldrb	r2, [r0, #29]
    482e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    4832:	3a06      	subs	r2, #6
    4834:	b292      	uxth	r2, r2
    4836:	f640 437a 	movw	r3, #3194	; 0xc7a
    483a:	429a      	cmp	r2, r3
    483c:	d843      	bhi.n	48c6 <connection_follow_cb+0x162>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    483e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4840:	b92b      	cbnz	r3, 484e <connection_follow_cb+0xea>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4842:	2302      	movs	r3, #2
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4844:	2000      	movs	r0, #0
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4846:	7623      	strb	r3, [r4, #24]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4848:	6160      	str	r0, [r4, #20]

			for (i = 0; i < 4; ++i)
    484a:	4603      	mov	r3, r0
    484c:	e011      	b.n	4872 <connection_follow_cb+0x10e>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    484e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4852:	1da9      	adds	r1, r5, #6
    4854:	2206      	movs	r2, #6
    4856:	f004 f92f 	bl	8ab8 <memcmp>
			if (conn_interval < 6 || conn_interval > 3200)
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    485a:	2800      	cmp	r0, #0
    485c:	d0f1      	beq.n	4842 <connection_follow_cb+0xde>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    485e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4862:	f105 010c 	add.w	r1, r5, #12
    4866:	2206      	movs	r2, #6
    4868:	f004 f926 	bl	8ab8 <memcmp>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    486c:	2800      	cmp	r0, #0
    486e:	d0e8      	beq.n	4842 <connection_follow_cb+0xde>
    4870:	bd38      	pop	{r3, r4, r5, pc}
    4872:	18ea      	adds	r2, r5, r3

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
    4874:	7c91      	ldrb	r1, [r2, #18]
    4876:	00da      	lsls	r2, r3, #3
    4878:	fa01 f202 	lsl.w	r2, r1, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    487c:	3301      	adds	r3, #1
    487e:	2b04      	cmp	r3, #4
				aa |= packet[18+i] << (i*8);
    4880:	ea40 0002 	orr.w	r0, r0, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    4884:	d1f5      	bne.n	4872 <connection_follow_cb+0x10e>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    4886:	f7ff fe89 	bl	459c <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
    488a:	7de8      	ldrb	r0, [r5, #23]
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    488c:	7e2b      	ldrb	r3, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    488e:	0200      	lsls	r0, r0, #8
    4890:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
						|  packet[CRC_INIT+0];
    4894:	7dab      	ldrb	r3, [r5, #22]
    4896:	4318      	orrs	r0, r3
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    4898:	60e0      	str	r0, [r4, #12]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    489a:	f003 fa75 	bl	7d88 <rbit>

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    489e:	7e6b      	ldrb	r3, [r5, #25]

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    48a0:	6120      	str	r0, [r4, #16]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    48a2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    48a6:	7eab      	ldrb	r3, [r5, #26]
    48a8:	8523      	strh	r3, [r4, #40]	; 0x28

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    48aa:	7f6a      	ldrb	r2, [r5, #29]
    48ac:	7f2b      	ldrb	r3, [r5, #28]
    48ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    48b2:	8463      	strh	r3, [r4, #34]	; 0x22
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48b4:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
			le.channel_idx = le.channel_increment;

			// Hop to the initial channel immediately
			do_hop = 1;
    48b8:	2201      	movs	r2, #1
#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48ba:	f003 031f 	and.w	r3, r3, #31
    48be:	76a3      	strb	r3, [r4, #26]
			le.channel_idx = le.channel_increment;
    48c0:	7663      	strb	r3, [r4, #25]

			// Hop to the initial channel immediately
			do_hop = 1;
    48c2:	4b03      	ldr	r3, [pc, #12]	; (48d0 <connection_follow_cb+0x16c>)
    48c4:	72da      	strb	r2, [r3, #11]
    48c6:	bd38      	pop	{r3, r4, r5, pc}
    48c8:	10000448 	.word	0x10000448
    48cc:	10000bc4 	.word	0x10000bc4
    48d0:	10000a1c 	.word	0x10000a1c

000048d4 <vendor_request_handler>:

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    48d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48d8:	460d      	mov	r5, r1
    48da:	4616      	mov	r6, r2
    48dc:	461c      	mov	r4, r3
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    48de:	2845      	cmp	r0, #69	; 0x45
    48e0:	f200 8300 	bhi.w	4ee4 <vendor_request_handler+0x610>
    48e4:	e8df f010 	tbh	[pc, r0, lsl #1]
    48e8:	00480100 	.word	0x00480100
    48ec:	0051004d 	.word	0x0051004d
    48f0:	00590056 	.word	0x00590056
    48f4:	0061005e 	.word	0x0061005e
    48f8:	00670063 	.word	0x00670063
    48fc:	00c1006c 	.word	0x00c1006c
    4900:	010500c8 	.word	0x010500c8
    4904:	0075007a 	.word	0x0075007a
    4908:	0084007f 	.word	0x0084007f
    490c:	008c0087 	.word	0x008c0087
    4910:	00b90094 	.word	0x00b90094
    4914:	00bd00bb 	.word	0x00bd00bb
    4918:	010200fe 	.word	0x010200fe
    491c:	010702fe 	.word	0x010702fe
    4920:	009f0098 	.word	0x009f0098
    4924:	00a700a9 	.word	0x00a700a9
    4928:	013400ab 	.word	0x013400ab
    492c:	01510125 	.word	0x01510125
    4930:	01580154 	.word	0x01580154
    4934:	01ae015c 	.word	0x01ae015c
    4938:	020a01e6 	.word	0x020a01e6
    493c:	0252024a 	.word	0x0252024a
    4940:	02fb025d 	.word	0x02fb025d
    4944:	0271026c 	.word	0x0271026c
    4948:	027e0277 	.word	0x027e0277
    494c:	01f3028d 	.word	0x01f3028d
    4950:	029b0200 	.word	0x029b0200
    4954:	014302d1 	.word	0x014302d1
    4958:	02fe02db 	.word	0x02fe02db
    495c:	02f202a3 	.word	0x02f202a3
    4960:	01ce02f6 	.word	0x01ce02f6
    4964:	021501e1 	.word	0x021501e1
    4968:	004602fe 	.word	0x004602fe
    496c:	012302b8 	.word	0x012302b8
    4970:	021c02c8 	.word	0x021c02c8
    4974:	2400      	movs	r4, #0
    4976:	e25f      	b.n	4e38 <vendor_request_handler+0x564>
	case UBERTOOTH_PING:
		*data_len = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4978:	4ba3      	ldr	r3, [pc, #652]	; (4c08 <vendor_request_handler+0x334>)
    497a:	2001      	movs	r0, #1
    497c:	7498      	strb	r0, [r3, #18]
		*data_len = 0;
    497e:	2300      	movs	r3, #0
    4980:	e1af      	b.n	4ce2 <vendor_request_handler+0x40e>
		break;

	case UBERTOOTH_TX_SYMBOLS:
		hop_mode = HOP_BLUETOOTH;
    4982:	4ba1      	ldr	r3, [pc, #644]	; (4c08 <vendor_request_handler+0x334>)
    4984:	2202      	movs	r2, #2
    4986:	729a      	strb	r2, [r3, #10]
    4988:	e0e0      	b.n	4b4c <vendor_request_handler+0x278>
		requested_mode = MODE_TX_SYMBOLS;
		*data_len = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    498a:	4ba0      	ldr	r3, [pc, #640]	; (4c0c <vendor_request_handler+0x338>)
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4992:	e103      	b.n	4b9c <vendor_request_handler+0x2c8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4994:	880a      	ldrh	r2, [r1, #0]
    4996:	2302      	movs	r3, #2
    4998:	e015      	b.n	49c6 <vendor_request_handler+0xf2>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    499a:	4b9c      	ldr	r3, [pc, #624]	; (4c0c <vendor_request_handler+0x338>)
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	f3c3 1300 	ubfx	r3, r3, #4, #1
    49a2:	e0fb      	b.n	4b9c <vendor_request_handler+0x2c8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    49a4:	880a      	ldrh	r2, [r1, #0]
    49a6:	2310      	movs	r3, #16
    49a8:	e00d      	b.n	49c6 <vendor_request_handler+0xf2>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    49aa:	4b98      	ldr	r3, [pc, #608]	; (4c0c <vendor_request_handler+0x338>)
    49ac:	e024      	b.n	49f8 <vendor_request_handler+0x124>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    49ae:	880a      	ldrh	r2, [r1, #0]
    49b0:	f44f 7380 	mov.w	r3, #256	; 0x100
    49b4:	e007      	b.n	49c6 <vendor_request_handler+0xf2>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    49b6:	4b95      	ldr	r3, [pc, #596]	; (4c0c <vendor_request_handler+0x338>)
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	f3c3 2340 	ubfx	r3, r3, #9, #1
    49be:	e0ed      	b.n	4b9c <vendor_request_handler+0x2c8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    49c0:	880a      	ldrh	r2, [r1, #0]
    49c2:	f44f 7300 	mov.w	r3, #512	; 0x200
    49c6:	b912      	cbnz	r2, 49ce <vendor_request_handler+0xfa>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    49c8:	4a91      	ldr	r2, [pc, #580]	; (4c10 <vendor_request_handler+0x33c>)
    49ca:	6013      	str	r3, [r2, #0]
    49cc:	e287      	b.n	4ede <vendor_request_handler+0x60a>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
    49ce:	4a91      	ldr	r2, [pc, #580]	; (4c14 <vendor_request_handler+0x340>)
    49d0:	e7fb      	b.n	49ca <vendor_request_handler+0xf6>
		else
			CC1V8_CLR;
		break;

	case UBERTOOTH_GET_PARTNUM:
		get_part_num(data, data_len);
    49d2:	4610      	mov	r0, r2
    49d4:	4621      	mov	r1, r4
    49d6:	f003 fc5d 	bl	8294 <get_part_num>
    49da:	e280      	b.n	4ede <vendor_request_handler+0x60a>
	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_GET_SERIAL:
		get_device_serial(data, data_len);
    49dc:	4610      	mov	r0, r2
    49de:	4621      	mov	r1, r4
    49e0:	f003 fc74 	bl	82cc <get_device_serial>
    49e4:	e27b      	b.n	4ede <vendor_request_handler+0x60a>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    49e6:	4b8c      	ldr	r3, [pc, #560]	; (4c18 <vendor_request_handler+0x344>)
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    49ee:	e0d5      	b.n	4b9c <vendor_request_handler+0x2c8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    49f0:	880a      	ldrh	r2, [r1, #0]
    49f2:	2380      	movs	r3, #128	; 0x80
    49f4:	e007      	b.n	4a06 <vendor_request_handler+0x132>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    49f6:	4b88      	ldr	r3, [pc, #544]	; (4c18 <vendor_request_handler+0x344>)
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	f3c3 2300 	ubfx	r3, r3, #8, #1
    49fe:	e0cd      	b.n	4b9c <vendor_request_handler+0x2c8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4a00:	880a      	ldrh	r2, [r1, #0]
    4a02:	f44f 7380 	mov.w	r3, #256	; 0x100
    4a06:	b10a      	cbz	r2, 4a0c <vendor_request_handler+0x138>
			HGM_SET;
    4a08:	4a84      	ldr	r2, [pc, #528]	; (4c1c <vendor_request_handler+0x348>)
    4a0a:	e7de      	b.n	49ca <vendor_request_handler+0xf6>
		else
			HGM_CLR;
    4a0c:	4a84      	ldr	r2, [pc, #528]	; (4c20 <vendor_request_handler+0x34c>)
    4a0e:	e7dc      	b.n	49ca <vendor_request_handler+0xf6>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4a10:	2203      	movs	r2, #3
    4a12:	4b7d      	ldr	r3, [pc, #500]	; (4c08 <vendor_request_handler+0x334>)
    4a14:	749a      	strb	r2, [r3, #18]
    4a16:	e262      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4a18:	2005      	movs	r0, #5
    4a1a:	f003 faa1 	bl	7f60 <cc2400_get>
    4a1e:	f000 0007 	and.w	r0, r0, #7
    4a22:	7030      	strb	r0, [r6, #0]
    4a24:	e1e9      	b.n	4dfa <vendor_request_handler+0x526>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4a26:	8809      	ldrh	r1, [r1, #0]
    4a28:	2907      	cmp	r1, #7
    4a2a:	f200 825b 	bhi.w	4ee4 <vendor_request_handler+0x610>
			cc2400_set(FREND, 8 | request_params[0]);
    4a2e:	2005      	movs	r0, #5
    4a30:	f041 0108 	orr.w	r1, r1, #8
    4a34:	e1fd      	b.n	4e32 <vendor_request_handler+0x55e>
			return 0;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4a36:	2205      	movs	r2, #5
    4a38:	e7eb      	b.n	4a12 <vendor_request_handler+0x13e>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4a3a:	2206      	movs	r2, #6
    4a3c:	e7e9      	b.n	4a12 <vendor_request_handler+0x13e>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4a3e:	4b79      	ldr	r3, [pc, #484]	; (4c24 <vendor_request_handler+0x350>)
    4a40:	781a      	ldrb	r2, [r3, #0]
    4a42:	7032      	strb	r2, [r6, #0]
		data[1] = rr.request_pa;
    4a44:	785a      	ldrb	r2, [r3, #1]
    4a46:	7072      	strb	r2, [r6, #1]
		data[2] = rr.request_num;
    4a48:	789a      	ldrb	r2, [r3, #2]
    4a4a:	70b2      	strb	r2, [r6, #2]
		data[3] = rr.reply_pa;
    4a4c:	78da      	ldrb	r2, [r3, #3]
    4a4e:	70f2      	strb	r2, [r6, #3]
		data[4] = rr.reply_num;
    4a50:	791b      	ldrb	r3, [r3, #4]
    4a52:	7133      	strb	r3, [r6, #4]
		*data_len = 5;
    4a54:	2305      	movs	r3, #5
    4a56:	6023      	str	r3, [r4, #0]
    4a58:	e241      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4a5a:	2200      	movs	r2, #0
    4a5c:	e7d9      	b.n	4a12 <vendor_request_handler+0x13e>
		break;

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4a5e:	4b6a      	ldr	r3, [pc, #424]	; (4c08 <vendor_request_handler+0x334>)
    4a60:	e09b      	b.n	4b9a <vendor_request_handler+0x2c6>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4a62:	780a      	ldrb	r2, [r1, #0]
    4a64:	4b68      	ldr	r3, [pc, #416]	; (4c08 <vendor_request_handler+0x334>)
    4a66:	701a      	strb	r2, [r3, #0]
    4a68:	e239      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4a6a:	4b6f      	ldr	r3, [pc, #444]	; (4c28 <vendor_request_handler+0x354>)
    4a6c:	881a      	ldrh	r2, [r3, #0]
    4a6e:	7032      	strb	r2, [r6, #0]
		data[1] = (channel >> 8) & 0xFF;
    4a70:	881b      	ldrh	r3, [r3, #0]
    4a72:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a76:	e1a6      	b.n	4dc6 <vendor_request_handler+0x4f2>
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4a78:	880a      	ldrh	r2, [r1, #0]
    4a7a:	4b63      	ldr	r3, [pc, #396]	; (4c08 <vendor_request_handler+0x334>)
    4a7c:	81da      	strh	r2, [r3, #14]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4a7e:	89d9      	ldrh	r1, [r3, #14]
    4a80:	f640 22ea 	movw	r2, #2794	; 0xaea
    4a84:	b289      	uxth	r1, r1
    4a86:	4291      	cmp	r1, r2
    4a88:	d904      	bls.n	4a94 <vendor_request_handler+0x1c0>
			hop_mode = HOP_SWEEP;
    4a8a:	2201      	movs	r2, #1
    4a8c:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4a8e:	f640 1262 	movw	r2, #2402	; 0x962
    4a92:	e015      	b.n	4ac0 <vendor_request_handler+0x1ec>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4a94:	2200      	movs	r2, #0
    4a96:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4a98:	89d9      	ldrh	r1, [r3, #14]
    4a9a:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4a9e:	b289      	uxth	r1, r1
    4aa0:	4291      	cmp	r1, r2
    4aa2:	bf84      	itt	hi
    4aa4:	89da      	ldrhhi	r2, [r3, #14]
    4aa6:	b292      	uxthhi	r2, r2
    4aa8:	81da      	strh	r2, [r3, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4aaa:	89d9      	ldrh	r1, [r3, #14]
    4aac:	f640 22e9 	movw	r2, #2793	; 0xae9
    4ab0:	b289      	uxth	r1, r1
    4ab2:	4291      	cmp	r1, r2
    4ab4:	bf97      	itett	ls
    4ab6:	4a54      	ldrls	r2, [pc, #336]	; (4c08 <vendor_request_handler+0x334>)
    4ab8:	f640 22ea 	movwhi	r2, #2794	; 0xaea
    4abc:	89d2      	ldrhls	r2, [r2, #14]
    4abe:	b292      	uxthls	r2, r2
    4ac0:	81da      	strh	r2, [r3, #14]
		}

		le_adv_channel = requested_channel;
    4ac2:	89d8      	ldrh	r0, [r3, #14]
    4ac4:	4a58      	ldr	r2, [pc, #352]	; (4c28 <vendor_request_handler+0x354>)
    4ac6:	b280      	uxth	r0, r0
    4ac8:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
		if (mode != MODE_BT_FOLLOW_LE) {
    4acc:	7c5b      	ldrb	r3, [r3, #17]
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
			requested_channel = MIN(requested_channel, MAX_FREQ);
		}

		le_adv_channel = requested_channel;
    4ace:	494e      	ldr	r1, [pc, #312]	; (4c08 <vendor_request_handler+0x334>)
		if (mode != MODE_BT_FOLLOW_LE) {
    4ad0:	2b09      	cmp	r3, #9
    4ad2:	f000 8204 	beq.w	4ede <vendor_request_handler+0x60a>
			channel = requested_channel;
    4ad6:	89cb      	ldrh	r3, [r1, #14]
    4ad8:	b29b      	uxth	r3, r3
    4ada:	8013      	strh	r3, [r2, #0]
			requested_channel = 0;
    4adc:	2300      	movs	r3, #0
    4ade:	81cb      	strh	r3, [r1, #14]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set(channel);
    4ae0:	8810      	ldrh	r0, [r2, #0]
    4ae2:	e198      	b.n	4e16 <vendor_request_handler+0x542>
		}
		break;

	case UBERTOOTH_SET_ISP:
		set_isp();
    4ae4:	f003 fc26 	bl	8334 <set_isp>
		*data_len = 0; /* should never return */
    4ae8:	2300      	movs	r3, #0
    4aea:	e7b4      	b.n	4a56 <vendor_request_handler+0x182>
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4aec:	4a4f      	ldr	r2, [pc, #316]	; (4c2c <vendor_request_handler+0x358>)
    4aee:	4b50      	ldr	r3, [pc, #320]	; (4c30 <vendor_request_handler+0x35c>)
    4af0:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    4af2:	220b      	movs	r2, #11
    4af4:	e78d      	b.n	4a12 <vendor_request_handler+0x13e>
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4af6:	880a      	ldrh	r2, [r1, #0]
    4af8:	f46f 6600 	mvn.w	r6, #2048	; 0x800
    4afc:	1993      	adds	r3, r2, r6
    4afe:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4b02:	b29b      	uxth	r3, r3
    4b04:	428b      	cmp	r3, r1
    4b06:	f200 81ed 	bhi.w	4ee4 <vendor_request_handler+0x610>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b0a:	886b      	ldrh	r3, [r5, #2]
		bootloader_ctrl = DFU_MODE;
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b0c:	f46f 6500 	mvn.w	r5, #2048	; 0x800
    4b10:	1958      	adds	r0, r3, r5
    4b12:	b280      	uxth	r0, r0
    4b14:	4288      	cmp	r0, r1
    4b16:	f200 81e5 	bhi.w	4ee4 <vendor_request_handler+0x610>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b1a:	4293      	cmp	r3, r2
    4b1c:	f0c0 81e2 	bcc.w	4ee4 <vendor_request_handler+0x610>
				request_params[1] < request_params[0])
			return 0;
		low_freq = request_params[0];
    4b20:	4941      	ldr	r1, [pc, #260]	; (4c28 <vendor_request_handler+0x354>)
    4b22:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		high_freq = request_params[1];
    4b26:	f8a1 304e 	strh.w	r3, [r1, #78]	; 0x4e
		requested_mode = MODE_SPECAN;
    4b2a:	2204      	movs	r2, #4
    4b2c:	e00d      	b.n	4b4a <vendor_request_handler+0x276>
		*data_len = 0;
		break;

	case UBERTOOTH_RX_GENERIC:
		requested_mode = MODE_RX_GENERIC;
    4b2e:	220f      	movs	r2, #15
    4b30:	e00b      	b.n	4b4a <vendor_request_handler+0x276>
		*data_len = 0;
		break;

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4b32:	880b      	ldrh	r3, [r1, #0]
    4b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4b38:	f200 81d4 	bhi.w	4ee4 <vendor_request_handler+0x610>
			return 0;
		rssi_threshold = 54 - request_params[0];
    4b3c:	4a3a      	ldr	r2, [pc, #232]	; (4c28 <vendor_request_handler+0x354>)
    4b3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4b42:	b2db      	uxtb	r3, r3
    4b44:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		requested_mode = MODE_LED_SPECAN;
    4b48:	2207      	movs	r2, #7
    4b4a:	4b2f      	ldr	r3, [pc, #188]	; (4c08 <vendor_request_handler+0x334>)
    4b4c:	749a      	strb	r2, [r3, #18]
    4b4e:	e7cb      	b.n	4ae8 <vendor_request_handler+0x214>
		*data_len = 0;
		break;

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4b50:	2300      	movs	r3, #0
    4b52:	7013      	strb	r3, [r2, #0]
		data[1] = 0x00;
    4b54:	7053      	strb	r3, [r2, #1]

		length = (u8)strlen(GIT_REVISION);
    4b56:	4837      	ldr	r0, [pc, #220]	; (4c34 <vendor_request_handler+0x360>)
    4b58:	f004 f858 	bl	8c0c <strlen>
    4b5c:	b2c5      	uxtb	r5, r0
		data[2] = length;
    4b5e:	70b5      	strb	r5, [r6, #2]

		memcpy(&data[3], GIT_REVISION, length);
    4b60:	462a      	mov	r2, r5
    4b62:	1cf0      	adds	r0, r6, #3
    4b64:	4933      	ldr	r1, [pc, #204]	; (4c34 <vendor_request_handler+0x360>)
    4b66:	f003 ffdb 	bl	8b20 <memcpy>

		*data_len = 2 + 1 + length;
    4b6a:	3503      	adds	r5, #3
    4b6c:	e00b      	b.n	4b86 <vendor_request_handler+0x2b2>
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4b6e:	4832      	ldr	r0, [pc, #200]	; (4c38 <vendor_request_handler+0x364>)
    4b70:	f004 f84c 	bl	8c0c <strlen>
    4b74:	b2c5      	uxtb	r5, r0
		data[0] = length;
    4b76:	4630      	mov	r0, r6
    4b78:	f800 5b01 	strb.w	r5, [r0], #1
		memcpy(&data[1], compile_info, length);
    4b7c:	462a      	mov	r2, r5
    4b7e:	492e      	ldr	r1, [pc, #184]	; (4c38 <vendor_request_handler+0x364>)
    4b80:	f003 ffce 	bl	8b20 <memcpy>
		*data_len = 1 + length;
    4b84:	3501      	adds	r5, #1
    4b86:	6025      	str	r5, [r4, #0]
    4b88:	e1a9      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4b8a:	2001      	movs	r0, #1
    4b8c:	7010      	strb	r0, [r2, #0]
    4b8e:	e135      	b.n	4dfc <vendor_request_handler+0x528>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4b90:	880a      	ldrh	r2, [r1, #0]
    4b92:	4b2a      	ldr	r3, [pc, #168]	; (4c3c <vendor_request_handler+0x368>)
    4b94:	701a      	strb	r2, [r3, #0]
    4b96:	e13c      	b.n	4e12 <vendor_request_handler+0x53e>
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4b98:	4b28      	ldr	r3, [pc, #160]	; (4c3c <vendor_request_handler+0x368>)
    4b9a:	781b      	ldrb	r3, [r3, #0]
    4b9c:	7033      	strb	r3, [r6, #0]
    4b9e:	e12c      	b.n	4dfa <vendor_request_handler+0x526>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4ba0:	4f27      	ldr	r7, [pc, #156]	; (4c40 <vendor_request_handler+0x36c>)
    4ba2:	2400      	movs	r4, #0
    4ba4:	2500      	movs	r5, #0
    4ba6:	e9c7 4500 	strd	r4, r5, [r7]
		target.syncword = 0;
    4baa:	e9c7 4502 	strd	r4, r5, [r7, #8]
		for(int i=0; i < 8; i++) {
    4bae:	f04f 0800 	mov.w	r8, #0
			target.address |= (uint64_t)data[i] << 8*i;
    4bb2:	f816 0008 	ldrb.w	r0, [r6, r8]
    4bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4bba:	2100      	movs	r1, #0
    4bbc:	f003 ff70 	bl	8aa0 <__aeabi_llsl>
    4bc0:	e9d7 4500 	ldrd	r4, r5, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4bc4:	f108 0801 	add.w	r8, r8, #1
			target.address |= (uint64_t)data[i] << 8*i;
    4bc8:	4320      	orrs	r0, r4
    4bca:	4329      	orrs	r1, r5
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4bcc:	f1b8 0f08 	cmp.w	r8, #8
			target.address |= (uint64_t)data[i] << 8*i;
    4bd0:	e9c7 0100 	strd	r0, r1, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4bd4:	d1ed      	bne.n	4bb2 <vendor_request_handler+0x2de>
    4bd6:	f04f 0800 	mov.w	r8, #0
    4bda:	eb06 0308 	add.w	r3, r6, r8
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4bde:	7a18      	ldrb	r0, [r3, #8]
    4be0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4be4:	2100      	movs	r1, #0
    4be6:	f003 ff5b 	bl	8aa0 <__aeabi_llsl>
    4bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4bee:	f108 0801 	add.w	r8, r8, #1
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4bf2:	4320      	orrs	r0, r4
    4bf4:	4329      	orrs	r1, r5
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4bf6:	f1b8 0f08 	cmp.w	r8, #8
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4bfa:	e9c7 0102 	strd	r0, r1, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4bfe:	d1ec      	bne.n	4bda <vendor_request_handler+0x306>
			target.syncword |= (uint64_t)data[i+8] << 8*i;
		}
		precalc();
    4c00:	f001 ff12 	bl	6a28 <precalc>
    4c04:	e16b      	b.n	4ede <vendor_request_handler+0x60a>
    4c06:	bf00      	nop
    4c08:	10000a1c 	.word	0x10000a1c
    4c0c:	2009c034 	.word	0x2009c034
    4c10:	2009c03c 	.word	0x2009c03c
    4c14:	2009c038 	.word	0x2009c038
    4c18:	2009c054 	.word	0x2009c054
    4c1c:	2009c058 	.word	0x2009c058
    4c20:	2009c05c 	.word	0x2009c05c
    4c24:	10001080 	.word	0x10001080
    4c28:	10000448 	.word	0x10000448
    4c2c:	4305bb21 	.word	0x4305bb21
    4c30:	1000001c 	.word	0x1000001c
    4c34:	00009538 	.word	0x00009538
    4c38:	00008d1b 	.word	0x00008d1b
    4c3c:	10001048 	.word	0x10001048
    4c40:	100010c0 	.word	0x100010c0
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
    4c44:	4aa9      	ldr	r2, [pc, #676]	; (4eec <vendor_request_handler+0x618>)
    4c46:	2300      	movs	r3, #0
    4c48:	6013      	str	r3, [r2, #0]
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
    4c4a:	6811      	ldr	r1, [r2, #0]
    4c4c:	0209      	lsls	r1, r1, #8
    4c4e:	6011      	str	r1, [r2, #0]
			clkn_offset |= data[i];
    4c50:	5cf0      	ldrb	r0, [r6, r3]
    4c52:	6811      	ldr	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c54:	3301      	adds	r3, #1
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c56:	4301      	orrs	r1, r0
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c58:	2b04      	cmp	r3, #4
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c5a:	6011      	str	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c5c:	d1f5      	bne.n	4c4a <vendor_request_handler+0x376>
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
    4c5e:	4ba4      	ldr	r3, [pc, #656]	; (4ef0 <vendor_request_handler+0x61c>)
    4c60:	2202      	movs	r2, #2
    4c62:	729a      	strb	r2, [r3, #10]
		dma_discard = 1;
		DIO_SSEL_SET;
    4c64:	4aa3      	ldr	r2, [pc, #652]	; (4ef4 <vendor_request_handler+0x620>)
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c66:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4c68:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c6c:	7418      	strb	r0, [r3, #16]
		DIO_SSEL_SET;
    4c6e:	6011      	str	r1, [r2, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4c70:	7972      	ldrb	r2, [r6, #5]
    4c72:	7931      	ldrb	r1, [r6, #4]
    4c74:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    4c78:	4a9f      	ldr	r2, [pc, #636]	; (4ef8 <vendor_request_handler+0x624>)
    4c7a:	8011      	strh	r1, [r2, #0]
		requested_mode = MODE_BT_FOLLOW;
    4c7c:	2208      	movs	r2, #8
    4c7e:	749a      	strb	r2, [r3, #18]
		break;
    4c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
    4c84:	4b9a      	ldr	r3, [pc, #616]	; (4ef0 <vendor_request_handler+0x61c>)
    4c86:	2205      	movs	r2, #5
    4c88:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_AFH;
    4c8a:	220e      	movs	r2, #14
    4c8c:	749a      	strb	r2, [r3, #18]

		for(int i=0; i < 10; i++) {
    4c8e:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4c90:	499a      	ldr	r1, [pc, #616]	; (4efc <vendor_request_handler+0x628>)
    4c92:	2200      	movs	r2, #0
    4c94:	545a      	strb	r2, [r3, r1]

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
    4c96:	3301      	adds	r3, #1
    4c98:	2b0a      	cmp	r3, #10
    4c9a:	d1f9      	bne.n	4c90 <vendor_request_handler+0x3bc>
			afh_map[i] = 0;
		}
		used_channels = 0;
    4c9c:	4b98      	ldr	r3, [pc, #608]	; (4f00 <vendor_request_handler+0x62c>)
		afh_enabled = 1;
    4c9e:	2001      	movs	r0, #1
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
		}
		used_channels = 0;
    4ca0:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4ca2:	4b98      	ldr	r3, [pc, #608]	; (4f04 <vendor_request_handler+0x630>)
    4ca4:	7018      	strb	r0, [r3, #0]
		break;
    4ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_HOP:
		do_hop = 1;
    4caa:	4b91      	ldr	r3, [pc, #580]	; (4ef0 <vendor_request_handler+0x61c>)
    4cac:	2001      	movs	r0, #1
    4cae:	72d8      	strb	r0, [r3, #11]
		break;
    4cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4cb4:	7853      	ldrb	r3, [r2, #1]
    4cb6:	7892      	ldrb	r2, [r2, #2]
    4cb8:	0412      	lsls	r2, r2, #16
    4cba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    4cbe:	7833      	ldrb	r3, [r6, #0]
    4cc0:	431a      	orrs	r2, r3
    4cc2:	78f3      	ldrb	r3, [r6, #3]
    4cc4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		clkn = clock;
    4cc8:	4b8f      	ldr	r3, [pc, #572]	; (4f08 <vendor_request_handler+0x634>)
    4cca:	601a      	str	r2, [r3, #0]
    4ccc:	e0a1      	b.n	4e12 <vendor_request_handler+0x53e>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4cce:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = data[i];
    4cd0:	5cf1      	ldrb	r1, [r6, r3]
    4cd2:	4a8a      	ldr	r2, [pc, #552]	; (4efc <vendor_request_handler+0x628>)
    4cd4:	5499      	strb	r1, [r3, r2]
		clkn = clock;
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    4cd6:	3301      	adds	r3, #1
    4cd8:	2b0a      	cmp	r3, #10
    4cda:	d1f9      	bne.n	4cd0 <vendor_request_handler+0x3fc>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    4cdc:	4a89      	ldr	r2, [pc, #548]	; (4f04 <vendor_request_handler+0x630>)
    4cde:	2001      	movs	r0, #1
    4ce0:	7010      	strb	r0, [r2, #0]
		*data_len = 10;
    4ce2:	6023      	str	r3, [r4, #0]
		break;
    4ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4ce8:	2300      	movs	r3, #0
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
    4cea:	4984      	ldr	r1, [pc, #528]	; (4efc <vendor_request_handler+0x628>)
    4cec:	2200      	movs	r2, #0
    4cee:	545a      	strb	r2, [r3, r1]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    4cf0:	3301      	adds	r3, #1
    4cf2:	2b0a      	cmp	r3, #10
    4cf4:	d1f9      	bne.n	4cea <vendor_request_handler+0x416>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    4cf6:	4983      	ldr	r1, [pc, #524]	; (4f04 <vendor_request_handler+0x630>)
    4cf8:	700a      	strb	r2, [r1, #0]
    4cfa:	e6ac      	b.n	4a56 <vendor_request_handler+0x182>
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    4cfc:	4b82      	ldr	r3, [pc, #520]	; (4f08 <vendor_request_handler+0x634>)
    4cfe:	6819      	ldr	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4d00:	2300      	movs	r3, #0
    4d02:	00da      	lsls	r2, r3, #3
			data[i] = (clock >> (8*i)) & 0xff;
    4d04:	fa21 f202 	lsr.w	r2, r1, r2
    4d08:	54f2      	strb	r2, [r6, r3]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(int i=0; i < 4; i++) {
    4d0a:	3301      	adds	r3, #1
    4d0c:	2b04      	cmp	r3, #4
    4d0e:	d1f8      	bne.n	4d02 <vendor_request_handler+0x42e>
    4d10:	e6a1      	b.n	4a56 <vendor_request_handler+0x182>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_TRIM_CLOCK:
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4d12:	7873      	ldrb	r3, [r6, #1]
    4d14:	7812      	ldrb	r2, [r2, #0]
    4d16:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    4d1a:	4b77      	ldr	r3, [pc, #476]	; (4ef8 <vendor_request_handler+0x624>)
    4d1c:	801a      	strh	r2, [r3, #0]
    4d1e:	e0de      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_FIX_CLOCK_DRIFT:
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4d20:	4b7a      	ldr	r3, [pc, #488]	; (4f0c <vendor_request_handler+0x638>)
    4d22:	7810      	ldrb	r0, [r2, #0]
    4d24:	8819      	ldrh	r1, [r3, #0]
    4d26:	7852      	ldrb	r2, [r2, #1]
    4d28:	b289      	uxth	r1, r1
    4d2a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4d2e:	440a      	add	r2, r1
    4d30:	b292      	uxth	r2, r2
    4d32:	801a      	strh	r2, [r3, #0]

		// Too slow
		if (clk_drift_ppm < 0) {
    4d34:	881a      	ldrh	r2, [r3, #0]
    4d36:	4976      	ldr	r1, [pc, #472]	; (4f10 <vendor_request_handler+0x63c>)
    4d38:	b212      	sxth	r2, r2
    4d3a:	2a00      	cmp	r2, #0
    4d3c:	4a75      	ldr	r2, [pc, #468]	; (4f14 <vendor_request_handler+0x640>)
    4d3e:	da07      	bge.n	4d50 <vendor_request_handler+0x47c>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4d40:	881b      	ldrh	r3, [r3, #0]
    4d42:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d46:	425b      	negs	r3, r3
    4d48:	b29b      	uxth	r3, r3
    4d4a:	fb90 f3f3 	sdiv	r3, r0, r3
    4d4e:	e00a      	b.n	4d66 <vendor_request_handler+0x492>
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
		}
		// Too fast
		else if (clk_drift_ppm > 0) {
    4d50:	8818      	ldrh	r0, [r3, #0]
    4d52:	b200      	sxth	r0, r0
    4d54:	2800      	cmp	r0, #0
    4d56:	dd0d      	ble.n	4d74 <vendor_request_handler+0x4a0>
			clk_drift_correction = 320 / clk_drift_ppm;
    4d58:	881b      	ldrh	r3, [r3, #0]
    4d5a:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d5e:	b21b      	sxth	r3, r3
    4d60:	fb90 f3f3 	sdiv	r3, r0, r3
    4d64:	b29b      	uxth	r3, r3
    4d66:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4d68:	4b6b      	ldr	r3, [pc, #428]	; (4f18 <vendor_request_handler+0x644>)
    4d6a:	6818      	ldr	r0, [r3, #0]
    4d6c:	8813      	ldrh	r3, [r2, #0]
    4d6e:	b29b      	uxth	r3, r3
    4d70:	4403      	add	r3, r0
    4d72:	e001      	b.n	4d78 <vendor_request_handler+0x4a4>
		}
		// Don't trim
		else {
			clk_drift_correction = 0;
    4d74:	2300      	movs	r3, #0
    4d76:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = 0;
    4d78:	600b      	str	r3, [r1, #0]
    4d7a:	e0b0      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;

		do_hop = 0;
    4d7c:	4b5c      	ldr	r3, [pc, #368]	; (4ef0 <vendor_request_handler+0x61c>)
		}

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    4d7e:	2200      	movs	r2, #0
    4d80:	6022      	str	r2, [r4, #0]

		do_hop = 0;
    4d82:	72da      	strb	r2, [r3, #11]
		hop_mode = HOP_BTLE;
    4d84:	2203      	movs	r2, #3
    4d86:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4d88:	2209      	movs	r2, #9
    4d8a:	e03f      	b.n	4e0c <vendor_request_handler+0x538>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4d8c:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4d8e:	4963      	ldr	r1, [pc, #396]	; (4f1c <vendor_request_handler+0x648>)
    4d90:	00da      	lsls	r2, r3, #3
    4d92:	6849      	ldr	r1, [r1, #4]
    4d94:	fa21 f202 	lsr.w	r2, r1, r2
    4d98:	54f2      	strb	r2, [r6, r3]
		queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    4d9a:	3301      	adds	r3, #1
    4d9c:	2b04      	cmp	r3, #4
    4d9e:	d1f6      	bne.n	4d8e <vendor_request_handler+0x4ba>
    4da0:	e659      	b.n	4a56 <vendor_request_handler+0x182>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4da2:	78b3      	ldrb	r3, [r6, #2]
    4da4:	7852      	ldrb	r2, [r2, #1]
    4da6:	041b      	lsls	r3, r3, #16
    4da8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4dac:	7832      	ldrb	r2, [r6, #0]
    4dae:	78f0      	ldrb	r0, [r6, #3]
    4db0:	4313      	orrs	r3, r2
    4db2:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4db6:	f7ff fbf1 	bl	459c <le_set_access_address>
		le.target_set = 1;
    4dba:	2001      	movs	r0, #1
    4dbc:	4b57      	ldr	r3, [pc, #348]	; (4f1c <vendor_request_handler+0x648>)
    4dbe:	e082      	b.n	4ec6 <vendor_request_handler+0x5f2>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    4dc0:	2313      	movs	r3, #19
    4dc2:	7013      	strb	r3, [r2, #0]
		data[1] = 0x37;
    4dc4:	2337      	movs	r3, #55	; 0x37
    4dc6:	7073      	strb	r3, [r6, #1]
    4dc8:	e02f      	b.n	4e2a <vendor_request_handler+0x556>
		*data_len = 2;
		break;

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    4dca:	4b54      	ldr	r3, [pc, #336]	; (4f1c <vendor_request_handler+0x648>)
    4dcc:	695b      	ldr	r3, [r3, #20]
    4dce:	3300      	adds	r3, #0
    4dd0:	bf18      	it	ne
    4dd2:	2301      	movne	r3, #1
    4dd4:	e6e2      	b.n	4b9c <vendor_request_handler+0x2c8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    4dd6:	880a      	ldrh	r2, [r1, #0]
    4dd8:	4b50      	ldr	r3, [pc, #320]	; (4f1c <vendor_request_handler+0x648>)
    4dda:	3200      	adds	r2, #0
    4ddc:	bf18      	it	ne
    4dde:	2201      	movne	r2, #1
    4de0:	615a      	str	r2, [r3, #20]
    4de2:	e07c      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_POLL:
		p = dequeue();
    4de4:	f002 f87c 	bl	6ee0 <dequeue>
		if (p != NULL) {
    4de8:	4601      	mov	r1, r0
    4dea:	b128      	cbz	r0, 4df8 <vendor_request_handler+0x524>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4dec:	4630      	mov	r0, r6
    4dee:	2240      	movs	r2, #64	; 0x40
    4df0:	f003 fe96 	bl	8b20 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4df4:	2340      	movs	r3, #64	; 0x40
    4df6:	e62e      	b.n	4a56 <vendor_request_handler+0x182>
		} else {
			data[0] = 0;
    4df8:	7030      	strb	r0, [r6, #0]
			*data_len = 1;
    4dfa:	2001      	movs	r0, #1
    4dfc:	6020      	str	r0, [r4, #0]
    4dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;

		hop_mode = HOP_NONE;
    4e02:	4b3b      	ldr	r3, [pc, #236]	; (4ef0 <vendor_request_handler+0x61c>)
			*data_len = 1;
		}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    4e04:	2200      	movs	r2, #0
    4e06:	6022      	str	r2, [r4, #0]

		hop_mode = HOP_NONE;
    4e08:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4e0a:	220a      	movs	r2, #10
    4e0c:	749a      	strb	r2, [r3, #18]

		queue_init();
    4e0e:	f002 f83f 	bl	6e90 <queue_init>
		cs_threshold_calc_and_set(channel);
    4e12:	4b42      	ldr	r3, [pc, #264]	; (4f1c <vendor_request_handler+0x648>)
    4e14:	8818      	ldrh	r0, [r3, #0]
    4e16:	b280      	uxth	r0, r0
    4e18:	f002 f928 	bl	706c <cs_threshold_calc_and_set>
    4e1c:	e05f      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    4e1e:	7808      	ldrb	r0, [r1, #0]
    4e20:	f003 f89e 	bl	7f60 <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4e24:	0a03      	lsrs	r3, r0, #8
    4e26:	7033      	strb	r3, [r6, #0]
		data[1] = reg_val & 0xff;
    4e28:	7070      	strb	r0, [r6, #1]
		*data_len = 2;
    4e2a:	2302      	movs	r3, #2
    4e2c:	e613      	b.n	4a56 <vendor_request_handler+0x182>
		break;

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4e2e:	7808      	ldrb	r0, [r1, #0]
    4e30:	8849      	ldrh	r1, [r1, #2]
    4e32:	f003 f89e 	bl	7f72 <cc2400_set>
    4e36:	e052      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e38:	882b      	ldrh	r3, [r5, #0]
    4e3a:	42a3      	cmp	r3, r4
    4e3c:	d94f      	bls.n	4ede <vendor_request_handler+0x60a>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    4e3e:	2303      	movs	r3, #3
    4e40:	4363      	muls	r3, r4
    4e42:	18f2      	adds	r2, r6, r3
    4e44:	7851      	ldrb	r1, [r2, #1]
    4e46:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4e48:	5cf0      	ldrb	r0, [r6, r3]
    4e4a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e4e:	3401      	adds	r4, #1
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
			cc2400_set(data[i*3], reg_val);
    4e50:	f003 f88f 	bl	7f72 <cc2400_set>
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e54:	b2e4      	uxtb	r4, r4
    4e56:	e7ef      	b.n	4e38 <vendor_request_handler+0x564>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4e58:	2500      	movs	r5, #0
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
			reg_val = cc2400_get(i);
    4e5a:	4628      	mov	r0, r5
    4e5c:	f003 f880 	bl	7f60 <cc2400_get>
			data[i*3] = i;
    4e60:	7035      	strb	r5, [r6, #0]
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4e62:	3501      	adds	r5, #1
    4e64:	b2ed      	uxtb	r5, r5
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4e66:	0a03      	lsrs	r3, r0, #8
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4e68:	2d2e      	cmp	r5, #46	; 0x2e
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4e6a:	7073      	strb	r3, [r6, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4e6c:	70b0      	strb	r0, [r6, #2]
    4e6e:	f106 0603 	add.w	r6, r6, #3
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4e72:	d1f2      	bne.n	4e5a <vendor_request_handler+0x586>
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
			data[(i*3)+2] = reg_val & 0xff;
		}
		*data_len = MAX_READ_REG*3;
    4e74:	2387      	movs	r3, #135	; 0x87
    4e76:	e5ee      	b.n	4a56 <vendor_request_handler+0x182>
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4e78:	7992      	ldrb	r2, [r2, #6]
		memcpy(&tx_pkt, data, i);
    4e7a:	4829      	ldr	r0, [pc, #164]	; (4f20 <vendor_request_handler+0x64c>)
		}
		*data_len = MAX_READ_REG*3;
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4e7c:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4e7e:	b2d2      	uxtb	r2, r2
    4e80:	4631      	mov	r1, r6
    4e82:	f003 fe4d 	bl	8b20 <memcpy>
		//tx_pkt.channel = data[4] << 8 | data[5];
		requested_mode = MODE_TX_GENERIC;
    4e86:	2210      	movs	r2, #16
    4e88:	e65f      	b.n	4b4a <vendor_request_handler+0x276>
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    4e8a:	4c19      	ldr	r4, [pc, #100]	; (4ef0 <vendor_request_handler+0x61c>)
    4e8c:	4611      	mov	r1, r2
    4e8e:	f104 0020 	add.w	r0, r4, #32
    4e92:	2206      	movs	r2, #6
    4e94:	f003 fe44 	bl	8b20 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4e98:	230c      	movs	r3, #12
    4e9a:	74a3      	strb	r3, [r4, #18]
    4e9c:	e01f      	b.n	4ede <vendor_request_handler+0x60a>
		break;

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4e9e:	7952      	ldrb	r2, [r2, #5]
    4ea0:	4b1e      	ldr	r3, [pc, #120]	; (4f1c <vendor_request_handler+0x648>)
		le.target[1] = data[4];
		le.target[2] = data[3];
		le.target[3] = data[2];
		le.target[4] = data[1];
		le.target[5] = data[0];
		le.target_set = 1;
    4ea2:	2001      	movs	r0, #1
		break;

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[1] = data[4];
    4ea8:	7932      	ldrb	r2, [r6, #4]
    4eaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target[2] = data[3];
    4eae:	78f2      	ldrb	r2, [r6, #3]
    4eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		le.target[3] = data[2];
    4eb4:	78b2      	ldrb	r2, [r6, #2]
    4eb6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		le.target[4] = data[1];
    4eba:	7872      	ldrb	r2, [r6, #1]
    4ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		le.target[5] = data[0];
    4ec0:	7832      	ldrb	r2, [r6, #0]
    4ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		le.target_set = 1;
    4ec6:	6418      	str	r0, [r3, #64]	; 0x40
		break;
    4ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    4ecc:	780a      	ldrb	r2, [r1, #0]
    4ece:	4b08      	ldr	r3, [pc, #32]	; (4ef0 <vendor_request_handler+0x61c>)
    4ed0:	74da      	strb	r2, [r3, #19]
    4ed2:	e004      	b.n	4ede <vendor_request_handler+0x60a>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    4ed4:	4b06      	ldr	r3, [pc, #24]	; (4ef0 <vendor_request_handler+0x61c>)
    4ed6:	220d      	movs	r2, #13
    4ed8:	749a      	strb	r2, [r3, #18]
		ego_mode = request_params[0];
    4eda:	780a      	ldrb	r2, [r1, #0]
    4edc:	751a      	strb	r2, [r3, #20]
		break;

	default:
		return 0;
	}
	return 1;
    4ede:	2001      	movs	r0, #1
    4ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4ee4:	2000      	movs	r0, #0

	default:
		return 0;
	}
	return 1;
}
    4ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4eea:	bf00      	nop
    4eec:	10000bb8 	.word	0x10000bb8
    4ef0:	10000a1c 	.word	0x10000a1c
    4ef4:	2009c098 	.word	0x2009c098
    4ef8:	10000d12 	.word	0x10000d12
    4efc:	10000bab 	.word	0x10000bab
    4f00:	10000ba9 	.word	0x10000ba9
    4f04:	10001047 	.word	0x10001047
    4f08:	10000bc4 	.word	0x10000bc4
    4f0c:	10001044 	.word	0x10001044
    4f10:	1000107c 	.word	0x1000107c
    4f14:	10000bc0 	.word	0x10000bc0
    4f18:	10000bbc 	.word	0x10000bbc
    4f1c:	10000448 	.word	0x10000448
    4f20:	10000bc8 	.word	0x10000bc8

00004f24 <enqueue_with_ts>:

	return 1;
}

int enqueue_with_ts(uint8_t type, uint8_t* buf, uint32_t ts)
{
    4f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f28:	4606      	mov	r6, r0
    4f2a:	460f      	mov	r7, r1
    4f2c:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    4f2e:	f001 ffbd 	bl	6eac <usb_enqueue>
    4f32:	4d10      	ldr	r5, [pc, #64]	; (4f74 <enqueue_with_ts+0x50>)

	/* fail if queue is full */
	if (f == NULL) {
    4f34:	4604      	mov	r4, r0
    4f36:	b928      	cbnz	r0, 4f44 <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    4f38:	786b      	ldrb	r3, [r5, #1]
    4f3a:	f043 0304 	orr.w	r3, r3, #4
    4f3e:	706b      	strb	r3, [r5, #1]
		return 0;
    4f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f44:	4b0c      	ldr	r3, [pc, #48]	; (4f78 <enqueue_with_ts+0x54>)
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    4f46:	7006      	strb	r6, [r0, #0]

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f48:	881b      	ldrh	r3, [r3, #0]
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    4f4a:	2600      	movs	r6, #0
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f4c:	b29b      	uxth	r3, r3
    4f4e:	3b62      	subs	r3, #98	; 0x62
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    4f50:	70c6      	strb	r6, [r0, #3]
	f->clk100ns = ts;
    4f52:	f8c0 8004 	str.w	r8, [r0, #4]

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f56:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    4f58:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    4f5a:	72c6      	strb	r6, [r0, #11]

	memcpy(f->data, buf, DMA_SIZE);
    4f5c:	4639      	mov	r1, r7
    4f5e:	2232      	movs	r2, #50	; 0x32
    4f60:	300e      	adds	r0, #14
    4f62:	f003 fddd 	bl	8b20 <memcpy>

	f->status = status;
    4f66:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    4f68:	706e      	strb	r6, [r5, #1]
	f->rssi_avg = 0;
	f->rssi_count = 0;

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    4f6a:	7063      	strb	r3, [r4, #1]
	status = 0;

	return 1;
    4f6c:	2001      	movs	r0, #1
}
    4f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f72:	bf00      	nop
    4f74:	10000a1c 	.word	0x10000a1c
    4f78:	10000448 	.word	0x10000448

00004f7c <TIMER0_IRQHandler>:
	return 1;
}

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    4f7c:	b570      	push	{r4, r5, r6, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    4f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4f82:	681b      	ldr	r3, [r3, #0]
    4f84:	07db      	lsls	r3, r3, #31
    4f86:	d57f      	bpl.n	5088 <TIMER0_IRQHandler+0x10c>

		clkn += clkn_offset + 1;
    4f88:	4940      	ldr	r1, [pc, #256]	; (508c <TIMER0_IRQHandler+0x110>)
    4f8a:	4b41      	ldr	r3, [pc, #260]	; (5090 <TIMER0_IRQHandler+0x114>)
    4f8c:	6808      	ldr	r0, [r1, #0]
    4f8e:	681a      	ldr	r2, [r3, #0]
    4f90:	4402      	add	r2, r0
    4f92:	3201      	adds	r2, #1
    4f94:	600a      	str	r2, [r1, #0]
		clkn_offset = 0;
    4f96:	2200      	movs	r2, #0
    4f98:	601a      	str	r2, [r3, #0]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4f9a:	4a3e      	ldr	r2, [pc, #248]	; (5094 <TIMER0_IRQHandler+0x118>)
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4f9c:	680c      	ldr	r4, [r1, #0]
    4f9e:	4b3e      	ldr	r3, [pc, #248]	; (5098 <TIMER0_IRQHandler+0x11c>)

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4fa0:	7a96      	ldrb	r6, [r2, #10]
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4fa2:	69d8      	ldr	r0, [r3, #28]
    4fa4:	4615      	mov	r5, r2

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4fa6:	b116      	cbz	r6, 4fae <TIMER0_IRQHandler+0x32>
    4fa8:	7a96      	ldrb	r6, [r2, #10]
    4faa:	2e01      	cmp	r6, #1
    4fac:	d105      	bne.n	4fba <TIMER0_IRQHandler+0x3e>
			if ((clkn & 0x7f) == 0)
    4fae:	680b      	ldr	r3, [r1, #0]
    4fb0:	065e      	lsls	r6, r3, #25
    4fb2:	d137      	bne.n	5024 <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    4fb4:	2301      	movs	r3, #1
    4fb6:	72eb      	strb	r3, [r5, #11]
    4fb8:	e034      	b.n	5024 <TIMER0_IRQHandler+0xa8>
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    4fba:	7a95      	ldrb	r5, [r2, #10]
    4fbc:	2d02      	cmp	r5, #2
    4fbe:	d103      	bne.n	4fc8 <TIMER0_IRQHandler+0x4c>
			if ((clkn & 0x1) == 0)
    4fc0:	680b      	ldr	r3, [r1, #0]
    4fc2:	07dc      	lsls	r4, r3, #31
    4fc4:	d42e      	bmi.n	5024 <TIMER0_IRQHandler+0xa8>
    4fc6:	e02b      	b.n	5020 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    4fc8:	7a95      	ldrb	r5, [r2, #10]
    4fca:	2d03      	cmp	r5, #3
    4fcc:	d11c      	bne.n	5008 <TIMER0_IRQHandler+0x8c>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    4fce:	7e1d      	ldrb	r5, [r3, #24]
    4fd0:	2d03      	cmp	r5, #3
    4fd2:	d127      	bne.n	5024 <TIMER0_IRQHandler+0xa8>
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4fd4:	1a20      	subs	r0, r4, r0
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    4fd6:	0780      	lsls	r0, r0, #30
    4fd8:	d124      	bne.n	5024 <TIMER0_IRQHandler+0xa8>
				--le.interval_timer;
    4fda:	8c18      	ldrh	r0, [r3, #32]
    4fdc:	b280      	uxth	r0, r0
    4fde:	3801      	subs	r0, #1
    4fe0:	b280      	uxth	r0, r0
    4fe2:	8418      	strh	r0, [r3, #32]
				if (le.interval_timer == 0) {
    4fe4:	8c18      	ldrh	r0, [r3, #32]
    4fe6:	b280      	uxth	r0, r0
    4fe8:	b948      	cbnz	r0, 4ffe <TIMER0_IRQHandler+0x82>
					do_hop = 1;
    4fea:	2001      	movs	r0, #1
    4fec:	72d0      	strb	r0, [r2, #11]
					++le.conn_count;
    4fee:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    4ff0:	b292      	uxth	r2, r2
    4ff2:	4402      	add	r2, r0
    4ff4:	b292      	uxth	r2, r2
    4ff6:	849a      	strh	r2, [r3, #36]	; 0x24
					le.interval_timer = le.conn_interval;
    4ff8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    4ffa:	841a      	strh	r2, [r3, #32]
    4ffc:	e012      	b.n	5024 <TIMER0_IRQHandler+0xa8>
				} else {
					TXLED_CLR; // hack!
    4ffe:	4b27      	ldr	r3, [pc, #156]	; (509c <TIMER0_IRQHandler+0x120>)
    5000:	f44f 7280 	mov.w	r2, #256	; 0x100
    5004:	601a      	str	r2, [r3, #0]
    5006:	e00d      	b.n	5024 <TIMER0_IRQHandler+0xa8>
				}
			}
		}
		else if (hop_mode == HOP_AFH) {
    5008:	7a90      	ldrb	r0, [r2, #10]
    500a:	2805      	cmp	r0, #5
    500c:	d10a      	bne.n	5024 <TIMER0_IRQHandler+0xa8>
			if( (last_hop + hop_timeout) == clkn ) {
    500e:	4824      	ldr	r0, [pc, #144]	; (50a0 <TIMER0_IRQHandler+0x124>)
    5010:	6804      	ldr	r4, [r0, #0]
    5012:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
    5016:	680b      	ldr	r3, [r1, #0]
    5018:	b280      	uxth	r0, r0
    501a:	4420      	add	r0, r4
    501c:	4298      	cmp	r0, r3
    501e:	d101      	bne.n	5024 <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    5020:	2301      	movs	r3, #1
    5022:	72d3      	strb	r3, [r2, #11]
			}
		}

		// Fix linear clock drift deviation
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    5024:	4a1f      	ldr	r2, [pc, #124]	; (50a4 <TIMER0_IRQHandler+0x128>)
    5026:	4b20      	ldr	r3, [pc, #128]	; (50a8 <TIMER0_IRQHandler+0x12c>)
    5028:	6810      	ldr	r0, [r2, #0]
    502a:	b1c0      	cbz	r0, 505e <TIMER0_IRQHandler+0xe2>
    502c:	8818      	ldrh	r0, [r3, #0]
    502e:	b280      	uxth	r0, r0
    5030:	b9a8      	cbnz	r0, 505e <TIMER0_IRQHandler+0xe2>
			if(clkn >= clkn_next_drift_fix) {
    5032:	680c      	ldr	r4, [r1, #0]
    5034:	6810      	ldr	r0, [r2, #0]
    5036:	4284      	cmp	r4, r0
    5038:	d311      	bcc.n	505e <TIMER0_IRQHandler+0xe2>

				// Too fast
				if(clk_drift_ppm >= 0) {
    503a:	481c      	ldr	r0, [pc, #112]	; (50ac <TIMER0_IRQHandler+0x130>)
    503c:	8800      	ldrh	r0, [r0, #0]
    503e:	b200      	sxth	r0, r0
    5040:	2800      	cmp	r0, #0
					clk100ns_offset = 1;
    5042:	bfac      	ite	ge
    5044:	2001      	movge	r0, #1
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    5046:	f641 0069 	movwlt	r0, #6249	; 0x1869
    504a:	8018      	strh	r0, [r3, #0]
				}
				clkn_last_drift_fix = clkn;
    504c:	680c      	ldr	r4, [r1, #0]
    504e:	4818      	ldr	r0, [pc, #96]	; (50b0 <TIMER0_IRQHandler+0x134>)
    5050:	6004      	str	r4, [r0, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    5052:	6804      	ldr	r4, [r0, #0]
    5054:	4817      	ldr	r0, [pc, #92]	; (50b4 <TIMER0_IRQHandler+0x138>)
    5056:	8800      	ldrh	r0, [r0, #0]
    5058:	b280      	uxth	r0, r0
    505a:	4420      	add	r0, r4
    505c:	6010      	str	r0, [r2, #0]
			}
		}

		// Negative clock correction
		if(clk100ns_offset > 3124)
    505e:	8818      	ldrh	r0, [r3, #0]
    5060:	f640 4234 	movw	r2, #3124	; 0xc34
    5064:	b280      	uxth	r0, r0
    5066:	4290      	cmp	r0, r2
    5068:	d902      	bls.n	5070 <TIMER0_IRQHandler+0xf4>
			clkn += 2;
    506a:	680a      	ldr	r2, [r1, #0]
    506c:	3202      	adds	r2, #2
    506e:	600a      	str	r2, [r1, #0]

		T0MR0 = 3124 + clk100ns_offset;
    5070:	8819      	ldrh	r1, [r3, #0]
    5072:	4a11      	ldr	r2, [pc, #68]	; (50b8 <TIMER0_IRQHandler+0x13c>)
    5074:	b289      	uxth	r1, r1
    5076:	f601 4134 	addw	r1, r1, #3124	; 0xc34
    507a:	6011      	str	r1, [r2, #0]
		clk100ns_offset = 0;
    507c:	2200      	movs	r2, #0
    507e:	801a      	strh	r2, [r3, #0]

		/* Ack interrupt */
		T0IR = TIR_MR0_Interrupt;
    5080:	2201      	movs	r2, #1
    5082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5086:	601a      	str	r2, [r3, #0]
    5088:	bd70      	pop	{r4, r5, r6, pc}
    508a:	bf00      	nop
    508c:	10000bc4 	.word	0x10000bc4
    5090:	10000bb8 	.word	0x10000bb8
    5094:	10000a1c 	.word	0x10000a1c
    5098:	10000448 	.word	0x10000448
    509c:	2009c03c 	.word	0x2009c03c
    50a0:	10000ba0 	.word	0x10000ba0
    50a4:	1000107c 	.word	0x1000107c
    50a8:	10000d12 	.word	0x10000d12
    50ac:	10001044 	.word	0x10001044
    50b0:	10000bbc 	.word	0x10000bbc
    50b4:	10000bc0 	.word	0x10000bc0
    50b8:	40004018 	.word	0x40004018

000050bc <EINT3_IRQHandler>:
/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
void EINT3_IRQHandler()
{
	/* TODO - check specific source of shared interrupt */
	IO2IntClr   = PIN_GIO6; // clear interrupt
    50bc:	4b08      	ldr	r3, [pc, #32]	; (50e0 <EINT3_IRQHandler+0x24>)
    50be:	2204      	movs	r2, #4
    50c0:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    50c2:	4b08      	ldr	r3, [pc, #32]	; (50e4 <EINT3_IRQHandler+0x28>)
    50c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    50c8:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    50ca:	4b07      	ldr	r3, [pc, #28]	; (50e8 <EINT3_IRQHandler+0x2c>)
    50cc:	2201      	movs	r2, #1
    50ce:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    50d0:	4b06      	ldr	r3, [pc, #24]	; (50ec <EINT3_IRQHandler+0x30>)
    50d2:	7a9a      	ldrb	r2, [r3, #10]
    50d4:	2a02      	cmp	r2, #2
		dma_discard = 0;
    50d6:	bf04      	itt	eq
    50d8:	2200      	moveq	r2, #0
    50da:	741a      	strbeq	r2, [r3, #16]
    50dc:	4770      	bx	lr
    50de:	bf00      	nop
    50e0:	400280ac 	.word	0x400280ac
    50e4:	2009c09c 	.word	0x2009c09c
    50e8:	100010bd 	.word	0x100010bd
    50ec:	10000a1c 	.word	0x10000a1c

000050f0 <DMA_IRQHandler>:
		while ((clkn & 0xffffff) < stop_at);
	}
}

void DMA_IRQHandler()
{
    50f0:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    50f2:	4b28      	ldr	r3, [pc, #160]	; (5194 <DMA_IRQHandler+0xa4>)
    50f4:	7c5a      	ldrb	r2, [r3, #17]
    50f6:	2a01      	cmp	r2, #1
    50f8:	d011      	beq.n	511e <DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_FOLLOW
    50fa:	7c5a      	ldrb	r2, [r3, #17]
    50fc:	2a08      	cmp	r2, #8
    50fe:	d00e      	beq.n	511e <DMA_IRQHandler+0x2e>
	   || mode == MODE_SPECAN
    5100:	7c5a      	ldrb	r2, [r3, #17]
    5102:	2a04      	cmp	r2, #4
    5104:	d00b      	beq.n	511e <DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_FOLLOW_LE
    5106:	7c5a      	ldrb	r2, [r3, #17]
    5108:	2a09      	cmp	r2, #9
    510a:	d008      	beq.n	511e <DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_PROMISC_LE
    510c:	7c5a      	ldrb	r2, [r3, #17]
    510e:	2a0a      	cmp	r2, #10
    5110:	d005      	beq.n	511e <DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_SLAVE_LE
    5112:	7c5a      	ldrb	r2, [r3, #17]
    5114:	2a0c      	cmp	r2, #12
    5116:	d002      	beq.n	511e <DMA_IRQHandler+0x2e>
	   || mode == MODE_RX_GENERIC)
    5118:	7c5a      	ldrb	r2, [r3, #17]
    511a:	2a0f      	cmp	r2, #15
    511c:	d139      	bne.n	5192 <DMA_IRQHandler+0xa2>
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
    511e:	4a1e      	ldr	r2, [pc, #120]	; (5198 <DMA_IRQHandler+0xa8>)
    5120:	6812      	ldr	r2, [r2, #0]
    5122:	07d0      	lsls	r0, r2, #31
    5124:	d535      	bpl.n	5192 <DMA_IRQHandler+0xa2>
			if (DMACIntTCStat & (1 << 0)) {
    5126:	4a1d      	ldr	r2, [pc, #116]	; (519c <DMA_IRQHandler+0xac>)
    5128:	6812      	ldr	r2, [r2, #0]
    512a:	07d1      	lsls	r1, r2, #31
    512c:	d526      	bpl.n	517c <DMA_IRQHandler+0x8c>
				DMACIntTCClear = (1 << 0);
    512e:	4a1c      	ldr	r2, [pc, #112]	; (51a0 <DMA_IRQHandler+0xb0>)
    5130:	2101      	movs	r1, #1
    5132:	6011      	str	r1, [r2, #0]

				if (hop_mode == HOP_BLUETOOTH)
    5134:	7a9a      	ldrb	r2, [r3, #10]
    5136:	2a02      	cmp	r2, #2
    5138:	d103      	bne.n	5142 <DMA_IRQHandler+0x52>
					DIO_SSEL_SET;
    513a:	4a1a      	ldr	r2, [pc, #104]	; (51a4 <DMA_IRQHandler+0xb4>)
    513c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5140:	6011      	str	r1, [r2, #0]

				idle_buf_clk100ns  = CLK100NS;
    5142:	4a19      	ldr	r2, [pc, #100]	; (51a8 <DMA_IRQHandler+0xb8>)
    5144:	4819      	ldr	r0, [pc, #100]	; (51ac <DMA_IRQHandler+0xbc>)
    5146:	6811      	ldr	r1, [r2, #0]
    5148:	6800      	ldr	r0, [r0, #0]
    514a:	f3c1 0113 	ubfx	r1, r1, #0, #20
    514e:	f640 4435 	movw	r4, #3125	; 0xc35
    5152:	fb04 0101 	mla	r1, r4, r1, r0
    5156:	6059      	str	r1, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    5158:	6812      	ldr	r2, [r2, #0]
    515a:	f3c2 5207 	ubfx	r2, r2, #20, #8
    515e:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    5160:	4a13      	ldr	r2, [pc, #76]	; (51b0 <DMA_IRQHandler+0xc0>)
    5162:	8812      	ldrh	r2, [r2, #0]
    5164:	b292      	uxth	r2, r2
    5166:	811a      	strh	r2, [r3, #8]

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    5168:	4a12      	ldr	r2, [pc, #72]	; (51b4 <DMA_IRQHandler+0xc4>)
				active_rxbuf = idle_rxbuf;
    516a:	4b13      	ldr	r3, [pc, #76]	; (51b8 <DMA_IRQHandler+0xc8>)
				idle_buf_clk100ns  = CLK100NS;
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    516c:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    516e:	6818      	ldr	r0, [r3, #0]
    5170:	6010      	str	r0, [r2, #0]
				idle_rxbuf = tmp;
    5172:	6019      	str	r1, [r3, #0]

				++rx_tc;
    5174:	4b11      	ldr	r3, [pc, #68]	; (51bc <DMA_IRQHandler+0xcc>)
    5176:	681a      	ldr	r2, [r3, #0]
    5178:	3201      	adds	r2, #1
    517a:	601a      	str	r2, [r3, #0]
			}
			if (DMACIntErrStat & (1 << 0)) {
    517c:	4b10      	ldr	r3, [pc, #64]	; (51c0 <DMA_IRQHandler+0xd0>)
    517e:	681b      	ldr	r3, [r3, #0]
    5180:	07da      	lsls	r2, r3, #31
    5182:	d506      	bpl.n	5192 <DMA_IRQHandler+0xa2>
				DMACIntErrClr = (1 << 0);
    5184:	4b0f      	ldr	r3, [pc, #60]	; (51c4 <DMA_IRQHandler+0xd4>)
    5186:	2201      	movs	r2, #1
    5188:	601a      	str	r2, [r3, #0]
				++rx_err;
    518a:	4b0f      	ldr	r3, [pc, #60]	; (51c8 <DMA_IRQHandler+0xd8>)
    518c:	681a      	ldr	r2, [r3, #0]
    518e:	3201      	adds	r2, #1
    5190:	601a      	str	r2, [r3, #0]
    5192:	bd10      	pop	{r4, pc}
    5194:	10000a1c 	.word	0x10000a1c
    5198:	50004000 	.word	0x50004000
    519c:	50004004 	.word	0x50004004
    51a0:	50004008 	.word	0x50004008
    51a4:	2009c098 	.word	0x2009c098
    51a8:	10000bc4 	.word	0x10000bc4
    51ac:	40004008 	.word	0x40004008
    51b0:	10000448 	.word	0x10000448
    51b4:	10000c04 	.word	0x10000c04
    51b8:	10000d20 	.word	0x10000d20
    51bc:	10000ba4 	.word	0x10000ba4
    51c0:	5000400c 	.word	0x5000400c
    51c4:	50004010 	.word	0x50004010
    51c8:	100010b8 	.word	0x100010b8

000051cc <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    51cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51d0:	b090      	sub	sp, #64	; 0x40
    51d2:	4688      	mov	r8, r1
    51d4:	4604      	mov	r4, r0
    51d6:	4691      	mov	r9, r2
    51d8:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    51dc:	f10d 0103 	add.w	r1, sp, #3

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
    51e0:	2200      	movs	r2, #0
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
    51e2:	b2e6      	uxtb	r6, r4
		aa >>= 8;
		txbuf[i] = 0;
    51e4:	705a      	strb	r2, [r3, #1]
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
    51e6:	0a24      	lsrs	r4, r4, #8
		txbuf[i] = 0;
    51e8:	2507      	movs	r5, #7
		for (j = 0; j < 8; ++j) {
			txbuf[i] |= (byte & 1) << (7 - j);
    51ea:	f006 0001 	and.w	r0, r6, #1
    51ee:	40a8      	lsls	r0, r5
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    51f0:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
			txbuf[i] |= (byte & 1) << (7 - j);
    51f4:	ea40 0202 	orr.w	r2, r0, r2
    51f8:	b2d2      	uxtb	r2, r2
			byte >>= 1;
    51fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    51fe:	d2f4      	bcs.n	51ea <le_transmit+0x1e>
    5200:	f803 2f01 	strb.w	r2, [r3, #1]!
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5204:	428b      	cmp	r3, r1
    5206:	d1eb      	bne.n	51e0 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5208:	4d55      	ldr	r5, [pc, #340]	; (5360 <le_transmit+0x194>)
    520a:	8828      	ldrh	r0, [r5, #0]
    520c:	46aa      	mov	sl, r5
    520e:	b280      	uxth	r0, r0
    5210:	3862      	subs	r0, #98	; 0x62
    5212:	b2c0      	uxtb	r0, r0
    5214:	f001 fd42 	bl	6c9c <btle_channel_index>
    5218:	4b52      	ldr	r3, [pc, #328]	; (5364 <le_transmit+0x198>)
    521a:	5c1e      	ldrb	r6, [r3, r0]
	for (i = 0; i < len; ++i) {
    521c:	2300      	movs	r3, #0
    521e:	4543      	cmp	r3, r8
    5220:	d220      	bcs.n	5264 <le_transmit+0x98>
    5222:	a800      	add	r0, sp, #0
		byte = data[i];
    5224:	f819 7003 	ldrb.w	r7, [r9, r3]
    5228:	4418      	add	r0, r3
    522a:	2507      	movs	r5, #7
    522c:	2100      	movs	r1, #0
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    522e:	4a4d      	ldr	r2, [pc, #308]	; (5364 <le_transmit+0x198>)
    5230:	f007 0e01 	and.w	lr, r7, #1
    5234:	4432      	add	r2, r6
    5236:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    523a:	3601      	adds	r6, #1
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    523c:	ea8e 0e02 	eor.w	lr, lr, r2
			idx = (idx + 1) % sizeof(whitening);
    5240:	227f      	movs	r2, #127	; 0x7f
    5242:	fbb6 fcf2 	udiv	ip, r6, r2
    5246:	fb02 661c 	mls	r6, r2, ip, r6
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    524a:	fa0e f205 	lsl.w	r2, lr, r5
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    524e:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    5252:	ea42 0101 	orr.w	r1, r2, r1
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			byte >>= 1;
    5256:	ea4f 0757 	mov.w	r7, r7, lsr #1
			txbuf[i+4] |= bit << (7 - j);
    525a:	b2c9      	uxtb	r1, r1
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    525c:	d2e7      	bcs.n	522e <le_transmit+0x62>
    525e:	7101      	strb	r1, [r0, #4]
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    5260:	3301      	adds	r3, #1
    5262:	e7dc      	b.n	521e <le_transmit+0x52>
	}

	len += 4; // include the AA in len

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5264:	200d      	movs	r0, #13
    5266:	f647 71ff 	movw	r1, #32767	; 0x7fff
    526a:	f002 fe82 	bl	7f72 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    526e:	2012      	movs	r0, #18
    5270:	f642 3122 	movw	r1, #11042	; 0x2b22
    5274:	f002 fe7d 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5278:	2014      	movs	r0, #20
    527a:	f241 314b 	movw	r1, #4939	; 0x134b
    527e:	f002 fe78 	bl	7f72 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5282:	2020      	movs	r0, #32
    5284:	f640 4101 	movw	r1, #3073	; 0xc01
    5288:	f002 fe73 	bl	7f72 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    528c:	f8ba 1000 	ldrh.w	r1, [sl]
    5290:	2002      	movs	r0, #2
    5292:	b289      	uxth	r1, r1
    5294:	f002 fe6d 	bl	7f72 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5298:	2005      	movs	r0, #5
    529a:	210b      	movs	r1, #11
    529c:	f002 fe69 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    52a0:	2003      	movs	r0, #3
    52a2:	2140      	movs	r1, #64	; 0x40
    52a4:	f002 fe65 	bl	7f72 <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    52a8:	2114      	movs	r1, #20
    52aa:	2023      	movs	r0, #35	; 0x23
    52ac:	f002 fe61 	bl	7f72 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    52b0:	07e2      	lsls	r2, r4, #31
		cc2400_set(SYNCH,   0xaaaa);
    52b2:	bf4c      	ite	mi
    52b4:	f64a 21aa 	movwmi	r1, #43690	; 0xaaaa
	else
		cc2400_set(SYNCH,   0x5555);
    52b8:	f245 5155 	movwpl	r1, #21845	; 0x5555
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
		cc2400_set(SYNCH,   0xaaaa);
    52bc:	202d      	movs	r0, #45	; 0x2d
	else
		cc2400_set(SYNCH,   0x5555);
    52be:	f002 fe58 	bl	7f72 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    52c2:	2008      	movs	r0, #8
    52c4:	f002 fe4c 	bl	7f60 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    52c8:	f3c0 0108 	ubfx	r1, r0, #0, #9
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    52cc:	f108 0804 	add.w	r8, r8, #4
		cc2400_set(SYNCH,   0xaaaa);
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    52d0:	4604      	mov	r4, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    52d2:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    52d6:	2008      	movs	r0, #8
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    52d8:	fa5f f888 	uxtb.w	r8, r8
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    52dc:	f002 fe49 	bl	7f72 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    52e0:	f002 feea 	bl	80b8 <cc2400_status>
    52e4:	0643      	lsls	r3, r0, #25
    52e6:	d5fb      	bpl.n	52e0 <le_transmit+0x114>
	cc2400_strobe(SFSON);
    52e8:	2061      	movs	r0, #97	; 0x61
    52ea:	f002 feec 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    52ee:	f002 fee3 	bl	80b8 <cc2400_status>
    52f2:	0747      	lsls	r7, r0, #29
    52f4:	d5fb      	bpl.n	52ee <le_transmit+0x122>
	TXLED_SET;
    52f6:	4b1c      	ldr	r3, [pc, #112]	; (5368 <le_transmit+0x19c>)
    52f8:	f44f 7280 	mov.w	r2, #256	; 0x100
    52fc:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    52fe:	2280      	movs	r2, #128	; 0x80
    5300:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5302:	200e      	movs	r0, #14
    5304:	f002 fe2c 	bl	7f60 <cc2400_get>
    5308:	f000 001f 	and.w	r0, r0, #31
    530c:	280f      	cmp	r0, #15
    530e:	d1f8      	bne.n	5302 <le_transmit+0x136>
	cc2400_strobe(STX);
    5310:	2063      	movs	r0, #99	; 0x63
    5312:	f002 fed8 	bl	80c6 <cc2400_strobe>
		if (tx_len >16)
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
	}*/

	while (GIO6) ;
    5316:	4b15      	ldr	r3, [pc, #84]	; (536c <le_transmit+0x1a0>)
    5318:	681b      	ldr	r3, [r3, #0]
    531a:	075e      	lsls	r6, r3, #29
    531c:	d4fb      	bmi.n	5316 <le_transmit+0x14a>
	cc2400_fifo_write(len, txbuf);
    531e:	4640      	mov	r0, r8
    5320:	4669      	mov	r1, sp
    5322:	f002 fe39 	bl	7f98 <cc2400_fifo_write>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5326:	200e      	movs	r0, #14
    5328:	f002 fe1a 	bl	7f60 <cc2400_get>
    532c:	f000 001f 	and.w	r0, r0, #31
    5330:	280f      	cmp	r0, #15
    5332:	d1f8      	bne.n	5326 <le_transmit+0x15a>
	TXLED_CLR;
    5334:	4b0e      	ldr	r3, [pc, #56]	; (5370 <le_transmit+0x1a4>)
    5336:	f44f 7280 	mov.w	r2, #256	; 0x100
    533a:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    533c:	2064      	movs	r0, #100	; 0x64
    533e:	f002 fec2 	bl	80c6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5342:	f002 feb9 	bl	80b8 <cc2400_status>
    5346:	0745      	lsls	r5, r0, #29
    5348:	d4fb      	bmi.n	5342 <le_transmit+0x176>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    534a:	4b0a      	ldr	r3, [pc, #40]	; (5374 <le_transmit+0x1a8>)
    534c:	2280      	movs	r2, #128	; 0x80
    534e:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5350:	2008      	movs	r0, #8
    5352:	4621      	mov	r1, r4
    5354:	f002 fe0d 	bl	7f72 <cc2400_set>
}
    5358:	b010      	add	sp, #64	; 0x40
    535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    535e:	bf00      	nop
    5360:	10000448 	.word	0x10000448
    5364:	00008c74 	.word	0x00008c74
    5368:	2009c038 	.word	0x2009c038
    536c:	2009c054 	.word	0x2009c054
    5370:	2009c03c 	.word	0x2009c03c
    5374:	2009c05c 	.word	0x2009c05c

00005378 <le_jam>:

void le_jam(void) {
    5378:	b508      	push	{r3, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    537a:	200d      	movs	r0, #13
    537c:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5380:	f002 fdf7 	bl	7f72 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5384:	2012      	movs	r0, #18
    5386:	f642 3122 	movw	r1, #11042	; 0x2b22
    538a:	f002 fdf2 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    538e:	2014      	movs	r0, #20
    5390:	f242 314b 	movw	r1, #9035	; 0x234b
    5394:	f002 fded 	bl	7f72 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5398:	2020      	movs	r0, #32
    539a:	f640 4101 	movw	r1, #3073	; 0xc01
    539e:	f002 fde8 	bl	7f72 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    53a2:	2005      	movs	r0, #5
    53a4:	210b      	movs	r1, #11
    53a6:	f002 fde4 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    53aa:	2003      	movs	r0, #3
    53ac:	2140      	movs	r1, #64	; 0x40
    53ae:	f002 fde0 	bl	7f72 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    53b2:	f002 fe81 	bl	80b8 <cc2400_status>
    53b6:	0640      	lsls	r0, r0, #25
    53b8:	d5fb      	bpl.n	53b2 <le_jam+0x3a>
	cc2400_strobe(SFSON);
    53ba:	2061      	movs	r0, #97	; 0x61
    53bc:	f002 fe83 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    53c0:	f002 fe7a 	bl	80b8 <cc2400_status>
    53c4:	0741      	lsls	r1, r0, #29
    53c6:	d5fb      	bpl.n	53c0 <le_jam+0x48>
	TXLED_SET;
    53c8:	4b08      	ldr	r3, [pc, #32]	; (53ec <le_jam+0x74>)
    53ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    53ce:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    53d0:	2280      	movs	r2, #128	; 0x80
    53d2:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    53d4:	200e      	movs	r0, #14
    53d6:	f002 fdc3 	bl	7f60 <cc2400_get>
    53da:	f000 001f 	and.w	r0, r0, #31
    53de:	280f      	cmp	r0, #15
    53e0:	d1f8      	bne.n	53d4 <le_jam+0x5c>
	cc2400_strobe(STX);
    53e2:	2063      	movs	r0, #99	; 0x63
#endif
}
    53e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);
    53e8:	f002 be6d 	b.w	80c6 <cc2400_strobe>
    53ec:	2009c038 	.word	0x2009c038

000053f0 <hop>:
}

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    53f0:	b538      	push	{r3, r4, r5, lr}
	do_hop = 0;
    53f2:	4c5f      	ldr	r4, [pc, #380]	; (5570 <hop+0x180>)
    53f4:	2300      	movs	r3, #0
    53f6:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    53f8:	4b5e      	ldr	r3, [pc, #376]	; (5574 <hop+0x184>)
    53fa:	4a5f      	ldr	r2, [pc, #380]	; (5578 <hop+0x188>)
    53fc:	6819      	ldr	r1, [r3, #0]
    53fe:	6011      	str	r1, [r2, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    5400:	7aa2      	ldrb	r2, [r4, #10]
    5402:	b94a      	cbnz	r2, 5418 <hop+0x28>
		if (cc2400_get(FSDIV) == (channel - 1))
    5404:	2002      	movs	r0, #2
    5406:	f002 fdab 	bl	7f60 <cc2400_get>
    540a:	4b5c      	ldr	r3, [pc, #368]	; (557c <hop+0x18c>)
    540c:	881b      	ldrh	r3, [r3, #0]
    540e:	b29b      	uxth	r3, r3
    5410:	3b01      	subs	r3, #1
    5412:	4298      	cmp	r0, r3
    5414:	d17f      	bne.n	5516 <hop+0x126>
    5416:	bd38      	pop	{r3, r4, r5, pc}
			return;
	}
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
    5418:	7aa2      	ldrb	r2, [r4, #10]
    541a:	2a01      	cmp	r2, #1
    541c:	d131      	bne.n	5482 <hop+0x92>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    541e:	4b58      	ldr	r3, [pc, #352]	; (5580 <hop+0x190>)
    5420:	7819      	ldrb	r1, [r3, #0]
    5422:	4b58      	ldr	r3, [pc, #352]	; (5584 <hop+0x194>)
    5424:	7818      	ldrb	r0, [r3, #0]
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
		do {
			channel += 32;
    5426:	4b55      	ldr	r3, [pc, #340]	; (557c <hop+0x18c>)
    5428:	881a      	ldrh	r2, [r3, #0]
    542a:	b292      	uxth	r2, r2
    542c:	3220      	adds	r2, #32
    542e:	b292      	uxth	r2, r2
    5430:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    5432:	881a      	ldrh	r2, [r3, #0]
    5434:	b292      	uxth	r2, r2
    5436:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    543a:	d904      	bls.n	5446 <hop+0x56>
				channel -= 79;
    543c:	881a      	ldrh	r2, [r3, #0]
    543e:	b292      	uxth	r2, r2
    5440:	3a4f      	subs	r2, #79	; 0x4f
    5442:	b292      	uxth	r2, r2
    5444:	801a      	strh	r2, [r3, #0]
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    5446:	2900      	cmp	r1, #0
    5448:	d065      	beq.n	5516 <hop+0x126>
    544a:	2800      	cmp	r0, #0
    544c:	d063      	beq.n	5516 <hop+0x126>
    544e:	881a      	ldrh	r2, [r3, #0]
    5450:	881d      	ldrh	r5, [r3, #0]
    5452:	b292      	uxth	r2, r2
    5454:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    5458:	2208      	movs	r2, #8
    545a:	fb93 f3f2 	sdiv	r3, r3, r2
    545e:	4a4a      	ldr	r2, [pc, #296]	; (5588 <hop+0x198>)
    5460:	b2ad      	uxth	r5, r5
    5462:	5cd2      	ldrb	r2, [r2, r3]
    5464:	4b49      	ldr	r3, [pc, #292]	; (558c <hop+0x19c>)
    5466:	f6a5 1562 	subw	r5, r5, #2402	; 0x962
    546a:	402b      	ands	r3, r5
    546c:	2b00      	cmp	r3, #0
    546e:	da03      	bge.n	5478 <hop+0x88>
    5470:	3b01      	subs	r3, #1
    5472:	f063 0307 	orn	r3, r3, #7
    5476:	3301      	adds	r3, #1
    5478:	fa42 f303 	asr.w	r3, r2, r3
    547c:	07dd      	lsls	r5, r3, #31
    547e:	d5d2      	bpl.n	5426 <hop+0x36>
    5480:	e049      	b.n	5516 <hop+0x126>
	}

	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
    5482:	7aa2      	ldrb	r2, [r4, #10]
    5484:	2a05      	cmp	r2, #5
    5486:	d12d      	bne.n	54e4 <hop+0xf4>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5488:	4b3d      	ldr	r3, [pc, #244]	; (5580 <hop+0x190>)
    548a:	7819      	ldrb	r1, [r3, #0]
	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
		do {
			channel += 32;
    548c:	4b3b      	ldr	r3, [pc, #236]	; (557c <hop+0x18c>)
    548e:	881a      	ldrh	r2, [r3, #0]
    5490:	b292      	uxth	r2, r2
    5492:	3220      	adds	r2, #32
    5494:	b292      	uxth	r2, r2
    5496:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    5498:	881a      	ldrh	r2, [r3, #0]
    549a:	b292      	uxth	r2, r2
    549c:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    54a0:	d904      	bls.n	54ac <hop+0xbc>
				channel -= 79;
    54a2:	881a      	ldrh	r2, [r3, #0]
    54a4:	b292      	uxth	r2, r2
    54a6:	3a4f      	subs	r2, #79	; 0x4f
    54a8:	b292      	uxth	r2, r2
    54aa:	801a      	strh	r2, [r3, #0]
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    54ac:	294f      	cmp	r1, #79	; 0x4f
    54ae:	d032      	beq.n	5516 <hop+0x126>
    54b0:	881a      	ldrh	r2, [r3, #0]
    54b2:	8818      	ldrh	r0, [r3, #0]
    54b4:	b292      	uxth	r2, r2
    54b6:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    54ba:	2208      	movs	r2, #8
    54bc:	fb93 f3f2 	sdiv	r3, r3, r2
    54c0:	4a31      	ldr	r2, [pc, #196]	; (5588 <hop+0x198>)
    54c2:	b280      	uxth	r0, r0
    54c4:	5cd2      	ldrb	r2, [r2, r3]
    54c6:	4b31      	ldr	r3, [pc, #196]	; (558c <hop+0x19c>)
    54c8:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    54cc:	4003      	ands	r3, r0
    54ce:	2b00      	cmp	r3, #0
    54d0:	da03      	bge.n	54da <hop+0xea>
    54d2:	3b01      	subs	r3, #1
    54d4:	f063 0307 	orn	r3, r3, #7
    54d8:	3301      	adds	r3, #1
    54da:	fa42 f303 	asr.w	r3, r2, r3
    54de:	07da      	lsls	r2, r3, #31
    54e0:	d4d4      	bmi.n	548c <hop+0x9c>
    54e2:	e018      	b.n	5516 <hop+0x126>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    54e4:	7aa2      	ldrb	r2, [r4, #10]
    54e6:	2a02      	cmp	r2, #2
    54e8:	d105      	bne.n	54f6 <hop+0x106>
		channel = next_hop(clkn);
    54ea:	6818      	ldr	r0, [r3, #0]
    54ec:	f001 fb38 	bl	6b60 <next_hop>
    54f0:	4b22      	ldr	r3, [pc, #136]	; (557c <hop+0x18c>)
    54f2:	8018      	strh	r0, [r3, #0]
    54f4:	e00f      	b.n	5516 <hop+0x126>
	}

	else if (hop_mode == HOP_BTLE) {
    54f6:	7aa3      	ldrb	r3, [r4, #10]
    54f8:	2b03      	cmp	r3, #3
    54fa:	d105      	bne.n	5508 <hop+0x118>
		channel = btle_next_hop(&le);
    54fc:	4d1f      	ldr	r5, [pc, #124]	; (557c <hop+0x18c>)
    54fe:	1d28      	adds	r0, r5, #4
    5500:	f001 fbf7 	bl	6cf2 <btle_next_hop>
    5504:	8028      	strh	r0, [r5, #0]
    5506:	e006      	b.n	5516 <hop+0x126>
	}

	else if (hop_mode == HOP_DIRECT) {
    5508:	7aa3      	ldrb	r3, [r4, #10]
    550a:	2b04      	cmp	r3, #4
    550c:	d103      	bne.n	5516 <hop+0x126>
		channel = hop_direct_channel;
    550e:	89a2      	ldrh	r2, [r4, #12]
    5510:	4b1a      	ldr	r3, [pc, #104]	; (557c <hop+0x18c>)
    5512:	b292      	uxth	r2, r2
    5514:	801a      	strh	r2, [r3, #0]
	}
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    5516:	2064      	movs	r0, #100	; 0x64
    5518:	f002 fdd5 	bl	80c6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    551c:	f002 fdcc 	bl	80b8 <cc2400_status>
    5520:	0743      	lsls	r3, r0, #29
    5522:	d4fb      	bmi.n	551c <hop+0x12c>
    5524:	4d15      	ldr	r5, [pc, #84]	; (557c <hop+0x18c>)

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    5526:	7c60      	ldrb	r0, [r4, #17]
		cc2400_set(FSDIV, channel);
    5528:	8829      	ldrh	r1, [r5, #0]
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    552a:	b2c0      	uxtb	r0, r0
    552c:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel);
    552e:	b289      	uxth	r1, r1
	else
		cc2400_set(FSDIV, channel - 1);
    5530:	bf1e      	ittt	ne
    5532:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    5536:	2002      	movne	r0, #2
    5538:	b289      	uxthne	r1, r1
    553a:	f002 fd1a 	bl	7f72 <cc2400_set>

	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    553e:	7aa3      	ldrb	r3, [r4, #10]
    5540:	b11b      	cbz	r3, 554a <hop+0x15a>
		cs_threshold_calc_and_set(channel);
    5542:	8828      	ldrh	r0, [r5, #0]
    5544:	b280      	uxth	r0, r0
    5546:	f001 fd91 	bl	706c <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    554a:	2061      	movs	r0, #97	; 0x61
    554c:	f002 fdbb 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5550:	f002 fdb2 	bl	80b8 <cc2400_status>
    5554:	0745      	lsls	r5, r0, #29
    5556:	d5fb      	bpl.n	5550 <hop+0x160>

	dma_discard = 1;
    5558:	2301      	movs	r3, #1
    555a:	7423      	strb	r3, [r4, #16]

	if(mode == MODE_TX_SYMBOLS)
    555c:	7c63      	ldrb	r3, [r4, #17]
    555e:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    5560:	bf0c      	ite	eq
    5562:	2063      	moveq	r0, #99	; 0x63
	else
		cc2400_strobe(SRX);
    5564:	2062      	movne	r0, #98	; 0x62
}
    5566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	dma_discard = 1;

	if(mode == MODE_TX_SYMBOLS)
		cc2400_strobe(STX);
	else
		cc2400_strobe(SRX);
    556a:	f002 bdac 	b.w	80c6 <cc2400_strobe>
    556e:	bf00      	nop
    5570:	10000a1c 	.word	0x10000a1c
    5574:	10000bc4 	.word	0x10000bc4
    5578:	10000ba0 	.word	0x10000ba0
    557c:	10000448 	.word	0x10000448
    5580:	10000ba9 	.word	0x10000ba9
    5584:	10001047 	.word	0x10001047
    5588:	10000bab 	.word	0x10000bab
    558c:	80000007 	.word	0x80000007

00005590 <bt_stream_rx>:
}

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    5590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int8_t rssi;
	int8_t rssi_at_trigger;

	RXLED_CLR;
    5594:	4b49      	ldr	r3, [pc, #292]	; (56bc <bt_stream_rx+0x12c>)
    5596:	2210      	movs	r2, #16
    5598:	601a      	str	r2, [r3, #0]

	queue_init();
    559a:	f001 fc79 	bl	6e90 <queue_init>
	dio_ssp_init();
    559e:	f002 fc57 	bl	7e50 <dio_ssp_init>
	dma_init();
    55a2:	f001 fe53 	bl	724c <dma_init>
	dio_ssp_start();
    55a6:	f001 fed7 	bl	7358 <dio_ssp_start>

	cc2400_rx();
    55aa:	f7fe feff 	bl	43ac <cc2400_rx>

	cs_trigger_enable();
    55ae:	f001 fd8f 	bl	70d0 <cs_trigger_enable>

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    55b2:	4c43      	ldr	r4, [pc, #268]	; (56c0 <bt_stream_rx+0x130>)
    55b4:	7ca3      	ldrb	r3, [r4, #18]
    55b6:	46a1      	mov	r9, r4
    55b8:	2b01      	cmp	r3, #1
    55ba:	d175      	bne.n	56a8 <bt_stream_rx+0x118>
	{

		RXLED_CLR;
    55bc:	4b3f      	ldr	r3, [pc, #252]	; (56bc <bt_stream_rx+0x12c>)
    55be:	2210      	movs	r2, #16
    55c0:	601a      	str	r2, [r3, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    55c2:	f001 fcdb 	bl	6f7c <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    55c6:	2580      	movs	r5, #128	; 0x80
		while (!rx_tc) {
    55c8:	4f3e      	ldr	r7, [pc, #248]	; (56c4 <bt_stream_rx+0x134>)
    55ca:	4e3f      	ldr	r6, [pc, #252]	; (56c8 <bt_stream_rx+0x138>)
    55cc:	683b      	ldr	r3, [r7, #0]
    55ce:	f8df 8118 	ldr.w	r8, [pc, #280]	; 56e8 <bt_stream_rx+0x158>
    55d2:	bb2b      	cbnz	r3, 5620 <bt_stream_rx+0x90>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    55d4:	2006      	movs	r0, #6
    55d6:	f002 fcc3 	bl	7f60 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    55da:	7833      	ldrb	r3, [r6, #0]
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while (!rx_tc) {
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    55dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    55e0:	b163      	cbz	r3, 55fc <bt_stream_rx+0x6c>
    55e2:	b26b      	sxtb	r3, r5
    55e4:	3380      	adds	r3, #128	; 0x80
    55e6:	d109      	bne.n	55fc <bt_stream_rx+0x6c>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    55e8:	4b38      	ldr	r3, [pc, #224]	; (56cc <bt_stream_rx+0x13c>)
    55ea:	b240      	sxtb	r0, r0
    55ec:	f993 5000 	ldrsb.w	r5, [r3]
    55f0:	3536      	adds	r5, #54	; 0x36
    55f2:	42a8      	cmp	r0, r5
    55f4:	bfa8      	it	ge
    55f6:	4605      	movge	r5, r0
    55f8:	b2ed      	uxtb	r5, r5
				rssi_at_trigger = rssi;
    55fa:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    55fc:	b240      	sxtb	r0, r0
    55fe:	f001 fcd9 	bl	6fb4 <rssi_add>

			handle_usb(clkn);
    5602:	f8d8 0000 	ldr.w	r0, [r8]
    5606:	f001 fca5 	bl	6f54 <handle_usb>

			/* If timer says time to hop, do it. */
			if (do_hop) {
    560a:	f899 300b 	ldrb.w	r3, [r9, #11]
    560e:	b113      	cbz	r3, 5616 <bt_stream_rx+0x86>
				hop();
    5610:	f7ff feee 	bl	53f0 <hop>
    5614:	e7d8      	b.n	55c8 <bt_stream_rx+0x38>
			} else {
				TXLED_CLR;
    5616:	4b29      	ldr	r3, [pc, #164]	; (56bc <bt_stream_rx+0x12c>)
    5618:	f44f 7280 	mov.w	r2, #256	; 0x100
    561c:	601a      	str	r2, [r3, #0]
    561e:	e7d3      	b.n	55c8 <bt_stream_rx+0x38>
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    5620:	4b2b      	ldr	r3, [pc, #172]	; (56d0 <bt_stream_rx+0x140>)
    5622:	2210      	movs	r2, #16

		if (rx_err) {
    5624:	4d2b      	ldr	r5, [pc, #172]	; (56d4 <bt_stream_rx+0x144>)
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    5626:	601a      	str	r2, [r3, #0]

		if (rx_err) {
    5628:	682b      	ldr	r3, [r5, #0]
    562a:	b11b      	cbz	r3, 5634 <bt_stream_rx+0xa4>
			status |= DMA_ERROR;
    562c:	7863      	ldrb	r3, [r4, #1]
    562e:	f043 0302 	orr.w	r3, r3, #2
    5632:	7063      	strb	r3, [r4, #1]
		}

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5634:	683b      	ldr	r3, [r7, #0]
    5636:	2b01      	cmp	r3, #1
    5638:	d903      	bls.n	5642 <bt_stream_rx+0xb2>
			status |= DMA_OVERFLOW;
    563a:	7863      	ldrb	r3, [r4, #1]
    563c:	f043 0301 	orr.w	r3, r3, #1
    5640:	7063      	strb	r3, [r4, #1]

		if (dma_discard) {
    5642:	7c22      	ldrb	r2, [r4, #16]
    5644:	4b1e      	ldr	r3, [pc, #120]	; (56c0 <bt_stream_rx+0x130>)
    5646:	b12a      	cbz	r2, 5654 <bt_stream_rx+0xc4>
			status |= DISCARD;
    5648:	785a      	ldrb	r2, [r3, #1]
    564a:	f042 0220 	orr.w	r2, r2, #32
    564e:	705a      	strb	r2, [r3, #1]
			dma_discard = 0;
    5650:	2200      	movs	r2, #0
    5652:	741a      	strb	r2, [r3, #16]
		}

		rssi_iir_update(channel);
    5654:	4b20      	ldr	r3, [pc, #128]	; (56d8 <bt_stream_rx+0x148>)
    5656:	8818      	ldrh	r0, [r3, #0]
    5658:	b280      	uxth	r0, r0
    565a:	f001 fccb 	bl	6ff4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    565e:	7833      	ldrb	r3, [r6, #0]
    5660:	b913      	cbnz	r3, 5668 <bt_stream_rx+0xd8>
    5662:	4b1e      	ldr	r3, [pc, #120]	; (56dc <bt_stream_rx+0x14c>)
    5664:	781b      	ldrb	r3, [r3, #0]
    5666:	b12b      	cbz	r3, 5674 <bt_stream_rx+0xe4>
			status |= CS_TRIGGER;
    5668:	7863      	ldrb	r3, [r4, #1]
    566a:	f043 0308 	orr.w	r3, r3, #8
    566e:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5670:	2300      	movs	r3, #0
    5672:	7033      	strb	r3, [r6, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5674:	4b15      	ldr	r3, [pc, #84]	; (56cc <bt_stream_rx+0x13c>)
    5676:	f993 2000 	ldrsb.w	r2, [r3]
    567a:	4b19      	ldr	r3, [pc, #100]	; (56e0 <bt_stream_rx+0x150>)
    567c:	3235      	adds	r2, #53	; 0x35
    567e:	f993 3000 	ldrsb.w	r3, [r3]
    5682:	429a      	cmp	r2, r3
    5684:	da03      	bge.n	568e <bt_stream_rx+0xfe>
			status |= RSSI_TRIGGER;
    5686:	7863      	ldrb	r3, [r4, #1]
    5688:	f043 0310 	orr.w	r3, r3, #16
    568c:	7063      	strb	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    568e:	4b15      	ldr	r3, [pc, #84]	; (56e4 <bt_stream_rx+0x154>)
    5690:	2000      	movs	r0, #0
    5692:	6819      	ldr	r1, [r3, #0]
    5694:	f7fe ff34 	bl	4500 <enqueue>

		handle_usb(clkn);
    5698:	f8d8 0000 	ldr.w	r0, [r8]
    569c:	f001 fc5a 	bl	6f54 <handle_usb>
		rx_tc = 0;
    56a0:	2300      	movs	r3, #0
    56a2:	603b      	str	r3, [r7, #0]
		rx_err = 0;
    56a4:	602b      	str	r3, [r5, #0]
    56a6:	e784      	b.n	55b2 <bt_stream_rx+0x22>

	cc2400_rx();

	cs_trigger_enable();

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    56a8:	7ca3      	ldrb	r3, [r4, #18]
    56aa:	2b08      	cmp	r3, #8
    56ac:	d086      	beq.n	55bc <bt_stream_rx+0x2c>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    56ae:	f001 fe79 	bl	73a4 <dio_ssp_stop>
	cs_trigger_disable();
}
    56b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
	cs_trigger_disable();
    56b6:	f001 bd21 	b.w	70fc <cs_trigger_disable>
    56ba:	bf00      	nop
    56bc:	2009c03c 	.word	0x2009c03c
    56c0:	10000a1c 	.word	0x10000a1c
    56c4:	10000ba4 	.word	0x10000ba4
    56c8:	100010bd 	.word	0x100010bd
    56cc:	100010bc 	.word	0x100010bc
    56d0:	2009c038 	.word	0x2009c038
    56d4:	100010b8 	.word	0x100010b8
    56d8:	10000448 	.word	0x10000448
    56dc:	10000d10 	.word	0x10000d10
    56e0:	10000ba8 	.word	0x10000ba8
    56e4:	10000d20 	.word	0x10000d20
    56e8:	10000bc4 	.word	0x10000bc4

000056ec <br_transmit>:
 * Transmit a BTBR packet with the specified access code.
 *
 * All modulation parameters are set within this function.
 */
void br_transmit()
{
    56ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    56f0:	4b95      	ldr	r3, [pc, #596]	; (5948 <br_transmit+0x25c>)
    56f2:	2201      	movs	r2, #1
    56f4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    56f8:	2300      	movs	r3, #0
    56fa:	4022      	ands	r2, r4
    56fc:	402b      	ands	r3, r5
    56fe:	ea52 0103 	orrs.w	r1, r2, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5702:	f04f 0700 	mov.w	r7, #0
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5706:	f245 5355 	movw	r3, #21845	; 0x5555
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    570a:	ea4f 76d5 	mov.w	r6, r5, lsr #31
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    570e:	f64a 28aa 	movw	r8, #43690	; 0xaaaa
    5712:	bf18      	it	ne
    5714:	4698      	movne	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    5716:	b2e0      	uxtb	r0, r4
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5718:	2f00      	cmp	r7, #0
    571a:	bf08      	it	eq
    571c:	2e01      	cmpeq	r6, #1
    571e:	bf14      	ite	ne
    5720:	2655      	movne	r6, #85	; 0x55
    5722:	26aa      	moveq	r6, #170	; 0xaa

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    5724:	f7fe fe30 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5728:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
    572c:	f3c4 2007 	ubfx	r0, r4, #8, #8
    5730:	f7fe fe2a 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5734:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
    5738:	f3c4 4007 	ubfx	r0, r4, #16, #8
    573c:	f7fe fe24 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5740:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
    5744:	0e20      	lsrs	r0, r4, #24
    5746:	f7fe fe1f 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    574a:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
    574e:	b2e8      	uxtb	r0, r5
    5750:	f7fe fe1a 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5754:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
    5758:	f3c5 2007 	ubfx	r0, r5, #8, #8
    575c:	f7fe fe14 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5760:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
    5764:	f3c5 4007 	ubfx	r0, r5, #16, #8
    5768:	f7fe fe0e 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    576c:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
    5770:	0e28      	lsrs	r0, r5, #24
    5772:	f7fe fe09 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5776:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
    577a:	4630      	mov	r0, r6
    577c:	f7fe fe04 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5780:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
    5784:	2077      	movs	r0, #119	; 0x77
    5786:	f7fe fdff 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    578a:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
    578e:	2066      	movs	r0, #102	; 0x66
    5790:	f7fe fdfa 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5794:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
    5798:	2055      	movs	r0, #85	; 0x55
    579a:	f7fe fdf5 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    579e:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
    57a2:	2044      	movs	r0, #68	; 0x44
    57a4:	f7fe fdf0 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57a8:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
    57ac:	2033      	movs	r0, #51	; 0x33
    57ae:	f7fe fdeb 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57b2:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
    57b6:	2022      	movs	r0, #34	; 0x22
    57b8:	f7fe fde6 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57bc:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
		reverse8(0x11)
    57c0:	2011      	movs	r0, #17
    57c2:	f7fe fde1 	bl	4388 <reverse8>
	return reversed;
}

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;
    57c6:	463c      	mov	r4, r7
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57c8:	f88d 000f 	strb.w	r0, [sp, #15]

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    57cc:	463b      	mov	r3, r7
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    57ce:	fa48 f203 	asr.w	r2, r8, r3
    57d2:	f1c3 010f 	rsb	r1, r3, #15
    57d6:	f002 0201 	and.w	r2, r2, #1
    57da:	408a      	lsls	r2, r1

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    57dc:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    57de:	4314      	orrs	r4, r2

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    57e0:	2b10      	cmp	r3, #16
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    57e2:	b2a4      	uxth	r4, r4

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    57e4:	d1f3      	bne.n	57ce <br_transmit+0xe2>
/* start buffered tx */
static void cc2400_tx_sync(uint32_t sync)
{
#ifdef TX_ENABLE
	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    57e6:	200d      	movs	r0, #13
    57e8:	f647 71ff 	movw	r1, #32767	; 0x7fff
    57ec:	f002 fbc1 	bl	7f72 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    57f0:	2012      	movs	r0, #18
    57f2:	f642 3122 	movw	r1, #11042	; 0x2b22
    57f6:	f002 fbbc 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    57fa:	2014      	movs	r0, #20
    57fc:	f241 314b 	movw	r1, #4939	; 0x134b
    5800:	f002 fbb7 	bl	7f72 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5804:	2020      	movs	r0, #32
    5806:	f640 4101 	movw	r1, #3073	; 0xc01
    580a:	f002 fbb2 	bl	7f72 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
    580e:	4621      	mov	r1, r4
    5810:	202c      	movs	r0, #44	; 0x2c
    5812:	f002 fbae 	bl	7f72 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5816:	202d      	movs	r0, #45	; 0x2d
    5818:	2100      	movs	r1, #0
    581a:	f002 fbaa 	bl	7f72 <cc2400_set>

	cc2400_set(FSDIV,   channel);
    581e:	4b4b      	ldr	r3, [pc, #300]	; (594c <br_transmit+0x260>)
    5820:	2002      	movs	r0, #2
    5822:	8819      	ldrh	r1, [r3, #0]
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)

	if (modulation == MOD_BT_BASIC_RATE) {
    5824:	4c4a      	ldr	r4, [pc, #296]	; (5950 <br_transmit+0x264>)
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);

	cc2400_set(FSDIV,   channel);
    5826:	b289      	uxth	r1, r1
    5828:	f002 fba3 	bl	7f72 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    582c:	2005      	movs	r0, #5
    582e:	210b      	movs	r1, #11
    5830:	f002 fb9f 	bl	7f72 <cc2400_set>

	if (modulation == MOD_BT_BASIC_RATE) {
    5834:	7823      	ldrb	r3, [r4, #0]
    5836:	b913      	cbnz	r3, 583e <br_transmit+0x152>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    5838:	2003      	movs	r0, #3
    583a:	2129      	movs	r1, #41	; 0x29
    583c:	e004      	b.n	5848 <br_transmit+0x15c>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    583e:	7823      	ldrb	r3, [r4, #0]
    5840:	2b01      	cmp	r3, #1
    5842:	d11d      	bne.n	5880 <br_transmit+0x194>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5844:	2003      	movs	r0, #3
    5846:	2140      	movs	r1, #64	; 0x40
    5848:	f002 fb93 	bl	7f72 <cc2400_set>
	} else {
		/* oops */
		return;
	}

	clkn_start();
    584c:	f001 fca6 	bl	719c <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5850:	f002 fc32 	bl	80b8 <cc2400_status>
    5854:	0645      	lsls	r5, r0, #25
    5856:	d5fb      	bpl.n	5850 <br_transmit+0x164>
	cc2400_strobe(SFSON);
    5858:	2061      	movs	r0, #97	; 0x61
    585a:	f002 fc34 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    585e:	f002 fc2b 	bl	80b8 <cc2400_status>
    5862:	0740      	lsls	r0, r0, #29
    5864:	d5fb      	bpl.n	585e <br_transmit+0x172>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5866:	4b3b      	ldr	r3, [pc, #236]	; (5954 <br_transmit+0x268>)
    5868:	2280      	movs	r2, #128	; 0x80
    586a:	601a      	str	r2, [r3, #0]
#endif

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    586c:	200e      	movs	r0, #14
    586e:	f002 fb77 	bl	7f60 <cc2400_get>
    5872:	f000 001f 	and.w	r0, r0, #31
    5876:	280f      	cmp	r0, #15
    5878:	d1f8      	bne.n	586c <br_transmit+0x180>
	cc2400_strobe(STX);
    587a:	2063      	movs	r0, #99	; 0x63
    587c:	f002 fc23 	bl	80c6 <cc2400_strobe>
		reverse8(0x11)
	};

	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5880:	2114      	movs	r1, #20
    5882:	2023      	movs	r0, #35	; 0x23
    5884:	f002 fb75 	bl	7f72 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5888:	2008      	movs	r0, #8
    588a:	f002 fb69 	bl	7f60 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    588e:	f3c0 0108 	ubfx	r1, r0, #0, #9
	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5892:	4605      	mov	r5, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5894:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    5898:	2008      	movs	r0, #8
    589a:	f002 fb6a 	bl	7f72 <cc2400_set>
 */
void br_transmit()
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;
    589e:	2600      	movs	r6, #0

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
    58a0:	7ca3      	ldrb	r3, [r4, #18]
    58a2:	2b02      	cmp	r3, #2
    58a4:	d145      	bne.n	5932 <br_transmit+0x246>
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    58a6:	0876      	lsrs	r6, r6, #1
    58a8:	4f2b      	ldr	r7, [pc, #172]	; (5958 <br_transmit+0x26c>)
    58aa:	683b      	ldr	r3, [r7, #0]
    58ac:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
    58b0:	d105      	bne.n	58be <br_transmit+0x1d2>

			// If timer says time to hop, do it.
			if (do_hop) {
    58b2:	7ae3      	ldrb	r3, [r4, #11]
    58b4:	2b00      	cmp	r3, #0
    58b6:	d0f7      	beq.n	58a8 <br_transmit+0x1bc>
				hop();
    58b8:	f7ff fd9a 	bl	53f0 <hop>
    58bc:	e7f4      	b.n	58a8 <br_transmit+0x1bc>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    58be:	4b27      	ldr	r3, [pc, #156]	; (595c <br_transmit+0x270>)
    58c0:	681a      	ldr	r2, [r3, #0]
    58c2:	f640 03c9 	movw	r3, #2249	; 0x8c9
    58c6:	429a      	cmp	r2, r3
    58c8:	d9f3      	bls.n	58b2 <br_transmit+0x1c6>
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    58ca:	4b25      	ldr	r3, [pc, #148]	; (5960 <br_transmit+0x274>)
    58cc:	f44f 7280 	mov.w	r2, #256	; 0x100
			if (do_hop) {
				hop();
			}
		}

		clkn_saved = clkn;
    58d0:	683e      	ldr	r6, [r7, #0]

		TXLED_SET;

		cc2400_fifo_write(16, data);
    58d2:	2010      	movs	r0, #16
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    58d4:	601a      	str	r2, [r3, #0]

		cc2400_fifo_write(16, data);
    58d6:	4669      	mov	r1, sp
    58d8:	f002 fb5e 	bl	7f98 <cc2400_fifo_write>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    58dc:	200e      	movs	r0, #14
    58de:	f002 fb3f 	bl	7f60 <cc2400_get>
    58e2:	f000 001f 	and.w	r0, r0, #31
    58e6:	280f      	cmp	r0, #15
    58e8:	d1f8      	bne.n	58dc <br_transmit+0x1f0>
		TXLED_CLR;
    58ea:	4b1e      	ldr	r3, [pc, #120]	; (5964 <br_transmit+0x278>)
    58ec:	f44f 7280 	mov.w	r2, #256	; 0x100
    58f0:	601a      	str	r2, [r3, #0]

		cc2400_strobe(SRFOFF);
    58f2:	2064      	movs	r0, #100	; 0x64
    58f4:	f002 fbe7 	bl	80c6 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    58f8:	f002 fbde 	bl	80b8 <cc2400_status>
    58fc:	0741      	lsls	r1, r0, #29
    58fe:	d4fb      	bmi.n	58f8 <br_transmit+0x20c>

		while (!(cc2400_status() & XOSC16M_STABLE));
    5900:	f002 fbda 	bl	80b8 <cc2400_status>
    5904:	0642      	lsls	r2, r0, #25
    5906:	d5fb      	bpl.n	5900 <br_transmit+0x214>
		cc2400_strobe(SFSON);
    5908:	2061      	movs	r0, #97	; 0x61
    590a:	f002 fbdc 	bl	80c6 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    590e:	f002 fbd3 	bl	80b8 <cc2400_status>
    5912:	0743      	lsls	r3, r0, #29
    5914:	d5fb      	bpl.n	590e <br_transmit+0x222>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5916:	200e      	movs	r0, #14
    5918:	f002 fb22 	bl	7f60 <cc2400_get>
    591c:	f000 001f 	and.w	r0, r0, #31
    5920:	280f      	cmp	r0, #15
    5922:	d1f8      	bne.n	5916 <br_transmit+0x22a>
		cc2400_strobe(STX);
    5924:	2063      	movs	r0, #99	; 0x63
    5926:	f002 fbce 	bl	80c6 <cc2400_strobe>

		handle_usb(clkn);
    592a:	6838      	ldr	r0, [r7, #0]
    592c:	f001 fb12 	bl	6f54 <handle_usb>
    5930:	e7b6      	b.n	58a0 <br_transmit+0x1b4>
	}

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5932:	4b0d      	ldr	r3, [pc, #52]	; (5968 <br_transmit+0x27c>)
    5934:	2280      	movs	r2, #128	; 0x80
    5936:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5938:	2008      	movs	r0, #8
    593a:	4629      	mov	r1, r5
    593c:	f002 fb19 	bl	7f72 <cc2400_set>
}
    5940:	b004      	add	sp, #16
    5942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5946:	bf00      	nop
    5948:	100010c0 	.word	0x100010c0
    594c:	10000448 	.word	0x10000448
    5950:	10000a1c 	.word	0x10000a1c
    5954:	2009c058 	.word	0x2009c058
    5958:	10000bc4 	.word	0x10000bc4
    595c:	40004008 	.word	0x40004008
    5960:	2009c038 	.word	0x2009c038
    5964:	2009c03c 	.word	0x2009c03c
    5968:	2009c05c 	.word	0x2009c05c

0000596c <reset_le>:
	le.syncl = aa_rev & 0xffff;
	le.synch = aa_rev >> 16;
}

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    596c:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    596e:	480f      	ldr	r0, [pc, #60]	; (59ac <reset_le+0x40>)
    5970:	f7fe fe14 	bl	459c <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    5974:	4b0e      	ldr	r3, [pc, #56]	; (59b0 <reset_le+0x44>)
    5976:	4a0f      	ldr	r2, [pc, #60]	; (59b4 <reset_le+0x48>)
    5978:	60da      	str	r2, [r3, #12]
	le.crc_init_reversed = 0xAAAAAA;
    597a:	4a0f      	ldr	r2, [pc, #60]	; (59b8 <reset_le+0x4c>)
    597c:	611a      	str	r2, [r3, #16]
	le.crc_verify = 0;
    597e:	2200      	movs	r2, #0

	le.channel_idx = 0;
	le.channel_increment = 0;

	le.conn_epoch = 0;
	le.interval_timer = 0;
    5980:	841a      	strh	r2, [r3, #32]
/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
    5982:	615a      	str	r2, [r3, #20]

	le.conn_epoch = 0;
	le.interval_timer = 0;
	le.conn_interval = 0;
	le.conn_interval = 0;
	le.conn_count = 0;
    5984:	849a      	strh	r2, [r3, #36]	; 0x24
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
	le.last_packet = 0;
    5986:	645a      	str	r2, [r3, #68]	; 0x44

	le.link_state = LINK_INACTIVE;
    5988:	761a      	strb	r2, [r3, #24]

	le.channel_idx = 0;
    598a:	765a      	strb	r2, [r3, #25]
	le.channel_increment = 0;
    598c:	769a      	strb	r2, [r3, #26]

	le.conn_epoch = 0;
    598e:	61da      	str	r2, [r3, #28]
	le.interval_timer = 0;
	le.conn_interval = 0;
    5990:	845a      	strh	r2, [r3, #34]	; 0x22
	le.conn_interval = 0;
	le.conn_count = 0;

	le.win_size = 0;
    5992:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	le.win_offset = 0;
    5996:	851a      	strh	r2, [r3, #40]	; 0x28

	le.update_pending = 0;
    5998:	62da      	str	r2, [r3, #44]	; 0x2c
	le.update_instant = 0;
    599a:	861a      	strh	r2, [r3, #48]	; 0x30
	le.interval_update = 0;
    599c:	865a      	strh	r2, [r3, #50]	; 0x32
	le.win_size_update = 0;
    599e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	le.win_offset_update = 0;
    59a2:	86da      	strh	r2, [r3, #54]	; 0x36

	do_hop = 0;
    59a4:	4b05      	ldr	r3, [pc, #20]	; (59bc <reset_le+0x50>)
    59a6:	72da      	strb	r2, [r3, #11]
    59a8:	bd08      	pop	{r3, pc}
    59aa:	bf00      	nop
    59ac:	8e89bed6 	.word	0x8e89bed6
    59b0:	10000448 	.word	0x10000448
    59b4:	00555555 	.word	0x00555555
    59b8:	00aaaaaa 	.word	0x00aaaaaa
    59bc:	10000a1c 	.word	0x10000a1c

000059c0 <reset_le_promisc>:
}

// reset LE Promisc state
void reset_le_promisc(void) {
    59c0:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    59c2:	4c06      	ldr	r4, [pc, #24]	; (59dc <reset_le_promisc+0x1c>)
    59c4:	2100      	movs	r1, #0
    59c6:	4620      	mov	r0, r4
    59c8:	f44f 7284 	mov.w	r2, #264	; 0x108
    59cc:	f7fe fc30 	bl	4230 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    59d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    59d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    59d8:	bd10      	pop	{r4, pc}
    59da:	bf00      	nop
    59dc:	10000c08 	.word	0x10000c08

000059e0 <bt_generic_le>:
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    59e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    59e4:	4c69      	ldr	r4, [pc, #420]	; (5b8c <bt_generic_le+0x1ac>)
    59e6:	2301      	movs	r3, #1
	le_promisc.smallest_hop_interval = 0xffffffff;
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    59e8:	4680      	mov	r8, r0
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    59ea:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    59ec:	7460      	strb	r0, [r4, #17]

	reset_le();
    59ee:	f7ff ffbd 	bl	596c <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    59f2:	4b67      	ldr	r3, [pc, #412]	; (5b90 <bt_generic_le+0x1b0>)
    59f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    59f8:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    59fa:	4b66      	ldr	r3, [pc, #408]	; (5b94 <bt_generic_le+0x1b4>)
    59fc:	2210      	movs	r2, #16
    59fe:	601a      	str	r2, [r3, #0]

	queue_init();
    5a00:	f001 fa46 	bl	6e90 <queue_init>
	dio_ssp_init();
    5a04:	f002 fa24 	bl	7e50 <dio_ssp_init>
	dma_init();
    5a08:	f001 fc20 	bl	724c <dma_init>
	dio_ssp_start();
    5a0c:	f001 fca4 	bl	7358 <dio_ssp_start>
	cc2400_rx();
    5a10:	f7fe fccc 	bl	43ac <cc2400_rx>

	cs_trigger_enable();
    5a14:	f001 fb5c 	bl	70d0 <cs_trigger_enable>

	hold = 0;
    5a18:	2500      	movs	r5, #0

	while (requested_mode == active_mode) {
    5a1a:	7ca3      	ldrb	r3, [r4, #18]
    5a1c:	4543      	cmp	r3, r8
    5a1e:	f040 80a3 	bne.w	5b68 <bt_generic_le+0x188>
		if (requested_channel != 0) {
    5a22:	4b5a      	ldr	r3, [pc, #360]	; (5b8c <bt_generic_le+0x1ac>)
    5a24:	89db      	ldrh	r3, [r3, #14]
    5a26:	b29b      	uxth	r3, r3
    5a28:	b1d3      	cbz	r3, 5a60 <bt_generic_le+0x80>
			cc2400_strobe(SRFOFF);
    5a2a:	2064      	movs	r0, #100	; 0x64
    5a2c:	f002 fb4b 	bl	80c6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5a30:	f002 fb42 	bl	80b8 <cc2400_status>
    5a34:	0747      	lsls	r7, r0, #29
    5a36:	d4fb      	bmi.n	5a30 <bt_generic_le+0x50>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5a38:	4b57      	ldr	r3, [pc, #348]	; (5b98 <bt_generic_le+0x1b8>)
    5a3a:	2002      	movs	r0, #2
    5a3c:	8819      	ldrh	r1, [r3, #0]
    5a3e:	b289      	uxth	r1, r1
    5a40:	3901      	subs	r1, #1
    5a42:	b289      	uxth	r1, r1
    5a44:	f002 fa95 	bl	7f72 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5a48:	2061      	movs	r0, #97	; 0x61
    5a4a:	f002 fb3c 	bl	80c6 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5a4e:	f002 fb33 	bl	80b8 <cc2400_status>
    5a52:	0746      	lsls	r6, r0, #29
    5a54:	d5fb      	bpl.n	5a4e <bt_generic_le+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5a56:	2062      	movs	r0, #98	; 0x62
    5a58:	f002 fb35 	bl	80c6 <cc2400_strobe>

			requested_channel = 0;
    5a5c:	2300      	movs	r3, #0
    5a5e:	81e3      	strh	r3, [r4, #14]
		}

		if (do_hop) {
    5a60:	7ae3      	ldrb	r3, [r4, #11]
    5a62:	4e4c      	ldr	r6, [pc, #304]	; (5b94 <bt_generic_le+0x1b4>)
    5a64:	b113      	cbz	r3, 5a6c <bt_generic_le+0x8c>
			hop();
    5a66:	f7ff fcc3 	bl	53f0 <hop>
    5a6a:	e002      	b.n	5a72 <bt_generic_le+0x92>
		} else {
			TXLED_CLR;
    5a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5a70:	6033      	str	r3, [r6, #0]
		}

		RXLED_CLR;
    5a72:	2310      	movs	r3, #16
    5a74:	6033      	str	r3, [r6, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5a76:	f001 fa81 	bl	6f7c <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5a7a:	2780      	movs	r7, #128	; 0x80
		while ((rx_tc == 0) && (rx_err == 0))
    5a7c:	4b47      	ldr	r3, [pc, #284]	; (5b9c <bt_generic_le+0x1bc>)
    5a7e:	4e48      	ldr	r6, [pc, #288]	; (5ba0 <bt_generic_le+0x1c0>)
    5a80:	681a      	ldr	r2, [r3, #0]
    5a82:	4699      	mov	r9, r3
    5a84:	b9d2      	cbnz	r2, 5abc <bt_generic_le+0xdc>
    5a86:	6833      	ldr	r3, [r6, #0]
    5a88:	b9c3      	cbnz	r3, 5abc <bt_generic_le+0xdc>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5a8a:	2006      	movs	r0, #6
    5a8c:	f002 fa68 	bl	7f60 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5a90:	4b44      	ldr	r3, [pc, #272]	; (5ba4 <bt_generic_le+0x1c4>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5a92:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5a96:	781b      	ldrb	r3, [r3, #0]
    5a98:	b163      	cbz	r3, 5ab4 <bt_generic_le+0xd4>
    5a9a:	b27b      	sxtb	r3, r7
    5a9c:	3380      	adds	r3, #128	; 0x80
    5a9e:	d109      	bne.n	5ab4 <bt_generic_le+0xd4>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5aa0:	4b41      	ldr	r3, [pc, #260]	; (5ba8 <bt_generic_le+0x1c8>)
    5aa2:	b240      	sxtb	r0, r0
    5aa4:	f993 7000 	ldrsb.w	r7, [r3]
    5aa8:	3736      	adds	r7, #54	; 0x36
    5aaa:	42b8      	cmp	r0, r7
    5aac:	bfa8      	it	ge
    5aae:	4607      	movge	r7, r0
    5ab0:	b2ff      	uxtb	r7, r7
				rssi_at_trigger = rssi;
    5ab2:	4638      	mov	r0, r7
			}
			rssi_add(rssi);
    5ab4:	b240      	sxtb	r0, r0
    5ab6:	f001 fa7d 	bl	6fb4 <rssi_add>
    5aba:	e7df      	b.n	5a7c <bt_generic_le+0x9c>
		}

		if (rx_err) {
    5abc:	6833      	ldr	r3, [r6, #0]
    5abe:	b11b      	cbz	r3, 5ac8 <bt_generic_le+0xe8>
			status |= DMA_ERROR;
    5ac0:	7863      	ldrb	r3, [r4, #1]
    5ac2:	f043 0302 	orr.w	r3, r3, #2
    5ac6:	7063      	strb	r3, [r4, #1]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    5ac8:	f8d9 3000 	ldr.w	r3, [r9]
    5acc:	2b00      	cmp	r3, #0
    5ace:	d057      	beq.n	5b80 <bt_generic_le+0x1a0>
			goto rx_continue;

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5ad0:	4b32      	ldr	r3, [pc, #200]	; (5b9c <bt_generic_le+0x1bc>)
    5ad2:	681b      	ldr	r3, [r3, #0]
    5ad4:	2b01      	cmp	r3, #1
    5ad6:	d903      	bls.n	5ae0 <bt_generic_le+0x100>
			status |= DMA_OVERFLOW;
    5ad8:	7863      	ldrb	r3, [r4, #1]
    5ada:	f043 0301 	orr.w	r3, r3, #1
    5ade:	7063      	strb	r3, [r4, #1]

		rssi_iir_update(channel);
    5ae0:	4b2d      	ldr	r3, [pc, #180]	; (5b98 <bt_generic_le+0x1b8>)
    5ae2:	8818      	ldrh	r0, [r3, #0]
    5ae4:	b280      	uxth	r0, r0
    5ae6:	f001 fa85 	bl	6ff4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5aea:	4b2e      	ldr	r3, [pc, #184]	; (5ba4 <bt_generic_le+0x1c4>)
    5aec:	781a      	ldrb	r2, [r3, #0]
    5aee:	b912      	cbnz	r2, 5af6 <bt_generic_le+0x116>
    5af0:	4a2e      	ldr	r2, [pc, #184]	; (5bac <bt_generic_le+0x1cc>)
    5af2:	7812      	ldrb	r2, [r2, #0]
    5af4:	b132      	cbz	r2, 5b04 <bt_generic_le+0x124>
			status |= CS_TRIGGER;
    5af6:	7862      	ldrb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
    5af8:	2502      	movs	r5, #2
		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
			status |= CS_TRIGGER;
    5afa:	f042 0208 	orr.w	r2, r2, #8
    5afe:	7062      	strb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
    5b00:	2200      	movs	r2, #0
    5b02:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5b04:	4b28      	ldr	r3, [pc, #160]	; (5ba8 <bt_generic_le+0x1c8>)
    5b06:	f993 2000 	ldrsb.w	r2, [r3]
    5b0a:	4b29      	ldr	r3, [pc, #164]	; (5bb0 <bt_generic_le+0x1d0>)
    5b0c:	3235      	adds	r2, #53	; 0x35
    5b0e:	f993 3000 	ldrsb.w	r3, [r3]
    5b12:	429a      	cmp	r2, r3
    5b14:	da05      	bge.n	5b22 <bt_generic_le+0x142>
			status |= RSSI_TRIGGER;
    5b16:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5b18:	2502      	movs	r5, #2
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    5b1a:	f043 0310 	orr.w	r3, r3, #16
    5b1e:	7063      	strb	r3, [r4, #1]
    5b20:	e000      	b.n	5b24 <bt_generic_le+0x144>
			hold = CS_HOLD_TIME;
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    5b22:	b36d      	cbz	r5, 5b80 <bt_generic_le+0x1a0>
			goto rx_continue;
		}
		hold--;

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5b24:	4823      	ldr	r0, [pc, #140]	; (5bb4 <bt_generic_le+0x1d4>)

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5b26:	3d01      	subs	r5, #1

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5b28:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    5b2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
    5b30:	f002 fff6 	bl	8b20 <memcpy>

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5b34:	b2ed      	uxtb	r5, r5

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5b36:	2300      	movs	r3, #0
    5b38:	481f      	ldr	r0, [pc, #124]	; (5bb8 <bt_generic_le+0x1d8>)
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
			hold = CS_HOLD_TIME;
    5b3a:	2200      	movs	r2, #0
    5b3c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5b40:	491e      	ldr	r1, [pc, #120]	; (5bbc <bt_generic_le+0x1dc>)
    5b42:	680f      	ldr	r7, [r1, #0]
    5b44:	5cff      	ldrb	r7, [r7, r3]
				idle_rxbuf[i] <<= 1;
    5b46:	6809      	ldr	r1, [r1, #0]

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5b48:	09ff      	lsrs	r7, r7, #7
    5b4a:	5487      	strb	r7, [r0, r2]
				idle_rxbuf[i] <<= 1;
    5b4c:	5ccf      	ldrb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5b4e:	3201      	adds	r2, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5b50:	007f      	lsls	r7, r7, #1
    5b52:	b2ff      	uxtb	r7, r7
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5b54:	2a08      	cmp	r2, #8
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5b56:	54cf      	strb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5b58:	d1f2      	bne.n	5b40 <bt_generic_le+0x160>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5b5a:	3301      	adds	r3, #1
    5b5c:	2b32      	cmp	r3, #50	; 0x32
    5b5e:	d1eb      	bne.n	5b38 <bt_generic_le+0x158>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    5b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5b62:	4814      	ldr	r0, [pc, #80]	; (5bb4 <bt_generic_le+0x1d4>)
    5b64:	4798      	blx	r3
		if (!ret) break;
    5b66:	b958      	cbnz	r0, 5b80 <bt_generic_le+0x1a0>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5b68:	4b15      	ldr	r3, [pc, #84]	; (5bc0 <bt_generic_le+0x1e0>)
    5b6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b6e:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5b70:	f7fe fd20 	bl	45b4 <cc2400_idle>
	dio_ssp_stop();
    5b74:	f001 fc16 	bl	73a4 <dio_ssp_stop>
	cs_trigger_disable();
}
    5b78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ICER0 = ICER0_ICE_USB;

	// reset the radio completely
	cc2400_idle();
	dio_ssp_stop();
	cs_trigger_disable();
    5b7c:	f001 babe 	b.w	70fc <cs_trigger_disable>

		int ret = data_cb(unpacked);
		if (!ret) break;

	rx_continue:
		rx_tc = 0;
    5b80:	2300      	movs	r3, #0
    5b82:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    5b86:	6033      	str	r3, [r6, #0]
    5b88:	e747      	b.n	5a1a <bt_generic_le+0x3a>
    5b8a:	bf00      	nop
    5b8c:	10000a1c 	.word	0x10000a1c
    5b90:	e000e100 	.word	0xe000e100
    5b94:	2009c03c 	.word	0x2009c03c
    5b98:	10000448 	.word	0x10000448
    5b9c:	10000ba4 	.word	0x10000ba4
    5ba0:	100010b8 	.word	0x100010b8
    5ba4:	100010bd 	.word	0x100010bd
    5ba8:	100010bc 	.word	0x100010bc
    5bac:	10000d10 	.word	0x10000d10
    5bb0:	10000ba8 	.word	0x10000ba8
    5bb4:	10000d24 	.word	0x10000d24
    5bb8:	10000eb4 	.word	0x10000eb4
    5bbc:	10000d20 	.word	0x10000d20
    5bc0:	e000e180 	.word	0xe000e180

00005bc4 <bt_le_sync>:
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bc8:	b091      	sub	sp, #68	; 0x44
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5bca:	4daf      	ldr	r5, [pc, #700]	; (5e88 <bt_le_sync+0x2c4>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5bcc:	4caf      	ldr	r4, [pc, #700]	; (5e8c <bt_le_sync+0x2c8>)
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5bce:	2301      	movs	r3, #1
    5bd0:	702b      	strb	r3, [r5, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5bd2:	7623      	strb	r3, [r4, #24]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5bd4:	4bae      	ldr	r3, [pc, #696]	; (5e90 <bt_le_sync+0x2cc>)
    5bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    5bda:	7468      	strb	r0, [r5, #17]

	le.link_state = LINK_LISTENING;

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5bdc:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5bde:	4bad      	ldr	r3, [pc, #692]	; (5e94 <bt_le_sync+0x2d0>)
    5be0:	2210      	movs	r2, #16
    5be2:	601a      	str	r2, [r3, #0]
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5be4:	4606      	mov	r6, r0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;

	RXLED_CLR;

	queue_init();
    5be6:	f001 f953 	bl	6e90 <queue_init>
	dio_ssp_init();
    5bea:	f002 f931 	bl	7e50 <dio_ssp_init>
	dma_init_le();
    5bee:	f001 fb6b 	bl	72c8 <dma_init_le>
	dio_ssp_start();
    5bf2:	f001 fbb1 	bl	7358 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5bf6:	6860      	ldr	r0, [r4, #4]
    5bf8:	f002 f8c6 	bl	7d88 <rbit>
    5bfc:	f7fe fc28 	bl	4450 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    5c00:	7cab      	ldrb	r3, [r5, #18]
    5c02:	42b3      	cmp	r3, r6
    5c04:	f040 81b6 	bne.w	5f74 <bt_le_sync+0x3b0>
		if (requested_channel != 0) {
    5c08:	4b9f      	ldr	r3, [pc, #636]	; (5e88 <bt_le_sync+0x2c4>)
    5c0a:	89db      	ldrh	r3, [r3, #14]
    5c0c:	b29b      	uxth	r3, r3
    5c0e:	b1cb      	cbz	r3, 5c44 <bt_le_sync+0x80>
			cc2400_strobe(SRFOFF);
    5c10:	2064      	movs	r0, #100	; 0x64
    5c12:	f002 fa58 	bl	80c6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5c16:	f002 fa4f 	bl	80b8 <cc2400_status>
    5c1a:	0743      	lsls	r3, r0, #29
    5c1c:	d4fb      	bmi.n	5c16 <bt_le_sync+0x52>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5c1e:	8821      	ldrh	r1, [r4, #0]
    5c20:	2002      	movs	r0, #2
    5c22:	b289      	uxth	r1, r1
    5c24:	3901      	subs	r1, #1
    5c26:	b289      	uxth	r1, r1
    5c28:	f002 f9a3 	bl	7f72 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5c2c:	2061      	movs	r0, #97	; 0x61
    5c2e:	f002 fa4a 	bl	80c6 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5c32:	f002 fa41 	bl	80b8 <cc2400_status>
    5c36:	0747      	lsls	r7, r0, #29
    5c38:	d5fb      	bpl.n	5c32 <bt_le_sync+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5c3a:	2062      	movs	r0, #98	; 0x62
    5c3c:	f002 fa43 	bl	80c6 <cc2400_strobe>

			requested_channel = 0;
    5c40:	2300      	movs	r3, #0
    5c42:	81eb      	strh	r3, [r5, #14]
		}

		RXLED_CLR;
    5c44:	4b93      	ldr	r3, [pc, #588]	; (5e94 <bt_le_sync+0x2d0>)
    5c46:	2210      	movs	r2, #16
    5c48:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5c4a:	f001 f997 	bl	6f7c <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5c4e:	4b92      	ldr	r3, [pc, #584]	; (5e98 <bt_le_sync+0x2d4>)
    5c50:	681a      	ldr	r2, [r3, #0]
    5c52:	4699      	mov	r9, r3
    5c54:	b942      	cbnz	r2, 5c68 <bt_le_sync+0xa4>
    5c56:	4b91      	ldr	r3, [pc, #580]	; (5e9c <bt_le_sync+0x2d8>)
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	b92b      	cbnz	r3, 5c68 <bt_le_sync+0xa4>
    5c5c:	7aeb      	ldrb	r3, [r5, #11]
    5c5e:	b91b      	cbnz	r3, 5c68 <bt_le_sync+0xa4>
    5c60:	4b89      	ldr	r3, [pc, #548]	; (5e88 <bt_le_sync+0x2c4>)
    5c62:	7c9b      	ldrb	r3, [r3, #18]
    5c64:	42b3      	cmp	r3, r6
    5c66:	d0f2      	beq.n	5c4e <bt_le_sync+0x8a>
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5c68:	2006      	movs	r0, #6
    5c6a:	f002 f979 	bl	7f60 <cc2400_get>
		rssi_min = rssi_max = rssi;
    5c6e:	4b8c      	ldr	r3, [pc, #560]	; (5ea0 <bt_le_sync+0x2dc>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5c70:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;

		if (requested_mode != active_mode) {
    5c74:	7caa      	ldrb	r2, [r5, #18]
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5c76:	7018      	strb	r0, [r3, #0]
    5c78:	4b8a      	ldr	r3, [pc, #552]	; (5ea4 <bt_le_sync+0x2e0>)

		if (requested_mode != active_mode) {
    5c7a:	42b2      	cmp	r2, r6
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5c7c:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    5c7e:	4b82      	ldr	r3, [pc, #520]	; (5e88 <bt_le_sync+0x2c4>)
    5c80:	f040 8178 	bne.w	5f74 <bt_le_sync+0x3b0>
			goto cleanup;
		}

		if (rx_err) {
    5c84:	4f85      	ldr	r7, [pc, #532]	; (5e9c <bt_le_sync+0x2d8>)
    5c86:	683a      	ldr	r2, [r7, #0]
    5c88:	46bb      	mov	fp, r7
    5c8a:	b11a      	cbz	r2, 5c94 <bt_le_sync+0xd0>
			status |= DMA_ERROR;
    5c8c:	785a      	ldrb	r2, [r3, #1]
    5c8e:	f042 0202 	orr.w	r2, r2, #2
    5c92:	705a      	strb	r2, [r3, #1]
		}

		if (do_hop)
    5c94:	7aeb      	ldrb	r3, [r5, #11]
    5c96:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	f040 80b7 	bne.w	5e0e <bt_le_sync+0x24a>
			goto rx_flush;

		/* No DMA transfer? */
		if (!rx_tc)
    5ca0:	f8d9 3000 	ldr.w	r3, [r9]
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d0ab      	beq.n	5c00 <bt_le_sync+0x3c>
			continue;

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
    5ca8:	2234      	movs	r2, #52	; 0x34
    5caa:	a803      	add	r0, sp, #12
    5cac:	f7fe fac0 	bl	4230 <memset>
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5cb0:	8820      	ldrh	r0, [r4, #0]
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5cb2:	6863      	ldr	r3, [r4, #4]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5cb4:	b280      	uxth	r0, r0
    5cb6:	3862      	subs	r0, #98	; 0x62
    5cb8:	b2c0      	uxtb	r0, r0
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5cba:	9303      	str	r3, [sp, #12]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5cbc:	f000 ffee 	bl	6c9c <btle_channel_index>
    5cc0:	f04f 0830 	mov.w	r8, #48	; 0x30
    5cc4:	fb08 f800 	mul.w	r8, r8, r0
    5cc8:	f8df a208 	ldr.w	sl, [pc, #520]	; 5ed4 <bt_le_sync+0x310>
    5ccc:	eb0a 0308 	add.w	r3, sl, r8
    5cd0:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5cd2:	4b75      	ldr	r3, [pc, #468]	; (5ea8 <bt_le_sync+0x2e4>)
    5cd4:	f893 e000 	ldrb.w	lr, [r3]
					   | rxbuf1[i+1] << 16
    5cd8:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5cda:	7898      	ldrb	r0, [r3, #2]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5cdc:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5cde:	78d9      	ldrb	r1, [r3, #3]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5ce0:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
					   | rxbuf1[i+2] << 8
    5ce4:	430a      	orrs	r2, r1
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5ce6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    5cea:	9300      	str	r3, [sp, #0]
    5cec:	f002 f84c 	bl	7d88 <rbit>
    5cf0:	f85a 2008 	ldr.w	r2, [sl, r8]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5cf4:	9b00      	ldr	r3, [sp, #0]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5cf6:	4050      	eors	r0, r2
		}

		unsigned len = (p[5] & 0x3f) + 2;
    5cf8:	f3c0 2a05 	ubfx	sl, r0, #8, #6
    5cfc:	f10a 0802 	add.w	r8, sl, #2
		if (len > 39)
    5d00:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d04:	9004      	str	r0, [sp, #16]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5d06:	f200 8082 	bhi.w	5e0e <bt_le_sync+0x24a>
			goto rx_flush;

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5d0a:	f10a 0a08 	add.w	sl, sl, #8
    5d0e:	ea4f 029a 	mov.w	r2, sl, lsr #2
		if (total_transfers < 11) {
    5d12:	2a0b      	cmp	r2, #11
    5d14:	d00d      	beq.n	5d32 <bt_le_sync+0x16e>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5d16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5d1a:	4a64      	ldr	r2, [pc, #400]	; (5eac <bt_le_sync+0x2e8>)
    5d1c:	6812      	ldr	r2, [r2, #0]
    5d1e:	429a      	cmp	r2, r3
    5d20:	d20b      	bcs.n	5d3a <bt_le_sync+0x176>
    5d22:	f8db 1000 	ldr.w	r1, [fp]
    5d26:	2900      	cmp	r1, #0
    5d28:	d0f7      	beq.n	5d1a <bt_le_sync+0x156>
    5d2a:	e006      	b.n	5d3a <bt_le_sync+0x176>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5d2c:	f8db 3000 	ldr.w	r3, [fp]
    5d30:	b91b      	cbnz	r3, 5d3a <bt_le_sync+0x176>
    5d32:	4b5f      	ldr	r3, [pc, #380]	; (5eb0 <bt_le_sync+0x2ec>)
    5d34:	681b      	ldr	r3, [r3, #0]
    5d36:	07d8      	lsls	r0, r3, #31
    5d38:	d4f8      	bmi.n	5d2c <bt_le_sync+0x168>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5d3a:	4b5e      	ldr	r3, [pc, #376]	; (5eb4 <bt_le_sync+0x2f0>)

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5d3c:	2061      	movs	r0, #97	; 0x61
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5d3e:	681a      	ldr	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5d40:	f04f 0b04 	mov.w	fp, #4
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5d44:	f022 0201 	bic.w	r2, r2, #1
    5d48:	601a      	str	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5d4a:	f002 f9bc 	bl	80c6 <cc2400_strobe>

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5d4e:	4a56      	ldr	r2, [pc, #344]	; (5ea8 <bt_le_sync+0x2e4>)
    5d50:	f10b 0001 	add.w	r0, fp, #1
    5d54:	f812 100b 	ldrb.w	r1, [r2, fp]
    5d58:	f10b 0c03 	add.w	ip, fp, #3
					   | rxbuf1[i+1] << 16
    5d5c:	f812 e000 	ldrb.w	lr, [r2, r0]
    5d60:	f10b 0002 	add.w	r0, fp, #2
					   | rxbuf1[i+2] << 8
    5d64:	5c10      	ldrb	r0, [r2, r0]
					   | rxbuf1[i+3] << 0;
    5d66:	f812 c00c 	ldrb.w	ip, [r2, ip]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d6a:	ea4f 02ab 	mov.w	r2, fp, asr #2
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5d6e:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
					   | rxbuf1[i+2] << 8
    5d72:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d76:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    5d7a:	9200      	str	r2, [sp, #0]
    5d7c:	f002 f804 	bl	7d88 <rbit>
    5d80:	9a00      	ldr	r2, [sp, #0]
    5d82:	ab10      	add	r3, sp, #64	; 0x40
    5d84:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5d88:	9b01      	ldr	r3, [sp, #4]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5d8a:	f10b 0b04 	add.w	fp, fp, #4
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5d92:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d96:	ea82 0000 	eor.w	r0, r2, r0
    5d9a:	f841 0c30 	str.w	r0, [r1, #-48]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5d9e:	d1d6      	bne.n	5d4e <bt_le_sync+0x18a>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    5da0:	6963      	ldr	r3, [r4, #20]
    5da2:	b9eb      	cbnz	r3, 5de0 <bt_le_sync+0x21c>
			if (calc_crc != wire_crc) // skip packets with a bad CRC
				goto rx_flush;
		}


		RXLED_SET;
    5da4:	4b44      	ldr	r3, [pc, #272]	; (5eb8 <bt_le_sync+0x2f4>)
    5da6:	2210      	movs	r2, #16
    5da8:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5daa:	a803      	add	r0, sp, #12
    5dac:	69ab      	ldr	r3, [r5, #24]
    5dae:	4798      	blx	r3

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
    5db0:	4b42      	ldr	r3, [pc, #264]	; (5ebc <bt_le_sync+0x2f8>)
    5db2:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
    5db6:	f8c3 8000 	str.w	r8, [r3]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5dba:	a903      	add	r1, sp, #12
    5dbc:	2001      	movs	r0, #1
    5dbe:	f7fe fb9f 	bl	4500 <enqueue>
		ISER0 = ISER0_ISE_USB;
    5dc2:	4b33      	ldr	r3, [pc, #204]	; (5e90 <bt_le_sync+0x2cc>)

		le.last_packet = CLK100NS;
    5dc4:	4a3e      	ldr	r2, [pc, #248]	; (5ec0 <bt_le_sync+0x2fc>)
		packet_cb((uint8_t *)packet);

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
		enqueue(LE_PACKET, (uint8_t *)packet);
		ISER0 = ISER0_ISE_USB;
    5dc6:	f8c3 8000 	str.w	r8, [r3]

		le.last_packet = CLK100NS;
    5dca:	4b3e      	ldr	r3, [pc, #248]	; (5ec4 <bt_le_sync+0x300>)
    5dcc:	f640 4135 	movw	r1, #3125	; 0xc35
    5dd0:	681b      	ldr	r3, [r3, #0]
    5dd2:	6812      	ldr	r2, [r2, #0]
    5dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5dd8:	fb01 2303 	mla	r3, r1, r3, r2
    5ddc:	6463      	str	r3, [r4, #68]	; 0x44
    5dde:	e016      	b.n	5e0e <bt_le_sync+0x24a>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5de0:	4b2a      	ldr	r3, [pc, #168]	; (5e8c <bt_le_sync+0x2c8>)
    5de2:	a904      	add	r1, sp, #16
    5de4:	6918      	ldr	r0, [r3, #16]
    5de6:	4642      	mov	r2, r8
    5de8:	f000 ffd8 	bl	6d9c <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    5dec:	ab10      	add	r3, sp, #64	; 0x40
    5dee:	4453      	add	r3, sl
    5df0:	f813 2c34 	ldrb.w	r2, [r3, #-52]
						 | (p[4+len+1] << 8)
    5df4:	ab10      	add	r3, sp, #64	; 0x40
    5df6:	4443      	add	r3, r8
    5df8:	f813 1c2f 	ldrb.w	r1, [r3, #-47]
    5dfc:	0209      	lsls	r1, r1, #8
    5dfe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
						 | (p[4+len+0] << 0);
    5e02:	f813 2c30 	ldrb.w	r2, [r3, #-48]
    5e06:	ea41 0302 	orr.w	r3, r1, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5e0a:	4298      	cmp	r0, r3
    5e0c:	d0ca      	beq.n	5da4 <bt_le_sync+0x1e0>

		le.last_packet = CLK100NS;

	rx_flush:
		// this might happen twice, but it's safe to do so
		cc2400_strobe(SFSON);
    5e0e:	2061      	movs	r0, #97	; 0x61
    5e10:	f002 f959 	bl	80c6 <cc2400_strobe>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e14:	4b27      	ldr	r3, [pc, #156]	; (5eb4 <bt_le_sync+0x2f0>)
    5e16:	681a      	ldr	r2, [r3, #0]
    5e18:	f022 0201 	bic.w	r2, r2, #1
    5e1c:	601a      	str	r2, [r3, #0]
		while (SSP1SR & SSPSR_RNE) {
    5e1e:	4b2a      	ldr	r3, [pc, #168]	; (5ec8 <bt_le_sync+0x304>)
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	0759      	lsls	r1, r3, #29
    5e24:	d502      	bpl.n	5e2c <bt_le_sync+0x268>
			u8 tmp = (u8)DIO_SSP_DR;
    5e26:	4b29      	ldr	r3, [pc, #164]	; (5ecc <bt_le_sync+0x308>)
    5e28:	681b      	ldr	r3, [r3, #0]
    5e2a:	e7f8      	b.n	5e1e <bt_le_sync+0x25a>
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    5e2c:	4b25      	ldr	r3, [pc, #148]	; (5ec4 <bt_le_sync+0x300>)
    5e2e:	4a24      	ldr	r2, [pc, #144]	; (5ec0 <bt_le_sync+0x2fc>)
    5e30:	681b      	ldr	r3, [r3, #0]
    5e32:	6812      	ldr	r2, [r2, #0]
    5e34:	f640 4135 	movw	r1, #3125	; 0xc35
    5e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5e3c:	fb01 2303 	mla	r3, r1, r3, r2
		if (now < le.last_packet)
    5e40:	6c62      	ldr	r2, [r4, #68]	; 0x44
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5e42:	7e21      	ldrb	r1, [r4, #24]
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
    5e44:	4293      	cmp	r3, r2
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5e46:	f1a1 0102 	sub.w	r1, r1, #2
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5e4a:	bf38      	it	cc
    5e4c:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5e50:	b2c9      	uxtb	r1, r1
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5e52:	bf38      	it	cc
    5e54:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5e58:	2901      	cmp	r1, #1
    5e5a:	d803      	bhi.n	5e64 <bt_le_sync+0x2a0>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
			&& (now - le.last_packet > 50000000))
    5e5c:	491c      	ldr	r1, [pc, #112]	; (5ed0 <bt_le_sync+0x30c>)
    5e5e:	1a9b      	subs	r3, r3, r2
    5e60:	428b      	cmp	r3, r1
    5e62:	d802      	bhi.n	5e6a <bt_le_sync+0x2a6>
			// jam finished
			|| (le_jam_count == 1)
    5e64:	69eb      	ldr	r3, [r5, #28]
    5e66:	2b01      	cmp	r3, #1
    5e68:	d14f      	bne.n	5f0a <bt_le_sync+0x346>
			)
		{
			reset_le();
    5e6a:	f7ff fd7f 	bl	596c <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    5e6e:	4909      	ldr	r1, [pc, #36]	; (5e94 <bt_le_sync+0x2d0>)
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5e70:	2300      	movs	r3, #0
			TXLED_CLR;
    5e72:	f44f 7080 	mov.w	r0, #256	; 0x100
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5e76:	61eb      	str	r3, [r5, #28]
			TXLED_CLR;
    5e78:	6008      	str	r0, [r1, #0]

			if (jam_mode == JAM_ONCE) {
    5e7a:	7ce9      	ldrb	r1, [r5, #19]
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5e7c:	4a02      	ldr	r2, [pc, #8]	; (5e88 <bt_le_sync+0x2c4>)
			TXLED_CLR;

			if (jam_mode == JAM_ONCE) {
    5e7e:	2901      	cmp	r1, #1
    5e80:	d12a      	bne.n	5ed8 <bt_le_sync+0x314>
				jam_mode = JAM_NONE;
    5e82:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    5e84:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    5e86:	e075      	b.n	5f74 <bt_le_sync+0x3b0>
    5e88:	10000a1c 	.word	0x10000a1c
    5e8c:	10000448 	.word	0x10000448
    5e90:	e000e100 	.word	0xe000e100
    5e94:	2009c03c 	.word	0x2009c03c
    5e98:	10000ba4 	.word	0x10000ba4
    5e9c:	100010b8 	.word	0x100010b8
    5ea0:	10000ba8 	.word	0x10000ba8
    5ea4:	10000baa 	.word	0x10000baa
    5ea8:	10001085 	.word	0x10001085
    5eac:	50004104 	.word	0x50004104
    5eb0:	50004110 	.word	0x50004110
    5eb4:	40030024 	.word	0x40030024
    5eb8:	2009c038 	.word	0x2009c038
    5ebc:	e000e180 	.word	0xe000e180
    5ec0:	40004008 	.word	0x40004008
    5ec4:	10000bc4 	.word	0x10000bc4
    5ec8:	4003000c 	.word	0x4003000c
    5ecc:	40030008 	.word	0x40030008
    5ed0:	02faf080 	.word	0x02faf080
    5ed4:	00008d64 	.word	0x00008d64
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    5ed8:	2e0a      	cmp	r6, #10
    5eda:	d04b      	beq.n	5f74 <bt_le_sync+0x3b0>
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5edc:	2301      	movs	r3, #1

			cc2400_strobe(SRFOFF);
    5ede:	2064      	movs	r0, #100	; 0x64

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5ee0:	7623      	strb	r3, [r4, #24]

			cc2400_strobe(SRFOFF);
    5ee2:	f002 f8f0 	bl	80c6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5ee6:	f002 f8e7 	bl	80b8 <cc2400_status>
    5eea:	0742      	lsls	r2, r0, #29
    5eec:	d4fb      	bmi.n	5ee6 <bt_le_sync+0x322>

			/* Retune */
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5eee:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    5ef2:	b29b      	uxth	r3, r3
    5ef4:	b123      	cbz	r3, 5f00 <bt_le_sync+0x33c>
    5ef6:	4b26      	ldr	r3, [pc, #152]	; (5f90 <bt_le_sync+0x3cc>)
    5ef8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    5efc:	b29b      	uxth	r3, r3
    5efe:	e001      	b.n	5f04 <bt_le_sync+0x340>
    5f00:	f640 1362 	movw	r3, #2402	; 0x962
    5f04:	8023      	strh	r3, [r4, #0]
			restart_jamming = 1;
    5f06:	2301      	movs	r3, #1
    5f08:	62eb      	str	r3, [r5, #44]	; 0x2c
		}

		cc2400_set(SYNCL, le.syncl);
    5f0a:	202c      	movs	r0, #44	; 0x2c
    5f0c:	8961      	ldrh	r1, [r4, #10]
    5f0e:	f002 f830 	bl	7f72 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    5f12:	202d      	movs	r0, #45	; 0x2d
    5f14:	8921      	ldrh	r1, [r4, #8]
    5f16:	f002 f82c 	bl	7f72 <cc2400_set>

		if (do_hop)
    5f1a:	7aeb      	ldrb	r3, [r5, #11]
    5f1c:	b10b      	cbz	r3, 5f22 <bt_le_sync+0x35e>
			hop();
    5f1e:	f7ff fa67 	bl	53f0 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    5f22:	69eb      	ldr	r3, [r5, #28]
    5f24:	f8df 8070 	ldr.w	r8, [pc, #112]	; 5f98 <bt_le_sync+0x3d4>
    5f28:	2b00      	cmp	r3, #0
    5f2a:	dd07      	ble.n	5f3c <bt_le_sync+0x378>
			le_jam();
    5f2c:	f7ff fa24 	bl	5378 <le_jam>
			--le_jam_count;
    5f30:	f8d8 301c 	ldr.w	r3, [r8, #28]
    5f34:	3b01      	subs	r3, #1
    5f36:	f8c8 301c 	str.w	r3, [r8, #28]
    5f3a:	e016      	b.n	5f6a <bt_le_sync+0x3a6>
		} else {
			/* RX mode */
			dma_init_le();
    5f3c:	f001 f9c4 	bl	72c8 <dma_init_le>
			dio_ssp_start();
    5f40:	f001 fa0a 	bl	7358 <dio_ssp_start>

			if (restart_jamming) {
    5f44:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    5f48:	b143      	cbz	r3, 5f5c <bt_le_sync+0x398>
				cc2400_rx_sync(rbit(le.access_address));
    5f4a:	6860      	ldr	r0, [r4, #4]
    5f4c:	f001 ff1c 	bl	7d88 <rbit>
    5f50:	f7fe fa7e 	bl	4450 <cc2400_rx_sync>
				restart_jamming = 0;
    5f54:	2300      	movs	r3, #0
    5f56:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
    5f5a:	e006      	b.n	5f6a <bt_le_sync+0x3a6>
			} else {
				// wait till we're in FSLOCK before strobing RX
				while (!(cc2400_status() & FS_LOCK));
    5f5c:	f002 f8ac 	bl	80b8 <cc2400_status>
    5f60:	0743      	lsls	r3, r0, #29
    5f62:	d5fb      	bpl.n	5f5c <bt_le_sync+0x398>
				cc2400_strobe(SRX);
    5f64:	2062      	movs	r0, #98	; 0x62
    5f66:	f002 f8ae 	bl	80c6 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    5f6a:	2300      	movs	r3, #0
    5f6c:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    5f70:	603b      	str	r3, [r7, #0]
    5f72:	e645      	b.n	5c00 <bt_le_sync+0x3c>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5f74:	4b07      	ldr	r3, [pc, #28]	; (5f94 <bt_le_sync+0x3d0>)
    5f76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5f7a:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5f7c:	f7fe fb1a 	bl	45b4 <cc2400_idle>
	dio_ssp_stop();
    5f80:	f001 fa10 	bl	73a4 <dio_ssp_stop>
	cs_trigger_disable();
    5f84:	f001 f8ba 	bl	70fc <cs_trigger_disable>
}
    5f88:	b011      	add	sp, #68	; 0x44
    5f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f8e:	bf00      	nop
    5f90:	10000448 	.word	0x10000448
    5f94:	e000e180 	.word	0xe000e180
    5f98:	10000a1c 	.word	0x10000a1c

00005f9c <bt_follow_le>:
			do_hop = 1;
		}
	}
}

void bt_follow_le() {
    5f9c:	b510      	push	{r4, lr}
	reset_le();
    5f9e:	f7ff fce5 	bl	596c <reset_le>
	packet_cb = connection_follow_cb;
    5fa2:	4c04      	ldr	r4, [pc, #16]	; (5fb4 <bt_follow_le+0x18>)
    5fa4:	4b04      	ldr	r3, [pc, #16]	; (5fb8 <bt_follow_le+0x1c>)
	bt_le_sync(MODE_BT_FOLLOW_LE);
    5fa6:	2009      	movs	r0, #9
	}
}

void bt_follow_le() {
	reset_le();
	packet_cb = connection_follow_cb;
    5fa8:	61a3      	str	r3, [r4, #24]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    5faa:	f7ff fe0b 	bl	5bc4 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    5fae:	2300      	movs	r3, #0
    5fb0:	7463      	strb	r3, [r4, #17]
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	10000a1c 	.word	0x10000a1c
    5fb8:	00004765 	.word	0x00004765

00005fbc <le_promisc_state>:
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    5fbc:	b570      	push	{r4, r5, r6, lr}
    5fbe:	b08e      	sub	sp, #56	; 0x38
    5fc0:	4606      	mov	r6, r0
    5fc2:	460d      	mov	r5, r1
    5fc4:	4614      	mov	r4, r2
	u8 buf[50] = { 0, };
    5fc6:	a801      	add	r0, sp, #4
    5fc8:	2100      	movs	r1, #0
    5fca:	2232      	movs	r2, #50	; 0x32
    5fcc:	f7fe f930 	bl	4230 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    5fd0:	4629      	mov	r1, r5
    5fd2:	2c31      	cmp	r4, #49	; 0x31
    5fd4:	bf34      	ite	cc
    5fd6:	4622      	movcc	r2, r4
    5fd8:	2231      	movcs	r2, #49	; 0x31
    5fda:	f10d 0005 	add.w	r0, sp, #5
void le_promisc_state(u8 type, void *data, unsigned len) {
	u8 buf[50] = { 0, };
	if (len > 49)
		len = 49;

	buf[0] = type;
    5fde:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    5fe2:	f002 fd9d 	bl	8b20 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    5fe6:	a901      	add	r1, sp, #4
    5fe8:	2005      	movs	r0, #5
    5fea:	f7fe fa89 	bl	4500 <enqueue>
}
    5fee:	b00e      	add	sp, #56	; 0x38
    5ff0:	bd70      	pop	{r4, r5, r6, pc}
    5ff2:	0000      	movs	r0, r0

00005ff4 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    5ff4:	b538      	push	{r3, r4, r5, lr}
	static u32 first_ts = 0;
	if (channel == 2404) {
    5ff6:	4a31      	ldr	r2, [pc, #196]	; (60bc <promisc_recover_hop_increment+0xc8>)
    5ff8:	f640 1364 	movw	r3, #2404	; 0x964
    5ffc:	8811      	ldrh	r1, [r2, #0]
    5ffe:	4c30      	ldr	r4, [pc, #192]	; (60c0 <promisc_recover_hop_increment+0xcc>)
    6000:	b289      	uxth	r1, r1
    6002:	4299      	cmp	r1, r3
    6004:	d10d      	bne.n	6022 <promisc_recover_hop_increment+0x2e>
		first_ts = CLK100NS;
    6006:	4b2f      	ldr	r3, [pc, #188]	; (60c4 <promisc_recover_hop_increment+0xd0>)
    6008:	4a2f      	ldr	r2, [pc, #188]	; (60c8 <promisc_recover_hop_increment+0xd4>)
    600a:	681b      	ldr	r3, [r3, #0]
    600c:	6812      	ldr	r2, [r2, #0]
    600e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6012:	f640 4135 	movw	r1, #3125	; 0xc35
    6016:	fb01 2303 	mla	r3, r1, r3, r2
    601a:	6323      	str	r3, [r4, #48]	; 0x30
		hop_direct_channel = 2406;
    601c:	f640 1366 	movw	r3, #2406	; 0x966
    6020:	e048      	b.n	60b4 <promisc_recover_hop_increment+0xc0>
		do_hop = 1;
	} else if (channel == 2406) {
    6022:	8810      	ldrh	r0, [r2, #0]
    6024:	f640 1166 	movw	r1, #2406	; 0x966
    6028:	b280      	uxth	r0, r0
    602a:	4288      	cmp	r0, r1
    602c:	d142      	bne.n	60b4 <promisc_recover_hop_increment+0xc0>
		u32 second_ts = CLK100NS;
    602e:	4b25      	ldr	r3, [pc, #148]	; (60c4 <promisc_recover_hop_increment+0xd0>)
    6030:	4925      	ldr	r1, [pc, #148]	; (60c8 <promisc_recover_hop_increment+0xd4>)
    6032:	681b      	ldr	r3, [r3, #0]
    6034:	6809      	ldr	r1, [r1, #0]
    6036:	f640 4035 	movw	r0, #3125	; 0xc35
    603a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    603e:	fb00 1303 	mla	r3, r0, r3, r1
		if (second_ts < first_ts)
    6042:	6b20      	ldr	r0, [r4, #48]	; 0x30
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6044:	8c52      	ldrh	r2, [r2, #34]	; 0x22
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
    6046:	4283      	cmp	r3, r0
			second_ts += 3276800000; // handle rollover
    6048:	bf3c      	itt	cc
    604a:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    604e:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6052:	1a1b      	subs	r3, r3, r0
    6054:	f243 05d4 	movw	r5, #12500	; 0x30d4
    6058:	f641 006a 	movw	r0, #6250	; 0x186a
    605c:	fb00 3302 	mla	r3, r0, r2, r3
    6060:	4355      	muls	r5, r2
    6062:	fbb3 f3f5 	udiv	r3, r3, r5
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    6066:	2b24      	cmp	r3, #36	; 0x24
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6068:	4914      	ldr	r1, [pc, #80]	; (60bc <promisc_recover_hop_increment+0xc8>)
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    606a:	d821      	bhi.n	60b0 <promisc_recover_hop_increment+0xbc>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    606c:	4817      	ldr	r0, [pc, #92]	; (60cc <promisc_recover_hop_increment+0xd8>)
			le.interval_timer = le.conn_interval / 2;
    606e:	0852      	lsrs	r2, r2, #1
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6070:	4403      	add	r3, r0
    6072:	f893 0870 	ldrb.w	r0, [r3, #2160]	; 0x870
			le.interval_timer = le.conn_interval / 2;
    6076:	840a      	strh	r2, [r1, #32]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6078:	7688      	strb	r0, [r1, #26]
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    607a:	2225      	movs	r2, #37	; 0x25
    607c:	3001      	adds	r0, #1
    607e:	fb90 f5f2 	sdiv	r5, r0, r2
    6082:	fb02 0215 	mls	r2, r2, r5, r0
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    6086:	2300      	movs	r3, #0
    6088:	848b      	strh	r3, [r1, #36]	; 0x24
			le.conn_epoch = 0;
    608a:	61cb      	str	r3, [r1, #28]
			do_hop = 0;
    608c:	72e3      	strb	r3, [r4, #11]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
    608e:	2003      	movs	r0, #3
			le.crc_verify = 0;
    6090:	614b      	str	r3, [r1, #20]
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    6092:	4b0f      	ldr	r3, [pc, #60]	; (60d0 <promisc_recover_hop_increment+0xdc>)
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    6094:	764a      	strb	r2, [r1, #25]
			le.link_state = LINK_CONNECTED;
    6096:	7608      	strb	r0, [r1, #24]
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    6098:	2201      	movs	r2, #1
    609a:	311a      	adds	r1, #26
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    609c:	61a3      	str	r3, [r4, #24]
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
    609e:	72a0      	strb	r0, [r4, #10]
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    60a0:	f7ff ff8c 	bl	5fbc <le_promisc_state>

			if (jam_mode != JAM_NONE)
    60a4:	7ce3      	ldrb	r3, [r4, #19]
    60a6:	b143      	cbz	r3, 60ba <promisc_recover_hop_increment+0xc6>
				le_jam_count = JAM_COUNT_DEFAULT;
    60a8:	4b05      	ldr	r3, [pc, #20]	; (60c0 <promisc_recover_hop_increment+0xcc>)
    60aa:	2228      	movs	r2, #40	; 0x28
    60ac:	61da      	str	r2, [r3, #28]
    60ae:	bd38      	pop	{r3, r4, r5, pc}

			return;
		}
		hop_direct_channel = 2404;
    60b0:	f640 1364 	movw	r3, #2404	; 0x964
		do_hop = 1;
	}
	else {
		hop_direct_channel = 2404;
    60b4:	81a3      	strh	r3, [r4, #12]
		do_hop = 1;
    60b6:	2301      	movs	r3, #1
    60b8:	72e3      	strb	r3, [r4, #11]
    60ba:	bd38      	pop	{r3, r4, r5, pc}
    60bc:	10000448 	.word	0x10000448
    60c0:	10000a1c 	.word	0x10000a1c
    60c4:	10000bc4 	.word	0x10000bc4
    60c8:	40004008 	.word	0x40004008
    60cc:	00008c74 	.word	0x00008c74
    60d0:	00004765 	.word	0x00004765

000060d4 <promisc_recover_hop_interval>:
	}
}

void promisc_recover_hop_interval(u8 *packet) {
    60d4:	b538      	push	{r3, r4, r5, lr}
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    60d6:	4b25      	ldr	r3, [pc, #148]	; (616c <promisc_recover_hop_interval+0x98>)
    60d8:	f640 4235 	movw	r2, #3125	; 0xc35
    60dc:	681c      	ldr	r4, [r3, #0]
    60de:	4b24      	ldr	r3, [pc, #144]	; (6170 <promisc_recover_hop_interval+0x9c>)
    60e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
    60e4:	681b      	ldr	r3, [r3, #0]
	if (cur_clk < prev_clk)
    60e6:	4d23      	ldr	r5, [pc, #140]	; (6174 <promisc_recover_hop_interval+0xa0>)
}

void promisc_recover_hop_interval(u8 *packet) {
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    60e8:	fb02 3404 	mla	r4, r2, r4, r3
	if (cur_clk < prev_clk)
    60ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    60ee:	429c      	cmp	r4, r3
    60f0:	d205      	bcs.n	60fe <promisc_recover_hop_interval+0x2a>
		cur_clk += 3267800000; // handle rollover
    60f2:	f104 4443 	add.w	r4, r4, #3271557120	; 0xc3000000
    60f6:	f5a4 1465 	sub.w	r4, r4, #3751936	; 0x394000
    60fa:	f5a4 54a2 	sub.w	r4, r4, #5184	; 0x1440
	u32 clk_diff = cur_clk - prev_clk;
    60fe:	1ae3      	subs	r3, r4, r3
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    6100:	f246 12a7 	movw	r2, #24999	; 0x61a7
    6104:	4293      	cmp	r3, r2
    6106:	d930      	bls.n	616a <promisc_recover_hop_interval+0x96>
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    6108:	4a1b      	ldr	r2, [pc, #108]	; (6178 <promisc_recover_hop_interval+0xa4>)
    610a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    610e:	428b      	cmp	r3, r1
		le_promisc.smallest_hop_interval = clk_diff;
    6110:	bf38      	it	cc
    6112:	f8c2 3100 	strcc.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6116:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    611a:	4918      	ldr	r1, [pc, #96]	; (617c <promisc_recover_hop_interval+0xa8>)
    611c:	f502 3261 	add.w	r2, r2, #230400	; 0x38400
    6120:	f202 3252 	addw	r2, r2, #850	; 0x352
    6124:	fbb2 f2f1 	udiv	r2, r2, r1

	if (le.conn_interval == obsv_hop_interval) {
    6128:	4915      	ldr	r1, [pc, #84]	; (6180 <promisc_recover_hop_interval+0xac>)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    612a:	b292      	uxth	r2, r2

	if (le.conn_interval == obsv_hop_interval) {
    612c:	8c48      	ldrh	r0, [r1, #34]	; 0x22
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    612e:	4b12      	ldr	r3, [pc, #72]	; (6178 <promisc_recover_hop_interval+0xa4>)

	if (le.conn_interval == obsv_hop_interval) {
    6130:	4290      	cmp	r0, r2
    6132:	d115      	bne.n	6160 <promisc_recover_hop_interval+0x8c>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    6134:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    6138:	3201      	adds	r2, #1
		if (le_promisc.consec_intervals == 5) {
    613a:	2a05      	cmp	r2, #5

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    613c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    6140:	d112      	bne.n	6168 <promisc_recover_hop_interval+0x94>
			packet_cb = promisc_recover_hop_increment;
    6142:	4b10      	ldr	r3, [pc, #64]	; (6184 <promisc_recover_hop_interval+0xb0>)
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    6144:	2002      	movs	r0, #2

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
    6146:	61ab      	str	r3, [r5, #24]
			hop_direct_channel = 2404;
    6148:	f640 1364 	movw	r3, #2404	; 0x964
    614c:	81ab      	strh	r3, [r5, #12]
			hop_mode = HOP_DIRECT;
    614e:	2304      	movs	r3, #4
    6150:	72ab      	strb	r3, [r5, #10]
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    6152:	3122      	adds	r1, #34	; 0x22
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    6154:	2301      	movs	r3, #1
			le_promisc_state(2, &le.conn_interval, 2);
    6156:	4602      	mov	r2, r0
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    6158:	72eb      	strb	r3, [r5, #11]
			le_promisc_state(2, &le.conn_interval, 2);
    615a:	f7ff ff2f 	bl	5fbc <le_promisc_state>
    615e:	e003      	b.n	6168 <promisc_recover_hop_interval+0x94>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    6160:	844a      	strh	r2, [r1, #34]	; 0x22
		le_promisc.consec_intervals = 0;
    6162:	2200      	movs	r2, #0
    6164:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    6168:	636c      	str	r4, [r5, #52]	; 0x34
    616a:	bd38      	pop	{r3, r4, r5, pc}
    616c:	10000bc4 	.word	0x10000bc4
    6170:	40004008 	.word	0x40004008
    6174:	10000a1c 	.word	0x10000a1c
    6178:	10000c08 	.word	0x10000c08
    617c:	00070ea4 	.word	0x00070ea4
    6180:	10000448 	.word	0x10000448
    6184:	00005ff5 	.word	0x00005ff5

00006188 <promisc_follow_cb>:
}

void promisc_follow_cb(u8 *packet) {
    6188:	b538      	push	{r3, r4, r5, lr}
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    618a:	4c18      	ldr	r4, [pc, #96]	; (61ec <promisc_follow_cb+0x64>)
	}

	prev_clk = cur_clk;
}

void promisc_follow_cb(u8 *packet) {
    618c:	4601      	mov	r1, r0
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    618e:	6963      	ldr	r3, [r4, #20]
    6190:	bb53      	cbnz	r3, 61e8 <promisc_follow_cb+0x60>
    6192:	7903      	ldrb	r3, [r0, #4]
    6194:	2b01      	cmp	r3, #1
    6196:	d127      	bne.n	61e8 <promisc_follow_cb+0x60>
    6198:	7945      	ldrb	r5, [r0, #5]
    619a:	bb2d      	cbnz	r5, 61e8 <promisc_follow_cb+0x60>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    619c:	7a03      	ldrb	r3, [r0, #8]
    619e:	79c0      	ldrb	r0, [r0, #7]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    61a0:	2202      	movs	r2, #2
void promisc_follow_cb(u8 *packet) {
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    61a2:	0200      	lsls	r0, r0, #8
    61a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    61a8:	798b      	ldrb	r3, [r1, #6]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    61aa:	3104      	adds	r1, #4
    61ac:	4318      	orrs	r0, r3
    61ae:	f000 fdcb 	bl	6d48 <btle_reverse_crc>
    61b2:	462a      	mov	r2, r5
    61b4:	60e0      	str	r0, [r4, #12]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    61b6:	462b      	mov	r3, r5
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    61b8:	fa20 f103 	lsr.w	r1, r0, r3
    61bc:	f1c3 0517 	rsb	r5, r3, #23
    61c0:	f001 0101 	and.w	r1, r1, #1
    61c4:	40a9      	lsls	r1, r5
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    61c6:	3301      	adds	r3, #1
    61c8:	2b18      	cmp	r3, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    61ca:	ea42 0201 	orr.w	r2, r2, r1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    61ce:	d1f3      	bne.n	61b8 <promisc_follow_cb+0x30>
    61d0:	6122      	str	r2, [r4, #16]
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
    61d2:	4b07      	ldr	r3, [pc, #28]	; (61f0 <promisc_follow_cb+0x68>)
    61d4:	4a07      	ldr	r2, [pc, #28]	; (61f4 <promisc_follow_cb+0x6c>)
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    61d6:	2001      	movs	r0, #1
		packet_cb = promisc_recover_hop_interval;
    61d8:	619a      	str	r2, [r3, #24]
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    61da:	6160      	str	r0, [r4, #20]
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    61dc:	4906      	ldr	r1, [pc, #24]	; (61f8 <promisc_follow_cb+0x70>)
    61de:	2203      	movs	r2, #3
	}
}
    61e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    61e4:	f7ff beea 	b.w	5fbc <le_promisc_state>
    61e8:	bd38      	pop	{r3, r4, r5, pc}
    61ea:	bf00      	nop
    61ec:	10000448 	.word	0x10000448
    61f0:	10000a1c 	.word	0x10000a1c
    61f4:	000060d5 	.word	0x000060d5
    61f8:	10000454 	.word	0x10000454

000061fc <see_aa>:
	}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    61fc:	b530      	push	{r4, r5, lr}
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    61fe:	2200      	movs	r2, #0
		if (le_promisc.active_aa[i].aa == aa) {
    6200:	4d14      	ldr	r5, [pc, #80]	; (6254 <see_aa+0x58>)
    6202:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
    6206:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    620a:	4281      	cmp	r1, r0
    620c:	d102      	bne.n	6214 <see_aa+0x18>
			++le_promisc.active_aa[i].count;
    620e:	685a      	ldr	r2, [r3, #4]
    6210:	3201      	adds	r2, #1
    6212:	e01c      	b.n	624e <see_aa+0x52>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    6214:	3201      	adds	r2, #1
    6216:	2a20      	cmp	r2, #32
    6218:	d1f2      	bne.n	6200 <see_aa+0x4>
    621a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    621e:	4619      	mov	r1, r3
    6220:	2200      	movs	r2, #0
    6222:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    6226:	6864      	ldr	r4, [r4, #4]
    6228:	428c      	cmp	r4, r1
    622a:	db05      	blt.n	6238 <see_aa+0x3c>
    622c:	2900      	cmp	r1, #0
    622e:	bfa8      	it	ge
    6230:	460c      	movge	r4, r1
    6232:	bfb8      	it	lt
    6234:	4613      	movlt	r3, r2
    6236:	e000      	b.n	623a <see_aa+0x3e>
    6238:	4613      	mov	r3, r2
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    623a:	3201      	adds	r2, #1
    623c:	2a20      	cmp	r2, #32
    623e:	d001      	beq.n	6244 <see_aa+0x48>
    6240:	4621      	mov	r1, r4
    6242:	e7ee      	b.n	6222 <see_aa+0x26>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    6244:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    6248:	2201      	movs	r2, #1
    624a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    624e:	605a      	str	r2, [r3, #4]
    6250:	bd30      	pop	{r4, r5, pc}
    6252:	bf00      	nop
    6254:	10000c08 	.word	0x10000c08

00006258 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    625c:	b095      	sub	sp, #84	; 0x54
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    625e:	2100      	movs	r1, #0
	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6260:	4680      	mov	r8, r0
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    6262:	2240      	movs	r2, #64	; 0x40
    6264:	a804      	add	r0, sp, #16
    6266:	f7fd ffe3 	bl	4230 <memset>
    626a:	2301      	movs	r3, #1
    626c:	f88d 3010 	strb.w	r3, [sp, #16]
    6270:	f88d 3020 	strb.w	r3, [sp, #32]
    6274:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    6278:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    627c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6280:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    6284:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    6288:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    628c:	ad14      	add	r5, sp, #80	; 0x50
    628e:	ac04      	add	r4, sp, #16
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];
    6290:	4e50      	ldr	r6, [pc, #320]	; (63d4 <cb_le_promisc+0x17c>)
    6292:	4f51      	ldr	r7, [pc, #324]	; (63d8 <cb_le_promisc+0x180>)
    6294:	8830      	ldrh	r0, [r6, #0]
    6296:	b280      	uxth	r0, r0
    6298:	3862      	subs	r0, #98	; 0x62
    629a:	b2c0      	uxtb	r0, r0
    629c:	f000 fcfe 	bl	6c9c <btle_channel_index>
    62a0:	5c3a      	ldrb	r2, [r7, r0]

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    62a2:	2300      	movs	r3, #0
			desired[i][j] ^= whitening[idx];
    62a4:	18b9      	adds	r1, r7, r2
    62a6:	5ce0      	ldrb	r0, [r4, r3]
    62a8:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    62ac:	3201      	adds	r2, #1
	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
			desired[i][j] ^= whitening[idx];
    62ae:	4041      	eors	r1, r0
    62b0:	54e1      	strb	r1, [r4, r3]
			idx = (idx + 1) % sizeof(whitening);
    62b2:	217f      	movs	r1, #127	; 0x7f

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    62b4:	3301      	adds	r3, #1
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    62b6:	fbb2 f0f1 	udiv	r0, r2, r1

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    62ba:	2b10      	cmp	r3, #16
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    62bc:	fb01 2210 	mls	r2, r1, r0, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    62c0:	d1f0      	bne.n	62a4 <cb_le_promisc+0x4c>
    62c2:	3410      	adds	r4, #16
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    62c4:	42ac      	cmp	r4, r5
    62c6:	d1e3      	bne.n	6290 <cb_le_promisc+0x38>
    62c8:	f108 0520 	add.w	r5, r8, #32
    62cc:	f508 783c 	add.w	r8, r8, #752	; 0x2f0
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
    62d0:	4b42      	ldr	r3, [pc, #264]	; (63dc <cb_le_promisc+0x184>)
    62d2:	466c      	mov	r4, sp
    62d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    62d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    62da:	2200      	movs	r2, #0
    62dc:	ab04      	add	r3, sp, #16
    62de:	eb03 0182 	add.w	r1, r3, r2, lsl #2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    62e2:	2300      	movs	r3, #0
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
				if (unpacked[i+k] != desired[j][k]) {
    62e4:	f815 c003 	ldrb.w	ip, [r5, r3]
    62e8:	5cc8      	ldrb	r0, [r1, r3]
    62ea:	4584      	cmp	ip, r0
    62ec:	d002      	beq.n	62f4 <cb_le_promisc+0x9c>
					ok[j] = 0;
    62ee:	2300      	movs	r3, #0
    62f0:	50a3      	str	r3, [r4, r2]
					break;
    62f2:	e002      	b.n	62fa <cb_le_promisc+0xa2>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    62f4:	3301      	adds	r3, #1
    62f6:	2b10      	cmp	r3, #16
    62f8:	d1f4      	bne.n	62e4 <cb_le_promisc+0x8c>
    62fa:	3204      	adds	r2, #4
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    62fc:	2a10      	cmp	r2, #16
    62fe:	d1ed      	bne.n	62dc <cb_le_promisc+0x84>
    6300:	2300      	movs	r3, #0
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
			if (ok[j]) {
    6302:	58e2      	ldr	r2, [r4, r3]
    6304:	b91a      	cbnz	r2, 630e <cb_le_promisc+0xb6>
    6306:	3304      	adds	r3, #4
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    6308:	2b10      	cmp	r3, #16
    630a:	d1fa      	bne.n	6302 <cb_le_promisc+0xaa>
    630c:	e03e      	b.n	638c <cb_le_promisc+0x134>
		// skip if no match
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    630e:	8830      	ldrh	r0, [r6, #0]
    6310:	b280      	uxth	r0, r0
    6312:	3862      	subs	r0, #98	; 0x62
    6314:	b2c0      	uxtb	r0, r0
    6316:	f000 fcc1 	bl	6c9c <btle_channel_index>
    631a:	5c38      	ldrb	r0, [r7, r0]
		for (j = 0; j < 4+3+3; ++j) {
    631c:	2300      	movs	r3, #0
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    631e:	2100      	movs	r1, #0
    6320:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
    6324:	460a      	mov	r2, r1
    6326:	eb0c 0402 	add.w	r4, ip, r2
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
    632a:	2b03      	cmp	r3, #3
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
    632c:	f814 4c20 	ldrb.w	r4, [r4, #-32]
				if (j >= 4) { // unwhiten data bytes
    6330:	dd0c      	ble.n	634c <cb_le_promisc+0xf4>
					bit ^= whitening[idx];
    6332:	eb07 0e00 	add.w	lr, r7, r0
    6336:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    633a:	3001      	adds	r0, #1
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
    633c:	ea84 040e 	eor.w	r4, r4, lr
					idx = (idx + 1) % sizeof(whitening);
    6340:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    6344:	fbb0 f9fe 	udiv	r9, r0, lr
    6348:	fb0e 0019 	mls	r0, lr, r9, r0
				}
				byte |= bit << k;
    634c:	4094      	lsls	r4, r2

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    634e:	3201      	adds	r2, #1
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6350:	4321      	orrs	r1, r4

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6352:	2a08      	cmp	r2, #8
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6354:	b2c9      	uxtb	r1, r1

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6356:	d1e6      	bne.n	6326 <cb_le_promisc+0xce>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    6358:	4c21      	ldr	r4, [pc, #132]	; (63e0 <cb_le_promisc+0x188>)
    635a:	6822      	ldr	r2, [r4, #0]
    635c:	54d1      	strb	r1, [r2, r3]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    635e:	3301      	adds	r3, #1
    6360:	2b0a      	cmp	r3, #10
    6362:	d1dc      	bne.n	631e <cb_le_promisc+0xc6>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    6364:	6823      	ldr	r3, [r4, #0]
    6366:	78d9      	ldrb	r1, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    6368:	6823      	ldr	r3, [r4, #0]
    636a:	789b      	ldrb	r3, [r3, #2]
				 (idle_rxbuf[1] <<  8) |
    636c:	6822      	ldr	r2, [r4, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    636e:	041b      	lsls	r3, r3, #16
				 (idle_rxbuf[1] <<  8) |
    6370:	7850      	ldrb	r0, [r2, #1]
				 (idle_rxbuf[0]);
    6372:	6822      	ldr	r2, [r4, #0]
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    6374:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    6378:	7812      	ldrb	r2, [r2, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    637a:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    637c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    6380:	f7ff ff3c 	bl	61fc <see_aa>

		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    6384:	6821      	ldr	r1, [r4, #0]
    6386:	2001      	movs	r0, #1
    6388:	f7fe f8ba 	bl	4500 <enqueue>
    638c:	3501      	adds	r5, #1
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    638e:	4545      	cmp	r5, r8
    6390:	d19e      	bne.n	62d0 <cb_le_promisc+0x78>
    6392:	2300      	movs	r3, #0
    6394:	4a13      	ldr	r2, [pc, #76]	; (63e4 <cb_le_promisc+0x18c>)
    6396:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    639a:	6849      	ldr	r1, [r1, #4]
    639c:	2903      	cmp	r1, #3
    639e:	dd11      	ble.n	63c4 <cb_le_promisc+0x16c>
			le_set_access_address(le_promisc.active_aa[i].aa);
    63a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    63a4:	f7fe f8fa 	bl	459c <le_set_access_address>
			data_cb = cb_follow_le;
    63a8:	4b0f      	ldr	r3, [pc, #60]	; (63e8 <cb_le_promisc+0x190>)
    63aa:	4a10      	ldr	r2, [pc, #64]	; (63ec <cb_le_promisc+0x194>)
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    63ac:	2400      	movs	r4, #0

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    63ae:	629a      	str	r2, [r3, #40]	; 0x28
			packet_cb = promisc_follow_cb;
    63b0:	4a0f      	ldr	r2, [pc, #60]	; (63f0 <cb_le_promisc+0x198>)
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    63b2:	4620      	mov	r0, r4
	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
    63b4:	619a      	str	r2, [r3, #24]
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    63b6:	490f      	ldr	r1, [pc, #60]	; (63f4 <cb_le_promisc+0x19c>)
    63b8:	2204      	movs	r2, #4
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    63ba:	6174      	str	r4, [r6, #20]
			le_promisc_state(0, &le.access_address, 4);
    63bc:	f7ff fdfe 	bl	5fbc <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    63c0:	4620      	mov	r0, r4
    63c2:	e003      	b.n	63cc <cb_le_promisc+0x174>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    63c4:	3301      	adds	r3, #1
    63c6:	2b20      	cmp	r3, #32
    63c8:	d1e4      	bne.n	6394 <cb_le_promisc+0x13c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    63ca:	2001      	movs	r0, #1
}
    63cc:	b015      	add	sp, #84	; 0x54
    63ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    63d2:	bf00      	nop
    63d4:	10000448 	.word	0x10000448
    63d8:	00008c74 	.word	0x00008c74
    63dc:	0000950c 	.word	0x0000950c
    63e0:	10000d20 	.word	0x10000d20
    63e4:	10000c08 	.word	0x10000c08
    63e8:	10000a1c 	.word	0x10000a1c
    63ec:	00004661 	.word	0x00004661
    63f0:	00006189 	.word	0x00006189
    63f4:	1000044c 	.word	0x1000044c

000063f8 <bt_promisc_le>:

void bt_promisc_le() {
    63f8:	b538      	push	{r3, r4, r5, lr}
	while (requested_mode == MODE_BT_PROMISC_LE) {
    63fa:	4d16      	ldr	r5, [pc, #88]	; (6454 <bt_promisc_le+0x5c>)
    63fc:	7cab      	ldrb	r3, [r5, #18]
    63fe:	2b0a      	cmp	r3, #10
    6400:	d126      	bne.n	6450 <bt_promisc_le+0x58>
		reset_le_promisc();

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6402:	4c15      	ldr	r4, [pc, #84]	; (6458 <bt_promisc_le+0x60>)
	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
		reset_le_promisc();
    6404:	f7ff fadc 	bl	59c0 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6408:	8823      	ldrh	r3, [r4, #0]
    640a:	07da      	lsls	r2, r3, #31
			channel = 2440;
    640c:	bf44      	itt	mi
    640e:	f640 1388 	movwmi	r3, #2440	; 0x988
    6412:	8023      	strhmi	r3, [r4, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    6414:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6416:	b94b      	cbnz	r3, 642c <bt_promisc_le+0x34>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
    6418:	4b0f      	ldr	r3, [pc, #60]	; (6458 <bt_promisc_le+0x60>)
    641a:	8818      	ldrh	r0, [r3, #0]
    641c:	b280      	uxth	r0, r0
    641e:	f000 fe25 	bl	706c <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    6422:	4b0e      	ldr	r3, [pc, #56]	; (645c <bt_promisc_le+0x64>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    6424:	200a      	movs	r0, #10

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
			data_cb = cb_le_promisc;
    6426:	62ab      	str	r3, [r5, #40]	; 0x28
			bt_generic_le(MODE_BT_PROMISC_LE);
    6428:	f7ff fada 	bl	59e0 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    642c:	7cad      	ldrb	r5, [r5, #18]
    642e:	b2ed      	uxtb	r5, r5
    6430:	2d0a      	cmp	r5, #10
    6432:	d10d      	bne.n	6450 <bt_promisc_le+0x58>
			break;

		le_promisc_state(0, &le.access_address, 4);
    6434:	2000      	movs	r0, #0
    6436:	490a      	ldr	r1, [pc, #40]	; (6460 <bt_promisc_le+0x68>)
    6438:	2204      	movs	r2, #4
    643a:	f7ff fdbf 	bl	5fbc <le_promisc_state>
		packet_cb = promisc_follow_cb;
    643e:	4a09      	ldr	r2, [pc, #36]	; (6464 <bt_promisc_le+0x6c>)
    6440:	4b04      	ldr	r3, [pc, #16]	; (6454 <bt_promisc_le+0x5c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    6442:	4628      	mov	r0, r5
		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
			break;

		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
    6444:	619a      	str	r2, [r3, #24]
		le.crc_verify = 0;
    6446:	2300      	movs	r3, #0
    6448:	6163      	str	r3, [r4, #20]
		bt_le_sync(MODE_BT_PROMISC_LE);
    644a:	f7ff fbbb 	bl	5bc4 <bt_le_sync>
    644e:	e7d4      	b.n	63fa <bt_promisc_le+0x2>
    6450:	bd38      	pop	{r3, r4, r5, pc}
    6452:	bf00      	nop
    6454:	10000a1c 	.word	0x10000a1c
    6458:	10000448 	.word	0x10000448
    645c:	00006259 	.word	0x00006259
    6460:	1000044c 	.word	0x1000044c
    6464:	00006189 	.word	0x00006189

00006468 <bt_slave_le>:
	}
}

void bt_slave_le() {
    6468:	b570      	push	{r4, r5, r6, lr}
    646a:	b086      	sub	sp, #24
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    646c:	4b23      	ldr	r3, [pc, #140]	; (64fc <bt_slave_le+0x94>)
    646e:	ac01      	add	r4, sp, #4
    6470:	f103 0210 	add.w	r2, r3, #16
    6474:	4626      	mov	r6, r4
    6476:	6818      	ldr	r0, [r3, #0]
    6478:	6859      	ldr	r1, [r3, #4]
    647a:	4625      	mov	r5, r4
    647c:	c503      	stmia	r5!, {r0, r1}
    647e:	3308      	adds	r3, #8
    6480:	4293      	cmp	r3, r2
    6482:	462c      	mov	r4, r5
    6484:	d1f7      	bne.n	6476 <bt_slave_le+0xe>
    6486:	6818      	ldr	r0, [r3, #0]
    6488:	2305      	movs	r3, #5
    648a:	6028      	str	r0, [r5, #0]

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];
    648c:	491c      	ldr	r1, [pc, #112]	; (6500 <bt_slave_le+0x98>)
    648e:	1af2      	subs	r2, r6, r3
    6490:	5c59      	ldrb	r1, [r3, r1]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    6492:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
		adv_ind[i+2] = slave_mac_address[5-i];
    6496:	71d1      	strb	r1, [r2, #7]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    6498:	d2f8      	bcs.n	648c <bt_slave_le+0x24>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    649a:	4b1a      	ldr	r3, [pc, #104]	; (6504 <bt_slave_le+0x9c>)
    649c:	4631      	mov	r1, r6
    649e:	6918      	ldr	r0, [r3, #16]
    64a0:	2211      	movs	r2, #17
    64a2:	f000 fc35 	bl	6d10 <btle_calc_crc>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    64a6:	0a03      	lsrs	r3, r0, #8
	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    64a8:	f88d 0015 	strb.w	r0, [sp, #21]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    64ac:	0c00      	lsrs	r0, r0, #16
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    64ae:	f88d 3016 	strb.w	r3, [sp, #22]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    64b2:	f88d 0017 	strb.w	r0, [sp, #23]

	clkn_start();
    64b6:	f000 fe71 	bl	719c <clkn_start>

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    64ba:	4b13      	ldr	r3, [pc, #76]	; (6508 <bt_slave_le+0xa0>)
    64bc:	7c9b      	ldrb	r3, [r3, #18]
    64be:	2b0c      	cmp	r3, #12
    64c0:	d11a      	bne.n	64f8 <bt_slave_le+0x90>
		ICER0 = ICER0_ICE_USB;
    64c2:	4b12      	ldr	r3, [pc, #72]	; (650c <bt_slave_le+0xa4>)
    64c4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
		ICER0 = ICER0_ICE_DMA;
    64c8:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000

	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
    64cc:	601d      	str	r5, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    64ce:	4632      	mov	r2, r6
	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
    64d0:	601c      	str	r4, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    64d2:	480f      	ldr	r0, [pc, #60]	; (6510 <bt_slave_le+0xa8>)
    64d4:	2114      	movs	r1, #20
    64d6:	f7fe fe79 	bl	51cc <le_transmit>
		ISER0 = ISER0_ISE_USB;
    64da:	4b0e      	ldr	r3, [pc, #56]	; (6514 <bt_slave_le+0xac>)
    64dc:	601d      	str	r5, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    64de:	601c      	str	r4, [r3, #0]
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    64e0:	4b0d      	ldr	r3, [pc, #52]	; (6518 <bt_slave_le+0xb0>)
    64e2:	681a      	ldr	r2, [r3, #0]
    64e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    64e8:	f502 72a0 	add.w	r2, r2, #320	; 0x140
	// handle clkn overflow
	if (stop_at >= ((uint32_t)1<<28)) {
		stop_at -= ((uint32_t)1<<28);
		while ((clkn & 0xffffff) >= now || (clkn & 0xffffff) < stop_at);
	} else {
		while ((clkn & 0xffffff) < stop_at);
    64ec:	6819      	ldr	r1, [r3, #0]
    64ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    64f2:	4291      	cmp	r1, r2
    64f4:	d3fa      	bcc.n	64ec <bt_slave_le+0x84>
    64f6:	e7e0      	b.n	64ba <bt_slave_le+0x52>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    64f8:	b006      	add	sp, #24
    64fa:	bd70      	pop	{r4, r5, r6, pc}
    64fc:	0000951c 	.word	0x0000951c
    6500:	10000a3c 	.word	0x10000a3c
    6504:	10000448 	.word	0x10000448
    6508:	10000a1c 	.word	0x10000a1c
    650c:	e000e180 	.word	0xe000e180
    6510:	8e89bed6 	.word	0x8e89bed6
    6514:	e000e100 	.word	0xe000e100
    6518:	10000bc4 	.word	0x10000bc4

0000651c <rx_generic_sync>:

void rx_generic_sync(void) {
    651c:	b500      	push	{lr}
    651e:	b08b      	sub	sp, #44	; 0x2c
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6520:	202d      	movs	r0, #45	; 0x2d
    6522:	f001 fd1d 	bl	7f60 <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    6526:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    6528:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    652c:	202c      	movs	r0, #44	; 0x2c

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
	buf[0] = (reg_val >> 8) & 0xFF;
    652e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = reg_val & 0xFF;
	reg_val = cc2400_get(SYNCL);
    6532:	f001 fd15 	bl	7f60 <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    6536:	0a03      	lsrs	r3, r0, #8
    6538:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    653c:	f88d 0007 	strb.w	r0, [sp, #7]

	queue_init();
    6540:	f000 fca6 	bl	6e90 <queue_init>
	clkn_start();
    6544:	f000 fe2a 	bl	719c <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6548:	f001 fdb6 	bl	80b8 <cc2400_status>
    654c:	0643      	lsls	r3, r0, #25
    654e:	d5fb      	bpl.n	6548 <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6550:	2061      	movs	r0, #97	; 0x61
    6552:	f001 fdb8 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6556:	f001 fdaf 	bl	80b8 <cc2400_status>
    655a:	0740      	lsls	r0, r0, #29
    655c:	d5fb      	bpl.n	6556 <rx_generic_sync+0x3a>
	RXLED_SET;
    655e:	4b14      	ldr	r3, [pc, #80]	; (65b0 <rx_generic_sync+0x94>)
    6560:	2210      	movs	r2, #16
    6562:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6564:	2280      	movs	r2, #128	; 0x80
    6566:	621a      	str	r2, [r3, #32]
		HGM_SET;
    6568:	f44f 7280 	mov.w	r2, #256	; 0x100
    656c:	621a      	str	r2, [r3, #32]
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    656e:	200e      	movs	r0, #14
    6570:	f001 fcf6 	bl	7f60 <cc2400_get>
    6574:	f000 001f 	and.w	r0, r0, #31
    6578:	280f      	cmp	r0, #15
    657a:	d1f8      	bne.n	656e <rx_generic_sync+0x52>
		cc2400_strobe(SRX);
    657c:	2062      	movs	r0, #98	; 0x62
    657e:	f001 fda2 	bl	80c6 <cc2400_strobe>
		USRLED_CLR;
    6582:	4b0c      	ldr	r3, [pc, #48]	; (65b4 <rx_generic_sync+0x98>)
    6584:	2202      	movs	r2, #2
    6586:	601a      	str	r2, [r3, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    6588:	f001 fd96 	bl	80b8 <cc2400_status>
    658c:	06c1      	lsls	r1, r0, #27
    658e:	d5fb      	bpl.n	6588 <rx_generic_sync+0x6c>
		USRLED_SET;
    6590:	4b07      	ldr	r3, [pc, #28]	; (65b0 <rx_generic_sync+0x94>)
    6592:	2202      	movs	r2, #2
    6594:	601a      	str	r2, [r3, #0]

		cc2400_fifo_read(len, buf+4);
    6596:	a902      	add	r1, sp, #8
    6598:	2020      	movs	r0, #32
    659a:	f001 fd45 	bl	8028 <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    659e:	a901      	add	r1, sp, #4
    65a0:	2000      	movs	r0, #0
    65a2:	f7fd ffad 	bl	4500 <enqueue>
		handle_usb(clkn);
    65a6:	4b04      	ldr	r3, [pc, #16]	; (65b8 <rx_generic_sync+0x9c>)
    65a8:	6818      	ldr	r0, [r3, #0]
    65aa:	f000 fcd3 	bl	6f54 <handle_usb>
	}
    65ae:	e7de      	b.n	656e <rx_generic_sync+0x52>
    65b0:	2009c038 	.word	0x2009c038
    65b4:	2009c03c 	.word	0x2009c03c
    65b8:	10000bc4 	.word	0x10000bc4

000065bc <rx_generic>:
}

void rx_generic(void) {
    65bc:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    65be:	2020      	movs	r0, #32
    65c0:	f001 fcce 	bl	7f60 <cc2400_get>
    65c4:	b108      	cbz	r0, 65ca <rx_generic+0xe>
		rx_generic_sync();
    65c6:	f7ff ffa9 	bl	651c <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    65ca:	4b03      	ldr	r3, [pc, #12]	; (65d8 <rx_generic+0x1c>)
    65cc:	2203      	movs	r2, #3
    65ce:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    65d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
		rx_generic_sync();
	} else {
		modulation = MOD_NONE;
		bt_stream_rx();
    65d4:	f7fe bfdc 	b.w	5590 <bt_stream_rx>
    65d8:	10000a1c 	.word	0x10000a1c

000065dc <tx_generic>:
	}
}

void tx_generic(void) {
    65dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;
    65e0:	4d35      	ldr	r5, [pc, #212]	; (66b8 <tx_generic+0xdc>)

	mode = MODE_TX_GENERIC;
    65e2:	2310      	movs	r3, #16

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    65e4:	202d      	movs	r0, #45	; 0x2d
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    65e6:	7c6e      	ldrb	r6, [r5, #17]

	mode = MODE_TX_GENERIC;
    65e8:	746b      	strb	r3, [r5, #17]

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    65ea:	f001 fcb9 	bl	7f60 <cc2400_get>
    65ee:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    65f0:	202c      	movs	r0, #44	; 0x2c
    65f2:	f001 fcb5 	bl	7f60 <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    65f6:	4c31      	ldr	r4, [pc, #196]	; (66bc <tx_generic+0xe0>)

	mode = MODE_TX_GENERIC;

	// Save existing syncword
	synch = cc2400_get(SYNCH);
	syncl = cc2400_get(SYNCL);
    65f8:	4607      	mov	r7, r0

	cc2400_set(SYNCH, tx_pkt.synch);
    65fa:	8821      	ldrh	r1, [r4, #0]
    65fc:	202d      	movs	r0, #45	; 0x2d
    65fe:	f001 fcb8 	bl	7f72 <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    6602:	202c      	movs	r0, #44	; 0x2c
    6604:	8861      	ldrh	r1, [r4, #2]
    6606:	f001 fcb4 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    660a:	2003      	movs	r0, #3
    660c:	2157      	movs	r1, #87	; 0x57
    660e:	f001 fcb0 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    6612:	2014      	movs	r0, #20
    6614:	f241 314b 	movw	r1, #4939	; 0x134b
    6618:	f001 fcab 	bl	7f72 <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    661c:	2020      	movs	r0, #32
    661e:	f640 7161 	movw	r1, #3937	; 0xf61
    6622:	f001 fca6 	bl	7f72 <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    6626:	2002      	movs	r0, #2
    6628:	88a1      	ldrh	r1, [r4, #4]
    662a:	f001 fca2 	bl	7f72 <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    662e:	2005      	movs	r0, #5
    6630:	79e1      	ldrb	r1, [r4, #7]
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    6632:	b2f6      	uxtb	r6, r6
	cc2400_set(SYNCL, tx_pkt.syncl);
	cc2400_set(MDMCTRL, 0x0057);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(GRMDM, 0x0f61);
	cc2400_set(FSDIV, tx_pkt.channel);
	cc2400_set(FREND, tx_pkt.pa_level);
    6634:	f001 fc9d 	bl	7f72 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6638:	f001 fd3e 	bl	80b8 <cc2400_status>
    663c:	0640      	lsls	r0, r0, #25
    663e:	d5fb      	bpl.n	6638 <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6640:	2061      	movs	r0, #97	; 0x61
    6642:	f001 fd40 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6646:	f001 fd37 	bl	80b8 <cc2400_status>
    664a:	0741      	lsls	r1, r0, #29
    664c:	d5fb      	bpl.n	6646 <tx_generic+0x6a>
	TXLED_SET;
    664e:	4b1c      	ldr	r3, [pc, #112]	; (66c0 <tx_generic+0xe4>)
    6650:	f44f 7280 	mov.w	r2, #256	; 0x100
    6654:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6656:	2280      	movs	r2, #128	; 0x80
    6658:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    665a:	200e      	movs	r0, #14
    665c:	f001 fc80 	bl	7f60 <cc2400_get>
    6660:	f000 001f 	and.w	r0, r0, #31
    6664:	280f      	cmp	r0, #15
    6666:	d1f8      	bne.n	665a <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    6668:	79a0      	ldrb	r0, [r4, #6]
    666a:	4916      	ldr	r1, [pc, #88]	; (66c4 <tx_generic+0xe8>)
    666c:	f001 fc94 	bl	7f98 <cc2400_fifo_write>
	cc2400_strobe(STX);
    6670:	2063      	movs	r0, #99	; 0x63
    6672:	f001 fd28 	bl	80c6 <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6676:	200e      	movs	r0, #14
    6678:	f001 fc72 	bl	7f60 <cc2400_get>
    667c:	f000 001f 	and.w	r0, r0, #31
    6680:	280f      	cmp	r0, #15
    6682:	d1f8      	bne.n	6676 <tx_generic+0x9a>
	TXLED_CLR;
    6684:	4b10      	ldr	r3, [pc, #64]	; (66c8 <tx_generic+0xec>)
    6686:	f44f 7280 	mov.w	r2, #256	; 0x100
    668a:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    668c:	2064      	movs	r0, #100	; 0x64
    668e:	f001 fd1a 	bl	80c6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6692:	f001 fd11 	bl	80b8 <cc2400_status>
    6696:	0742      	lsls	r2, r0, #29
    6698:	d4fb      	bmi.n	6692 <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    669a:	4b0c      	ldr	r3, [pc, #48]	; (66cc <tx_generic+0xf0>)
    669c:	2280      	movs	r2, #128	; 0x80
    669e:	601a      	str	r2, [r3, #0]
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    66a0:	202d      	movs	r0, #45	; 0x2d
    66a2:	4641      	mov	r1, r8
    66a4:	f001 fc65 	bl	7f72 <cc2400_set>
	cc2400_set(SYNCL, syncl);
    66a8:	202c      	movs	r0, #44	; 0x2c
    66aa:	4639      	mov	r1, r7
    66ac:	f001 fc61 	bl	7f72 <cc2400_set>
	requested_mode = prev_mode;
    66b0:	74ae      	strb	r6, [r5, #18]
    66b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66b6:	bf00      	nop
    66b8:	10000a1c 	.word	0x10000a1c
    66bc:	10000bc8 	.word	0x10000bc8
    66c0:	2009c038 	.word	0x2009c038
    66c4:	10000bd0 	.word	0x10000bd0
    66c8:	2009c03c 	.word	0x2009c03c
    66cc:	2009c05c 	.word	0x2009c05c

000066d0 <specan>:
}

/* spectrum analysis */
void specan()
{
    66d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66d4:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    66d6:	4b3d      	ldr	r3, [pc, #244]	; (67cc <specan+0xfc>)
    66d8:	2210      	movs	r2, #16
    66da:	601a      	str	r2, [r3, #0]

	queue_init();
    66dc:	f000 fbd8 	bl	6e90 <queue_init>
	clkn_start();
    66e0:	f000 fd5c 	bl	719c <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    66e4:	4b3a      	ldr	r3, [pc, #232]	; (67d0 <specan+0x100>)
    66e6:	2280      	movs	r2, #128	; 0x80
    66e8:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    66ea:	2012      	movs	r0, #18
    66ec:	f642 3122 	movw	r1, #11042	; 0x2b22
    66f0:	f001 fc3f 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    66f4:	2014      	movs	r0, #20
    66f6:	f241 314b 	movw	r1, #4939	; 0x134b
    66fa:	f001 fc3a 	bl	7f72 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    66fe:	2020      	movs	r0, #32
    6700:	f240 1101 	movw	r1, #257	; 0x101
    6704:	f001 fc35 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6708:	2003      	movs	r0, #3
    670a:	2129      	movs	r1, #41	; 0x29
    670c:	f001 fc31 	bl	7f72 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    6710:	f001 fcd2 	bl	80b8 <cc2400_status>
    6714:	0643      	lsls	r3, r0, #25
    6716:	d5fb      	bpl.n	6710 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    6718:	f001 fcce 	bl	80b8 <cc2400_status>
    671c:	f000 0004 	and.w	r0, r0, #4
    6720:	f000 05ff 	and.w	r5, r0, #255	; 0xff
    6724:	2800      	cmp	r0, #0
    6726:	d1f7      	bne.n	6718 <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    6728:	4b2a      	ldr	r3, [pc, #168]	; (67d4 <specan+0x104>)
    672a:	7c9b      	ldrb	r3, [r3, #18]
    672c:	2b04      	cmp	r3, #4
    672e:	d147      	bne.n	67c0 <specan+0xf0>
		for (f = low_freq; f < high_freq + 1; f++) {
    6730:	4b29      	ldr	r3, [pc, #164]	; (67d8 <specan+0x108>)
    6732:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
    6736:	4698      	mov	r8, r3
    6738:	b2a4      	uxth	r4, r4
    673a:	f8b8 304e 	ldrh.w	r3, [r8, #78]	; 0x4e
    673e:	b29b      	uxth	r3, r3
    6740:	42a3      	cmp	r3, r4
    6742:	dbf1      	blt.n	6728 <specan+0x58>
    6744:	1e61      	subs	r1, r4, #1
			cc2400_set(FSDIV, f - 1);
    6746:	2002      	movs	r0, #2
    6748:	b289      	uxth	r1, r1
    674a:	f001 fc12 	bl	7f72 <cc2400_set>
			cc2400_strobe(SFSON);
    674e:	2061      	movs	r0, #97	; 0x61
    6750:	f001 fcb9 	bl	80c6 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6754:	f001 fcb0 	bl	80b8 <cc2400_status>
    6758:	0747      	lsls	r7, r0, #29
    675a:	d5fb      	bpl.n	6754 <specan+0x84>
			cc2400_strobe(SRX);
    675c:	2062      	movs	r0, #98	; 0x62
    675e:	f001 fcb2 	bl	80c6 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    6762:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6766:	9300      	str	r3, [sp, #0]
    6768:	9e00      	ldr	r6, [sp, #0]
    676a:	3e01      	subs	r6, #1
    676c:	9600      	str	r6, [sp, #0]
    676e:	2e00      	cmp	r6, #0
    6770:	d1fa      	bne.n	6768 <specan+0x98>
			buf[3 * i] = (f >> 8) & 0xFF;
    6772:	ab0e      	add	r3, sp, #56	; 0x38
    6774:	2703      	movs	r7, #3
    6776:	fb07 3705 	mla	r7, r7, r5, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    677a:	2006      	movs	r0, #6
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
    677c:	0a23      	lsrs	r3, r4, #8
    677e:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    6782:	f807 4c33 	strb.w	r4, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6786:	f001 fbeb 	bl	7f60 <cc2400_get>
			i++;
    678a:	3501      	adds	r5, #1
    678c:	b2ed      	uxtb	r5, r5

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    678e:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
    6790:	2d10      	cmp	r5, #16

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6792:	f807 0c32 	strb.w	r0, [r7, #-50]
			i++;
			if (i == 16) {
    6796:	d109      	bne.n	67ac <specan+0xdc>
				enqueue(SPECAN, buf);
    6798:	2004      	movs	r0, #4
    679a:	eb0d 0100 	add.w	r1, sp, r0
    679e:	f7fd feaf 	bl	4500 <enqueue>
				i = 0;

				handle_usb(clkn);
    67a2:	4b0e      	ldr	r3, [pc, #56]	; (67dc <specan+0x10c>)
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				enqueue(SPECAN, buf);
				i = 0;
    67a4:	4635      	mov	r5, r6

				handle_usb(clkn);
    67a6:	6818      	ldr	r0, [r3, #0]
    67a8:	f000 fbd4 	bl	6f54 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    67ac:	2064      	movs	r0, #100	; 0x64
    67ae:	f001 fc8a 	bl	80c6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    67b2:	f001 fc81 	bl	80b8 <cc2400_status>
    67b6:	0746      	lsls	r6, r0, #29
    67b8:	d4fb      	bmi.n	67b2 <specan+0xe2>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    67ba:	3401      	adds	r4, #1
    67bc:	b2a4      	uxth	r4, r4
    67be:	e7bc      	b.n	673a <specan+0x6a>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    67c0:	4b07      	ldr	r3, [pc, #28]	; (67e0 <specan+0x110>)
    67c2:	2210      	movs	r2, #16
    67c4:	601a      	str	r2, [r3, #0]
}
    67c6:	b00e      	add	sp, #56	; 0x38
    67c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67cc:	2009c038 	.word	0x2009c038
    67d0:	2009c058 	.word	0x2009c058
    67d4:	10000a1c 	.word	0x10000a1c
    67d8:	10000448 	.word	0x10000448
    67dc:	10000bc4 	.word	0x10000bc4
    67e0:	2009c03c 	.word	0x2009c03c

000067e4 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    67e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    67e6:	4b44      	ldr	r3, [pc, #272]	; (68f8 <led_specan+0x114>)
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    67e8:	2280      	movs	r2, #128	; 0x80
/* LED based spectrum analysis */
void led_specan()
{
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    67ea:	6818      	ldr	r0, [r3, #0]
    67ec:	889b      	ldrh	r3, [r3, #4]
    67ee:	9002      	str	r0, [sp, #8]
    67f0:	f8ad 300c 	strh.w	r3, [sp, #12]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    67f4:	4b41      	ldr	r3, [pc, #260]	; (68fc <led_specan+0x118>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    67f6:	2012      	movs	r0, #18
	u16 channels[3] = {2412, 2437, 2462};
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    67f8:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    67fa:	f642 3122 	movw	r1, #11042	; 0x2b22
    67fe:	f001 fbb8 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6802:	2014      	movs	r0, #20
    6804:	f241 314b 	movw	r1, #4939	; 0x134b
    6808:	f001 fbb3 	bl	7f72 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    680c:	2020      	movs	r0, #32
    680e:	f240 1101 	movw	r1, #257	; 0x101
    6812:	f001 fbae 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6816:	2003      	movs	r0, #3
    6818:	2129      	movs	r1, #41	; 0x29
    681a:	f001 fbaa 	bl	7f72 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    681e:	2006      	movs	r0, #6
    6820:	21f1      	movs	r1, #241	; 0xf1
    6822:	f001 fba6 	bl	7f72 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6826:	f001 fc47 	bl	80b8 <cc2400_status>
    682a:	0640      	lsls	r0, r0, #25
    682c:	d5fb      	bpl.n	6826 <led_specan+0x42>
	while ((cc2400_status() & FS_LOCK));
    682e:	f001 fc43 	bl	80b8 <cc2400_status>
    6832:	f000 0004 	and.w	r0, r0, #4
    6836:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    683a:	2800      	cmp	r0, #0
    683c:	d1f7      	bne.n	682e <led_specan+0x4a>

	while (requested_mode == MODE_LED_SPECAN) {
    683e:	4b30      	ldr	r3, [pc, #192]	; (6900 <led_specan+0x11c>)
    6840:	7c9b      	ldrb	r3, [r3, #18]
    6842:	2b07      	cmp	r3, #7
    6844:	d155      	bne.n	68f2 <led_specan+0x10e>
		cc2400_set(FSDIV, channels[i] - 1);
    6846:	aa04      	add	r2, sp, #16
    6848:	eb02 0344 	add.w	r3, r2, r4, lsl #1
    684c:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    6850:	2002      	movs	r0, #2
    6852:	3901      	subs	r1, #1
    6854:	b289      	uxth	r1, r1
    6856:	f001 fb8c 	bl	7f72 <cc2400_set>
		cc2400_strobe(SFSON);
    685a:	2061      	movs	r0, #97	; 0x61
    685c:	f001 fc33 	bl	80c6 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6860:	f001 fc2a 	bl	80b8 <cc2400_status>
    6864:	0741      	lsls	r1, r0, #29
    6866:	d5fb      	bpl.n	6860 <led_specan+0x7c>
		cc2400_strobe(SRX);
    6868:	2062      	movs	r0, #98	; 0x62
    686a:	f001 fc2c 	bl	80c6 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    686e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6872:	9301      	str	r3, [sp, #4]
    6874:	9b01      	ldr	r3, [sp, #4]
    6876:	3b01      	subs	r3, #1
    6878:	9301      	str	r3, [sp, #4]
    687a:	2b00      	cmp	r3, #0
    687c:	d1fa      	bne.n	6874 <led_specan+0x90>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    687e:	2006      	movs	r0, #6
    6880:	f001 fb6e 	bl	7f60 <cc2400_get>
		if (lvl > rssi_threshold) {
    6884:	4b1f      	ldr	r3, [pc, #124]	; (6904 <led_specan+0x120>)
    6886:	f340 2007 	sbfx	r0, r0, #8, #8
    688a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    688e:	b25b      	sxtb	r3, r3
    6890:	4298      	cmp	r0, r3
    6892:	dd0c      	ble.n	68ae <led_specan+0xca>
			switch (i) {
    6894:	2c01      	cmp	r4, #1
    6896:	d007      	beq.n	68a8 <led_specan+0xc4>
    6898:	d303      	bcc.n	68a2 <led_specan+0xbe>
    689a:	2c02      	cmp	r4, #2
    689c:	d116      	bne.n	68cc <led_specan+0xe8>
					break;
				case 1:
					RXLED_SET;
					break;
				case 2:
					USRLED_SET;
    689e:	4b1a      	ldr	r3, [pc, #104]	; (6908 <led_specan+0x124>)
    68a0:	e013      	b.n	68ca <led_specan+0xe6>
		volatile u32 j = 500; while (--j); //FIXME crude delay
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
		if (lvl > rssi_threshold) {
			switch (i) {
				case 0:
					TXLED_SET;
    68a2:	f44f 7280 	mov.w	r2, #256	; 0x100
    68a6:	e000      	b.n	68aa <led_specan+0xc6>
					break;
				case 1:
					RXLED_SET;
    68a8:	2210      	movs	r2, #16
    68aa:	4b17      	ldr	r3, [pc, #92]	; (6908 <led_specan+0x124>)
    68ac:	e00b      	b.n	68c6 <led_specan+0xe2>
					USRLED_SET;
					break;
			}
		}
		else {
			switch (i) {
    68ae:	2c01      	cmp	r4, #1
    68b0:	d007      	beq.n	68c2 <led_specan+0xde>
    68b2:	d303      	bcc.n	68bc <led_specan+0xd8>
    68b4:	2c02      	cmp	r4, #2
    68b6:	d109      	bne.n	68cc <led_specan+0xe8>
					break;
				case 1:
					RXLED_CLR;
					break;
				case 2:
					USRLED_CLR;
    68b8:	4b14      	ldr	r3, [pc, #80]	; (690c <led_specan+0x128>)
    68ba:	e006      	b.n	68ca <led_specan+0xe6>
			}
		}
		else {
			switch (i) {
				case 0:
					TXLED_CLR;
    68bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    68c0:	e000      	b.n	68c4 <led_specan+0xe0>
					break;
				case 1:
					RXLED_CLR;
    68c2:	2210      	movs	r2, #16
    68c4:	4b11      	ldr	r3, [pc, #68]	; (690c <led_specan+0x128>)
    68c6:	601a      	str	r2, [r3, #0]
					break;
    68c8:	e000      	b.n	68cc <led_specan+0xe8>
				case 2:
					USRLED_CLR;
    68ca:	601c      	str	r4, [r3, #0]
					break;
			}
		}

		i = (i+1) % 3;
    68cc:	2303      	movs	r3, #3
    68ce:	3401      	adds	r4, #1
    68d0:	fb94 f2f3 	sdiv	r2, r4, r3
    68d4:	fb03 4412 	mls	r4, r3, r2, r4

		handle_usb(clkn);
    68d8:	4b0d      	ldr	r3, [pc, #52]	; (6910 <led_specan+0x12c>)
					USRLED_CLR;
					break;
			}
		}

		i = (i+1) % 3;
    68da:	b2e4      	uxtb	r4, r4

		handle_usb(clkn);
    68dc:	6818      	ldr	r0, [r3, #0]
    68de:	f000 fb39 	bl	6f54 <handle_usb>

		cc2400_strobe(SRFOFF);
    68e2:	2064      	movs	r0, #100	; 0x64
    68e4:	f001 fbef 	bl	80c6 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    68e8:	f001 fbe6 	bl	80b8 <cc2400_status>
    68ec:	0742      	lsls	r2, r0, #29
    68ee:	d4fb      	bmi.n	68e8 <led_specan+0x104>
    68f0:	e7a5      	b.n	683e <led_specan+0x5a>
	}
}
    68f2:	b004      	add	sp, #16
    68f4:	bd10      	pop	{r4, pc}
    68f6:	bf00      	nop
    68f8:	00009530 	.word	0x00009530
    68fc:	2009c058 	.word	0x2009c058
    6900:	10000a1c 	.word	0x10000a1c
    6904:	10000448 	.word	0x10000448
    6908:	2009c038 	.word	0x2009c038
    690c:	2009c03c 	.word	0x2009c03c
    6910:	10000bc4 	.word	0x10000bc4

00006914 <main>:

int main()
{
    6914:	b510      	push	{r4, lr}
	ubertooth_init();
    6916:	f001 fc99 	bl	824c <ubertooth_init>
	clkn_init();
    691a:	f000 fc45 	bl	71a8 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    691e:	483e      	ldr	r0, [pc, #248]	; (6a18 <main+0x104>)
    6920:	f000 fa90 	bl	6e44 <ubertooth_usb_init>
	cc2400_idle();
    6924:	f7fd fe46 	bl	45b4 <cc2400_idle>

	while (1) {
		handle_usb(clkn);
    6928:	4b3c      	ldr	r3, [pc, #240]	; (6a1c <main+0x108>)
		if(requested_mode != mode) {
    692a:	4c3d      	ldr	r4, [pc, #244]	; (6a20 <main+0x10c>)
	clkn_init();
	ubertooth_usb_init(vendor_request_handler);
	cc2400_idle();

	while (1) {
		handle_usb(clkn);
    692c:	6818      	ldr	r0, [r3, #0]
    692e:	f000 fb11 	bl	6f54 <handle_usb>
		if(requested_mode != mode) {
    6932:	7ca2      	ldrb	r2, [r4, #18]
    6934:	7c63      	ldrb	r3, [r4, #17]
    6936:	429a      	cmp	r2, r3
    6938:	d0f6      	beq.n	6928 <main+0x14>
			switch (requested_mode) {
    693a:	7ca3      	ldrb	r3, [r4, #18]
    693c:	2b10      	cmp	r3, #16
    693e:	d8f3      	bhi.n	6928 <main+0x14>
    6940:	a201      	add	r2, pc, #4	; (adr r2, 6948 <main+0x34>)
    6942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6946:	bf00      	nop
    6948:	00006925 	.word	0x00006925
    694c:	0000699d 	.word	0x0000699d
    6950:	000069a7 	.word	0x000069a7
    6954:	000069c7 	.word	0x000069c7
    6958:	000069f1 	.word	0x000069f1
    695c:	000069d5 	.word	0x000069d5
    6960:	000069e5 	.word	0x000069e5
    6964:	000069f7 	.word	0x000069f7
    6968:	000069b1 	.word	0x000069b1
    696c:	000069b5 	.word	0x000069b5
    6970:	000069bb 	.word	0x000069bb
    6974:	0000698d 	.word	0x0000698d
    6978:	000069c1 	.word	0x000069c1
    697c:	000069fd 	.word	0x000069fd
    6980:	00006999 	.word	0x00006999
    6984:	00006a09 	.word	0x00006a09
    6988:	00006a13 	.word	0x00006a13
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    698c:	2001      	movs	r0, #1
    698e:	f001 fa15 	bl	7dbc <wait>
					reset();
    6992:	f001 fc65 	bl	8260 <reset>
					break;
    6996:	e7c7      	b.n	6928 <main+0x14>
				case MODE_AFH:
					mode = MODE_AFH;
    6998:	230e      	movs	r3, #14
    699a:	e000      	b.n	699e <main+0x8a>
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    699c:	2301      	movs	r3, #1
    699e:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    69a0:	f7fe fdf6 	bl	5590 <bt_stream_rx>
					break;
    69a4:	e7c0      	b.n	6928 <main+0x14>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    69a6:	2302      	movs	r3, #2
    69a8:	7463      	strb	r3, [r4, #17]
					br_transmit();
    69aa:	f7fe fe9f 	bl	56ec <br_transmit>
					break;
    69ae:	e7bb      	b.n	6928 <main+0x14>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    69b0:	2308      	movs	r3, #8
    69b2:	e7f4      	b.n	699e <main+0x8a>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    69b4:	f7ff faf2 	bl	5f9c <bt_follow_le>
					break;
    69b8:	e7b6      	b.n	6928 <main+0x14>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    69ba:	f7ff fd1d 	bl	63f8 <bt_promisc_le>
					break;
    69be:	e7b3      	b.n	6928 <main+0x14>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    69c0:	f7ff fd52 	bl	6468 <bt_slave_le>
					break;
    69c4:	e7b0      	b.n	6928 <main+0x14>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    69c6:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    69c8:	4815      	ldr	r0, [pc, #84]	; (6a20 <main+0x10c>)
    69ca:	4916      	ldr	r1, [pc, #88]	; (6a24 <main+0x110>)
					break;
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    69cc:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    69ce:	f000 fefb 	bl	77c8 <cc2400_txtest>
					break;
    69d2:	e7a9      	b.n	6928 <main+0x14>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    69d4:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    69d6:	4813      	ldr	r0, [pc, #76]	; (6a24 <main+0x110>)
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
					cc2400_txtest(&modulation, &channel);
					break;
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    69d8:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    69da:	f000 fcf9 	bl	73d0 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    69de:	2300      	movs	r3, #0
    69e0:	74a3      	strb	r3, [r4, #18]
					break;
    69e2:	e7a1      	b.n	6928 <main+0x14>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    69e4:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    69e6:	480f      	ldr	r0, [pc, #60]	; (6a24 <main+0x110>)
					mode = MODE_RANGE_TEST;
					cc2400_rangetest(&channel);
					requested_mode = MODE_IDLE;
					break;
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    69e8:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    69ea:	f000 fe35 	bl	7658 <cc2400_repeater>
					break;
    69ee:	e79b      	b.n	6928 <main+0x14>
				case MODE_SPECAN:
					specan();
    69f0:	f7ff fe6e 	bl	66d0 <specan>
					break;
    69f4:	e798      	b.n	6928 <main+0x14>
				case MODE_LED_SPECAN:
					led_specan();
    69f6:	f7ff fef5 	bl	67e4 <led_specan>
					break;
    69fa:	e795      	b.n	6928 <main+0x14>
				case MODE_EGO:
					mode = MODE_EGO;
    69fc:	230d      	movs	r3, #13
    69fe:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    6a00:	7d20      	ldrb	r0, [r4, #20]
    6a02:	f001 f949 	bl	7c98 <ego_main>
					break;
    6a06:	e78f      	b.n	6928 <main+0x14>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    6a08:	230f      	movs	r3, #15
    6a0a:	7463      	strb	r3, [r4, #17]
					rx_generic();
    6a0c:	f7ff fdd6 	bl	65bc <rx_generic>
					break;
    6a10:	e78a      	b.n	6928 <main+0x14>
				case MODE_TX_GENERIC:
					tx_generic();
    6a12:	f7ff fde3 	bl	65dc <tx_generic>
					break;
    6a16:	e787      	b.n	6928 <main+0x14>
    6a18:	000048d5 	.word	0x000048d5
    6a1c:	10000bc4 	.word	0x10000bc4
    6a20:	10000a1c 	.word	0x10000a1c
    6a24:	10000448 	.word	0x10000448

00006a28 <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    6a28:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6a2a:	4b42      	ldr	r3, [pc, #264]	; (6b34 <precalc+0x10c>)
	syncword = 0;
    6a2c:	4842      	ldr	r0, [pc, #264]	; (6b38 <precalc+0x110>)
/* do all of the one time precalculation */
void precalc(void)
{
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6a2e:	6819      	ldr	r1, [r3, #0]
	syncword = 0;
    6a30:	2200      	movs	r2, #0
    6a32:	2300      	movs	r3, #0
    6a34:	e9c0 2300 	strd	r2, r3, [r0]
    6a38:	2300      	movs	r3, #0
    6a3a:	0058      	lsls	r0, r3, #1

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    6a3c:	224f      	movs	r2, #79	; 0x4f
    6a3e:	fb90 f4f2 	sdiv	r4, r0, r2
    6a42:	fb02 0214 	mls	r2, r2, r4, r0
    6a46:	4e3d      	ldr	r6, [pc, #244]	; (6b3c <precalc+0x114>)
    6a48:	559a      	strb	r2, [r3, r6]
    6a4a:	3301      	adds	r3, #1
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    6a4c:	2b4f      	cmp	r3, #79	; 0x4f
    6a4e:	d1f4      	bne.n	6a3a <precalc+0x12>
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    6a50:	4b3b      	ldr	r3, [pc, #236]	; (6b40 <precalc+0x118>)
    6a52:	f3c1 52c4 	ubfx	r2, r1, #23, #5
    6a56:	701a      	strb	r2, [r3, #0]
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    6a58:	f3c1 1407 	ubfx	r4, r1, #4, #8
    6a5c:	f3c1 00c7 	ubfx	r0, r1, #3, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    6a60:	4b38      	ldr	r3, [pc, #224]	; (6b44 <precalc+0x11c>)
    6a62:	f3c1 42c3 	ubfx	r2, r1, #19, #4
	c1 = ((address >> 4) & 0x10) +
    6a66:	f000 0508 	and.w	r5, r0, #8
    6a6a:	f004 0710 	and.w	r7, r4, #16
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    6a6e:	701a      	strb	r2, [r3, #0]
	c1 = ((address >> 4) & 0x10) +
    6a70:	442f      	add	r7, r5
    6a72:	f3c1 0287 	ubfx	r2, r1, #2, #8
    6a76:	f001 0501 	and.w	r5, r1, #1
    6a7a:	f3c1 0347 	ubfx	r3, r1, #1, #8
    6a7e:	442f      	add	r7, r5
    6a80:	f002 0504 	and.w	r5, r2, #4
    6a84:	442f      	add	r7, r5
    6a86:	f003 0502 	and.w	r5, r3, #2
    6a8a:	442f      	add	r7, r5
    6a8c:	4d2e      	ldr	r5, [pc, #184]	; (6b48 <precalc+0x120>)
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6a8e:	f004 0408 	and.w	r4, r4, #8


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    6a92:	702f      	strb	r7, [r5, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    6a94:	4d2d      	ldr	r5, [pc, #180]	; (6b4c <precalc+0x124>)
    6a96:	f3c1 2788 	ubfx	r7, r1, #10, #9
    6a9a:	802f      	strh	r7, [r5, #0]
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
    6a9c:	098f      	lsrs	r7, r1, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6a9e:	09cd      	lsrs	r5, r1, #7
    6aa0:	f007 0720 	and.w	r7, r7, #32
    6aa4:	f005 0540 	and.w	r5, r5, #64	; 0x40
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    6aa8:	0949      	lsrs	r1, r1, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6aaa:	443d      	add	r5, r7
    6aac:	f001 0110 	and.w	r1, r1, #16
    6ab0:	4429      	add	r1, r5
    6ab2:	440c      	add	r4, r1
    6ab4:	f000 0004 	and.w	r0, r0, #4
    6ab8:	4420      	add	r0, r4
    6aba:	f002 0202 	and.w	r2, r2, #2
    6abe:	4402      	add	r2, r0
    6ac0:	f003 0301 	and.w	r3, r3, #1
    6ac4:	4922      	ldr	r1, [pc, #136]	; (6b50 <precalc+0x128>)
    6ac6:	4413      	add	r3, r2
    6ac8:	700b      	strb	r3, [r1, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    6aca:	4b22      	ldr	r3, [pc, #136]	; (6b54 <precalc+0x12c>)
    6acc:	781b      	ldrb	r3, [r3, #0]
    6ace:	b383      	cbz	r3, 6b32 <precalc+0x10a>
    6ad0:	2400      	movs	r4, #0
    6ad2:	46a4      	mov	ip, r4
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    6ad4:	4f20      	ldr	r7, [pc, #128]	; (6b58 <precalc+0x130>)
    6ad6:	2300      	movs	r3, #0
    6ad8:	5de2      	ldrb	r2, [r4, r7]

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6ada:	2500      	movs	r5, #0
    6adc:	ea52 0103 	orrs.w	r1, r2, r3
    6ae0:	d008      	beq.n	6af4 <precalc+0xcc>
		n &= n - 1;
    6ae2:	f112 30ff 	adds.w	r0, r2, #4294967295	; 0xffffffff
    6ae6:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6aea:	3501      	adds	r5, #1
		n &= n - 1;
    6aec:	4002      	ands	r2, r0
    6aee:	400b      	ands	r3, r1

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6af0:	b2ed      	uxtb	r5, r5
    6af2:	e7f3      	b.n	6adc <precalc+0xb4>
    6af4:	3401      	adds	r4, #1
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    6af6:	4465      	add	r5, ip
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6af8:	2c0a      	cmp	r4, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    6afa:	b2ed      	uxtb	r5, r5
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6afc:	d001      	beq.n	6b02 <precalc+0xda>
			used_channels += count_bits((uint64_t) afh_map[i]);
    6afe:	46ac      	mov	ip, r5
    6b00:	e7e8      	b.n	6ad4 <precalc+0xac>
    6b02:	4b16      	ldr	r3, [pc, #88]	; (6b5c <precalc+0x134>)
    6b04:	701d      	strb	r5, [r3, #0]
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6b06:	2300      	movs	r3, #0
    6b08:	461a      	mov	r2, r3
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    6b0a:	214f      	movs	r1, #79	; 0x4f
    6b0c:	fb93 f0f1 	sdiv	r0, r3, r1
    6b10:	fb01 3010 	mls	r0, r1, r0, r3
    6b14:	b2c1      	uxtb	r1, r0
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    6b16:	08cc      	lsrs	r4, r1, #3
    6b18:	5d3c      	ldrb	r4, [r7, r4]
    6b1a:	f000 0007 	and.w	r0, r0, #7
    6b1e:	fa44 f000 	asr.w	r0, r4, r0
    6b22:	07c0      	lsls	r0, r0, #31
    6b24:	d502      	bpl.n	6b2c <precalc+0x104>
				bank[j++] = chan;
    6b26:	1c50      	adds	r0, r2, #1
    6b28:	54b1      	strb	r1, [r6, r2]
    6b2a:	b2c2      	uxtb	r2, r0
    6b2c:	3302      	adds	r3, #2
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    6b2e:	2b9e      	cmp	r3, #158	; 0x9e
    6b30:	d1eb      	bne.n	6b0a <precalc+0xe2>
    6b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b34:	100010c0 	.word	0x100010c0
    6b38:	10000d18 	.word	0x10000d18
    6b3c:	10001125 	.word	0x10001125
    6b40:	10001123 	.word	0x10001123
    6b44:	100010d0 	.word	0x100010d0
    6b48:	10001124 	.word	0x10001124
    6b4c:	100010d2 	.word	0x100010d2
    6b50:	10001174 	.word	0x10001174
    6b54:	10001047 	.word	0x10001047
    6b58:	10000bab 	.word	0x10000bab
    6b5c:	10000ba9 	.word	0x10000ba9

00006b60 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    6b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b62:	b087      	sub	sp, #28
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6b64:	f3c0 02d8 	ubfx	r2, r0, #3, #25
	f = base_f % 79;
    6b68:	214f      	movs	r1, #79	; 0x4f
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6b6a:	f022 020f 	bic.w	r2, r2, #15
	f = base_f % 79;
    6b6e:	fbb2 f7f1 	udiv	r7, r2, r1
    6b72:	fb01 2717 	mls	r7, r1, r7, r2
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6b76:	493f      	ldr	r1, [pc, #252]	; (6c74 <next_hop+0x114>)
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
    6b78:	f3c0 0340 	ubfx	r3, r0, #1, #1
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6b7c:	f891 c000 	ldrb.w	ip, [r1]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6b80:	211f      	movs	r1, #31

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    6b82:	015e      	lsls	r6, r3, #5
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6b84:	434b      	muls	r3, r1
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6b86:	ea8c 4c10 	eor.w	ip, ip, r0, lsr #16
    6b8a:	f00c 0c1f 	and.w	ip, ip, #31
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6b8e:	ea8c 0c03 	eor.w	ip, ip, r3
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6b92:	4b39      	ldr	r3, [pc, #228]	; (6c78 <next_hop+0x118>)

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    6b94:	b2b6      	uxth	r6, r6
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6b96:	781c      	ldrb	r4, [r3, #0]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6b98:	4b38      	ldr	r3, [pc, #224]	; (6c7c <next_hop+0x11c>)
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6b9a:	ea84 5450 	eor.w	r4, r4, r0, lsr #21
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6b9e:	781b      	ldrb	r3, [r3, #0]
    6ba0:	eb04 0490 	add.w	r4, r4, r0, lsr #2
    6ba4:	405c      	eors	r4, r3
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6ba6:	4b36      	ldr	r3, [pc, #216]	; (6c80 <next_hop+0x120>)

/* 5 bit permutation */
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    6ba8:	400c      	ands	r4, r1
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6baa:	881b      	ldrh	r3, [r3, #0]
    6bac:	ea83 10d0 	eor.w	r0, r3, r0, lsr #7
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
	p_high &= 0x1f;
	p_low &= 0x1ff;
    6bb0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6bb4:	b280      	uxth	r0, r0
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    6bb6:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
    6bb8:	fa40 f103 	asr.w	r1, r0, r3
    6bbc:	ad02      	add	r5, sp, #8
    6bbe:	f001 0101 	and.w	r1, r1, #1
    6bc2:	5559      	strb	r1, [r3, r5]
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    6bc4:	3301      	adds	r3, #1
    6bc6:	2b09      	cmp	r3, #9
    6bc8:	d1f6      	bne.n	6bb8 <next_hop+0x58>
    6bca:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;
    6bcc:	fa4c f003 	asr.w	r0, ip, r3
    6bd0:	18e9      	adds	r1, r5, r3
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6bd2:	3301      	adds	r3, #1
		p[i+9] = (p_high >> i) & 0x01;
    6bd4:	f000 0001 	and.w	r0, r0, #1
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6bd8:	2b05      	cmp	r3, #5
		p[i+9] = (p_high >> i) & 0x01;
    6bda:	7248      	strb	r0, [r1, #9]
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6bdc:	d1f6      	bne.n	6bcc <next_hop+0x6c>
    6bde:	2300      	movs	r3, #0
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;
    6be0:	fa44 f103 	asr.w	r1, r4, r3
    6be4:	f001 0101 	and.w	r1, r1, #1
    6be8:	f80d 1003 	strb.w	r1, [sp, r3]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    6bec:	3301      	adds	r3, #1
    6bee:	2b05      	cmp	r3, #5
    6bf0:	d1f6      	bne.n	6be0 <next_hop+0x80>
    6bf2:	230d      	movs	r3, #13
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    6bf4:	5ce9      	ldrb	r1, [r5, r3]
    6bf6:	b179      	cbz	r1, 6c18 <next_hop+0xb8>
			tmp = z_bit[index1[i]];
    6bf8:	4922      	ldr	r1, [pc, #136]	; (6c84 <next_hop+0x124>)
    6bfa:	a806      	add	r0, sp, #24
    6bfc:	5c5c      	ldrb	r4, [r3, r1]
			z_bit[index1[i]] = z_bit[index2[i]];
    6bfe:	310e      	adds	r1, #14

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    6c00:	4404      	add	r4, r0
			z_bit[index1[i]] = z_bit[index2[i]];
    6c02:	5c58      	ldrb	r0, [r3, r1]
    6c04:	a906      	add	r1, sp, #24
    6c06:	4408      	add	r0, r1

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    6c08:	f814 cc18 	ldrb.w	ip, [r4, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    6c0c:	f810 1c18 	ldrb.w	r1, [r0, #-24]
    6c10:	f804 1c18 	strb.w	r1, [r4, #-24]
			z_bit[index2[i]] = tmp;
    6c14:	f800 cc18 	strb.w	ip, [r0, #-24]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    6c18:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    6c1c:	d2ea      	bcs.n	6bf4 <next_hop+0x94>
    6c1e:	2100      	movs	r1, #0
    6c20:	460b      	mov	r3, r1
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
		output += z_bit[i] << i;
    6c22:	f81d 0003 	ldrb.w	r0, [sp, r3]
    6c26:	4098      	lsls	r0, r3
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6c28:	3301      	adds	r3, #1
		output += z_bit[i] << i;
    6c2a:	4401      	add	r1, r0
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6c2c:	2b05      	cmp	r3, #5
		output += z_bit[i] << i;
    6c2e:	b2c9      	uxtb	r1, r1
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6c30:	d1f7      	bne.n	6c22 <next_hop+0xc2>
	perm = perm5(
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    6c32:	4b15      	ldr	r3, [pc, #84]	; (6c88 <next_hop+0x128>)
    6c34:	4437      	add	r7, r6
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	4419      	add	r1, r3
    6c3a:	440f      	add	r7, r1
    6c3c:	234f      	movs	r3, #79	; 0x4f
    6c3e:	fbb7 f0f3 	udiv	r0, r7, r3
    6c42:	fb03 7710 	mls	r7, r3, r0, r7
    6c46:	4b11      	ldr	r3, [pc, #68]	; (6c8c <next_hop+0x12c>)
    6c48:	5dd8      	ldrb	r0, [r3, r7]
	if(afh_enabled) {
    6c4a:	4b11      	ldr	r3, [pc, #68]	; (6c90 <next_hop+0x130>)
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	b16b      	cbz	r3, 6c6c <next_hop+0x10c>
		f_dash = base_f % used_channels;
    6c50:	4b10      	ldr	r3, [pc, #64]	; (6c94 <next_hop+0x134>)
    6c52:	781b      	ldrb	r3, [r3, #0]
    6c54:	fbb2 f0f3 	udiv	r0, r2, r3
    6c58:	fb03 2210 	mls	r2, r3, r0, r2
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    6c5c:	4416      	add	r6, r2
    6c5e:	440e      	add	r6, r1
    6c60:	fbb6 f1f3 	udiv	r1, r6, r3
    6c64:	fb03 6611 	mls	r6, r3, r1, r6
    6c68:	4b0b      	ldr	r3, [pc, #44]	; (6c98 <next_hop+0x138>)
    6c6a:	5d98      	ldrb	r0, [r3, r6]
	}
	return (2402 + next_channel);

}
    6c6c:	f600 1062 	addw	r0, r0, #2402	; 0x962
    6c70:	b007      	add	sp, #28
    6c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c74:	10001124 	.word	0x10001124
    6c78:	10001123 	.word	0x10001123
    6c7c:	100010d0 	.word	0x100010d0
    6c80:	100010d2 	.word	0x100010d2
    6c84:	00009543 	.word	0x00009543
    6c88:	10001174 	.word	0x10001174
    6c8c:	10001125 	.word	0x10001125
    6c90:	10001047 	.word	0x10001047
    6c94:	10000ba9 	.word	0x10000ba9
    6c98:	100010d4 	.word	0x100010d4

00006c9c <btle_channel_index>:
}

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
    6c9c:	0840      	lsrs	r0, r0, #1
    6c9e:	d00a      	beq.n	6cb6 <btle_channel_index+0x1a>
		idx = 37;
	else if (channel < 12)
    6ca0:	280b      	cmp	r0, #11
    6ca2:	d801      	bhi.n	6ca8 <btle_channel_index+0xc>
		idx = channel - 1;
    6ca4:	3801      	subs	r0, #1
    6ca6:	e004      	b.n	6cb2 <btle_channel_index+0x16>
	else if (channel == 12)
    6ca8:	280c      	cmp	r0, #12
    6caa:	d006      	beq.n	6cba <btle_channel_index+0x1e>
		idx = 38;
	else if (channel < 39)
    6cac:	2826      	cmp	r0, #38	; 0x26
    6cae:	d806      	bhi.n	6cbe <btle_channel_index+0x22>
		idx = channel - 2;
    6cb0:	3802      	subs	r0, #2
    6cb2:	b2c0      	uxtb	r0, r0
    6cb4:	4770      	bx	lr

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
		idx = 37;
    6cb6:	2025      	movs	r0, #37	; 0x25
    6cb8:	4770      	bx	lr
	else if (channel < 12)
		idx = channel - 1;
	else if (channel == 12)
		idx = 38;
    6cba:	2026      	movs	r0, #38	; 0x26
    6cbc:	4770      	bx	lr
	else if (channel < 39)
		idx = channel - 2;
	else
		idx = 39;
    6cbe:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    6cc0:	4770      	bx	lr

00006cc2 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    6cc2:	280a      	cmp	r0, #10
    6cc4:	d802      	bhi.n	6ccc <btle_channel_index_to_phys+0xa>
		phys = 2404 + 2 * idx;
    6cc6:	f200 40b2 	addw	r0, r0, #1202	; 0x4b2
    6cca:	e003      	b.n	6cd4 <btle_channel_index_to_phys+0x12>
	else if (idx < 37)
    6ccc:	2824      	cmp	r0, #36	; 0x24
    6cce:	d803      	bhi.n	6cd8 <btle_channel_index_to_phys+0x16>
		phys = 2428 + 2 * (idx - 11);
    6cd0:	f200 40b3 	addw	r0, r0, #1203	; 0x4b3
    6cd4:	0040      	lsls	r0, r0, #1
    6cd6:	4770      	bx	lr
	else if (idx == 37)
    6cd8:	2825      	cmp	r0, #37	; 0x25
    6cda:	d007      	beq.n	6cec <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
		phys = 2426;
    6cdc:	f640 137a 	movw	r3, #2426	; 0x97a
    6ce0:	2826      	cmp	r0, #38	; 0x26
    6ce2:	bf0c      	ite	eq
    6ce4:	4618      	moveq	r0, r3
    6ce6:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    6cea:	4770      	bx	lr
	if (idx < 11)
		phys = 2404 + 2 * idx;
	else if (idx < 37)
		phys = 2428 + 2 * (idx - 11);
	else if (idx == 37)
		phys = 2402;
    6cec:	f640 1062 	movw	r0, #2402	; 0x962
	else if (idx == 38)
		phys = 2426;
	else
		phys = 2480;
	return phys;
}
    6cf0:	4770      	bx	lr

00006cf2 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    6cf2:	b538      	push	{r3, r4, r5, lr}
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    6cf4:	7d45      	ldrb	r5, [r0, #21]

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    6cf6:	4604      	mov	r4, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    6cf8:	4628      	mov	r0, r5
    6cfa:	f7ff ffe2 	bl	6cc2 <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    6cfe:	7da2      	ldrb	r2, [r4, #22]
    6d00:	2325      	movs	r3, #37	; 0x25
    6d02:	442a      	add	r2, r5
    6d04:	fb92 f1f3 	sdiv	r1, r2, r3
    6d08:	fb03 2311 	mls	r3, r3, r1, r2
    6d0c:	7563      	strb	r3, [r4, #21]
	return phys;
}
    6d0e:	bd38      	pop	{r3, r4, r5, pc}

00006d10 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    6d10:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6d12:	2300      	movs	r3, #0
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
    6d14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6d18:	4293      	cmp	r3, r2
    6d1a:	da14      	bge.n	6d46 <btle_calc_crc+0x36>
		u8 cur = data[i];
    6d1c:	5ccd      	ldrb	r5, [r1, r3]
    6d1e:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			int next_bit = (state ^ cur) & 1;
    6d20:	ea85 0600 	eor.w	r6, r5, r0
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    6d24:	f016 0f01 	tst.w	r6, #1
    6d28:	ea4f 0555 	mov.w	r5, r5, lsr #1
    6d2c:	ea4f 0050 	mov.w	r0, r0, lsr #1
    6d30:	d005      	beq.n	6d3e <btle_calc_crc+0x2e>
				state |= 1 << 23;
    6d32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
				state ^= lfsr_mask;
    6d36:	f480 00b4 	eor.w	r0, r0, #5898240	; 0x5a0000
    6d3a:	f480 40c0 	eor.w	r0, r0, #24576	; 0x6000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    6d3e:	3c01      	subs	r4, #1
    6d40:	d1ee      	bne.n	6d20 <btle_calc_crc+0x10>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6d42:	3301      	adds	r3, #1
    6d44:	e7e8      	b.n	6d18 <btle_calc_crc+0x8>
			}
		}
	}

	return state;
}
    6d46:	bd70      	pop	{r4, r5, r6, pc}

00006d48 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    6d48:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    6d4a:	3a01      	subs	r2, #1
    6d4c:	2a00      	cmp	r2, #0
    6d4e:	db14      	blt.n	6d7a <btle_reverse_crc+0x32>
		u8 cur = data[i];
    6d50:	5c8d      	ldrb	r5, [r1, r2]
    6d52:	2307      	movs	r3, #7
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
    6d54:	0dc4      	lsrs	r4, r0, #23
			state = (state << 1) & 0xffffff;
    6d56:	0040      	lsls	r0, r0, #1
    6d58:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    6d5c:	fa45 f003 	asr.w	r0, r5, r3
    6d60:	f000 0001 	and.w	r0, r0, #1
    6d64:	4060      	eors	r0, r4
    6d66:	4330      	orrs	r0, r6
			if (top_bit)
    6d68:	b11c      	cbz	r4, 6d72 <btle_reverse_crc+0x2a>
				state ^= lfsr_mask;
    6d6a:	f480 0034 	eor.w	r0, r0, #11796480	; 0xb40000
    6d6e:	f480 4040 	eor.w	r0, r0, #49152	; 0xc000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    6d72:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    6d76:	d2ed      	bcs.n	6d54 <btle_reverse_crc+0xc>
    6d78:	e7e7      	b.n	6d4a <btle_reverse_crc+0x2>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    6d7a:	2300      	movs	r3, #0
    6d7c:	461a      	mov	r2, r3
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    6d7e:	fa20 f103 	lsr.w	r1, r0, r3
    6d82:	f1c3 0417 	rsb	r4, r3, #23
    6d86:	f001 0101 	and.w	r1, r1, #1
    6d8a:	40a1      	lsls	r1, r4
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    6d8c:	3301      	adds	r3, #1
    6d8e:	2b18      	cmp	r3, #24
		ret |= ((state >> i) & 1) << (23 - i);
    6d90:	ea42 0201 	orr.w	r2, r2, r1
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    6d94:	d1f3      	bne.n	6d7e <btle_reverse_crc+0x36>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
}
    6d96:	4610      	mov	r0, r2
    6d98:	bd70      	pop	{r4, r5, r6, pc}
    6d9a:	0000      	movs	r0, r0

00006d9c <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    6d9c:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    6d9e:	2300      	movs	r3, #0
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    6da0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    6da4:	4293      	cmp	r3, r2
    6da6:	da09      	bge.n	6dbc <btle_crcgen_lut+0x20>
		key = data[i] ^ (state & 0xff);
    6da8:	5ccd      	ldrb	r5, [r1, r3]
		state = (state >> 8) ^ btle_crc_lut[key];
    6daa:	4c05      	ldr	r4, [pc, #20]	; (6dc0 <btle_crcgen_lut+0x24>)
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
		key = data[i] ^ (state & 0xff);
    6dac:	4045      	eors	r5, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    6dae:	b2ed      	uxtb	r5, r5
    6db0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    6db4:	3301      	adds	r3, #1
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
    6db6:	ea84 2010 	eor.w	r0, r4, r0, lsr #8
    6dba:	e7f3      	b.n	6da4 <btle_crcgen_lut+0x8>
	}
	return state;
}
    6dbc:	bd30      	pop	{r4, r5, pc}
    6dbe:	bf00      	nop
    6dc0:	1000049c 	.word	0x1000049c

00006dc4 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    6dc4:	b513      	push	{r0, r1, r4, lr}
    6dc6:	460b      	mov	r3, r1
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6dc8:	8841      	ldrh	r1, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6dca:	6812      	ldr	r2, [r2, #0]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6dcc:	f8ad 1004 	strh.w	r1, [sp, #4]
    6dd0:	8881      	ldrh	r1, [r0, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6dd2:	7840      	ldrb	r0, [r0, #1]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6dd4:	f8ad 1006 	strh.w	r1, [sp, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6dd8:	4904      	ldr	r1, [pc, #16]	; (6dec <usb_vendor_request_handler+0x28>)
    6dda:	680c      	ldr	r4, [r1, #0]
    6ddc:	a901      	add	r1, sp, #4
    6dde:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    6de0:	1e43      	subs	r3, r0, #1
    6de2:	4258      	negs	r0, r3
    6de4:	4158      	adcs	r0, r3
    6de6:	b002      	add	sp, #8
    6de8:	bd10      	pop	{r4, pc}
    6dea:	bf00      	nop
    6dec:	1000327c 	.word	0x1000327c

00006df0 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    6df0:	b530      	push	{r4, r5, lr}
    6df2:	b087      	sub	sp, #28
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    6df4:	ad01      	add	r5, sp, #4
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
	return (BOOL) (rv==1);
}


void set_serial_descriptor(u8 *descriptors) {
    6df6:	4604      	mov	r4, r0
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    6df8:	4669      	mov	r1, sp
    6dfa:	4628      	mov	r0, r5
    6dfc:	f001 fa66 	bl	82cc <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    6e00:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6e04:	b9e2      	cbnz	r2, 6e40 <set_serial_descriptor+0x50>
    6e06:	4623      	mov	r3, r4
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    6e08:	3201      	adds	r2, #1
    6e0a:	5ca9      	ldrb	r1, [r5, r2]
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    6e0c:	2000      	movs	r0, #0
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    6e0e:	090c      	lsrs	r4, r1, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6e10:	2c09      	cmp	r4, #9
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
    6e12:	f001 010f 	and.w	r1, r1, #15
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6e16:	bf86      	itte	hi
    6e18:	3457      	addhi	r4, #87	; 0x57
    6e1a:	b2e4      	uxtbhi	r4, r4
    6e1c:	3430      	addls	r4, #48	; 0x30
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6e1e:	2909      	cmp	r1, #9
    6e20:	bf86      	itte	hi
    6e22:	3157      	addhi	r1, #87	; 0x57
    6e24:	b2c9      	uxtbhi	r1, r1
    6e26:	3130      	addls	r1, #48	; 0x30
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    6e28:	2a10      	cmp	r2, #16
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6e2a:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
			desc[1+ i * 4] = 0;
    6e2e:	f883 007d 	strb.w	r0, [r3, #125]	; 0x7d
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6e32:	f883 107e 	strb.w	r1, [r3, #126]	; 0x7e
			desc[3 + i * 4] = 0;
    6e36:	f883 007f 	strb.w	r0, [r3, #127]	; 0x7f
    6e3a:	f103 0304 	add.w	r3, r3, #4
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    6e3e:	d1e3      	bne.n	6e08 <set_serial_descriptor+0x18>
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[3 + i * 4] = 0;
		}
	}
}
    6e40:	b007      	add	sp, #28
    6e42:	bd30      	pop	{r4, r5, pc}

00006e44 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    6e44:	b538      	push	{r3, r4, r5, lr}
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    6e46:	4c0d      	ldr	r4, [pc, #52]	; (6e7c <ubertooth_usb_init+0x38>)
		}
	}
}

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    6e48:	4605      	mov	r5, r0
	// initialise stack
	USBInit();
    6e4a:	f001 fb1d 	bl	8488 <USBInit>

	set_serial_descriptor(abDescriptors);
    6e4e:	4620      	mov	r0, r4
    6e50:	f7ff ffce 	bl	6df0 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    6e54:	4620      	mov	r0, r4
    6e56:	f001 fd55 	bl	8904 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    6e5a:	4b09      	ldr	r3, [pc, #36]	; (6e80 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    6e5c:	4a09      	ldr	r2, [pc, #36]	; (6e84 <ubertooth_usb_init+0x40>)
    6e5e:	2002      	movs	r0, #2
    6e60:	4909      	ldr	r1, [pc, #36]	; (6e88 <ubertooth_usb_init+0x44>)
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);

	// Request handler
	v_req_handler = vendor_req_handler;
    6e62:	601d      	str	r5, [r3, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    6e64:	f001 fb06 	bl	8474 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    6e68:	4908      	ldr	r1, [pc, #32]	; (6e8c <ubertooth_usb_init+0x48>)
    6e6a:	20ff      	movs	r0, #255	; 0xff
    6e6c:	f001 fd30 	bl	88d0 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    6e70:	2001      	movs	r0, #1
    6e72:	f001 fb9e 	bl	85b2 <USBHwConnect>

	return 0;
}
    6e76:	2000      	movs	r0, #0
    6e78:	bd38      	pop	{r3, r4, r5, pc}
    6e7a:	bf00      	nop
    6e7c:	1000089c 	.word	0x1000089c
    6e80:	1000327c 	.word	0x1000327c
    6e84:	10003178 	.word	0x10003178
    6e88:	00006dc5 	.word	0x00006dc5
    6e8c:	0000955f 	.word	0x0000955f

00006e90 <queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    6e90:	4b04      	ldr	r3, [pc, #16]	; (6ea4 <queue_init+0x14>)
    6e92:	2100      	movs	r1, #0
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    6e94:	4804      	ldr	r0, [pc, #16]	; (6ea8 <queue_init+0x18>)
    6e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    6e9a:	6019      	str	r1, [r3, #0]
	tail = 0;
    6e9c:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    6e9e:	f7fd b9c7 	b.w	4230 <memset>
    6ea2:	bf00      	nop
    6ea4:	10000a54 	.word	0x10000a54
    6ea8:	10001178 	.word	0x10001178

00006eac <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
    6eac:	4b0a      	ldr	r3, [pc, #40]	; (6ed8 <usb_enqueue+0x2c>)
    6eae:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    6eb0:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    6eb2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    6eb6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    6eba:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    6ebc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6ec0:	4291      	cmp	r1, r2
    6ec2:	d006      	beq.n	6ed2 <usb_enqueue+0x26>
		return NULL;
	}

	++tail;
    6ec4:	685a      	ldr	r2, [r3, #4]
    6ec6:	3201      	adds	r2, #1
    6ec8:	605a      	str	r2, [r3, #4]
	return &fifo[t];
    6eca:	4b04      	ldr	r3, [pc, #16]	; (6edc <usb_enqueue+0x30>)
    6ecc:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    6ed0:	4770      	bx	lr
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    6ed2:	2000      	movs	r0, #0
	}

	++tail;
	return &fifo[t];

}
    6ed4:	4770      	bx	lr
    6ed6:	bf00      	nop
    6ed8:	10000a54 	.word	0x10000a54
    6edc:	10001178 	.word	0x10001178

00006ee0 <dequeue>:

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    6ee0:	4b08      	ldr	r3, [pc, #32]	; (6f04 <dequeue+0x24>)
    6ee2:	6818      	ldr	r0, [r3, #0]
	u8 t = tail & 0x7F;
    6ee4:	685a      	ldr	r2, [r3, #4]

}

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    6ee6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
    6eea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6eee:	4290      	cmp	r0, r2
    6ef0:	d006      	beq.n	6f00 <dequeue+0x20>
		return NULL;
	}

	++head;
    6ef2:	681a      	ldr	r2, [r3, #0]
    6ef4:	3201      	adds	r2, #1
    6ef6:	601a      	str	r2, [r3, #0]
	return &fifo[h];
    6ef8:	4b03      	ldr	r3, [pc, #12]	; (6f08 <dequeue+0x28>)
    6efa:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    6efe:	4770      	bx	lr
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
		return NULL;
    6f00:	2000      	movs	r0, #0
	}

	++head;
	return &fifo[h];
}
    6f02:	4770      	bx	lr
    6f04:	10000a54 	.word	0x10000a54
    6f08:	10001178 	.word	0x10001178

00006f0c <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    6f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6f0e:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    6f10:	f7ff ffe6 	bl	6ee0 <dequeue>
    6f14:	4b0d      	ldr	r3, [pc, #52]	; (6f4c <dequeue_send+0x40>)
	if (pkt != NULL) {
    6f16:	4604      	mov	r4, r0
    6f18:	b138      	cbz	r0, 6f2a <dequeue_send+0x1e>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    6f1a:	2082      	movs	r0, #130	; 0x82
    6f1c:	4621      	mov	r1, r4
    6f1e:	2240      	movs	r2, #64	; 0x40

int dequeue_send(u32 clkn)
{
	usb_pkt_rx *pkt = dequeue();
	if (pkt != NULL) {
		last_usb_pkt = clkn;
    6f20:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    6f22:	f001 fb77 	bl	8614 <USBHwEPWrite>
		return 1;
    6f26:	2001      	movs	r0, #1
    6f28:	e00e      	b.n	6f48 <dequeue_send+0x3c>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    6f2a:	689a      	ldr	r2, [r3, #8]
    6f2c:	4908      	ldr	r1, [pc, #32]	; (6f50 <dequeue_send+0x44>)
    6f2e:	1aaa      	subs	r2, r5, r2
    6f30:	428a      	cmp	r2, r1
    6f32:	d908      	bls.n	6f46 <dequeue_send+0x3a>
			u8 pkt_type = KEEP_ALIVE;
    6f34:	2203      	movs	r2, #3
    6f36:	a902      	add	r1, sp, #8
    6f38:	f801 2d01 	strb.w	r2, [r1, #-1]!
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    6f3c:	2082      	movs	r0, #130	; 0x82
    6f3e:	2201      	movs	r2, #1
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
		return 1;
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
			u8 pkt_type = KEEP_ALIVE;
			last_usb_pkt = clkn;
    6f40:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    6f42:	f001 fb67 	bl	8614 <USBHwEPWrite>
		}
		return 0;
    6f46:	4620      	mov	r0, r4
	}
}
    6f48:	b003      	add	sp, #12
    6f4a:	bd30      	pop	{r4, r5, pc}
    6f4c:	10000a54 	.word	0x10000a54
    6f50:	00061a80 	.word	0x00061a80

00006f54 <handle_usb>:

void handle_usb(u32 clkn)
{
    6f54:	b538      	push	{r3, r4, r5, lr}
    6f56:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    6f58:	2082      	movs	r0, #130	; 0x82
    6f5a:	f001 fb35 	bl	85c8 <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    6f5e:	0681      	lsls	r1, r0, #26
void handle_usb(u32 clkn)
{
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    6f60:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    6f62:	d402      	bmi.n	6f6a <handle_usb+0x16>
		dequeue_send(clkn);
    6f64:	4620      	mov	r0, r4
    6f66:	f7ff ffd1 	bl	6f0c <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    6f6a:	066a      	lsls	r2, r5, #25
    6f6c:	d402      	bmi.n	6f74 <handle_usb+0x20>
		dequeue_send(clkn);
    6f6e:	4620      	mov	r0, r4
    6f70:	f7ff ffcc 	bl	6f0c <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    6f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!(epstat & EPSTAT_B2FULL)) {
		dequeue_send(clkn);
	}

	/* polled "interrupt" */
	USBHwISR();
    6f78:	f001 bbb8 	b.w	86ec <USBHwISR>

00006f7c <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    6f7c:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    6f7e:	229e      	movs	r2, #158	; 0x9e
    6f80:	4807      	ldr	r0, [pc, #28]	; (6fa0 <rssi_reset+0x24>)
    6f82:	2100      	movs	r1, #0
    6f84:	f7fd f954 	bl	4230 <memset>

	rssi_count = 0;
    6f88:	4a06      	ldr	r2, [pc, #24]	; (6fa4 <rssi_reset+0x28>)
    6f8a:	2300      	movs	r3, #0
    6f8c:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    6f8e:	4a06      	ldr	r2, [pc, #24]	; (6fa8 <rssi_reset+0x2c>)
    6f90:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    6f92:	4b06      	ldr	r3, [pc, #24]	; (6fac <rssi_reset+0x30>)
    6f94:	2280      	movs	r2, #128	; 0x80
    6f96:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    6f98:	4b05      	ldr	r3, [pc, #20]	; (6fb0 <rssi_reset+0x34>)
    6f9a:	227f      	movs	r2, #127	; 0x7f
    6f9c:	701a      	strb	r2, [r3, #0]
    6f9e:	bd08      	pop	{r3, pc}
    6fa0:	10000a60 	.word	0x10000a60
    6fa4:	10001046 	.word	0x10001046
    6fa8:	10003280 	.word	0x10003280
    6fac:	10000ba8 	.word	0x10000ba8
    6fb0:	10000baa 	.word	0x10000baa

00006fb4 <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    6fb4:	4b0b      	ldr	r3, [pc, #44]	; (6fe4 <rssi_add+0x30>)
    6fb6:	f993 2000 	ldrsb.w	r2, [r3]
    6fba:	4290      	cmp	r0, r2
    6fbc:	bfa8      	it	ge
    6fbe:	4602      	movge	r2, r0
    6fc0:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    6fc2:	4b09      	ldr	r3, [pc, #36]	; (6fe8 <rssi_add+0x34>)
    6fc4:	f993 2000 	ldrsb.w	r2, [r3]
    6fc8:	4290      	cmp	r0, r2
    6fca:	bfb8      	it	lt
    6fcc:	4602      	movlt	r2, r0
    6fce:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    6fd0:	4b06      	ldr	r3, [pc, #24]	; (6fec <rssi_add+0x38>)
    6fd2:	681a      	ldr	r2, [r3, #0]
    6fd4:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    6fd8:	6018      	str	r0, [r3, #0]
	rssi_count += 1;
    6fda:	4b05      	ldr	r3, [pc, #20]	; (6ff0 <rssi_add+0x3c>)
    6fdc:	781a      	ldrb	r2, [r3, #0]
    6fde:	3201      	adds	r2, #1
    6fe0:	701a      	strb	r2, [r3, #0]
    6fe2:	4770      	bx	lr
    6fe4:	10000ba8 	.word	0x10000ba8
    6fe8:	10000baa 	.word	0x10000baa
    6fec:	10003280 	.word	0x10003280
    6ff0:	10001046 	.word	0x10001046

00006ff4 <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    6ff4:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    6ff6:	f640 1362 	movw	r3, #2402	; 0x962
    6ffa:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    6ffe:	bf38      	it	cc
    7000:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    7002:	4b0d      	ldr	r3, [pc, #52]	; (7038 <rssi_iir_update+0x44>)
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;

	int i = channel - 2402;
    7004:	f6a0 1062 	subw	r0, r0, #2402	; 0x962

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    7008:	781b      	ldrb	r3, [r3, #0]
    700a:	b123      	cbz	r3, 7016 <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    700c:	4a0b      	ldr	r2, [pc, #44]	; (703c <rssi_iir_update+0x48>)
    700e:	6812      	ldr	r2, [r2, #0]
    7010:	3280      	adds	r2, #128	; 0x80
    7012:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7016:	2403      	movs	r4, #3
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7018:	4a09      	ldr	r2, [pc, #36]	; (7040 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    701a:	4363      	muls	r3, r4
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    701c:	f932 1010 	ldrsh.w	r1, [r2, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7020:	24fd      	movs	r4, #253	; 0xfd
    7022:	fb04 3301 	mla	r3, r4, r1, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    7026:	f44f 7180 	mov.w	r1, #256	; 0x100
    702a:	3380      	adds	r3, #128	; 0x80
    702c:	fb93 f3f1 	sdiv	r3, r3, r1
    7030:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    7034:	bd10      	pop	{r4, pc}
    7036:	bf00      	nop
    7038:	10001046 	.word	0x10001046
    703c:	10003280 	.word	0x10003280
    7040:	10000a60 	.word	0x10000a60

00007044 <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    7044:	f640 1362 	movw	r3, #2402	; 0x962
    7048:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    704c:	bf38      	it	cc
    704e:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    7050:	4a05      	ldr	r2, [pc, #20]	; (7068 <rssi_get_avg+0x24>)
    7052:	f6a0 1362 	subw	r3, r0, #2402	; 0x962
    7056:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
    705a:	f44f 7380 	mov.w	r3, #256	; 0x100
    705e:	3080      	adds	r0, #128	; 0x80
    7060:	fb90 f0f3 	sdiv	r0, r0, r3
}
    7064:	b240      	sxtb	r0, r0
    7066:	4770      	bx	lr
    7068:	10000a60 	.word	0x10000a60

0000706c <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    706c:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    706e:	4d15      	ldr	r5, [pc, #84]	; (70c4 <cs_threshold_calc_and_set+0x58>)
    7070:	782c      	ldrb	r4, [r5, #0]
    7072:	b263      	sxtb	r3, r4
    7074:	2b00      	cmp	r3, #0
    7076:	dd05      	ble.n	7084 <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    7078:	f7ff ffe4 	bl	7044 <rssi_get_avg>
		level = rssi - 54 + cs_threshold_req;
    707c:	782c      	ldrb	r4, [r5, #0]
    707e:	3c36      	subs	r4, #54	; 0x36
    7080:	4420      	add	r0, r4
    7082:	b2c4      	uxtb	r4, r0
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
	level = level > -20 ? -20 : level;
    7084:	f06f 0377 	mvn.w	r3, #119	; 0x77
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
    7088:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    708a:	429c      	cmp	r4, r3
    708c:	bfb8      	it	lt
    708e:	461c      	movlt	r4, r3
    7090:	f06f 0313 	mvn.w	r3, #19
    7094:	429c      	cmp	r4, r3
    7096:	bfa8      	it	ge
    7098:	461c      	movge	r4, r3
    709a:	b2e4      	uxtb	r4, r4
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    709c:	f104 0138 	add.w	r1, r4, #56	; 0x38
    70a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    70a4:	2006      	movs	r0, #6
    70a6:	f041 0103 	orr.w	r1, r1, #3
    70aa:	f000 ff62 	bl	7f72 <cc2400_set>
	cs_threshold_cur = level;
    70ae:	4b06      	ldr	r3, [pc, #24]	; (70c8 <cs_threshold_calc_and_set+0x5c>)
    70b0:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    70b2:	b264      	sxtb	r4, r4
    70b4:	f114 0f77 	cmn.w	r4, #119	; 0x77
    70b8:	4b04      	ldr	r3, [pc, #16]	; (70cc <cs_threshold_calc_and_set+0x60>)
    70ba:	bfac      	ite	ge
    70bc:	2400      	movge	r4, #0
    70be:	2401      	movlt	r4, #1
    70c0:	701c      	strb	r4, [r3, #0]
    70c2:	bd38      	pop	{r3, r4, r5, pc}
    70c4:	10001048 	.word	0x10001048
    70c8:	100010bc 	.word	0x100010bc
    70cc:	10000d10 	.word	0x10000d10

000070d0 <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    70d0:	4b07      	ldr	r3, [pc, #28]	; (70f0 <cs_trigger_enable+0x20>)
    70d2:	2200      	movs	r2, #0
    70d4:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    70d6:	4b07      	ldr	r3, [pc, #28]	; (70f4 <cs_trigger_enable+0x24>)
    70d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    70dc:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    70de:	4b06      	ldr	r3, [pc, #24]	; (70f8 <cs_trigger_enable+0x28>)
    70e0:	2204      	movs	r2, #4
    70e2:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    70e4:	689a      	ldr	r2, [r3, #8]
    70e6:	f042 0204 	orr.w	r2, r2, #4
    70ea:	609a      	str	r2, [r3, #8]
    70ec:	4770      	bx	lr
    70ee:	bf00      	nop
    70f0:	100010bd 	.word	0x100010bd
    70f4:	e000e100 	.word	0xe000e100
    70f8:	400280ac 	.word	0x400280ac

000070fc <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    70fc:	4b07      	ldr	r3, [pc, #28]	; (711c <cs_trigger_disable+0x20>)
    70fe:	681a      	ldr	r2, [r3, #0]
    7100:	f022 0204 	bic.w	r2, r2, #4
    7104:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7106:	2204      	movs	r2, #4
    7108:	f843 2c08 	str.w	r2, [r3, #-8]
	ICER0 = ICER0_ICE_EINT3;
    710c:	4b04      	ldr	r3, [pc, #16]	; (7120 <cs_trigger_disable+0x24>)
    710e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7112:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    7114:	4b03      	ldr	r3, [pc, #12]	; (7124 <cs_trigger_disable+0x28>)
    7116:	2200      	movs	r2, #0
    7118:	701a      	strb	r2, [r3, #0]
    711a:	4770      	bx	lr
    711c:	400280b4 	.word	0x400280b4
    7120:	e000e180 	.word	0xe000e180
    7124:	100010bd 	.word	0x100010bd

00007128 <cs_reset>:
}

void cs_reset(void)
{
    7128:	b508      	push	{r3, lr}
	cs_trigger_disable();
    712a:	f7ff ffe7 	bl	70fc <cs_trigger_disable>

	cs_no_squelch = 0;
    712e:	4b04      	ldr	r3, [pc, #16]	; (7140 <cs_reset+0x18>)
    7130:	2200      	movs	r2, #0
    7132:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    7134:	4a03      	ldr	r2, [pc, #12]	; (7144 <cs_reset+0x1c>)
    7136:	2388      	movs	r3, #136	; 0x88
    7138:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    713a:	4a03      	ldr	r2, [pc, #12]	; (7148 <cs_reset+0x20>)
    713c:	7013      	strb	r3, [r2, #0]
    713e:	bd08      	pop	{r3, pc}
    7140:	10000d10 	.word	0x10000d10
    7144:	10001048 	.word	0x10001048
    7148:	100010bc 	.word	0x100010bc

0000714c <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    714c:	4b0a      	ldr	r3, [pc, #40]	; (7178 <clkn_stop+0x2c>)
    714e:	2202      	movs	r2, #2
    7150:	601a      	str	r2, [r3, #0]

	clkn = 0;
    7152:	4a0a      	ldr	r2, [pc, #40]	; (717c <clkn_stop+0x30>)
    7154:	2300      	movs	r3, #0
    7156:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    7158:	4a09      	ldr	r2, [pc, #36]	; (7180 <clkn_stop+0x34>)
    715a:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    715c:	4a09      	ldr	r2, [pc, #36]	; (7184 <clkn_stop+0x38>)
    715e:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    7160:	4a09      	ldr	r2, [pc, #36]	; (7188 <clkn_stop+0x3c>)
    7162:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    7164:	4a09      	ldr	r2, [pc, #36]	; (718c <clkn_stop+0x40>)
    7166:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    7168:	4a09      	ldr	r2, [pc, #36]	; (7190 <clkn_stop+0x44>)
    716a:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    716c:	4a09      	ldr	r2, [pc, #36]	; (7194 <clkn_stop+0x48>)
    716e:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    7170:	4a09      	ldr	r2, [pc, #36]	; (7198 <clkn_stop+0x4c>)
    7172:	6013      	str	r3, [r2, #0]
    7174:	4770      	bx	lr
    7176:	bf00      	nop
    7178:	40004004 	.word	0x40004004
    717c:	10000bc4 	.word	0x10000bc4
    7180:	10000ba0 	.word	0x10000ba0
    7184:	10000bb8 	.word	0x10000bb8
    7188:	10000d12 	.word	0x10000d12
    718c:	10001044 	.word	0x10001044
    7190:	10000bc0 	.word	0x10000bc0
    7194:	10000bbc 	.word	0x10000bbc
    7198:	1000107c 	.word	0x1000107c

0000719c <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    719c:	4b01      	ldr	r3, [pc, #4]	; (71a4 <clkn_start+0x8>)
    719e:	2201      	movs	r2, #1
    71a0:	601a      	str	r2, [r3, #0]
    71a2:	4770      	bx	lr
    71a4:	40004004 	.word	0x40004004

000071a8 <clkn_init>:
}

void clkn_init()
{
    71a8:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    71aa:	f7ff ffcf 	bl	714c <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    71ae:	4b06      	ldr	r3, [pc, #24]	; (71c8 <clkn_init+0x20>)
    71b0:	2204      	movs	r2, #4
    71b2:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    71b4:	f502 6243 	add.w	r2, r2, #3120	; 0xc30
    71b8:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    71ba:	2203      	movs	r2, #3
    71bc:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    71be:	4b03      	ldr	r3, [pc, #12]	; (71cc <clkn_init+0x24>)
    71c0:	2202      	movs	r2, #2
    71c2:	601a      	str	r2, [r3, #0]
    71c4:	bd08      	pop	{r3, pc}
    71c6:	bf00      	nop
    71c8:	4000400c 	.word	0x4000400c
    71cc:	e000e100 	.word	0xe000e100

000071d0 <dma_disable>:
{
	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    71d0:	4b15      	ldr	r3, [pc, #84]	; (7228 <dma_disable+0x58>)
    71d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    71d6:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    71d8:	4a14      	ldr	r2, [pc, #80]	; (722c <dma_disable+0x5c>)
    71da:	2300      	movs	r3, #0
    71dc:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    71de:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    71e0:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    71e2:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    71e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    71e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    71ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    71f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    71f4:	23ff      	movs	r3, #255	; 0xff
    71f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    71fa:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    71fc:	6093      	str	r3, [r2, #8]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    71fe:	4b0c      	ldr	r3, [pc, #48]	; (7230 <dma_disable+0x60>)
    7200:	681a      	ldr	r2, [r3, #0]
    7202:	f022 0201 	bic.w	r2, r2, #1
    7206:	601a      	str	r2, [r3, #0]
	while (DMACConfig & DMACConfig_E);
    7208:	681a      	ldr	r2, [r3, #0]
    720a:	f012 0201 	ands.w	r2, r2, #1
    720e:	d1fb      	bne.n	7208 <dma_disable+0x38>

	/* reset interrupt counters */
	rx_tc = 0;
    7210:	4b08      	ldr	r3, [pc, #32]	; (7234 <dma_disable+0x64>)
    7212:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    7214:	4b08      	ldr	r3, [pc, #32]	; (7238 <dma_disable+0x68>)
    7216:	601a      	str	r2, [r3, #0]

	active_rxbuf = &rxbuf1[0];
    7218:	4a08      	ldr	r2, [pc, #32]	; (723c <dma_disable+0x6c>)
    721a:	4b09      	ldr	r3, [pc, #36]	; (7240 <dma_disable+0x70>)
    721c:	601a      	str	r2, [r3, #0]
	idle_rxbuf = &rxbuf2[0];
    721e:	4a09      	ldr	r2, [pc, #36]	; (7244 <dma_disable+0x74>)
    7220:	4b09      	ldr	r3, [pc, #36]	; (7248 <dma_disable+0x78>)
    7222:	601a      	str	r2, [r3, #0]
    7224:	4770      	bx	lr
    7226:	bf00      	nop
    7228:	e000e180 	.word	0xe000e180
    722c:	50004110 	.word	0x50004110
    7230:	50004030 	.word	0x50004030
    7234:	10000ba4 	.word	0x10000ba4
    7238:	100010b8 	.word	0x100010b8
    723c:	10001085 	.word	0x10001085
    7240:	10000c04 	.word	0x10000c04
    7244:	10001049 	.word	0x10001049
    7248:	10000d20 	.word	0x10000d20

0000724c <dma_init>:
}

void dma_init()
{
    724c:	b508      	push	{r3, lr}
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    724e:	4b14      	ldr	r3, [pc, #80]	; (72a0 <dma_init+0x54>)
    7250:	681a      	ldr	r2, [r3, #0]
    7252:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    7256:	601a      	str	r2, [r3, #0]

	dma_disable();
    7258:	f7ff ffba 	bl	71d0 <dma_disable>

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    725c:	4b11      	ldr	r3, [pc, #68]	; (72a4 <dma_init+0x58>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    725e:	4a12      	ldr	r2, [pc, #72]	; (72a8 <dma_init+0x5c>)
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7260:	4812      	ldr	r0, [pc, #72]	; (72ac <dma_init+0x60>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7262:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7264:	4a12      	ldr	r2, [pc, #72]	; (72b0 <dma_init+0x64>)
	rx_dma_lli1.control = (DMA_SIZE) |
    7266:	4913      	ldr	r1, [pc, #76]	; (72b4 <dma_init+0x68>)
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    7268:	6010      	str	r0, [r2, #0]
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    726a:	6018      	str	r0, [r3, #0]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    726c:	4812      	ldr	r0, [pc, #72]	; (72b8 <dma_init+0x6c>)
	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    726e:	609a      	str	r2, [r3, #8]
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
    7270:	60d1      	str	r1, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7272:	6050      	str	r0, [r2, #4]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    7274:	6093      	str	r3, [r2, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7276:	4a11      	ldr	r2, [pc, #68]	; (72bc <dma_init+0x70>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    7278:	60d9      	str	r1, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    727a:	2101      	movs	r1, #1
    727c:	6011      	str	r1, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
    727e:	6811      	ldr	r1, [r2, #0]
    7280:	07c9      	lsls	r1, r1, #31
    7282:	d5fc      	bpl.n	727e <dma_init+0x32>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    7284:	681a      	ldr	r2, [r3, #0]
    7286:	490e      	ldr	r1, [pc, #56]	; (72c0 <dma_init+0x74>)
    7288:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    728a:	685a      	ldr	r2, [r3, #4]
    728c:	604a      	str	r2, [r1, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    728e:	689a      	ldr	r2, [r3, #8]
    7290:	608a      	str	r2, [r1, #8]
	DMACC0Control = rx_dma_lli1.control;
    7292:	68da      	ldr	r2, [r3, #12]
    7294:	4b0b      	ldr	r3, [pc, #44]	; (72c4 <dma_init+0x78>)
    7296:	601a      	str	r2, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    7298:	f24d 0206 	movw	r2, #53254	; 0xd006
    729c:	605a      	str	r2, [r3, #4]
    729e:	bd08      	pop	{r3, pc}
    72a0:	400fc0c4 	.word	0x400fc0c4
    72a4:	10003344 	.word	0x10003344
    72a8:	10001085 	.word	0x10001085
    72ac:	40030008 	.word	0x40030008
    72b0:	10003334 	.word	0x10003334
    72b4:	88009032 	.word	0x88009032
    72b8:	10001049 	.word	0x10001049
    72bc:	50004030 	.word	0x50004030
    72c0:	50004100 	.word	0x50004100
    72c4:	5000410c 	.word	0x5000410c

000072c8 <dma_init_le>:
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */
}

void dma_init_le()
{
    72c8:	b508      	push	{r3, lr}
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    72ca:	4b1a      	ldr	r3, [pc, #104]	; (7334 <dma_init_le+0x6c>)
    72cc:	681a      	ldr	r2, [r3, #0]
    72ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    72d2:	601a      	str	r2, [r3, #0]

	dma_disable();
    72d4:	f7ff ff7c 	bl	71d0 <dma_disable>

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    72d8:	4b17      	ldr	r3, [pc, #92]	; (7338 <dma_init_le+0x70>)
    72da:	2201      	movs	r2, #1
    72dc:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    72de:	681a      	ldr	r2, [r3, #0]
    72e0:	07d0      	lsls	r0, r2, #31
    72e2:	d5fc      	bpl.n	72de <dma_init_le+0x16>
    72e4:	4b15      	ldr	r3, [pc, #84]	; (733c <dma_init_le+0x74>)
    72e6:	2200      	movs	r2, #0

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    72e8:	4915      	ldr	r1, [pc, #84]	; (7340 <dma_init_le+0x78>)
    72ea:	f843 1c10 	str.w	r1, [r3, #-16]
    72ee:	4915      	ldr	r1, [pc, #84]	; (7344 <dma_init_le+0x7c>)
    72f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    72f4:	f843 1c0c 	str.w	r1, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    72f8:	2a0a      	cmp	r2, #10
    72fa:	bf14      	ite	ne
    72fc:	4619      	movne	r1, r3
    72fe:	2100      	moveq	r1, #0
    7300:	f843 1c08 	str.w	r1, [r3, #-8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7304:	3201      	adds	r2, #1
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7306:	4910      	ldr	r1, [pc, #64]	; (7348 <dma_init_le+0x80>)

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7308:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    730a:	f843 1c04 	str.w	r1, [r3, #-4]
    730e:	f103 0310 	add.w	r3, r3, #16

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7312:	d1e9      	bne.n	72e8 <dma_init_le+0x20>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    7314:	4b0d      	ldr	r3, [pc, #52]	; (734c <dma_init_le+0x84>)
    7316:	490e      	ldr	r1, [pc, #56]	; (7350 <dma_init_le+0x88>)
    7318:	681a      	ldr	r2, [r3, #0]
    731a:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    731c:	685a      	ldr	r2, [r3, #4]
    731e:	604a      	str	r2, [r1, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7320:	689a      	ldr	r2, [r3, #8]
    7322:	608a      	str	r2, [r1, #8]
	DMACC0Control = le_dma_lli[0].control;
    7324:	68da      	ldr	r2, [r3, #12]
    7326:	4b0b      	ldr	r3, [pc, #44]	; (7354 <dma_init_le+0x8c>)
    7328:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    732a:	f24d 0206 	movw	r2, #53254	; 0xd006
    732e:	605a      	str	r2, [r3, #4]
    7330:	bd08      	pop	{r3, pc}
    7332:	bf00      	nop
    7334:	400fc0c4 	.word	0x400fc0c4
    7338:	50004030 	.word	0x50004030
    733c:	10003294 	.word	0x10003294
    7340:	40030008 	.word	0x40030008
    7344:	10001085 	.word	0x10001085
    7348:	88001004 	.word	0x88001004
    734c:	10003284 	.word	0x10003284
    7350:	50004100 	.word	0x50004100
    7354:	5000410c 	.word	0x5000410c

00007358 <dio_ssp_start>:


void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    7358:	4a0d      	ldr	r2, [pc, #52]	; (7390 <dio_ssp_start+0x38>)
    735a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    735e:	6013      	str	r3, [r2, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7360:	4a0c      	ldr	r2, [pc, #48]	; (7394 <dio_ssp_start+0x3c>)
    7362:	6811      	ldr	r1, [r2, #0]
    7364:	f041 0101 	orr.w	r1, r1, #1
    7368:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    736a:	f852 1c20 	ldr.w	r1, [r2, #-32]
    736e:	f041 0102 	orr.w	r1, r1, #2
    7372:	f842 1c20 	str.w	r1, [r2, #-32]


static void dma_enable(void)
{
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    7376:	4a08      	ldr	r2, [pc, #32]	; (7398 <dio_ssp_start+0x40>)
    7378:	6811      	ldr	r1, [r2, #0]
    737a:	f041 0101 	orr.w	r1, r1, #1
    737e:	6011      	str	r1, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    7380:	4a06      	ldr	r2, [pc, #24]	; (739c <dio_ssp_start+0x44>)
    7382:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7386:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;

	dma_enable();

	/* activate slave select pin */
	DIO_SSEL_CLR;
    7388:	4a05      	ldr	r2, [pc, #20]	; (73a0 <dio_ssp_start+0x48>)
    738a:	6013      	str	r3, [r2, #0]
    738c:	4770      	bx	lr
    738e:	bf00      	nop
    7390:	2009c098 	.word	0x2009c098
    7394:	40030024 	.word	0x40030024
    7398:	50004110 	.word	0x50004110
    739c:	e000e100 	.word	0xe000e100
    73a0:	2009c09c 	.word	0x2009c09c

000073a4 <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    73a4:	4b08      	ldr	r3, [pc, #32]	; (73c8 <dio_ssp_stop+0x24>)
    73a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    73aa:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    73ac:	4b07      	ldr	r3, [pc, #28]	; (73cc <dio_ssp_stop+0x28>)
    73ae:	681a      	ldr	r2, [r3, #0]
    73b0:	f022 0201 	bic.w	r2, r2, #1
    73b4:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    73b6:	f853 2c20 	ldr.w	r2, [r3, #-32]
    73ba:	f022 0202 	bic.w	r2, r2, #2
    73be:	f843 2c20 	str.w	r2, [r3, #-32]

	dma_disable();
    73c2:	f7ff bf05 	b.w	71d0 <dma_disable>
    73c6:	bf00      	nop
    73c8:	2009c098 	.word	0x2009c098
    73cc:	40030024 	.word	0x40030024

000073d0 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    73d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73d4:	b096      	sub	sp, #88	; 0x58
    73d6:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    73d8:	2315      	movs	r3, #21
    73da:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	txbuf[1] = 0; // request
    73de:	2300      	movs	r3, #0
    73e0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    73e4:	4681      	mov	r9, r0

	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
    73e6:	233a      	movs	r3, #58	; 0x3a
    73e8:	f107 0058 	add.w	r0, r7, #88	; 0x58
    73ec:	f840 3d58 	str.w	r3, [r0, #-88]!
	iap_entry(command, result);
    73f0:	4b94      	ldr	r3, [pc, #592]	; (7644 <cc2400_rangetest+0x274>)
    73f2:	4638      	mov	r0, r7
    73f4:	f107 0114 	add.w	r1, r7, #20
    73f8:	681b      	ldr	r3, [r3, #0]
    73fa:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    73fc:	7d3a      	ldrb	r2, [r7, #20]
    73fe:	46ea      	mov	sl, sp
    7400:	2a00      	cmp	r2, #0
    7402:	f040 811b 	bne.w	763c <cc2400_rangetest+0x26c>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    7406:	69bb      	ldr	r3, [r7, #24]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7408:	2012      	movs	r0, #18
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    740a:	0e19      	lsrs	r1, r3, #24
    740c:	f887 1042 	strb.w	r1, [r7, #66]	; 0x42
	txbuf[3] = (result[1] >> 16) & 0xFF;
    7410:	0c19      	lsrs	r1, r3, #16
    7412:	f887 1043 	strb.w	r1, [r7, #67]	; 0x43
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
    7416:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    741a:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    741c:	69fb      	ldr	r3, [r7, #28]
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    741e:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    7422:	0e19      	lsrs	r1, r3, #24
    7424:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	txbuf[7] = (result[2] >> 16) & 0xFF;
    7428:	0c19      	lsrs	r1, r3, #16
    742a:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
    742e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    7432:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    7434:	6a3b      	ldr	r3, [r7, #32]
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    7436:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    743a:	0e19      	lsrs	r1, r3, #24
    743c:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[11] = (result[3] >> 16) & 0xFF;
    7440:	0c19      	lsrs	r1, r3, #16
    7442:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
    7446:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    744a:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    744e:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    7452:	0e19      	lsrs	r1, r3, #24
    7454:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[15] = (result[4] >> 16) & 0xFF;
    7458:	0c19      	lsrs	r1, r3, #16
    745a:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[16] = (result[4] >> 8) & 0xFF;
    745e:	0a19      	lsrs	r1, r3, #8
    7460:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[17] = result[4] & 0xFF;
    7464:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7468:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
    746c:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
    746e:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
	txbuf[19] = 0; // request number
    7472:	f887 2053 	strb.w	r2, [r7, #83]	; 0x53
	txbuf[20] = 0xff; // reply pa
    7476:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	txbuf[21] = 0xff; // reply number
    747a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    747e:	f000 fd78 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    7482:	2014      	movs	r0, #20
    7484:	f241 314b 	movw	r1, #4939	; 0x134b
    7488:	f000 fd73 	bl	7f72 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    748c:	2020      	movs	r0, #32
    748e:	f640 51f1 	movw	r1, #3569	; 0xdf1
    7492:	f000 fd6e 	bl	7f72 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    7496:	f8b9 1000 	ldrh.w	r1, [r9]
    749a:	2002      	movs	r0, #2
    749c:	b289      	uxth	r1, r1
    749e:	f000 fd68 	bl	7f72 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    74a2:	202d      	movs	r0, #45	; 0x2d
    74a4:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    74a8:	f000 fd63 	bl	7f72 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    74ac:	202c      	movs	r0, #44	; 0x2c
    74ae:	f241 5184 	movw	r1, #5508	; 0x1584
    74b2:	f000 fd5e 	bl	7f72 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    74b6:	2005      	movs	r0, #5
    74b8:	2108      	movs	r1, #8
    74ba:	f000 fd5a 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    74be:	2003      	movs	r0, #3
    74c0:	2129      	movs	r1, #41	; 0x29
    74c2:	f000 fd56 	bl	7f72 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    74c6:	f000 fdf7 	bl	80b8 <cc2400_status>
    74ca:	0646      	lsls	r6, r0, #25
    74cc:	d5fb      	bpl.n	74c6 <cc2400_rangetest+0xf6>
	cc2400_strobe(SFSON);
    74ce:	2061      	movs	r0, #97	; 0x61
    74d0:	f000 fdf9 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    74d4:	f000 fdf0 	bl	80b8 <cc2400_status>
    74d8:	0745      	lsls	r5, r0, #29
    74da:	d5fb      	bpl.n	74d4 <cc2400_rangetest+0x104>
	TXLED_SET;
    74dc:	4b5a      	ldr	r3, [pc, #360]	; (7648 <cc2400_rangetest+0x278>)
    74de:	f44f 7280 	mov.w	r2, #256	; 0x100
    74e2:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    74e4:	2280      	movs	r2, #128	; 0x80
    74e6:	621a      	str	r2, [r3, #32]
#endif
	for (pa = 0; pa < 8; pa++) {
    74e8:	2400      	movs	r4, #0
		cc2400_set(FREND, 8 | pa);
    74ea:	2005      	movs	r0, #5
    74ec:	f044 0108 	orr.w	r1, r4, #8
    74f0:	f000 fd3f 	bl	7f72 <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    74f4:	2500      	movs	r5, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
    74f6:	f887 4052 	strb.w	r4, [r7, #82]	; 0x52
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
    74fa:	f887 5053 	strb.w	r5, [r7, #83]	; 0x53
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    74fe:	200e      	movs	r0, #14
    7500:	f000 fd2e 	bl	7f60 <cc2400_get>
    7504:	f000 001f 	and.w	r0, r0, #31
    7508:	280f      	cmp	r0, #15
    750a:	d1f8      	bne.n	74fe <cc2400_rangetest+0x12e>
    750c:	2600      	movs	r6, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    750e:	f107 0840 	add.w	r8, r7, #64	; 0x40
    7512:	f818 1006 	ldrb.w	r1, [r8, r6]
    7516:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7518:	3601      	adds	r6, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    751a:	f000 fd38 	bl	7f8e <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    751e:	2e16      	cmp	r6, #22
    7520:	d1f5      	bne.n	750e <cc2400_rangetest+0x13e>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    7522:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7524:	3501      	adds	r5, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    7526:	f000 fdce 	bl	80c6 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    752a:	2d10      	cmp	r5, #16
    752c:	d1e5      	bne.n	74fa <cc2400_rangetest+0x12a>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    752e:	3401      	adds	r4, #1
    7530:	b2e4      	uxtb	r4, r4
    7532:	2c08      	cmp	r4, #8
    7534:	d1d9      	bne.n	74ea <cc2400_rangetest+0x11a>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7536:	200e      	movs	r0, #14
    7538:	f000 fd12 	bl	7f60 <cc2400_get>
    753c:	f000 001f 	and.w	r0, r0, #31
    7540:	280f      	cmp	r0, #15
    7542:	d1f8      	bne.n	7536 <cc2400_rangetest+0x166>
	TXLED_CLR;
    7544:	4b41      	ldr	r3, [pc, #260]	; (764c <cc2400_rangetest+0x27c>)
    7546:	f44f 7280 	mov.w	r2, #256	; 0x100
    754a:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    754c:	2064      	movs	r0, #100	; 0x64
    754e:	f000 fdba 	bl	80c6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7552:	f000 fdb1 	bl	80b8 <cc2400_status>
    7556:	0744      	lsls	r4, r0, #29
    7558:	d4fb      	bmi.n	7552 <cc2400_rangetest+0x182>
	cc2400_set(FSDIV, *chan_ptr - 1);
    755a:	f8b9 1000 	ldrh.w	r1, [r9]
    755e:	2002      	movs	r0, #2
    7560:	b289      	uxth	r1, r1
    7562:	3901      	subs	r1, #1
    7564:	b289      	uxth	r1, r1
    7566:	f000 fd04 	bl	7f72 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    756a:	f000 fda5 	bl	80b8 <cc2400_status>
    756e:	0640      	lsls	r0, r0, #25
    7570:	d5fb      	bpl.n	756a <cc2400_rangetest+0x19a>
	cc2400_strobe(SFSON);
    7572:	2061      	movs	r0, #97	; 0x61
    7574:	f000 fda7 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7578:	f000 fd9e 	bl	80b8 <cc2400_status>
    757c:	0741      	lsls	r1, r0, #29
    757e:	d5fb      	bpl.n	7578 <cc2400_rangetest+0x1a8>
	RXLED_SET;
    7580:	4b31      	ldr	r3, [pc, #196]	; (7648 <cc2400_rangetest+0x278>)
    7582:	2210      	movs	r2, #16
    7584:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7586:	200e      	movs	r0, #14
    7588:	f000 fcea 	bl	7f60 <cc2400_get>
    758c:	f000 001f 	and.w	r0, r0, #31
    7590:	280f      	cmp	r0, #15
    7592:	d1f8      	bne.n	7586 <cc2400_rangetest+0x1b6>
		cc2400_strobe(SRX);
    7594:	2062      	movs	r0, #98	; 0x62
    7596:	f000 fd96 	bl	80c6 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    759a:	f000 fd8d 	bl	80b8 <cc2400_status>
    759e:	06c2      	lsls	r2, r0, #27
    75a0:	d5fb      	bpl.n	759a <cc2400_rangetest+0x1ca>
		USRLED_SET;
    75a2:	4b29      	ldr	r3, [pc, #164]	; (7648 <cc2400_rangetest+0x278>)
    75a4:	2202      	movs	r2, #2
    75a6:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    75a8:	2400      	movs	r4, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
    75aa:	2070      	movs	r0, #112	; 0x70
    75ac:	f000 fce6 	bl	7f7c <cc2400_get8>
    75b0:	f107 0528 	add.w	r5, r7, #40	; 0x28
    75b4:	5528      	strb	r0, [r5, r4]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    75b6:	3401      	adds	r4, #1
    75b8:	2c16      	cmp	r4, #22
    75ba:	d1f6      	bne.n	75aa <cc2400_rangetest+0x1da>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    75bc:	f000 fd7c 	bl	80b8 <cc2400_status>
    75c0:	0703      	lsls	r3, r0, #28
    75c2:	d402      	bmi.n	75ca <cc2400_rangetest+0x1fa>
			break;
		USRLED_CLR;
    75c4:	2202      	movs	r2, #2
    75c6:	4b21      	ldr	r3, [pc, #132]	; (764c <cc2400_rangetest+0x27c>)
    75c8:	e7dc      	b.n	7584 <cc2400_rangetest+0x1b4>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    75ca:	200e      	movs	r0, #14
    75cc:	f000 fcc8 	bl	7f60 <cc2400_get>
    75d0:	f000 001f 	and.w	r0, r0, #31
    75d4:	280f      	cmp	r0, #15
    75d6:	d1f8      	bne.n	75ca <cc2400_rangetest+0x1fa>
	cc2400_strobe(SRFOFF);
    75d8:	2064      	movs	r0, #100	; 0x64
    75da:	f000 fd74 	bl	80c6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    75de:	f000 fd6b 	bl	80b8 <cc2400_status>
    75e2:	f000 0004 	and.w	r0, r0, #4
    75e6:	f000 03ff 	and.w	r3, r0, #255	; 0xff
    75ea:	2800      	cmp	r0, #0
    75ec:	d1f7      	bne.n	75de <cc2400_rangetest+0x20e>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    75ee:	4a18      	ldr	r2, [pc, #96]	; (7650 <cc2400_rangetest+0x280>)
    75f0:	2180      	movs	r1, #128	; 0x80
    75f2:	6011      	str	r1, [r2, #0]
#endif
	RXLED_CLR;
    75f4:	2110      	movs	r1, #16
    75f6:	f842 1c20 	str.w	r1, [r2, #-32]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    75fa:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
    75fe:	4a15      	ldr	r2, [pc, #84]	; (7654 <cc2400_rangetest+0x284>)
    7600:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
    7602:	7050      	strb	r0, [r2, #1]
	rr.request_num = rxbuf[19];
    7604:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    7608:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
    760c:	7090      	strb	r0, [r2, #2]
	rr.reply_pa    = rxbuf[20];
    760e:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
    7612:	70d0      	strb	r0, [r2, #3]
	rr.reply_num   = rxbuf[21];
    7614:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    7618:	7110      	strb	r0, [r2, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
    761a:	5cec      	ldrb	r4, [r5, r3]
    761c:	f818 0003 	ldrb.w	r0, [r8, r3]
    7620:	4284      	cmp	r4, r0
    7622:	bf18      	it	ne
    7624:	1c99      	addne	r1, r3, #2
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    7626:	f103 0301 	add.w	r3, r3, #1
    762a:	bf18      	it	ne
    762c:	b2c9      	uxtbne	r1, r1
    762e:	2b12      	cmp	r3, #18
    7630:	d1f3      	bne.n	761a <cc2400_rangetest+0x24a>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    7632:	4b06      	ldr	r3, [pc, #24]	; (764c <cc2400_rangetest+0x27c>)
    7634:	7011      	strb	r1, [r2, #0]
    7636:	2202      	movs	r2, #2
    7638:	601a      	str	r2, [r3, #0]
    763a:	46d5      	mov	sp, sl
#endif
}
    763c:	3758      	adds	r7, #88	; 0x58
    763e:	46bd      	mov	sp, r7
    7640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7644:	000095dc 	.word	0x000095dc
    7648:	2009c038 	.word	0x2009c038
    764c:	2009c03c 	.word	0x2009c03c
    7650:	2009c05c 	.word	0x2009c05c
    7654:	10001080 	.word	0x10001080

00007658 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    7658:	b5f0      	push	{r4, r5, r6, r7, lr}
    765a:	b087      	sub	sp, #28
    765c:	4607      	mov	r7, r0
	u8 pa = 0;
	u8 buf[len];

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    765e:	2012      	movs	r0, #18
    7660:	f642 3122 	movw	r1, #11042	; 0x2b22
    7664:	f000 fc85 	bl	7f72 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    7668:	2014      	movs	r0, #20
    766a:	f241 314b 	movw	r1, #4939	; 0x134b
    766e:	f000 fc80 	bl	7f72 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    7672:	8839      	ldrh	r1, [r7, #0]
    7674:	2002      	movs	r0, #2
    7676:	b289      	uxth	r1, r1
    7678:	3901      	subs	r1, #1
    767a:	b289      	uxth	r1, r1
    767c:	f000 fc79 	bl	7f72 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    7680:	202d      	movs	r0, #45	; 0x2d
    7682:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    7686:	f000 fc74 	bl	7f72 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    768a:	202c      	movs	r0, #44	; 0x2c
    768c:	f241 5184 	movw	r1, #5508	; 0x1584
    7690:	f000 fc6f 	bl	7f72 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    7694:	2005      	movs	r0, #5
    7696:	2108      	movs	r1, #8
    7698:	f000 fc6b 	bl	7f72 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    769c:	2003      	movs	r0, #3
    769e:	2129      	movs	r1, #41	; 0x29
    76a0:	f000 fc67 	bl	7f72 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    76a4:	f000 fd08 	bl	80b8 <cc2400_status>
    76a8:	0643      	lsls	r3, r0, #25
    76aa:	d5fb      	bpl.n	76a4 <cc2400_repeater+0x4c>
		cc2400_strobe(SFSON);
    76ac:	2061      	movs	r0, #97	; 0x61
    76ae:	f000 fd0a 	bl	80c6 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    76b2:	f000 fd01 	bl	80b8 <cc2400_status>
    76b6:	0746      	lsls	r6, r0, #29
    76b8:	d5fb      	bpl.n	76b2 <cc2400_repeater+0x5a>
		RXLED_SET;
    76ba:	4b41      	ldr	r3, [pc, #260]	; (77c0 <cc2400_repeater+0x168>)
    76bc:	2210      	movs	r2, #16
    76be:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    76c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    76c4:	605a      	str	r2, [r3, #4]
		USRLED_CLR;
    76c6:	2202      	movs	r2, #2
    76c8:	605a      	str	r2, [r3, #4]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    76ca:	2280      	movs	r2, #128	; 0x80
    76cc:	621a      	str	r2, [r3, #32]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    76ce:	200e      	movs	r0, #14
    76d0:	f000 fc46 	bl	7f60 <cc2400_get>
    76d4:	f000 001f 	and.w	r0, r0, #31
    76d8:	280f      	cmp	r0, #15
    76da:	d1f8      	bne.n	76ce <cc2400_repeater+0x76>
			USRLED_CLR;
    76dc:	4b39      	ldr	r3, [pc, #228]	; (77c4 <cc2400_repeater+0x16c>)
    76de:	2202      	movs	r2, #2
    76e0:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    76e2:	2062      	movs	r0, #98	; 0x62
    76e4:	f000 fcef 	bl	80c6 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    76e8:	f000 fce6 	bl	80b8 <cc2400_status>
    76ec:	06c5      	lsls	r5, r0, #27
    76ee:	d5fb      	bpl.n	76e8 <cc2400_repeater+0x90>
			USRLED_SET;
    76f0:	4b33      	ldr	r3, [pc, #204]	; (77c0 <cc2400_repeater+0x168>)
    76f2:	2202      	movs	r2, #2
    76f4:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    76f6:	2400      	movs	r4, #0
				buf[i] = cc2400_get8(FIFOREG);
    76f8:	2070      	movs	r0, #112	; 0x70
    76fa:	f000 fc3f 	bl	7f7c <cc2400_get8>
    76fe:	f80d 0004 	strb.w	r0, [sp, r4]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    7702:	3401      	adds	r4, #1
    7704:	2c16      	cmp	r4, #22
    7706:	d1f7      	bne.n	76f8 <cc2400_repeater+0xa0>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    7708:	f000 fcd6 	bl	80b8 <cc2400_status>
    770c:	0704      	lsls	r4, r0, #28
    770e:	d5de      	bpl.n	76ce <cc2400_repeater+0x76>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
    7710:	4b2c      	ldr	r3, [pc, #176]	; (77c4 <cc2400_repeater+0x16c>)
    7712:	2202      	movs	r2, #2
    7714:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    7716:	2210      	movs	r2, #16
    7718:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    771a:	2064      	movs	r0, #100	; 0x64
    771c:	f000 fcd3 	bl	80c6 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7720:	f000 fcca 	bl	80b8 <cc2400_status>
    7724:	0740      	lsls	r0, r0, #29
    7726:	d4fb      	bmi.n	7720 <cc2400_repeater+0xc8>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7728:	f000 fcc6 	bl	80b8 <cc2400_status>
    772c:	0641      	lsls	r1, r0, #25
    772e:	d5fb      	bpl.n	7728 <cc2400_repeater+0xd0>
		cc2400_set(FSDIV, *chan_ptr);
    7730:	8839      	ldrh	r1, [r7, #0]
    7732:	2002      	movs	r0, #2
    7734:	b289      	uxth	r1, r1
    7736:	f000 fc1c 	bl	7f72 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    773a:	f000 fcbd 	bl	80b8 <cc2400_status>
    773e:	0642      	lsls	r2, r0, #25
    7740:	d5fb      	bpl.n	773a <cc2400_repeater+0xe2>
		cc2400_strobe(SFSON);
    7742:	2061      	movs	r0, #97	; 0x61
    7744:	f000 fcbf 	bl	80c6 <cc2400_strobe>
		TXLED_SET;
    7748:	4b1d      	ldr	r3, [pc, #116]	; (77c0 <cc2400_repeater+0x168>)
    774a:	f44f 7280 	mov.w	r2, #256	; 0x100
    774e:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    7750:	2315      	movs	r3, #21
    7752:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    7756:	2301      	movs	r3, #1
    7758:	f88d 3001 	strb.w	r3, [sp, #1]
		for (pa = 0; pa < 8; pa++) {
    775c:	2400      	movs	r4, #0
			cc2400_set(FREND, 8 | pa);
    775e:	2005      	movs	r0, #5
    7760:	f044 0108 	orr.w	r1, r4, #8
    7764:	f000 fc05 	bl	7f72 <cc2400_set>
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7768:	2500      	movs	r5, #0
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
    776a:	f88d 4014 	strb.w	r4, [sp, #20]
			for (i = 0; i < 16; i++) {
				buf[21] = i;
    776e:	f88d 5015 	strb.w	r5, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7772:	200e      	movs	r0, #14
    7774:	f000 fbf4 	bl	7f60 <cc2400_get>
    7778:	f000 001f 	and.w	r0, r0, #31
    777c:	280f      	cmp	r0, #15
    777e:	d1f8      	bne.n	7772 <cc2400_repeater+0x11a>
    7780:	2600      	movs	r6, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    7782:	f81d 1006 	ldrb.w	r1, [sp, r6]
    7786:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7788:	3601      	adds	r6, #1
					cc2400_set8(FIFOREG, buf[j]);
    778a:	f000 fc00 	bl	7f8e <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    778e:	2e16      	cmp	r6, #22
    7790:	d1f7      	bne.n	7782 <cc2400_repeater+0x12a>
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    7792:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7794:	3501      	adds	r5, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    7796:	f000 fc96 	bl	80c6 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    779a:	2d10      	cmp	r5, #16
    779c:	d1e7      	bne.n	776e <cc2400_repeater+0x116>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    779e:	3401      	adds	r4, #1
    77a0:	b2e4      	uxtb	r4, r4
    77a2:	2c08      	cmp	r4, #8
    77a4:	d1db      	bne.n	775e <cc2400_repeater+0x106>
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    77a6:	4b07      	ldr	r3, [pc, #28]	; (77c4 <cc2400_repeater+0x16c>)
    77a8:	f44f 7280 	mov.w	r2, #256	; 0x100
    77ac:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    77ae:	2064      	movs	r0, #100	; 0x64
    77b0:	f000 fc89 	bl	80c6 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    77b4:	f000 fc80 	bl	80b8 <cc2400_status>
    77b8:	0743      	lsls	r3, r0, #29
    77ba:	d4fb      	bmi.n	77b4 <cc2400_repeater+0x15c>
    77bc:	e74f      	b.n	765e <cc2400_repeater+0x6>
    77be:	bf00      	nop
    77c0:	2009c038 	.word	0x2009c038
    77c4:	2009c03c 	.word	0x2009c03c

000077c8 <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    77c8:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    77ca:	7803      	ldrb	r3, [r0, #0]
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    77cc:	460d      	mov	r5, r1
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    77ce:	b123      	cbz	r3, 77da <cc2400_txtest+0x12>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    77d0:	7803      	ldrb	r3, [r0, #0]
    77d2:	2b01      	cmp	r3, #1
    77d4:	d12f      	bne.n	7836 <cc2400_txtest+0x6e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    77d6:	2440      	movs	r4, #64	; 0x40
    77d8:	e000      	b.n	77dc <cc2400_txtest+0x14>
void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    77da:	2429      	movs	r4, #41	; 0x29
		mdmctrl = 0x0040; // 250 kHz frequency deviation
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    77dc:	2012      	movs	r0, #18
    77de:	f642 3122 	movw	r1, #11042	; 0x2b22
    77e2:	f000 fbc6 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    77e6:	2014      	movs	r0, #20
    77e8:	f243 314b 	movw	r1, #13131	; 0x334b
    77ec:	f000 fbc1 	bl	7f72 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    77f0:	2020      	movs	r0, #32
    77f2:	f640 51f1 	movw	r1, #3569	; 0xdf1
    77f6:	f000 fbbc 	bl	7f72 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    77fa:	8829      	ldrh	r1, [r5, #0]
    77fc:	2002      	movs	r0, #2
    77fe:	b289      	uxth	r1, r1
    7800:	f000 fbb7 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    7804:	2003      	movs	r0, #3
    7806:	4621      	mov	r1, r4
    7808:	f000 fbb3 	bl	7f72 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    780c:	f000 fc54 	bl	80b8 <cc2400_status>
    7810:	0641      	lsls	r1, r0, #25
    7812:	d5fb      	bpl.n	780c <cc2400_txtest+0x44>
	cc2400_strobe(SFSON);
    7814:	2061      	movs	r0, #97	; 0x61
    7816:	f000 fc56 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    781a:	f000 fc4d 	bl	80b8 <cc2400_status>
    781e:	0742      	lsls	r2, r0, #29
    7820:	d5fb      	bpl.n	781a <cc2400_txtest+0x52>
	TXLED_SET;
    7822:	4b05      	ldr	r3, [pc, #20]	; (7838 <cc2400_txtest+0x70>)
    7824:	f44f 7280 	mov.w	r2, #256	; 0x100
    7828:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    782a:	2063      	movs	r0, #99	; 0x63
    782c:	f000 fc4b 	bl	80c6 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7830:	4b02      	ldr	r3, [pc, #8]	; (783c <cc2400_txtest+0x74>)
    7832:	2280      	movs	r2, #128	; 0x80
    7834:	601a      	str	r2, [r3, #0]
    7836:	bd38      	pop	{r3, r4, r5, pc}
    7838:	2009c038 	.word	0x2009c038
    783c:	2009c058 	.word	0x2009c058

00007840 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    7840:	4b04      	ldr	r3, [pc, #16]	; (7854 <ssp_stop+0x14>)
    7842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7846:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    7848:	4b03      	ldr	r3, [pc, #12]	; (7858 <ssp_stop+0x18>)
    784a:	681a      	ldr	r2, [r3, #0]
    784c:	f022 0202 	bic.w	r2, r2, #2
    7850:	601a      	str	r2, [r3, #0]
    7852:	4770      	bx	lr
    7854:	2009c098 	.word	0x2009c098
    7858:	40030004 	.word	0x40030004

0000785c <do_rx>:
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    785c:	2300      	movs	r3, #0
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    785e:	4a05      	ldr	r2, [pc, #20]	; (7874 <do_rx+0x18>)
    7860:	6812      	ldr	r2, [r2, #0]
    7862:	0752      	lsls	r2, r2, #29
    7864:	d5fb      	bpl.n	785e <do_rx+0x2>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    7866:	4a04      	ldr	r2, [pc, #16]	; (7878 <do_rx+0x1c>)
    7868:	6812      	ldr	r2, [r2, #0]
    786a:	54c2      	strb	r2, [r0, r3]
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    786c:	3301      	adds	r3, #1
    786e:	2b24      	cmp	r3, #36	; 0x24
    7870:	d1f5      	bne.n	785e <do_rx+0x2>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    7872:	4770      	bx	lr
    7874:	4003000c 	.word	0x4003000c
    7878:	40030008 	.word	0x40030008

0000787c <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    787c:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    787e:	4b08      	ldr	r3, [pc, #32]	; (78a0 <sleep_ms+0x24>)
    7880:	4a08      	ldr	r2, [pc, #32]	; (78a4 <sleep_ms+0x28>)
    7882:	681b      	ldr	r3, [r3, #0]
    7884:	6812      	ldr	r2, [r2, #0]
    7886:	f3c3 0313 	ubfx	r3, r3, #0, #20
    788a:	f640 4435 	movw	r4, #3125	; 0xc35
    788e:	fb04 2303 	mla	r3, r4, r3, r2
    7892:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    7894:	f242 7310 	movw	r3, #10000	; 0x2710
    7898:	4359      	muls	r1, r3
    789a:	60c1      	str	r1, [r0, #12]
    789c:	bd10      	pop	{r4, pc}
    789e:	bf00      	nop
    78a0:	10000bc4 	.word	0x10000bc4
    78a4:	40004008 	.word	0x40004008

000078a8 <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    78a8:	4b0b      	ldr	r3, [pc, #44]	; (78d8 <sleep_elapsed+0x30>)
    78aa:	4a0c      	ldr	r2, [pc, #48]	; (78dc <sleep_elapsed+0x34>)
    78ac:	681b      	ldr	r3, [r3, #0]
    78ae:	6812      	ldr	r2, [r2, #0]
    78b0:	f640 4135 	movw	r1, #3125	; 0xc35
    78b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    78b8:	fb01 2303 	mla	r3, r1, r3, r2
	if (now < state->sleep_start)
    78bc:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    78be:	68c0      	ldr	r0, [r0, #12]
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
	if (now < state->sleep_start)
    78c0:	4293      	cmp	r3, r2
		now += 3276800000;
    78c2:	bf3c      	itt	cc
    78c4:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    78c8:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    78cc:	1a9b      	subs	r3, r3, r2
}
    78ce:	4283      	cmp	r3, r0
    78d0:	bf34      	ite	cc
    78d2:	2000      	movcc	r0, #0
    78d4:	2001      	movcs	r0, #1
    78d6:	4770      	bx	lr
    78d8:	10000bc4 	.word	0x10000bc4
    78dc:	40004008 	.word	0x40004008

000078e0 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    78e0:	4770      	bx	lr
    78e2:	0000      	movs	r0, r0

000078e4 <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    78e4:	2300      	movs	r3, #0
    78e6:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    78e8:	4b03      	ldr	r3, [pc, #12]	; (78f8 <init_state+0x14>)
    78ea:	f640 1268 	movw	r2, #2408	; 0x968
    78ee:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    78f0:	2301      	movs	r3, #1
    78f2:	7003      	strb	r3, [r0, #0]
    78f4:	4770      	bx	lr
    78f6:	bf00      	nop
    78f8:	10000448 	.word	0x10000448

000078fc <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    78fc:	2301      	movs	r3, #1
    78fe:	7003      	strb	r3, [r0, #0]
    7900:	4770      	bx	lr
    7902:	0000      	movs	r0, r0

00007904 <start_rf_state>:
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    7904:	b510      	push	{r4, lr}
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    7906:	f647 71ff 	movw	r1, #32767	; 0x7fff
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    790a:	4604      	mov	r4, r0
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    790c:	200d      	movs	r0, #13
    790e:	f000 fb30 	bl	7f72 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7912:	2012      	movs	r0, #18
    7914:	f642 3122 	movw	r1, #11042	; 0x2b22
    7918:	f000 fb2b 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    791c:	2014      	movs	r0, #20
    791e:	f241 314b 	movw	r1, #4939	; 0x134b
    7922:	f000 fb26 	bl	7f72 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    7926:	2020      	movs	r0, #32
    7928:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    792c:	f000 fb21 	bl	7f72 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    7930:	4b1e      	ldr	r3, [pc, #120]	; (79ac <start_rf_state+0xa8>)
    7932:	2002      	movs	r0, #2
    7934:	8819      	ldrh	r1, [r3, #0]
    7936:	b289      	uxth	r1, r1
    7938:	3901      	subs	r1, #1
    793a:	b289      	uxth	r1, r1
    793c:	f000 fb19 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    7940:	2003      	movs	r0, #3
    7942:	2126      	movs	r1, #38	; 0x26
    7944:	f000 fb15 	bl	7f72 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    7948:	2021      	movs	r0, #33	; 0x21
    794a:	2103      	movs	r1, #3
    794c:	f000 fb11 	bl	7f72 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    7950:	202d      	movs	r0, #45	; 0x2d
    7952:	f246 310f 	movw	r1, #25359	; 0x630f
    7956:	f000 fb0c 	bl	7f72 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    795a:	202c      	movs	r0, #44	; 0x2c
    795c:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    7960:	f000 fb07 	bl	7f72 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7964:	f000 fba8 	bl	80b8 <cc2400_status>
    7968:	0640      	lsls	r0, r0, #25
    796a:	d5fb      	bpl.n	7964 <start_rf_state+0x60>
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    796c:	4a10      	ldr	r2, [pc, #64]	; (79b0 <start_rf_state+0xac>)
    796e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7972:	6013      	str	r3, [r2, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7974:	4a0f      	ldr	r2, [pc, #60]	; (79b4 <start_rf_state+0xb0>)

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    7976:	2061      	movs	r0, #97	; 0x61
static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7978:	6811      	ldr	r1, [r2, #0]
    797a:	f041 0102 	orr.w	r1, r1, #2
    797e:	6011      	str	r1, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    7980:	4a0d      	ldr	r2, [pc, #52]	; (79b8 <start_rf_state+0xb4>)
    7982:	6013      	str	r3, [r2, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    7984:	f000 fb9f 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7988:	f000 fb96 	bl	80b8 <cc2400_status>
    798c:	0741      	lsls	r1, r0, #29
    798e:	d5fb      	bpl.n	7988 <start_rf_state+0x84>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7990:	200e      	movs	r0, #14
    7992:	f000 fae5 	bl	7f60 <cc2400_get>
    7996:	f000 001f 	and.w	r0, r0, #31
    799a:	280f      	cmp	r0, #15
    799c:	d1f8      	bne.n	7990 <start_rf_state+0x8c>

	cc2400_strobe(SRX);
    799e:	2062      	movs	r0, #98	; 0x62
    79a0:	f000 fb91 	bl	80c6 <cc2400_strobe>
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
    79a4:	2302      	movs	r3, #2
    79a6:	7023      	strb	r3, [r4, #0]
    79a8:	bd10      	pop	{r4, pc}
    79aa:	bf00      	nop
    79ac:	10000448 	.word	0x10000448
    79b0:	2009c098 	.word	0x2009c098
    79b4:	40030004 	.word	0x40030004
    79b8:	2009c09c 	.word	0x2009c09c

000079bc <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    79bc:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    79be:	f647 71ff 	movw	r1, #32767	; 0x7fff
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    79c2:	4604      	mov	r4, r0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    79c4:	200d      	movs	r0, #13
    79c6:	f000 fad4 	bl	7f72 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    79ca:	2012      	movs	r0, #18
    79cc:	f642 3122 	movw	r1, #11042	; 0x2b22
    79d0:	f000 facf 	bl	7f72 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    79d4:	2014      	movs	r0, #20
    79d6:	f243 314b 	movw	r1, #13131	; 0x334b
    79da:	f000 faca 	bl	7f72 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    79de:	2020      	movs	r0, #32
    79e0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    79e4:	f000 fac5 	bl	7f72 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    79e8:	4b1a      	ldr	r3, [pc, #104]	; (7a54 <start_jamming_state+0x98>)
    79ea:	2002      	movs	r0, #2
    79ec:	8819      	ldrh	r1, [r3, #0]
    79ee:	b289      	uxth	r1, r1
    79f0:	f000 fabf 	bl	7f72 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    79f4:	2003      	movs	r0, #3
    79f6:	2126      	movs	r1, #38	; 0x26
    79f8:	f000 fabb 	bl	7f72 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    79fc:	2021      	movs	r0, #33	; 0x21
    79fe:	2103      	movs	r1, #3
    7a00:	f000 fab7 	bl	7f72 <cc2400_set>
	cc2400_set(FREND, 0xf);
    7a04:	2005      	movs	r0, #5
    7a06:	210f      	movs	r1, #15
    7a08:	f000 fab3 	bl	7f72 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7a0c:	f000 fb54 	bl	80b8 <cc2400_status>
    7a10:	0642      	lsls	r2, r0, #25
    7a12:	d5fb      	bpl.n	7a0c <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    7a14:	2061      	movs	r0, #97	; 0x61
    7a16:	f000 fb56 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7a1a:	f000 fb4d 	bl	80b8 <cc2400_status>
    7a1e:	0743      	lsls	r3, r0, #29
    7a20:	d5fb      	bpl.n	7a1a <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7a22:	200e      	movs	r0, #14
    7a24:	f000 fa9c 	bl	7f60 <cc2400_get>
    7a28:	f000 001f 	and.w	r0, r0, #31
    7a2c:	280f      	cmp	r0, #15
    7a2e:	d1f8      	bne.n	7a22 <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7a30:	4b09      	ldr	r3, [pc, #36]	; (7a58 <start_jamming_state+0x9c>)
    7a32:	2280      	movs	r2, #128	; 0x80
    7a34:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    7a36:	2063      	movs	r0, #99	; 0x63
    7a38:	f000 fb45 	bl	80c6 <cc2400_strobe>
	TXLED_SET;
    7a3c:	4b07      	ldr	r3, [pc, #28]	; (7a5c <start_jamming_state+0xa0>)
    7a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7a42:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    7a44:	2305      	movs	r3, #5
    7a46:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7a48:	69a3      	ldr	r3, [r4, #24]
    7a4a:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7a4c:	f644 6320 	movw	r3, #20000	; 0x4e20
    7a50:	60e3      	str	r3, [r4, #12]
    7a52:	bd10      	pop	{r4, pc}
    7a54:	10000448 	.word	0x10000448
    7a58:	2009c058 	.word	0x2009c058
    7a5c:	2009c038 	.word	0x2009c038

00007a60 <sleep_state>:
		ssp_stop();
		state->timer_active = 1;
	}
}

static void sleep_state(ego_fsm_state_t *state) {
    7a60:	b510      	push	{r4, lr}
    7a62:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7a64:	f7ff ff20 	bl	78a8 <sleep_elapsed>
    7a68:	b1b0      	cbz	r0, 7a98 <sleep_state+0x38>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7a6a:	6863      	ldr	r3, [r4, #4]
    7a6c:	1c5a      	adds	r2, r3, #1
    7a6e:	4b0b      	ldr	r3, [pc, #44]	; (7a9c <sleep_state+0x3c>)
    7a70:	4013      	ands	r3, r2
    7a72:	2b00      	cmp	r3, #0
    7a74:	da03      	bge.n	7a7e <sleep_state+0x1e>
    7a76:	3b01      	subs	r3, #1
    7a78:	f063 0303 	orn	r3, r3, #3
    7a7c:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    7a7e:	4a08      	ldr	r2, [pc, #32]	; (7aa0 <sleep_state+0x40>)
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7a80:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    7a82:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    7a86:	4b07      	ldr	r3, [pc, #28]	; (7aa4 <sleep_state+0x44>)

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    7a88:	4620      	mov	r0, r4
    7a8a:	2107      	movs	r1, #7

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
		channel = channels[state->channel_index];
    7a8c:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    7a8e:	f7ff fef5 	bl	787c <sleep_ms>
		state->timer_active = 1;
    7a92:	2301      	movs	r3, #1
    7a94:	6123      	str	r3, [r4, #16]

		state->state = EGO_ST_START_RX;
    7a96:	7023      	strb	r3, [r4, #0]
    7a98:	bd10      	pop	{r4, pc}
    7a9a:	bf00      	nop
    7a9c:	80000003 	.word	0x80000003
    7aa0:	00009588 	.word	0x00009588
    7aa4:	10000448 	.word	0x10000448

00007aa8 <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    7aa8:	b510      	push	{r4, lr}
    7aaa:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7aac:	f7ff fefc 	bl	78a8 <sleep_elapsed>
    7ab0:	b130      	cbz	r0, 7ac0 <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    7ab2:	2301      	movs	r3, #1
    7ab4:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    7ab6:	6123      	str	r3, [r4, #16]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7ab8:	69a3      	ldr	r3, [r4, #24]
    7aba:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7abc:	4b01      	ldr	r3, [pc, #4]	; (7ac4 <jam_sleep_state+0x1c>)
    7abe:	60e3      	str	r3, [r4, #12]
    7ac0:	bd10      	pop	{r4, pc}
    7ac2:	bf00      	nop
    7ac4:	0001adb0 	.word	0x0001adb0

00007ac8 <jamming_state>:

	state->state = EGO_ST_JAMMING;
	sleep_ms_anchor(state, 2);
}

void jamming_state(ego_fsm_state_t *state) {
    7ac8:	b510      	push	{r4, lr}
    7aca:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7acc:	f7ff feec 	bl	78a8 <sleep_elapsed>
    7ad0:	b300      	cbz	r0, 7b14 <jamming_state+0x4c>
		cc2400_strobe(SRFOFF);
    7ad2:	2064      	movs	r0, #100	; 0x64
    7ad4:	f000 faf7 	bl	80c6 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    7ad8:	4b0f      	ldr	r3, [pc, #60]	; (7b18 <jamming_state+0x50>)
    7ada:	2280      	movs	r2, #128	; 0x80
    7adc:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    7ade:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ae2:	f843 2c20 	str.w	r2, [r3, #-32]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7ae6:	6863      	ldr	r3, [r4, #4]
    7ae8:	1c5a      	adds	r2, r3, #1
    7aea:	4b0c      	ldr	r3, [pc, #48]	; (7b1c <jamming_state+0x54>)
    7aec:	4013      	ands	r3, r2
    7aee:	2b00      	cmp	r3, #0
    7af0:	da03      	bge.n	7afa <jamming_state+0x32>
    7af2:	3b01      	subs	r3, #1
    7af4:	f063 0303 	orn	r3, r3, #3
    7af8:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    7afa:	4a09      	ldr	r2, [pc, #36]	; (7b20 <jamming_state+0x58>)
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7afc:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    7afe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    7b02:	4b08      	ldr	r3, [pc, #32]	; (7b24 <jamming_state+0x5c>)
    7b04:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    7b06:	2303      	movs	r3, #3
    7b08:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7b0a:	69a3      	ldr	r3, [r4, #24]
    7b0c:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7b0e:	f64e 2360 	movw	r3, #60000	; 0xea60
    7b12:	60e3      	str	r3, [r4, #12]
    7b14:	bd10      	pop	{r4, pc}
    7b16:	bf00      	nop
    7b18:	2009c05c 	.word	0x2009c05c
    7b1c:	80000003 	.word	0x80000003
    7b20:	00009588 	.word	0x00009588
    7b24:	10000448 	.word	0x10000448

00007b28 <continuous_cap_state>:
// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
    7b28:	b510      	push	{r4, lr}
    7b2a:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    7b2c:	2100      	movs	r1, #0
    7b2e:	2228      	movs	r2, #40	; 0x28
    7b30:	4668      	mov	r0, sp
    7b32:	f7fc fb7d 	bl	4230 <memset>
		.rxtime = CLK100NS,
    7b36:	4b17      	ldr	r3, [pc, #92]	; (7b94 <continuous_cap_state+0x6c>)
    7b38:	4a17      	ldr	r2, [pc, #92]	; (7b98 <continuous_cap_state+0x70>)
    7b3a:	681b      	ldr	r3, [r3, #0]
    7b3c:	6812      	ldr	r2, [r2, #0]
    7b3e:	f640 4135 	movw	r1, #3125	; 0xc35
    7b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7b46:	fb01 2303 	mla	r3, r1, r3, r2
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    7b4a:	9309      	str	r3, [sp, #36]	; 0x24
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7b4c:	f000 fab4 	bl	80b8 <cc2400_status>
static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    7b50:	06c0      	lsls	r0, r0, #27
    7b52:	d51d      	bpl.n	7b90 <continuous_cap_state+0x68>
		RXLED_SET;
    7b54:	4b11      	ldr	r3, [pc, #68]	; (7b9c <continuous_cap_state+0x74>)
    7b56:	2410      	movs	r4, #16
    7b58:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    7b5a:	4668      	mov	r0, sp
    7b5c:	f7ff fe7e 	bl	785c <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    7b60:	2006      	movs	r0, #6
    7b62:	4669      	mov	r1, sp
    7b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7b66:	f7fd f9dd 	bl	4f24 <enqueue_with_ts>
		RXLED_CLR;
    7b6a:	4b0d      	ldr	r3, [pc, #52]	; (7ba0 <continuous_cap_state+0x78>)

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    7b6c:	2061      	movs	r0, #97	; 0x61

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    7b6e:	601c      	str	r4, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    7b70:	f000 faa9 	bl	80c6 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7b74:	f000 faa0 	bl	80b8 <cc2400_status>
    7b78:	0741      	lsls	r1, r0, #29
    7b7a:	d5fb      	bpl.n	7b74 <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7b7c:	200e      	movs	r0, #14
    7b7e:	f000 f9ef 	bl	7f60 <cc2400_get>
    7b82:	f000 001f 	and.w	r0, r0, #31
    7b86:	280f      	cmp	r0, #15
    7b88:	d1f8      	bne.n	7b7c <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    7b8a:	2062      	movs	r0, #98	; 0x62
    7b8c:	f000 fa9b 	bl	80c6 <cc2400_strobe>
	}
}
    7b90:	b00a      	add	sp, #40	; 0x28
    7b92:	bd10      	pop	{r4, pc}
    7b94:	10000bc4 	.word	0x10000bc4
    7b98:	40004008 	.word	0x40004008
    7b9c:	2009c038 	.word	0x2009c038
    7ba0:	2009c03c 	.word	0x2009c03c

00007ba4 <jam_cap_state>:

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
    7ba4:	b510      	push	{r4, lr}
    7ba6:	4604      	mov	r4, r0
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7ba8:	f000 fa86 	bl	80b8 <cc2400_status>
	}
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
    7bac:	06c3      	lsls	r3, r0, #27
    7bae:	d50e      	bpl.n	7bce <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
    7bb0:	2304      	movs	r3, #4
    7bb2:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    7bb4:	2301      	movs	r3, #1
    7bb6:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    7bb8:	4b11      	ldr	r3, [pc, #68]	; (7c00 <jam_cap_state+0x5c>)
    7bba:	4a12      	ldr	r2, [pc, #72]	; (7c04 <jam_cap_state+0x60>)
    7bbc:	681b      	ldr	r3, [r3, #0]
    7bbe:	6812      	ldr	r2, [r2, #0]
    7bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7bc4:	f640 4135 	movw	r1, #3125	; 0xc35
    7bc8:	fb01 2303 	mla	r3, r1, r3, r2
    7bcc:	61a3      	str	r3, [r4, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    7bce:	6923      	ldr	r3, [r4, #16]
    7bd0:	b15b      	cbz	r3, 7bea <jam_cap_state+0x46>
    7bd2:	4620      	mov	r0, r4
    7bd4:	f7ff fe68 	bl	78a8 <sleep_elapsed>
    7bd8:	b138      	cbz	r0, 7bea <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    7bda:	2304      	movs	r3, #4
    7bdc:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    7bde:	2300      	movs	r3, #0
    7be0:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    7be2:	4620      	mov	r0, r4
    7be4:	210b      	movs	r1, #11
    7be6:	f7ff fe49 	bl	787c <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    7bea:	7823      	ldrb	r3, [r4, #0]
    7bec:	2b02      	cmp	r3, #2
    7bee:	d006      	beq.n	7bfe <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    7bf0:	2064      	movs	r0, #100	; 0x64
    7bf2:	f000 fa68 	bl	80c6 <cc2400_strobe>
		ssp_stop();
	}
}
    7bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
		cc2400_strobe(SRFOFF);
		ssp_stop();
    7bfa:	f7ff be21 	b.w	7840 <ssp_stop>
    7bfe:	bd10      	pop	{r4, pc}
    7c00:	10000bc4 	.word	0x10000bc4
    7c04:	40004008 	.word	0x40004008

00007c08 <cap_state>:
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    7c08:	b530      	push	{r4, r5, lr}
    7c0a:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    7c0c:	2100      	movs	r1, #0
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    7c0e:	4604      	mov	r4, r0
	ego_packet_t packet = {
    7c10:	2228      	movs	r2, #40	; 0x28
    7c12:	4668      	mov	r0, sp
    7c14:	f7fc fb0c 	bl	4230 <memset>
		.rxtime = CLK100NS,
    7c18:	4b1b      	ldr	r3, [pc, #108]	; (7c88 <cap_state+0x80>)
    7c1a:	4a1c      	ldr	r2, [pc, #112]	; (7c8c <cap_state+0x84>)
    7c1c:	681b      	ldr	r3, [r3, #0]
    7c1e:	6812      	ldr	r2, [r2, #0]
    7c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7c24:	f640 4135 	movw	r1, #3125	; 0xc35
    7c28:	fb01 2303 	mla	r3, r1, r3, r2
	};

	if (sleep_elapsed(state)) {
    7c2c:	4620      	mov	r0, r4
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    7c2e:	9309      	str	r3, [sp, #36]	; 0x24
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    7c30:	f7ff fe3a 	bl	78a8 <sleep_elapsed>
    7c34:	b128      	cbz	r0, 7c42 <cap_state+0x3a>
		sleep_ms(state, 4);
    7c36:	4620      	mov	r0, r4
    7c38:	2104      	movs	r1, #4
    7c3a:	f7ff fe1f 	bl	787c <sleep_ms>
		state->state = EGO_ST_SLEEP;
    7c3e:	2303      	movs	r3, #3
    7c40:	7023      	strb	r3, [r4, #0]
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7c42:	f000 fa39 	bl	80b8 <cc2400_status>
	if (sleep_elapsed(state)) {
		sleep_ms(state, 4);
		state->state = EGO_ST_SLEEP;
	}

	if (sync_received()) {
    7c46:	06c2      	lsls	r2, r0, #27
    7c48:	d512      	bpl.n	7c70 <cap_state+0x68>
		RXLED_SET;
    7c4a:	4b11      	ldr	r3, [pc, #68]	; (7c90 <cap_state+0x88>)
    7c4c:	2510      	movs	r5, #16
    7c4e:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    7c50:	4668      	mov	r0, sp
    7c52:	f7ff fe03 	bl	785c <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    7c56:	4669      	mov	r1, sp
    7c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c5a:	2006      	movs	r0, #6
    7c5c:	f7fd f962 	bl	4f24 <enqueue_with_ts>
		RXLED_CLR;
    7c60:	4b0c      	ldr	r3, [pc, #48]	; (7c94 <cap_state+0x8c>)

		sleep_ms(state, 6);
    7c62:	4620      	mov	r0, r4

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    7c64:	601d      	str	r5, [r3, #0]

		sleep_ms(state, 6);
    7c66:	2106      	movs	r1, #6
    7c68:	f7ff fe08 	bl	787c <sleep_ms>
		state->state = EGO_ST_SLEEP;
    7c6c:	2303      	movs	r3, #3
    7c6e:	7023      	strb	r3, [r4, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    7c70:	7823      	ldrb	r3, [r4, #0]
    7c72:	2b02      	cmp	r3, #2
    7c74:	d006      	beq.n	7c84 <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    7c76:	2064      	movs	r0, #100	; 0x64
    7c78:	f000 fa25 	bl	80c6 <cc2400_strobe>
		ssp_stop();
    7c7c:	f7ff fde0 	bl	7840 <ssp_stop>
		state->timer_active = 1;
    7c80:	2301      	movs	r3, #1
    7c82:	6123      	str	r3, [r4, #16]
	}
}
    7c84:	b00b      	add	sp, #44	; 0x2c
    7c86:	bd30      	pop	{r4, r5, pc}
    7c88:	10000bc4 	.word	0x10000bc4
    7c8c:	40004008 	.word	0x40004008
    7c90:	2009c038 	.word	0x2009c038
    7c94:	2009c03c 	.word	0x2009c03c

00007c98 <ego_main>:
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    7c98:	b530      	push	{r4, r5, lr}
    7c9a:	b089      	sub	sp, #36	; 0x24
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    7c9c:	2100      	movs	r1, #0
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    7c9e:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    7ca0:	221c      	movs	r2, #28
    7ca2:	a801      	add	r0, sp, #4
    7ca4:	f7fc fac4 	bl	4230 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    7ca8:	2c01      	cmp	r4, #1
    7caa:	4d14      	ldr	r5, [pc, #80]	; (7cfc <ego_main+0x64>)
    7cac:	d009      	beq.n	7cc2 <ego_main+0x2a>
    7cae:	d306      	bcc.n	7cbe <ego_main+0x26>
    7cb0:	2c02      	cmp	r4, #2
    7cb2:	d101      	bne.n	7cb8 <ego_main+0x20>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
			break;
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    7cb4:	4c12      	ldr	r4, [pc, #72]	; (7d00 <ego_main+0x68>)
			break;
    7cb6:	e005      	b.n	7cc4 <ego_main+0x2c>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    7cb8:	2300      	movs	r3, #0
    7cba:	702b      	strb	r3, [r5, #0]
    7cbc:	e01b      	b.n	7cf6 <ego_main+0x5e>
		jamming_state,
	};

	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
    7cbe:	4c11      	ldr	r4, [pc, #68]	; (7d04 <ego_main+0x6c>)
    7cc0:	e000      	b.n	7cc4 <ego_main+0x2c>
			break;
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    7cc2:	4c11      	ldr	r4, [pc, #68]	; (7d08 <ego_main+0x70>)
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
}

static void ego_init(void) {
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    7cc4:	4b11      	ldr	r3, [pc, #68]	; (7d0c <ego_main+0x74>)
    7cc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7cca:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    7ccc:	f000 f8c0 	bl	7e50 <dio_ssp_init>
	}

	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
    7cd0:	782b      	ldrb	r3, [r5, #0]
    7cd2:	2b0d      	cmp	r3, #13
    7cd4:	d106      	bne.n	7ce4 <ego_main+0x4c>
			break;
		handler[state.state](&state);
    7cd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7cda:	a801      	add	r0, sp, #4
    7cdc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7ce0:	4798      	blx	r3
	}
    7ce2:	e7f5      	b.n	7cd0 <ego_main+0x38>

	dio_ssp_init();
}

static void ego_deinit(void) {
	cc2400_strobe(SRFOFF);
    7ce4:	2064      	movs	r0, #100	; 0x64
    7ce6:	f000 f9ee 	bl	80c6 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    7cea:	f7ff fda9 	bl	7840 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    7cee:	4b08      	ldr	r3, [pc, #32]	; (7d10 <ego_main+0x78>)
    7cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7cf4:	601a      	str	r2, [r3, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    7cf6:	b009      	add	sp, #36	; 0x24
    7cf8:	bd30      	pop	{r4, r5, pc}
    7cfa:	bf00      	nop
    7cfc:	10000a2e 	.word	0x10000a2e
    7d00:	000095c4 	.word	0x000095c4
    7d04:	00009590 	.word	0x00009590
    7d08:	000095ac 	.word	0x000095ac
    7d0c:	e000e100 	.word	0xe000e100
    7d10:	e000e180 	.word	0xe000e180

00007d14 <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    7d14:	f000 bcea 	b.w	86ec <USBHwISR>

00007d18 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    7d18:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    7d1a:	2300      	movs	r3, #0
    7d1c:	4a0c      	ldr	r2, [pc, #48]	; (7d50 <Reset_Handler+0x38>)
    7d1e:	490d      	ldr	r1, [pc, #52]	; (7d54 <Reset_Handler+0x3c>)
    7d20:	1898      	adds	r0, r3, r2
    7d22:	4288      	cmp	r0, r1
    7d24:	d204      	bcs.n	7d30 <Reset_Handler+0x18>
	{
		*dest++ = *src++;
    7d26:	490c      	ldr	r1, [pc, #48]	; (7d58 <Reset_Handler+0x40>)
    7d28:	5859      	ldr	r1, [r3, r1]
    7d2a:	5099      	str	r1, [r3, r2]
    7d2c:	3304      	adds	r3, #4
    7d2e:	e7f5      	b.n	7d1c <Reset_Handler+0x4>
{
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    7d30:	4b0a      	ldr	r3, [pc, #40]	; (7d5c <Reset_Handler+0x44>)
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    7d32:	4a0b      	ldr	r2, [pc, #44]	; (7d60 <Reset_Handler+0x48>)
    7d34:	4293      	cmp	r3, r2
    7d36:	d203      	bcs.n	7d40 <Reset_Handler+0x28>
	{
		*src++ = 0;
    7d38:	2200      	movs	r2, #0
    7d3a:	f843 2b04 	str.w	r2, [r3], #4
    7d3e:	e7f8      	b.n	7d32 <Reset_Handler+0x1a>
	}

	__libc_init_array();
    7d40:	f7fc fa48 	bl	41d4 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    7d44:	4b07      	ldr	r3, [pc, #28]	; (7d64 <Reset_Handler+0x4c>)
    7d46:	4a08      	ldr	r2, [pc, #32]	; (7d68 <Reset_Handler+0x50>)
    7d48:	601a      	str	r2, [r3, #0]

	main();
    7d4a:	f7fe fde3 	bl	6914 <main>
    7d4e:	e7fe      	b.n	7d4e <Reset_Handler+0x36>
    7d50:	10000020 	.word	0x10000020
    7d54:	100009fd 	.word	0x100009fd
    7d58:	00009630 	.word	0x00009630
    7d5c:	10000a00 	.word	0x10000a00
    7d60:	10003354 	.word	0x10003354
    7d64:	e000ed08 	.word	0xe000ed08
    7d68:	00004000 	.word	0x00004000

00007d6c <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    7d6c:	e7fe      	b.n	7d6c <ADC_IRQHandler>
    7d6e:	0000      	movs	r0, r0

00007d70 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    7d70:	4a04      	ldr	r2, [pc, #16]	; (7d84 <spi_delay+0x14>)
    7d72:	230a      	movs	r3, #10
    7d74:	6013      	str	r3, [r2, #0]
       while (--delay_counter);
    7d76:	6813      	ldr	r3, [r2, #0]
    7d78:	3b01      	subs	r3, #1
    7d7a:	6013      	str	r3, [r2, #0]
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	d1fa      	bne.n	7d76 <spi_delay+0x6>
}
    7d80:	4770      	bx	lr
    7d82:	bf00      	nop
    7d84:	10000b00 	.word	0x10000b00

00007d88 <rbit>:
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
  u32 result = 0;
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    7d88:	fa90 f0a0 	rbit	r0, r0
  return result;
}
    7d8c:	4770      	bx	lr
    7d8e:	0000      	movs	r0, r0

00007d90 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    7d90:	0883      	lsrs	r3, r0, #2
    7d92:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    7d96:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    7d9a:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    7d9e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    7da2:	4a05      	ldr	r2, [pc, #20]	; (7db8 <wait_us+0x28>)
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    7da4:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    7da8:	6050      	str	r0, [r2, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    7daa:	6853      	ldr	r3, [r2, #4]
    7dac:	3b01      	subs	r3, #1
    7dae:	6053      	str	r3, [r2, #4]
    7db0:	2b00      	cmp	r3, #0
    7db2:	d1fa      	bne.n	7daa <wait_us+0x1a>
}
    7db4:	4770      	bx	lr
    7db6:	bf00      	nop
    7db8:	10000b00 	.word	0x10000b00

00007dbc <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    7dbc:	4b01      	ldr	r3, [pc, #4]	; (7dc4 <wait+0x8>)
    7dbe:	4358      	muls	r0, r3
    7dc0:	f7ff bfe6 	b.w	7d90 <wait_us>
    7dc4:	000f4240 	.word	0x000f4240

00007dc8 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    7dc8:	4a10      	ldr	r2, [pc, #64]	; (7e0c <all_pins_off+0x44>)
    7dca:	2300      	movs	r3, #0
    7dcc:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    7dce:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    7dd0:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    7dd2:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    7dd4:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    7dd6:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    7dd8:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    7dda:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    7ddc:	4a0c      	ldr	r2, [pc, #48]	; (7e10 <all_pins_off+0x48>)
    7dde:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    7de0:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    7de2:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    7de4:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    7de6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    7dea:	4a0a      	ldr	r2, [pc, #40]	; (7e14 <all_pins_off+0x4c>)
    7dec:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    7dee:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    7df0:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    7df2:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    7df4:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    7df6:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    7df8:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    7dfa:	4a07      	ldr	r2, [pc, #28]	; (7e18 <all_pins_off+0x50>)
    7dfc:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    7dfe:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    7e00:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    7e02:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    7e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    7e08:	4770      	bx	lr
    7e0a:	bf00      	nop
    7e0c:	4002c000 	.word	0x4002c000
    7e10:	2009c000 	.word	0x2009c000
    7e14:	4002c040 	.word	0x4002c040
    7e18:	2009c014 	.word	0x2009c014

00007e1c <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    7e1c:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    7e1e:	f7ff ffd3 	bl	7dc8 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    7e22:	4a0a      	ldr	r2, [pc, #40]	; (7e4c <gpio_init+0x30>)
    7e24:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    7e26:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    7e2a:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    7e2c:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    7e2e:	f240 11b1 	movw	r1, #433	; 0x1b1
    7e32:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    7e34:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    7e38:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    7e3a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    7e3e:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    7e40:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    7e42:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    7e44:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    7e46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    7e4a:	bd08      	pop	{r3, pc}
    7e4c:	2009c000 	.word	0x2009c000

00007e50 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    7e50:	4b11      	ldr	r3, [pc, #68]	; (7e98 <dio_ssp_init+0x48>)
    7e52:	681a      	ldr	r2, [r3, #0]
    7e54:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    7e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    7e5c:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    7e5e:	681a      	ldr	r2, [r3, #0]
    7e60:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    7e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    7e68:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    7e6a:	681a      	ldr	r2, [r3, #0]
    7e6c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    7e70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    7e74:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    7e76:	681a      	ldr	r2, [r3, #0]
    7e78:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    7e7c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7e80:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    7e82:	4b06      	ldr	r3, [pc, #24]	; (7e9c <dio_ssp_init+0x4c>)
    7e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7e88:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    7e8a:	4b05      	ldr	r3, [pc, #20]	; (7ea0 <dio_ssp_init+0x50>)
    7e8c:	22c7      	movs	r2, #199	; 0xc7
    7e8e:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    7e90:	220c      	movs	r2, #12
    7e92:	605a      	str	r2, [r3, #4]
    7e94:	4770      	bx	lr
    7e96:	bf00      	nop
    7e98:	4002c000 	.word	0x4002c000
    7e9c:	2009c098 	.word	0x2009c098
    7ea0:	40030000 	.word	0x40030000

00007ea4 <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    7ea4:	4b09      	ldr	r3, [pc, #36]	; (7ecc <atest_init+0x28>)
    7ea6:	681a      	ldr	r2, [r3, #0]
    7ea8:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
    7eac:	601a      	str	r2, [r3, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    7eae:	4b08      	ldr	r3, [pc, #32]	; (7ed0 <atest_init+0x2c>)
    7eb0:	681a      	ldr	r2, [r3, #0]
    7eb2:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
    7eb6:	601a      	str	r2, [r3, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    7eb8:	4b06      	ldr	r3, [pc, #24]	; (7ed4 <atest_init+0x30>)
    7eba:	681a      	ldr	r2, [r3, #0]
    7ebc:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    7ec0:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    7ec2:	681a      	ldr	r2, [r3, #0]
    7ec4:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    7ec8:	601a      	str	r2, [r3, #0]
    7eca:	4770      	bx	lr
    7ecc:	4002c004 	.word	0x4002c004
    7ed0:	2009c000 	.word	0x2009c000
    7ed4:	4002c044 	.word	0x4002c044

00007ed8 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    7ed8:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    7eda:	2401      	movs	r4, #1
    7edc:	1e43      	subs	r3, r0, #1
    7ede:	409c      	lsls	r4, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    7ee0:	2220      	movs	r2, #32

	while (len--) {
    7ee2:	3801      	subs	r0, #1

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    7ee4:	4b0d      	ldr	r3, [pc, #52]	; (7f1c <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    7ee6:	b2c0      	uxtb	r0, r0
    7ee8:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    7eea:	601a      	str	r2, [r3, #0]
    7eec:	4b0c      	ldr	r3, [pc, #48]	; (7f20 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    7eee:	d011      	beq.n	7f14 <cc2400_spi+0x3c>
		if (data & msb)
    7ef0:	4221      	tst	r1, r4
			MOSI_SET;
		else
			MOSI_CLR;
    7ef2:	bf08      	it	eq
    7ef4:	4d09      	ldreq	r5, [pc, #36]	; (7f1c <cc2400_spi+0x44>)
    7ef6:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
		if (data & msb)
			MOSI_SET;
    7efa:	bf14      	ite	ne
    7efc:	601a      	strne	r2, [r3, #0]
		else
			MOSI_CLR;
    7efe:	602a      	streq	r2, [r5, #0]
		data <<= 1;

		SCLK_SET;
    7f00:	2210      	movs	r2, #16
    7f02:	601a      	str	r2, [r3, #0]
		if (MISO)
    7f04:	4b07      	ldr	r3, [pc, #28]	; (7f24 <cc2400_spi+0x4c>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    7f06:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    7f08:	681b      	ldr	r3, [r3, #0]
    7f0a:	079b      	lsls	r3, r3, #30
			data |= 1;
    7f0c:	bf48      	it	mi
    7f0e:	f041 0101 	orrmi.w	r1, r1, #1
    7f12:	e7e6      	b.n	7ee2 <cc2400_spi+0xa>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    7f14:	2220      	movs	r2, #32
    7f16:	601a      	str	r2, [r3, #0]

	return data;
}
    7f18:	4608      	mov	r0, r1
    7f1a:	bd30      	pop	{r4, r5, pc}
    7f1c:	2009c05c 	.word	0x2009c05c
    7f20:	2009c058 	.word	0x2009c058
    7f24:	2009c054 	.word	0x2009c054

00007f28 <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    7f28:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    7f2a:	4c0a      	ldr	r4, [pc, #40]	; (7f54 <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    7f2c:	f7ff ffba 	bl	7ea4 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    7f30:	f44f 7300 	mov.w	r3, #512	; 0x200
    7f34:	6023      	str	r3, [r4, #0]
	wait_us(50);
    7f36:	2032      	movs	r0, #50	; 0x32
    7f38:	f7ff ff2a 	bl	7d90 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    7f3c:	4b06      	ldr	r3, [pc, #24]	; (7f58 <cc2400_init+0x30>)
    7f3e:	2220      	movs	r2, #32
    7f40:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    7f42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    7f46:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    7f48:	2018      	movs	r0, #24
    7f4a:	4904      	ldr	r1, [pc, #16]	; (7f5c <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    7f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    7f50:	f7ff bfc2 	b.w	7ed8 <cc2400_spi>
    7f54:	2009c038 	.word	0x2009c038
    7f58:	2009c058 	.word	0x2009c058
    7f5c:	000d7fff 	.word	0x000d7fff

00007f60 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    7f60:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    7f62:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    7f66:	0409      	lsls	r1, r1, #16
    7f68:	2018      	movs	r0, #24
    7f6a:	f7ff ffb5 	bl	7ed8 <cc2400_spi>
	return in & 0xFFFF;
}
    7f6e:	b280      	uxth	r0, r0
    7f70:	bd08      	pop	{r3, pc}

00007f72 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    7f72:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    7f76:	2018      	movs	r0, #24
    7f78:	f7ff bfae 	b.w	7ed8 <cc2400_spi>

00007f7c <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    7f7c:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    7f7e:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    7f82:	0209      	lsls	r1, r1, #8
    7f84:	2010      	movs	r0, #16
    7f86:	f7ff ffa7 	bl	7ed8 <cc2400_spi>
	return in & 0xFF;
}
    7f8a:	b2c0      	uxtb	r0, r0
    7f8c:	bd08      	pop	{r3, pc}

00007f8e <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    7f8e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    7f92:	2010      	movs	r0, #16
    7f94:	f7ff bfa0 	b.w	7ed8 <cc2400_spi>

00007f98 <cc2400_fifo_write>:
       while (--delay_counter);
}


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    7f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    7f9a:	4b21      	ldr	r3, [pc, #132]	; (8020 <cc2400_fifo_write+0x88>)
    7f9c:	2220      	movs	r2, #32
    7f9e:	601a      	str	r2, [r3, #0]
    7fa0:	2308      	movs	r3, #8


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
    7fa2:	2270      	movs	r2, #112	; 0x70

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    7fa4:	f012 0f80 	tst.w	r2, #128	; 0x80
    7fa8:	4d1e      	ldr	r5, [pc, #120]	; (8024 <cc2400_fifo_write+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    7faa:	bf08      	it	eq
    7fac:	4e1c      	ldreq	r6, [pc, #112]	; (8020 <cc2400_fifo_write+0x88>)
    7fae:	f04f 0401 	mov.w	r4, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    7fb2:	bf14      	ite	ne
    7fb4:	602c      	strne	r4, [r5, #0]
		else
			MOSI_CLR;
    7fb6:	6034      	streq	r4, [r6, #0]
		reg <<= 1;
		SCLK_SET;
    7fb8:	2410      	movs	r4, #16
    7fba:	602c      	str	r4, [r5, #0]
    7fbc:	3b01      	subs	r3, #1
		SCLK_CLR;
    7fbe:	4d18      	ldr	r5, [pc, #96]	; (8020 <cc2400_fifo_write+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    7fc0:	0052      	lsls	r2, r2, #1
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    7fc2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    7fc6:	b2d2      	uxtb	r2, r2
		SCLK_SET;
		SCLK_CLR;
    7fc8:	602c      	str	r4, [r5, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    7fca:	d1eb      	bne.n	7fa4 <cc2400_fifo_write+0xc>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    7fcc:	b2da      	uxtb	r2, r3
    7fce:	4282      	cmp	r2, r0
    7fd0:	d217      	bcs.n	8002 <cc2400_fifo_write+0x6a>
		temp = data[i];
    7fd2:	5cca      	ldrb	r2, [r1, r3]
    7fd4:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
    7fd6:	f012 0f80 	tst.w	r2, #128	; 0x80
    7fda:	4e12      	ldr	r6, [pc, #72]	; (8024 <cc2400_fifo_write+0x8c>)
				MOSI_SET;
			else
				MOSI_CLR;
    7fdc:	bf08      	it	eq
    7fde:	4f10      	ldreq	r7, [pc, #64]	; (8020 <cc2400_fifo_write+0x88>)
    7fe0:	f04f 0501 	mov.w	r5, #1

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
    7fe4:	bf14      	ite	ne
    7fe6:	6035      	strne	r5, [r6, #0]
			else
				MOSI_CLR;
    7fe8:	603d      	streq	r5, [r7, #0]
			temp <<= 1;
			SCLK_SET;
    7fea:	2510      	movs	r5, #16
    7fec:	6035      	str	r5, [r6, #0]
    7fee:	3c01      	subs	r4, #1
			SCLK_CLR;
    7ff0:	4e0b      	ldr	r6, [pc, #44]	; (8020 <cc2400_fifo_write+0x88>)
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    7ff2:	0052      	lsls	r2, r2, #1
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    7ff4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    7ff8:	b2d2      	uxtb	r2, r2
			SCLK_SET;
			SCLK_CLR;
    7ffa:	6035      	str	r5, [r6, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    7ffc:	d1eb      	bne.n	7fd6 <cc2400_fifo_write+0x3e>
    7ffe:	3301      	adds	r3, #1
    8000:	e7e4      	b.n	7fcc <cc2400_fifo_write+0x34>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    8002:	2308      	movs	r3, #8
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    8004:	4c07      	ldr	r4, [pc, #28]	; (8024 <cc2400_fifo_write+0x8c>)
		SCLK_CLR;
    8006:	4906      	ldr	r1, [pc, #24]	; (8020 <cc2400_fifo_write+0x88>)
    8008:	3b01      	subs	r3, #1
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    800a:	2210      	movs	r2, #16
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    800c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		SCLK_SET;
    8010:	6022      	str	r2, [r4, #0]
		SCLK_CLR;
    8012:	600a      	str	r2, [r1, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    8014:	d1f6      	bne.n	8004 <cc2400_fifo_write+0x6c>
		SCLK_SET;
		SCLK_CLR;
	}
	
	spi_delay();
    8016:	f7ff feab 	bl	7d70 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    801a:	2320      	movs	r3, #32
    801c:	6023      	str	r3, [r4, #0]
    801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8020:	2009c05c 	.word	0x2009c05c
    8024:	2009c058 	.word	0x2009c058

00008028 <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    8028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    802c:	4b20      	ldr	r3, [pc, #128]	; (80b0 <cc2400_fifo_read+0x88>)
    802e:	2220      	movs	r2, #32
    8030:	601a      	str	r2, [r3, #0]
	/* end transaction by raising CSN */
	CSN_SET;
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    8032:	4607      	mov	r7, r0
    8034:	4688      	mov	r8, r1
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    8036:	2508      	movs	r5, #8
/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
	u8 msb = 1 << 7;
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;
    8038:	23f0      	movs	r3, #240	; 0xf0

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    803a:	f013 0f80 	tst.w	r3, #128	; 0x80
    803e:	491d      	ldr	r1, [pc, #116]	; (80b4 <cc2400_fifo_read+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    8040:	bf08      	it	eq
    8042:	481b      	ldreq	r0, [pc, #108]	; (80b0 <cc2400_fifo_read+0x88>)
    8044:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    8048:	bf14      	ite	ne
    804a:	600a      	strne	r2, [r1, #0]
		else
			MOSI_CLR;
    804c:	6002      	streq	r2, [r0, #0]
		reg <<= 1;
		SCLK_SET;
    804e:	2210      	movs	r2, #16
    8050:	600a      	str	r2, [r1, #0]
    8052:	3d01      	subs	r5, #1
		SCLK_CLR;
    8054:	4916      	ldr	r1, [pc, #88]	; (80b0 <cc2400_fifo_read+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    8056:	005b      	lsls	r3, r3, #1
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8058:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    805c:	b2db      	uxtb	r3, r3
		SCLK_SET;
		SCLK_CLR;
    805e:	600a      	str	r2, [r1, #0]
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8060:	d1eb      	bne.n	803a <cc2400_fifo_read+0x12>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    8062:	b2eb      	uxtb	r3, r5
    8064:	42bb      	cmp	r3, r7
    8066:	d21b      	bcs.n	80a0 <cc2400_fifo_read+0x78>
    8068:	2608      	movs	r6, #8
    806a:	2400      	movs	r4, #0
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
    806c:	f7ff fe80 	bl	7d70 <spi_delay>
			SCLK_SET;
    8070:	4b10      	ldr	r3, [pc, #64]	; (80b4 <cc2400_fifo_read+0x8c>)
    8072:	2210      	movs	r2, #16
    8074:	601a      	str	r2, [r3, #0]
			temp <<= 1;
			if (MISO)
    8076:	3b04      	subs	r3, #4
    8078:	681b      	ldr	r3, [r3, #0]
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    807a:	0064      	lsls	r4, r4, #1
			if (MISO)
    807c:	079a      	lsls	r2, r3, #30
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    807e:	b2e4      	uxtb	r4, r4
			if (MISO)
				temp |= 1;
    8080:	bf48      	it	mi
    8082:	f044 0401 	orrmi.w	r4, r4, #1
    8086:	3e01      	subs	r6, #1
			spi_delay();
    8088:	f7ff fe72 	bl	7d70 <spi_delay>
			SCLK_CLR;
    808c:	4b08      	ldr	r3, [pc, #32]	; (80b0 <cc2400_fifo_read+0x88>)
    808e:	2210      	movs	r2, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8090:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
			SCLK_SET;
			temp <<= 1;
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
    8094:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8096:	d1e9      	bne.n	806c <cc2400_fifo_read+0x44>
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
		}
		buf[i] = temp;
    8098:	f808 4005 	strb.w	r4, [r8, r5]
    809c:	3501      	adds	r5, #1
    809e:	e7e0      	b.n	8062 <cc2400_fifo_read+0x3a>
	}

	/* end transaction by raising CSN */
	spi_delay();
    80a0:	f7ff fe66 	bl	7d70 <spi_delay>
	CSN_SET;
    80a4:	4b03      	ldr	r3, [pc, #12]	; (80b4 <cc2400_fifo_read+0x8c>)
    80a6:	2220      	movs	r2, #32
    80a8:	601a      	str	r2, [r3, #0]
    80aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80ae:	bf00      	nop
    80b0:	2009c05c 	.word	0x2009c05c
    80b4:	2009c058 	.word	0x2009c058

000080b8 <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    80b8:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    80ba:	2100      	movs	r1, #0
    80bc:	2008      	movs	r0, #8
    80be:	f7ff ff0b 	bl	7ed8 <cc2400_spi>
}
    80c2:	b2c0      	uxtb	r0, r0
    80c4:	bd08      	pop	{r3, pc}

000080c6 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    80c6:	b508      	push	{r3, lr}
    80c8:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    80ca:	2008      	movs	r0, #8
    80cc:	f7ff ff04 	bl	7ed8 <cc2400_spi>
}
    80d0:	b2c0      	uxtb	r0, r0
    80d2:	bd08      	pop	{r3, pc}

000080d4 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    80d4:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    80d6:	2018      	movs	r0, #24
    80d8:	2100      	movs	r1, #0
    80da:	f7ff fefd 	bl	7ed8 <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    80de:	2000      	movs	r0, #0
    80e0:	f7ff ff3e 	bl	7f60 <cc2400_get>
    80e4:	2800      	cmp	r0, #0
    80e6:	d1fa      	bne.n	80de <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    80e8:	2018      	movs	r0, #24
    80ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    80ee:	f7ff fef3 	bl	7ed8 <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    80f2:	2000      	movs	r0, #0
    80f4:	f7ff ff34 	bl	7f60 <cc2400_get>
    80f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    80fc:	d1f9      	bne.n	80f2 <cc2400_reset+0x1e>
}
    80fe:	bd08      	pop	{r3, pc}

00008100 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    8100:	b510      	push	{r4, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    8102:	4b46      	ldr	r3, [pc, #280]	; (821c <clock_start+0x11c>)
    8104:	f244 023a 	movw	r2, #16442	; 0x403a
    8108:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    810a:	2200      	movs	r2, #0
    810c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    8110:	3380      	adds	r3, #128	; 0x80
    8112:	681a      	ldr	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    8114:	21aa      	movs	r1, #170	; 0xaa

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    8116:	f022 0202 	bic.w	r2, r2, #2
    811a:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    811c:	4a40      	ldr	r2, [pc, #256]	; (8220 <clock_start+0x120>)
    811e:	6011      	str	r1, [r2, #0]
    8120:	2155      	movs	r1, #85	; 0x55
    8122:	6011      	str	r1, [r2, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    8124:	4a3f      	ldr	r2, [pc, #252]	; (8224 <clock_start+0x124>)
    8126:	6812      	ldr	r2, [r2, #0]
    8128:	0194      	lsls	r4, r2, #6
    812a:	d4fb      	bmi.n	8124 <clock_start+0x24>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    812c:	681a      	ldr	r2, [r3, #0]
    812e:	f022 0201 	bic.w	r2, r2, #1
    8132:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    8134:	4b3a      	ldr	r3, [pc, #232]	; (8220 <clock_start+0x120>)
    8136:	22aa      	movs	r2, #170	; 0xaa
    8138:	601a      	str	r2, [r3, #0]
    813a:	2255      	movs	r2, #85	; 0x55
    813c:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    813e:	4b39      	ldr	r3, [pc, #228]	; (8224 <clock_start+0x124>)
    8140:	681b      	ldr	r3, [r3, #0]
    8142:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    8146:	d1fa      	bne.n	813e <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    8148:	4a37      	ldr	r2, [pc, #220]	; (8228 <clock_start+0x128>)
    814a:	6013      	str	r3, [r2, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    814c:	f7ff ffc2 	bl	80d4 <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8150:	2018      	movs	r0, #24
    8152:	4936      	ldr	r1, [pc, #216]	; (822c <clock_start+0x12c>)
    8154:	f7ff fec0 	bl	7ed8 <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    8158:	2060      	movs	r0, #96	; 0x60
    815a:	f7ff ffb4 	bl	80c6 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    815e:	f7ff ffab 	bl	80b8 <cc2400_status>
    8162:	0640      	lsls	r0, r0, #25
    8164:	d5fb      	bpl.n	815e <clock_start+0x5e>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    8166:	4b32      	ldr	r3, [pc, #200]	; (8230 <clock_start+0x130>)
    8168:	2220      	movs	r2, #32
    816a:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    816c:	681a      	ldr	r2, [r3, #0]
    816e:	0651      	lsls	r1, r2, #25
    8170:	d5fc      	bpl.n	816c <clock_start+0x6c>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    8172:	4b30      	ldr	r3, [pc, #192]	; (8234 <clock_start+0x134>)
    8174:	2208      	movs	r2, #8
    8176:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    8178:	2200      	movs	r2, #0
    817a:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    817c:	2201      	movs	r2, #1
    817e:	f843 2c9c 	str.w	r2, [r3, #-156]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    8182:	4a2d      	ldr	r2, [pc, #180]	; (8238 <clock_start+0x138>)
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
#endif
	PCLKSEL1  = 0;

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    8184:	3b9c      	subs	r3, #156	; 0x9c

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    8186:	f843 2c88 	str.w	r2, [r3, #-136]
	PLL0FEED_SEQUENCE;
    818a:	21aa      	movs	r1, #170	; 0xaa
    818c:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    818e:	482b      	ldr	r0, [pc, #172]	; (823c <clock_start+0x13c>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    8190:	f843 1c80 	str.w	r1, [r3, #-128]
    8194:	f843 2c80 	str.w	r2, [r3, #-128]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    8198:	6804      	ldr	r4, [r0, #0]
    819a:	f044 0401 	orr.w	r4, r4, #1
    819e:	6004      	str	r4, [r0, #0]
	PLL0FEED_SEQUENCE;
    81a0:	f843 1c80 	str.w	r1, [r3, #-128]
    81a4:	f843 2c80 	str.w	r2, [r3, #-128]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    81a8:	4b1e      	ldr	r3, [pc, #120]	; (8224 <clock_start+0x124>)
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	01da      	lsls	r2, r3, #7
    81ae:	d5fb      	bpl.n	81a8 <clock_start+0xa8>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    81b0:	4b1d      	ldr	r3, [pc, #116]	; (8228 <clock_start+0x128>)
    81b2:	2203      	movs	r2, #3
    81b4:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    81b6:	f853 2c84 	ldr.w	r2, [r3, #-132]
    81ba:	f042 0202 	orr.w	r2, r2, #2
    81be:	f843 2c84 	str.w	r2, [r3, #-132]
	PLL0FEED_SEQUENCE;
    81c2:	22aa      	movs	r2, #170	; 0xaa
    81c4:	f843 2c78 	str.w	r2, [r3, #-120]
    81c8:	2255      	movs	r2, #85	; 0x55
    81ca:	f843 2c78 	str.w	r2, [r3, #-120]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    81ce:	4b15      	ldr	r3, [pc, #84]	; (8224 <clock_start+0x124>)
    81d0:	681b      	ldr	r3, [r3, #0]
    81d2:	019b      	lsls	r3, r3, #6
    81d4:	d5fb      	bpl.n	81ce <clock_start+0xce>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    81d6:	4b1a      	ldr	r3, [pc, #104]	; (8240 <clock_start+0x140>)
    81d8:	2222      	movs	r2, #34	; 0x22
    81da:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    81dc:	21aa      	movs	r1, #170	; 0xaa
    81de:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    81e0:	4818      	ldr	r0, [pc, #96]	; (8244 <clock_start+0x144>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    81e2:	6099      	str	r1, [r3, #8]
    81e4:	609a      	str	r2, [r3, #8]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    81e6:	6804      	ldr	r4, [r0, #0]
    81e8:	f044 0401 	orr.w	r4, r4, #1
    81ec:	6004      	str	r4, [r0, #0]
	PLL1FEED_SEQUENCE;
    81ee:	6099      	str	r1, [r3, #8]
    81f0:	609a      	str	r2, [r3, #8]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    81f2:	4b15      	ldr	r3, [pc, #84]	; (8248 <clock_start+0x148>)
    81f4:	681a      	ldr	r2, [r3, #0]
    81f6:	05d4      	lsls	r4, r2, #23
    81f8:	d5fb      	bpl.n	81f2 <clock_start+0xf2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    81fa:	681a      	ldr	r2, [r3, #0]
    81fc:	0550      	lsls	r0, r2, #21
    81fe:	d5fc      	bpl.n	81fa <clock_start+0xfa>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    8200:	4b10      	ldr	r3, [pc, #64]	; (8244 <clock_start+0x144>)
    8202:	681a      	ldr	r2, [r3, #0]
    8204:	f042 0202 	orr.w	r2, r2, #2
    8208:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    820a:	22aa      	movs	r2, #170	; 0xaa
    820c:	60da      	str	r2, [r3, #12]
    820e:	2255      	movs	r2, #85	; 0x55
    8210:	60da      	str	r2, [r3, #12]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    8212:	4b0d      	ldr	r3, [pc, #52]	; (8248 <clock_start+0x148>)
    8214:	681b      	ldr	r3, [r3, #0]
    8216:	0599      	lsls	r1, r3, #22
    8218:	d5fb      	bpl.n	8212 <clock_start+0x112>
}
    821a:	bd10      	pop	{r4, pc}
    821c:	400fc000 	.word	0x400fc000
    8220:	400fc08c 	.word	0x400fc08c
    8224:	400fc088 	.word	0x400fc088
    8228:	400fc104 	.word	0x400fc104
    822c:	00081570 	.word	0x00081570
    8230:	400fc1a0 	.word	0x400fc1a0
    8234:	400fc1a8 	.word	0x400fc1a8
    8238:	00010018 	.word	0x00010018
    823c:	400fc080 	.word	0x400fc080
    8240:	400fc0a4 	.word	0x400fc0a4
    8244:	400fc0a0 	.word	0x400fc0a0
    8248:	400fc0a8 	.word	0x400fc0a8

0000824c <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    824c:	b508      	push	{r3, lr}
	gpio_init();
    824e:	f7ff fde5 	bl	7e1c <gpio_init>
	cc2400_init();
    8252:	f7ff fe69 	bl	7f28 <cc2400_init>
	clock_start();
}
    8256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ubertooth_init()
{
	gpio_init();
	cc2400_init();
	clock_start();
    825a:	f7ff bf51 	b.w	8100 <clock_start>
    825e:	0000      	movs	r0, r0

00008260 <reset>:
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
}

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    8260:	b508      	push	{r3, lr}
	all_pins_off();
    8262:	f7ff fdb1 	bl	7dc8 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    8266:	4b09      	ldr	r3, [pc, #36]	; (828c <reset+0x2c>)
    8268:	2202      	movs	r2, #2
    826a:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    826c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8270:	681a      	ldr	r2, [r3, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8272:	4807      	ldr	r0, [pc, #28]	; (8290 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    8274:	f042 0203 	orr.w	r2, r2, #3
    8278:	601a      	str	r2, [r3, #0]
	WDFEED_SEQUENCE;
    827a:	22aa      	movs	r2, #170	; 0xaa
    827c:	609a      	str	r2, [r3, #8]
    827e:	2255      	movs	r2, #85	; 0x55
    8280:	609a      	str	r2, [r3, #8]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    8282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8286:	f7ff bd83 	b.w	7d90 <wait_us>
    828a:	bf00      	nop
    828c:	2009c03c 	.word	0x2009c03c
    8290:	000f4240 	.word	0x000f4240

00008294 <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8294:	b530      	push	{r4, r5, lr}
    8296:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8298:	2336      	movs	r3, #54	; 0x36
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    829a:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    829c:	a80a      	add	r0, sp, #40	; 0x28
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    829e:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    82a0:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    82a4:	a905      	add	r1, sp, #20
    82a6:	4668      	mov	r0, sp
    82a8:	4b07      	ldr	r3, [pc, #28]	; (82c8 <get_part_num+0x34>)
    82aa:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    82ac:	9b05      	ldr	r3, [sp, #20]
    82ae:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    82b0:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    82b2:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    82b4:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    82b6:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    82b8:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    82ba:	0e1b      	lsrs	r3, r3, #24
    82bc:	7123      	strb	r3, [r4, #4]
	*len = 5;
    82be:	2305      	movs	r3, #5
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    82c0:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	*len = 5;
    82c2:	602b      	str	r3, [r5, #0]
	
}
    82c4:	b00b      	add	sp, #44	; 0x2c
    82c6:	bd30      	pop	{r4, r5, pc}
    82c8:	1fff1ff1 	.word	0x1fff1ff1

000082cc <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    82cc:	b530      	push	{r4, r5, lr}
    82ce:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    82d0:	233a      	movs	r3, #58	; 0x3a
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    82d2:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    82d4:	a80a      	add	r0, sp, #40	; 0x28
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    82d6:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    82d8:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    82dc:	a905      	add	r1, sp, #20
    82de:	4668      	mov	r0, sp
    82e0:	4b13      	ldr	r3, [pc, #76]	; (8330 <get_device_serial+0x64>)
    82e2:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    82e4:	9b05      	ldr	r3, [sp, #20]
    82e6:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    82e8:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    82ea:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    82ec:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    82ee:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    82f0:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    82f2:	0e1b      	lsrs	r3, r3, #24
    82f4:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    82f6:	9b07      	ldr	r3, [sp, #28]
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    82f8:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
    82fa:	0a1a      	lsrs	r2, r3, #8
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
    82fc:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    82fe:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    8300:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    8302:	0e1b      	lsrs	r3, r3, #24
    8304:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    8306:	9b08      	ldr	r3, [sp, #32]
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
    8308:	71e2      	strb	r2, [r4, #7]
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
    830a:	0a1a      	lsrs	r2, r3, #8
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
    830c:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    830e:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    8310:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    8312:	0e1b      	lsrs	r3, r3, #24
    8314:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    8316:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
    8318:	72e2      	strb	r2, [r4, #11]
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
    831a:	0a1a      	lsrs	r2, r3, #8
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
    831c:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    831e:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    8320:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    8322:	0e1b      	lsrs	r3, r3, #24
    8324:	7423      	strb	r3, [r4, #16]
	*len = 17;
    8326:	2311      	movs	r3, #17
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
	buffer[15] = (result[4] >> 16) & 0xFF;
    8328:	73e2      	strb	r2, [r4, #15]
	buffer[16] = (result[4] >> 24) & 0xFF;
	*len = 17;
    832a:	602b      	str	r3, [r5, #0]
}
    832c:	b00b      	add	sp, #44	; 0x2c
    832e:	bd30      	pop	{r4, r5, pc}
    8330:	1fff1ff1 	.word	0x1fff1ff1

00008334 <set_isp>:

void set_isp(void)
{
    8334:	b500      	push	{lr}
    8336:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    8338:	2339      	movs	r3, #57	; 0x39
    833a:	a80a      	add	r0, sp, #40	; 0x28
    833c:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8340:	a905      	add	r1, sp, #20
    8342:	4668      	mov	r0, sp
    8344:	4b02      	ldr	r3, [pc, #8]	; (8350 <set_isp+0x1c>)
    8346:	4798      	blx	r3
}
    8348:	b00b      	add	sp, #44	; 0x2c
    834a:	f85d fb04 	ldr.w	pc, [sp], #4
    834e:	bf00      	nop
    8350:	1fff1ff1 	.word	0x1fff1ff1

00008354 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    8354:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8356:	4c08      	ldr	r4, [pc, #32]	; (8378 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    8358:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    835a:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    835c:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    835e:	2d40      	cmp	r5, #64	; 0x40
    8360:	bfa8      	it	ge
    8362:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    8364:	462a      	mov	r2, r5
    8366:	f000 f955 	bl	8614 <USBHwEPWrite>
	pbData += iChunk;
    836a:	6863      	ldr	r3, [r4, #4]
    836c:	442b      	add	r3, r5
    836e:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    8370:	6823      	ldr	r3, [r4, #0]
    8372:	1b5d      	subs	r5, r3, r5
    8374:	6025      	str	r5, [r4, #0]
    8376:	bd38      	pop	{r3, r4, r5, pc}
    8378:	10000b08 	.word	0x10000b08

0000837c <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    837c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    837e:	4b11      	ldr	r3, [pc, #68]	; (83c4 <_HandleRequest.constprop.1+0x48>)
    8380:	7a1c      	ldrb	r4, [r3, #8]
    8382:	461d      	mov	r5, r3
    8384:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    8388:	2c02      	cmp	r4, #2
    838a:	d10d      	bne.n	83a8 <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    838c:	2200      	movs	r2, #0
    838e:	a902      	add	r1, sp, #8
    8390:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    8394:	f103 0008 	add.w	r0, r3, #8
    8398:	f103 0210 	add.w	r2, r3, #16
    839c:	3304      	adds	r3, #4
    839e:	f000 fa63 	bl	8868 <USBFilterOsVendorMessage>
    83a2:	b108      	cbz	r0, 83a8 <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    83a4:	9801      	ldr	r0, [sp, #4]
    83a6:	e00a      	b.n	83be <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    83a8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    83ac:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    83ae:	b12b      	cbz	r3, 83bc <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    83b0:	4805      	ldr	r0, [pc, #20]	; (83c8 <_HandleRequest.constprop.1+0x4c>)
    83b2:	f100 0108 	add.w	r1, r0, #8
    83b6:	1f02      	subs	r2, r0, #4
    83b8:	4798      	blx	r3
    83ba:	e000      	b.n	83be <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    83bc:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    83be:	b003      	add	sp, #12
    83c0:	bd30      	pop	{r4, r5, pc}
    83c2:	bf00      	nop
    83c4:	10000b08 	.word	0x10000b08
    83c8:	10000b10 	.word	0x10000b10

000083cc <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    83cc:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    83ce:	2800      	cmp	r0, #0
    83d0:	d14a      	bne.n	8468 <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    83d2:	f001 0304 	and.w	r3, r1, #4
    83d6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    83da:	4c25      	ldr	r4, [pc, #148]	; (8470 <USBHandleControlTransfer+0xa4>)
    83dc:	b30b      	cbz	r3, 8422 <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    83de:	2208      	movs	r2, #8
    83e0:	f104 0108 	add.w	r1, r4, #8
    83e4:	f000 f946 	bl	8674 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    83e8:	7a22      	ldrb	r2, [r4, #8]
    83ea:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    83ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    83f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    83f4:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    83f6:	89e3      	ldrh	r3, [r4, #14]
    83f8:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    83fa:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    83fc:	b10b      	cbz	r3, 8402 <USBHandleControlTransfer+0x36>
    83fe:	09d2      	lsrs	r2, r2, #7
    8400:	d034      	beq.n	846c <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    8402:	f7ff ffbb 	bl	837c <_HandleRequest.constprop.1>
    8406:	b928      	cbnz	r0, 8414 <USBHandleControlTransfer+0x48>
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8408:	2080      	movs	r0, #128	; 0x80
    840a:	2101      	movs	r1, #1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    840c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8410:	f000 b8f4 	b.w	85fc <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    8414:	89e2      	ldrh	r2, [r4, #14]
    8416:	6923      	ldr	r3, [r4, #16]
    8418:	429a      	cmp	r2, r3
    841a:	bfd4      	ite	le
    841c:	6022      	strle	r2, [r4, #0]
    841e:	6023      	strgt	r3, [r4, #0]
    8420:	e019      	b.n	8456 <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    8422:	6822      	ldr	r2, [r4, #0]
    8424:	2a00      	cmp	r2, #0
    8426:	dd1a      	ble.n	845e <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    8428:	6861      	ldr	r1, [r4, #4]
    842a:	f000 f923 	bl	8674 <USBHwEPRead>
				if (iChunk < 0) {
    842e:	2800      	cmp	r0, #0
    8430:	dbea      	blt.n	8408 <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    8432:	6863      	ldr	r3, [r4, #4]
    8434:	4403      	add	r3, r0
    8436:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    8438:	6823      	ldr	r3, [r4, #0]
    843a:	1a18      	subs	r0, r3, r0
    843c:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    843e:	b9a8      	cbnz	r0, 846c <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8440:	7a23      	ldrb	r3, [r4, #8]
    8442:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    8446:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    844c:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    844e:	f7ff ff95 	bl	837c <_HandleRequest.constprop.1>
    8452:	2800      	cmp	r0, #0
    8454:	d0d8      	beq.n	8408 <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    845a:	f7ff bf7b 	b.w	8354 <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    845e:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    8464:	f000 b906 	b.w	8674 <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    8468:	2880      	cmp	r0, #128	; 0x80
    846a:	d0f4      	beq.n	8456 <USBHandleControlTransfer+0x8a>
    846c:	bd10      	pop	{r4, pc}
    846e:	bf00      	nop
    8470:	10000b08 	.word	0x10000b08

00008474 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    8474:	4b02      	ldr	r3, [pc, #8]	; (8480 <USBRegisterRequestHandler+0xc>)
    8476:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    847a:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    847c:	6242      	str	r2, [r0, #36]	; 0x24
    847e:	4770      	bx	lr
    8480:	10000b08 	.word	0x10000b08

00008484 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    8484:	4770      	bx	lr
    8486:	0000      	movs	r0, r0

00008488 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    8488:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    848a:	4c0e      	ldr	r4, [pc, #56]	; (84c4 <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    848c:	f000 f994 	bl	87b8 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    8490:	480d      	ldr	r0, [pc, #52]	; (84c8 <USBInit+0x40>)
    8492:	f000 f87d 	bl	8590 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    8496:	4621      	mov	r1, r4
    8498:	2000      	movs	r0, #0
    849a:	f000 f85f 	bl	855c <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    849e:	4621      	mov	r1, r4
    84a0:	2080      	movs	r0, #128	; 0x80
    84a2:	f000 f85b 	bl	855c <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    84a6:	2000      	movs	r0, #0
    84a8:	2140      	movs	r1, #64	; 0x40
    84aa:	f000 f83b 	bl	8524 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    84ae:	2080      	movs	r0, #128	; 0x80
    84b0:	2140      	movs	r1, #64	; 0x40
    84b2:	f000 f837 	bl	8524 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    84b6:	2000      	movs	r0, #0
    84b8:	4904      	ldr	r1, [pc, #16]	; (84cc <USBInit+0x44>)
    84ba:	4a05      	ldr	r2, [pc, #20]	; (84d0 <USBInit+0x48>)
    84bc:	f7ff ffda 	bl	8474 <USBRegisterRequestHandler>

	return TRUE;
}
    84c0:	2001      	movs	r0, #1
    84c2:	bd10      	pop	{r4, pc}
    84c4:	000083cd 	.word	0x000083cd
    84c8:	00008485 	.word	0x00008485
    84cc:	00008969 	.word	0x00008969
    84d0:	10000b3c 	.word	0x10000b3c

000084d4 <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    84d4:	4b03      	ldr	r3, [pc, #12]	; (84e4 <Wait4DevInt+0x10>)
    84d6:	681b      	ldr	r3, [r3, #0]
    84d8:	4003      	ands	r3, r0
    84da:	4283      	cmp	r3, r0
    84dc:	d1fa      	bne.n	84d4 <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    84de:	4b02      	ldr	r3, [pc, #8]	; (84e8 <Wait4DevInt+0x14>)
    84e0:	6018      	str	r0, [r3, #0]
    84e2:	4770      	bx	lr
    84e4:	5000c200 	.word	0x5000c200
    84e8:	5000c208 	.word	0x5000c208

000084ec <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    84ec:	4b04      	ldr	r3, [pc, #16]	; (8500 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    84ee:	0400      	lsls	r0, r0, #16
    84f0:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    84f4:	2230      	movs	r2, #48	; 0x30
    84f6:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    84f8:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    84fa:	2010      	movs	r0, #16
    84fc:	f7ff bfea 	b.w	84d4 <Wait4DevInt>
    8500:	5000c208 	.word	0x5000c208

00008504 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    8504:	b510      	push	{r4, lr}
    8506:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8508:	0424      	lsls	r4, r4, #16
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    // write command code
    USBHwCmd(bCmd);
    850a:	f7ff ffef 	bl	84ec <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    850e:	4b04      	ldr	r3, [pc, #16]	; (8520 <USBHwCmdWrite+0x1c>)
    8510:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    8514:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    8516:	2010      	movs	r0, #16
}
    8518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    851c:	f7ff bfda 	b.w	84d4 <Wait4DevInt>
    8520:	5000c210 	.word	0x5000c210

00008524 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    8524:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    8526:	f000 040f 	and.w	r4, r0, #15
    852a:	09c0      	lsrs	r0, r0, #7
    852c:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    8530:	2201      	movs	r2, #1
    8532:	40a2      	lsls	r2, r4
    8534:	4b08      	ldr	r3, [pc, #32]	; (8558 <USBHwEPConfig+0x34>)
    8536:	6818      	ldr	r0, [r3, #0]
    8538:	4302      	orrs	r2, r0
    853a:	601a      	str	r2, [r3, #0]
    USBEpIn = idx;
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    853c:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    8540:	605c      	str	r4, [r3, #4]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    8542:	6099      	str	r1, [r3, #8]
    Wait4DevInt(EP_RLZED);
    8544:	f7ff ffc6 	bl	84d4 <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8548:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    854c:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    854e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8552:	f7ff bfd7 	b.w	8504 <USBHwCmdWrite>
    8556:	bf00      	nop
    8558:	5000c244 	.word	0x5000c244

0000855c <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    855c:	4a0a      	ldr	r2, [pc, #40]	; (8588 <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    855e:	f000 030f 	and.w	r3, r0, #15
    8562:	09c0      	lsrs	r0, r0, #7

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8564:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    8568:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    856c:	2101      	movs	r1, #1
    856e:	fa01 f000 	lsl.w	r0, r1, r0
    8572:	4b06      	ldr	r3, [pc, #24]	; (858c <USBHwRegisterEPIntHandler+0x30>)
    8574:	681a      	ldr	r2, [r3, #0]
    8576:	4310      	orrs	r0, r2
    8578:	6018      	str	r0, [r3, #0]
    USBDevIntEn |= EP_SLOW;
    857a:	f853 2c30 	ldr.w	r2, [r3, #-48]
    857e:	f042 0204 	orr.w	r2, r2, #4
    8582:	f843 2c30 	str.w	r2, [r3, #-48]
    8586:	4770      	bx	lr
    8588:	10000b44 	.word	0x10000b44
    858c:	5000c234 	.word	0x5000c234

00008590 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    8590:	4b03      	ldr	r3, [pc, #12]	; (85a0 <USBHwRegisterDevIntHandler+0x10>)
    8592:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    8594:	4b03      	ldr	r3, [pc, #12]	; (85a4 <USBHwRegisterDevIntHandler+0x14>)
    8596:	681a      	ldr	r2, [r3, #0]
    8598:	f042 0208 	orr.w	r2, r2, #8
    859c:	601a      	str	r2, [r3, #0]
    859e:	4770      	bx	lr
    85a0:	10000b44 	.word	0x10000b44
    85a4:	5000c204 	.word	0x5000c204

000085a8 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    85a8:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    85ac:	20d0      	movs	r0, #208	; 0xd0
    85ae:	f7ff bfa9 	b.w	8504 <USBHwCmdWrite>

000085b2 <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    85b2:	1c01      	adds	r1, r0, #0
    85b4:	bf18      	it	ne
    85b6:	2101      	movne	r1, #1
    85b8:	20fe      	movs	r0, #254	; 0xfe
    85ba:	f7ff bfa3 	b.w	8504 <USBHwCmdWrite>

000085be <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    85be:	4601      	mov	r1, r0
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    85c0:	20f3      	movs	r0, #243	; 0xf3
    85c2:	f7ff bf9f 	b.w	8504 <USBHwCmdWrite>
    85c6:	0000      	movs	r0, r0

000085c8 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    85c8:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    85ca:	f000 040f 	and.w	r4, r0, #15
    85ce:	09c0      	lsrs	r0, r0, #7
    85d0:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    85d4:	4620      	mov	r0, r4
    85d6:	f7ff ff89 	bl	84ec <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    85da:	0424      	lsls	r4, r4, #16
    85dc:	4b05      	ldr	r3, [pc, #20]	; (85f4 <USBHwEPGetStatus+0x2c>)
    85de:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    85e2:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    85e4:	2020      	movs	r0, #32
    85e6:	f7ff ff75 	bl	84d4 <Wait4DevInt>
    return USBCmdData;
    85ea:	4b03      	ldr	r3, [pc, #12]	; (85f8 <USBHwEPGetStatus+0x30>)
    85ec:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    85ee:	b2c0      	uxtb	r0, r0
    85f0:	bd10      	pop	{r4, pc}
    85f2:	bf00      	nop
    85f4:	5000c210 	.word	0x5000c210
    85f8:	5000c214 	.word	0x5000c214

000085fc <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    85fc:	f000 030f 	and.w	r3, r0, #15
    8600:	09c0      	lsrs	r0, r0, #7
    8602:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    8606:	3100      	adds	r1, #0
    8608:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    860c:	bf18      	it	ne
    860e:	2101      	movne	r1, #1
    8610:	f7ff bf78 	b.w	8504 <USBHwCmdWrite>

00008614 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    8614:	b510      	push	{r4, lr}
    U32 idx;
    
    idx = EP2IDX(bEP);
    8616:	f000 030f 	and.w	r3, r0, #15
    861a:	09c0      	lsrs	r0, r0, #7
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    861c:	4614      	mov	r4, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    861e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    8622:	4a11      	ldr	r2, [pc, #68]	; (8668 <USBHwEPWrite+0x54>)
    8624:	009b      	lsls	r3, r3, #2
    8626:	f043 0302 	orr.w	r3, r3, #2
    862a:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    862c:	4b0f      	ldr	r3, [pc, #60]	; (866c <USBHwEPWrite+0x58>)
    862e:	601c      	str	r4, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    8630:	4b0d      	ldr	r3, [pc, #52]	; (8668 <USBHwEPWrite+0x54>)
    8632:	681a      	ldr	r2, [r3, #0]
    8634:	f012 0202 	ands.w	r2, r2, #2
    8638:	d00e      	beq.n	8658 <USBHwEPWrite+0x44>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    863a:	788a      	ldrb	r2, [r1, #2]
    863c:	78cb      	ldrb	r3, [r1, #3]
    863e:	0412      	lsls	r2, r2, #16
    8640:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    8644:	780b      	ldrb	r3, [r1, #0]
        pbBuf += 4;
    8646:	3104      	adds	r1, #4
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    8648:	431a      	orrs	r2, r3
    864a:	f811 3c03 	ldrb.w	r3, [r1, #-3]
    864e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    8652:	4b07      	ldr	r3, [pc, #28]	; (8670 <USBHwEPWrite+0x5c>)
    8654:	601a      	str	r2, [r3, #0]
    8656:	e7eb      	b.n	8630 <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    8658:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    865a:	f7ff ff47 	bl	84ec <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    865e:	20fa      	movs	r0, #250	; 0xfa
    8660:	f7ff ff44 	bl	84ec <USBHwCmd>
    
    return iLen;
}
    8664:	4620      	mov	r0, r4
    8666:	bd10      	pop	{r4, pc}
    8668:	5000c228 	.word	0x5000c228
    866c:	5000c224 	.word	0x5000c224
    8670:	5000c21c 	.word	0x5000c21c

00008674 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    8674:	b538      	push	{r3, r4, r5, lr}
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    8676:	f000 030f 	and.w	r3, r0, #15
    867a:	09c0      	lsrs	r0, r0, #7
    867c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    8680:	4c14      	ldr	r4, [pc, #80]	; (86d4 <USBHwEPRead+0x60>)
    8682:	009b      	lsls	r3, r3, #2
    8684:	f043 0301 	orr.w	r3, r3, #1
    8688:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    868a:	4b13      	ldr	r3, [pc, #76]	; (86d8 <USBHwEPRead+0x64>)
    868c:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    868e:	051d      	lsls	r5, r3, #20
    8690:	d5fb      	bpl.n	868a <USBHwEPRead+0x16>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    8692:	055c      	lsls	r4, r3, #21
    8694:	d51b      	bpl.n	86ce <USBHwEPRead+0x5a>
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    8696:	f3c3 0509 	ubfx	r5, r3, #0, #10
    
    // get data
    dwData = 0;
    869a:	2300      	movs	r3, #0
    for (i = 0; i < dwLen; i++) {
    869c:	461c      	mov	r4, r3
    869e:	42ac      	cmp	r4, r5
    86a0:	d00b      	beq.n	86ba <USBHwEPRead+0x46>
        if ((i % 4) == 0) {
    86a2:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    86a6:	bf04      	itt	eq
    86a8:	4b0c      	ldreq	r3, [pc, #48]	; (86dc <USBHwEPRead+0x68>)
    86aa:	681b      	ldreq	r3, [r3, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    86ac:	b111      	cbz	r1, 86b4 <USBHwEPRead+0x40>
    86ae:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    86b0:	bf38      	it	cc
    86b2:	550b      	strbcc	r3, [r1, r4]
        }
        dwData >>= 8;
    86b4:	0a1b      	lsrs	r3, r3, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    86b6:	3401      	adds	r4, #1
    86b8:	e7f1      	b.n	869e <USBHwEPRead+0x2a>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    86ba:	4b06      	ldr	r3, [pc, #24]	; (86d4 <USBHwEPRead+0x60>)
    86bc:	2200      	movs	r2, #0
    86be:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    86c0:	f7ff ff14 	bl	84ec <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    86c4:	20f2      	movs	r0, #242	; 0xf2
    86c6:	f7ff ff11 	bl	84ec <USBHwCmd>
    
    return dwLen;
    86ca:	4620      	mov	r0, r4
    86cc:	bd38      	pop	{r3, r4, r5, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    86ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    86d2:	bd38      	pop	{r3, r4, r5, pc}
    86d4:	5000c228 	.word	0x5000c228
    86d8:	5000c220 	.word	0x5000c220
    86dc:	5000c218 	.word	0x5000c218

000086e0 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    86e0:	1c01      	adds	r1, r0, #0
    86e2:	bf18      	it	ne
    86e4:	2101      	movne	r1, #1
    86e6:	20d8      	movs	r0, #216	; 0xd8
    86e8:	f7ff bf0c 	b.w	8504 <USBHwCmdWrite>

000086ec <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    86ec:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    86ee:	4b29      	ldr	r3, [pc, #164]	; (8794 <USBHwISR+0xa8>)
    86f0:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    86f2:	07e1      	lsls	r1, r4, #31
    86f4:	d511      	bpl.n	871a <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    86f6:	2201      	movs	r2, #1
    86f8:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    86fa:	4b27      	ldr	r3, [pc, #156]	; (8798 <USBHwISR+0xac>)
    86fc:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    86fe:	b165      	cbz	r5, 871a <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8700:	20f5      	movs	r0, #245	; 0xf5
    8702:	f7ff fef3 	bl	84ec <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8706:	4b25      	ldr	r3, [pc, #148]	; (879c <USBHwISR+0xb0>)
    8708:	4a25      	ldr	r2, [pc, #148]	; (87a0 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    870a:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    870c:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    870e:	f7ff fee1 	bl	84d4 <Wait4DevInt>
    return USBCmdData;
    8712:	4b24      	ldr	r3, [pc, #144]	; (87a4 <USBHwISR+0xb8>)
    8714:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    8716:	b2c0      	uxtb	r0, r0
    8718:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    871a:	0722      	lsls	r2, r4, #28
    871c:	d517      	bpl.n	874e <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    871e:	4b22      	ldr	r3, [pc, #136]	; (87a8 <USBHwISR+0xbc>)
    8720:	2208      	movs	r2, #8
    8722:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8724:	20fe      	movs	r0, #254	; 0xfe
    8726:	f7ff fee1 	bl	84ec <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    872a:	4b1c      	ldr	r3, [pc, #112]	; (879c <USBHwISR+0xb0>)
    872c:	4a1f      	ldr	r2, [pc, #124]	; (87ac <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    872e:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8730:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    8732:	f7ff fecf 	bl	84d4 <Wait4DevInt>
    return USBCmdData;
    8736:	4b1b      	ldr	r3, [pc, #108]	; (87a4 <USBHwISR+0xb8>)
    8738:	6818      	ldr	r0, [r3, #0]
    873a:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    873c:	f010 0f1a 	tst.w	r0, #26
    8740:	d005      	beq.n	874e <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    8742:	4b15      	ldr	r3, [pc, #84]	; (8798 <USBHwISR+0xac>)
    8744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8746:	b113      	cbz	r3, 874e <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    8748:	f000 0015 	and.w	r0, r0, #21
    874c:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    874e:	0763      	lsls	r3, r4, #29
    8750:	d51e      	bpl.n	8790 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    8752:	4b15      	ldr	r3, [pc, #84]	; (87a8 <USBHwISR+0xbc>)
    8754:	2204      	movs	r2, #4
    8756:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    8758:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
    875a:	2301      	movs	r3, #1
    875c:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    875e:	4a14      	ldr	r2, [pc, #80]	; (87b0 <USBHwISR+0xc4>)
    8760:	6812      	ldr	r2, [r2, #0]
    8762:	4213      	tst	r3, r2
    8764:	d011      	beq.n	878a <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    8766:	4a13      	ldr	r2, [pc, #76]	; (87b4 <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    8768:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    876a:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    876c:	f7ff feb2 	bl	84d4 <Wait4DevInt>
                bEPStat = USBCmdData;
    8770:	4b0c      	ldr	r3, [pc, #48]	; (87a4 <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    8772:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    8774:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    8776:	4b08      	ldr	r3, [pc, #32]	; (8798 <USBHwISR+0xac>)
    8778:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    877c:	b12b      	cbz	r3, 878a <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    877e:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    8782:	b2c0      	uxtb	r0, r0
    8784:	f001 011f 	and.w	r1, r1, #31
    8788:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    878a:	3401      	adds	r4, #1
    878c:	2c20      	cmp	r4, #32
    878e:	d1e4      	bne.n	875a <USBHwISR+0x6e>
    8790:	bd38      	pop	{r3, r4, r5, pc}
    8792:	bf00      	nop
    8794:	5000c200 	.word	0x5000c200
    8798:	10000b44 	.word	0x10000b44
    879c:	5000c210 	.word	0x5000c210
    87a0:	00f50200 	.word	0x00f50200
    87a4:	5000c214 	.word	0x5000c214
    87a8:	5000c208 	.word	0x5000c208
    87ac:	00fe0200 	.word	0x00fe0200
    87b0:	5000c230 	.word	0x5000c230
    87b4:	5000c238 	.word	0x5000c238

000087b8 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    87b8:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    87ba:	4b24      	ldr	r3, [pc, #144]	; (884c <USBHwInit+0x94>)
    87bc:	681a      	ldr	r2, [r3, #0]
    87be:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    87c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    87c6:	601a      	str	r2, [r3, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    87c8:	f853 2c04 	ldr.w	r2, [r3, #-4]
    87cc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    87d0:	f042 0210 	orr.w	r2, r2, #16
    87d4:	f843 2c04 	str.w	r2, [r3, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    87d8:	f853 2c04 	ldr.w	r2, [r3, #-4]
    87dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    87e0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    87e4:	f843 2c04 	str.w	r2, [r3, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    87e8:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    87ec:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
    87f0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    87f4:	f843 2c0c 	str.w	r2, [r3, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    87f8:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    87fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    8800:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    8804:	f843 2c0c 	str.w	r2, [r3, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    8808:	4b11      	ldr	r3, [pc, #68]	; (8850 <USBHwInit+0x98>)
    880a:	681a      	ldr	r2, [r3, #0]
    880c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    8810:	601a      	str	r2, [r3, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    8812:	4b10      	ldr	r3, [pc, #64]	; (8854 <USBHwInit+0x9c>)
    8814:	681a      	ldr	r2, [r3, #0]
    8816:	f042 0212 	orr.w	r2, r2, #18
    881a:	601a      	str	r2, [r3, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    881c:	4b0e      	ldr	r3, [pc, #56]	; (8858 <USBHwInit+0xa0>)
    881e:	681a      	ldr	r2, [r3, #0]
    8820:	0792      	lsls	r2, r2, #30
    8822:	d5fb      	bpl.n	881c <USBHwInit+0x64>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    8824:	681a      	ldr	r2, [r3, #0]
    8826:	06d0      	lsls	r0, r2, #27
    8828:	d5fc      	bpl.n	8824 <USBHwInit+0x6c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    882a:	4b0c      	ldr	r3, [pc, #48]	; (885c <USBHwInit+0xa4>)
    882c:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    882e:	4a0c      	ldr	r2, [pc, #48]	; (8860 <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    8830:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    8832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8836:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    8838:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    883a:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    883c:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    883e:	4b09      	ldr	r3, [pc, #36]	; (8864 <USBHwInit+0xac>)
    8840:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    8842:	f7ff febc 	bl	85be <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    8846:	2001      	movs	r0, #1
    8848:	bd08      	pop	{r3, pc}
    884a:	bf00      	nop
    884c:	4002c010 	.word	0x4002c010
    8850:	400fc0c4 	.word	0x400fc0c4
    8854:	5000cff4 	.word	0x5000cff4
    8858:	5000cff8 	.word	0x5000cff8
    885c:	5000c204 	.word	0x5000c204
    8860:	5000c208 	.word	0x5000c208
    8864:	5000c240 	.word	0x5000c240

00008868 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    8868:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    886a:	4c16      	ldr	r4, [pc, #88]	; (88c4 <USBFilterOsVendorMessage+0x5c>)
    886c:	2500      	movs	r5, #0
    886e:	7824      	ldrb	r4, [r4, #0]
    8870:	b314      	cbz	r4, 88b8 <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    8872:	7846      	ldrb	r6, [r0, #1]
    8874:	42a6      	cmp	r6, r4
    8876:	d121      	bne.n	88bc <USBFilterOsVendorMessage+0x54>
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    8878:	8884      	ldrh	r4, [r0, #4]
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    887a:	600d      	str	r5, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    887c:	2c04      	cmp	r4, #4
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
	
		int iRequestLength = pSetup->wLength;
    887e:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    8880:	8845      	ldrh	r5, [r0, #2]
	
		switch (pSetup->wIndex) {
    8882:	d005      	beq.n	8890 <USBFilterOsVendorMessage+0x28>
    8884:	2c05      	cmp	r4, #5
    8886:	d11b      	bne.n	88c0 <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    8888:	480f      	ldr	r0, [pc, #60]	; (88c8 <USBFilterOsVendorMessage+0x60>)
    888a:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    888c:	2092      	movs	r0, #146	; 0x92
    888e:	e002      	b.n	8896 <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    8890:	480e      	ldr	r0, [pc, #56]	; (88cc <USBFilterOsVendorMessage+0x64>)
    8892:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    8894:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    8896:	6010      	str	r0, [r2, #0]
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
    8898:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    889a:	0a28      	lsrs	r0, r5, #8
    889c:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    889e:	4284      	cmp	r4, r0
    88a0:	db0e      	blt.n	88c0 <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    88a2:	681d      	ldr	r5, [r3, #0]
    88a4:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    88a6:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    88a8:	601d      	str	r5, [r3, #0]
    88aa:	42b0      	cmp	r0, r6
    88ac:	bfd4      	ite	le
    88ae:	6010      	strle	r0, [r2, #0]
    88b0:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    88b2:	2001      	movs	r0, #1
    88b4:	6008      	str	r0, [r1, #0]
		return TRUE;
    88b6:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    88b8:	4620      	mov	r0, r4
    88ba:	bd70      	pop	{r4, r5, r6, pc}
    88bc:	4628      	mov	r0, r5
    88be:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    88c0:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    88c2:	bd70      	pop	{r4, r5, r6, pc}
    88c4:	10000b8c 	.word	0x10000b8c
    88c8:	10000959 	.word	0x10000959
    88cc:	000095e0 	.word	0x000095e0

000088d0 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    88d0:	b510      	push	{r4, lr}
	bMsVendorIndex = bVendorRequestIndex;
    88d2:	4b0a      	ldr	r3, [pc, #40]	; (88fc <USBRegisterWinusbInterface+0x2c>)
    88d4:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    88d6:	b179      	cbz	r1, 88f8 <USBRegisterWinusbInterface+0x28>
    88d8:	4b09      	ldr	r3, [pc, #36]	; (8900 <USBRegisterWinusbInterface+0x30>)
    88da:	2200      	movs	r2, #0
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    88dc:	5c8c      	ldrb	r4, [r1, r2]
    88de:	1e98      	subs	r0, r3, #2
    88e0:	b13c      	cbz	r4, 88f2 <USBRegisterWinusbInterface+0x22>
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    88e2:	3201      	adds	r2, #1
    88e4:	2a26      	cmp	r2, #38	; 0x26
    88e6:	4618      	mov	r0, r3
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    88e8:	f803 4c02 	strb.w	r4, [r3, #-2]
    88ec:	f103 0302 	add.w	r3, r3, #2
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    88f0:	d1f4      	bne.n	88dc <USBRegisterWinusbInterface+0xc>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    88f2:	2300      	movs	r3, #0
    88f4:	7003      	strb	r3, [r0, #0]
	pbWriteCursor[2] = 0;
    88f6:	7083      	strb	r3, [r0, #2]
    88f8:	bd10      	pop	{r4, pc}
    88fa:	bf00      	nop
    88fc:	10000b8c 	.word	0x10000b8c
    8900:	1000099d 	.word	0x1000099d

00008904 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    8904:	4b01      	ldr	r3, [pc, #4]	; (890c <USBRegisterDescriptors+0x8>)
    8906:	6058      	str	r0, [r3, #4]
    8908:	4770      	bx	lr
    890a:	bf00      	nop
    890c:	10000b8c 	.word	0x10000b8c

00008910 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    8910:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    8912:	0a05      	lsrs	r5, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    8914:	2d03      	cmp	r5, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    8916:	b2c6      	uxtb	r6, r0
    8918:	4911      	ldr	r1, [pc, #68]	; (8960 <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    891a:	d108      	bne.n	892e <USBGetDescriptor+0x1e>
    891c:	2eee      	cmp	r6, #238	; 0xee
    891e:	d106      	bne.n	892e <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    8920:	4810      	ldr	r0, [pc, #64]	; (8964 <USBGetDescriptor+0x54>)
    8922:	7809      	ldrb	r1, [r1, #0]
	
	*ppbData = abOsStringDescriptor;
    8924:	3092      	adds	r0, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    8926:	7401      	strb	r1, [r0, #16]
	
	*ppbData = abOsStringDescriptor;
    8928:	6018      	str	r0, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    892a:	2312      	movs	r3, #18
    892c:	e012      	b.n	8954 <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    892e:	6849      	ldr	r1, [r1, #4]
	iCurIndex = 0;
    8930:	2400      	movs	r4, #0
	
	while (pab[DESC_bLength] != 0) {
    8932:	e001      	b.n	8938 <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    8934:	3401      	adds	r4, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    8936:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    8938:	7808      	ldrb	r0, [r1, #0]
    893a:	b180      	cbz	r0, 895e <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    893c:	784f      	ldrb	r7, [r1, #1]
    893e:	42af      	cmp	r7, r5
    8940:	d1f9      	bne.n	8936 <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    8942:	42b4      	cmp	r4, r6
    8944:	d1f6      	bne.n	8934 <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    8946:	2d02      	cmp	r5, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    8948:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    894a:	d106      	bne.n	895a <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    894c:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    894e:	788b      	ldrb	r3, [r1, #2]
    8950:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    8954:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    8956:	2001      	movs	r0, #1
    8958:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    895a:	780b      	ldrb	r3, [r1, #0]
    895c:	e7fa      	b.n	8954 <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    895e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8960:	10000b8c 	.word	0x10000b8c
    8964:	10000959 	.word	0x10000959

00008968 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    896c:	4e4b      	ldr	r6, [pc, #300]	; (8a9c <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    896e:	4604      	mov	r4, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8970:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8972:	460d      	mov	r5, r1
    8974:	4617      	mov	r7, r2
    8976:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8978:	b943      	cbnz	r3, 898c <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    897a:	7826      	ldrb	r6, [r4, #0]
    897c:	f006 061f 	and.w	r6, r6, #31
    8980:	2e01      	cmp	r6, #1
    8982:	d053      	beq.n	8a2c <USBHandleStandardRequest+0xc4>
    8984:	d306      	bcc.n	8994 <USBHandleStandardRequest+0x2c>
    8986:	2e02      	cmp	r6, #2
    8988:	d062      	beq.n	8a50 <USBHandleStandardRequest+0xe8>
    898a:	e081      	b.n	8a90 <USBHandleStandardRequest+0x128>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    898c:	4798      	blx	r3
    898e:	2800      	cmp	r0, #0
    8990:	d0f3      	beq.n	897a <USBHandleStandardRequest+0x12>
    8992:	e080      	b.n	8a96 <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8994:	7862      	ldrb	r2, [r4, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    8996:	683b      	ldr	r3, [r7, #0]

	switch (pSetup->bRequest) {
    8998:	2a09      	cmp	r2, #9
    899a:	d879      	bhi.n	8a90 <USBHandleStandardRequest+0x128>
    899c:	e8df f002 	tbb	[pc, r2]
    89a0:	78787805 	.word	0x78787805
    89a4:	780d0978 	.word	0x780d0978
    89a8:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    89aa:	2200      	movs	r2, #0
    89ac:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    89ae:	705a      	strb	r2, [r3, #1]
    89b0:	e045      	b.n	8a3e <USBHandleStandardRequest+0xd6>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    89b2:	78a0      	ldrb	r0, [r4, #2]
    89b4:	f7ff fdf8 	bl	85a8 <USBHwSetAddress>
    89b8:	e06d      	b.n	8a96 <USBHandleStandardRequest+0x12e>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    89ba:	8860      	ldrh	r0, [r4, #2]
    89bc:	88a1      	ldrh	r1, [r4, #4]
    89be:	462a      	mov	r2, r5
    89c0:	463b      	mov	r3, r7
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    89c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    89c6:	f7ff bfa3 	b.w	8910 <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    89ca:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    89ce:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    89d0:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    89d2:	6028      	str	r0, [r5, #0]
    89d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    89d8:	78a6      	ldrb	r6, [r4, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    89da:	b90e      	cbnz	r6, 89e0 <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    89dc:	4630      	mov	r0, r6
    89de:	e01f      	b.n	8a20 <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    89e0:	27ff      	movs	r7, #255	; 0xff
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    89e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
		bCurConfig = 0xFF;
    89e6:	46b9      	mov	r9, r7
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    89e8:	782b      	ldrb	r3, [r5, #0]
    89ea:	b1c3      	cbz	r3, 8a1e <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    89ec:	786b      	ldrb	r3, [r5, #1]
    89ee:	2b04      	cmp	r3, #4
    89f0:	d006      	beq.n	8a00 <USBHandleStandardRequest+0x98>
    89f2:	2b05      	cmp	r3, #5
    89f4:	d006      	beq.n	8a04 <USBHandleStandardRequest+0x9c>
    89f6:	2b02      	cmp	r3, #2
    89f8:	d10e      	bne.n	8a18 <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    89fa:	f895 9005 	ldrb.w	r9, [r5, #5]
    89fe:	e00b      	b.n	8a18 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    8a00:	78ef      	ldrb	r7, [r5, #3]
    8a02:	e009      	b.n	8a18 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    8a04:	45b1      	cmp	r9, r6
    8a06:	d107      	bne.n	8a18 <USBHandleStandardRequest+0xb0>
    8a08:	b937      	cbnz	r7, 8a18 <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    8a0a:	7969      	ldrb	r1, [r5, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    8a0c:	792b      	ldrb	r3, [r5, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    8a0e:	78a8      	ldrb	r0, [r5, #2]
    8a10:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    8a14:	f7ff fd86 	bl	8524 <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    8a18:	782b      	ldrb	r3, [r5, #0]
    8a1a:	441d      	add	r5, r3
    8a1c:	e7e4      	b.n	89e8 <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    8a1e:	2001      	movs	r0, #1
    8a20:	f7ff fe5e 	bl	86e0 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    8a24:	8863      	ldrh	r3, [r4, #2]
    8a26:	f888 300c 	strb.w	r3, [r8, #12]
    8a2a:	e034      	b.n	8a96 <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8a2c:	7863      	ldrb	r3, [r4, #1]
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    8a2e:	683a      	ldr	r2, [r7, #0]
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8a30:	2b0a      	cmp	r3, #10
    8a32:	d006      	beq.n	8a42 <USBHandleStandardRequest+0xda>
    8a34:	2b0b      	cmp	r3, #11
    8a36:	d007      	beq.n	8a48 <USBHandleStandardRequest+0xe0>
    8a38:	bb53      	cbnz	r3, 8a90 <USBHandleStandardRequest+0x128>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    8a3a:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    8a3c:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    8a3e:	2302      	movs	r3, #2
    8a40:	e004      	b.n	8a4c <USBHandleStandardRequest+0xe4>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    8a42:	2300      	movs	r3, #0
    8a44:	7013      	strb	r3, [r2, #0]
    8a46:	e016      	b.n	8a76 <USBHandleStandardRequest+0x10e>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    8a48:	8863      	ldrh	r3, [r4, #2]
    8a4a:	bb0b      	cbnz	r3, 8a90 <USBHandleStandardRequest+0x128>
			return FALSE;
		}
		*piLen = 0;
    8a4c:	602b      	str	r3, [r5, #0]
    8a4e:	e022      	b.n	8a96 <USBHandleStandardRequest+0x12e>
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    8a50:	f8d7 8000 	ldr.w	r8, [r7]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8a54:	7867      	ldrb	r7, [r4, #1]
    8a56:	2f01      	cmp	r7, #1
    8a58:	d00f      	beq.n	8a7a <USBHandleStandardRequest+0x112>
    8a5a:	d302      	bcc.n	8a62 <USBHandleStandardRequest+0xfa>
    8a5c:	2f03      	cmp	r7, #3
    8a5e:	d010      	beq.n	8a82 <USBHandleStandardRequest+0x11a>
    8a60:	e016      	b.n	8a90 <USBHandleStandardRequest+0x128>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    8a62:	7920      	ldrb	r0, [r4, #4]
    8a64:	f7ff fdb0 	bl	85c8 <USBHwEPGetStatus>
		pbData[1] = 0;
    8a68:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    8a6a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8a6e:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    8a72:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    8a76:	602e      	str	r6, [r5, #0]
    8a78:	e00d      	b.n	8a96 <USBHandleStandardRequest+0x12e>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    8a7a:	8861      	ldrh	r1, [r4, #2]
    8a7c:	b941      	cbnz	r1, 8a90 <USBHandleStandardRequest+0x128>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    8a7e:	7920      	ldrb	r0, [r4, #4]
    8a80:	e003      	b.n	8a8a <USBHandleStandardRequest+0x122>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    8a82:	8863      	ldrh	r3, [r4, #2]
    8a84:	b923      	cbnz	r3, 8a90 <USBHandleStandardRequest+0x128>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    8a86:	7920      	ldrb	r0, [r4, #4]
    8a88:	2101      	movs	r1, #1
    8a8a:	f7ff fdb7 	bl	85fc <USBHwEPStall>
    8a8e:	e002      	b.n	8a96 <USBHandleStandardRequest+0x12e>
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
    8a90:	2000      	movs	r0, #0
    8a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
		return TRUE;
    8a96:	2001      	movs	r0, #1
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    8a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a9c:	10000b8c 	.word	0x10000b8c

00008aa0 <__aeabi_llsl>:
    8aa0:	4091      	lsls	r1, r2
    8aa2:	1c03      	adds	r3, r0, #0
    8aa4:	4090      	lsls	r0, r2
    8aa6:	469c      	mov	ip, r3
    8aa8:	3a20      	subs	r2, #32
    8aaa:	4093      	lsls	r3, r2
    8aac:	4319      	orrs	r1, r3
    8aae:	4252      	negs	r2, r2
    8ab0:	4663      	mov	r3, ip
    8ab2:	40d3      	lsrs	r3, r2
    8ab4:	4319      	orrs	r1, r3
    8ab6:	4770      	bx	lr

00008ab8 <memcmp>:
    8ab8:	2a03      	cmp	r2, #3
    8aba:	b470      	push	{r4, r5, r6}
    8abc:	d914      	bls.n	8ae8 <memcmp+0x30>
    8abe:	ea40 0301 	orr.w	r3, r0, r1
    8ac2:	079b      	lsls	r3, r3, #30
    8ac4:	d111      	bne.n	8aea <memcmp+0x32>
    8ac6:	460c      	mov	r4, r1
    8ac8:	4603      	mov	r3, r0
    8aca:	6825      	ldr	r5, [r4, #0]
    8acc:	681e      	ldr	r6, [r3, #0]
    8ace:	4621      	mov	r1, r4
    8ad0:	42ae      	cmp	r6, r5
    8ad2:	4618      	mov	r0, r3
    8ad4:	f104 0404 	add.w	r4, r4, #4
    8ad8:	f103 0304 	add.w	r3, r3, #4
    8adc:	d104      	bne.n	8ae8 <memcmp+0x30>
    8ade:	3a04      	subs	r2, #4
    8ae0:	2a03      	cmp	r2, #3
    8ae2:	4618      	mov	r0, r3
    8ae4:	4621      	mov	r1, r4
    8ae6:	d8f0      	bhi.n	8aca <memcmp+0x12>
    8ae8:	b1c2      	cbz	r2, 8b1c <memcmp+0x64>
    8aea:	7805      	ldrb	r5, [r0, #0]
    8aec:	780c      	ldrb	r4, [r1, #0]
    8aee:	42a5      	cmp	r5, r4
    8af0:	bf04      	itt	eq
    8af2:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
    8af6:	2300      	moveq	r3, #0
    8af8:	d006      	beq.n	8b08 <memcmp+0x50>
    8afa:	e00c      	b.n	8b16 <memcmp+0x5e>
    8afc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    8b00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8b04:	42a5      	cmp	r5, r4
    8b06:	d106      	bne.n	8b16 <memcmp+0x5e>
    8b08:	4293      	cmp	r3, r2
    8b0a:	f103 0301 	add.w	r3, r3, #1
    8b0e:	d1f5      	bne.n	8afc <memcmp+0x44>
    8b10:	2000      	movs	r0, #0
    8b12:	bc70      	pop	{r4, r5, r6}
    8b14:	4770      	bx	lr
    8b16:	1b28      	subs	r0, r5, r4
    8b18:	bc70      	pop	{r4, r5, r6}
    8b1a:	4770      	bx	lr
    8b1c:	4610      	mov	r0, r2
    8b1e:	e7f8      	b.n	8b12 <memcmp+0x5a>

00008b20 <memcpy>:
    8b20:	4684      	mov	ip, r0
    8b22:	ea41 0300 	orr.w	r3, r1, r0
    8b26:	f013 0303 	ands.w	r3, r3, #3
    8b2a:	d149      	bne.n	8bc0 <memcpy+0xa0>
    8b2c:	3a40      	subs	r2, #64	; 0x40
    8b2e:	d323      	bcc.n	8b78 <memcpy+0x58>
    8b30:	680b      	ldr	r3, [r1, #0]
    8b32:	6003      	str	r3, [r0, #0]
    8b34:	684b      	ldr	r3, [r1, #4]
    8b36:	6043      	str	r3, [r0, #4]
    8b38:	688b      	ldr	r3, [r1, #8]
    8b3a:	6083      	str	r3, [r0, #8]
    8b3c:	68cb      	ldr	r3, [r1, #12]
    8b3e:	60c3      	str	r3, [r0, #12]
    8b40:	690b      	ldr	r3, [r1, #16]
    8b42:	6103      	str	r3, [r0, #16]
    8b44:	694b      	ldr	r3, [r1, #20]
    8b46:	6143      	str	r3, [r0, #20]
    8b48:	698b      	ldr	r3, [r1, #24]
    8b4a:	6183      	str	r3, [r0, #24]
    8b4c:	69cb      	ldr	r3, [r1, #28]
    8b4e:	61c3      	str	r3, [r0, #28]
    8b50:	6a0b      	ldr	r3, [r1, #32]
    8b52:	6203      	str	r3, [r0, #32]
    8b54:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    8b56:	6243      	str	r3, [r0, #36]	; 0x24
    8b58:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8b5a:	6283      	str	r3, [r0, #40]	; 0x28
    8b5c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    8b5e:	62c3      	str	r3, [r0, #44]	; 0x2c
    8b60:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    8b62:	6303      	str	r3, [r0, #48]	; 0x30
    8b64:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    8b66:	6343      	str	r3, [r0, #52]	; 0x34
    8b68:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    8b6a:	6383      	str	r3, [r0, #56]	; 0x38
    8b6c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    8b6e:	63c3      	str	r3, [r0, #60]	; 0x3c
    8b70:	3040      	adds	r0, #64	; 0x40
    8b72:	3140      	adds	r1, #64	; 0x40
    8b74:	3a40      	subs	r2, #64	; 0x40
    8b76:	d2db      	bcs.n	8b30 <memcpy+0x10>
    8b78:	3230      	adds	r2, #48	; 0x30
    8b7a:	d30b      	bcc.n	8b94 <memcpy+0x74>
    8b7c:	680b      	ldr	r3, [r1, #0]
    8b7e:	6003      	str	r3, [r0, #0]
    8b80:	684b      	ldr	r3, [r1, #4]
    8b82:	6043      	str	r3, [r0, #4]
    8b84:	688b      	ldr	r3, [r1, #8]
    8b86:	6083      	str	r3, [r0, #8]
    8b88:	68cb      	ldr	r3, [r1, #12]
    8b8a:	60c3      	str	r3, [r0, #12]
    8b8c:	3010      	adds	r0, #16
    8b8e:	3110      	adds	r1, #16
    8b90:	3a10      	subs	r2, #16
    8b92:	d2f3      	bcs.n	8b7c <memcpy+0x5c>
    8b94:	320c      	adds	r2, #12
    8b96:	d305      	bcc.n	8ba4 <memcpy+0x84>
    8b98:	f851 3b04 	ldr.w	r3, [r1], #4
    8b9c:	f840 3b04 	str.w	r3, [r0], #4
    8ba0:	3a04      	subs	r2, #4
    8ba2:	d2f9      	bcs.n	8b98 <memcpy+0x78>
    8ba4:	3204      	adds	r2, #4
    8ba6:	d008      	beq.n	8bba <memcpy+0x9a>
    8ba8:	07d2      	lsls	r2, r2, #31
    8baa:	bf1c      	itt	ne
    8bac:	f811 3b01 	ldrbne.w	r3, [r1], #1
    8bb0:	f800 3b01 	strbne.w	r3, [r0], #1
    8bb4:	d301      	bcc.n	8bba <memcpy+0x9a>
    8bb6:	880b      	ldrh	r3, [r1, #0]
    8bb8:	8003      	strh	r3, [r0, #0]
    8bba:	4660      	mov	r0, ip
    8bbc:	4770      	bx	lr
    8bbe:	bf00      	nop
    8bc0:	2a08      	cmp	r2, #8
    8bc2:	d313      	bcc.n	8bec <memcpy+0xcc>
    8bc4:	078b      	lsls	r3, r1, #30
    8bc6:	d0b1      	beq.n	8b2c <memcpy+0xc>
    8bc8:	f010 0303 	ands.w	r3, r0, #3
    8bcc:	d0ae      	beq.n	8b2c <memcpy+0xc>
    8bce:	f1c3 0304 	rsb	r3, r3, #4
    8bd2:	1ad2      	subs	r2, r2, r3
    8bd4:	07db      	lsls	r3, r3, #31
    8bd6:	bf1c      	itt	ne
    8bd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    8bdc:	f800 3b01 	strbne.w	r3, [r0], #1
    8be0:	d3a4      	bcc.n	8b2c <memcpy+0xc>
    8be2:	f831 3b02 	ldrh.w	r3, [r1], #2
    8be6:	f820 3b02 	strh.w	r3, [r0], #2
    8bea:	e79f      	b.n	8b2c <memcpy+0xc>
    8bec:	3a04      	subs	r2, #4
    8bee:	d3d9      	bcc.n	8ba4 <memcpy+0x84>
    8bf0:	3a01      	subs	r2, #1
    8bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
    8bf6:	f800 3b01 	strb.w	r3, [r0], #1
    8bfa:	d2f9      	bcs.n	8bf0 <memcpy+0xd0>
    8bfc:	780b      	ldrb	r3, [r1, #0]
    8bfe:	7003      	strb	r3, [r0, #0]
    8c00:	784b      	ldrb	r3, [r1, #1]
    8c02:	7043      	strb	r3, [r0, #1]
    8c04:	788b      	ldrb	r3, [r1, #2]
    8c06:	7083      	strb	r3, [r0, #2]
    8c08:	4660      	mov	r0, ip
    8c0a:	4770      	bx	lr

00008c0c <strlen>:
    8c0c:	f020 0103 	bic.w	r1, r0, #3
    8c10:	f010 0003 	ands.w	r0, r0, #3
    8c14:	f1c0 0000 	rsb	r0, r0, #0
    8c18:	f851 3b04 	ldr.w	r3, [r1], #4
    8c1c:	f100 0c04 	add.w	ip, r0, #4
    8c20:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    8c24:	f06f 0200 	mvn.w	r2, #0
    8c28:	bf1c      	itt	ne
    8c2a:	fa22 f20c 	lsrne.w	r2, r2, ip
    8c2e:	4313      	orrne	r3, r2
    8c30:	f04f 0c01 	mov.w	ip, #1
    8c34:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    8c38:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    8c3c:	eba3 020c 	sub.w	r2, r3, ip
    8c40:	ea22 0203 	bic.w	r2, r2, r3
    8c44:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    8c48:	bf04      	itt	eq
    8c4a:	f851 3b04 	ldreq.w	r3, [r1], #4
    8c4e:	3004      	addeq	r0, #4
    8c50:	d0f4      	beq.n	8c3c <strlen+0x30>
    8c52:	f013 0fff 	tst.w	r3, #255	; 0xff
    8c56:	bf1f      	itttt	ne
    8c58:	3001      	addne	r0, #1
    8c5a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    8c5e:	3001      	addne	r0, #1
    8c60:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    8c64:	bf18      	it	ne
    8c66:	3001      	addne	r0, #1
    8c68:	4770      	bx	lr
    8c6a:	bf00      	nop
    8c6c:	00000043 	.word	0x00000043

00008c70 <_global_impure_ptr>:
    8c70:	10000020                                 ...

00008c74 <whitening_index>:
    8c74:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    8c84:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    8c94:	5a541b28 662f703f                       (.TZ?p/f

00008c9c <whitening>:
    8c9c:	01010101 01000100 00000100 00010000     ................
    8cac:	01000101 00010101 01010100 00010000     ................
    8cbc:	01010001 01010000 00000000 00010100     ................
    8ccc:	01000101 01010100 00000100 00010100     ................
    8cdc:	00000100 00000100 00000000 01000001     ................
    8cec:	01010000 00000100 01010101 01010100     ................
    8cfc:	00000000 01010101 00010101 01010000     ................
    8d0c:	01010001 01000000 00000100 75010001              ...............

00008d1b <compile_info>:
    8d1b:	72656275 746f6f74 30322068 302d3731     ubertooth 2017-0
    8d2b:	32522d33 776d2820 6d406c6e 2d6c6e77     3-R2 (mwnl@mwnl-
    8d3b:	6f6e656c 20296f76 38313032 3530202e     lenovo) 2018. 05
    8d4b:	3930202e ec28202e 20299888 323a3031     . 09. (...) 10:2
    8d5b:	36313a34 54534b20 bcb24000                       4:16 KST.

00008d64 <whitening_word>:
    8d64:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    8d74:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    8d84:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    8d94:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    8da4:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    8db4:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    8dc4:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    8dd4:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    8de4:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    8df4:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    8e04:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    8e14:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    8e24:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    8e34:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    8e44:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    8e54:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    8e64:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    8e74:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    8e84:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    8e94:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    8ea4:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    8eb4:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    8ec4:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    8ed4:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    8ee4:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    8ef4:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    8f04:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    8f14:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    8f24:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    8f34:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    8f44:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    8f54:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    8f64:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    8f74:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    8f84:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    8f94:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    8fa4:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    8fb4:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    8fc4:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    8fd4:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    8fe4:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    8ff4:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    9004:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    9014:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    9024:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    9034:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    9044:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    9054:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    9064:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    9074:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    9084:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    9094:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    90a4:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    90b4:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    90c4:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    90d4:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    90e4:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    90f4:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    9104:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    9114:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    9124:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    9134:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    9144:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    9154:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    9164:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    9174:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    9184:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    9194:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    91a4:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    91b4:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    91c4:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    91d4:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    91e4:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    91f4:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    9204:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    9214:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    9224:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    9234:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    9244:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    9254:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    9264:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    9274:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    9284:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    9294:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    92a4:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    92b4:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    92c4:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    92d4:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    92e4:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    92f4:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    9304:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    9314:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    9324:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    9334:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    9344:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    9354:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    9364:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    9374:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    9384:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    9394:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    93a4:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    93b4:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    93c4:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    93d4:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    93e4:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    93f4:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    9404:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    9414:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    9424:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    9434:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    9444:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    9454:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    9464:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    9474:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    9484:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    9494:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    94a4:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    94b4:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    94c4:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    94d4:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

000094e4 <hop_interval_lut>:
    94e4:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    94f4:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    9504:	120c0916 00000024 00000001 00000001     ....$...........
    9514:	00000001 00000001 ffff0f00 ffffffff     ................
    9524:	13060105 13131313 ffffff13 0985096c     ............l...
    9534:	0000099e 37313032 2d33302d 00003252              ....2017-03-R2.

00009543 <index1.3911>:
    9543:	03010200 03000100 01020001 03010100              ..............

00009551 <index2.3912>:
    9551:	04020301 04020304 03040304 387b0203     ..............{8
    9561:	37346361 2d383861 36326363 6161342d     ac47a88-cc26-4aa
    9571:	38382d39 342d6237 38616332 37306663     9-887b-42ca8cf07
    9581:	7d333661 68000000                                a63}...

00009588 <channels>:
    9588:	09720968 09a50977                       h.r.w...

00009590 <follow_handler.4002>:
    9590:	000078e5 00007905 00007c09 00007a61     .x...y...|..az..
    95a0:	000078e1 000078e1 000078e1              .x...x...x..

000095ac <continuous_rx_handler.4003>:
    95ac:	000078fd 00007905 00007b29 000078e1     .x...y..){...x..
    95bc:	000078e1 000078e1                       .x...x..

000095c4 <jam_handler.4004>:
    95c4:	000078e5 00007905 00007ba5 00007aa9     .x...y...{...z..
    95d4:	000079bd 00007ac9                       .y...z..

000095dc <iap_entry>:
    95dc:	1fff1ff1                                ....

000095e0 <abExtendedOsFeatureDescriptor>:
    95e0:	00000028 00040100 00000001 00000000     (...............
    95f0:	49570100 4253554e 00000000 00000000     ..WINUSB........
    9600:	00000000 00000000                       ........

00009608 <_init>:
    9608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    960a:	bf00      	nop
    960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    960e:	bc08      	pop	{r3}
    9610:	469e      	mov	lr, r3
    9612:	4770      	bx	lr

00009614 <__init_array_start>:
    9614:	00004371 	.word	0x00004371

00009618 <__frame_dummy_init_array_entry>:
    9618:	00004155                                UA..

0000961c <_fini>:
    961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    961e:	bf00      	nop
    9620:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9622:	bc08      	pop	{r3}
    9624:	469e      	mov	lr, r3
    9626:	4770      	bx	lr

00009628 <__fini_array_start>:
    9628:	00004125 	.word	0x00004125

0000962c <__fini_array_end>:
    962c:	00000000 	.word	0x00000000


bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006bd8  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000df4  10000020  0000abd8  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000029a8  10000e18  0000b9cc  00010e18  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010e14  2**0
                  CONTENTS, READONLY
  5 .comment      0000001f  00000000  00000000  00010e3d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001032c  00000000  00000000  00010e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cfe  00000000  00000000  00021188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c50  00000000  00000000  00024e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009d0  00000000  00000000  0002bad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a38  00000000  00000000  0002c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000043bf  00000000  00000000  0002cee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003351  00000000  00000000  0003129f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000016d0  00000000  00000000  000345f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 b1 86 00 00 05 87 00 00 05 87 00 00     .?..............
    4010:	05 87 00 00 05 87 00 00 05 87 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 05 87 00 00     ................
    4030:	05 87 00 00 00 00 00 00 05 87 00 00 05 87 00 00     ................
    4040:	05 87 00 00 f5 4f 00 00 05 87 00 00 05 87 00 00     .....O..........
    4050:	05 87 00 00 05 87 00 00 05 87 00 00 05 87 00 00     ................
    4060:	05 87 00 00 05 87 00 00 05 87 00 00 05 87 00 00     ................
    4070:	05 87 00 00 05 87 00 00 05 87 00 00 05 87 00 00     ................
    4080:	05 87 00 00 05 87 00 00 05 87 00 00 05 87 00 00     ................
    4090:	05 87 00 00 35 51 00 00 05 87 00 00 05 87 00 00     ....5Q..........
    40a0:	ad 86 00 00 05 87 00 00 69 51 00 00 05 87 00 00     ........iQ......
    40b0:	05 87 00 00 05 87 00 00 05 87 00 00 05 87 00 00     ................
    40c0:	05 87 00 00 05 87 00 00 05 87 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	b508      	push	{r3, lr}
    40ce:	f640 6014 	movw	r0, #3604	; 0xe14
    40d2:	4b07      	ldr	r3, [pc, #28]	; (40f0 <deregister_tm_clones+0x24>)
    40d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    40d8:	1a1b      	subs	r3, r3, r0
    40da:	2b06      	cmp	r3, #6
    40dc:	d800      	bhi.n	40e0 <deregister_tm_clones+0x14>
    40de:	bd08      	pop	{r3, pc}
    40e0:	f240 0300 	movw	r3, #0
    40e4:	f2c0 0300 	movt	r3, #0
    40e8:	2b00      	cmp	r3, #0
    40ea:	d0f8      	beq.n	40de <deregister_tm_clones+0x12>
    40ec:	4798      	blx	r3
    40ee:	e7f6      	b.n	40de <deregister_tm_clones+0x12>
    40f0:	10000e17 	.word	0x10000e17

000040f4 <register_tm_clones>:
    40f4:	b508      	push	{r3, lr}
    40f6:	f640 6014 	movw	r0, #3604	; 0xe14
    40fa:	f640 6314 	movw	r3, #3604	; 0xe14
    40fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4102:	f2c1 0000 	movt	r0, #4096	; 0x1000
    4106:	1a1b      	subs	r3, r3, r0
    4108:	109b      	asrs	r3, r3, #2
    410a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    410e:	1059      	asrs	r1, r3, #1
    4110:	d100      	bne.n	4114 <register_tm_clones+0x20>
    4112:	bd08      	pop	{r3, pc}
    4114:	f240 0200 	movw	r2, #0
    4118:	f2c0 0200 	movt	r2, #0
    411c:	2a00      	cmp	r2, #0
    411e:	d0f8      	beq.n	4112 <register_tm_clones+0x1e>
    4120:	4790      	blx	r2
    4122:	e7f6      	b.n	4112 <register_tm_clones+0x1e>

00004124 <__do_global_dtors_aux>:
    4124:	b510      	push	{r4, lr}
    4126:	f640 6418 	movw	r4, #3608	; 0xe18
    412a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    412e:	7823      	ldrb	r3, [r4, #0]
    4130:	b973      	cbnz	r3, 4150 <__do_global_dtors_aux+0x2c>
    4132:	f7ff ffcb 	bl	40cc <deregister_tm_clones>
    4136:	f240 0300 	movw	r3, #0
    413a:	f2c0 0300 	movt	r3, #0
    413e:	b12b      	cbz	r3, 414c <__do_global_dtors_aux+0x28>
    4140:	f64a 30b0 	movw	r0, #43952	; 0xabb0
    4144:	f2c0 0000 	movt	r0, #0
    4148:	f3af 8000 	nop.w
    414c:	2301      	movs	r3, #1
    414e:	7023      	strb	r3, [r4, #0]
    4150:	bd10      	pop	{r4, pc}
    4152:	bf00      	nop

00004154 <frame_dummy>:
    4154:	b508      	push	{r3, lr}
    4156:	f240 0300 	movw	r3, #0
    415a:	f2c0 0300 	movt	r3, #0
    415e:	b14b      	cbz	r3, 4174 <frame_dummy+0x20>
    4160:	f64a 30b0 	movw	r0, #43952	; 0xabb0
    4164:	f640 611c 	movw	r1, #3612	; 0xe1c
    4168:	f2c0 0000 	movt	r0, #0
    416c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4170:	f3af 8000 	nop.w
    4174:	f640 6014 	movw	r0, #3604	; 0xe14
    4178:	f2c1 0000 	movt	r0, #4096	; 0x1000
    417c:	6803      	ldr	r3, [r0, #0]
    417e:	b12b      	cbz	r3, 418c <frame_dummy+0x38>
    4180:	f240 0300 	movw	r3, #0
    4184:	f2c0 0300 	movt	r3, #0
    4188:	b103      	cbz	r3, 418c <frame_dummy+0x38>
    418a:	4798      	blx	r3
    418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4190:	e7b0      	b.n	40f4 <register_tm_clones>
    4192:	bf00      	nop

00004194 <atexit>:
    4194:	4601      	mov	r1, r0
    4196:	2000      	movs	r0, #0
    4198:	4602      	mov	r2, r0
    419a:	4603      	mov	r3, r0
    419c:	f000 b892 	b.w	42c4 <__register_exitproc>

000041a0 <__libc_fini_array>:
    41a0:	b538      	push	{r3, r4, r5, lr}
    41a2:	f64a 34d4 	movw	r4, #43988	; 0xabd4
    41a6:	f64a 35d0 	movw	r5, #43984	; 0xabd0
    41aa:	f2c0 0500 	movt	r5, #0
    41ae:	f2c0 0400 	movt	r4, #0
    41b2:	1b64      	subs	r4, r4, r5
    41b4:	10a4      	asrs	r4, r4, #2
    41b6:	bf18      	it	ne
    41b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    41bc:	d005      	beq.n	41ca <__libc_fini_array+0x2a>
    41be:	3c01      	subs	r4, #1
    41c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    41c4:	4798      	blx	r3
    41c6:	2c00      	cmp	r4, #0
    41c8:	d1f9      	bne.n	41be <__libc_fini_array+0x1e>
    41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41ce:	f006 bcf9 	b.w	abc4 <_fini>
    41d2:	bf00      	nop

000041d4 <__libc_init_array>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	f64a 36bc 	movw	r6, #43964	; 0xabbc
    41da:	f64a 35bc 	movw	r5, #43964	; 0xabbc
    41de:	f2c0 0500 	movt	r5, #0
    41e2:	f2c0 0600 	movt	r6, #0
    41e6:	1b76      	subs	r6, r6, r5
    41e8:	10b6      	asrs	r6, r6, #2
    41ea:	bf1c      	itt	ne
    41ec:	3d04      	subne	r5, #4
    41ee:	2400      	movne	r4, #0
    41f0:	d005      	beq.n	41fe <__libc_init_array+0x2a>
    41f2:	3401      	adds	r4, #1
    41f4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    41f8:	4798      	blx	r3
    41fa:	42a6      	cmp	r6, r4
    41fc:	d1f9      	bne.n	41f2 <__libc_init_array+0x1e>
    41fe:	f64a 36c4 	movw	r6, #43972	; 0xabc4
    4202:	f64a 35bc 	movw	r5, #43964	; 0xabbc
    4206:	f2c0 0500 	movt	r5, #0
    420a:	f2c0 0600 	movt	r6, #0
    420e:	1b76      	subs	r6, r6, r5
    4210:	f006 fcce 	bl	abb0 <_init>
    4214:	10b6      	asrs	r6, r6, #2
    4216:	bf1c      	itt	ne
    4218:	3d04      	subne	r5, #4
    421a:	2400      	movne	r4, #0
    421c:	d006      	beq.n	422c <__libc_init_array+0x58>
    421e:	3401      	adds	r4, #1
    4220:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4224:	4798      	blx	r3
    4226:	42a6      	cmp	r6, r4
    4228:	d1f9      	bne.n	421e <__libc_init_array+0x4a>
    422a:	bd70      	pop	{r4, r5, r6, pc}
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	bf00      	nop

00004230 <memset>:
    4230:	b4f0      	push	{r4, r5, r6, r7}
    4232:	0784      	lsls	r4, r0, #30
    4234:	d043      	beq.n	42be <memset+0x8e>
    4236:	1e54      	subs	r4, r2, #1
    4238:	2a00      	cmp	r2, #0
    423a:	d03e      	beq.n	42ba <memset+0x8a>
    423c:	b2cd      	uxtb	r5, r1
    423e:	4603      	mov	r3, r0
    4240:	e003      	b.n	424a <memset+0x1a>
    4242:	1e62      	subs	r2, r4, #1
    4244:	2c00      	cmp	r4, #0
    4246:	d038      	beq.n	42ba <memset+0x8a>
    4248:	4614      	mov	r4, r2
    424a:	f803 5b01 	strb.w	r5, [r3], #1
    424e:	079a      	lsls	r2, r3, #30
    4250:	d1f7      	bne.n	4242 <memset+0x12>
    4252:	2c03      	cmp	r4, #3
    4254:	d92a      	bls.n	42ac <memset+0x7c>
    4256:	b2cd      	uxtb	r5, r1
    4258:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    425c:	2c0f      	cmp	r4, #15
    425e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4262:	d915      	bls.n	4290 <memset+0x60>
    4264:	f1a4 0710 	sub.w	r7, r4, #16
    4268:	093f      	lsrs	r7, r7, #4
    426a:	f103 0610 	add.w	r6, r3, #16
    426e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    4272:	461a      	mov	r2, r3
    4274:	6015      	str	r5, [r2, #0]
    4276:	6055      	str	r5, [r2, #4]
    4278:	6095      	str	r5, [r2, #8]
    427a:	60d5      	str	r5, [r2, #12]
    427c:	3210      	adds	r2, #16
    427e:	42b2      	cmp	r2, r6
    4280:	d1f8      	bne.n	4274 <memset+0x44>
    4282:	f004 040f 	and.w	r4, r4, #15
    4286:	3701      	adds	r7, #1
    4288:	2c03      	cmp	r4, #3
    428a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    428e:	d90d      	bls.n	42ac <memset+0x7c>
    4290:	461e      	mov	r6, r3
    4292:	4622      	mov	r2, r4
    4294:	3a04      	subs	r2, #4
    4296:	2a03      	cmp	r2, #3
    4298:	f846 5b04 	str.w	r5, [r6], #4
    429c:	d8fa      	bhi.n	4294 <memset+0x64>
    429e:	1f22      	subs	r2, r4, #4
    42a0:	f022 0203 	bic.w	r2, r2, #3
    42a4:	3204      	adds	r2, #4
    42a6:	4413      	add	r3, r2
    42a8:	f004 0403 	and.w	r4, r4, #3
    42ac:	b12c      	cbz	r4, 42ba <memset+0x8a>
    42ae:	b2c9      	uxtb	r1, r1
    42b0:	441c      	add	r4, r3
    42b2:	f803 1b01 	strb.w	r1, [r3], #1
    42b6:	42a3      	cmp	r3, r4
    42b8:	d1fb      	bne.n	42b2 <memset+0x82>
    42ba:	bcf0      	pop	{r4, r5, r6, r7}
    42bc:	4770      	bx	lr
    42be:	4614      	mov	r4, r2
    42c0:	4603      	mov	r3, r0
    42c2:	e7c6      	b.n	4252 <memset+0x22>

000042c4 <__register_exitproc>:
    42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c6:	f24a 2414 	movw	r4, #41492	; 0xa214
    42ca:	f2c0 0400 	movt	r4, #0
    42ce:	6826      	ldr	r6, [r4, #0]
    42d0:	b085      	sub	sp, #20
    42d2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    42d6:	4607      	mov	r7, r0
    42d8:	2c00      	cmp	r4, #0
    42da:	d043      	beq.n	4364 <__register_exitproc+0xa0>
    42dc:	6865      	ldr	r5, [r4, #4]
    42de:	2d1f      	cmp	r5, #31
    42e0:	dd21      	ble.n	4326 <__register_exitproc+0x62>
    42e2:	f649 045d 	movw	r4, #39005	; 0x985d
    42e6:	f2c0 0400 	movt	r4, #0
    42ea:	b91c      	cbnz	r4, 42f4 <__register_exitproc+0x30>
    42ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f0:	b005      	add	sp, #20
    42f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42f8:	9103      	str	r1, [sp, #12]
    42fa:	9202      	str	r2, [sp, #8]
    42fc:	9301      	str	r3, [sp, #4]
    42fe:	f005 faad 	bl	985c <malloc>
    4302:	9903      	ldr	r1, [sp, #12]
    4304:	4604      	mov	r4, r0
    4306:	9a02      	ldr	r2, [sp, #8]
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	2800      	cmp	r0, #0
    430c:	d0ee      	beq.n	42ec <__register_exitproc+0x28>
    430e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    4312:	2000      	movs	r0, #0
    4314:	6025      	str	r5, [r4, #0]
    4316:	6060      	str	r0, [r4, #4]
    4318:	4605      	mov	r5, r0
    431a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    431e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    4322:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    4326:	b93f      	cbnz	r7, 4338 <__register_exitproc+0x74>
    4328:	1c6b      	adds	r3, r5, #1
    432a:	2000      	movs	r0, #0
    432c:	3502      	adds	r5, #2
    432e:	6063      	str	r3, [r4, #4]
    4330:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    4334:	b005      	add	sp, #20
    4336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4338:	2601      	movs	r6, #1
    433a:	40ae      	lsls	r6, r5
    433c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    4340:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    4344:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    4348:	2f02      	cmp	r7, #2
    434a:	ea42 0206 	orr.w	r2, r2, r6
    434e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    4352:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4356:	bf02      	ittt	eq
    4358:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
    435c:	431e      	orreq	r6, r3
    435e:	f8c4 618c 	streq.w	r6, [r4, #396]	; 0x18c
    4362:	e7e1      	b.n	4328 <__register_exitproc+0x64>
    4364:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    4368:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    436c:	e7b6      	b.n	42dc <__register_exitproc+0x18>
    436e:	bf00      	nop

00004370 <register_fini>:
    4370:	f240 0300 	movw	r3, #0
    4374:	f2c0 0300 	movt	r3, #0
    4378:	b12b      	cbz	r3, 4386 <register_fini+0x16>
    437a:	f244 10a1 	movw	r0, #16801	; 0x41a1
    437e:	f2c0 0000 	movt	r0, #0
    4382:	f7ff bf07 	b.w	4194 <atexit>
    4386:	4770      	bx	lr

00004388 <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    4388:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    438a:	2300      	movs	r3, #0
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;
    438c:	461a      	mov	r2, r3

	for(size_t i=0; i<8; i++)
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    438e:	fa40 f103 	asr.w	r1, r0, r3
    4392:	f1c3 0407 	rsb	r4, r3, #7
    4396:	f001 0101 	and.w	r1, r1, #1
    439a:	40a1      	lsls	r1, r4

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    439c:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    439e:	430a      	orrs	r2, r1

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43a0:	2b08      	cmp	r3, #8
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    43a2:	b2d2      	uxtb	r2, r2

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43a4:	d1f3      	bne.n	438e <reverse8+0x6>
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
	}

	return reversed;
}
    43a6:	4610      	mov	r0, r2
    43a8:	bd10      	pop	{r4, pc}
    43aa:	0000      	movs	r0, r0

000043ac <cc2400_rx>:
	target.syncword = 0;
}

/* start un-buffered rx */
static void cc2400_rx()
{
    43ac:	b538      	push	{r3, r4, r5, lr}
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    43ae:	4b25      	ldr	r3, [pc, #148]	; (4444 <cc2400_rx+0x98>)
    43b0:	4c25      	ldr	r4, [pc, #148]	; (4448 <cc2400_rx+0x9c>)
    43b2:	781a      	ldrb	r2, [r3, #0]
    43b4:	b112      	cbz	r2, 43bc <cc2400_rx+0x10>
    43b6:	781a      	ldrb	r2, [r3, #0]
    43b8:	2a01      	cmp	r2, #1
    43ba:	d128      	bne.n	440e <cc2400_rx+0x62>
		if (modulation == MOD_BT_BASIC_RATE) {
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	b133      	cbz	r3, 43ce <cc2400_rx+0x22>
			mdmctrl = 0x0029; // 160 kHz frequency deviation
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    43c0:	4b20      	ldr	r3, [pc, #128]	; (4444 <cc2400_rx+0x98>)
    43c2:	781d      	ldrb	r5, [r3, #0]
}

/* start un-buffered rx */
static void cc2400_rx()
{
	u16 mdmctrl = 0;
    43c4:	2d01      	cmp	r5, #1
    43c6:	bf0c      	ite	eq
    43c8:	2540      	moveq	r5, #64	; 0x40
    43ca:	2500      	movne	r5, #0
    43cc:	e000      	b.n	43d0 <cc2400_rx+0x24>

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
		if (modulation == MOD_BT_BASIC_RATE) {
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    43ce:	2529      	movs	r5, #41	; 0x29
		} else if (modulation == MOD_BT_LOW_ENERGY) {
			mdmctrl = 0x0040; // 250 kHz frequency deviation
		}
		cc2400_set(MANAND,  0x7fff);
    43d0:	200d      	movs	r0, #13
    43d2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    43d6:	f004 fa98 	bl	890a <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    43da:	2012      	movs	r0, #18
    43dc:	f642 3122 	movw	r1, #11042	; 0x2b22
    43e0:	f004 fa93 	bl	890a <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG 16 MAX MIN PAIRS
    43e4:	2014      	movs	r0, #20
    43e6:	f241 314b 	movw	r1, #4939	; 0x134b
    43ea:	f004 fa8e 	bl	890a <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    43ee:	2020      	movs	r0, #32
    43f0:	f240 1101 	movw	r1, #257	; 0x101
    43f4:	f004 fa89 	bl	890a <cc2400_set>
		//      |  | |   |  +--------> CRC off
		//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
		//      |  | +---------------> 2 preamble bytes of 01010101
		//      |  +-----------------> not packet mode
			//      +--------------------> un-buffered mode
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    43f8:	8821      	ldrh	r1, [r4, #0]
    43fa:	2002      	movs	r0, #2
    43fc:	b289      	uxth	r1, r1
    43fe:	3901      	subs	r1, #1
    4400:	b289      	uxth	r1, r1
    4402:	f004 fa82 	bl	890a <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    4406:	2003      	movs	r0, #3
    4408:	4629      	mov	r1, r5
    440a:	f004 fa7e 	bl	890a <cc2400_set>
	}

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    440e:	8820      	ldrh	r0, [r4, #0]
    4410:	b280      	uxth	r0, r0
    4412:	f003 faf7 	bl	7a04 <cs_threshold_calc_and_set>

	clkn_start();
    4416:	f003 fb8d 	bl	7b34 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    441a:	f004 fb47 	bl	8aac <cc2400_status>
    441e:	0642      	lsls	r2, r0, #25
    4420:	d5fb      	bpl.n	441a <cc2400_rx+0x6e>
	cc2400_strobe(SFSON);
    4422:	2061      	movs	r0, #97	; 0x61
    4424:	f004 fb49 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4428:	f004 fb40 	bl	8aac <cc2400_status>
    442c:	0743      	lsls	r3, r0, #29
    442e:	d5fb      	bpl.n	4428 <cc2400_rx+0x7c>
	cc2400_strobe(SRX);
    4430:	2062      	movs	r0, #98	; 0x62
    4432:	f004 fb42 	bl	8aba <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    4436:	4b05      	ldr	r3, [pc, #20]	; (444c <cc2400_rx+0xa0>)
    4438:	2280      	movs	r2, #128	; 0x80
    443a:	601a      	str	r2, [r3, #0]
	HGM_SET;
    443c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4440:	601a      	str	r2, [r3, #0]
    4442:	bd38      	pop	{r3, r4, r5, pc}
    4444:	10000e34 	.word	0x10000e34
    4448:	1000044c 	.word	0x1000044c
    444c:	2009c058 	.word	0x2009c058

00004450 <cc2400_rx_sync>:
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4450:	b570      	push	{r4, r5, r6, lr}
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4452:	4b2a      	ldr	r3, [pc, #168]	; (44fc <cc2400_rx_sync+0xac>)
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4454:	4604      	mov	r4, r0
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4456:	781a      	ldrb	r2, [r3, #0]
    4458:	b132      	cbz	r2, 4468 <cc2400_rx_sync+0x18>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	2b01      	cmp	r3, #1
    445e:	d14b      	bne.n	44f8 <cc2400_rx_sync+0xa8>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    4460:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x6561; // un-buffered mode, packet w/ sync word detection
    4462:	f246 5661 	movw	r6, #25953	; 0x6561
    4466:	e002      	b.n	446e <cc2400_rx_sync+0x1e>
static void cc2400_rx_sync(u32 sync)
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    4468:	2529      	movs	r5, #41	; 0x29
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    446a:	f240 4661 	movw	r6, #1121	; 0x461
	} else {
		/* oops */
		return;
	}

	cc2400_set(MANAND,  0x7fff);
    446e:	200d      	movs	r0, #13
    4470:	f647 71ff 	movw	r1, #32767	; 0x7fff
    4474:	f004 fa49 	bl	890a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    4478:	2012      	movs	r0, #18
    447a:	f642 3122 	movw	r1, #11042	; 0x2b22
    447e:	f004 fa44 	bl	890a <cc2400_set>

	cc2400_set(MDMTST0, 0x104b); //JWHUR AFC settling = 2 maxmin pairs
    4482:	2014      	movs	r0, #20
    4484:	f241 014b 	movw	r1, #4171	; 0x104b
    4488:	f004 fa3f 	bl	890a <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    448c:	2020      	movs	r0, #32
    448e:	4631      	mov	r1, r6
    4490:	f004 fa3b 	bl	890a <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    4494:	b2a1      	uxth	r1, r4
    4496:	202c      	movs	r0, #44	; 0x2c
    4498:	f004 fa37 	bl	890a <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    449c:	0c21      	lsrs	r1, r4, #16

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    449e:	4c18      	ldr	r4, [pc, #96]	; (4500 <cc2400_rx_sync+0xb0>)
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    44a0:	202d      	movs	r0, #45	; 0x2d
    44a2:	f004 fa32 	bl	890a <cc2400_set>

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    44a6:	8821      	ldrh	r1, [r4, #0]
    44a8:	2002      	movs	r0, #2
    44aa:	b289      	uxth	r1, r1
    44ac:	3901      	subs	r1, #1
    44ae:	b289      	uxth	r1, r1
    44b0:	f004 fa2b 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    44b4:	2003      	movs	r0, #3
    44b6:	4629      	mov	r1, r5
    44b8:	f004 fa27 	bl	890a <cc2400_set>

	//JWHUR RSSI sampling symbols
	cc2400_set(RSSI, 0x003f);
    44bc:	2006      	movs	r0, #6
    44be:	213f      	movs	r1, #63	; 0x3f
    44c0:	f004 fa23 	bl	890a <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    44c4:	8820      	ldrh	r0, [r4, #0]
    44c6:	b280      	uxth	r0, r0
    44c8:	f003 fa9c 	bl	7a04 <cs_threshold_calc_and_set>

	clkn_start();
    44cc:	f003 fb32 	bl	7b34 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    44d0:	f004 faec 	bl	8aac <cc2400_status>
    44d4:	0640      	lsls	r0, r0, #25
    44d6:	d5fb      	bpl.n	44d0 <cc2400_rx_sync+0x80>
	cc2400_strobe(SFSON);
    44d8:	2061      	movs	r0, #97	; 0x61
    44da:	f004 faee 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    44de:	f004 fae5 	bl	8aac <cc2400_status>
    44e2:	0741      	lsls	r1, r0, #29
    44e4:	d5fb      	bpl.n	44de <cc2400_rx_sync+0x8e>
	cc2400_strobe(SRX);
    44e6:	2062      	movs	r0, #98	; 0x62
    44e8:	f004 fae7 	bl	8aba <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    44ec:	4b05      	ldr	r3, [pc, #20]	; (4504 <cc2400_rx_sync+0xb4>)
    44ee:	2280      	movs	r2, #128	; 0x80
    44f0:	601a      	str	r2, [r3, #0]
	HGM_SET;
    44f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    44f6:	601a      	str	r2, [r3, #0]
    44f8:	bd70      	pop	{r4, r5, r6, pc}
    44fa:	bf00      	nop
    44fc:	10000e34 	.word	0x10000e34
    4500:	1000044c 	.word	0x1000044c
    4504:	2009c058 	.word	0x2009c058

00004508 <enqueue>:

/* Unpacked symbol buffers (two rxbufs) */
char unpacked[DMA_SIZE*8*2];

static int enqueue(uint8_t type, uint8_t* buf)
{
    4508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    450a:	4606      	mov	r6, r0
    450c:	460f      	mov	r7, r1
	usb_pkt_rx* f = usb_enqueue();
    450e:	f003 f97f 	bl	7810 <usb_enqueue>
    4512:	4d1e      	ldr	r5, [pc, #120]	; (458c <enqueue+0x84>)

	/* fail if queue is full */
	if (f == NULL) {
    4514:	4604      	mov	r4, r0
    4516:	b920      	cbnz	r0, 4522 <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    4518:	786b      	ldrb	r3, [r5, #1]
    451a:	f043 0304 	orr.w	r3, r3, #4
    451e:	706b      	strb	r3, [r5, #1]
		return 0;
    4520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	f->pkt_type = type;
	if(type == SPECAN) {
    4522:	2e04      	cmp	r6, #4
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    4524:	7006      	strb	r6, [r0, #0]
	if(type == SPECAN) {
    4526:	d10e      	bne.n	4546 <enqueue+0x3e>
		f->clkn_high = (clkn >> 20) & 0xff;
    4528:	4b19      	ldr	r3, [pc, #100]	; (4590 <enqueue+0x88>)
		f->clk100ns = CLK100NS;
    452a:	f640 4135 	movw	r1, #3125	; 0xc35
		return 0;
	}

	f->pkt_type = type;
	if(type == SPECAN) {
		f->clkn_high = (clkn >> 20) & 0xff;
    452e:	681a      	ldr	r2, [r3, #0]
    4530:	0d12      	lsrs	r2, r2, #20
    4532:	70c2      	strb	r2, [r0, #3]
		f->clk100ns = CLK100NS;
    4534:	4a17      	ldr	r2, [pc, #92]	; (4594 <enqueue+0x8c>)
    4536:	681b      	ldr	r3, [r3, #0]
    4538:	6812      	ldr	r2, [r2, #0]
    453a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    453e:	fb01 2303 	mla	r3, r1, r3, r2
    4542:	6043      	str	r3, [r0, #4]
    4544:	e015      	b.n	4572 <enqueue+0x6a>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4546:	78ab      	ldrb	r3, [r5, #2]
    4548:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    454a:	686b      	ldr	r3, [r5, #4]
    454c:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    454e:	892b      	ldrh	r3, [r5, #8]
    4550:	b29b      	uxth	r3, r3
    4552:	3b62      	subs	r3, #98	; 0x62
    4554:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    4556:	4b10      	ldr	r3, [pc, #64]	; (4598 <enqueue+0x90>)
    4558:	781b      	ldrb	r3, [r3, #0]
    455a:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    455c:	4b0f      	ldr	r3, [pc, #60]	; (459c <enqueue+0x94>)
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4562:	8928      	ldrh	r0, [r5, #8]
    4564:	b280      	uxth	r0, r0
    4566:	f003 fa39 	bl	79dc <rssi_get_avg>
		f->rssi_count = rssi_count;
    456a:	4b0d      	ldr	r3, [pc, #52]	; (45a0 <enqueue+0x98>)
		f->clkn_high = idle_buf_clkn_high;
		f->clk100ns = idle_buf_clk100ns;
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
		f->rssi_min = rssi_min;
		f->rssi_max = rssi_max;
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    456c:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    456e:	781b      	ldrb	r3, [r3, #0]
    4570:	72e3      	strb	r3, [r4, #11]
	}

	memcpy(f->data, buf, DMA_SIZE);
    4572:	f104 000e 	add.w	r0, r4, #14
    4576:	4639      	mov	r1, r7
    4578:	2232      	movs	r2, #50	; 0x32
    457a:	f005 fc5d 	bl	9e38 <memcpy>

	f->status = status;
    457e:	786b      	ldrb	r3, [r5, #1]
	status = 0;

	return 1;
    4580:	2001      	movs	r0, #1
		f->rssi_count = rssi_count;
	}

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    4582:	7063      	strb	r3, [r4, #1]
	status = 0;
    4584:	2300      	movs	r3, #0
    4586:	706b      	strb	r3, [r5, #1]

	return 1;
}
    4588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    458a:	bf00      	nop
    458c:	10000e34 	.word	0x10000e34
    4590:	10001024 	.word	0x10001024
    4594:	40004008 	.word	0x40004008
    4598:	1000100a 	.word	0x1000100a
    459c:	10001008 	.word	0x10001008
    45a0:	100014a6 	.word	0x100014a6

000045a4 <le_set_access_address>:
	// reset GIO
	cc2400_set(IOCFG, gio_save);
}

/* set LE access address */
static void le_set_access_address(u32 aa) {
    45a4:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    45a6:	4c04      	ldr	r4, [pc, #16]	; (45b8 <le_set_access_address+0x14>)
    45a8:	6060      	str	r0, [r4, #4]
	aa_rev = rbit(aa);
    45aa:	f004 f8b9 	bl	8720 <rbit>
	le.syncl = aa_rev & 0xffff;
    45ae:	8160      	strh	r0, [r4, #10]
	le.synch = aa_rev >> 16;
    45b0:	0c00      	lsrs	r0, r0, #16
    45b2:	8120      	strh	r0, [r4, #8]
    45b4:	bd10      	pop	{r4, pc}
    45b6:	bf00      	nop
    45b8:	1000044c 	.word	0x1000044c

000045bc <cc2400_idle>:
		}
	}
}

static void cc2400_idle()
{
    45bc:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    45be:	2064      	movs	r0, #100	; 0x64
    45c0:	f004 fa7b 	bl	8aba <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    45c4:	f004 fa72 	bl	8aac <cc2400_status>
    45c8:	f000 0004 	and.w	r0, r0, #4
    45cc:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    45d0:	2800      	cmp	r0, #0
    45d2:	d1f7      	bne.n	45c4 <cc2400_idle+0x8>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    45d4:	4b20      	ldr	r3, [pc, #128]	; (4658 <cc2400_idle+0x9c>)
    45d6:	2280      	movs	r2, #128	; 0x80
    45d8:	601a      	str	r2, [r3, #0]
	HGM_CLR;
#endif

	RXLED_CLR;
    45da:	2110      	movs	r1, #16
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
	HGM_CLR;
    45dc:	f44f 7280 	mov.w	r2, #256	; 0x100
    45e0:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    45e2:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    45e6:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    45ea:	2202      	movs	r2, #2
    45ec:	f843 2c20 	str.w	r2, [r3, #-32]

	clkn_stop();
    45f0:	f003 fa78 	bl	7ae4 <clkn_stop>
	dio_ssp_stop();
    45f4:	f003 fba2 	bl	7d3c <dio_ssp_stop>
	cs_reset();
    45f8:	f003 fa62 	bl	7ac0 <cs_reset>
	rssi_reset();
    45fc:	f003 f98a 	bl	7914 <rssi_reset>

	/* hopping stuff */
	hop_mode = HOP_NONE;
    4600:	4b16      	ldr	r3, [pc, #88]	; (465c <cc2400_idle+0xa0>)
	do_hop = 0;
	channel = 2441;
    4602:	4a17      	ldr	r2, [pc, #92]	; (4660 <cc2400_idle+0xa4>)
    4604:	f640 1189 	movw	r1, #2441	; 0x989
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    4608:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    460a:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    460c:	8011      	strh	r1, [r2, #0]
	hop_direct_channel = 0;
	hop_timeout = 158;
    460e:	219e      	movs	r1, #158	; 0x9e

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
    4610:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    4612:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	requested_channel = 0;
	le_adv_channel = 2402;
    4616:	f640 1162 	movw	r1, #2402	; 0x962
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
	hop_timeout = 158;
	requested_channel = 0;
    461a:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    461c:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a


	/* bulk USB stuff */
	idle_buf_clkn_high = 0;
    4620:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    4622:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    4624:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    4626:	741c      	strb	r4, [r3, #16]
	status = 0;
    4628:	705c      	strb	r4, [r3, #1]

	/* operation mode */
	mode = MODE_IDLE;
    462a:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    462c:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    462e:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    4630:	751c      	strb	r4, [r3, #20]

	modulation = MOD_BT_BASIC_RATE;
    4632:	701c      	strb	r4, [r3, #0]

	/* specan stuff */
	low_freq = 2400;
    4634:	f44f 6316 	mov.w	r3, #2400	; 0x960
    4638:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	high_freq = 2483;
    463c:	3353      	adds	r3, #83	; 0x53
    463e:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
	rssi_threshold = -30;

	target.address = 0;
    4642:	4908      	ldr	r1, [pc, #32]	; (4664 <cc2400_idle+0xa8>)
	modulation = MOD_BT_BASIC_RATE;

	/* specan stuff */
	low_freq = 2400;
	high_freq = 2483;
	rssi_threshold = -30;
    4644:	23e2      	movs	r3, #226	; 0xe2
    4646:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

	target.address = 0;
    464a:	2200      	movs	r2, #0
    464c:	2300      	movs	r3, #0
    464e:	e9c1 2300 	strd	r2, r3, [r1]
	target.syncword = 0;
    4652:	e9c1 2302 	strd	r2, r3, [r1, #8]
    4656:	bd10      	pop	{r4, pc}
    4658:	2009c05c 	.word	0x2009c05c
    465c:	10000e34 	.word	0x10000e34
    4660:	1000044c 	.word	0x1000044c
    4664:	10001528 	.word	0x10001528

00004668 <cb_follow_le>:
	cs_trigger_disable();
}

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    4668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    466c:	4c39      	ldr	r4, [pc, #228]	; (4754 <cb_follow_le+0xec>)
    466e:	8820      	ldrh	r0, [r4, #0]
    4670:	4626      	mov	r6, r4
    4672:	b280      	uxth	r0, r0
    4674:	3862      	subs	r0, #98	; 0x62
    4676:	b2c0      	uxtb	r0, r0
    4678:	f002 ffc2 	bl	7600 <btle_channel_index>
    467c:	4936      	ldr	r1, [pc, #216]	; (4758 <cb_follow_le+0xf0>)

	u32 access_address = 0;
    467e:	2200      	movs	r2, #0

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    4680:	5c0d      	ldrb	r5, [r1, r0]

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4682:	4613      	mov	r3, r2
    4684:	468c      	mov	ip, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4686:	4f35      	ldr	r7, [pc, #212]	; (475c <cb_follow_le+0xf4>)
    4688:	5dd9      	ldrb	r1, [r3, r7]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    468a:	3301      	adds	r3, #1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    468c:	07c9      	lsls	r1, r1, #31
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    468e:	2b1f      	cmp	r3, #31
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4690:	ea41 0252 	orr.w	r2, r1, r2, lsr #1
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4694:	d1f7      	bne.n	4686 <cb_follow_le+0x1e>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    4696:	6871      	ldr	r1, [r6, #4]
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4698:	5cf8      	ldrb	r0, [r7, r3]
    469a:	07c0      	lsls	r0, r0, #31
    469c:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
		if (access_address == le.access_address) {
    46a0:	428a      	cmp	r2, r1
    46a2:	d14f      	bne.n	4744 <cb_follow_le+0xdc>
    46a4:	2200      	movs	r2, #0
    46a6:	eb07 0803 	add.w	r8, r7, r3
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46aa:	2000      	movs	r0, #0
    46ac:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    46b0:	4601      	mov	r1, r0
    46b2:	eb08 0401 	add.w	r4, r8, r1
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
    46b6:	2a03      	cmp	r2, #3
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
    46b8:	f814 4c1f 	ldrb.w	r4, [r4, #-31]
					if (j >= 4) { // unwhiten data bytes
    46bc:	dd0c      	ble.n	46d8 <cb_follow_le+0x70>
						bit ^= whitening[idx];
    46be:	eb0c 0e05 	add.w	lr, ip, r5
    46c2:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    46c6:	3501      	adds	r5, #1
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
    46c8:	ea84 040e 	eor.w	r4, r4, lr
						idx = (idx + 1) % sizeof(whitening);
    46cc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    46d0:	fbb5 f9fe 	udiv	r9, r5, lr
    46d4:	fb0e 5519 	mls	r5, lr, r9, r5
					}
					byte |= bit << k;
    46d8:	408c      	lsls	r4, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46da:	3101      	adds	r1, #1
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    46dc:	4320      	orrs	r0, r4
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46de:	2908      	cmp	r1, #8
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    46e0:	b2c0      	uxtb	r0, r0
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46e2:	d1e6      	bne.n	46b2 <cb_follow_le+0x4a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    46e4:	4c1e      	ldr	r4, [pc, #120]	; (4760 <cb_follow_le+0xf8>)
    46e6:	6821      	ldr	r1, [r4, #0]
    46e8:	5488      	strb	r0, [r1, r2]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    46ea:	3201      	adds	r2, #1
    46ec:	2a2e      	cmp	r2, #46	; 0x2e
    46ee:	d1da      	bne.n	46a6 <cb_follow_le+0x3e>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    46f0:	6973      	ldr	r3, [r6, #20]
    46f2:	b95b      	cbnz	r3, 470c <cb_follow_le+0xa4>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    46f4:	6821      	ldr	r1, [r4, #0]
    46f6:	2001      	movs	r0, #1
    46f8:	f7ff ff06 	bl	4508 <enqueue>
			RXLED_SET;
    46fc:	4b19      	ldr	r3, [pc, #100]	; (4764 <cb_follow_le+0xfc>)
    46fe:	2210      	movs	r2, #16
    4700:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    4702:	4b19      	ldr	r3, [pc, #100]	; (4768 <cb_follow_le+0x100>)
    4704:	6820      	ldr	r0, [r4, #0]
    4706:	699b      	ldr	r3, [r3, #24]
    4708:	4798      	blx	r3

			break;
    470a:	e01f      	b.n	474c <cb_follow_le+0xe4>
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    470c:	6823      	ldr	r3, [r4, #0]
    470e:	795d      	ldrb	r5, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4710:	4b10      	ldr	r3, [pc, #64]	; (4754 <cb_follow_le+0xec>)
    4712:	6821      	ldr	r1, [r4, #0]
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    4714:	f005 053f 	and.w	r5, r5, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4718:	1caa      	adds	r2, r5, #2
    471a:	6918      	ldr	r0, [r3, #16]
    471c:	3104      	adds	r1, #4
    471e:	f002 ffef 	bl	7700 <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    4722:	6822      	ldr	r2, [r4, #0]
    4724:	f105 0308 	add.w	r3, r5, #8
    4728:	5cd1      	ldrb	r1, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    472a:	6822      	ldr	r2, [r4, #0]
    472c:	1deb      	adds	r3, r5, #7
    472e:	5cd3      	ldrb	r3, [r2, r3]
							 |  idle_rxbuf[4+len+0];
    4730:	6822      	ldr	r2, [r4, #0]
    4732:	3506      	adds	r5, #6
    4734:	5d52      	ldrb	r2, [r2, r5]
			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
							 | (idle_rxbuf[4+len+1] << 8)
    4736:	021b      	lsls	r3, r3, #8
    4738:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
							 |  idle_rxbuf[4+len+0];
    473c:	4313      	orrs	r3, r2
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    473e:	4298      	cmp	r0, r3
    4740:	d104      	bne.n	474c <cb_follow_le+0xe4>
    4742:	e7d7      	b.n	46f4 <cb_follow_le+0x8c>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    4744:	3301      	adds	r3, #1
    4746:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    474a:	d1a5      	bne.n	4698 <cb_follow_le+0x30>
			break;
		}
	}

	return 1;
}
    474c:	2001      	movs	r0, #1
    474e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4752:	bf00      	nop
    4754:	1000044c 	.word	0x1000044c
    4758:	0000a218 	.word	0x0000a218
    475c:	10001184 	.word	0x10001184
    4760:	10001180 	.word	0x10001180
    4764:	2009c038 	.word	0x2009c038
    4768:	10000e34 	.word	0x10000e34

0000476c <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    476c:	b538      	push	{r3, r4, r5, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    476e:	4b58      	ldr	r3, [pc, #352]	; (48d0 <connection_follow_cb+0x164>)
}

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4770:	4605      	mov	r5, r0
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4772:	7e1a      	ldrb	r2, [r3, #24]
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	// u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
	u8 header = packet[HEADER_IDX];
    4774:	7901      	ldrb	r1, [r0, #4]
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4776:	2a02      	cmp	r2, #2
    4778:	461c      	mov	r4, r3
    477a:	d113      	bne.n	47a4 <connection_follow_cb+0x38>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    477c:	2203      	movs	r2, #3
    477e:	761a      	strb	r2, [r3, #24]
		le.conn_epoch = clkn;
    4780:	4a54      	ldr	r2, [pc, #336]	; (48d4 <connection_follow_cb+0x168>)
    4782:	6812      	ldr	r2, [r2, #0]
    4784:	61da      	str	r2, [r3, #28]
		le.interval_timer = le.conn_interval - 1;
    4786:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    4788:	3a01      	subs	r2, #1
    478a:	b292      	uxth	r2, r2
    478c:	841a      	strh	r2, [r3, #32]
		le.conn_count = 0;
    478e:	2200      	movs	r2, #0
    4790:	849a      	strh	r2, [r3, #36]	; 0x24
		le.update_pending = 0;
    4792:	62da      	str	r2, [r3, #44]	; 0x2c

		// hue hue hue
		if (jam_mode != JAM_NONE)
    4794:	4b50      	ldr	r3, [pc, #320]	; (48d8 <connection_follow_cb+0x16c>)
    4796:	7cda      	ldrb	r2, [r3, #19]
    4798:	2a00      	cmp	r2, #0
    479a:	f000 8098 	beq.w	48ce <connection_follow_cb+0x162>
			le_jam_count = JAM_COUNT_DEFAULT;
    479e:	2228      	movs	r2, #40	; 0x28
    47a0:	61da      	str	r2, [r3, #28]
    47a2:	bd38      	pop	{r3, r4, r5, pc}

	} else if (le.link_state == LINK_CONNECTED) {
    47a4:	2a03      	cmp	r2, #3
    47a6:	d13b      	bne.n	4820 <connection_follow_cb+0xb4>
		u8 llid =  header & 0x03;

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		// hue hue hue
		if (jam_mode != JAM_NONE)
			le_jam_count = JAM_COUNT_DEFAULT;

	} else if (le.link_state == LINK_CONNECTED) {
		u8 llid =  header & 0x03;
    47aa:	f001 0103 	and.w	r1, r1, #3

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47ae:	b1a3      	cbz	r3, 47da <connection_follow_cb+0x6e>
    47b0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    47b2:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    47b4:	b29b      	uxth	r3, r3
    47b6:	429a      	cmp	r2, r3
    47b8:	d10f      	bne.n	47da <connection_follow_cb+0x6e>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    47ba:	4b46      	ldr	r3, [pc, #280]	; (48d4 <connection_follow_cb+0x168>)
    47bc:	681b      	ldr	r3, [r3, #0]
    47be:	61e3      	str	r3, [r4, #28]
			le.conn_interval = le.interval_update;
    47c0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    47c2:	8463      	strh	r3, [r4, #34]	; 0x22
			le.interval_timer = le.interval_update - 1;
    47c4:	3b01      	subs	r3, #1
    47c6:	b29b      	uxth	r3, r3
    47c8:	8423      	strh	r3, [r4, #32]
			le.win_size = le.win_size_update;
    47ca:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    47ce:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			le.win_offset = le.win_offset_update;
    47d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    47d4:	8523      	strh	r3, [r4, #40]	; 0x28
			le.update_pending = 0;
    47d6:	2300      	movs	r3, #0
    47d8:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		if (llid == 0x03 && data[0] == 0x00) {
    47da:	2903      	cmp	r1, #3
    47dc:	d177      	bne.n	48ce <connection_follow_cb+0x162>
    47de:	79ab      	ldrb	r3, [r5, #6]
    47e0:	2b00      	cmp	r3, #0
    47e2:	d174      	bne.n	48ce <connection_follow_cb+0x162>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    47e4:	79eb      	ldrb	r3, [r5, #7]
    47e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    47ea:	7a6a      	ldrb	r2, [r5, #9]
    47ec:	7a2b      	ldrb	r3, [r5, #8]
    47ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47f2:	86e3      	strh	r3, [r4, #54]	; 0x36
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    47f4:	7aea      	ldrb	r2, [r5, #11]
    47f6:	7aab      	ldrb	r3, [r5, #10]
    47f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47fc:	8663      	strh	r3, [r4, #50]	; 0x32
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    47fe:	7c6a      	ldrb	r2, [r5, #17]
    4800:	7c2b      	ldrb	r3, [r5, #16]
    4802:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    4806:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4808:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    480a:	b292      	uxth	r2, r2
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    480c:	8623      	strh	r3, [r4, #48]	; 0x30
			if (le.update_instant - le.conn_count < 32767)
    480e:	1a9b      	subs	r3, r3, r2
    4810:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    4814:	4293      	cmp	r3, r2
    4816:	dc5a      	bgt.n	48ce <connection_follow_cb+0x162>
				le.update_pending = 1;
    4818:	4b2d      	ldr	r3, [pc, #180]	; (48d0 <connection_follow_cb+0x164>)
    481a:	2201      	movs	r2, #1
    481c:	62da      	str	r2, [r3, #44]	; 0x2c
    481e:	bd38      	pop	{r3, r4, r5, pc}
		}

	} else if (le.link_state == LINK_LISTENING) {
    4820:	2a01      	cmp	r2, #1
    4822:	d154      	bne.n	48ce <connection_follow_cb+0x162>
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
    4824:	f001 010f 	and.w	r1, r1, #15
    4828:	2905      	cmp	r1, #5
    482a:	d150      	bne.n	48ce <connection_follow_cb+0x162>
			uint16_t conn_interval;

			// ignore packets with incorrect length
			if (*data_len != 34)
    482c:	7943      	ldrb	r3, [r0, #5]
    482e:	2b22      	cmp	r3, #34	; 0x22
    4830:	d14d      	bne.n	48ce <connection_follow_cb+0x162>
				return;

			// conn interval must be [7.5 ms, 4.0s] in units of 1.25 ms
			conn_interval = (packet[29] << 8) | packet[28];
    4832:	7f03      	ldrb	r3, [r0, #28]
    4834:	7f42      	ldrb	r2, [r0, #29]
    4836:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    483a:	3a06      	subs	r2, #6
    483c:	b292      	uxth	r2, r2
    483e:	f640 437a 	movw	r3, #3194	; 0xc7a
    4842:	429a      	cmp	r2, r3
    4844:	d843      	bhi.n	48ce <connection_follow_cb+0x162>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    4846:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4848:	b92b      	cbnz	r3, 4856 <connection_follow_cb+0xea>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    484a:	2302      	movs	r3, #2
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    484c:	2000      	movs	r0, #0
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    484e:	7623      	strb	r3, [r4, #24]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4850:	6160      	str	r0, [r4, #20]

			for (i = 0; i < 4; ++i)
    4852:	4603      	mov	r3, r0
    4854:	e011      	b.n	487a <connection_follow_cb+0x10e>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    4856:	f104 0038 	add.w	r0, r4, #56	; 0x38
    485a:	1da9      	adds	r1, r5, #6
    485c:	2206      	movs	r2, #6
    485e:	f005 fab7 	bl	9dd0 <memcmp>
			if (conn_interval < 6 || conn_interval > 3200)
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    4862:	2800      	cmp	r0, #0
    4864:	d0f1      	beq.n	484a <connection_follow_cb+0xde>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    4866:	f104 0038 	add.w	r0, r4, #56	; 0x38
    486a:	f105 010c 	add.w	r1, r5, #12
    486e:	2206      	movs	r2, #6
    4870:	f005 faae 	bl	9dd0 <memcmp>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    4874:	2800      	cmp	r0, #0
    4876:	d0e8      	beq.n	484a <connection_follow_cb+0xde>
    4878:	bd38      	pop	{r3, r4, r5, pc}
    487a:	18ea      	adds	r2, r5, r3

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
    487c:	7c91      	ldrb	r1, [r2, #18]
    487e:	00da      	lsls	r2, r3, #3
    4880:	fa01 f202 	lsl.w	r2, r1, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    4884:	3301      	adds	r3, #1
    4886:	2b04      	cmp	r3, #4
				aa |= packet[18+i] << (i*8);
    4888:	ea40 0002 	orr.w	r0, r0, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    488c:	d1f5      	bne.n	487a <connection_follow_cb+0x10e>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    488e:	f7ff fe89 	bl	45a4 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
    4892:	7de8      	ldrb	r0, [r5, #23]
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    4894:	7e2b      	ldrb	r3, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    4896:	0200      	lsls	r0, r0, #8
    4898:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
						|  packet[CRC_INIT+0];
    489c:	7dab      	ldrb	r3, [r5, #22]
    489e:	4318      	orrs	r0, r3
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    48a0:	60e0      	str	r0, [r4, #12]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    48a2:	f003 ff3d 	bl	8720 <rbit>

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    48a6:	7e6b      	ldrb	r3, [r5, #25]

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    48a8:	6120      	str	r0, [r4, #16]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    48aa:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    48ae:	7eab      	ldrb	r3, [r5, #26]
    48b0:	8523      	strh	r3, [r4, #40]	; 0x28

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    48b2:	7f6a      	ldrb	r2, [r5, #29]
    48b4:	7f2b      	ldrb	r3, [r5, #28]
    48b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    48ba:	8463      	strh	r3, [r4, #34]	; 0x22
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48bc:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
			le.channel_idx = le.channel_increment;

			// Hop to the initial channel immediately
			do_hop = 1;
    48c0:	2201      	movs	r2, #1
#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48c2:	f003 031f 	and.w	r3, r3, #31
    48c6:	76a3      	strb	r3, [r4, #26]
			le.channel_idx = le.channel_increment;
    48c8:	7663      	strb	r3, [r4, #25]

			// Hop to the initial channel immediately
			do_hop = 1;
    48ca:	4b03      	ldr	r3, [pc, #12]	; (48d8 <connection_follow_cb+0x16c>)
    48cc:	72da      	strb	r2, [r3, #11]
    48ce:	bd38      	pop	{r3, r4, r5, pc}
    48d0:	1000044c 	.word	0x1000044c
    48d4:	10001024 	.word	0x10001024
    48d8:	10000e34 	.word	0x10000e34

000048dc <vendor_request_handler>:

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    48dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    48e0:	4c97      	ldr	r4, [pc, #604]	; (4b40 <vendor_request_handler+0x264>)

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    48e2:	461d      	mov	r5, r3
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    48e4:	681b      	ldr	r3, [r3, #0]

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    48e6:	460f      	mov	r7, r1
    48e8:	4616      	mov	r6, r2
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    48ea:	6223      	str	r3, [r4, #32]

	switch (request) {
    48ec:	2848      	cmp	r0, #72	; 0x48
    48ee:	f200 8329 	bhi.w	4f44 <vendor_request_handler+0x668>
    48f2:	e8df f010 	tbh	[pc, r0, lsl #1]
    48f6:	00ff      	.short	0x00ff
    48f8:	004f004b 	.word	0x004f004b
    48fc:	00570052 	.word	0x00570052
    4900:	005f005a 	.word	0x005f005a
    4904:	00640062 	.word	0x00640062
    4908:	006d0068 	.word	0x006d0068
    490c:	00c600bf 	.word	0x00c600bf
    4910:	007b0104 	.word	0x007b0104
    4914:	00800076 	.word	0x00800076
    4918:	00880085 	.word	0x00880085
    491c:	0095008d 	.word	0x0095008d
    4920:	00ba00b8 	.word	0x00ba00b8
    4924:	00fd00bc 	.word	0x00fd00bc
    4928:	03270101 	.word	0x03270101
    492c:	00970106 	.word	0x00970106
    4930:	00a8009e 	.word	0x00a8009e
    4934:	00aa00a6 	.word	0x00aa00a6
    4938:	013b0149 	.word	0x013b0149
    493c:	01690166 	.word	0x01690166
    4940:	0171016d 	.word	0x0171016d
    4944:	01d901a4 	.word	0x01d901a4
    4948:	023d01fd 	.word	0x023d01fd
    494c:	025b0250 	.word	0x025b0250
    4950:	026a0324 	.word	0x026a0324
    4954:	0275026f 	.word	0x0275026f
    4958:	028b027c 	.word	0x028b027c
    495c:	01f301e6 	.word	0x01f301e6
    4960:	02ef0298 	.word	0x02ef0298
    4964:	03060158 	.word	0x03060158
    4968:	02c10327 	.word	0x02c10327
    496c:	0320031d 	.word	0x0320031d
    4970:	01d501c3 	.word	0x01d501c3
    4974:	03270208 	.word	0x03270208
    4978:	02d60049 	.word	0x02d60049
    497c:	02e60123 	.word	0x02e60123
    4980:	0244020f 	.word	0x0244020f
    4984:	02fa024a 	.word	0x02fa024a
    4988:	2400      	movs	r4, #0
    498a:	e27a      	b.n	4e82 <vendor_request_handler+0x5a6>
	case UBERTOOTH_PING:
		*data_len = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    498c:	2001      	movs	r0, #1
    498e:	74a0      	strb	r0, [r4, #18]
		*data_len = 0;
    4990:	2300      	movs	r3, #0
    4992:	e1a0      	b.n	4cd6 <vendor_request_handler+0x3fa>
		break;

	case UBERTOOTH_TX_SYMBOLS:
		hop_mode = HOP_BLUETOOTH;
    4994:	2302      	movs	r3, #2
    4996:	72a3      	strb	r3, [r4, #10]
    4998:	e0f4      	b.n	4b84 <vendor_request_handler+0x2a8>
		requested_mode = MODE_TX_SYMBOLS;
		*data_len = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    499a:	4b6a      	ldr	r3, [pc, #424]	; (4b44 <vendor_request_handler+0x268>)
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    49a2:	e117      	b.n	4bd4 <vendor_request_handler+0x2f8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    49a4:	880a      	ldrh	r2, [r1, #0]
    49a6:	2302      	movs	r3, #2
    49a8:	e015      	b.n	49d6 <vendor_request_handler+0xfa>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    49aa:	4b66      	ldr	r3, [pc, #408]	; (4b44 <vendor_request_handler+0x268>)
    49ac:	681b      	ldr	r3, [r3, #0]
    49ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
    49b2:	e10f      	b.n	4bd4 <vendor_request_handler+0x2f8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    49b4:	880a      	ldrh	r2, [r1, #0]
    49b6:	2310      	movs	r3, #16
    49b8:	e00d      	b.n	49d6 <vendor_request_handler+0xfa>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    49ba:	4b62      	ldr	r3, [pc, #392]	; (4b44 <vendor_request_handler+0x268>)
    49bc:	e024      	b.n	4a08 <vendor_request_handler+0x12c>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    49be:	880a      	ldrh	r2, [r1, #0]
    49c0:	f44f 7380 	mov.w	r3, #256	; 0x100
    49c4:	e007      	b.n	49d6 <vendor_request_handler+0xfa>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    49c6:	4b5f      	ldr	r3, [pc, #380]	; (4b44 <vendor_request_handler+0x268>)
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	f3c3 2340 	ubfx	r3, r3, #9, #1
    49ce:	e101      	b.n	4bd4 <vendor_request_handler+0x2f8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    49d0:	880a      	ldrh	r2, [r1, #0]
    49d2:	f44f 7300 	mov.w	r3, #512	; 0x200
    49d6:	b912      	cbnz	r2, 49de <vendor_request_handler+0x102>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    49d8:	4a5b      	ldr	r2, [pc, #364]	; (4b48 <vendor_request_handler+0x26c>)
    49da:	6013      	str	r3, [r2, #0]
    49dc:	e2af      	b.n	4f3e <vendor_request_handler+0x662>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
    49de:	4a5b      	ldr	r2, [pc, #364]	; (4b4c <vendor_request_handler+0x270>)
    49e0:	e7fb      	b.n	49da <vendor_request_handler+0xfe>
		else
			CC1V8_CLR;
		break;

	case UBERTOOTH_GET_PARTNUM:
		get_part_num(data, data_len);
    49e2:	4630      	mov	r0, r6
    49e4:	4629      	mov	r1, r5
    49e6:	f004 f94f 	bl	8c88 <get_part_num>
    49ea:	e2a8      	b.n	4f3e <vendor_request_handler+0x662>
	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_GET_SERIAL:
		get_device_serial(data, data_len);
    49ec:	4630      	mov	r0, r6
    49ee:	4629      	mov	r1, r5
    49f0:	f004 f966 	bl	8cc0 <get_device_serial>
    49f4:	e2a3      	b.n	4f3e <vendor_request_handler+0x662>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    49f6:	4b56      	ldr	r3, [pc, #344]	; (4b50 <vendor_request_handler+0x274>)
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    49fe:	e0e9      	b.n	4bd4 <vendor_request_handler+0x2f8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4a00:	880a      	ldrh	r2, [r1, #0]
    4a02:	2380      	movs	r3, #128	; 0x80
    4a04:	e007      	b.n	4a16 <vendor_request_handler+0x13a>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4a06:	4b52      	ldr	r3, [pc, #328]	; (4b50 <vendor_request_handler+0x274>)
    4a08:	681b      	ldr	r3, [r3, #0]
    4a0a:	f3c3 2300 	ubfx	r3, r3, #8, #1
    4a0e:	e0e1      	b.n	4bd4 <vendor_request_handler+0x2f8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4a10:	880a      	ldrh	r2, [r1, #0]
    4a12:	f44f 7380 	mov.w	r3, #256	; 0x100
    4a16:	b10a      	cbz	r2, 4a1c <vendor_request_handler+0x140>
			HGM_SET;
    4a18:	4a4e      	ldr	r2, [pc, #312]	; (4b54 <vendor_request_handler+0x278>)
    4a1a:	e7de      	b.n	49da <vendor_request_handler+0xfe>
		else
			HGM_CLR;
    4a1c:	4a4e      	ldr	r2, [pc, #312]	; (4b58 <vendor_request_handler+0x27c>)
    4a1e:	e7dc      	b.n	49da <vendor_request_handler+0xfe>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4a20:	2303      	movs	r3, #3
    4a22:	e26c      	b.n	4efe <vendor_request_handler+0x622>
		break;

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4a24:	2005      	movs	r0, #5
    4a26:	f003 ff67 	bl	88f8 <cc2400_get>
    4a2a:	f000 0007 	and.w	r0, r0, #7
    4a2e:	7030      	strb	r0, [r6, #0]
    4a30:	e1e8      	b.n	4e04 <vendor_request_handler+0x528>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4a32:	8809      	ldrh	r1, [r1, #0]
    4a34:	2907      	cmp	r1, #7
    4a36:	f200 8285 	bhi.w	4f44 <vendor_request_handler+0x668>
			cc2400_set(FREND, 8 | request_params[0]);
    4a3a:	2005      	movs	r0, #5
    4a3c:	f041 0108 	orr.w	r1, r1, #8
    4a40:	e21c      	b.n	4e7c <vendor_request_handler+0x5a0>
			return 0;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4a42:	2305      	movs	r3, #5
    4a44:	e25b      	b.n	4efe <vendor_request_handler+0x622>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4a46:	2306      	movs	r3, #6
    4a48:	e259      	b.n	4efe <vendor_request_handler+0x622>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4a4a:	4b44      	ldr	r3, [pc, #272]	; (4b5c <vendor_request_handler+0x280>)
    4a4c:	781a      	ldrb	r2, [r3, #0]
    4a4e:	7032      	strb	r2, [r6, #0]
		data[1] = rr.request_pa;
    4a50:	785a      	ldrb	r2, [r3, #1]
    4a52:	7072      	strb	r2, [r6, #1]
		data[2] = rr.request_num;
    4a54:	789a      	ldrb	r2, [r3, #2]
    4a56:	70b2      	strb	r2, [r6, #2]
		data[3] = rr.reply_pa;
    4a58:	78da      	ldrb	r2, [r3, #3]
    4a5a:	70f2      	strb	r2, [r6, #3]
		data[4] = rr.reply_num;
    4a5c:	791b      	ldrb	r3, [r3, #4]
    4a5e:	7133      	strb	r3, [r6, #4]
		*data_len = 5;
    4a60:	2305      	movs	r3, #5
    4a62:	602b      	str	r3, [r5, #0]
    4a64:	e26b      	b.n	4f3e <vendor_request_handler+0x662>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4a66:	2300      	movs	r3, #0
    4a68:	e249      	b.n	4efe <vendor_request_handler+0x622>
		break;

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4a6a:	7823      	ldrb	r3, [r4, #0]
    4a6c:	e0b2      	b.n	4bd4 <vendor_request_handler+0x2f8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4a6e:	780b      	ldrb	r3, [r1, #0]
    4a70:	7023      	strb	r3, [r4, #0]
    4a72:	e264      	b.n	4f3e <vendor_request_handler+0x662>
		break;

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4a74:	4b3a      	ldr	r3, [pc, #232]	; (4b60 <vendor_request_handler+0x284>)
    4a76:	881a      	ldrh	r2, [r3, #0]
    4a78:	7032      	strb	r2, [r6, #0]
		data[1] = (channel >> 8) & 0xFF;
    4a7a:	881b      	ldrh	r3, [r3, #0]
    4a7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a80:	e1a6      	b.n	4dd0 <vendor_request_handler+0x4f4>
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4a82:	880a      	ldrh	r2, [r1, #0]
    4a84:	4b2e      	ldr	r3, [pc, #184]	; (4b40 <vendor_request_handler+0x264>)
    4a86:	81e2      	strh	r2, [r4, #14]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4a88:	89e1      	ldrh	r1, [r4, #14]
    4a8a:	f640 22ea 	movw	r2, #2794	; 0xaea
    4a8e:	b289      	uxth	r1, r1
    4a90:	4291      	cmp	r1, r2
    4a92:	d905      	bls.n	4aa0 <vendor_request_handler+0x1c4>
			hop_mode = HOP_SWEEP;
    4a94:	2201      	movs	r2, #1
    4a96:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4a98:	f640 1262 	movw	r2, #2402	; 0x962
    4a9c:	81da      	strh	r2, [r3, #14]
    4a9e:	e017      	b.n	4ad0 <vendor_request_handler+0x1f4>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4aa0:	2200      	movs	r2, #0
    4aa2:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4aa4:	89d9      	ldrh	r1, [r3, #14]
    4aa6:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4aaa:	b289      	uxth	r1, r1
    4aac:	4291      	cmp	r1, r2
    4aae:	bf8a      	itet	hi
    4ab0:	89db      	ldrhhi	r3, [r3, #14]
    4ab2:	4613      	movls	r3, r2
    4ab4:	b29b      	uxthhi	r3, r3
    4ab6:	81e3      	strh	r3, [r4, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4ab8:	89e2      	ldrh	r2, [r4, #14]
    4aba:	f640 23e9 	movw	r3, #2793	; 0xae9
    4abe:	b292      	uxth	r2, r2
    4ac0:	429a      	cmp	r2, r3
    4ac2:	bf97      	itett	ls
    4ac4:	4b1e      	ldrls	r3, [pc, #120]	; (4b40 <vendor_request_handler+0x264>)
    4ac6:	f640 23ea 	movwhi	r3, #2794	; 0xaea
    4aca:	89db      	ldrhls	r3, [r3, #14]
    4acc:	b29b      	uxthls	r3, r3
    4ace:	81e3      	strh	r3, [r4, #14]
		}

		le_adv_channel = requested_channel;
    4ad0:	89e1      	ldrh	r1, [r4, #14]
    4ad2:	4b23      	ldr	r3, [pc, #140]	; (4b60 <vendor_request_handler+0x284>)
    4ad4:	b289      	uxth	r1, r1
    4ad6:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
		if (mode != MODE_BT_FOLLOW_LE) {
    4ada:	7c61      	ldrb	r1, [r4, #17]
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
			requested_channel = MIN(requested_channel, MAX_FREQ);
		}

		le_adv_channel = requested_channel;
    4adc:	4a18      	ldr	r2, [pc, #96]	; (4b40 <vendor_request_handler+0x264>)
		if (mode != MODE_BT_FOLLOW_LE) {
    4ade:	2909      	cmp	r1, #9
    4ae0:	f000 822d 	beq.w	4f3e <vendor_request_handler+0x662>
			channel = requested_channel;
    4ae4:	89d1      	ldrh	r1, [r2, #14]
    4ae6:	b289      	uxth	r1, r1
    4ae8:	8019      	strh	r1, [r3, #0]
			requested_channel = 0;
    4aea:	2100      	movs	r1, #0
    4aec:	81d1      	strh	r1, [r2, #14]
    4aee:	e195      	b.n	4e1c <vendor_request_handler+0x540>
			cs_threshold_calc_and_set(channel);
		}
		break;

	case UBERTOOTH_SET_ISP:
		set_isp();
    4af0:	f004 f91a 	bl	8d28 <set_isp>
		*data_len = 0; /* should never return */
    4af4:	2300      	movs	r3, #0
    4af6:	e7b4      	b.n	4a62 <vendor_request_handler+0x186>
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4af8:	4a1a      	ldr	r2, [pc, #104]	; (4b64 <vendor_request_handler+0x288>)
    4afa:	4b1b      	ldr	r3, [pc, #108]	; (4b68 <vendor_request_handler+0x28c>)
    4afc:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    4afe:	230b      	movs	r3, #11
    4b00:	e1fd      	b.n	4efe <vendor_request_handler+0x622>
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b02:	880a      	ldrh	r2, [r1, #0]
    4b04:	f46f 6c00 	mvn.w	ip, #2048	; 0x800
    4b08:	eb02 030c 	add.w	r3, r2, ip
    4b0c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4b10:	b29b      	uxth	r3, r3
    4b12:	428b      	cmp	r3, r1
    4b14:	f200 8216 	bhi.w	4f44 <vendor_request_handler+0x668>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b18:	887b      	ldrh	r3, [r7, #2]
		bootloader_ctrl = DFU_MODE;
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b1a:	f46f 6600 	mvn.w	r6, #2048	; 0x800
    4b1e:	1998      	adds	r0, r3, r6
    4b20:	b280      	uxth	r0, r0
    4b22:	4288      	cmp	r0, r1
    4b24:	f200 820e 	bhi.w	4f44 <vendor_request_handler+0x668>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b28:	4293      	cmp	r3, r2
    4b2a:	f0c0 820b 	bcc.w	4f44 <vendor_request_handler+0x668>
				request_params[1] < request_params[0])
			return 0;
		low_freq = request_params[0];
    4b2e:	490c      	ldr	r1, [pc, #48]	; (4b60 <vendor_request_handler+0x284>)
    4b30:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		high_freq = request_params[1];
    4b34:	f8a1 304e 	strh.w	r3, [r1, #78]	; 0x4e
		requested_mode = MODE_SPECAN;
    4b38:	2304      	movs	r3, #4
    4b3a:	e023      	b.n	4b84 <vendor_request_handler+0x2a8>
		*data_len = 0;
		break;

	case UBERTOOTH_RX_GENERIC:
		requested_mode = MODE_RX_GENERIC;
    4b3c:	230f      	movs	r3, #15
    4b3e:	e021      	b.n	4b84 <vendor_request_handler+0x2a8>
    4b40:	10000e34 	.word	0x10000e34
    4b44:	2009c034 	.word	0x2009c034
    4b48:	2009c03c 	.word	0x2009c03c
    4b4c:	2009c038 	.word	0x2009c038
    4b50:	2009c054 	.word	0x2009c054
    4b54:	2009c058 	.word	0x2009c058
    4b58:	2009c05c 	.word	0x2009c05c
    4b5c:	100014e4 	.word	0x100014e4
    4b60:	1000044c 	.word	0x1000044c
    4b64:	4305bb21 	.word	0x4305bb21
    4b68:	1000001c 	.word	0x1000001c
		*data_len = 0;
		break;

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4b6c:	880b      	ldrh	r3, [r1, #0]
    4b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4b72:	f200 81e7 	bhi.w	4f44 <vendor_request_handler+0x668>
			return 0;
		rssi_threshold = 54 - request_params[0];
    4b76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4b7a:	4aaf      	ldr	r2, [pc, #700]	; (4e38 <vendor_request_handler+0x55c>)
    4b7c:	b2db      	uxtb	r3, r3
    4b7e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		requested_mode = MODE_LED_SPECAN;
    4b82:	2307      	movs	r3, #7
    4b84:	74a3      	strb	r3, [r4, #18]
    4b86:	e7b5      	b.n	4af4 <vendor_request_handler+0x218>
		*data_len = 0;
		break;

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4b88:	2300      	movs	r3, #0
    4b8a:	7033      	strb	r3, [r6, #0]
		data[1] = 0x00;
    4b8c:	7073      	strb	r3, [r6, #1]

		length = (u8)strlen(GIT_REVISION);
    4b8e:	48ab      	ldr	r0, [pc, #684]	; (4e3c <vendor_request_handler+0x560>)
    4b90:	f005 f9e0 	bl	9f54 <strlen>
    4b94:	b2c4      	uxtb	r4, r0
		data[2] = length;
    4b96:	70b4      	strb	r4, [r6, #2]

		memcpy(&data[3], GIT_REVISION, length);
    4b98:	4622      	mov	r2, r4
    4b9a:	1cf0      	adds	r0, r6, #3
    4b9c:	49a7      	ldr	r1, [pc, #668]	; (4e3c <vendor_request_handler+0x560>)
    4b9e:	f005 f94b 	bl	9e38 <memcpy>

		*data_len = 2 + 1 + length;
    4ba2:	3403      	adds	r4, #3
    4ba4:	e00b      	b.n	4bbe <vendor_request_handler+0x2e2>
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4ba6:	48a6      	ldr	r0, [pc, #664]	; (4e40 <vendor_request_handler+0x564>)
    4ba8:	f005 f9d4 	bl	9f54 <strlen>
    4bac:	b2c4      	uxtb	r4, r0
		data[0] = length;
    4bae:	4630      	mov	r0, r6
    4bb0:	f800 4b01 	strb.w	r4, [r0], #1
		memcpy(&data[1], compile_info, length);
    4bb4:	4622      	mov	r2, r4
    4bb6:	49a2      	ldr	r1, [pc, #648]	; (4e40 <vendor_request_handler+0x564>)
    4bb8:	f005 f93e 	bl	9e38 <memcpy>
		*data_len = 1 + length;
    4bbc:	3401      	adds	r4, #1
    4bbe:	602c      	str	r4, [r5, #0]
    4bc0:	e1bd      	b.n	4f3e <vendor_request_handler+0x662>
		break;

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4bc2:	2001      	movs	r0, #1
    4bc4:	7030      	strb	r0, [r6, #0]
    4bc6:	e11e      	b.n	4e06 <vendor_request_handler+0x52a>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4bc8:	880a      	ldrh	r2, [r1, #0]
    4bca:	4b9e      	ldr	r3, [pc, #632]	; (4e44 <vendor_request_handler+0x568>)
    4bcc:	701a      	strb	r2, [r3, #0]
    4bce:	e124      	b.n	4e1a <vendor_request_handler+0x53e>
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4bd0:	4b9c      	ldr	r3, [pc, #624]	; (4e44 <vendor_request_handler+0x568>)
    4bd2:	781b      	ldrb	r3, [r3, #0]
    4bd4:	7033      	strb	r3, [r6, #0]
    4bd6:	e115      	b.n	4e04 <vendor_request_handler+0x528>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4bd8:	4f9b      	ldr	r7, [pc, #620]	; (4e48 <vendor_request_handler+0x56c>)
    4bda:	2400      	movs	r4, #0
    4bdc:	2500      	movs	r5, #0
    4bde:	e9c7 4500 	strd	r4, r5, [r7]
		target.syncword = 0;
    4be2:	e9c7 4502 	strd	r4, r5, [r7, #8]
		for(int i=0; i < 8; i++) {
    4be6:	f04f 0800 	mov.w	r8, #0
			target.address |= (uint64_t)data[i] << 8*i;
    4bea:	f816 0008 	ldrb.w	r0, [r6, r8]
    4bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4bf2:	2100      	movs	r1, #0
    4bf4:	f004 fc4e 	bl	9494 <__aeabi_llsl>
    4bf8:	e9d7 4500 	ldrd	r4, r5, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4bfc:	f108 0801 	add.w	r8, r8, #1
			target.address |= (uint64_t)data[i] << 8*i;
    4c00:	4320      	orrs	r0, r4
    4c02:	4329      	orrs	r1, r5
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4c04:	f1b8 0f08 	cmp.w	r8, #8
			target.address |= (uint64_t)data[i] << 8*i;
    4c08:	e9c7 0100 	strd	r0, r1, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4c0c:	d1ed      	bne.n	4bea <vendor_request_handler+0x30e>
    4c0e:	f04f 0800 	mov.w	r8, #0
    4c12:	eb06 0308 	add.w	r3, r6, r8
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c16:	7a18      	ldrb	r0, [r3, #8]
    4c18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4c1c:	2100      	movs	r1, #0
    4c1e:	f004 fc39 	bl	9494 <__aeabi_llsl>
    4c22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c26:	f108 0801 	add.w	r8, r8, #1
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c2a:	4320      	orrs	r0, r4
    4c2c:	4329      	orrs	r1, r5
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c2e:	f1b8 0f08 	cmp.w	r8, #8
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c32:	e9c7 0102 	strd	r0, r1, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c36:	d1ec      	bne.n	4c12 <vendor_request_handler+0x336>
			target.syncword |= (uint64_t)data[i+8] << 8*i;
		}
		precalc();
    4c38:	f002 fba8 	bl	738c <precalc>
    4c3c:	e17f      	b.n	4f3e <vendor_request_handler+0x662>
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
    4c3e:	4a83      	ldr	r2, [pc, #524]	; (4e4c <vendor_request_handler+0x570>)
    4c40:	2300      	movs	r3, #0
    4c42:	6013      	str	r3, [r2, #0]
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
    4c44:	6811      	ldr	r1, [r2, #0]
    4c46:	0209      	lsls	r1, r1, #8
    4c48:	6011      	str	r1, [r2, #0]
			clkn_offset |= data[i];
    4c4a:	5cf0      	ldrb	r0, [r6, r3]
    4c4c:	6811      	ldr	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c4e:	3301      	adds	r3, #1
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c50:	4301      	orrs	r1, r0
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c52:	2b04      	cmp	r3, #4
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c54:	6011      	str	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c56:	d1f5      	bne.n	4c44 <vendor_request_handler+0x368>
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
    4c58:	2302      	movs	r3, #2
    4c5a:	72a3      	strb	r3, [r4, #10]
		dma_discard = 1;
		DIO_SSEL_SET;
    4c5c:	4b7c      	ldr	r3, [pc, #496]	; (4e50 <vendor_request_handler+0x574>)
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c5e:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c64:	7420      	strb	r0, [r4, #16]
		DIO_SSEL_SET;
    4c66:	601a      	str	r2, [r3, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4c68:	7973      	ldrb	r3, [r6, #5]
    4c6a:	7932      	ldrb	r2, [r6, #4]
    4c6c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    4c70:	4b78      	ldr	r3, [pc, #480]	; (4e54 <vendor_request_handler+0x578>)
    4c72:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    4c74:	2308      	movs	r3, #8
    4c76:	74a3      	strb	r3, [r4, #18]
		break;
    4c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
    4c7c:	2305      	movs	r3, #5
    4c7e:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_AFH;
    4c80:	230e      	movs	r3, #14
    4c82:	74a3      	strb	r3, [r4, #18]

		for(int i=0; i < 10; i++) {
    4c84:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4c86:	4974      	ldr	r1, [pc, #464]	; (4e58 <vendor_request_handler+0x57c>)
    4c88:	2200      	movs	r2, #0
    4c8a:	545a      	strb	r2, [r3, r1]

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
    4c8c:	3301      	adds	r3, #1
    4c8e:	2b0a      	cmp	r3, #10
    4c90:	d1f9      	bne.n	4c86 <vendor_request_handler+0x3aa>
			afh_map[i] = 0;
		}
		used_channels = 0;
    4c92:	4b72      	ldr	r3, [pc, #456]	; (4e5c <vendor_request_handler+0x580>)
		afh_enabled = 1;
    4c94:	2001      	movs	r0, #1
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
		}
		used_channels = 0;
    4c96:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4c98:	4b71      	ldr	r3, [pc, #452]	; (4e60 <vendor_request_handler+0x584>)
    4c9a:	7018      	strb	r0, [r3, #0]
		break;
    4c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_HOP:
		do_hop = 1;
    4ca0:	2001      	movs	r0, #1
    4ca2:	72e0      	strb	r0, [r4, #11]
		break;
    4ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4ca8:	78b2      	ldrb	r2, [r6, #2]
    4caa:	7873      	ldrb	r3, [r6, #1]
    4cac:	0412      	lsls	r2, r2, #16
    4cae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    4cb2:	7833      	ldrb	r3, [r6, #0]
    4cb4:	431a      	orrs	r2, r3
    4cb6:	78f3      	ldrb	r3, [r6, #3]
    4cb8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		clkn = clock;
    4cbc:	4b69      	ldr	r3, [pc, #420]	; (4e64 <vendor_request_handler+0x588>)
    4cbe:	601a      	str	r2, [r3, #0]
    4cc0:	e0ab      	b.n	4e1a <vendor_request_handler+0x53e>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4cc2:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = data[i];
    4cc4:	5cf1      	ldrb	r1, [r6, r3]
    4cc6:	4a64      	ldr	r2, [pc, #400]	; (4e58 <vendor_request_handler+0x57c>)
    4cc8:	5499      	strb	r1, [r3, r2]
		clkn = clock;
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    4cca:	3301      	adds	r3, #1
    4ccc:	2b0a      	cmp	r3, #10
    4cce:	d1f9      	bne.n	4cc4 <vendor_request_handler+0x3e8>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    4cd0:	4a63      	ldr	r2, [pc, #396]	; (4e60 <vendor_request_handler+0x584>)
    4cd2:	2001      	movs	r0, #1
    4cd4:	7010      	strb	r0, [r2, #0]
		*data_len = 10;
    4cd6:	602b      	str	r3, [r5, #0]
		break;
    4cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4cdc:	2300      	movs	r3, #0
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
    4cde:	495e      	ldr	r1, [pc, #376]	; (4e58 <vendor_request_handler+0x57c>)
    4ce0:	2200      	movs	r2, #0
    4ce2:	545a      	strb	r2, [r3, r1]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    4ce4:	3301      	adds	r3, #1
    4ce6:	2b0a      	cmp	r3, #10
    4ce8:	d1f9      	bne.n	4cde <vendor_request_handler+0x402>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    4cea:	495d      	ldr	r1, [pc, #372]	; (4e60 <vendor_request_handler+0x584>)
    4cec:	700a      	strb	r2, [r1, #0]
    4cee:	e6b8      	b.n	4a62 <vendor_request_handler+0x186>
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    4cf0:	4b5c      	ldr	r3, [pc, #368]	; (4e64 <vendor_request_handler+0x588>)
    4cf2:	6819      	ldr	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4cf4:	2300      	movs	r3, #0
    4cf6:	00da      	lsls	r2, r3, #3
			data[i] = (clock >> (8*i)) & 0xff;
    4cf8:	fa21 f202 	lsr.w	r2, r1, r2
    4cfc:	54f2      	strb	r2, [r6, r3]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(int i=0; i < 4; i++) {
    4cfe:	3301      	adds	r3, #1
    4d00:	2b04      	cmp	r3, #4
    4d02:	d1f8      	bne.n	4cf6 <vendor_request_handler+0x41a>
    4d04:	e6ad      	b.n	4a62 <vendor_request_handler+0x186>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_TRIM_CLOCK:
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4d06:	7873      	ldrb	r3, [r6, #1]
    4d08:	7832      	ldrb	r2, [r6, #0]
    4d0a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    4d0e:	4b51      	ldr	r3, [pc, #324]	; (4e54 <vendor_request_handler+0x578>)
    4d10:	801a      	strh	r2, [r3, #0]
    4d12:	e114      	b.n	4f3e <vendor_request_handler+0x662>
		break;

	case UBERTOOTH_FIX_CLOCK_DRIFT:
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4d14:	4b54      	ldr	r3, [pc, #336]	; (4e68 <vendor_request_handler+0x58c>)
    4d16:	7830      	ldrb	r0, [r6, #0]
    4d18:	8819      	ldrh	r1, [r3, #0]
    4d1a:	7872      	ldrb	r2, [r6, #1]
    4d1c:	b289      	uxth	r1, r1
    4d1e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4d22:	440a      	add	r2, r1
    4d24:	b292      	uxth	r2, r2
    4d26:	801a      	strh	r2, [r3, #0]

		// Too slow
		if (clk_drift_ppm < 0) {
    4d28:	881a      	ldrh	r2, [r3, #0]
    4d2a:	4950      	ldr	r1, [pc, #320]	; (4e6c <vendor_request_handler+0x590>)
    4d2c:	b212      	sxth	r2, r2
    4d2e:	2a00      	cmp	r2, #0
    4d30:	4a4f      	ldr	r2, [pc, #316]	; (4e70 <vendor_request_handler+0x594>)
    4d32:	da07      	bge.n	4d44 <vendor_request_handler+0x468>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4d34:	881b      	ldrh	r3, [r3, #0]
    4d36:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d3a:	425b      	negs	r3, r3
    4d3c:	b29b      	uxth	r3, r3
    4d3e:	fb90 f3f3 	sdiv	r3, r0, r3
    4d42:	e00a      	b.n	4d5a <vendor_request_handler+0x47e>
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
		}
		// Too fast
		else if (clk_drift_ppm > 0) {
    4d44:	8818      	ldrh	r0, [r3, #0]
    4d46:	b200      	sxth	r0, r0
    4d48:	2800      	cmp	r0, #0
    4d4a:	dd0d      	ble.n	4d68 <vendor_request_handler+0x48c>
			clk_drift_correction = 320 / clk_drift_ppm;
    4d4c:	881b      	ldrh	r3, [r3, #0]
    4d4e:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d52:	b21b      	sxth	r3, r3
    4d54:	fb90 f3f3 	sdiv	r3, r0, r3
    4d58:	b29b      	uxth	r3, r3
    4d5a:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4d5c:	4b45      	ldr	r3, [pc, #276]	; (4e74 <vendor_request_handler+0x598>)
    4d5e:	6818      	ldr	r0, [r3, #0]
    4d60:	8813      	ldrh	r3, [r2, #0]
    4d62:	b29b      	uxth	r3, r3
    4d64:	4403      	add	r3, r0
    4d66:	e001      	b.n	4d6c <vendor_request_handler+0x490>
		}
		// Don't trim
		else {
			clk_drift_correction = 0;
    4d68:	2300      	movs	r3, #0
    4d6a:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = 0;
    4d6c:	600b      	str	r3, [r1, #0]
    4d6e:	e0e6      	b.n	4f3e <vendor_request_handler+0x662>
		}

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    4d70:	2300      	movs	r3, #0
    4d72:	602b      	str	r3, [r5, #0]

		do_hop = 0;
    4d74:	72e3      	strb	r3, [r4, #11]
		hop_mode = HOP_BTLE;
    4d76:	2303      	movs	r3, #3
    4d78:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4d7a:	2309      	movs	r3, #9
    4d7c:	e04a      	b.n	4e14 <vendor_request_handler+0x538>
		cs_threshold_calc_and_set(channel);
		break;
	
	// JWHUR cfo estimation tracking
	case UBERTOOTH_BTLE_CFO:
		do_hop = 0;
    4d7e:	2300      	movs	r3, #0
    4d80:	72e3      	strb	r3, [r4, #11]
		hop_mode = HOP_BTLE;
    4d82:	2303      	movs	r3, #3
    4d84:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_CFO_LE;
    4d86:	2311      	movs	r3, #17
    4d88:	e044      	b.n	4e14 <vendor_request_handler+0x538>
		queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_BTLE_RSSI:
		do_hop = 0;
    4d8a:	2300      	movs	r3, #0
    4d8c:	72e3      	strb	r3, [r4, #11]
		hop_mode = HOP_BTLE;
    4d8e:	2303      	movs	r3, #3
    4d90:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_RSSI_LE;
    4d92:	2312      	movs	r3, #18
    4d94:	e03e      	b.n	4e14 <vendor_request_handler+0x538>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4d96:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4d98:	4927      	ldr	r1, [pc, #156]	; (4e38 <vendor_request_handler+0x55c>)
    4d9a:	00da      	lsls	r2, r3, #3
    4d9c:	6849      	ldr	r1, [r1, #4]
    4d9e:	fa21 f202 	lsr.w	r2, r1, r2
    4da2:	54f2      	strb	r2, [r6, r3]
		queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    4da4:	3301      	adds	r3, #1
    4da6:	2b04      	cmp	r3, #4
    4da8:	d1f6      	bne.n	4d98 <vendor_request_handler+0x4bc>
    4daa:	e65a      	b.n	4a62 <vendor_request_handler+0x186>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4dac:	78b3      	ldrb	r3, [r6, #2]
    4dae:	7872      	ldrb	r2, [r6, #1]
    4db0:	041b      	lsls	r3, r3, #16
    4db2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4db6:	7832      	ldrb	r2, [r6, #0]
    4db8:	78f0      	ldrb	r0, [r6, #3]
    4dba:	4313      	orrs	r3, r2
    4dbc:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4dc0:	f7ff fbf0 	bl	45a4 <le_set_access_address>
		le.target_set = 1;
    4dc4:	2001      	movs	r0, #1
    4dc6:	4b1c      	ldr	r3, [pc, #112]	; (4e38 <vendor_request_handler+0x55c>)
    4dc8:	e0af      	b.n	4f2a <vendor_request_handler+0x64e>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    4dca:	2313      	movs	r3, #19
    4dcc:	7033      	strb	r3, [r6, #0]
		data[1] = 0x37;
    4dce:	2337      	movs	r3, #55	; 0x37
    4dd0:	7073      	strb	r3, [r6, #1]
    4dd2:	e02e      	b.n	4e32 <vendor_request_handler+0x556>
		*data_len = 2;
		break;

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    4dd4:	4b18      	ldr	r3, [pc, #96]	; (4e38 <vendor_request_handler+0x55c>)
    4dd6:	695b      	ldr	r3, [r3, #20]
    4dd8:	3300      	adds	r3, #0
    4dda:	bf18      	it	ne
    4ddc:	2301      	movne	r3, #1
    4dde:	e6f9      	b.n	4bd4 <vendor_request_handler+0x2f8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    4de0:	880a      	ldrh	r2, [r1, #0]
    4de2:	4b15      	ldr	r3, [pc, #84]	; (4e38 <vendor_request_handler+0x55c>)
    4de4:	3200      	adds	r2, #0
    4de6:	bf18      	it	ne
    4de8:	2201      	movne	r2, #1
    4dea:	615a      	str	r2, [r3, #20]
    4dec:	e0a7      	b.n	4f3e <vendor_request_handler+0x662>
		break;

	case UBERTOOTH_POLL:
		p = dequeue();
    4dee:	f002 fd43 	bl	7878 <dequeue>
		if (p != NULL) {
    4df2:	4601      	mov	r1, r0
    4df4:	b128      	cbz	r0, 4e02 <vendor_request_handler+0x526>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4df6:	4630      	mov	r0, r6
    4df8:	2240      	movs	r2, #64	; 0x40
    4dfa:	f005 f81d 	bl	9e38 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4dfe:	2340      	movs	r3, #64	; 0x40
    4e00:	e62f      	b.n	4a62 <vendor_request_handler+0x186>
		} else {
			data[0] = 0;
    4e02:	7030      	strb	r0, [r6, #0]
			*data_len = 1;
    4e04:	2001      	movs	r0, #1
    4e06:	6028      	str	r0, [r5, #0]
    4e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    4e0c:	2300      	movs	r3, #0
    4e0e:	602b      	str	r3, [r5, #0]

		hop_mode = HOP_NONE;
    4e10:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4e12:	230a      	movs	r3, #10
    4e14:	74a3      	strb	r3, [r4, #18]

		queue_init();
    4e16:	f002 fced 	bl	77f4 <queue_init>
		cs_threshold_calc_and_set(channel);
    4e1a:	4b07      	ldr	r3, [pc, #28]	; (4e38 <vendor_request_handler+0x55c>)
    4e1c:	8818      	ldrh	r0, [r3, #0]
    4e1e:	b280      	uxth	r0, r0
    4e20:	f002 fdf0 	bl	7a04 <cs_threshold_calc_and_set>
    4e24:	e08b      	b.n	4f3e <vendor_request_handler+0x662>
		break;

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    4e26:	7808      	ldrb	r0, [r1, #0]
    4e28:	f003 fd66 	bl	88f8 <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4e2c:	0a03      	lsrs	r3, r0, #8
    4e2e:	7033      	strb	r3, [r6, #0]
		data[1] = reg_val & 0xff;
    4e30:	7070      	strb	r0, [r6, #1]
		*data_len = 2;
    4e32:	2302      	movs	r3, #2
    4e34:	e615      	b.n	4a62 <vendor_request_handler+0x186>
    4e36:	bf00      	nop
    4e38:	1000044c 	.word	0x1000044c
    4e3c:	0000aae0 	.word	0x0000aae0
    4e40:	0000a2bf 	.word	0x0000a2bf
    4e44:	100014a8 	.word	0x100014a8
    4e48:	10001528 	.word	0x10001528
    4e4c:	10001018 	.word	0x10001018
    4e50:	2009c098 	.word	0x2009c098
    4e54:	10001172 	.word	0x10001172
    4e58:	1000100b 	.word	0x1000100b
    4e5c:	10001009 	.word	0x10001009
    4e60:	100014a7 	.word	0x100014a7
    4e64:	10001024 	.word	0x10001024
    4e68:	100014a4 	.word	0x100014a4
    4e6c:	100014dc 	.word	0x100014dc
    4e70:	10001020 	.word	0x10001020
    4e74:	1000101c 	.word	0x1000101c
		break;

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4e78:	7808      	ldrb	r0, [r1, #0]
    4e7a:	8849      	ldrh	r1, [r1, #2]
    4e7c:	f003 fd45 	bl	890a <cc2400_set>
    4e80:	e05d      	b.n	4f3e <vendor_request_handler+0x662>
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e82:	883b      	ldrh	r3, [r7, #0]
    4e84:	42a3      	cmp	r3, r4
    4e86:	d95a      	bls.n	4f3e <vendor_request_handler+0x662>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    4e88:	2303      	movs	r3, #3
    4e8a:	4363      	muls	r3, r4
    4e8c:	18f2      	adds	r2, r6, r3
    4e8e:	7851      	ldrb	r1, [r2, #1]
    4e90:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4e92:	5cf0      	ldrb	r0, [r6, r3]
    4e94:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e98:	3401      	adds	r4, #1
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
			cc2400_set(data[i*3], reg_val);
    4e9a:	f003 fd36 	bl	890a <cc2400_set>
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e9e:	b2e4      	uxtb	r4, r4
    4ea0:	e7ef      	b.n	4e82 <vendor_request_handler+0x5a6>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4ea2:	2400      	movs	r4, #0
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
			reg_val = cc2400_get(i);
    4ea4:	4620      	mov	r0, r4
    4ea6:	f003 fd27 	bl	88f8 <cc2400_get>
			data[i*3] = i;
    4eaa:	7034      	strb	r4, [r6, #0]
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4eac:	3401      	adds	r4, #1
    4eae:	b2e4      	uxtb	r4, r4
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4eb0:	0a03      	lsrs	r3, r0, #8
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4eb2:	2c2e      	cmp	r4, #46	; 0x2e
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4eb4:	7073      	strb	r3, [r6, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4eb6:	70b0      	strb	r0, [r6, #2]
    4eb8:	f106 0603 	add.w	r6, r6, #3
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4ebc:	d1f2      	bne.n	4ea4 <vendor_request_handler+0x5c8>
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
			data[(i*3)+2] = reg_val & 0xff;
		}
		*data_len = MAX_READ_REG*3;
    4ebe:	2387      	movs	r3, #135	; 0x87
    4ec0:	e5cf      	b.n	4a62 <vendor_request_handler+0x186>
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4ec2:	79b2      	ldrb	r2, [r6, #6]
		memcpy(&tx_pkt, data, i);
    4ec4:	4821      	ldr	r0, [pc, #132]	; (4f4c <vendor_request_handler+0x670>)
		}
		*data_len = MAX_READ_REG*3;
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4ec6:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4ec8:	4631      	mov	r1, r6
    4eca:	b2d2      	uxtb	r2, r2
    4ecc:	f004 ffb4 	bl	9e38 <memcpy>
		//tx_pkt.channel = data[4] << 8 | data[5];
		requested_mode = MODE_TX_GENERIC;
    4ed0:	2310      	movs	r3, #16
    4ed2:	e657      	b.n	4b84 <vendor_request_handler+0x2a8>
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4ed4:	4618      	mov	r0, r3
    4ed6:	f004 fcc1 	bl	985c <malloc>
    4eda:	4b1d      	ldr	r3, [pc, #116]	; (4f50 <vendor_request_handler+0x674>)
		memcpy(slave_mac_address_data, data, dlen);
    4edc:	4631      	mov	r1, r6
    4ede:	6a22      	ldr	r2, [r4, #32]
		requested_mode = MODE_TX_GENERIC;
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4ee0:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4ee2:	f004 ffa9 	bl	9e38 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4ee6:	230c      	movs	r3, #12
    4ee8:	e009      	b.n	4efe <vendor_request_handler+0x622>
		break;

	//JWHUR for rssi sampling synchronization
	case UBERTOOTH_BTLE_SYNC:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4eea:	4618      	mov	r0, r3
    4eec:	f004 fcb6 	bl	985c <malloc>
    4ef0:	4b17      	ldr	r3, [pc, #92]	; (4f50 <vendor_request_handler+0x674>)
		memcpy(slave_mac_address_data, data, dlen);
    4ef2:	4631      	mov	r1, r6
    4ef4:	6a22      	ldr	r2, [r4, #32]
		requested_mode = MODE_BT_SLAVE_LE;
		break;

	//JWHUR for rssi sampling synchronization
	case UBERTOOTH_BTLE_SYNC:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4ef6:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4ef8:	f004 ff9e 	bl	9e38 <memcpy>
		requested_mode = MODE_BT_SYNC_LE;
    4efc:	2313      	movs	r3, #19
    4efe:	74a3      	strb	r3, [r4, #18]
    4f00:	e01d      	b.n	4f3e <vendor_request_handler+0x662>
		break;
	
	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4f02:	7972      	ldrb	r2, [r6, #5]
    4f04:	4b13      	ldr	r3, [pc, #76]	; (4f54 <vendor_request_handler+0x678>)
		le.target[1] = data[4];
		le.target[2] = data[3];
		le.target[3] = data[2];
		le.target[4] = data[1];
		le.target[5] = data[0];
		le.target_set = 1;
    4f06:	2001      	movs	r0, #1
		break;
	
	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[1] = data[4];
    4f0c:	7932      	ldrb	r2, [r6, #4]
    4f0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target[2] = data[3];
    4f12:	78f2      	ldrb	r2, [r6, #3]
    4f14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		le.target[3] = data[2];
    4f18:	78b2      	ldrb	r2, [r6, #2]
    4f1a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		le.target[4] = data[1];
    4f1e:	7872      	ldrb	r2, [r6, #1]
    4f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		le.target[5] = data[0];
    4f24:	7832      	ldrb	r2, [r6, #0]
    4f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		le.target_set = 1;
    4f2a:	6418      	str	r0, [r3, #64]	; 0x40
		break;
    4f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    4f30:	780b      	ldrb	r3, [r1, #0]
    4f32:	74e3      	strb	r3, [r4, #19]
    4f34:	e003      	b.n	4f3e <vendor_request_handler+0x662>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    4f36:	230d      	movs	r3, #13
    4f38:	74a3      	strb	r3, [r4, #18]
		ego_mode = request_params[0];
    4f3a:	780b      	ldrb	r3, [r1, #0]
    4f3c:	7523      	strb	r3, [r4, #20]
		break;

	default:
		return 0;
	}
	return 1;
    4f3e:	2001      	movs	r0, #1
    4f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4f44:	2000      	movs	r0, #0

	default:
		return 0;
	}
	return 1;
}
    4f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f4a:	bf00      	nop
    4f4c:	10001028 	.word	0x10001028
    4f50:	100014e0 	.word	0x100014e0
    4f54:	1000044c 	.word	0x1000044c

00004f58 <enqueue_time>:
	return 1;
}

//JWHUR usb_time_rx
static int enqueue_time(uint8_t* buf)
{
    4f58:	b510      	push	{r4, lr}
    4f5a:	4604      	mov	r4, r0
	usb_time_rx* f = usb_enqueue_time();
    4f5c:	f002 fc72 	bl	7844 <usb_enqueue_time>
	if  (f == NULL) {
    4f60:	b928      	cbnz	r0, 4f6e <enqueue_time+0x16>
		status |= FIFO_OVERFLOW;
    4f62:	4b06      	ldr	r3, [pc, #24]	; (4f7c <enqueue_time+0x24>)
    4f64:	7859      	ldrb	r1, [r3, #1]
    4f66:	f041 0104 	orr.w	r1, r1, #4
    4f6a:	7059      	strb	r1, [r3, #1]
    4f6c:	bd10      	pop	{r4, pc}
		return 0;
	}
	memcpy(f->time, buf, 16 * sizeof(long));
    4f6e:	4621      	mov	r1, r4
    4f70:	2240      	movs	r2, #64	; 0x40
    4f72:	f004 ff61 	bl	9e38 <memcpy>
	return 1;
    4f76:	2001      	movs	r0, #1
}
    4f78:	bd10      	pop	{r4, pc}
    4f7a:	bf00      	nop
    4f7c:	10000e34 	.word	0x10000e34

00004f80 <msleep.constprop.3>:
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    4f80:	4b05      	ldr	r3, [pc, #20]	; (4f98 <msleep.constprop.3+0x18>)
    4f82:	681a      	ldr	r2, [r3, #0]
    4f84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    4f88:	3220      	adds	r2, #32
	// handle clkn overflow
	if (stop_at >= ((uint32_t)1<<28)) {
		stop_at -= ((uint32_t)1<<28);
		while ((clkn & 0xffffff) >= now || (clkn & 0xffffff) < stop_at);
	} else {
		while ((clkn & 0xffffff) < stop_at);
    4f8a:	6819      	ldr	r1, [r3, #0]
    4f8c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4f90:	4291      	cmp	r1, r2
    4f92:	d3fa      	bcc.n	4f8a <msleep.constprop.3+0xa>
	}
}
    4f94:	4770      	bx	lr
    4f96:	bf00      	nop
    4f98:	10001024 	.word	0x10001024

00004f9c <enqueue_with_ts>:
	return 1;
}
//

int enqueue_with_ts(uint8_t type, uint8_t* buf, uint32_t ts)
{
    4f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fa0:	4606      	mov	r6, r0
    4fa2:	460f      	mov	r7, r1
    4fa4:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    4fa6:	f002 fc33 	bl	7810 <usb_enqueue>
    4faa:	4d10      	ldr	r5, [pc, #64]	; (4fec <enqueue_with_ts+0x50>)

	/* fail if queue is full */
	if (f == NULL) {
    4fac:	4604      	mov	r4, r0
    4fae:	b928      	cbnz	r0, 4fbc <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    4fb0:	786b      	ldrb	r3, [r5, #1]
    4fb2:	f043 0304 	orr.w	r3, r3, #4
    4fb6:	706b      	strb	r3, [r5, #1]
		return 0;
    4fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4fbc:	4b0c      	ldr	r3, [pc, #48]	; (4ff0 <enqueue_with_ts+0x54>)
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    4fbe:	7006      	strb	r6, [r0, #0]

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4fc0:	881b      	ldrh	r3, [r3, #0]
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    4fc2:	2600      	movs	r6, #0
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4fc4:	b29b      	uxth	r3, r3
    4fc6:	3b62      	subs	r3, #98	; 0x62
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    4fc8:	70c6      	strb	r6, [r0, #3]
	f->clk100ns = ts;
    4fca:	f8c0 8004 	str.w	r8, [r0, #4]

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4fce:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    4fd0:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    4fd2:	72c6      	strb	r6, [r0, #11]

	memcpy(f->data, buf, DMA_SIZE);
    4fd4:	4639      	mov	r1, r7
    4fd6:	2232      	movs	r2, #50	; 0x32
    4fd8:	300e      	adds	r0, #14
    4fda:	f004 ff2d 	bl	9e38 <memcpy>

	f->status = status;
    4fde:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    4fe0:	706e      	strb	r6, [r5, #1]
	f->rssi_avg = 0;
	f->rssi_count = 0;

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    4fe2:	7063      	strb	r3, [r4, #1]
	status = 0;

	return 1;
    4fe4:	2001      	movs	r0, #1
}
    4fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fea:	bf00      	nop
    4fec:	10000e34 	.word	0x10000e34
    4ff0:	1000044c 	.word	0x1000044c

00004ff4 <TIMER0_IRQHandler>:
	return 1;
}

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    4ff4:	b570      	push	{r4, r5, r6, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    4ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4ffa:	681b      	ldr	r3, [r3, #0]
    4ffc:	07db      	lsls	r3, r3, #31
    4ffe:	d57f      	bpl.n	5100 <TIMER0_IRQHandler+0x10c>

		clkn += clkn_offset + 1;
    5000:	4940      	ldr	r1, [pc, #256]	; (5104 <TIMER0_IRQHandler+0x110>)
    5002:	4b41      	ldr	r3, [pc, #260]	; (5108 <TIMER0_IRQHandler+0x114>)
    5004:	6808      	ldr	r0, [r1, #0]
    5006:	681a      	ldr	r2, [r3, #0]
    5008:	4402      	add	r2, r0
    500a:	3201      	adds	r2, #1
    500c:	600a      	str	r2, [r1, #0]
		clkn_offset = 0;
    500e:	2200      	movs	r2, #0
    5010:	601a      	str	r2, [r3, #0]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5012:	4a3e      	ldr	r2, [pc, #248]	; (510c <TIMER0_IRQHandler+0x118>)
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    5014:	680c      	ldr	r4, [r1, #0]
    5016:	4b3e      	ldr	r3, [pc, #248]	; (5110 <TIMER0_IRQHandler+0x11c>)

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5018:	7a96      	ldrb	r6, [r2, #10]
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    501a:	69d8      	ldr	r0, [r3, #28]
    501c:	4615      	mov	r5, r2

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    501e:	b116      	cbz	r6, 5026 <TIMER0_IRQHandler+0x32>
    5020:	7a96      	ldrb	r6, [r2, #10]
    5022:	2e01      	cmp	r6, #1
    5024:	d105      	bne.n	5032 <TIMER0_IRQHandler+0x3e>
			if ((clkn & 0x7f) == 0)
    5026:	680b      	ldr	r3, [r1, #0]
    5028:	065e      	lsls	r6, r3, #25
    502a:	d137      	bne.n	509c <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    502c:	2301      	movs	r3, #1
    502e:	72eb      	strb	r3, [r5, #11]
    5030:	e034      	b.n	509c <TIMER0_IRQHandler+0xa8>
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    5032:	7a95      	ldrb	r5, [r2, #10]
    5034:	2d02      	cmp	r5, #2
    5036:	d103      	bne.n	5040 <TIMER0_IRQHandler+0x4c>
			if ((clkn & 0x1) == 0)
    5038:	680b      	ldr	r3, [r1, #0]
    503a:	07dc      	lsls	r4, r3, #31
    503c:	d42e      	bmi.n	509c <TIMER0_IRQHandler+0xa8>
    503e:	e02b      	b.n	5098 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5040:	7a95      	ldrb	r5, [r2, #10]
    5042:	2d03      	cmp	r5, #3
    5044:	d11c      	bne.n	5080 <TIMER0_IRQHandler+0x8c>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5046:	7e1d      	ldrb	r5, [r3, #24]
    5048:	2d03      	cmp	r5, #3
    504a:	d127      	bne.n	509c <TIMER0_IRQHandler+0xa8>
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    504c:	1a20      	subs	r0, r4, r0
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    504e:	0780      	lsls	r0, r0, #30
    5050:	d124      	bne.n	509c <TIMER0_IRQHandler+0xa8>
				--le.interval_timer;
    5052:	8c18      	ldrh	r0, [r3, #32]
    5054:	b280      	uxth	r0, r0
    5056:	3801      	subs	r0, #1
    5058:	b280      	uxth	r0, r0
    505a:	8418      	strh	r0, [r3, #32]
				if (le.interval_timer == 0) {
    505c:	8c18      	ldrh	r0, [r3, #32]
    505e:	b280      	uxth	r0, r0
    5060:	b948      	cbnz	r0, 5076 <TIMER0_IRQHandler+0x82>
					do_hop = 1;
    5062:	2001      	movs	r0, #1
    5064:	72d0      	strb	r0, [r2, #11]
					++le.conn_count;
    5066:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    5068:	b292      	uxth	r2, r2
    506a:	4402      	add	r2, r0
    506c:	b292      	uxth	r2, r2
    506e:	849a      	strh	r2, [r3, #36]	; 0x24
					le.interval_timer = le.conn_interval;
    5070:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    5072:	841a      	strh	r2, [r3, #32]
    5074:	e012      	b.n	509c <TIMER0_IRQHandler+0xa8>
				} else {
					TXLED_CLR; // hack!
    5076:	4b27      	ldr	r3, [pc, #156]	; (5114 <TIMER0_IRQHandler+0x120>)
    5078:	f44f 7280 	mov.w	r2, #256	; 0x100
    507c:	601a      	str	r2, [r3, #0]
    507e:	e00d      	b.n	509c <TIMER0_IRQHandler+0xa8>
				}
			}
		}
		else if (hop_mode == HOP_AFH) {
    5080:	7a90      	ldrb	r0, [r2, #10]
    5082:	2805      	cmp	r0, #5
    5084:	d10a      	bne.n	509c <TIMER0_IRQHandler+0xa8>
			if( (last_hop + hop_timeout) == clkn ) {
    5086:	4824      	ldr	r0, [pc, #144]	; (5118 <TIMER0_IRQHandler+0x124>)
    5088:	6804      	ldr	r4, [r0, #0]
    508a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
    508e:	680b      	ldr	r3, [r1, #0]
    5090:	b280      	uxth	r0, r0
    5092:	4420      	add	r0, r4
    5094:	4298      	cmp	r0, r3
    5096:	d101      	bne.n	509c <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    5098:	2301      	movs	r3, #1
    509a:	72d3      	strb	r3, [r2, #11]
			}
		}

		// Fix linear clock drift deviation
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    509c:	4a1f      	ldr	r2, [pc, #124]	; (511c <TIMER0_IRQHandler+0x128>)
    509e:	4b20      	ldr	r3, [pc, #128]	; (5120 <TIMER0_IRQHandler+0x12c>)
    50a0:	6810      	ldr	r0, [r2, #0]
    50a2:	b1c0      	cbz	r0, 50d6 <TIMER0_IRQHandler+0xe2>
    50a4:	8818      	ldrh	r0, [r3, #0]
    50a6:	b280      	uxth	r0, r0
    50a8:	b9a8      	cbnz	r0, 50d6 <TIMER0_IRQHandler+0xe2>
			if(clkn >= clkn_next_drift_fix) {
    50aa:	680c      	ldr	r4, [r1, #0]
    50ac:	6810      	ldr	r0, [r2, #0]
    50ae:	4284      	cmp	r4, r0
    50b0:	d311      	bcc.n	50d6 <TIMER0_IRQHandler+0xe2>

				// Too fast
				if(clk_drift_ppm >= 0) {
    50b2:	481c      	ldr	r0, [pc, #112]	; (5124 <TIMER0_IRQHandler+0x130>)
    50b4:	8800      	ldrh	r0, [r0, #0]
    50b6:	b200      	sxth	r0, r0
    50b8:	2800      	cmp	r0, #0
					clk100ns_offset = 1;
    50ba:	bfac      	ite	ge
    50bc:	2001      	movge	r0, #1
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    50be:	f641 0069 	movwlt	r0, #6249	; 0x1869
    50c2:	8018      	strh	r0, [r3, #0]
				}
				clkn_last_drift_fix = clkn;
    50c4:	680c      	ldr	r4, [r1, #0]
    50c6:	4818      	ldr	r0, [pc, #96]	; (5128 <TIMER0_IRQHandler+0x134>)
    50c8:	6004      	str	r4, [r0, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    50ca:	6804      	ldr	r4, [r0, #0]
    50cc:	4817      	ldr	r0, [pc, #92]	; (512c <TIMER0_IRQHandler+0x138>)
    50ce:	8800      	ldrh	r0, [r0, #0]
    50d0:	b280      	uxth	r0, r0
    50d2:	4420      	add	r0, r4
    50d4:	6010      	str	r0, [r2, #0]
			}
		}

		// Negative clock correction
		if(clk100ns_offset > 3124)
    50d6:	8818      	ldrh	r0, [r3, #0]
    50d8:	f640 4234 	movw	r2, #3124	; 0xc34
    50dc:	b280      	uxth	r0, r0
    50de:	4290      	cmp	r0, r2
    50e0:	d902      	bls.n	50e8 <TIMER0_IRQHandler+0xf4>
			clkn += 2;
    50e2:	680a      	ldr	r2, [r1, #0]
    50e4:	3202      	adds	r2, #2
    50e6:	600a      	str	r2, [r1, #0]

		T0MR0 = 3124 + clk100ns_offset;
    50e8:	8819      	ldrh	r1, [r3, #0]
    50ea:	4a11      	ldr	r2, [pc, #68]	; (5130 <TIMER0_IRQHandler+0x13c>)
    50ec:	b289      	uxth	r1, r1
    50ee:	f601 4134 	addw	r1, r1, #3124	; 0xc34
    50f2:	6011      	str	r1, [r2, #0]
		clk100ns_offset = 0;
    50f4:	2200      	movs	r2, #0
    50f6:	801a      	strh	r2, [r3, #0]

		/* Ack interrupt */
		T0IR = TIR_MR0_Interrupt;
    50f8:	2201      	movs	r2, #1
    50fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    50fe:	601a      	str	r2, [r3, #0]
    5100:	bd70      	pop	{r4, r5, r6, pc}
    5102:	bf00      	nop
    5104:	10001024 	.word	0x10001024
    5108:	10001018 	.word	0x10001018
    510c:	10000e34 	.word	0x10000e34
    5110:	1000044c 	.word	0x1000044c
    5114:	2009c03c 	.word	0x2009c03c
    5118:	10001000 	.word	0x10001000
    511c:	100014dc 	.word	0x100014dc
    5120:	10001172 	.word	0x10001172
    5124:	100014a4 	.word	0x100014a4
    5128:	1000101c 	.word	0x1000101c
    512c:	10001020 	.word	0x10001020
    5130:	40004018 	.word	0x40004018

00005134 <EINT3_IRQHandler>:
/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
void EINT3_IRQHandler()
{
	/* TODO - check specific source of shared interrupt */
	IO2IntClr   = PIN_GIO6; // clear interrupt
    5134:	4b08      	ldr	r3, [pc, #32]	; (5158 <EINT3_IRQHandler+0x24>)
    5136:	2204      	movs	r2, #4
    5138:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    513a:	4b08      	ldr	r3, [pc, #32]	; (515c <EINT3_IRQHandler+0x28>)
    513c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5140:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    5142:	4b07      	ldr	r3, [pc, #28]	; (5160 <EINT3_IRQHandler+0x2c>)
    5144:	2201      	movs	r2, #1
    5146:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    5148:	4b06      	ldr	r3, [pc, #24]	; (5164 <EINT3_IRQHandler+0x30>)
    514a:	7a9a      	ldrb	r2, [r3, #10]
    514c:	2a02      	cmp	r2, #2
		dma_discard = 0;
    514e:	bf04      	itt	eq
    5150:	2200      	moveq	r2, #0
    5152:	741a      	strbeq	r2, [r3, #16]
    5154:	4770      	bx	lr
    5156:	bf00      	nop
    5158:	400280ac 	.word	0x400280ac
    515c:	2009c09c 	.word	0x2009c09c
    5160:	10001521 	.word	0x10001521
    5164:	10000e34 	.word	0x10000e34

00005168 <DMA_IRQHandler>:
		while ((clkn & 0xffffff) < stop_at);
	}
}

void DMA_IRQHandler()
{
    5168:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    516a:	4b2d      	ldr	r3, [pc, #180]	; (5220 <DMA_IRQHandler+0xb8>)
    516c:	7c5a      	ldrb	r2, [r3, #17]
    516e:	2a01      	cmp	r2, #1
    5170:	d01a      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_BT_FOLLOW
    5172:	7c5a      	ldrb	r2, [r3, #17]
    5174:	2a08      	cmp	r2, #8
    5176:	d017      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_SPECAN
    5178:	7c5a      	ldrb	r2, [r3, #17]
    517a:	2a04      	cmp	r2, #4
    517c:	d014      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_BT_FOLLOW_LE
    517e:	7c5a      	ldrb	r2, [r3, #17]
    5180:	2a09      	cmp	r2, #9
    5182:	d011      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_BT_CFO_LE
    5184:	7c5a      	ldrb	r2, [r3, #17]
    5186:	2a11      	cmp	r2, #17
    5188:	d00e      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_BT_RSSI_LE
    518a:	7c5a      	ldrb	r2, [r3, #17]
    518c:	2a12      	cmp	r2, #18
    518e:	d00b      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_BT_PROMISC_LE
    5190:	7c5a      	ldrb	r2, [r3, #17]
    5192:	2a0a      	cmp	r2, #10
    5194:	d008      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_BT_SLAVE_LE
    5196:	7c5a      	ldrb	r2, [r3, #17]
    5198:	2a0c      	cmp	r2, #12
    519a:	d005      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_BT_SYNC_LE
    519c:	7c5a      	ldrb	r2, [r3, #17]
    519e:	2a13      	cmp	r2, #19
    51a0:	d002      	beq.n	51a8 <DMA_IRQHandler+0x40>
	   || mode == MODE_RX_GENERIC)
    51a2:	7c5a      	ldrb	r2, [r3, #17]
    51a4:	2a0f      	cmp	r2, #15
    51a6:	d139      	bne.n	521c <DMA_IRQHandler+0xb4>
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
    51a8:	4a1e      	ldr	r2, [pc, #120]	; (5224 <DMA_IRQHandler+0xbc>)
    51aa:	6812      	ldr	r2, [r2, #0]
    51ac:	07d0      	lsls	r0, r2, #31
    51ae:	d535      	bpl.n	521c <DMA_IRQHandler+0xb4>
			if (DMACIntTCStat & (1 << 0)) {
    51b0:	4a1d      	ldr	r2, [pc, #116]	; (5228 <DMA_IRQHandler+0xc0>)
    51b2:	6812      	ldr	r2, [r2, #0]
    51b4:	07d1      	lsls	r1, r2, #31
    51b6:	d526      	bpl.n	5206 <DMA_IRQHandler+0x9e>
				DMACIntTCClear = (1 << 0);
    51b8:	4a1c      	ldr	r2, [pc, #112]	; (522c <DMA_IRQHandler+0xc4>)
    51ba:	2101      	movs	r1, #1
    51bc:	6011      	str	r1, [r2, #0]

				if (hop_mode == HOP_BLUETOOTH)
    51be:	7a9a      	ldrb	r2, [r3, #10]
    51c0:	2a02      	cmp	r2, #2
    51c2:	d103      	bne.n	51cc <DMA_IRQHandler+0x64>
					DIO_SSEL_SET;
    51c4:	4a1a      	ldr	r2, [pc, #104]	; (5230 <DMA_IRQHandler+0xc8>)
    51c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    51ca:	6011      	str	r1, [r2, #0]

				idle_buf_clk100ns  = CLK100NS;
    51cc:	4a19      	ldr	r2, [pc, #100]	; (5234 <DMA_IRQHandler+0xcc>)
    51ce:	481a      	ldr	r0, [pc, #104]	; (5238 <DMA_IRQHandler+0xd0>)
    51d0:	6811      	ldr	r1, [r2, #0]
    51d2:	6800      	ldr	r0, [r0, #0]
    51d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
    51d8:	f640 4435 	movw	r4, #3125	; 0xc35
    51dc:	fb04 0101 	mla	r1, r4, r1, r0
    51e0:	6059      	str	r1, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    51e2:	6812      	ldr	r2, [r2, #0]
    51e4:	f3c2 5207 	ubfx	r2, r2, #20, #8
    51e8:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    51ea:	4a14      	ldr	r2, [pc, #80]	; (523c <DMA_IRQHandler+0xd4>)
    51ec:	8812      	ldrh	r2, [r2, #0]
    51ee:	b292      	uxth	r2, r2
    51f0:	811a      	strh	r2, [r3, #8]

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    51f2:	4a13      	ldr	r2, [pc, #76]	; (5240 <DMA_IRQHandler+0xd8>)
				active_rxbuf = idle_rxbuf;
    51f4:	4b13      	ldr	r3, [pc, #76]	; (5244 <DMA_IRQHandler+0xdc>)
				idle_buf_clk100ns  = CLK100NS;
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    51f6:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    51f8:	6818      	ldr	r0, [r3, #0]
    51fa:	6010      	str	r0, [r2, #0]
				idle_rxbuf = tmp;
    51fc:	6019      	str	r1, [r3, #0]

				++rx_tc;
    51fe:	4b12      	ldr	r3, [pc, #72]	; (5248 <DMA_IRQHandler+0xe0>)
    5200:	681a      	ldr	r2, [r3, #0]
    5202:	3201      	adds	r2, #1
    5204:	601a      	str	r2, [r3, #0]
			}
			if (DMACIntErrStat & (1 << 0)) {
    5206:	4b11      	ldr	r3, [pc, #68]	; (524c <DMA_IRQHandler+0xe4>)
    5208:	681b      	ldr	r3, [r3, #0]
    520a:	07da      	lsls	r2, r3, #31
    520c:	d506      	bpl.n	521c <DMA_IRQHandler+0xb4>
				DMACIntErrClr = (1 << 0);
    520e:	4b10      	ldr	r3, [pc, #64]	; (5250 <DMA_IRQHandler+0xe8>)
    5210:	2201      	movs	r2, #1
    5212:	601a      	str	r2, [r3, #0]
				++rx_err;
    5214:	4b0f      	ldr	r3, [pc, #60]	; (5254 <DMA_IRQHandler+0xec>)
    5216:	681a      	ldr	r2, [r3, #0]
    5218:	3201      	adds	r2, #1
    521a:	601a      	str	r2, [r3, #0]
    521c:	bd10      	pop	{r4, pc}
    521e:	bf00      	nop
    5220:	10000e34 	.word	0x10000e34
    5224:	50004000 	.word	0x50004000
    5228:	50004004 	.word	0x50004004
    522c:	50004008 	.word	0x50004008
    5230:	2009c098 	.word	0x2009c098
    5234:	10001024 	.word	0x10001024
    5238:	40004008 	.word	0x40004008
    523c:	1000044c 	.word	0x1000044c
    5240:	10001064 	.word	0x10001064
    5244:	10001180 	.word	0x10001180
    5248:	10001004 	.word	0x10001004
    524c:	5000400c 	.word	0x5000400c
    5250:	50004010 	.word	0x50004010
    5254:	1000151c 	.word	0x1000151c

00005258 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data, u16 ch)
{
    5258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    525c:	b090      	sub	sp, #64	; 0x40
    525e:	4605      	mov	r5, r0
    5260:	4689      	mov	r9, r1
    5262:	4692      	mov	sl, r2
    5264:	4698      	mov	r8, r3
    5266:	f10d 30ff 	add.w	r0, sp, #4294967295	; 0xffffffff
    526a:	f10d 0103 	add.w	r1, sp, #3

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
    526e:	2200      	movs	r2, #0
	//JWHUR tx power control
	u8 tx_pwr = 0x0007;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
    5270:	b2eb      	uxtb	r3, r5
		aa >>= 8;
		txbuf[i] = 0;
    5272:	7042      	strb	r2, [r0, #1]
	u8 tx_pwr = 0x0007;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
    5274:	0a2d      	lsrs	r5, r5, #8
		txbuf[i] = 0;
    5276:	2407      	movs	r4, #7
		for (j = 0; j < 8; ++j) {
			txbuf[i] |= (byte & 1) << (7 - j);
    5278:	f003 0601 	and.w	r6, r3, #1
    527c:	40a6      	lsls	r6, r4
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    527e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
			txbuf[i] |= (byte & 1) << (7 - j);
    5282:	ea46 0202 	orr.w	r2, r6, r2
    5286:	b2d2      	uxtb	r2, r2
			byte >>= 1;
    5288:	ea4f 0353 	mov.w	r3, r3, lsr #1
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    528c:	d2f4      	bcs.n	5278 <le_transmit+0x20>
    528e:	f800 2f01 	strb.w	r2, [r0, #1]!
	u16 gio_save;
	//JWHUR tx power control
	u8 tx_pwr = 0x0007;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5292:	4288      	cmp	r0, r1
    5294:	d1eb      	bne.n	526e <le_transmit+0x16>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
    5296:	f1a8 0062 	sub.w	r0, r8, #98	; 0x62
    529a:	b2c0      	uxtb	r0, r0
    529c:	f002 f9b0 	bl	7600 <btle_channel_index>
    52a0:	4b52      	ldr	r3, [pc, #328]	; (53ec <le_transmit+0x194>)
	for (i = 0; i < len; ++i) {
    52a2:	2400      	movs	r4, #0
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
    52a4:	5c1e      	ldrb	r6, [r3, r0]
	for (i = 0; i < len; ++i) {
    52a6:	454c      	cmp	r4, r9
    52a8:	d220      	bcs.n	52ec <le_transmit+0x94>
    52aa:	a900      	add	r1, sp, #0
		byte = data[i];
    52ac:	f81a 7004 	ldrb.w	r7, [sl, r4]
    52b0:	4421      	add	r1, r4
    52b2:	2007      	movs	r0, #7
    52b4:	2300      	movs	r3, #0
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    52b6:	4a4d      	ldr	r2, [pc, #308]	; (53ec <le_transmit+0x194>)
    52b8:	f007 0e01 	and.w	lr, r7, #1
    52bc:	4432      	add	r2, r6
    52be:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    52c2:	3601      	adds	r6, #1
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    52c4:	ea8e 0e02 	eor.w	lr, lr, r2
			idx = (idx + 1) % sizeof(whitening);
    52c8:	227f      	movs	r2, #127	; 0x7f
    52ca:	fbb6 fcf2 	udiv	ip, r6, r2
    52ce:	fb02 661c 	mls	r6, r2, ip, r6
			//bit = (byte & 1);
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    52d2:	fa0e f200 	lsl.w	r2, lr, r0
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    52d6:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			//bit = (byte & 1);
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    52da:	ea42 0303 	orr.w	r3, r2, r3
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			//bit = (byte & 1);
			byte >>= 1;
    52de:	ea4f 0757 	mov.w	r7, r7, lsr #1
			txbuf[i+4] |= bit << (7 - j);
    52e2:	b2db      	uxtb	r3, r3
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    52e4:	d2e7      	bcs.n	52b6 <le_transmit+0x5e>
    52e6:	710b      	strb	r3, [r1, #4]
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
    52e8:	3401      	adds	r4, #1
    52ea:	e7dc      	b.n	52a6 <le_transmit+0x4e>
	}

	len += 4; // include the AA in len

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    52ec:	200d      	movs	r0, #13
    52ee:	f647 71ff 	movw	r1, #32767	; 0x7fff
    52f2:	f003 fb0a 	bl	890a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    52f6:	2012      	movs	r0, #18
    52f8:	f642 3122 	movw	r1, #11042	; 0x2b22
    52fc:	f003 fb05 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5300:	2014      	movs	r0, #20
    5302:	f241 314b 	movw	r1, #4939	; 0x134b
    5306:	f003 fb00 	bl	890a <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    530a:	2020      	movs	r0, #32
    530c:	f640 4101 	movw	r1, #3073	; 0xc01
    5310:	f003 fafb 	bl	890a <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   jw_channel);
    5314:	2002      	movs	r0, #2
    5316:	4641      	mov	r1, r8
    5318:	f003 faf7 	bl	890a <cc2400_set>
	// 011 : -7
	// 100 : -4.6
	// 101 : -2.8
	// 110 : -1.3
	// 111 : 0
	cc2400_set(FREND, tx_pwr);
    531c:	2005      	movs	r0, #5
    531e:	2107      	movs	r1, #7
    5320:	f003 faf3 	bl	890a <cc2400_set>
	//cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5324:	2003      	movs	r0, #3
    5326:	2140      	movs	r1, #64	; 0x40
    5328:	f003 faef 	bl	890a <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    532c:	2114      	movs	r1, #20
    532e:	2023      	movs	r0, #35	; 0x23
    5330:	f003 faeb 	bl	890a <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    5334:	07ea      	lsls	r2, r5, #31
		cc2400_set(SYNCH,   0xaaaa);
    5336:	bf4c      	ite	mi
    5338:	f64a 21aa 	movwmi	r1, #43690	; 0xaaaa
	else
		cc2400_set(SYNCH,   0x5555);
    533c:	f245 5155 	movwpl	r1, #21845	; 0x5555
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
		cc2400_set(SYNCH,   0xaaaa);
    5340:	202d      	movs	r0, #45	; 0x2d
	else
		cc2400_set(SYNCH,   0x5555);
    5342:	f003 fae2 	bl	890a <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5346:	2008      	movs	r0, #8
    5348:	f003 fad6 	bl	88f8 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    534c:	f3c0 0108 	ubfx	r1, r0, #0, #9
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5350:	f109 0904 	add.w	r9, r9, #4
		cc2400_set(SYNCH,   0xaaaa);
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5354:	4604      	mov	r4, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5356:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    535a:	2008      	movs	r0, #8
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    535c:	fa5f f989 	uxtb.w	r9, r9
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5360:	f003 fad3 	bl	890a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5364:	f003 fba2 	bl	8aac <cc2400_status>
    5368:	0643      	lsls	r3, r0, #25
    536a:	d5fb      	bpl.n	5364 <le_transmit+0x10c>
	cc2400_strobe(SFSON);
    536c:	2061      	movs	r0, #97	; 0x61
    536e:	f003 fba4 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5372:	f003 fb9b 	bl	8aac <cc2400_status>
    5376:	0747      	lsls	r7, r0, #29
    5378:	d5fb      	bpl.n	5372 <le_transmit+0x11a>
	TXLED_SET;
    537a:	4b1d      	ldr	r3, [pc, #116]	; (53f0 <le_transmit+0x198>)
    537c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5380:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5382:	2280      	movs	r2, #128	; 0x80
    5384:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5386:	200e      	movs	r0, #14
    5388:	f003 fab6 	bl	88f8 <cc2400_get>
    538c:	f000 001f 	and.w	r0, r0, #31
    5390:	280f      	cmp	r0, #15
    5392:	d1f8      	bne.n	5386 <le_transmit+0x12e>
	cc2400_strobe(STX);
    5394:	2063      	movs	r0, #99	; 0x63
    5396:	f003 fb90 	bl	8aba <cc2400_strobe>
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
	}*/

	//JWHUR cc2400 fifo write
	while (GIO6) ;
    539a:	4b16      	ldr	r3, [pc, #88]	; (53f4 <le_transmit+0x19c>)
    539c:	681b      	ldr	r3, [r3, #0]
    539e:	075e      	lsls	r6, r3, #29
    53a0:	d4fb      	bmi.n	539a <le_transmit+0x142>
	if (len > 46) len = 46;
	cc2400_fifo_write(len, txbuf);
    53a2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    53a6:	bf34      	ite	cc
    53a8:	4648      	movcc	r0, r9
    53aa:	202e      	movcs	r0, #46	; 0x2e
    53ac:	4669      	mov	r1, sp
    53ae:	f003 faed 	bl	898c <cc2400_fifo_write>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    53b2:	200e      	movs	r0, #14
    53b4:	f003 faa0 	bl	88f8 <cc2400_get>
    53b8:	f000 001f 	and.w	r0, r0, #31
    53bc:	280f      	cmp	r0, #15
    53be:	d1f8      	bne.n	53b2 <le_transmit+0x15a>
	TXLED_CLR;
    53c0:	4b0d      	ldr	r3, [pc, #52]	; (53f8 <le_transmit+0x1a0>)
    53c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    53c6:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    53c8:	2064      	movs	r0, #100	; 0x64
    53ca:	f003 fb76 	bl	8aba <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    53ce:	f003 fb6d 	bl	8aac <cc2400_status>
    53d2:	0745      	lsls	r5, r0, #29
    53d4:	d4fb      	bmi.n	53ce <le_transmit+0x176>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    53d6:	4b09      	ldr	r3, [pc, #36]	; (53fc <le_transmit+0x1a4>)
    53d8:	2280      	movs	r2, #128	; 0x80
    53da:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    53dc:	2008      	movs	r0, #8
    53de:	4621      	mov	r1, r4
    53e0:	f003 fa93 	bl	890a <cc2400_set>
}
    53e4:	b010      	add	sp, #64	; 0x40
    53e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53ea:	bf00      	nop
    53ec:	0000a218 	.word	0x0000a218
    53f0:	2009c038 	.word	0x2009c038
    53f4:	2009c054 	.word	0x2009c054
    53f8:	2009c03c 	.word	0x2009c03c
    53fc:	2009c05c 	.word	0x2009c05c

00005400 <le_jam>:

void le_jam(void) {
    5400:	b508      	push	{r3, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    5402:	200d      	movs	r0, #13
    5404:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5408:	f003 fa7f 	bl	890a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    540c:	2012      	movs	r0, #18
    540e:	f642 3122 	movw	r1, #11042	; 0x2b22
    5412:	f003 fa7a 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    5416:	2014      	movs	r0, #20
    5418:	f242 314b 	movw	r1, #9035	; 0x234b
    541c:	f003 fa75 	bl	890a <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5420:	2020      	movs	r0, #32
    5422:	f640 4101 	movw	r1, #3073	; 0xc01
    5426:	f003 fa70 	bl	890a <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    542a:	2005      	movs	r0, #5
    542c:	210b      	movs	r1, #11
    542e:	f003 fa6c 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5432:	2003      	movs	r0, #3
    5434:	2140      	movs	r1, #64	; 0x40
    5436:	f003 fa68 	bl	890a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    543a:	f003 fb37 	bl	8aac <cc2400_status>
    543e:	0640      	lsls	r0, r0, #25
    5440:	d5fb      	bpl.n	543a <le_jam+0x3a>
	cc2400_strobe(SFSON);
    5442:	2061      	movs	r0, #97	; 0x61
    5444:	f003 fb39 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5448:	f003 fb30 	bl	8aac <cc2400_status>
    544c:	0741      	lsls	r1, r0, #29
    544e:	d5fb      	bpl.n	5448 <le_jam+0x48>
	TXLED_SET;
    5450:	4b08      	ldr	r3, [pc, #32]	; (5474 <le_jam+0x74>)
    5452:	f44f 7280 	mov.w	r2, #256	; 0x100
    5456:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5458:	2280      	movs	r2, #128	; 0x80
    545a:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    545c:	200e      	movs	r0, #14
    545e:	f003 fa4b 	bl	88f8 <cc2400_get>
    5462:	f000 001f 	and.w	r0, r0, #31
    5466:	280f      	cmp	r0, #15
    5468:	d1f8      	bne.n	545c <le_jam+0x5c>
	cc2400_strobe(STX);
    546a:	2063      	movs	r0, #99	; 0x63
#endif
}
    546c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);
    5470:	f003 bb23 	b.w	8aba <cc2400_strobe>
    5474:	2009c038 	.word	0x2009c038

00005478 <hop>:
}

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    5478:	b538      	push	{r3, r4, r5, lr}
	do_hop = 0;
    547a:	4c5f      	ldr	r4, [pc, #380]	; (55f8 <hop+0x180>)
    547c:	2300      	movs	r3, #0
    547e:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    5480:	4b5e      	ldr	r3, [pc, #376]	; (55fc <hop+0x184>)
    5482:	4a5f      	ldr	r2, [pc, #380]	; (5600 <hop+0x188>)
    5484:	6819      	ldr	r1, [r3, #0]
    5486:	6011      	str	r1, [r2, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    5488:	7aa2      	ldrb	r2, [r4, #10]
    548a:	b94a      	cbnz	r2, 54a0 <hop+0x28>
		if (cc2400_get(FSDIV) == (channel - 1))
    548c:	2002      	movs	r0, #2
    548e:	f003 fa33 	bl	88f8 <cc2400_get>
    5492:	4b5c      	ldr	r3, [pc, #368]	; (5604 <hop+0x18c>)
    5494:	881b      	ldrh	r3, [r3, #0]
    5496:	b29b      	uxth	r3, r3
    5498:	3b01      	subs	r3, #1
    549a:	4298      	cmp	r0, r3
    549c:	d17f      	bne.n	559e <hop+0x126>
    549e:	bd38      	pop	{r3, r4, r5, pc}
			return;
	}
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
    54a0:	7aa2      	ldrb	r2, [r4, #10]
    54a2:	2a01      	cmp	r2, #1
    54a4:	d131      	bne.n	550a <hop+0x92>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    54a6:	4b58      	ldr	r3, [pc, #352]	; (5608 <hop+0x190>)
    54a8:	7819      	ldrb	r1, [r3, #0]
    54aa:	4b58      	ldr	r3, [pc, #352]	; (560c <hop+0x194>)
    54ac:	7818      	ldrb	r0, [r3, #0]
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
		do {
			channel += 32;
    54ae:	4b55      	ldr	r3, [pc, #340]	; (5604 <hop+0x18c>)
    54b0:	881a      	ldrh	r2, [r3, #0]
    54b2:	b292      	uxth	r2, r2
    54b4:	3220      	adds	r2, #32
    54b6:	b292      	uxth	r2, r2
    54b8:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    54ba:	881a      	ldrh	r2, [r3, #0]
    54bc:	b292      	uxth	r2, r2
    54be:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    54c2:	d904      	bls.n	54ce <hop+0x56>
				channel -= 79;
    54c4:	881a      	ldrh	r2, [r3, #0]
    54c6:	b292      	uxth	r2, r2
    54c8:	3a4f      	subs	r2, #79	; 0x4f
    54ca:	b292      	uxth	r2, r2
    54cc:	801a      	strh	r2, [r3, #0]
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    54ce:	2900      	cmp	r1, #0
    54d0:	d065      	beq.n	559e <hop+0x126>
    54d2:	2800      	cmp	r0, #0
    54d4:	d063      	beq.n	559e <hop+0x126>
    54d6:	881a      	ldrh	r2, [r3, #0]
    54d8:	881d      	ldrh	r5, [r3, #0]
    54da:	b292      	uxth	r2, r2
    54dc:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    54e0:	2208      	movs	r2, #8
    54e2:	fb93 f3f2 	sdiv	r3, r3, r2
    54e6:	4a4a      	ldr	r2, [pc, #296]	; (5610 <hop+0x198>)
    54e8:	b2ad      	uxth	r5, r5
    54ea:	5cd2      	ldrb	r2, [r2, r3]
    54ec:	4b49      	ldr	r3, [pc, #292]	; (5614 <hop+0x19c>)
    54ee:	f6a5 1562 	subw	r5, r5, #2402	; 0x962
    54f2:	402b      	ands	r3, r5
    54f4:	2b00      	cmp	r3, #0
    54f6:	da03      	bge.n	5500 <hop+0x88>
    54f8:	3b01      	subs	r3, #1
    54fa:	f063 0307 	orn	r3, r3, #7
    54fe:	3301      	adds	r3, #1
    5500:	fa42 f303 	asr.w	r3, r2, r3
    5504:	07dd      	lsls	r5, r3, #31
    5506:	d5d2      	bpl.n	54ae <hop+0x36>
    5508:	e049      	b.n	559e <hop+0x126>
	}

	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
    550a:	7aa2      	ldrb	r2, [r4, #10]
    550c:	2a05      	cmp	r2, #5
    550e:	d12d      	bne.n	556c <hop+0xf4>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5510:	4b3d      	ldr	r3, [pc, #244]	; (5608 <hop+0x190>)
    5512:	7819      	ldrb	r1, [r3, #0]
	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
		do {
			channel += 32;
    5514:	4b3b      	ldr	r3, [pc, #236]	; (5604 <hop+0x18c>)
    5516:	881a      	ldrh	r2, [r3, #0]
    5518:	b292      	uxth	r2, r2
    551a:	3220      	adds	r2, #32
    551c:	b292      	uxth	r2, r2
    551e:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    5520:	881a      	ldrh	r2, [r3, #0]
    5522:	b292      	uxth	r2, r2
    5524:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    5528:	d904      	bls.n	5534 <hop+0xbc>
				channel -= 79;
    552a:	881a      	ldrh	r2, [r3, #0]
    552c:	b292      	uxth	r2, r2
    552e:	3a4f      	subs	r2, #79	; 0x4f
    5530:	b292      	uxth	r2, r2
    5532:	801a      	strh	r2, [r3, #0]
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5534:	294f      	cmp	r1, #79	; 0x4f
    5536:	d032      	beq.n	559e <hop+0x126>
    5538:	881a      	ldrh	r2, [r3, #0]
    553a:	8818      	ldrh	r0, [r3, #0]
    553c:	b292      	uxth	r2, r2
    553e:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    5542:	2208      	movs	r2, #8
    5544:	fb93 f3f2 	sdiv	r3, r3, r2
    5548:	4a31      	ldr	r2, [pc, #196]	; (5610 <hop+0x198>)
    554a:	b280      	uxth	r0, r0
    554c:	5cd2      	ldrb	r2, [r2, r3]
    554e:	4b31      	ldr	r3, [pc, #196]	; (5614 <hop+0x19c>)
    5550:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    5554:	4003      	ands	r3, r0
    5556:	2b00      	cmp	r3, #0
    5558:	da03      	bge.n	5562 <hop+0xea>
    555a:	3b01      	subs	r3, #1
    555c:	f063 0307 	orn	r3, r3, #7
    5560:	3301      	adds	r3, #1
    5562:	fa42 f303 	asr.w	r3, r2, r3
    5566:	07da      	lsls	r2, r3, #31
    5568:	d4d4      	bmi.n	5514 <hop+0x9c>
    556a:	e018      	b.n	559e <hop+0x126>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    556c:	7aa2      	ldrb	r2, [r4, #10]
    556e:	2a02      	cmp	r2, #2
    5570:	d105      	bne.n	557e <hop+0x106>
		channel = next_hop(clkn);
    5572:	6818      	ldr	r0, [r3, #0]
    5574:	f001 ffa6 	bl	74c4 <next_hop>
    5578:	4b22      	ldr	r3, [pc, #136]	; (5604 <hop+0x18c>)
    557a:	8018      	strh	r0, [r3, #0]
    557c:	e00f      	b.n	559e <hop+0x126>
	}

	else if (hop_mode == HOP_BTLE) {
    557e:	7aa3      	ldrb	r3, [r4, #10]
    5580:	2b03      	cmp	r3, #3
    5582:	d105      	bne.n	5590 <hop+0x118>
		channel = btle_next_hop(&le);
    5584:	4d1f      	ldr	r5, [pc, #124]	; (5604 <hop+0x18c>)
    5586:	1d28      	adds	r0, r5, #4
    5588:	f002 f865 	bl	7656 <btle_next_hop>
    558c:	8028      	strh	r0, [r5, #0]
    558e:	e006      	b.n	559e <hop+0x126>
	}

	else if (hop_mode == HOP_DIRECT) {
    5590:	7aa3      	ldrb	r3, [r4, #10]
    5592:	2b04      	cmp	r3, #4
    5594:	d103      	bne.n	559e <hop+0x126>
		channel = hop_direct_channel;
    5596:	89a2      	ldrh	r2, [r4, #12]
    5598:	4b1a      	ldr	r3, [pc, #104]	; (5604 <hop+0x18c>)
    559a:	b292      	uxth	r2, r2
    559c:	801a      	strh	r2, [r3, #0]
	}
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    559e:	2064      	movs	r0, #100	; 0x64
    55a0:	f003 fa8b 	bl	8aba <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    55a4:	f003 fa82 	bl	8aac <cc2400_status>
    55a8:	0743      	lsls	r3, r0, #29
    55aa:	d4fb      	bmi.n	55a4 <hop+0x12c>
    55ac:	4d15      	ldr	r5, [pc, #84]	; (5604 <hop+0x18c>)

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    55ae:	7c60      	ldrb	r0, [r4, #17]
		cc2400_set(FSDIV, channel);
    55b0:	8829      	ldrh	r1, [r5, #0]
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    55b2:	b2c0      	uxtb	r0, r0
    55b4:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel);
    55b6:	b289      	uxth	r1, r1
	else
		cc2400_set(FSDIV, channel - 1);
    55b8:	bf1e      	ittt	ne
    55ba:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    55be:	2002      	movne	r0, #2
    55c0:	b289      	uxthne	r1, r1
    55c2:	f003 f9a2 	bl	890a <cc2400_set>

	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    55c6:	7aa3      	ldrb	r3, [r4, #10]
    55c8:	b11b      	cbz	r3, 55d2 <hop+0x15a>
		cs_threshold_calc_and_set(channel);
    55ca:	8828      	ldrh	r0, [r5, #0]
    55cc:	b280      	uxth	r0, r0
    55ce:	f002 fa19 	bl	7a04 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    55d2:	2061      	movs	r0, #97	; 0x61
    55d4:	f003 fa71 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    55d8:	f003 fa68 	bl	8aac <cc2400_status>
    55dc:	0745      	lsls	r5, r0, #29
    55de:	d5fb      	bpl.n	55d8 <hop+0x160>

	dma_discard = 1;
    55e0:	2301      	movs	r3, #1
    55e2:	7423      	strb	r3, [r4, #16]

	if(mode == MODE_TX_SYMBOLS)
    55e4:	7c63      	ldrb	r3, [r4, #17]
    55e6:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    55e8:	bf0c      	ite	eq
    55ea:	2063      	moveq	r0, #99	; 0x63
	else
		cc2400_strobe(SRX);
    55ec:	2062      	movne	r0, #98	; 0x62
}
    55ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	dma_discard = 1;

	if(mode == MODE_TX_SYMBOLS)
		cc2400_strobe(STX);
	else
		cc2400_strobe(SRX);
    55f2:	f003 ba62 	b.w	8aba <cc2400_strobe>
    55f6:	bf00      	nop
    55f8:	10000e34 	.word	0x10000e34
    55fc:	10001024 	.word	0x10001024
    5600:	10001000 	.word	0x10001000
    5604:	1000044c 	.word	0x1000044c
    5608:	10001009 	.word	0x10001009
    560c:	100014a7 	.word	0x100014a7
    5610:	1000100b 	.word	0x1000100b
    5614:	80000007 	.word	0x80000007

00005618 <bt_stream_rx>:
}

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    5618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int8_t rssi;
	int8_t rssi_at_trigger;

	RXLED_CLR;
    561c:	4b49      	ldr	r3, [pc, #292]	; (5744 <bt_stream_rx+0x12c>)
    561e:	2210      	movs	r2, #16
    5620:	601a      	str	r2, [r3, #0]

	queue_init();
    5622:	f002 f8e7 	bl	77f4 <queue_init>
	dio_ssp_init();
    5626:	f003 f8df 	bl	87e8 <dio_ssp_init>
	dma_init();
    562a:	f002 fadb 	bl	7be4 <dma_init>
	dio_ssp_start();
    562e:	f002 fb5f 	bl	7cf0 <dio_ssp_start>

	cc2400_rx();
    5632:	f7fe febb 	bl	43ac <cc2400_rx>

	cs_trigger_enable();
    5636:	f002 fa17 	bl	7a68 <cs_trigger_enable>

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    563a:	4c43      	ldr	r4, [pc, #268]	; (5748 <bt_stream_rx+0x130>)
    563c:	7ca3      	ldrb	r3, [r4, #18]
    563e:	46a1      	mov	r9, r4
    5640:	2b01      	cmp	r3, #1
    5642:	d175      	bne.n	5730 <bt_stream_rx+0x118>
	{

		RXLED_CLR;
    5644:	4b3f      	ldr	r3, [pc, #252]	; (5744 <bt_stream_rx+0x12c>)
    5646:	2210      	movs	r2, #16
    5648:	601a      	str	r2, [r3, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    564a:	f002 f963 	bl	7914 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    564e:	2580      	movs	r5, #128	; 0x80
		while (!rx_tc) {
    5650:	4f3e      	ldr	r7, [pc, #248]	; (574c <bt_stream_rx+0x134>)
    5652:	4e3f      	ldr	r6, [pc, #252]	; (5750 <bt_stream_rx+0x138>)
    5654:	683b      	ldr	r3, [r7, #0]
    5656:	f8df 8118 	ldr.w	r8, [pc, #280]	; 5770 <bt_stream_rx+0x158>
    565a:	bb2b      	cbnz	r3, 56a8 <bt_stream_rx+0x90>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    565c:	2006      	movs	r0, #6
    565e:	f003 f94b 	bl	88f8 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5662:	7833      	ldrb	r3, [r6, #0]
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while (!rx_tc) {
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5664:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5668:	b163      	cbz	r3, 5684 <bt_stream_rx+0x6c>
    566a:	b26b      	sxtb	r3, r5
    566c:	3380      	adds	r3, #128	; 0x80
    566e:	d109      	bne.n	5684 <bt_stream_rx+0x6c>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5670:	4b38      	ldr	r3, [pc, #224]	; (5754 <bt_stream_rx+0x13c>)
    5672:	b240      	sxtb	r0, r0
    5674:	f993 5000 	ldrsb.w	r5, [r3]
    5678:	3536      	adds	r5, #54	; 0x36
    567a:	42a8      	cmp	r0, r5
    567c:	bfa8      	it	ge
    567e:	4605      	movge	r5, r0
    5680:	b2ed      	uxtb	r5, r5
				rssi_at_trigger = rssi;
    5682:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    5684:	b240      	sxtb	r0, r0
    5686:	f002 f961 	bl	794c <rssi_add>

			handle_usb(clkn);
    568a:	f8d8 0000 	ldr.w	r0, [r8]
    568e:	f002 f92d 	bl	78ec <handle_usb>

			/* If timer says time to hop, do it. */
			if (do_hop) {
    5692:	f899 300b 	ldrb.w	r3, [r9, #11]
    5696:	b113      	cbz	r3, 569e <bt_stream_rx+0x86>
				hop();
    5698:	f7ff feee 	bl	5478 <hop>
    569c:	e7d8      	b.n	5650 <bt_stream_rx+0x38>
			} else {
				TXLED_CLR;
    569e:	4b29      	ldr	r3, [pc, #164]	; (5744 <bt_stream_rx+0x12c>)
    56a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    56a4:	601a      	str	r2, [r3, #0]
    56a6:	e7d3      	b.n	5650 <bt_stream_rx+0x38>
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    56a8:	4b2b      	ldr	r3, [pc, #172]	; (5758 <bt_stream_rx+0x140>)
    56aa:	2210      	movs	r2, #16

		if (rx_err) {
    56ac:	4d2b      	ldr	r5, [pc, #172]	; (575c <bt_stream_rx+0x144>)
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    56ae:	601a      	str	r2, [r3, #0]

		if (rx_err) {
    56b0:	682b      	ldr	r3, [r5, #0]
    56b2:	b11b      	cbz	r3, 56bc <bt_stream_rx+0xa4>
			status |= DMA_ERROR;
    56b4:	7863      	ldrb	r3, [r4, #1]
    56b6:	f043 0302 	orr.w	r3, r3, #2
    56ba:	7063      	strb	r3, [r4, #1]
		}

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    56bc:	683b      	ldr	r3, [r7, #0]
    56be:	2b01      	cmp	r3, #1
    56c0:	d903      	bls.n	56ca <bt_stream_rx+0xb2>
			status |= DMA_OVERFLOW;
    56c2:	7863      	ldrb	r3, [r4, #1]
    56c4:	f043 0301 	orr.w	r3, r3, #1
    56c8:	7063      	strb	r3, [r4, #1]

		if (dma_discard) {
    56ca:	7c22      	ldrb	r2, [r4, #16]
    56cc:	4b1e      	ldr	r3, [pc, #120]	; (5748 <bt_stream_rx+0x130>)
    56ce:	b12a      	cbz	r2, 56dc <bt_stream_rx+0xc4>
			status |= DISCARD;
    56d0:	785a      	ldrb	r2, [r3, #1]
    56d2:	f042 0220 	orr.w	r2, r2, #32
    56d6:	705a      	strb	r2, [r3, #1]
			dma_discard = 0;
    56d8:	2200      	movs	r2, #0
    56da:	741a      	strb	r2, [r3, #16]
		}

		rssi_iir_update(channel);
    56dc:	4b20      	ldr	r3, [pc, #128]	; (5760 <bt_stream_rx+0x148>)
    56de:	8818      	ldrh	r0, [r3, #0]
    56e0:	b280      	uxth	r0, r0
    56e2:	f002 f953 	bl	798c <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    56e6:	7833      	ldrb	r3, [r6, #0]
    56e8:	b913      	cbnz	r3, 56f0 <bt_stream_rx+0xd8>
    56ea:	4b1e      	ldr	r3, [pc, #120]	; (5764 <bt_stream_rx+0x14c>)
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	b12b      	cbz	r3, 56fc <bt_stream_rx+0xe4>
			status |= CS_TRIGGER;
    56f0:	7863      	ldrb	r3, [r4, #1]
    56f2:	f043 0308 	orr.w	r3, r3, #8
    56f6:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    56f8:	2300      	movs	r3, #0
    56fa:	7033      	strb	r3, [r6, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    56fc:	4b15      	ldr	r3, [pc, #84]	; (5754 <bt_stream_rx+0x13c>)
    56fe:	f993 2000 	ldrsb.w	r2, [r3]
    5702:	4b19      	ldr	r3, [pc, #100]	; (5768 <bt_stream_rx+0x150>)
    5704:	3235      	adds	r2, #53	; 0x35
    5706:	f993 3000 	ldrsb.w	r3, [r3]
    570a:	429a      	cmp	r2, r3
    570c:	da03      	bge.n	5716 <bt_stream_rx+0xfe>
			status |= RSSI_TRIGGER;
    570e:	7863      	ldrb	r3, [r4, #1]
    5710:	f043 0310 	orr.w	r3, r3, #16
    5714:	7063      	strb	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    5716:	4b15      	ldr	r3, [pc, #84]	; (576c <bt_stream_rx+0x154>)
    5718:	2000      	movs	r0, #0
    571a:	6819      	ldr	r1, [r3, #0]
    571c:	f7fe fef4 	bl	4508 <enqueue>

		handle_usb(clkn);
    5720:	f8d8 0000 	ldr.w	r0, [r8]
    5724:	f002 f8e2 	bl	78ec <handle_usb>
		rx_tc = 0;
    5728:	2300      	movs	r3, #0
    572a:	603b      	str	r3, [r7, #0]
		rx_err = 0;
    572c:	602b      	str	r3, [r5, #0]
    572e:	e784      	b.n	563a <bt_stream_rx+0x22>

	cc2400_rx();

	cs_trigger_enable();

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    5730:	7ca3      	ldrb	r3, [r4, #18]
    5732:	2b08      	cmp	r3, #8
    5734:	d086      	beq.n	5644 <bt_stream_rx+0x2c>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    5736:	f002 fb01 	bl	7d3c <dio_ssp_stop>
	cs_trigger_disable();
}
    573a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
	cs_trigger_disable();
    573e:	f002 b9a9 	b.w	7a94 <cs_trigger_disable>
    5742:	bf00      	nop
    5744:	2009c03c 	.word	0x2009c03c
    5748:	10000e34 	.word	0x10000e34
    574c:	10001004 	.word	0x10001004
    5750:	10001521 	.word	0x10001521
    5754:	10001520 	.word	0x10001520
    5758:	2009c038 	.word	0x2009c038
    575c:	1000151c 	.word	0x1000151c
    5760:	1000044c 	.word	0x1000044c
    5764:	10001170 	.word	0x10001170
    5768:	10001008 	.word	0x10001008
    576c:	10001180 	.word	0x10001180
    5770:	10001024 	.word	0x10001024

00005774 <br_transmit>:
 * Transmit a BTBR packet with the specified access code.
 *
 * All modulation parameters are set within this function.
 */
void br_transmit()
{
    5774:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5778:	4b95      	ldr	r3, [pc, #596]	; (59d0 <br_transmit+0x25c>)
    577a:	2201      	movs	r2, #1
    577c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    5780:	2300      	movs	r3, #0
    5782:	4022      	ands	r2, r4
    5784:	402b      	ands	r3, r5
    5786:	ea52 0103 	orrs.w	r1, r2, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    578a:	f04f 0700 	mov.w	r7, #0
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    578e:	f245 5355 	movw	r3, #21845	; 0x5555
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5792:	ea4f 76d5 	mov.w	r6, r5, lsr #31
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5796:	f64a 28aa 	movw	r8, #43690	; 0xaaaa
    579a:	bf18      	it	ne
    579c:	4698      	movne	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    579e:	b2e0      	uxtb	r0, r4
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57a0:	2f00      	cmp	r7, #0
    57a2:	bf08      	it	eq
    57a4:	2e01      	cmpeq	r6, #1
    57a6:	bf14      	ite	ne
    57a8:	2655      	movne	r6, #85	; 0x55
    57aa:	26aa      	moveq	r6, #170	; 0xaa

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    57ac:	f7fe fdec 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57b0:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
    57b4:	f3c4 2007 	ubfx	r0, r4, #8, #8
    57b8:	f7fe fde6 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57bc:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
    57c0:	f3c4 4007 	ubfx	r0, r4, #16, #8
    57c4:	f7fe fde0 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57c8:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
    57cc:	0e20      	lsrs	r0, r4, #24
    57ce:	f7fe fddb 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57d2:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
    57d6:	b2e8      	uxtb	r0, r5
    57d8:	f7fe fdd6 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57dc:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
    57e0:	f3c5 2007 	ubfx	r0, r5, #8, #8
    57e4:	f7fe fdd0 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57e8:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
    57ec:	f3c5 4007 	ubfx	r0, r5, #16, #8
    57f0:	f7fe fdca 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57f4:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
    57f8:	0e28      	lsrs	r0, r5, #24
    57fa:	f7fe fdc5 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57fe:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
    5802:	4630      	mov	r0, r6
    5804:	f7fe fdc0 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5808:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
    580c:	2077      	movs	r0, #119	; 0x77
    580e:	f7fe fdbb 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5812:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
    5816:	2066      	movs	r0, #102	; 0x66
    5818:	f7fe fdb6 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    581c:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
    5820:	2055      	movs	r0, #85	; 0x55
    5822:	f7fe fdb1 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5826:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
    582a:	2044      	movs	r0, #68	; 0x44
    582c:	f7fe fdac 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5830:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
    5834:	2033      	movs	r0, #51	; 0x33
    5836:	f7fe fda7 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    583a:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
    583e:	2022      	movs	r0, #34	; 0x22
    5840:	f7fe fda2 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5844:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
		reverse8(0x11)
    5848:	2011      	movs	r0, #17
    584a:	f7fe fd9d 	bl	4388 <reverse8>
	return reversed;
}

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;
    584e:	463c      	mov	r4, r7
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5850:	f88d 000f 	strb.w	r0, [sp, #15]

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    5854:	463b      	mov	r3, r7
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    5856:	fa48 f203 	asr.w	r2, r8, r3
    585a:	f1c3 010f 	rsb	r1, r3, #15
    585e:	f002 0201 	and.w	r2, r2, #1
    5862:	408a      	lsls	r2, r1

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    5864:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    5866:	4314      	orrs	r4, r2

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    5868:	2b10      	cmp	r3, #16
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    586a:	b2a4      	uxth	r4, r4

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    586c:	d1f3      	bne.n	5856 <br_transmit+0xe2>
/* start buffered tx */
static void cc2400_tx_sync(uint32_t sync)
{
#ifdef TX_ENABLE
	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    586e:	200d      	movs	r0, #13
    5870:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5874:	f003 f849 	bl	890a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5878:	2012      	movs	r0, #18
    587a:	f642 3122 	movw	r1, #11042	; 0x2b22
    587e:	f003 f844 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5882:	2014      	movs	r0, #20
    5884:	f241 314b 	movw	r1, #4939	; 0x134b
    5888:	f003 f83f 	bl	890a <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    588c:	2020      	movs	r0, #32
    588e:	f640 4101 	movw	r1, #3073	; 0xc01
    5892:	f003 f83a 	bl	890a <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
    5896:	4621      	mov	r1, r4
    5898:	202c      	movs	r0, #44	; 0x2c
    589a:	f003 f836 	bl	890a <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    589e:	202d      	movs	r0, #45	; 0x2d
    58a0:	2100      	movs	r1, #0
    58a2:	f003 f832 	bl	890a <cc2400_set>

	cc2400_set(FSDIV,   channel);
    58a6:	4b4b      	ldr	r3, [pc, #300]	; (59d4 <br_transmit+0x260>)
    58a8:	2002      	movs	r0, #2
    58aa:	8819      	ldrh	r1, [r3, #0]
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)

	if (modulation == MOD_BT_BASIC_RATE) {
    58ac:	4c4a      	ldr	r4, [pc, #296]	; (59d8 <br_transmit+0x264>)
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);

	cc2400_set(FSDIV,   channel);
    58ae:	b289      	uxth	r1, r1
    58b0:	f003 f82b 	bl	890a <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    58b4:	2005      	movs	r0, #5
    58b6:	210b      	movs	r1, #11
    58b8:	f003 f827 	bl	890a <cc2400_set>

	if (modulation == MOD_BT_BASIC_RATE) {
    58bc:	7823      	ldrb	r3, [r4, #0]
    58be:	b913      	cbnz	r3, 58c6 <br_transmit+0x152>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    58c0:	2003      	movs	r0, #3
    58c2:	2129      	movs	r1, #41	; 0x29
    58c4:	e004      	b.n	58d0 <br_transmit+0x15c>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    58c6:	7823      	ldrb	r3, [r4, #0]
    58c8:	2b01      	cmp	r3, #1
    58ca:	d11d      	bne.n	5908 <br_transmit+0x194>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    58cc:	2003      	movs	r0, #3
    58ce:	2140      	movs	r1, #64	; 0x40
    58d0:	f003 f81b 	bl	890a <cc2400_set>
	} else {
		/* oops */
		return;
	}

	clkn_start();
    58d4:	f002 f92e 	bl	7b34 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    58d8:	f003 f8e8 	bl	8aac <cc2400_status>
    58dc:	0645      	lsls	r5, r0, #25
    58de:	d5fb      	bpl.n	58d8 <br_transmit+0x164>
	cc2400_strobe(SFSON);
    58e0:	2061      	movs	r0, #97	; 0x61
    58e2:	f003 f8ea 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    58e6:	f003 f8e1 	bl	8aac <cc2400_status>
    58ea:	0740      	lsls	r0, r0, #29
    58ec:	d5fb      	bpl.n	58e6 <br_transmit+0x172>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    58ee:	4b3b      	ldr	r3, [pc, #236]	; (59dc <br_transmit+0x268>)
    58f0:	2280      	movs	r2, #128	; 0x80
    58f2:	601a      	str	r2, [r3, #0]
#endif

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    58f4:	200e      	movs	r0, #14
    58f6:	f002 ffff 	bl	88f8 <cc2400_get>
    58fa:	f000 001f 	and.w	r0, r0, #31
    58fe:	280f      	cmp	r0, #15
    5900:	d1f8      	bne.n	58f4 <br_transmit+0x180>
	cc2400_strobe(STX);
    5902:	2063      	movs	r0, #99	; 0x63
    5904:	f003 f8d9 	bl	8aba <cc2400_strobe>
		reverse8(0x11)
	};

	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5908:	2114      	movs	r1, #20
    590a:	2023      	movs	r0, #35	; 0x23
    590c:	f002 fffd 	bl	890a <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5910:	2008      	movs	r0, #8
    5912:	f002 fff1 	bl	88f8 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5916:	f3c0 0108 	ubfx	r1, r0, #0, #9
	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    591a:	4605      	mov	r5, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    591c:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    5920:	2008      	movs	r0, #8
    5922:	f002 fff2 	bl	890a <cc2400_set>
 */
void br_transmit()
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;
    5926:	2600      	movs	r6, #0

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
    5928:	7ca3      	ldrb	r3, [r4, #18]
    592a:	2b02      	cmp	r3, #2
    592c:	d145      	bne.n	59ba <br_transmit+0x246>
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    592e:	0876      	lsrs	r6, r6, #1
    5930:	4f2b      	ldr	r7, [pc, #172]	; (59e0 <br_transmit+0x26c>)
    5932:	683b      	ldr	r3, [r7, #0]
    5934:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
    5938:	d105      	bne.n	5946 <br_transmit+0x1d2>

			// If timer says time to hop, do it.
			if (do_hop) {
    593a:	7ae3      	ldrb	r3, [r4, #11]
    593c:	2b00      	cmp	r3, #0
    593e:	d0f7      	beq.n	5930 <br_transmit+0x1bc>
				hop();
    5940:	f7ff fd9a 	bl	5478 <hop>
    5944:	e7f4      	b.n	5930 <br_transmit+0x1bc>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5946:	4b27      	ldr	r3, [pc, #156]	; (59e4 <br_transmit+0x270>)
    5948:	681a      	ldr	r2, [r3, #0]
    594a:	f640 03c9 	movw	r3, #2249	; 0x8c9
    594e:	429a      	cmp	r2, r3
    5950:	d9f3      	bls.n	593a <br_transmit+0x1c6>
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    5952:	4b25      	ldr	r3, [pc, #148]	; (59e8 <br_transmit+0x274>)
    5954:	f44f 7280 	mov.w	r2, #256	; 0x100
			if (do_hop) {
				hop();
			}
		}

		clkn_saved = clkn;
    5958:	683e      	ldr	r6, [r7, #0]

		TXLED_SET;

		cc2400_fifo_write(16, data);
    595a:	2010      	movs	r0, #16
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    595c:	601a      	str	r2, [r3, #0]

		cc2400_fifo_write(16, data);
    595e:	4669      	mov	r1, sp
    5960:	f003 f814 	bl	898c <cc2400_fifo_write>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5964:	200e      	movs	r0, #14
    5966:	f002 ffc7 	bl	88f8 <cc2400_get>
    596a:	f000 001f 	and.w	r0, r0, #31
    596e:	280f      	cmp	r0, #15
    5970:	d1f8      	bne.n	5964 <br_transmit+0x1f0>
		TXLED_CLR;
    5972:	4b1e      	ldr	r3, [pc, #120]	; (59ec <br_transmit+0x278>)
    5974:	f44f 7280 	mov.w	r2, #256	; 0x100
    5978:	601a      	str	r2, [r3, #0]

		cc2400_strobe(SRFOFF);
    597a:	2064      	movs	r0, #100	; 0x64
    597c:	f003 f89d 	bl	8aba <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    5980:	f003 f894 	bl	8aac <cc2400_status>
    5984:	0741      	lsls	r1, r0, #29
    5986:	d4fb      	bmi.n	5980 <br_transmit+0x20c>

		while (!(cc2400_status() & XOSC16M_STABLE));
    5988:	f003 f890 	bl	8aac <cc2400_status>
    598c:	0642      	lsls	r2, r0, #25
    598e:	d5fb      	bpl.n	5988 <br_transmit+0x214>
		cc2400_strobe(SFSON);
    5990:	2061      	movs	r0, #97	; 0x61
    5992:	f003 f892 	bl	8aba <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    5996:	f003 f889 	bl	8aac <cc2400_status>
    599a:	0743      	lsls	r3, r0, #29
    599c:	d5fb      	bpl.n	5996 <br_transmit+0x222>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    599e:	200e      	movs	r0, #14
    59a0:	f002 ffaa 	bl	88f8 <cc2400_get>
    59a4:	f000 001f 	and.w	r0, r0, #31
    59a8:	280f      	cmp	r0, #15
    59aa:	d1f8      	bne.n	599e <br_transmit+0x22a>
		cc2400_strobe(STX);
    59ac:	2063      	movs	r0, #99	; 0x63
    59ae:	f003 f884 	bl	8aba <cc2400_strobe>

		handle_usb(clkn);
    59b2:	6838      	ldr	r0, [r7, #0]
    59b4:	f001 ff9a 	bl	78ec <handle_usb>
    59b8:	e7b6      	b.n	5928 <br_transmit+0x1b4>
	}

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    59ba:	4b0d      	ldr	r3, [pc, #52]	; (59f0 <br_transmit+0x27c>)
    59bc:	2280      	movs	r2, #128	; 0x80
    59be:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    59c0:	2008      	movs	r0, #8
    59c2:	4629      	mov	r1, r5
    59c4:	f002 ffa1 	bl	890a <cc2400_set>
}
    59c8:	b004      	add	sp, #16
    59ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59ce:	bf00      	nop
    59d0:	10001528 	.word	0x10001528
    59d4:	1000044c 	.word	0x1000044c
    59d8:	10000e34 	.word	0x10000e34
    59dc:	2009c058 	.word	0x2009c058
    59e0:	10001024 	.word	0x10001024
    59e4:	40004008 	.word	0x40004008
    59e8:	2009c038 	.word	0x2009c038
    59ec:	2009c03c 	.word	0x2009c03c
    59f0:	2009c05c 	.word	0x2009c05c

000059f4 <reset_le>:
	le.syncl = aa_rev & 0xffff;
	le.synch = aa_rev >> 16;
}

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    59f4:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    59f6:	480f      	ldr	r0, [pc, #60]	; (5a34 <reset_le+0x40>)
    59f8:	f7fe fdd4 	bl	45a4 <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    59fc:	4b0e      	ldr	r3, [pc, #56]	; (5a38 <reset_le+0x44>)
    59fe:	4a0f      	ldr	r2, [pc, #60]	; (5a3c <reset_le+0x48>)
    5a00:	60da      	str	r2, [r3, #12]
	le.crc_init_reversed = 0xAAAAAA;
    5a02:	4a0f      	ldr	r2, [pc, #60]	; (5a40 <reset_le+0x4c>)
    5a04:	611a      	str	r2, [r3, #16]
	//JWHUR crc verify on
	le.crc_verify = 1;
    5a06:	2201      	movs	r2, #1
    5a08:	615a      	str	r2, [r3, #20]
	le.last_packet = 0;
    5a0a:	2200      	movs	r2, #0

	le.channel_idx = 0;
	le.channel_increment = 0;

	le.conn_epoch = 0;
	le.interval_timer = 0;
    5a0c:	841a      	strh	r2, [r3, #32]
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	//JWHUR crc verify on
	le.crc_verify = 1;
	le.last_packet = 0;
    5a0e:	645a      	str	r2, [r3, #68]	; 0x44

	le.conn_epoch = 0;
	le.interval_timer = 0;
	le.conn_interval = 0;
	le.conn_interval = 0;
	le.conn_count = 0;
    5a10:	849a      	strh	r2, [r3, #36]	; 0x24
	le.crc_init_reversed = 0xAAAAAA;
	//JWHUR crc verify on
	le.crc_verify = 1;
	le.last_packet = 0;

	le.link_state = LINK_INACTIVE;
    5a12:	761a      	strb	r2, [r3, #24]

	le.channel_idx = 0;
    5a14:	765a      	strb	r2, [r3, #25]
	le.channel_increment = 0;
    5a16:	769a      	strb	r2, [r3, #26]

	le.conn_epoch = 0;
    5a18:	61da      	str	r2, [r3, #28]
	le.interval_timer = 0;
	le.conn_interval = 0;
    5a1a:	845a      	strh	r2, [r3, #34]	; 0x22
	le.conn_interval = 0;
	le.conn_count = 0;

	le.win_size = 0;
    5a1c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	le.win_offset = 0;
    5a20:	851a      	strh	r2, [r3, #40]	; 0x28

	le.update_pending = 0;
    5a22:	62da      	str	r2, [r3, #44]	; 0x2c
	le.update_instant = 0;
    5a24:	861a      	strh	r2, [r3, #48]	; 0x30
	le.interval_update = 0;
    5a26:	865a      	strh	r2, [r3, #50]	; 0x32
	le.win_size_update = 0;
    5a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	le.win_offset_update = 0;
    5a2c:	86da      	strh	r2, [r3, #54]	; 0x36

	do_hop = 0;
    5a2e:	4b05      	ldr	r3, [pc, #20]	; (5a44 <reset_le+0x50>)
    5a30:	72da      	strb	r2, [r3, #11]
    5a32:	bd08      	pop	{r3, pc}
    5a34:	8e89bed6 	.word	0x8e89bed6
    5a38:	1000044c 	.word	0x1000044c
    5a3c:	00555555 	.word	0x00555555
    5a40:	00aaaaaa 	.word	0x00aaaaaa
    5a44:	10000e34 	.word	0x10000e34

00005a48 <reset_le_promisc>:
}

// reset LE Promisc state
void reset_le_promisc(void) {
    5a48:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    5a4a:	4c06      	ldr	r4, [pc, #24]	; (5a64 <reset_le_promisc+0x1c>)
    5a4c:	2100      	movs	r1, #0
    5a4e:	4620      	mov	r0, r4
    5a50:	f44f 7284 	mov.w	r2, #264	; 0x108
    5a54:	f7fe fbec 	bl	4230 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    5a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a5c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    5a60:	bd10      	pop	{r4, pc}
    5a62:	bf00      	nop
    5a64:	10001068 	.word	0x10001068

00005a68 <bt_generic_le>:
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5a6c:	4c69      	ldr	r4, [pc, #420]	; (5c14 <bt_generic_le+0x1ac>)
    5a6e:	2301      	movs	r3, #1
	le_promisc.smallest_hop_interval = 0xffffffff;
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5a70:	4680      	mov	r8, r0
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5a72:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    5a74:	7460      	strb	r0, [r4, #17]

	reset_le();
    5a76:	f7ff ffbd 	bl	59f4 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5a7a:	4b67      	ldr	r3, [pc, #412]	; (5c18 <bt_generic_le+0x1b0>)
    5a7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5a80:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5a82:	4b66      	ldr	r3, [pc, #408]	; (5c1c <bt_generic_le+0x1b4>)
    5a84:	2210      	movs	r2, #16
    5a86:	601a      	str	r2, [r3, #0]

	queue_init();
    5a88:	f001 feb4 	bl	77f4 <queue_init>
	dio_ssp_init();
    5a8c:	f002 feac 	bl	87e8 <dio_ssp_init>
	dma_init();
    5a90:	f002 f8a8 	bl	7be4 <dma_init>
	dio_ssp_start();
    5a94:	f002 f92c 	bl	7cf0 <dio_ssp_start>
	cc2400_rx();
    5a98:	f7fe fc88 	bl	43ac <cc2400_rx>

	cs_trigger_enable();
    5a9c:	f001 ffe4 	bl	7a68 <cs_trigger_enable>

	hold = 0;
    5aa0:	2500      	movs	r5, #0

	while (requested_mode == active_mode) {
    5aa2:	7ca3      	ldrb	r3, [r4, #18]
    5aa4:	4543      	cmp	r3, r8
    5aa6:	f040 80a3 	bne.w	5bf0 <bt_generic_le+0x188>
		if (requested_channel != 0) {
    5aaa:	4b5a      	ldr	r3, [pc, #360]	; (5c14 <bt_generic_le+0x1ac>)
    5aac:	89db      	ldrh	r3, [r3, #14]
    5aae:	b29b      	uxth	r3, r3
    5ab0:	b1d3      	cbz	r3, 5ae8 <bt_generic_le+0x80>
			cc2400_strobe(SRFOFF);
    5ab2:	2064      	movs	r0, #100	; 0x64
    5ab4:	f003 f801 	bl	8aba <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5ab8:	f002 fff8 	bl	8aac <cc2400_status>
    5abc:	0747      	lsls	r7, r0, #29
    5abe:	d4fb      	bmi.n	5ab8 <bt_generic_le+0x50>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5ac0:	4b57      	ldr	r3, [pc, #348]	; (5c20 <bt_generic_le+0x1b8>)
    5ac2:	2002      	movs	r0, #2
    5ac4:	8819      	ldrh	r1, [r3, #0]
    5ac6:	b289      	uxth	r1, r1
    5ac8:	3901      	subs	r1, #1
    5aca:	b289      	uxth	r1, r1
    5acc:	f002 ff1d 	bl	890a <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5ad0:	2061      	movs	r0, #97	; 0x61
    5ad2:	f002 fff2 	bl	8aba <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5ad6:	f002 ffe9 	bl	8aac <cc2400_status>
    5ada:	0746      	lsls	r6, r0, #29
    5adc:	d5fb      	bpl.n	5ad6 <bt_generic_le+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5ade:	2062      	movs	r0, #98	; 0x62
    5ae0:	f002 ffeb 	bl	8aba <cc2400_strobe>

			requested_channel = 0;
    5ae4:	2300      	movs	r3, #0
    5ae6:	81e3      	strh	r3, [r4, #14]
		}

		if (do_hop) {
    5ae8:	7ae3      	ldrb	r3, [r4, #11]
    5aea:	4e4c      	ldr	r6, [pc, #304]	; (5c1c <bt_generic_le+0x1b4>)
    5aec:	b113      	cbz	r3, 5af4 <bt_generic_le+0x8c>
			hop();
    5aee:	f7ff fcc3 	bl	5478 <hop>
    5af2:	e002      	b.n	5afa <bt_generic_le+0x92>
		} else {
			TXLED_CLR;
    5af4:	f44f 7380 	mov.w	r3, #256	; 0x100
    5af8:	6033      	str	r3, [r6, #0]
		}

		RXLED_CLR;
    5afa:	2310      	movs	r3, #16
    5afc:	6033      	str	r3, [r6, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5afe:	f001 ff09 	bl	7914 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5b02:	2780      	movs	r7, #128	; 0x80
		while ((rx_tc == 0) && (rx_err == 0))
    5b04:	4b47      	ldr	r3, [pc, #284]	; (5c24 <bt_generic_le+0x1bc>)
    5b06:	4e48      	ldr	r6, [pc, #288]	; (5c28 <bt_generic_le+0x1c0>)
    5b08:	681a      	ldr	r2, [r3, #0]
    5b0a:	4699      	mov	r9, r3
    5b0c:	b9d2      	cbnz	r2, 5b44 <bt_generic_le+0xdc>
    5b0e:	6833      	ldr	r3, [r6, #0]
    5b10:	b9c3      	cbnz	r3, 5b44 <bt_generic_le+0xdc>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b12:	2006      	movs	r0, #6
    5b14:	f002 fef0 	bl	88f8 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b18:	4b44      	ldr	r3, [pc, #272]	; (5c2c <bt_generic_le+0x1c4>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b1e:	781b      	ldrb	r3, [r3, #0]
    5b20:	b163      	cbz	r3, 5b3c <bt_generic_le+0xd4>
    5b22:	b27b      	sxtb	r3, r7
    5b24:	3380      	adds	r3, #128	; 0x80
    5b26:	d109      	bne.n	5b3c <bt_generic_le+0xd4>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5b28:	4b41      	ldr	r3, [pc, #260]	; (5c30 <bt_generic_le+0x1c8>)
    5b2a:	b240      	sxtb	r0, r0
    5b2c:	f993 7000 	ldrsb.w	r7, [r3]
    5b30:	3736      	adds	r7, #54	; 0x36
    5b32:	42b8      	cmp	r0, r7
    5b34:	bfa8      	it	ge
    5b36:	4607      	movge	r7, r0
    5b38:	b2ff      	uxtb	r7, r7
				rssi_at_trigger = rssi;
    5b3a:	4638      	mov	r0, r7
			}
			rssi_add(rssi);
    5b3c:	b240      	sxtb	r0, r0
    5b3e:	f001 ff05 	bl	794c <rssi_add>
    5b42:	e7df      	b.n	5b04 <bt_generic_le+0x9c>
		}

		if (rx_err) {
    5b44:	6833      	ldr	r3, [r6, #0]
    5b46:	b11b      	cbz	r3, 5b50 <bt_generic_le+0xe8>
			status |= DMA_ERROR;
    5b48:	7863      	ldrb	r3, [r4, #1]
    5b4a:	f043 0302 	orr.w	r3, r3, #2
    5b4e:	7063      	strb	r3, [r4, #1]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    5b50:	f8d9 3000 	ldr.w	r3, [r9]
    5b54:	2b00      	cmp	r3, #0
    5b56:	d057      	beq.n	5c08 <bt_generic_le+0x1a0>
			goto rx_continue;

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5b58:	4b32      	ldr	r3, [pc, #200]	; (5c24 <bt_generic_le+0x1bc>)
    5b5a:	681b      	ldr	r3, [r3, #0]
    5b5c:	2b01      	cmp	r3, #1
    5b5e:	d903      	bls.n	5b68 <bt_generic_le+0x100>
			status |= DMA_OVERFLOW;
    5b60:	7863      	ldrb	r3, [r4, #1]
    5b62:	f043 0301 	orr.w	r3, r3, #1
    5b66:	7063      	strb	r3, [r4, #1]

		rssi_iir_update(channel);
    5b68:	4b2d      	ldr	r3, [pc, #180]	; (5c20 <bt_generic_le+0x1b8>)
    5b6a:	8818      	ldrh	r0, [r3, #0]
    5b6c:	b280      	uxth	r0, r0
    5b6e:	f001 ff0d 	bl	798c <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5b72:	4b2e      	ldr	r3, [pc, #184]	; (5c2c <bt_generic_le+0x1c4>)
    5b74:	781a      	ldrb	r2, [r3, #0]
    5b76:	b912      	cbnz	r2, 5b7e <bt_generic_le+0x116>
    5b78:	4a2e      	ldr	r2, [pc, #184]	; (5c34 <bt_generic_le+0x1cc>)
    5b7a:	7812      	ldrb	r2, [r2, #0]
    5b7c:	b132      	cbz	r2, 5b8c <bt_generic_le+0x124>
			status |= CS_TRIGGER;
    5b7e:	7862      	ldrb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
    5b80:	2502      	movs	r5, #2
		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
			status |= CS_TRIGGER;
    5b82:	f042 0208 	orr.w	r2, r2, #8
    5b86:	7062      	strb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
    5b88:	2200      	movs	r2, #0
    5b8a:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5b8c:	4b28      	ldr	r3, [pc, #160]	; (5c30 <bt_generic_le+0x1c8>)
    5b8e:	f993 2000 	ldrsb.w	r2, [r3]
    5b92:	4b29      	ldr	r3, [pc, #164]	; (5c38 <bt_generic_le+0x1d0>)
    5b94:	3235      	adds	r2, #53	; 0x35
    5b96:	f993 3000 	ldrsb.w	r3, [r3]
    5b9a:	429a      	cmp	r2, r3
    5b9c:	da05      	bge.n	5baa <bt_generic_le+0x142>
			status |= RSSI_TRIGGER;
    5b9e:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5ba0:	2502      	movs	r5, #2
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    5ba2:	f043 0310 	orr.w	r3, r3, #16
    5ba6:	7063      	strb	r3, [r4, #1]
    5ba8:	e000      	b.n	5bac <bt_generic_le+0x144>
			hold = CS_HOLD_TIME;
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    5baa:	b36d      	cbz	r5, 5c08 <bt_generic_le+0x1a0>
			goto rx_continue;
		}
		hold--;

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5bac:	4823      	ldr	r0, [pc, #140]	; (5c3c <bt_generic_le+0x1d4>)

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5bae:	3d01      	subs	r5, #1

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5bb0:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    5bb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
    5bb8:	f004 f93e 	bl	9e38 <memcpy>

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5bbc:	b2ed      	uxtb	r5, r5

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5bbe:	2300      	movs	r3, #0
    5bc0:	481f      	ldr	r0, [pc, #124]	; (5c40 <bt_generic_le+0x1d8>)
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
			hold = CS_HOLD_TIME;
    5bc2:	2200      	movs	r2, #0
    5bc4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5bc8:	491e      	ldr	r1, [pc, #120]	; (5c44 <bt_generic_le+0x1dc>)
    5bca:	680f      	ldr	r7, [r1, #0]
    5bcc:	5cff      	ldrb	r7, [r7, r3]
				idle_rxbuf[i] <<= 1;
    5bce:	6809      	ldr	r1, [r1, #0]

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5bd0:	09ff      	lsrs	r7, r7, #7
    5bd2:	5487      	strb	r7, [r0, r2]
				idle_rxbuf[i] <<= 1;
    5bd4:	5ccf      	ldrb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5bd6:	3201      	adds	r2, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5bd8:	007f      	lsls	r7, r7, #1
    5bda:	b2ff      	uxtb	r7, r7
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5bdc:	2a08      	cmp	r2, #8
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5bde:	54cf      	strb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5be0:	d1f2      	bne.n	5bc8 <bt_generic_le+0x160>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5be2:	3301      	adds	r3, #1
    5be4:	2b32      	cmp	r3, #50	; 0x32
    5be6:	d1eb      	bne.n	5bc0 <bt_generic_le+0x158>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    5be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5bea:	4814      	ldr	r0, [pc, #80]	; (5c3c <bt_generic_le+0x1d4>)
    5bec:	4798      	blx	r3
		if (!ret) break;
    5bee:	b958      	cbnz	r0, 5c08 <bt_generic_le+0x1a0>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5bf0:	4b15      	ldr	r3, [pc, #84]	; (5c48 <bt_generic_le+0x1e0>)
    5bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5bf6:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5bf8:	f7fe fce0 	bl	45bc <cc2400_idle>
	dio_ssp_stop();
    5bfc:	f002 f89e 	bl	7d3c <dio_ssp_stop>
	cs_trigger_disable();
}
    5c00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ICER0 = ICER0_ICE_USB;

	// reset the radio completely
	cc2400_idle();
	dio_ssp_stop();
	cs_trigger_disable();
    5c04:	f001 bf46 	b.w	7a94 <cs_trigger_disable>

		int ret = data_cb(unpacked);
		if (!ret) break;

	rx_continue:
		rx_tc = 0;
    5c08:	2300      	movs	r3, #0
    5c0a:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    5c0e:	6033      	str	r3, [r6, #0]
    5c10:	e747      	b.n	5aa2 <bt_generic_le+0x3a>
    5c12:	bf00      	nop
    5c14:	10000e34 	.word	0x10000e34
    5c18:	e000e100 	.word	0xe000e100
    5c1c:	2009c03c 	.word	0x2009c03c
    5c20:	1000044c 	.word	0x1000044c
    5c24:	10001004 	.word	0x10001004
    5c28:	1000151c 	.word	0x1000151c
    5c2c:	10001521 	.word	0x10001521
    5c30:	10001520 	.word	0x10001520
    5c34:	10001170 	.word	0x10001170
    5c38:	10001008 	.word	0x10001008
    5c3c:	10001184 	.word	0x10001184
    5c40:	10001314 	.word	0x10001314
    5c44:	10001180 	.word	0x10001180
    5c48:	e000e180 	.word	0xe000e180

00005c4c <bt_le_sync_rssi>:
	cs_trigger_disable();
}

//JWHUR rssi tracking
void bt_le_sync_rssi(u8 active_mode) 
{
    5c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c50:	b0cf      	sub	sp, #316	; 0x13c
	int8_t rssi;
	// channel 37 = 2402, channel 38 = 2426, channel 39 = 2480
	static int restart_jamming = 0;
	u8 rssi_buf[DMA_SIZE] = {0, };

	if (start_sync >= ((uint32_t)1<<28)) {
    5c52:	4e85      	ldr	r6, [pc, #532]	; (5e68 <bt_le_sync_rssi+0x21c>)
{
	int i;
	int8_t rssi;
	// channel 37 = 2402, channel 38 = 2426, channel 39 = 2480
	static int restart_jamming = 0;
	u8 rssi_buf[DMA_SIZE] = {0, };
    5c54:	f10d 0804 	add.w	r8, sp, #4
	cs_trigger_disable();
}

//JWHUR rssi tracking
void bt_le_sync_rssi(u8 active_mode) 
{
    5c58:	4607      	mov	r7, r0
	int i;
	int8_t rssi;
	// channel 37 = 2402, channel 38 = 2426, channel 39 = 2480
	static int restart_jamming = 0;
	u8 rssi_buf[DMA_SIZE] = {0, };
    5c5a:	2100      	movs	r1, #0
    5c5c:	4640      	mov	r0, r8
    5c5e:	2232      	movs	r2, #50	; 0x32
    5c60:	f7fe fae6 	bl	4230 <memset>

	if (start_sync >= ((uint32_t)1<<28)) {
    5c64:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5c66:	4c81      	ldr	r4, [pc, #516]	; (5e6c <bt_le_sync_rssi+0x220>)
    5c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    5c6c:	d32d      	bcc.n	5cca <bt_le_sync_rssi+0x7e>
		start_sync -= ((uint32_t)1<<28);
    5c6e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
		while ((clkn & 0xffffff) >= now_sync || (clkn & 0xffffff) < start_sync);
    5c72:	6af1      	ldr	r1, [r6, #44]	; 0x2c
	// channel 37 = 2402, channel 38 = 2426, channel 39 = 2480
	static int restart_jamming = 0;
	u8 rssi_buf[DMA_SIZE] = {0, };

	if (start_sync >= ((uint32_t)1<<28)) {
		start_sync -= ((uint32_t)1<<28);
    5c74:	62b3      	str	r3, [r6, #40]	; 0x28
		while ((clkn & 0xffffff) >= now_sync || (clkn & 0xffffff) < start_sync);
    5c76:	6822      	ldr	r2, [r4, #0]
    5c78:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5c7c:	428a      	cmp	r2, r1
    5c7e:	d2fa      	bcs.n	5c76 <bt_le_sync_rssi+0x2a>
    5c80:	4a7a      	ldr	r2, [pc, #488]	; (5e6c <bt_le_sync_rssi+0x220>)
    5c82:	6812      	ldr	r2, [r2, #0]
    5c84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5c88:	429a      	cmp	r2, r3
    5c8a:	d3f4      	bcc.n	5c76 <bt_le_sync_rssi+0x2a>
	} else {
		while ((clkn & 0xffffff) < start_sync);
	}

	// rssi sampling for only 100 ms
	uint32_t now = (clkn & 0xffffff);
    5c8c:	6823      	ldr	r3, [r4, #0]
	}

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5c8e:	4d78      	ldr	r5, [pc, #480]	; (5e70 <bt_le_sync_rssi+0x224>)
	} else {
		while ((clkn & 0xffffff) < start_sync);
	}

	// rssi sampling for only 100 ms
	uint32_t now = (clkn & 0xffffff);
    5c90:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	if (stop_at >= ((uint32_t)1<<28)) {
		stop_at -= ((uint32_t)1<<28);
		overflow = 1;
	}

	modulation = MOD_BT_LOW_ENERGY;
    5c94:	2301      	movs	r3, #1
    5c96:	7033      	strb	r3, [r6, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5c98:	762b      	strb	r3, [r5, #24]

	ISER0 = ISER0_ISE_USB;
    5c9a:	4b76      	ldr	r3, [pc, #472]	; (5e74 <bt_le_sync_rssi+0x228>)
    5c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
		stop_at -= ((uint32_t)1<<28);
		overflow = 1;
	}

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    5ca0:	7477      	strb	r7, [r6, #17]

	le.link_state = LINK_LISTENING;

	ISER0 = ISER0_ISE_USB;
    5ca2:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    5ca4:	4b74      	ldr	r3, [pc, #464]	; (5e78 <bt_le_sync_rssi+0x22c>)
    5ca6:	2210      	movs	r2, #16
    5ca8:	601a      	str	r2, [r3, #0]
	queue_init();
    5caa:	f001 fda3 	bl	77f4 <queue_init>
	dio_ssp_init();
    5cae:	f002 fd9b 	bl	87e8 <dio_ssp_init>
	dma_init_le();
    5cb2:	f001 ffd5 	bl	7c60 <dma_init_le>
	dio_ssp_start();
    5cb6:	f002 f81b 	bl	7cf0 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address));
    5cba:	6868      	ldr	r0, [r5, #4]
		while ((clkn & 0xffffff) < start_sync);
	}

	// rssi sampling for only 100 ms
	uint32_t now = (clkn & 0xffffff);
	uint32_t stop_at = now + 100 * 10000 / 3125; // millis -> clkn ticks
    5cbc:	f50a 7aa0 	add.w	sl, sl, #320	; 0x140
	queue_init();
	dio_ssp_init();
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address));
    5cc0:	f002 fd2e 	bl	8720 <rbit>
    5cc4:	f7fe fbc4 	bl	4450 <cc2400_rx_sync>
	
	while (requested_mode == active_mode) {
    5cc8:	e0ab      	b.n	5e22 <bt_le_sync_rssi+0x1d6>

	if (start_sync >= ((uint32_t)1<<28)) {
		start_sync -= ((uint32_t)1<<28);
		while ((clkn & 0xffffff) >= now_sync || (clkn & 0xffffff) < start_sync);
	} else {
		while ((clkn & 0xffffff) < start_sync);
    5cca:	6822      	ldr	r2, [r4, #0]
    5ccc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5cd0:	429a      	cmp	r2, r3
    5cd2:	d3fa      	bcc.n	5cca <bt_le_sync_rssi+0x7e>
    5cd4:	e7da      	b.n	5c8c <bt_le_sync_rssi+0x40>
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address));
	
	while (requested_mode == active_mode) {
		if (requested_channel != 0) {
    5cd6:	4b64      	ldr	r3, [pc, #400]	; (5e68 <bt_le_sync_rssi+0x21c>)
    5cd8:	89db      	ldrh	r3, [r3, #14]
    5cda:	b29b      	uxth	r3, r3
    5cdc:	b1c3      	cbz	r3, 5d10 <bt_le_sync_rssi+0xc4>
			cc2400_strobe(SRFOFF);
    5cde:	2064      	movs	r0, #100	; 0x64
    5ce0:	f002 feeb 	bl	8aba <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5ce4:	f002 fee2 	bl	8aac <cc2400_status>
    5ce8:	0742      	lsls	r2, r0, #29
    5cea:	d4fb      	bmi.n	5ce4 <bt_le_sync_rssi+0x98>
			cc2400_set(FSDIV, channel);
    5cec:	4b60      	ldr	r3, [pc, #384]	; (5e70 <bt_le_sync_rssi+0x224>)
    5cee:	2002      	movs	r0, #2
    5cf0:	8819      	ldrh	r1, [r3, #0]
    5cf2:	b289      	uxth	r1, r1
    5cf4:	f002 fe09 	bl	890a <cc2400_set>
			cc2400_strobe(SFSON);
    5cf8:	2061      	movs	r0, #97	; 0x61
    5cfa:	f002 fede 	bl	8aba <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5cfe:	f002 fed5 	bl	8aac <cc2400_status>
    5d02:	0743      	lsls	r3, r0, #29
    5d04:	d5fb      	bpl.n	5cfe <bt_le_sync_rssi+0xb2>
			cc2400_strobe(SRX);
    5d06:	2062      	movs	r0, #98	; 0x62
    5d08:	f002 fed7 	bl	8aba <cc2400_strobe>
			requested_channel = 0;
    5d0c:	2300      	movs	r3, #0
    5d0e:	81f3      	strh	r3, [r6, #14]
		}
		RXLED_CLR;
    5d10:	4b59      	ldr	r3, [pc, #356]	; (5e78 <bt_le_sync_rssi+0x22c>)
    5d12:	2210      	movs	r2, #16
    5d14:	601a      	str	r2, [r3, #0]
		
		if (requested_mode != active_mode) {
    5d16:	7cb3      	ldrb	r3, [r6, #18]
    5d18:	42bb      	cmp	r3, r7
    5d1a:	f040 8097 	bne.w	5e4c <bt_le_sync_rssi+0x200>
			goto cleanup;
		}

		//JWHUR buffering time information
		u32 time_buf1[16] = {0, };
    5d1e:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    5d22:	2100      	movs	r1, #0
    5d24:	2240      	movs	r2, #64	; 0x40
    5d26:	4648      	mov	r0, r9
    5d28:	f7fe fa82 	bl	4230 <memset>
		u32 time_buf2[16] = {0, };
    5d2c:	2100      	movs	r1, #0
    5d2e:	2240      	movs	r2, #64	; 0x40
    5d30:	a81e      	add	r0, sp, #120	; 0x78
    5d32:	f7fe fa7d 	bl	4230 <memset>
		u32 time_buf3[16] = {0, };
    5d36:	2100      	movs	r1, #0
    5d38:	2240      	movs	r2, #64	; 0x40
    5d3a:	a82e      	add	r0, sp, #184	; 0xb8
    5d3c:	f7fe fa78 	bl	4230 <memset>
		u32 time_buf4[16] = {0, };
    5d40:	a83e      	add	r0, sp, #248	; 0xf8
    5d42:	2100      	movs	r1, #0
    5d44:	2240      	movs	r2, #64	; 0x40
    5d46:	f7fe fa73 	bl	4230 <memset>
    5d4a:	f04f 0b00 	mov.w	fp, #0
		for (i = 0; i < DMA_SIZE; i++) {
    5d4e:	465d      	mov	r5, fp
			if (i<16) time_buf1[i] = CLK100NS;
    5d50:	2d0f      	cmp	r5, #15
    5d52:	dc0a      	bgt.n	5d6a <bt_le_sync_rssi+0x11e>
    5d54:	4949      	ldr	r1, [pc, #292]	; (5e7c <bt_le_sync_rssi+0x230>)
    5d56:	6822      	ldr	r2, [r4, #0]
    5d58:	6809      	ldr	r1, [r1, #0]
    5d5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
    5d5e:	f640 4035 	movw	r0, #3125	; 0xc35
    5d62:	fb00 1202 	mla	r2, r0, r2, r1
    5d66:	f849 200b 	str.w	r2, [r9, fp]
    5d6a:	f1a5 0210 	sub.w	r2, r5, #16
			if (15<i && i<32) time_buf2[i-16] = CLK100NS;
    5d6e:	2a0f      	cmp	r2, #15
    5d70:	d80c      	bhi.n	5d8c <bt_le_sync_rssi+0x140>
    5d72:	4a42      	ldr	r2, [pc, #264]	; (5e7c <bt_le_sync_rssi+0x230>)
    5d74:	6821      	ldr	r1, [r4, #0]
    5d76:	6810      	ldr	r0, [r2, #0]
    5d78:	f3c1 0113 	ubfx	r1, r1, #0, #20
    5d7c:	f640 4e35 	movw	lr, #3125	; 0xc35
    5d80:	fb0e 0101 	mla	r1, lr, r1, r0
    5d84:	aa1e      	add	r2, sp, #120	; 0x78
    5d86:	445a      	add	r2, fp
    5d88:	f842 1c40 	str.w	r1, [r2, #-64]
    5d8c:	f1a5 0220 	sub.w	r2, r5, #32
			if (31<i && i<48) time_buf3[i-32] = CLK100NS;
    5d90:	2a0f      	cmp	r2, #15
    5d92:	d84b      	bhi.n	5e2c <bt_le_sync_rssi+0x1e0>
    5d94:	4a39      	ldr	r2, [pc, #228]	; (5e7c <bt_le_sync_rssi+0x230>)
    5d96:	6821      	ldr	r1, [r4, #0]
    5d98:	6810      	ldr	r0, [r2, #0]
    5d9a:	f3c1 0113 	ubfx	r1, r1, #0, #20
    5d9e:	f640 4e35 	movw	lr, #3125	; 0xc35
    5da2:	fb0e 0101 	mla	r1, lr, r1, r0
    5da6:	aa2e      	add	r2, sp, #184	; 0xb8
    5da8:	445a      	add	r2, fp
    5daa:	f842 1c80 	str.w	r1, [r2, #-128]
			if (47<i) time_buf4[i-48] = CLK100NS;
			rssi_buf[i] = (u8)(cc2400_get(RSSI) >> 8);
    5dae:	2006      	movs	r0, #6
    5db0:	f002 fda2 	bl	88f8 <cc2400_get>
			volatile u32 j = 598; while (--j); // empty for loop ~= 70ns, 598 empty while loop ~= 41.8us, 240 loop ~= 16.8us
    5db4:	f240 2256 	movw	r2, #598	; 0x256
		for (i = 0; i < DMA_SIZE; i++) {
			if (i<16) time_buf1[i] = CLK100NS;
			if (15<i && i<32) time_buf2[i-16] = CLK100NS;
			if (31<i && i<48) time_buf3[i-32] = CLK100NS;
			if (47<i) time_buf4[i-48] = CLK100NS;
			rssi_buf[i] = (u8)(cc2400_get(RSSI) >> 8);
    5db8:	0a00      	lsrs	r0, r0, #8
    5dba:	f808 0005 	strb.w	r0, [r8, r5]
			volatile u32 j = 598; while (--j); // empty for loop ~= 70ns, 598 empty while loop ~= 41.8us, 240 loop ~= 16.8us
    5dbe:	9200      	str	r2, [sp, #0]
    5dc0:	9a00      	ldr	r2, [sp, #0]
    5dc2:	3a01      	subs	r2, #1
    5dc4:	9200      	str	r2, [sp, #0]
    5dc6:	2a00      	cmp	r2, #0
    5dc8:	d1fa      	bne.n	5dc0 <bt_le_sync_rssi+0x174>
		//JWHUR buffering time information
		u32 time_buf1[16] = {0, };
		u32 time_buf2[16] = {0, };
		u32 time_buf3[16] = {0, };
		u32 time_buf4[16] = {0, };
		for (i = 0; i < DMA_SIZE; i++) {
    5dca:	3501      	adds	r5, #1
    5dcc:	2d32      	cmp	r5, #50	; 0x32
    5dce:	f10b 0b04 	add.w	fp, fp, #4
    5dd2:	d1bd      	bne.n	5d50 <bt_le_sync_rssi+0x104>
			if (47<i) time_buf4[i-48] = CLK100NS;
			rssi_buf[i] = (u8)(cc2400_get(RSSI) >> 8);
			volatile u32 j = 598; while (--j); // empty for loop ~= 70ns, 598 empty while loop ~= 41.8us, 240 loop ~= 16.8us
		}

		RXLED_SET;
    5dd4:	4b2a      	ldr	r3, [pc, #168]	; (5e80 <bt_le_sync_rssi+0x234>)
    5dd6:	2210      	movs	r2, #16
    5dd8:	601a      	str	r2, [r3, #0]

		ICER0 = ICER0_ICE_USB;
    5dda:	4b2a      	ldr	r3, [pc, #168]	; (5e84 <bt_le_sync_rssi+0x238>)
    5ddc:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
    5de0:	601d      	str	r5, [r3, #0]
		enqueue_with_ts(RSSI_TRACK, (uint8_t *)rssi_buf, CLK100NS);
    5de2:	4b26      	ldr	r3, [pc, #152]	; (5e7c <bt_le_sync_rssi+0x230>)
    5de4:	6822      	ldr	r2, [r4, #0]
    5de6:	681b      	ldr	r3, [r3, #0]
    5de8:	f640 4e35 	movw	lr, #3125	; 0xc35
    5dec:	f3c2 0213 	ubfx	r2, r2, #0, #20
    5df0:	fb0e 3202 	mla	r2, lr, r2, r3
    5df4:	4641      	mov	r1, r8
    5df6:	2008      	movs	r0, #8
    5df8:	f7ff f8d0 	bl	4f9c <enqueue_with_ts>
		enqueue_time((uint8_t *) time_buf1);
    5dfc:	4648      	mov	r0, r9
    5dfe:	f7ff f8ab 	bl	4f58 <enqueue_time>
		enqueue_time((uint8_t *) time_buf2);
    5e02:	a81e      	add	r0, sp, #120	; 0x78
    5e04:	f7ff f8a8 	bl	4f58 <enqueue_time>
		enqueue_time((uint8_t *) time_buf3);
    5e08:	a82e      	add	r0, sp, #184	; 0xb8
    5e0a:	f7ff f8a5 	bl	4f58 <enqueue_time>
		enqueue_time((uint8_t *) time_buf4);
    5e0e:	a83e      	add	r0, sp, #248	; 0xf8
    5e10:	f7ff f8a2 	bl	4f58 <enqueue_time>
		ISER0 = ISER0_ISE_USB;
    5e14:	4b17      	ldr	r3, [pc, #92]	; (5e74 <bt_le_sync_rssi+0x228>)
    5e16:	601d      	str	r5, [r3, #0]
		
		if (overflow == 0) {
			if ((clkn & 0xffffff) > stop_at)
    5e18:	6823      	ldr	r3, [r4, #0]
    5e1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5e1e:	4553      	cmp	r3, sl
    5e20:	d814      	bhi.n	5e4c <bt_le_sync_rssi+0x200>
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address));
	
	while (requested_mode == active_mode) {
    5e22:	7cb3      	ldrb	r3, [r6, #18]
    5e24:	42bb      	cmp	r3, r7
    5e26:	f43f af56 	beq.w	5cd6 <bt_le_sync_rssi+0x8a>
    5e2a:	e00f      	b.n	5e4c <bt_le_sync_rssi+0x200>
		u32 time_buf4[16] = {0, };
		for (i = 0; i < DMA_SIZE; i++) {
			if (i<16) time_buf1[i] = CLK100NS;
			if (15<i && i<32) time_buf2[i-16] = CLK100NS;
			if (31<i && i<48) time_buf3[i-32] = CLK100NS;
			if (47<i) time_buf4[i-48] = CLK100NS;
    5e2c:	2d2f      	cmp	r5, #47	; 0x2f
    5e2e:	ddbe      	ble.n	5dae <bt_le_sync_rssi+0x162>
    5e30:	4a12      	ldr	r2, [pc, #72]	; (5e7c <bt_le_sync_rssi+0x230>)
    5e32:	6821      	ldr	r1, [r4, #0]
    5e34:	6810      	ldr	r0, [r2, #0]
    5e36:	f3c1 0113 	ubfx	r1, r1, #0, #20
    5e3a:	f640 4e35 	movw	lr, #3125	; 0xc35
    5e3e:	fb0e 0101 	mla	r1, lr, r1, r0
    5e42:	aa3e      	add	r2, sp, #248	; 0xf8
    5e44:	445a      	add	r2, fp
    5e46:	f842 1cc0 	str.w	r1, [r2, #-192]
    5e4a:	e7b0      	b.n	5dae <bt_le_sync_rssi+0x162>
				goto cleanup;
		}
		
	}
cleanup:
	ICER0 = ICER0_ICE_USB;
    5e4c:	4b0d      	ldr	r3, [pc, #52]	; (5e84 <bt_le_sync_rssi+0x238>)
    5e4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5e52:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    5e54:	f7fe fbb2 	bl	45bc <cc2400_idle>
	dio_ssp_stop ();
    5e58:	f001 ff70 	bl	7d3c <dio_ssp_stop>
	cs_trigger_disable();
    5e5c:	f001 fe1a 	bl	7a94 <cs_trigger_disable>
}
    5e60:	b04f      	add	sp, #316	; 0x13c
    5e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e66:	bf00      	nop
    5e68:	10000e34 	.word	0x10000e34
    5e6c:	10001024 	.word	0x10001024
    5e70:	1000044c 	.word	0x1000044c
    5e74:	e000e100 	.word	0xe000e100
    5e78:	2009c03c 	.word	0x2009c03c
    5e7c:	40004008 	.word	0x40004008
    5e80:	2009c038 	.word	0x2009c038
    5e84:	e000e180 	.word	0xe000e180

00005e88 <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    5e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e8c:	b091      	sub	sp, #68	; 0x44
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	int uuuuu = 0; //JWHUR to detect packet with pdu uuuuu

	modulation = MOD_BT_LOW_ENERGY;
    5e8e:	4caa      	ldr	r4, [pc, #680]	; (6138 <bt_le_sync+0x2b0>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5e90:	4daa      	ldr	r5, [pc, #680]	; (613c <bt_le_sync+0x2b4>)
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	int uuuuu = 0; //JWHUR to detect packet with pdu uuuuu

	modulation = MOD_BT_LOW_ENERGY;
    5e92:	2301      	movs	r3, #1
    5e94:	7023      	strb	r3, [r4, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5e96:	762b      	strb	r3, [r5, #24]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5e98:	4ba9      	ldr	r3, [pc, #676]	; (6140 <bt_le_sync+0x2b8>)
    5e9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	int8_t rssi;
	static int restart_jamming = 0;
	int uuuuu = 0; //JWHUR to detect packet with pdu uuuuu

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    5e9e:	7460      	strb	r0, [r4, #17]

	le.link_state = LINK_LISTENING;

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5ea0:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5ea2:	4ba8      	ldr	r3, [pc, #672]	; (6144 <bt_le_sync+0x2bc>)
    5ea4:	2210      	movs	r2, #16
    5ea6:	601a      	str	r2, [r3, #0]
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5ea8:	4606      	mov	r6, r0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;

	RXLED_CLR;

	queue_init();
    5eaa:	f001 fca3 	bl	77f4 <queue_init>
	dio_ssp_init();
    5eae:	f002 fc9b 	bl	87e8 <dio_ssp_init>
	dma_init_le();
    5eb2:	f001 fed5 	bl	7c60 <dma_init_le>
	dio_ssp_start();
    5eb6:	f001 ff1b 	bl	7cf0 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5eba:	6868      	ldr	r0, [r5, #4]
    5ebc:	f002 fc30 	bl	8720 <rbit>
    5ec0:	f7fe fac6 	bl	4450 <cc2400_rx_sync>
void bt_le_sync(u8 active_mode)
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	int uuuuu = 0; //JWHUR to detect packet with pdu uuuuu
    5ec4:	f04f 0800 	mov.w	r8, #0
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    5ec8:	7ca3      	ldrb	r3, [r4, #18]
    5eca:	42b3      	cmp	r3, r6
    5ecc:	f040 81d2 	bne.w	6274 <bt_le_sync+0x3ec>
		if (requested_channel != 0) {
    5ed0:	4b99      	ldr	r3, [pc, #612]	; (6138 <bt_le_sync+0x2b0>)
    5ed2:	89db      	ldrh	r3, [r3, #14]
    5ed4:	b29b      	uxth	r3, r3
    5ed6:	b1cb      	cbz	r3, 5f0c <bt_le_sync+0x84>
			cc2400_strobe(SRFOFF);
    5ed8:	2064      	movs	r0, #100	; 0x64
    5eda:	f002 fdee 	bl	8aba <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5ede:	f002 fde5 	bl	8aac <cc2400_status>
    5ee2:	0741      	lsls	r1, r0, #29
    5ee4:	d4fb      	bmi.n	5ede <bt_le_sync+0x56>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5ee6:	8829      	ldrh	r1, [r5, #0]
    5ee8:	2002      	movs	r0, #2
    5eea:	b289      	uxth	r1, r1
    5eec:	3901      	subs	r1, #1
    5eee:	b289      	uxth	r1, r1
    5ef0:	f002 fd0b 	bl	890a <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5ef4:	2061      	movs	r0, #97	; 0x61
    5ef6:	f002 fde0 	bl	8aba <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5efa:	f002 fdd7 	bl	8aac <cc2400_status>
    5efe:	0742      	lsls	r2, r0, #29
    5f00:	d5fb      	bpl.n	5efa <bt_le_sync+0x72>

			/* RX mode */
			cc2400_strobe(SRX);
    5f02:	2062      	movs	r0, #98	; 0x62
    5f04:	f002 fdd9 	bl	8aba <cc2400_strobe>

			requested_channel = 0;
    5f08:	2300      	movs	r3, #0
    5f0a:	81e3      	strh	r3, [r4, #14]
		}

		RXLED_CLR;
    5f0c:	4b8d      	ldr	r3, [pc, #564]	; (6144 <bt_le_sync+0x2bc>)
    5f0e:	2210      	movs	r2, #16
    5f10:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5f12:	f001 fcff 	bl	7914 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)	;
    5f16:	4b8c      	ldr	r3, [pc, #560]	; (6148 <bt_le_sync+0x2c0>)
    5f18:	681a      	ldr	r2, [r3, #0]
    5f1a:	4699      	mov	r9, r3
    5f1c:	b942      	cbnz	r2, 5f30 <bt_le_sync+0xa8>
    5f1e:	4b8b      	ldr	r3, [pc, #556]	; (614c <bt_le_sync+0x2c4>)
    5f20:	681b      	ldr	r3, [r3, #0]
    5f22:	b92b      	cbnz	r3, 5f30 <bt_le_sync+0xa8>
    5f24:	7ae3      	ldrb	r3, [r4, #11]
    5f26:	b91b      	cbnz	r3, 5f30 <bt_le_sync+0xa8>
    5f28:	4b83      	ldr	r3, [pc, #524]	; (6138 <bt_le_sync+0x2b0>)
    5f2a:	7c9b      	ldrb	r3, [r3, #18]
    5f2c:	42b3      	cmp	r3, r6
    5f2e:	d0f2      	beq.n	5f16 <bt_le_sync+0x8e>

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5f30:	2006      	movs	r0, #6
    5f32:	f002 fce1 	bl	88f8 <cc2400_get>
		rssi_min = rssi_max = rssi;
    5f36:	4b86      	ldr	r3, [pc, #536]	; (6150 <bt_le_sync+0x2c8>)

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)	;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5f38:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;

		if (requested_mode != active_mode) {
    5f3c:	7ca2      	ldrb	r2, [r4, #18]
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)	;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5f3e:	7018      	strb	r0, [r3, #0]
    5f40:	4b84      	ldr	r3, [pc, #528]	; (6154 <bt_le_sync+0x2cc>)

		if (requested_mode != active_mode) {
    5f42:	42b2      	cmp	r2, r6
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)	;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5f44:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    5f46:	4b7c      	ldr	r3, [pc, #496]	; (6138 <bt_le_sync+0x2b0>)
    5f48:	f040 8194 	bne.w	6274 <bt_le_sync+0x3ec>
			goto cleanup;
		}

		if (rx_err) {
    5f4c:	4a7f      	ldr	r2, [pc, #508]	; (614c <bt_le_sync+0x2c4>)
    5f4e:	6811      	ldr	r1, [r2, #0]
    5f50:	4693      	mov	fp, r2
    5f52:	b119      	cbz	r1, 5f5c <bt_le_sync+0xd4>
			status |= DMA_ERROR;
    5f54:	785a      	ldrb	r2, [r3, #1]
    5f56:	f042 0202 	orr.w	r2, r2, #2
    5f5a:	705a      	strb	r2, [r3, #1]
		}

		if (do_hop)
    5f5c:	7ae3      	ldrb	r3, [r4, #11]
    5f5e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5f62:	2b00      	cmp	r3, #0
    5f64:	f040 80d9 	bne.w	611a <bt_le_sync+0x292>
			goto rx_flush;

		/* No DMA transfer? */
		if (!rx_tc)
    5f68:	f8d9 3000 	ldr.w	r3, [r9]
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	d0ab      	beq.n	5ec8 <bt_le_sync+0x40>
			continue;

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
    5f70:	2234      	movs	r2, #52	; 0x34
    5f72:	a803      	add	r0, sp, #12
    5f74:	f7fe f95c 	bl	4230 <memset>
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5f78:	8828      	ldrh	r0, [r5, #0]
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5f7a:	686b      	ldr	r3, [r5, #4]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5f7c:	b280      	uxth	r0, r0
    5f7e:	3862      	subs	r0, #98	; 0x62
    5f80:	b2c0      	uxtb	r0, r0
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5f82:	9303      	str	r3, [sp, #12]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5f84:	f001 fb3c 	bl	7600 <btle_channel_index>
    5f88:	2730      	movs	r7, #48	; 0x30
    5f8a:	4347      	muls	r7, r0
    5f8c:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 6180 <bt_le_sync+0x2f8>
    5f90:	eb0a 0307 	add.w	r3, sl, r7
    5f94:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5f96:	4b70      	ldr	r3, [pc, #448]	; (6158 <bt_le_sync+0x2d0>)
    5f98:	f893 e000 	ldrb.w	lr, [r3]
					   | rxbuf1[i+1] << 16
    5f9c:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5f9e:	7898      	ldrb	r0, [r3, #2]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5fa0:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5fa2:	78d9      	ldrb	r1, [r3, #3]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5fa4:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
					   | rxbuf1[i+2] << 8
    5fa8:	430a      	orrs	r2, r1
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5faa:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    5fae:	9300      	str	r3, [sp, #0]
    5fb0:	f002 fbb6 	bl	8720 <rbit>
    5fb4:	f85a 2007 	ldr.w	r2, [sl, r7]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5fb8:	9b00      	ldr	r3, [sp, #0]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5fba:	4050      	eors	r0, r2
		}

		unsigned len = (p[5] & 0x3f) + 2;
    5fbc:	f3c0 2a05 	ubfx	sl, r0, #8, #6
    5fc0:	f10a 0702 	add.w	r7, sl, #2
		if (len > 39)
    5fc4:	2f27      	cmp	r7, #39	; 0x27
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5fc6:	9004      	str	r0, [sp, #16]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5fc8:	f200 80a7 	bhi.w	611a <bt_le_sync+0x292>
			goto rx_flush;

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5fcc:	f10a 0a08 	add.w	sl, sl, #8
    5fd0:	ea4f 029a 	mov.w	r2, sl, lsr #2
		if (total_transfers < 11) {
    5fd4:	2a0b      	cmp	r2, #11
    5fd6:	d00d      	beq.n	5ff4 <bt_le_sync+0x16c>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5fd8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5fdc:	4a5f      	ldr	r2, [pc, #380]	; (615c <bt_le_sync+0x2d4>)
    5fde:	6812      	ldr	r2, [r2, #0]
    5fe0:	429a      	cmp	r2, r3
    5fe2:	d20b      	bcs.n	5ffc <bt_le_sync+0x174>
    5fe4:	f8db 1000 	ldr.w	r1, [fp]
    5fe8:	2900      	cmp	r1, #0
    5fea:	d0f7      	beq.n	5fdc <bt_le_sync+0x154>
    5fec:	e006      	b.n	5ffc <bt_le_sync+0x174>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5fee:	f8db 3000 	ldr.w	r3, [fp]
    5ff2:	b91b      	cbnz	r3, 5ffc <bt_le_sync+0x174>
    5ff4:	4b5a      	ldr	r3, [pc, #360]	; (6160 <bt_le_sync+0x2d8>)
    5ff6:	681b      	ldr	r3, [r3, #0]
    5ff8:	07db      	lsls	r3, r3, #31
    5ffa:	d4f8      	bmi.n	5fee <bt_le_sync+0x166>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5ffc:	4b59      	ldr	r3, [pc, #356]	; (6164 <bt_le_sync+0x2dc>)

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5ffe:	2061      	movs	r0, #97	; 0x61
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6000:	681a      	ldr	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6002:	f04f 0b04 	mov.w	fp, #4
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6006:	f022 0201 	bic.w	r2, r2, #1
    600a:	601a      	str	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    600c:	f002 fd55 	bl	8aba <cc2400_strobe>

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6010:	4a51      	ldr	r2, [pc, #324]	; (6158 <bt_le_sync+0x2d0>)
    6012:	f10b 0001 	add.w	r0, fp, #1
    6016:	f812 100b 	ldrb.w	r1, [r2, fp]
    601a:	f10b 0c03 	add.w	ip, fp, #3
					   | rxbuf1[i+1] << 16
    601e:	f812 e000 	ldrb.w	lr, [r2, r0]
    6022:	f10b 0002 	add.w	r0, fp, #2
					   | rxbuf1[i+2] << 8
    6026:	5c10      	ldrb	r0, [r2, r0]
					   | rxbuf1[i+3] << 0;
    6028:	f812 c00c 	ldrb.w	ip, [r2, ip]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    602c:	ea4f 02ab 	mov.w	r2, fp, asr #2
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    6030:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
					   | rxbuf1[i+2] << 8
    6034:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6038:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    603c:	9200      	str	r2, [sp, #0]
    603e:	f002 fb6f 	bl	8720 <rbit>
    6042:	9a00      	ldr	r2, [sp, #0]
    6044:	ab10      	add	r3, sp, #64	; 0x40
    6046:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    604a:	9b01      	ldr	r3, [sp, #4]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    604c:	f10b 0b04 	add.w	fp, fp, #4
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6050:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6054:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6058:	ea82 0000 	eor.w	r0, r2, r0
    605c:	f841 0c30 	str.w	r0, [r1, #-48]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6060:	d1d6      	bne.n	6010 <bt_le_sync+0x188>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    6062:	696b      	ldr	r3, [r5, #20]
    6064:	b92b      	cbnz	r3, 6072 <bt_le_sync+0x1ea>
				goto rx_flush;
		}

		//JWHUR rssi sampling synchronization test
		//If a BLE advertising packet with pdu, uuuuu received, after 100ms goto le_sync_rssi
		if (p[24] == 0x55 && p[25] == 0x55 && p[26] == 0x55 && p[27] == 0x55 && p[28] == 0x55) {
    6066:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    606a:	4f3f      	ldr	r7, [pc, #252]	; (6168 <bt_le_sync+0x2e0>)
    606c:	2b55      	cmp	r3, #85	; 0x55
    606e:	d130      	bne.n	60d2 <bt_le_sync+0x24a>
    6070:	e016      	b.n	60a0 <bt_le_sync+0x218>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6072:	4b32      	ldr	r3, [pc, #200]	; (613c <bt_le_sync+0x2b4>)
    6074:	463a      	mov	r2, r7
    6076:	6918      	ldr	r0, [r3, #16]
    6078:	a904      	add	r1, sp, #16
    607a:	f001 fb41 	bl	7700 <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    607e:	ab10      	add	r3, sp, #64	; 0x40
    6080:	4453      	add	r3, sl
    6082:	f813 2c34 	ldrb.w	r2, [r3, #-52]
						 | (p[4+len+1] << 8)
    6086:	ab10      	add	r3, sp, #64	; 0x40
    6088:	441f      	add	r7, r3
    608a:	f817 3c2f 	ldrb.w	r3, [r7, #-47]
    608e:	021b      	lsls	r3, r3, #8
    6090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						 | (p[4+len+0] << 0);
    6094:	f817 2c30 	ldrb.w	r2, [r7, #-48]
    6098:	4313      	orrs	r3, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    609a:	4298      	cmp	r0, r3
    609c:	d13d      	bne.n	611a <bt_le_sync+0x292>
    609e:	e7e2      	b.n	6066 <bt_le_sync+0x1de>
				goto rx_flush;
		}

		//JWHUR rssi sampling synchronization test
		//If a BLE advertising packet with pdu, uuuuu received, after 100ms goto le_sync_rssi
		if (p[24] == 0x55 && p[25] == 0x55 && p[26] == 0x55 && p[27] == 0x55 && p[28] == 0x55) {
    60a0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    60a4:	2b55      	cmp	r3, #85	; 0x55
    60a6:	d114      	bne.n	60d2 <bt_le_sync+0x24a>
    60a8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    60ac:	2b55      	cmp	r3, #85	; 0x55
    60ae:	d110      	bne.n	60d2 <bt_le_sync+0x24a>
    60b0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    60b4:	2b55      	cmp	r3, #85	; 0x55
    60b6:	d10c      	bne.n	60d2 <bt_le_sync+0x24a>
    60b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    60bc:	2b55      	cmp	r3, #85	; 0x55
    60be:	d108      	bne.n	60d2 <bt_le_sync+0x24a>
			uuuuu = 1;
			now_sync = (clkn & 0xffffff);
    60c0:	683b      	ldr	r3, [r7, #0]
		}

		//JWHUR rssi sampling synchronization test
		//If a BLE advertising packet with pdu, uuuuu received, after 100ms goto le_sync_rssi
		if (p[24] == 0x55 && p[25] == 0x55 && p[26] == 0x55 && p[27] == 0x55 && p[28] == 0x55) {
			uuuuu = 1;
    60c2:	f04f 0801 	mov.w	r8, #1
			now_sync = (clkn & 0xffffff);
    60c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    60ca:	62e3      	str	r3, [r4, #44]	; 0x2c
			start_sync = now_sync + 100 * 10000 / 3125; // wait for 100 ms
    60cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    60d0:	62a3      	str	r3, [r4, #40]	; 0x28
		}


		RXLED_SET;
    60d2:	4b26      	ldr	r3, [pc, #152]	; (616c <bt_le_sync+0x2e4>)
    60d4:	2210      	movs	r2, #16
    60d6:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    60d8:	a803      	add	r0, sp, #12
    60da:	69a3      	ldr	r3, [r4, #24]
    60dc:	4798      	blx	r3

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
    60de:	4b24      	ldr	r3, [pc, #144]	; (6170 <bt_le_sync+0x2e8>)
    60e0:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
    60e4:	f8c3 a000 	str.w	sl, [r3]
		enqueue(LE_PACKET, (uint8_t *)packet);
    60e8:	a903      	add	r1, sp, #12
    60ea:	2001      	movs	r0, #1
    60ec:	f7fe fa0c 	bl	4508 <enqueue>
		ISER0 = ISER0_ISE_USB;
    60f0:	4b13      	ldr	r3, [pc, #76]	; (6140 <bt_le_sync+0x2b8>)

		le.last_packet = CLK100NS;
    60f2:	4a20      	ldr	r2, [pc, #128]	; (6174 <bt_le_sync+0x2ec>)
		packet_cb((uint8_t *)packet);

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
		enqueue(LE_PACKET, (uint8_t *)packet);
		ISER0 = ISER0_ISE_USB;
    60f4:	f8c3 a000 	str.w	sl, [r3]

		le.last_packet = CLK100NS;
    60f8:	683b      	ldr	r3, [r7, #0]
    60fa:	6812      	ldr	r2, [r2, #0]
    60fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6100:	f640 4135 	movw	r1, #3125	; 0xc35
    6104:	fb01 2303 	mla	r3, r1, r3, r2
    6108:	646b      	str	r3, [r5, #68]	; 0x44

		//JWHUR if uuuuu receive
		if (uuuuu == 1) {
    610a:	f1b8 0f00 	cmp.w	r8, #0
    610e:	d004      	beq.n	611a <bt_le_sync+0x292>
			requested_mode = MODE_BT_RSSI_LE;
    6110:	4b09      	ldr	r3, [pc, #36]	; (6138 <bt_le_sync+0x2b0>)
    6112:	2012      	movs	r0, #18
    6114:	7498      	strb	r0, [r3, #18]
			bt_le_sync_rssi(MODE_BT_RSSI_LE);
    6116:	f7ff fd99 	bl	5c4c <bt_le_sync_rssi>
		}
	
	rx_flush:
		// this might happen twice, but it's safe to do so
		cc2400_strobe(SFSON);
    611a:	2061      	movs	r0, #97	; 0x61
    611c:	f002 fccd 	bl	8aba <cc2400_strobe>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6120:	4b10      	ldr	r3, [pc, #64]	; (6164 <bt_le_sync+0x2dc>)
    6122:	681a      	ldr	r2, [r3, #0]
    6124:	f022 0201 	bic.w	r2, r2, #1
    6128:	601a      	str	r2, [r3, #0]
		while (SSP1SR & SSPSR_RNE) {
    612a:	4b13      	ldr	r3, [pc, #76]	; (6178 <bt_le_sync+0x2f0>)
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	075f      	lsls	r7, r3, #29
    6130:	d528      	bpl.n	6184 <bt_le_sync+0x2fc>
			u8 tmp = (u8)DIO_SSP_DR;
    6132:	4b12      	ldr	r3, [pc, #72]	; (617c <bt_le_sync+0x2f4>)
    6134:	681b      	ldr	r3, [r3, #0]
    6136:	e7f8      	b.n	612a <bt_le_sync+0x2a2>
    6138:	10000e34 	.word	0x10000e34
    613c:	1000044c 	.word	0x1000044c
    6140:	e000e100 	.word	0xe000e100
    6144:	2009c03c 	.word	0x2009c03c
    6148:	10001004 	.word	0x10001004
    614c:	1000151c 	.word	0x1000151c
    6150:	10001008 	.word	0x10001008
    6154:	1000100a 	.word	0x1000100a
    6158:	100014e9 	.word	0x100014e9
    615c:	50004104 	.word	0x50004104
    6160:	50004110 	.word	0x50004110
    6164:	40030024 	.word	0x40030024
    6168:	10001024 	.word	0x10001024
    616c:	2009c038 	.word	0x2009c038
    6170:	e000e180 	.word	0xe000e180
    6174:	40004008 	.word	0x40004008
    6178:	4003000c 	.word	0x4003000c
    617c:	40030008 	.word	0x40030008
    6180:	0000a308 	.word	0x0000a308
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    6184:	4b42      	ldr	r3, [pc, #264]	; (6290 <bt_le_sync+0x408>)
    6186:	4a43      	ldr	r2, [pc, #268]	; (6294 <bt_le_sync+0x40c>)
    6188:	681b      	ldr	r3, [r3, #0]
    618a:	6812      	ldr	r2, [r2, #0]
    618c:	f640 4135 	movw	r1, #3125	; 0xc35
    6190:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6194:	fb01 2303 	mla	r3, r1, r3, r2
		if (now < le.last_packet)
    6198:	6c6a      	ldr	r2, [r5, #68]	; 0x44
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    619a:	7e29      	ldrb	r1, [r5, #24]
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
    619c:	4293      	cmp	r3, r2
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    619e:	f1a1 0102 	sub.w	r1, r1, #2
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    61a2:	bf38      	it	cc
    61a4:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    61a8:	b2c9      	uxtb	r1, r1
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    61aa:	bf38      	it	cc
    61ac:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    61b0:	2901      	cmp	r1, #1
    61b2:	d803      	bhi.n	61bc <bt_le_sync+0x334>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
			&& (now - le.last_packet > 50000000))
    61b4:	4938      	ldr	r1, [pc, #224]	; (6298 <bt_le_sync+0x410>)
    61b6:	1a9b      	subs	r3, r3, r2
    61b8:	428b      	cmp	r3, r1
    61ba:	d802      	bhi.n	61c2 <bt_le_sync+0x33a>
			// jam finished
			|| (le_jam_count == 1)
    61bc:	69e3      	ldr	r3, [r4, #28]
    61be:	2b01      	cmp	r3, #1
    61c0:	d127      	bne.n	6212 <bt_le_sync+0x38a>
			)
		{
			reset_le();
    61c2:	f7ff fc17 	bl	59f4 <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    61c6:	4935      	ldr	r1, [pc, #212]	; (629c <bt_le_sync+0x414>)
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    61c8:	2300      	movs	r3, #0
			TXLED_CLR;
    61ca:	f44f 7080 	mov.w	r0, #256	; 0x100
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    61ce:	61e3      	str	r3, [r4, #28]
			TXLED_CLR;
    61d0:	6008      	str	r0, [r1, #0]

			if (jam_mode == JAM_ONCE) {
    61d2:	7ce1      	ldrb	r1, [r4, #19]
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    61d4:	4a32      	ldr	r2, [pc, #200]	; (62a0 <bt_le_sync+0x418>)
			TXLED_CLR;

			if (jam_mode == JAM_ONCE) {
    61d6:	2901      	cmp	r1, #1
    61d8:	d102      	bne.n	61e0 <bt_le_sync+0x358>
				jam_mode = JAM_NONE;
    61da:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    61dc:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    61de:	e049      	b.n	6274 <bt_le_sync+0x3ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    61e0:	2e0a      	cmp	r6, #10
    61e2:	d047      	beq.n	6274 <bt_le_sync+0x3ec>
				goto cleanup;

			le.link_state = LINK_LISTENING;
    61e4:	2301      	movs	r3, #1

			cc2400_strobe(SRFOFF);
    61e6:	2064      	movs	r0, #100	; 0x64

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
				goto cleanup;

			le.link_state = LINK_LISTENING;
    61e8:	762b      	strb	r3, [r5, #24]

			cc2400_strobe(SRFOFF);
    61ea:	f002 fc66 	bl	8aba <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    61ee:	f002 fc5d 	bl	8aac <cc2400_status>
    61f2:	0740      	lsls	r0, r0, #29
    61f4:	d4fb      	bmi.n	61ee <bt_le_sync+0x366>

			/* Retune */
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    61f6:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
    61fa:	b29b      	uxth	r3, r3
    61fc:	b123      	cbz	r3, 6208 <bt_le_sync+0x380>
    61fe:	4b29      	ldr	r3, [pc, #164]	; (62a4 <bt_le_sync+0x41c>)
    6200:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    6204:	b29b      	uxth	r3, r3
    6206:	e001      	b.n	620c <bt_le_sync+0x384>
    6208:	f640 1362 	movw	r3, #2402	; 0x962
    620c:	802b      	strh	r3, [r5, #0]
			restart_jamming = 1;
    620e:	2301      	movs	r3, #1
    6210:	6323      	str	r3, [r4, #48]	; 0x30
		}

		cc2400_set(SYNCL, le.syncl);
    6212:	202c      	movs	r0, #44	; 0x2c
    6214:	8969      	ldrh	r1, [r5, #10]
    6216:	f002 fb78 	bl	890a <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    621a:	202d      	movs	r0, #45	; 0x2d
    621c:	8929      	ldrh	r1, [r5, #8]
    621e:	f002 fb74 	bl	890a <cc2400_set>

		if (do_hop)
    6222:	7ae3      	ldrb	r3, [r4, #11]
    6224:	b10b      	cbz	r3, 622a <bt_le_sync+0x3a2>
			hop();
    6226:	f7ff f927 	bl	5478 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    622a:	69e3      	ldr	r3, [r4, #28]
    622c:	4f1c      	ldr	r7, [pc, #112]	; (62a0 <bt_le_sync+0x418>)
    622e:	2b00      	cmp	r3, #0
    6230:	dd05      	ble.n	623e <bt_le_sync+0x3b6>
			le_jam();
    6232:	f7ff f8e5 	bl	5400 <le_jam>
			--le_jam_count;
    6236:	69fb      	ldr	r3, [r7, #28]
    6238:	3b01      	subs	r3, #1
    623a:	61fb      	str	r3, [r7, #28]
    623c:	e014      	b.n	6268 <bt_le_sync+0x3e0>
		} else {
			/* RX mode */
			dma_init_le();
    623e:	f001 fd0f 	bl	7c60 <dma_init_le>
			dio_ssp_start();
    6242:	f001 fd55 	bl	7cf0 <dio_ssp_start>

			if (restart_jamming) {
    6246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6248:	b13b      	cbz	r3, 625a <bt_le_sync+0x3d2>
				cc2400_rx_sync(rbit(le.access_address));
    624a:	6868      	ldr	r0, [r5, #4]
    624c:	f002 fa68 	bl	8720 <rbit>
    6250:	f7fe f8fe 	bl	4450 <cc2400_rx_sync>
				restart_jamming = 0;
    6254:	2300      	movs	r3, #0
    6256:	633b      	str	r3, [r7, #48]	; 0x30
    6258:	e006      	b.n	6268 <bt_le_sync+0x3e0>
			} else {
				// wait till we're in FSLOCK before strobing RX
				while (!(cc2400_status() & FS_LOCK));
    625a:	f002 fc27 	bl	8aac <cc2400_status>
    625e:	0741      	lsls	r1, r0, #29
    6260:	d5fb      	bpl.n	625a <bt_le_sync+0x3d2>
				cc2400_strobe(SRX);
    6262:	2062      	movs	r0, #98	; 0x62
    6264:	f002 fc29 	bl	8aba <cc2400_strobe>
			}
		}

		rx_tc = 0;
		rx_err = 0;
    6268:	4a0f      	ldr	r2, [pc, #60]	; (62a8 <bt_le_sync+0x420>)
				while (!(cc2400_status() & FS_LOCK));
				cc2400_strobe(SRX);
			}
		}

		rx_tc = 0;
    626a:	2300      	movs	r3, #0
    626c:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    6270:	6013      	str	r3, [r2, #0]
    6272:	e629      	b.n	5ec8 <bt_le_sync+0x40>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6274:	4b0d      	ldr	r3, [pc, #52]	; (62ac <bt_le_sync+0x424>)
    6276:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    627a:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    627c:	f7fe f99e 	bl	45bc <cc2400_idle>
	dio_ssp_stop();
    6280:	f001 fd5c 	bl	7d3c <dio_ssp_stop>
	cs_trigger_disable();
    6284:	f001 fc06 	bl	7a94 <cs_trigger_disable>
}
    6288:	b011      	add	sp, #68	; 0x44
    628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    628e:	bf00      	nop
    6290:	10001024 	.word	0x10001024
    6294:	40004008 	.word	0x40004008
    6298:	02faf080 	.word	0x02faf080
    629c:	2009c03c 	.word	0x2009c03c
    62a0:	10000e34 	.word	0x10000e34
    62a4:	1000044c 	.word	0x1000044c
    62a8:	1000151c 	.word	0x1000151c
    62ac:	e000e180 	.word	0xe000e180

000062b0 <bt_le_sync_cfo>:

//JWHUR cfo estimation tracking
void bt_le_sync_cfo(u8 active_mode) 
{
    62b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62b4:	b09d      	sub	sp, #116	; 0x74
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	u8 cfo_buf[DMA_SIZE] = {0, };
    62b6:	2100      	movs	r1, #0
	cs_trigger_disable();
}

//JWHUR cfo estimation tracking
void bt_le_sync_cfo(u8 active_mode) 
{
    62b8:	4607      	mov	r7, r0
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	u8 cfo_buf[DMA_SIZE] = {0, };
    62ba:	2232      	movs	r2, #50	; 0x32

	modulation = MOD_BT_LOW_ENERGY;
    62bc:	4da8      	ldr	r5, [pc, #672]	; (6560 <bt_le_sync_cfo+0x2b0>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    62be:	4ca9      	ldr	r4, [pc, #676]	; (6564 <bt_le_sync_cfo+0x2b4>)
void bt_le_sync_cfo(u8 active_mode) 
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;
	u8 cfo_buf[DMA_SIZE] = {0, };
    62c0:	a802      	add	r0, sp, #8
    62c2:	f7fd ffb5 	bl	4230 <memset>

	modulation = MOD_BT_LOW_ENERGY;
    62c6:	2301      	movs	r3, #1
    62c8:	702b      	strb	r3, [r5, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    62ca:	7623      	strb	r3, [r4, #24]

	ISER0 = ISER0_ISE_USB;
    62cc:	4ba6      	ldr	r3, [pc, #664]	; (6568 <bt_le_sync_cfo+0x2b8>)
    62ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	int8_t rssi;
	static int restart_jamming = 0;
	u8 cfo_buf[DMA_SIZE] = {0, };

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    62d2:	746f      	strb	r7, [r5, #17]

	le.link_state = LINK_LISTENING;

	ISER0 = ISER0_ISE_USB;
    62d4:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    62d6:	4ba5      	ldr	r3, [pc, #660]	; (656c <bt_le_sync_cfo+0x2bc>)
    62d8:	2210      	movs	r2, #16
    62da:	601a      	str	r2, [r3, #0]
	queue_init();
    62dc:	f001 fa8a 	bl	77f4 <queue_init>
	dio_ssp_init();
    62e0:	f002 fa82 	bl	87e8 <dio_ssp_init>
	dma_init_le();
    62e4:	f001 fcbc 	bl	7c60 <dma_init_le>
	dio_ssp_start();
    62e8:	f001 fd02 	bl	7cf0 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address));
    62ec:	6860      	ldr	r0, [r4, #4]
    62ee:	f002 fa17 	bl	8720 <rbit>
    62f2:	f7fe f8ad 	bl	4450 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    62f6:	7cab      	ldrb	r3, [r5, #18]
    62f8:	42bb      	cmp	r3, r7
    62fa:	f040 81cd 	bne.w	6698 <bt_le_sync_cfo+0x3e8>
		if (requested_channel != 0) {
    62fe:	4b98      	ldr	r3, [pc, #608]	; (6560 <bt_le_sync_cfo+0x2b0>)
    6300:	89db      	ldrh	r3, [r3, #14]
    6302:	b29b      	uxth	r3, r3
    6304:	b1cb      	cbz	r3, 633a <bt_le_sync_cfo+0x8a>
			cc2400_strobe(SRFOFF);
    6306:	2064      	movs	r0, #100	; 0x64
    6308:	f002 fbd7 	bl	8aba <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    630c:	f002 fbce 	bl	8aac <cc2400_status>
    6310:	0740      	lsls	r0, r0, #29
    6312:	d4fb      	bmi.n	630c <bt_le_sync_cfo+0x5c>
			cc2400_set(FSDIV, channel - 1);
    6314:	8821      	ldrh	r1, [r4, #0]
    6316:	2002      	movs	r0, #2
    6318:	b289      	uxth	r1, r1
    631a:	3901      	subs	r1, #1
    631c:	b289      	uxth	r1, r1
    631e:	f002 faf4 	bl	890a <cc2400_set>
			cc2400_strobe(SFSON);
    6322:	2061      	movs	r0, #97	; 0x61
    6324:	f002 fbc9 	bl	8aba <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6328:	f002 fbc0 	bl	8aac <cc2400_status>
    632c:	0741      	lsls	r1, r0, #29
    632e:	d5fb      	bpl.n	6328 <bt_le_sync_cfo+0x78>
			cc2400_strobe(SRX);
    6330:	2062      	movs	r0, #98	; 0x62
    6332:	f002 fbc2 	bl	8aba <cc2400_strobe>
			requested_channel = 0;
    6336:	2300      	movs	r3, #0
    6338:	81eb      	strh	r3, [r5, #14]
		}
		RXLED_CLR;
    633a:	4b8c      	ldr	r3, [pc, #560]	; (656c <bt_le_sync_cfo+0x2bc>)
    633c:	2210      	movs	r2, #16
    633e:	601a      	str	r2, [r3, #0]
		rssi_reset();
    6340:	f001 fae8 	bl	7914 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode) ;
    6344:	4b8a      	ldr	r3, [pc, #552]	; (6570 <bt_le_sync_cfo+0x2c0>)
    6346:	681a      	ldr	r2, [r3, #0]
    6348:	4699      	mov	r9, r3
    634a:	b942      	cbnz	r2, 635e <bt_le_sync_cfo+0xae>
    634c:	4b89      	ldr	r3, [pc, #548]	; (6574 <bt_le_sync_cfo+0x2c4>)
    634e:	681b      	ldr	r3, [r3, #0]
    6350:	b92b      	cbnz	r3, 635e <bt_le_sync_cfo+0xae>
    6352:	7aeb      	ldrb	r3, [r5, #11]
    6354:	b91b      	cbnz	r3, 635e <bt_le_sync_cfo+0xae>
    6356:	4b82      	ldr	r3, [pc, #520]	; (6560 <bt_le_sync_cfo+0x2b0>)
    6358:	7c9b      	ldrb	r3, [r3, #18]
    635a:	42bb      	cmp	r3, r7
    635c:	d0f2      	beq.n	6344 <bt_le_sync_cfo+0x94>
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    635e:	2006      	movs	r0, #6
    6360:	f002 faca 	bl	88f8 <cc2400_get>
		rssi_min = rssi_max = rssi;
    6364:	4b84      	ldr	r3, [pc, #528]	; (6578 <bt_le_sync_cfo+0x2c8>)
			requested_channel = 0;
		}
		RXLED_CLR;
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode) ;
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    6366:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;

		if (requested_mode != active_mode) {
    636a:	7caa      	ldrb	r2, [r5, #18]
		}
		RXLED_CLR;
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode) ;
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    636c:	7018      	strb	r0, [r3, #0]
    636e:	4b83      	ldr	r3, [pc, #524]	; (657c <bt_le_sync_cfo+0x2cc>)

		if (requested_mode != active_mode) {
    6370:	42ba      	cmp	r2, r7
		}
		RXLED_CLR;
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode) ;
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    6372:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    6374:	4b7a      	ldr	r3, [pc, #488]	; (6560 <bt_le_sync_cfo+0x2b0>)
    6376:	f040 818f 	bne.w	6698 <bt_le_sync_cfo+0x3e8>
			goto cleanup;
		}
		if (rx_err) {
    637a:	4e7e      	ldr	r6, [pc, #504]	; (6574 <bt_le_sync_cfo+0x2c4>)
    637c:	6832      	ldr	r2, [r6, #0]
    637e:	b11a      	cbz	r2, 6388 <bt_le_sync_cfo+0xd8>
			status |= DMA_ERROR;
    6380:	785a      	ldrb	r2, [r3, #1]
    6382:	f042 0202 	orr.w	r2, r2, #2
    6386:	705a      	strb	r2, [r3, #1]
		}
		if (do_hop)
    6388:	7aeb      	ldrb	r3, [r5, #11]
    638a:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    638e:	2b00      	cmp	r3, #0
    6390:	f040 80d6 	bne.w	6540 <bt_le_sync_cfo+0x290>
			goto rx_flush;
		if (!rx_tc)
    6394:	f8d9 3000 	ldr.w	r3, [r9]
    6398:	2b00      	cmp	r3, #0
    639a:	d0ac      	beq.n	62f6 <bt_le_sync_cfo+0x46>
			continue;
		
		uint32_t packet[48/4+1] = {0, };
    639c:	a80f      	add	r0, sp, #60	; 0x3c
    639e:	4641      	mov	r1, r8
    63a0:	2234      	movs	r2, #52	; 0x34
    63a2:	f7fd ff45 	bl	4230 <memset>
		uint32_t whiten_packet[48/4+1] = {0, };
		u8 *p = (u8 *)packet;

		//JWHUR buffering carrier frequency offset estimation
		for (i = 0; i < DMA_SIZE; i++) {
			cfo_buf[i] = cc2400_get_rev(FREQEST);
    63a6:	2007      	movs	r0, #7
    63a8:	f002 fabe 	bl	8928 <cc2400_get_rev>
    63ac:	ab02      	add	r3, sp, #8
    63ae:	f803 0008 	strb.w	r0, [r3, r8]
		uint32_t packet[48/4+1] = {0, };
		uint32_t whiten_packet[48/4+1] = {0, };
		u8 *p = (u8 *)packet;

		//JWHUR buffering carrier frequency offset estimation
		for (i = 0; i < DMA_SIZE; i++) {
    63b2:	f108 0801 	add.w	r8, r8, #1
    63b6:	f1b8 0f32 	cmp.w	r8, #50	; 0x32
    63ba:	d1f4      	bne.n	63a6 <bt_le_sync_cfo+0xf6>
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    63bc:	8820      	ldrh	r0, [r4, #0]
		//JWHUR buffering carrier frequency offset estimation
		for (i = 0; i < DMA_SIZE; i++) {
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
    63be:	6863      	ldr	r3, [r4, #4]
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    63c0:	b280      	uxth	r0, r0
    63c2:	3862      	subs	r0, #98	; 0x62
    63c4:	b2c0      	uxtb	r0, r0
		//JWHUR buffering carrier frequency offset estimation
		for (i = 0; i < DMA_SIZE; i++) {
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
    63c6:	930f      	str	r3, [sp, #60]	; 0x3c
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    63c8:	f001 f91a 	bl	7600 <btle_channel_index>
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    63cc:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 6590 <bt_le_sync_cfo+0x2e0>
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    63d0:	f04f 0a30 	mov.w	sl, #48	; 0x30
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    63d4:	f89b e000 	ldrb.w	lr, [fp]
					   | rxbuf1[i+1] << 16
    63d8:	f89b 8001 	ldrb.w	r8, [fp, #1]
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    63dc:	fb0a fa00 	mul.w	sl, sl, r0
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
    63e0:	f89b 1002 	ldrb.w	r1, [fp, #2]
		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    63e4:	ea4f 4808 	mov.w	r8, r8, lsl #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    63e8:	f89b 0003 	ldrb.w	r0, [fp, #3]
		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    63ec:	ea48 680e 	orr.w	r8, r8, lr, lsl #24
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    63f0:	4a63      	ldr	r2, [pc, #396]	; (6580 <bt_le_sync_cfo+0x2d0>)
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
    63f2:	ea48 0800 	orr.w	r8, r8, r0
					   | rxbuf1[i+3] << 0;
    63f6:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    63fa:	eb02 030a 	add.w	r3, r2, sl
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    63fe:	4640      	mov	r0, r8
			cfo_buf[i] = cc2400_get_rev(FREQEST);
		}

		packet[0] = le.access_address;
		
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6400:	9301      	str	r3, [sp, #4]
		for (i=0; i<4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6402:	9200      	str	r2, [sp, #0]
    6404:	f002 f98c 	bl	8720 <rbit>
    6408:	9a00      	ldr	r2, [sp, #0]
    640a:	f852 200a 	ldr.w	r2, [r2, sl]
    640e:	4050      	eors	r0, r2
    6410:	9010      	str	r0, [sp, #64]	; 0x40
			whiten_packet[i/4+1] = rbit(v);
    6412:	4640      	mov	r0, r8
    6414:	f002 f984 	bl	8720 <rbit>
		}

		unsigned len = (p[5] & 0x3f) + 2;
    6418:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    641c:	f002 0a3f 	and.w	sl, r2, #63	; 0x3f
    6420:	f10a 0802 	add.w	r8, sl, #2
		cfo_buf[DMA_SIZE - 1] = p[5];

		if (len > 39)
    6424:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
			packet[i/4+1] = rbit(v) ^ whit[i/4];
			whiten_packet[i/4+1] = rbit(v);
		}

		unsigned len = (p[5] & 0x3f) + 2;
		cfo_buf[DMA_SIZE - 1] = p[5];
    6428:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39

		if (len > 39)
    642c:	f200 8088 	bhi.w	6540 <bt_le_sync_cfo+0x290>
			goto rx_flush;

		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    6430:	f10a 0a08 	add.w	sl, sl, #8
    6434:	ea4f 029a 	mov.w	r2, sl, lsr #2
		if (total_transfers < 11) {
    6438:	2a0b      	cmp	r2, #11
    643a:	d00b      	beq.n	6454 <bt_le_sync_cfo+0x1a4>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0) ;
    643c:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    6440:	4a50      	ldr	r2, [pc, #320]	; (6584 <bt_le_sync_cfo+0x2d4>)
    6442:	6812      	ldr	r2, [r2, #0]
    6444:	429a      	cmp	r2, r3
    6446:	d209      	bcs.n	645c <bt_le_sync_cfo+0x1ac>
    6448:	6831      	ldr	r1, [r6, #0]
    644a:	2900      	cmp	r1, #0
    644c:	d0f8      	beq.n	6440 <bt_le_sync_cfo+0x190>
    644e:	e005      	b.n	645c <bt_le_sync_cfo+0x1ac>
		} else { while (DMACC0Config & DMACCxConfig_E && rx_err == 0) ;
    6450:	6833      	ldr	r3, [r6, #0]
    6452:	b91b      	cbnz	r3, 645c <bt_le_sync_cfo+0x1ac>
    6454:	4b4c      	ldr	r3, [pc, #304]	; (6588 <bt_le_sync_cfo+0x2d8>)
    6456:	681b      	ldr	r3, [r3, #0]
    6458:	07da      	lsls	r2, r3, #31
    645a:	d4f9      	bmi.n	6450 <bt_le_sync_cfo+0x1a0>
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    645c:	4b4b      	ldr	r3, [pc, #300]	; (658c <bt_le_sync_cfo+0x2dc>)
		cc2400_strobe(SFSON);
    645e:	2061      	movs	r0, #97	; 0x61
		if (total_transfers < 11) {
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0) ;
		} else { while (DMACC0Config & DMACCxConfig_E && rx_err == 0) ;
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6460:	681a      	ldr	r2, [r3, #0]
		cc2400_strobe(SFSON);

		for (i=4; i<44; i+=4) {
    6462:	2604      	movs	r6, #4
		if (total_transfers < 11) {
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0) ;
		} else { while (DMACC0Config & DMACCxConfig_E && rx_err == 0) ;
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6464:	f022 0201 	bic.w	r2, r2, #1
    6468:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SFSON);
    646a:	f002 fb26 	bl	8aba <cc2400_strobe>

		for (i=4; i<44; i+=4) {
			uint32_t v = rxbuf1[i+0] << 24
    646e:	4b48      	ldr	r3, [pc, #288]	; (6590 <bt_le_sync_cfo+0x2e0>)
    6470:	1c72      	adds	r2, r6, #1
    6472:	5d98      	ldrb	r0, [r3, r6]
    6474:	f106 0e03 	add.w	lr, r6, #3
					   | rxbuf1[i+1] << 16
    6478:	5c99      	ldrb	r1, [r3, r2]
    647a:	1cb2      	adds	r2, r6, #2
					   | rxbuf1[i+2] << 8
    647c:	5c9a      	ldrb	r2, [r3, r2]
					   | rxbuf1[i+3] << 0;
    647e:	f813 300e 	ldrb.w	r3, [r3, lr]
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		cc2400_strobe(SFSON);

		for (i=4; i<44; i+=4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    6482:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
					   | rxbuf1[i+2] << 8
    6486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
					   | rxbuf1[i+3] << 0;
    648a:	ea43 2b02 	orr.w	fp, r3, r2, lsl #8
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    648e:	4658      	mov	r0, fp
    6490:	10b2      	asrs	r2, r6, #2
    6492:	9200      	str	r2, [sp, #0]
    6494:	f002 f944 	bl	8720 <rbit>
    6498:	9a00      	ldr	r2, [sp, #0]
    649a:	ab1c      	add	r3, sp, #112	; 0x70
    649c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    64a0:	9b01      	ldr	r3, [sp, #4]
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		cc2400_strobe(SFSON);

		for (i=4; i<44; i+=4) {
    64a2:	3604      	adds	r6, #4
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    64a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    64a8:	4050      	eors	r0, r2
    64aa:	f841 0c30 	str.w	r0, [r1, #-48]
			whiten_packet[i/4+1] = rbit(v);
    64ae:	4658      	mov	r0, fp
    64b0:	f002 f936 	bl	8720 <rbit>
		}

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		cc2400_strobe(SFSON);

		for (i=4; i<44; i+=4) {
    64b4:	2e2c      	cmp	r6, #44	; 0x2c
    64b6:	d1da      	bne.n	646e <bt_le_sync_cfo+0x1be>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
			whiten_packet[i/4+1] = rbit(v);
		}

		if (le.crc_verify) {
    64b8:	6963      	ldr	r3, [r4, #20]
    64ba:	b973      	cbnz	r3, 64da <bt_le_sync_cfo+0x22a>
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc)
				goto rx_flush;
		}

		RXLED_SET;
    64bc:	4b35      	ldr	r3, [pc, #212]	; (6594 <bt_le_sync_cfo+0x2e4>)
    64be:	2210      	movs	r2, #16
    64c0:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    64c2:	a80f      	add	r0, sp, #60	; 0x3c
    64c4:	69ab      	ldr	r3, [r5, #24]
    64c6:	4798      	blx	r3

		ICER0 = ICER0_ICE_USB;
    64c8:	4b33      	ldr	r3, [pc, #204]	; (6598 <bt_le_sync_cfo+0x2e8>)
    64ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    64ce:	601a      	str	r2, [r3, #0]
		if (p[10] == 0x55 && p[11] == 0xec) {
    64d0:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    64d4:	2b55      	cmp	r3, #85	; 0x55
    64d6:	d124      	bne.n	6522 <bt_le_sync_cfo+0x272>
    64d8:	e017      	b.n	650a <bt_le_sync_cfo+0x25a>
			packet[i/4+1] = rbit(v) ^ whit[i/4];
			whiten_packet[i/4+1] = rbit(v);
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    64da:	4b22      	ldr	r3, [pc, #136]	; (6564 <bt_le_sync_cfo+0x2b4>)
    64dc:	a910      	add	r1, sp, #64	; 0x40
    64de:	6918      	ldr	r0, [r3, #16]
    64e0:	4642      	mov	r2, r8
    64e2:	f001 f90d 	bl	7700 <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    64e6:	ab1c      	add	r3, sp, #112	; 0x70
    64e8:	4453      	add	r3, sl
    64ea:	f813 2c34 	ldrb.w	r2, [r3, #-52]
						 | (p[4+len+1] << 8)
    64ee:	ab1c      	add	r3, sp, #112	; 0x70
    64f0:	4443      	add	r3, r8
    64f2:	f813 1c2f 	ldrb.w	r1, [r3, #-47]
    64f6:	0209      	lsls	r1, r1, #8
    64f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
						 | (p[4+len+0] << 0);
    64fc:	f813 2c30 	ldrb.w	r2, [r3, #-48]
    6500:	ea41 0302 	orr.w	r3, r1, r2
			if (calc_crc != wire_crc)
    6504:	4298      	cmp	r0, r3
    6506:	d11b      	bne.n	6540 <bt_le_sync_cfo+0x290>
    6508:	e7d8      	b.n	64bc <bt_le_sync_cfo+0x20c>

		RXLED_SET;
		packet_cb((uint8_t *)packet);

		ICER0 = ICER0_ICE_USB;
		if (p[10] == 0x55 && p[11] == 0xec) {
    650a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    650e:	2bec      	cmp	r3, #236	; 0xec
    6510:	d107      	bne.n	6522 <bt_le_sync_cfo+0x272>
			enqueue(LE_PACKET, (uint8_t *)packet);
    6512:	a90f      	add	r1, sp, #60	; 0x3c
    6514:	2001      	movs	r0, #1
    6516:	f7fd fff7 	bl	4508 <enqueue>
			enqueue(CFO_TRACK, (uint8_t *)cfo_buf);
    651a:	2007      	movs	r0, #7
    651c:	a902      	add	r1, sp, #8
    651e:	f7fd fff3 	bl	4508 <enqueue>
			//enqueue(MESSAGE, (uint8_t *)whiten_packet);
		}
		ISER0 = ISER0_ISE_USB;
    6522:	4b11      	ldr	r3, [pc, #68]	; (6568 <bt_le_sync_cfo+0x2b8>)
    6524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6528:	601a      	str	r2, [r3, #0]

		le.last_packet = CLK100NS;
    652a:	4b1c      	ldr	r3, [pc, #112]	; (659c <bt_le_sync_cfo+0x2ec>)
    652c:	4a1c      	ldr	r2, [pc, #112]	; (65a0 <bt_le_sync_cfo+0x2f0>)
    652e:	681b      	ldr	r3, [r3, #0]
    6530:	6812      	ldr	r2, [r2, #0]
    6532:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6536:	f640 4135 	movw	r1, #3125	; 0xc35
    653a:	fb01 2303 	mla	r3, r1, r3, r2
    653e:	6463      	str	r3, [r4, #68]	; 0x44

	rx_flush:
		cc2400_strobe(SFSON);
    6540:	2061      	movs	r0, #97	; 0x61
    6542:	f002 faba 	bl	8aba <cc2400_strobe>
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6546:	4b11      	ldr	r3, [pc, #68]	; (658c <bt_le_sync_cfo+0x2dc>)
    6548:	681a      	ldr	r2, [r3, #0]
    654a:	f022 0201 	bic.w	r2, r2, #1
    654e:	601a      	str	r2, [r3, #0]
		while (SSP1SR & SSPSR_RNE) {
    6550:	4b14      	ldr	r3, [pc, #80]	; (65a4 <bt_le_sync_cfo+0x2f4>)
    6552:	681b      	ldr	r3, [r3, #0]
    6554:	075b      	lsls	r3, r3, #29
    6556:	d529      	bpl.n	65ac <bt_le_sync_cfo+0x2fc>
			u8 tmp = (u8) DIO_SSP_DR;
    6558:	4b13      	ldr	r3, [pc, #76]	; (65a8 <bt_le_sync_cfo+0x2f8>)
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	e7f8      	b.n	6550 <bt_le_sync_cfo+0x2a0>
    655e:	bf00      	nop
    6560:	10000e34 	.word	0x10000e34
    6564:	1000044c 	.word	0x1000044c
    6568:	e000e100 	.word	0xe000e100
    656c:	2009c03c 	.word	0x2009c03c
    6570:	10001004 	.word	0x10001004
    6574:	1000151c 	.word	0x1000151c
    6578:	10001008 	.word	0x10001008
    657c:	1000100a 	.word	0x1000100a
    6580:	0000a308 	.word	0x0000a308
    6584:	50004104 	.word	0x50004104
    6588:	50004110 	.word	0x50004110
    658c:	40030024 	.word	0x40030024
    6590:	100014e9 	.word	0x100014e9
    6594:	2009c038 	.word	0x2009c038
    6598:	e000e180 	.word	0xe000e180
    659c:	10001024 	.word	0x10001024
    65a0:	40004008 	.word	0x40004008
    65a4:	4003000c 	.word	0x4003000c
    65a8:	40030008 	.word	0x40030008
		}
		u32 now = CLK100NS;
    65ac:	4b41      	ldr	r3, [pc, #260]	; (66b4 <bt_le_sync_cfo+0x404>)
    65ae:	4a42      	ldr	r2, [pc, #264]	; (66b8 <bt_le_sync_cfo+0x408>)
    65b0:	681b      	ldr	r3, [r3, #0]
    65b2:	6812      	ldr	r2, [r2, #0]
    65b4:	f640 4135 	movw	r1, #3125	; 0xc35
    65b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    65bc:	fb01 2303 	mla	r3, r1, r3, r2
		if (now <le.last_packet)
    65c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
    65c2:	7e21      	ldrb	r1, [r4, #24]
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
			u8 tmp = (u8) DIO_SSP_DR;
		}
		u32 now = CLK100NS;
		if (now <le.last_packet)
    65c4:	4293      	cmp	r3, r2
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
    65c6:	f1a1 0102 	sub.w	r1, r1, #2
		while (SSP1SR & SSPSR_RNE) {
			u8 tmp = (u8) DIO_SSP_DR;
		}
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
    65ca:	bf38      	it	cc
    65cc:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
    65d0:	b2c9      	uxtb	r1, r1
		while (SSP1SR & SSPSR_RNE) {
			u8 tmp = (u8) DIO_SSP_DR;
		}
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
    65d2:	bf38      	it	cc
    65d4:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
    65d8:	2901      	cmp	r1, #1
    65da:	d803      	bhi.n	65e4 <bt_le_sync_cfo+0x334>
    65dc:	4937      	ldr	r1, [pc, #220]	; (66bc <bt_le_sync_cfo+0x40c>)
    65de:	1a9b      	subs	r3, r3, r2
    65e0:	428b      	cmp	r3, r1
    65e2:	d802      	bhi.n	65ea <bt_le_sync_cfo+0x33a>
    65e4:	69eb      	ldr	r3, [r5, #28]
    65e6:	2b01      	cmp	r3, #1
    65e8:	d125      	bne.n	6636 <bt_le_sync_cfo+0x386>
			reset_le();
    65ea:	f7ff fa03 	bl	59f4 <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    65ee:	4934      	ldr	r1, [pc, #208]	; (66c0 <bt_le_sync_cfo+0x410>)
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
			reset_le();
			le_jam_count = 0;
    65f0:	2300      	movs	r3, #0
			TXLED_CLR;
    65f2:	f44f 7080 	mov.w	r0, #256	; 0x100
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
			reset_le();
			le_jam_count = 0;
    65f6:	61eb      	str	r3, [r5, #28]
			TXLED_CLR;
    65f8:	6008      	str	r0, [r1, #0]
			if (jam_mode == JAM_ONCE) {
    65fa:	7ce9      	ldrb	r1, [r5, #19]
		u32 now = CLK100NS;
		if (now <le.last_packet)
			now += 3276800000;
		if ( ((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING) && (now - le.last_packet > 50000000)) || (le_jam_count == 1) ) {
			reset_le();
			le_jam_count = 0;
    65fc:	4a31      	ldr	r2, [pc, #196]	; (66c4 <bt_le_sync_cfo+0x414>)
			TXLED_CLR;
			if (jam_mode == JAM_ONCE) {
    65fe:	2901      	cmp	r1, #1
    6600:	d102      	bne.n	6608 <bt_le_sync_cfo+0x358>
				jam_mode = JAM_NONE;
    6602:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    6604:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    6606:	e047      	b.n	6698 <bt_le_sync_cfo+0x3e8>
			}
			le.link_state = LINK_LISTENING;
    6608:	2301      	movs	r3, #1
			cc2400_strobe(SRFOFF);
    660a:	2064      	movs	r0, #100	; 0x64
			if (jam_mode == JAM_ONCE) {
				jam_mode = JAM_NONE;
				requested_mode = MODE_IDLE;
				goto cleanup;
			}
			le.link_state = LINK_LISTENING;
    660c:	7623      	strb	r3, [r4, #24]
			cc2400_strobe(SRFOFF);
    660e:	f002 fa54 	bl	8aba <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6612:	f002 fa4b 	bl	8aac <cc2400_status>
    6616:	0746      	lsls	r6, r0, #29
    6618:	d4fb      	bmi.n	6612 <bt_le_sync_cfo+0x362>

			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    661a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    661e:	b29b      	uxth	r3, r3
    6620:	b123      	cbz	r3, 662c <bt_le_sync_cfo+0x37c>
    6622:	4b29      	ldr	r3, [pc, #164]	; (66c8 <bt_le_sync_cfo+0x418>)
    6624:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    6628:	b29b      	uxth	r3, r3
    662a:	e001      	b.n	6630 <bt_le_sync_cfo+0x380>
    662c:	f640 1362 	movw	r3, #2402	; 0x962
    6630:	8023      	strh	r3, [r4, #0]
			restart_jamming = 1;
    6632:	2301      	movs	r3, #1
    6634:	636b      	str	r3, [r5, #52]	; 0x34
		}

		cc2400_set(SYNCL, le.syncl);
    6636:	202c      	movs	r0, #44	; 0x2c
    6638:	8961      	ldrh	r1, [r4, #10]
    663a:	f002 f966 	bl	890a <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    663e:	202d      	movs	r0, #45	; 0x2d
    6640:	8921      	ldrh	r1, [r4, #8]
    6642:	f002 f962 	bl	890a <cc2400_set>

		if (do_hop)
    6646:	7aeb      	ldrb	r3, [r5, #11]
    6648:	b10b      	cbz	r3, 664e <bt_le_sync_cfo+0x39e>
			hop();
    664a:	f7fe ff15 	bl	5478 <hop>
		if (le_jam_count > 0) {
    664e:	69eb      	ldr	r3, [r5, #28]
    6650:	4e1c      	ldr	r6, [pc, #112]	; (66c4 <bt_le_sync_cfo+0x414>)
    6652:	2b00      	cmp	r3, #0
    6654:	dd05      	ble.n	6662 <bt_le_sync_cfo+0x3b2>
			le_jam();
    6656:	f7fe fed3 	bl	5400 <le_jam>
			--le_jam_count;
    665a:	69f3      	ldr	r3, [r6, #28]
    665c:	3b01      	subs	r3, #1
    665e:	61f3      	str	r3, [r6, #28]
    6660:	e014      	b.n	668c <bt_le_sync_cfo+0x3dc>
		} else {
			dma_init_le();
    6662:	f001 fafd 	bl	7c60 <dma_init_le>
			dio_ssp_start();
    6666:	f001 fb43 	bl	7cf0 <dio_ssp_start>

			if (restart_jamming) {
    666a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    666c:	b13b      	cbz	r3, 667e <bt_le_sync_cfo+0x3ce>
				cc2400_rx_sync(rbit(le.access_address));
    666e:	6860      	ldr	r0, [r4, #4]
    6670:	f002 f856 	bl	8720 <rbit>
    6674:	f7fd feec 	bl	4450 <cc2400_rx_sync>
				restart_jamming = 0;
    6678:	2300      	movs	r3, #0
    667a:	6373      	str	r3, [r6, #52]	; 0x34
    667c:	e006      	b.n	668c <bt_le_sync_cfo+0x3dc>
			} else {
				while (!(cc2400_status() & FS_LOCK));
    667e:	f002 fa15 	bl	8aac <cc2400_status>
    6682:	0740      	lsls	r0, r0, #29
    6684:	d5fb      	bpl.n	667e <bt_le_sync_cfo+0x3ce>
				cc2400_strobe(SRX);
    6686:	2062      	movs	r0, #98	; 0x62
    6688:	f002 fa17 	bl	8aba <cc2400_strobe>
			}
		}
		rx_tc = 0;
		rx_err = 0;
    668c:	4a0f      	ldr	r2, [pc, #60]	; (66cc <bt_le_sync_cfo+0x41c>)
			} else {
				while (!(cc2400_status() & FS_LOCK));
				cc2400_strobe(SRX);
			}
		}
		rx_tc = 0;
    668e:	2300      	movs	r3, #0
    6690:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    6694:	6013      	str	r3, [r2, #0]
    6696:	e62e      	b.n	62f6 <bt_le_sync_cfo+0x46>

	}
	goto cleanup;

cleanup:
	ICER0 = ICER0_ICE_USB;
    6698:	4b0d      	ldr	r3, [pc, #52]	; (66d0 <bt_le_sync_cfo+0x420>)
    669a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    669e:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    66a0:	f7fd ff8c 	bl	45bc <cc2400_idle>
	dio_ssp_stop ();
    66a4:	f001 fb4a 	bl	7d3c <dio_ssp_stop>
	cs_trigger_disable();
    66a8:	f001 f9f4 	bl	7a94 <cs_trigger_disable>
}
    66ac:	b01d      	add	sp, #116	; 0x74
    66ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66b2:	bf00      	nop
    66b4:	10001024 	.word	0x10001024
    66b8:	40004008 	.word	0x40004008
    66bc:	02faf080 	.word	0x02faf080
    66c0:	2009c03c 	.word	0x2009c03c
    66c4:	10000e34 	.word	0x10000e34
    66c8:	1000044c 	.word	0x1000044c
    66cc:	1000151c 	.word	0x1000151c
    66d0:	e000e180 	.word	0xe000e180

000066d4 <bt_follow_le>:
			do_hop = 1;
		}
	}
}

void bt_follow_le() {
    66d4:	b510      	push	{r4, lr}
	reset_le();
    66d6:	f7ff f98d 	bl	59f4 <reset_le>
	packet_cb = connection_follow_cb;
    66da:	4c04      	ldr	r4, [pc, #16]	; (66ec <bt_follow_le+0x18>)
    66dc:	4b04      	ldr	r3, [pc, #16]	; (66f0 <bt_follow_le+0x1c>)
	bt_le_sync(MODE_BT_FOLLOW_LE);
    66de:	2009      	movs	r0, #9
	}
}

void bt_follow_le() {
	reset_le();
	packet_cb = connection_follow_cb;
    66e0:	61a3      	str	r3, [r4, #24]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    66e2:	f7ff fbd1 	bl	5e88 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    66e6:	2300      	movs	r3, #0
    66e8:	7463      	strb	r3, [r4, #17]
    66ea:	bd10      	pop	{r4, pc}
    66ec:	10000e34 	.word	0x10000e34
    66f0:	0000476d 	.word	0x0000476d

000066f4 <bt_tracking_le>:
}

//JWHUR rssi estimation tracking
void bt_tracking_le(uint8_t tracking_mode) {
    66f4:	b538      	push	{r3, r4, r5, lr}
    66f6:	4604      	mov	r4, r0
	reset_le();
    66f8:	f7ff f97c 	bl	59f4 <reset_le>
	packet_cb = connection_follow_cb;
    66fc:	4b08      	ldr	r3, [pc, #32]	; (6720 <bt_tracking_le+0x2c>)
    66fe:	4a09      	ldr	r2, [pc, #36]	; (6724 <bt_tracking_le+0x30>)
	if (tracking_mode == MODE_BT_CFO_LE) bt_le_sync_cfo(MODE_BT_CFO_LE);
    6700:	2c11      	cmp	r4, #17
}

//JWHUR rssi estimation tracking
void bt_tracking_le(uint8_t tracking_mode) {
	reset_le();
	packet_cb = connection_follow_cb;
    6702:	619a      	str	r2, [r3, #24]
    6704:	461d      	mov	r5, r3
	if (tracking_mode == MODE_BT_CFO_LE) bt_le_sync_cfo(MODE_BT_CFO_LE);
    6706:	d103      	bne.n	6710 <bt_tracking_le+0x1c>
    6708:	4620      	mov	r0, r4
    670a:	f7ff fdd1 	bl	62b0 <bt_le_sync_cfo>
    670e:	e004      	b.n	671a <bt_tracking_le+0x26>
	if (tracking_mode == MODE_BT_RSSI_LE) bt_le_sync_rssi(MODE_BT_RSSI_LE);
    6710:	2c12      	cmp	r4, #18
    6712:	d102      	bne.n	671a <bt_tracking_le+0x26>
    6714:	4620      	mov	r0, r4
    6716:	f7ff fa99 	bl	5c4c <bt_le_sync_rssi>
	mode = MODE_IDLE;
    671a:	2300      	movs	r3, #0
    671c:	746b      	strb	r3, [r5, #17]
    671e:	bd38      	pop	{r3, r4, r5, pc}
    6720:	10000e34 	.word	0x10000e34
    6724:	0000476d 	.word	0x0000476d

00006728 <le_promisc_state>:
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    6728:	b570      	push	{r4, r5, r6, lr}
    672a:	b08e      	sub	sp, #56	; 0x38
    672c:	4606      	mov	r6, r0
    672e:	460d      	mov	r5, r1
    6730:	4614      	mov	r4, r2
	u8 buf[50] = { 0, };
    6732:	a801      	add	r0, sp, #4
    6734:	2100      	movs	r1, #0
    6736:	2232      	movs	r2, #50	; 0x32
    6738:	f7fd fd7a 	bl	4230 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    673c:	4629      	mov	r1, r5
    673e:	2c31      	cmp	r4, #49	; 0x31
    6740:	bf34      	ite	cc
    6742:	4622      	movcc	r2, r4
    6744:	2231      	movcs	r2, #49	; 0x31
    6746:	f10d 0005 	add.w	r0, sp, #5
void le_promisc_state(u8 type, void *data, unsigned len) {
	u8 buf[50] = { 0, };
	if (len > 49)
		len = 49;

	buf[0] = type;
    674a:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    674e:	f003 fb73 	bl	9e38 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    6752:	a901      	add	r1, sp, #4
    6754:	2005      	movs	r0, #5
    6756:	f7fd fed7 	bl	4508 <enqueue>
}
    675a:	b00e      	add	sp, #56	; 0x38
    675c:	bd70      	pop	{r4, r5, r6, pc}
    675e:	0000      	movs	r0, r0

00006760 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    6760:	b538      	push	{r3, r4, r5, lr}
	static u32 first_ts = 0;
	if (channel == 2404) {
    6762:	4a31      	ldr	r2, [pc, #196]	; (6828 <promisc_recover_hop_increment+0xc8>)
    6764:	f640 1364 	movw	r3, #2404	; 0x964
    6768:	8811      	ldrh	r1, [r2, #0]
    676a:	4c30      	ldr	r4, [pc, #192]	; (682c <promisc_recover_hop_increment+0xcc>)
    676c:	b289      	uxth	r1, r1
    676e:	4299      	cmp	r1, r3
    6770:	d10d      	bne.n	678e <promisc_recover_hop_increment+0x2e>
		first_ts = CLK100NS;
    6772:	4b2f      	ldr	r3, [pc, #188]	; (6830 <promisc_recover_hop_increment+0xd0>)
    6774:	4a2f      	ldr	r2, [pc, #188]	; (6834 <promisc_recover_hop_increment+0xd4>)
    6776:	681b      	ldr	r3, [r3, #0]
    6778:	6812      	ldr	r2, [r2, #0]
    677a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    677e:	f640 4135 	movw	r1, #3125	; 0xc35
    6782:	fb01 2303 	mla	r3, r1, r3, r2
    6786:	63a3      	str	r3, [r4, #56]	; 0x38
		hop_direct_channel = 2406;
    6788:	f640 1366 	movw	r3, #2406	; 0x966
    678c:	e048      	b.n	6820 <promisc_recover_hop_increment+0xc0>
		do_hop = 1;
	} else if (channel == 2406) {
    678e:	8810      	ldrh	r0, [r2, #0]
    6790:	f640 1166 	movw	r1, #2406	; 0x966
    6794:	b280      	uxth	r0, r0
    6796:	4288      	cmp	r0, r1
    6798:	d142      	bne.n	6820 <promisc_recover_hop_increment+0xc0>
		u32 second_ts = CLK100NS;
    679a:	4b25      	ldr	r3, [pc, #148]	; (6830 <promisc_recover_hop_increment+0xd0>)
    679c:	4925      	ldr	r1, [pc, #148]	; (6834 <promisc_recover_hop_increment+0xd4>)
    679e:	681b      	ldr	r3, [r3, #0]
    67a0:	6809      	ldr	r1, [r1, #0]
    67a2:	f640 4035 	movw	r0, #3125	; 0xc35
    67a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    67aa:	fb00 1303 	mla	r3, r0, r3, r1
		if (second_ts < first_ts)
    67ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    67b0:	8c52      	ldrh	r2, [r2, #34]	; 0x22
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
    67b2:	4283      	cmp	r3, r0
			second_ts += 3276800000; // handle rollover
    67b4:	bf3c      	itt	cc
    67b6:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    67ba:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    67be:	1a1b      	subs	r3, r3, r0
    67c0:	f243 05d4 	movw	r5, #12500	; 0x30d4
    67c4:	f641 006a 	movw	r0, #6250	; 0x186a
    67c8:	fb00 3302 	mla	r3, r0, r2, r3
    67cc:	4355      	muls	r5, r2
    67ce:	fbb3 f3f5 	udiv	r3, r3, r5
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    67d2:	2b24      	cmp	r3, #36	; 0x24
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    67d4:	4914      	ldr	r1, [pc, #80]	; (6828 <promisc_recover_hop_increment+0xc8>)
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    67d6:	d821      	bhi.n	681c <promisc_recover_hop_increment+0xbc>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    67d8:	4817      	ldr	r0, [pc, #92]	; (6838 <promisc_recover_hop_increment+0xd8>)
			le.interval_timer = le.conn_interval / 2;
    67da:	0852      	lsrs	r2, r2, #1
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    67dc:	4403      	add	r3, r0
    67de:	f893 0870 	ldrb.w	r0, [r3, #2160]	; 0x870
			le.interval_timer = le.conn_interval / 2;
    67e2:	840a      	strh	r2, [r1, #32]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    67e4:	7688      	strb	r0, [r1, #26]
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    67e6:	2225      	movs	r2, #37	; 0x25
    67e8:	3001      	adds	r0, #1
    67ea:	fb90 f5f2 	sdiv	r5, r0, r2
    67ee:	fb02 0215 	mls	r2, r2, r5, r0
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    67f2:	2300      	movs	r3, #0
    67f4:	848b      	strh	r3, [r1, #36]	; 0x24
			le.conn_epoch = 0;
    67f6:	61cb      	str	r3, [r1, #28]
			do_hop = 0;
    67f8:	72e3      	strb	r3, [r4, #11]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
    67fa:	2003      	movs	r0, #3
			le.crc_verify = 0;
    67fc:	614b      	str	r3, [r1, #20]
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    67fe:	4b0f      	ldr	r3, [pc, #60]	; (683c <promisc_recover_hop_increment+0xdc>)
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    6800:	764a      	strb	r2, [r1, #25]
			le.link_state = LINK_CONNECTED;
    6802:	7608      	strb	r0, [r1, #24]
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    6804:	2201      	movs	r2, #1
    6806:	311a      	adds	r1, #26
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    6808:	61a3      	str	r3, [r4, #24]
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
    680a:	72a0      	strb	r0, [r4, #10]
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    680c:	f7ff ff8c 	bl	6728 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    6810:	7ce3      	ldrb	r3, [r4, #19]
    6812:	b143      	cbz	r3, 6826 <promisc_recover_hop_increment+0xc6>
				le_jam_count = JAM_COUNT_DEFAULT;
    6814:	4b05      	ldr	r3, [pc, #20]	; (682c <promisc_recover_hop_increment+0xcc>)
    6816:	2228      	movs	r2, #40	; 0x28
    6818:	61da      	str	r2, [r3, #28]
    681a:	bd38      	pop	{r3, r4, r5, pc}

			return;
		}
		hop_direct_channel = 2404;
    681c:	f640 1364 	movw	r3, #2404	; 0x964
		do_hop = 1;
	}
	else {
		hop_direct_channel = 2404;
    6820:	81a3      	strh	r3, [r4, #12]
		do_hop = 1;
    6822:	2301      	movs	r3, #1
    6824:	72e3      	strb	r3, [r4, #11]
    6826:	bd38      	pop	{r3, r4, r5, pc}
    6828:	1000044c 	.word	0x1000044c
    682c:	10000e34 	.word	0x10000e34
    6830:	10001024 	.word	0x10001024
    6834:	40004008 	.word	0x40004008
    6838:	0000a218 	.word	0x0000a218
    683c:	0000476d 	.word	0x0000476d

00006840 <promisc_recover_hop_interval>:
	}
}

void promisc_recover_hop_interval(u8 *packet) {
    6840:	b538      	push	{r3, r4, r5, lr}
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    6842:	4b25      	ldr	r3, [pc, #148]	; (68d8 <promisc_recover_hop_interval+0x98>)
    6844:	f640 4235 	movw	r2, #3125	; 0xc35
    6848:	681c      	ldr	r4, [r3, #0]
    684a:	4b24      	ldr	r3, [pc, #144]	; (68dc <promisc_recover_hop_interval+0x9c>)
    684c:	f3c4 0413 	ubfx	r4, r4, #0, #20
    6850:	681b      	ldr	r3, [r3, #0]
	if (cur_clk < prev_clk)
    6852:	4d23      	ldr	r5, [pc, #140]	; (68e0 <promisc_recover_hop_interval+0xa0>)
}

void promisc_recover_hop_interval(u8 *packet) {
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    6854:	fb02 3404 	mla	r4, r2, r4, r3
	if (cur_clk < prev_clk)
    6858:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    685a:	429c      	cmp	r4, r3
    685c:	d205      	bcs.n	686a <promisc_recover_hop_interval+0x2a>
		cur_clk += 3267800000; // handle rollover
    685e:	f104 4443 	add.w	r4, r4, #3271557120	; 0xc3000000
    6862:	f5a4 1465 	sub.w	r4, r4, #3751936	; 0x394000
    6866:	f5a4 54a2 	sub.w	r4, r4, #5184	; 0x1440
	u32 clk_diff = cur_clk - prev_clk;
    686a:	1ae3      	subs	r3, r4, r3
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    686c:	f246 12a7 	movw	r2, #24999	; 0x61a7
    6870:	4293      	cmp	r3, r2
    6872:	d930      	bls.n	68d6 <promisc_recover_hop_interval+0x96>
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    6874:	4a1b      	ldr	r2, [pc, #108]	; (68e4 <promisc_recover_hop_interval+0xa4>)
    6876:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    687a:	428b      	cmp	r3, r1
		le_promisc.smallest_hop_interval = clk_diff;
    687c:	bf38      	it	cc
    687e:	f8c2 3100 	strcc.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6882:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    6886:	4918      	ldr	r1, [pc, #96]	; (68e8 <promisc_recover_hop_interval+0xa8>)
    6888:	f502 3261 	add.w	r2, r2, #230400	; 0x38400
    688c:	f202 3252 	addw	r2, r2, #850	; 0x352
    6890:	fbb2 f2f1 	udiv	r2, r2, r1

	if (le.conn_interval == obsv_hop_interval) {
    6894:	4915      	ldr	r1, [pc, #84]	; (68ec <promisc_recover_hop_interval+0xac>)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6896:	b292      	uxth	r2, r2

	if (le.conn_interval == obsv_hop_interval) {
    6898:	8c48      	ldrh	r0, [r1, #34]	; 0x22
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    689a:	4b12      	ldr	r3, [pc, #72]	; (68e4 <promisc_recover_hop_interval+0xa4>)

	if (le.conn_interval == obsv_hop_interval) {
    689c:	4290      	cmp	r0, r2
    689e:	d115      	bne.n	68cc <promisc_recover_hop_interval+0x8c>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    68a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    68a4:	3201      	adds	r2, #1
		if (le_promisc.consec_intervals == 5) {
    68a6:	2a05      	cmp	r2, #5

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    68a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    68ac:	d112      	bne.n	68d4 <promisc_recover_hop_interval+0x94>
			packet_cb = promisc_recover_hop_increment;
    68ae:	4b10      	ldr	r3, [pc, #64]	; (68f0 <promisc_recover_hop_interval+0xb0>)
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    68b0:	2002      	movs	r0, #2

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
    68b2:	61ab      	str	r3, [r5, #24]
			hop_direct_channel = 2404;
    68b4:	f640 1364 	movw	r3, #2404	; 0x964
    68b8:	81ab      	strh	r3, [r5, #12]
			hop_mode = HOP_DIRECT;
    68ba:	2304      	movs	r3, #4
    68bc:	72ab      	strb	r3, [r5, #10]
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    68be:	3122      	adds	r1, #34	; 0x22
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    68c0:	2301      	movs	r3, #1
			le_promisc_state(2, &le.conn_interval, 2);
    68c2:	4602      	mov	r2, r0
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    68c4:	72eb      	strb	r3, [r5, #11]
			le_promisc_state(2, &le.conn_interval, 2);
    68c6:	f7ff ff2f 	bl	6728 <le_promisc_state>
    68ca:	e003      	b.n	68d4 <promisc_recover_hop_interval+0x94>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    68cc:	844a      	strh	r2, [r1, #34]	; 0x22
		le_promisc.consec_intervals = 0;
    68ce:	2200      	movs	r2, #0
    68d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    68d4:	63ec      	str	r4, [r5, #60]	; 0x3c
    68d6:	bd38      	pop	{r3, r4, r5, pc}
    68d8:	10001024 	.word	0x10001024
    68dc:	40004008 	.word	0x40004008
    68e0:	10000e34 	.word	0x10000e34
    68e4:	10001068 	.word	0x10001068
    68e8:	00070ea4 	.word	0x00070ea4
    68ec:	1000044c 	.word	0x1000044c
    68f0:	00006761 	.word	0x00006761

000068f4 <promisc_follow_cb>:
}

void promisc_follow_cb(u8 *packet) {
    68f4:	b538      	push	{r3, r4, r5, lr}
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    68f6:	4c18      	ldr	r4, [pc, #96]	; (6958 <promisc_follow_cb+0x64>)
	}

	prev_clk = cur_clk;
}

void promisc_follow_cb(u8 *packet) {
    68f8:	4601      	mov	r1, r0
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    68fa:	6963      	ldr	r3, [r4, #20]
    68fc:	bb53      	cbnz	r3, 6954 <promisc_follow_cb+0x60>
    68fe:	7903      	ldrb	r3, [r0, #4]
    6900:	2b01      	cmp	r3, #1
    6902:	d127      	bne.n	6954 <promisc_follow_cb+0x60>
    6904:	7945      	ldrb	r5, [r0, #5]
    6906:	bb2d      	cbnz	r5, 6954 <promisc_follow_cb+0x60>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    6908:	7a03      	ldrb	r3, [r0, #8]
    690a:	79c0      	ldrb	r0, [r0, #7]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    690c:	2202      	movs	r2, #2
void promisc_follow_cb(u8 *packet) {
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    690e:	0200      	lsls	r0, r0, #8
    6910:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    6914:	798b      	ldrb	r3, [r1, #6]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6916:	3104      	adds	r1, #4
    6918:	4318      	orrs	r0, r3
    691a:	f000 fec7 	bl	76ac <btle_reverse_crc>
    691e:	462a      	mov	r2, r5
    6920:	60e0      	str	r0, [r4, #12]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    6922:	462b      	mov	r3, r5
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6924:	fa20 f103 	lsr.w	r1, r0, r3
    6928:	f1c3 0517 	rsb	r5, r3, #23
    692c:	f001 0101 	and.w	r1, r1, #1
    6930:	40a9      	lsls	r1, r5
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    6932:	3301      	adds	r3, #1
    6934:	2b18      	cmp	r3, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6936:	ea42 0201 	orr.w	r2, r2, r1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    693a:	d1f3      	bne.n	6924 <promisc_follow_cb+0x30>
    693c:	6122      	str	r2, [r4, #16]
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
    693e:	4b07      	ldr	r3, [pc, #28]	; (695c <promisc_follow_cb+0x68>)
    6940:	4a07      	ldr	r2, [pc, #28]	; (6960 <promisc_follow_cb+0x6c>)
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    6942:	2001      	movs	r0, #1
		packet_cb = promisc_recover_hop_interval;
    6944:	619a      	str	r2, [r3, #24]
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    6946:	6160      	str	r0, [r4, #20]
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    6948:	4906      	ldr	r1, [pc, #24]	; (6964 <promisc_follow_cb+0x70>)
    694a:	2203      	movs	r2, #3
	}
}
    694c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    6950:	f7ff beea 	b.w	6728 <le_promisc_state>
    6954:	bd38      	pop	{r3, r4, r5, pc}
    6956:	bf00      	nop
    6958:	1000044c 	.word	0x1000044c
    695c:	10000e34 	.word	0x10000e34
    6960:	00006841 	.word	0x00006841
    6964:	10000458 	.word	0x10000458

00006968 <see_aa>:
	}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    6968:	b530      	push	{r4, r5, lr}
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    696a:	2200      	movs	r2, #0
		if (le_promisc.active_aa[i].aa == aa) {
    696c:	4d14      	ldr	r5, [pc, #80]	; (69c0 <see_aa+0x58>)
    696e:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
    6972:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    6976:	4281      	cmp	r1, r0
    6978:	d102      	bne.n	6980 <see_aa+0x18>
			++le_promisc.active_aa[i].count;
    697a:	685a      	ldr	r2, [r3, #4]
    697c:	3201      	adds	r2, #1
    697e:	e01c      	b.n	69ba <see_aa+0x52>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    6980:	3201      	adds	r2, #1
    6982:	2a20      	cmp	r2, #32
    6984:	d1f2      	bne.n	696c <see_aa+0x4>
    6986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    698a:	4619      	mov	r1, r3
    698c:	2200      	movs	r2, #0
    698e:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    6992:	6864      	ldr	r4, [r4, #4]
    6994:	428c      	cmp	r4, r1
    6996:	db05      	blt.n	69a4 <see_aa+0x3c>
    6998:	2900      	cmp	r1, #0
    699a:	bfa8      	it	ge
    699c:	460c      	movge	r4, r1
    699e:	bfb8      	it	lt
    69a0:	4613      	movlt	r3, r2
    69a2:	e000      	b.n	69a6 <see_aa+0x3e>
    69a4:	4613      	mov	r3, r2
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    69a6:	3201      	adds	r2, #1
    69a8:	2a20      	cmp	r2, #32
    69aa:	d001      	beq.n	69b0 <see_aa+0x48>
    69ac:	4621      	mov	r1, r4
    69ae:	e7ee      	b.n	698e <see_aa+0x26>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    69b0:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    69b4:	2201      	movs	r2, #1
    69b6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    69ba:	605a      	str	r2, [r3, #4]
    69bc:	bd30      	pop	{r4, r5, pc}
    69be:	bf00      	nop
    69c0:	10001068 	.word	0x10001068

000069c4 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    69c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    69c8:	b095      	sub	sp, #84	; 0x54
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    69ca:	2100      	movs	r1, #0
	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    69cc:	4680      	mov	r8, r0
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    69ce:	2240      	movs	r2, #64	; 0x40
    69d0:	a804      	add	r0, sp, #16
    69d2:	f7fd fc2d 	bl	4230 <memset>
    69d6:	2301      	movs	r3, #1
    69d8:	f88d 3010 	strb.w	r3, [sp, #16]
    69dc:	f88d 3020 	strb.w	r3, [sp, #32]
    69e0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    69e4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    69e8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    69ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    69f0:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    69f4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    69f8:	ad14      	add	r5, sp, #80	; 0x50
    69fa:	ac04      	add	r4, sp, #16
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];
    69fc:	4e50      	ldr	r6, [pc, #320]	; (6b40 <cb_le_promisc+0x17c>)
    69fe:	4f51      	ldr	r7, [pc, #324]	; (6b44 <cb_le_promisc+0x180>)
    6a00:	8830      	ldrh	r0, [r6, #0]
    6a02:	b280      	uxth	r0, r0
    6a04:	3862      	subs	r0, #98	; 0x62
    6a06:	b2c0      	uxtb	r0, r0
    6a08:	f000 fdfa 	bl	7600 <btle_channel_index>
    6a0c:	5c3a      	ldrb	r2, [r7, r0]

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6a0e:	2300      	movs	r3, #0
			desired[i][j] ^= whitening[idx];
    6a10:	18b9      	adds	r1, r7, r2
    6a12:	5ce0      	ldrb	r0, [r4, r3]
    6a14:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    6a18:	3201      	adds	r2, #1
	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
			desired[i][j] ^= whitening[idx];
    6a1a:	4041      	eors	r1, r0
    6a1c:	54e1      	strb	r1, [r4, r3]
			idx = (idx + 1) % sizeof(whitening);
    6a1e:	217f      	movs	r1, #127	; 0x7f

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6a20:	3301      	adds	r3, #1
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    6a22:	fbb2 f0f1 	udiv	r0, r2, r1

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6a26:	2b10      	cmp	r3, #16
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    6a28:	fb01 2210 	mls	r2, r1, r0, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6a2c:	d1f0      	bne.n	6a10 <cb_le_promisc+0x4c>
    6a2e:	3410      	adds	r4, #16
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    6a30:	42ac      	cmp	r4, r5
    6a32:	d1e3      	bne.n	69fc <cb_le_promisc+0x38>
    6a34:	f108 0520 	add.w	r5, r8, #32
    6a38:	f508 783c 	add.w	r8, r8, #752	; 0x2f0
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
    6a3c:	4b42      	ldr	r3, [pc, #264]	; (6b48 <cb_le_promisc+0x184>)
    6a3e:	466c      	mov	r4, sp
    6a40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6a42:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6a46:	2200      	movs	r2, #0
    6a48:	ab04      	add	r3, sp, #16
    6a4a:	eb03 0182 	add.w	r1, r3, r2, lsl #2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6a4e:	2300      	movs	r3, #0
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
				if (unpacked[i+k] != desired[j][k]) {
    6a50:	f815 c003 	ldrb.w	ip, [r5, r3]
    6a54:	5cc8      	ldrb	r0, [r1, r3]
    6a56:	4584      	cmp	ip, r0
    6a58:	d002      	beq.n	6a60 <cb_le_promisc+0x9c>
					ok[j] = 0;
    6a5a:	2300      	movs	r3, #0
    6a5c:	50a3      	str	r3, [r4, r2]
					break;
    6a5e:	e002      	b.n	6a66 <cb_le_promisc+0xa2>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    6a60:	3301      	adds	r3, #1
    6a62:	2b10      	cmp	r3, #16
    6a64:	d1f4      	bne.n	6a50 <cb_le_promisc+0x8c>
    6a66:	3204      	adds	r2, #4
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    6a68:	2a10      	cmp	r2, #16
    6a6a:	d1ed      	bne.n	6a48 <cb_le_promisc+0x84>
    6a6c:	2300      	movs	r3, #0
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
			if (ok[j]) {
    6a6e:	58e2      	ldr	r2, [r4, r3]
    6a70:	b91a      	cbnz	r2, 6a7a <cb_le_promisc+0xb6>
    6a72:	3304      	adds	r3, #4
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    6a74:	2b10      	cmp	r3, #16
    6a76:	d1fa      	bne.n	6a6e <cb_le_promisc+0xaa>
    6a78:	e03e      	b.n	6af8 <cb_le_promisc+0x134>
		// skip if no match
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    6a7a:	8830      	ldrh	r0, [r6, #0]
    6a7c:	b280      	uxth	r0, r0
    6a7e:	3862      	subs	r0, #98	; 0x62
    6a80:	b2c0      	uxtb	r0, r0
    6a82:	f000 fdbd 	bl	7600 <btle_channel_index>
    6a86:	5c38      	ldrb	r0, [r7, r0]
		for (j = 0; j < 4+3+3; ++j) {
    6a88:	2300      	movs	r3, #0
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    6a8a:	2100      	movs	r1, #0
    6a8c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
    6a90:	460a      	mov	r2, r1
    6a92:	eb0c 0402 	add.w	r4, ip, r2
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
    6a96:	2b03      	cmp	r3, #3
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
    6a98:	f814 4c20 	ldrb.w	r4, [r4, #-32]
				if (j >= 4) { // unwhiten data bytes
    6a9c:	dd0c      	ble.n	6ab8 <cb_le_promisc+0xf4>
					bit ^= whitening[idx];
    6a9e:	eb07 0e00 	add.w	lr, r7, r0
    6aa2:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    6aa6:	3001      	adds	r0, #1
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
    6aa8:	ea84 040e 	eor.w	r4, r4, lr
					idx = (idx + 1) % sizeof(whitening);
    6aac:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    6ab0:	fbb0 f9fe 	udiv	r9, r0, lr
    6ab4:	fb0e 0019 	mls	r0, lr, r9, r0
				}
				byte |= bit << k;
    6ab8:	4094      	lsls	r4, r2

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6aba:	3201      	adds	r2, #1
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6abc:	4321      	orrs	r1, r4

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6abe:	2a08      	cmp	r2, #8
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6ac0:	b2c9      	uxtb	r1, r1

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6ac2:	d1e6      	bne.n	6a92 <cb_le_promisc+0xce>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    6ac4:	4c21      	ldr	r4, [pc, #132]	; (6b4c <cb_le_promisc+0x188>)
    6ac6:	6822      	ldr	r2, [r4, #0]
    6ac8:	54d1      	strb	r1, [r2, r3]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    6aca:	3301      	adds	r3, #1
    6acc:	2b0a      	cmp	r3, #10
    6ace:	d1dc      	bne.n	6a8a <cb_le_promisc+0xc6>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    6ad0:	6823      	ldr	r3, [r4, #0]
    6ad2:	78d9      	ldrb	r1, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    6ad4:	6823      	ldr	r3, [r4, #0]
    6ad6:	789b      	ldrb	r3, [r3, #2]
				 (idle_rxbuf[1] <<  8) |
    6ad8:	6822      	ldr	r2, [r4, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    6ada:	041b      	lsls	r3, r3, #16
				 (idle_rxbuf[1] <<  8) |
    6adc:	7850      	ldrb	r0, [r2, #1]
				 (idle_rxbuf[0]);
    6ade:	6822      	ldr	r2, [r4, #0]
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    6ae0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    6ae4:	7812      	ldrb	r2, [r2, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    6ae6:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    6ae8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    6aec:	f7ff ff3c 	bl	6968 <see_aa>

		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    6af0:	6821      	ldr	r1, [r4, #0]
    6af2:	2001      	movs	r0, #1
    6af4:	f7fd fd08 	bl	4508 <enqueue>
    6af8:	3501      	adds	r5, #1
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    6afa:	4545      	cmp	r5, r8
    6afc:	d19e      	bne.n	6a3c <cb_le_promisc+0x78>
    6afe:	2300      	movs	r3, #0
    6b00:	4a13      	ldr	r2, [pc, #76]	; (6b50 <cb_le_promisc+0x18c>)
    6b02:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    6b06:	6849      	ldr	r1, [r1, #4]
    6b08:	2903      	cmp	r1, #3
    6b0a:	dd11      	ble.n	6b30 <cb_le_promisc+0x16c>
			le_set_access_address(le_promisc.active_aa[i].aa);
    6b0c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    6b10:	f7fd fd48 	bl	45a4 <le_set_access_address>
			data_cb = cb_follow_le;
    6b14:	4b0f      	ldr	r3, [pc, #60]	; (6b54 <cb_le_promisc+0x190>)
    6b16:	4a10      	ldr	r2, [pc, #64]	; (6b58 <cb_le_promisc+0x194>)
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    6b18:	2400      	movs	r4, #0

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    6b1a:	625a      	str	r2, [r3, #36]	; 0x24
			packet_cb = promisc_follow_cb;
    6b1c:	4a0f      	ldr	r2, [pc, #60]	; (6b5c <cb_le_promisc+0x198>)
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    6b1e:	4620      	mov	r0, r4
	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
    6b20:	619a      	str	r2, [r3, #24]
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    6b22:	490f      	ldr	r1, [pc, #60]	; (6b60 <cb_le_promisc+0x19c>)
    6b24:	2204      	movs	r2, #4
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    6b26:	6174      	str	r4, [r6, #20]
			le_promisc_state(0, &le.access_address, 4);
    6b28:	f7ff fdfe 	bl	6728 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    6b2c:	4620      	mov	r0, r4
    6b2e:	e003      	b.n	6b38 <cb_le_promisc+0x174>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    6b30:	3301      	adds	r3, #1
    6b32:	2b20      	cmp	r3, #32
    6b34:	d1e4      	bne.n	6b00 <cb_le_promisc+0x13c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    6b36:	2001      	movs	r0, #1
}
    6b38:	b015      	add	sp, #84	; 0x54
    6b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6b3e:	bf00      	nop
    6b40:	1000044c 	.word	0x1000044c
    6b44:	0000a218 	.word	0x0000a218
    6b48:	0000aab0 	.word	0x0000aab0
    6b4c:	10001180 	.word	0x10001180
    6b50:	10001068 	.word	0x10001068
    6b54:	10000e34 	.word	0x10000e34
    6b58:	00004669 	.word	0x00004669
    6b5c:	000068f5 	.word	0x000068f5
    6b60:	10000450 	.word	0x10000450

00006b64 <bt_promisc_le>:

void bt_promisc_le() {
    6b64:	b538      	push	{r3, r4, r5, lr}
	while (requested_mode == MODE_BT_PROMISC_LE) {
    6b66:	4d16      	ldr	r5, [pc, #88]	; (6bc0 <bt_promisc_le+0x5c>)
    6b68:	7cab      	ldrb	r3, [r5, #18]
    6b6a:	2b0a      	cmp	r3, #10
    6b6c:	d126      	bne.n	6bbc <bt_promisc_le+0x58>
		reset_le_promisc();

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6b6e:	4c15      	ldr	r4, [pc, #84]	; (6bc4 <bt_promisc_le+0x60>)
	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
		reset_le_promisc();
    6b70:	f7fe ff6a 	bl	5a48 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6b74:	8823      	ldrh	r3, [r4, #0]
    6b76:	07db      	lsls	r3, r3, #31
			channel = 2440;
    6b78:	bf44      	itt	mi
    6b7a:	f640 1388 	movwmi	r3, #2440	; 0x988
    6b7e:	8023      	strhmi	r3, [r4, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    6b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6b82:	b94b      	cbnz	r3, 6b98 <bt_promisc_le+0x34>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
    6b84:	4b0f      	ldr	r3, [pc, #60]	; (6bc4 <bt_promisc_le+0x60>)
    6b86:	8818      	ldrh	r0, [r3, #0]
    6b88:	b280      	uxth	r0, r0
    6b8a:	f000 ff3b 	bl	7a04 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    6b8e:	4b0e      	ldr	r3, [pc, #56]	; (6bc8 <bt_promisc_le+0x64>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    6b90:	200a      	movs	r0, #10

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
			data_cb = cb_le_promisc;
    6b92:	626b      	str	r3, [r5, #36]	; 0x24
			bt_generic_le(MODE_BT_PROMISC_LE);
    6b94:	f7fe ff68 	bl	5a68 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    6b98:	7cad      	ldrb	r5, [r5, #18]
    6b9a:	b2ed      	uxtb	r5, r5
    6b9c:	2d0a      	cmp	r5, #10
    6b9e:	d10d      	bne.n	6bbc <bt_promisc_le+0x58>
			break;

		le_promisc_state(0, &le.access_address, 4);
    6ba0:	2000      	movs	r0, #0
    6ba2:	490a      	ldr	r1, [pc, #40]	; (6bcc <bt_promisc_le+0x68>)
    6ba4:	2204      	movs	r2, #4
    6ba6:	f7ff fdbf 	bl	6728 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    6baa:	4a09      	ldr	r2, [pc, #36]	; (6bd0 <bt_promisc_le+0x6c>)
    6bac:	4b04      	ldr	r3, [pc, #16]	; (6bc0 <bt_promisc_le+0x5c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    6bae:	4628      	mov	r0, r5
		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
			break;

		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
    6bb0:	619a      	str	r2, [r3, #24]
		le.crc_verify = 0;
    6bb2:	2300      	movs	r3, #0
    6bb4:	6163      	str	r3, [r4, #20]
		bt_le_sync(MODE_BT_PROMISC_LE);
    6bb6:	f7ff f967 	bl	5e88 <bt_le_sync>
    6bba:	e7d4      	b.n	6b66 <bt_promisc_le+0x2>
    6bbc:	bd38      	pop	{r3, r4, r5, pc}
    6bbe:	bf00      	nop
    6bc0:	10000e34 	.word	0x10000e34
    6bc4:	1000044c 	.word	0x1000044c
    6bc8:	000069c5 	.word	0x000069c5
    6bcc:	10000450 	.word	0x10000450
    6bd0:	000068f5 	.word	0x000068f5
    6bd4:	00000000 	.word	0x00000000

00006bd8 <bt_slave_le>:
	}
}

void bt_slave_le() {
    6bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bdc:	b08b      	sub	sp, #44	; 0x2c
	int i, j;
	int num_adv_ind = 1;
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};
    6bde:	4996      	ldr	r1, [pc, #600]	; (6e38 <bt_slave_le+0x260>)

	u8 adv_overhead[20] = {0x42, 0x1d,	// adv_nonconn_ind, length 29 (0001 1101)
    6be0:	aa05      	add	r2, sp, #20
	int i, j;
	int num_adv_ind = 1;
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};
    6be2:	888b      	ldrh	r3, [r1, #4]
    6be4:	6808      	ldr	r0, [r1, #0]
    6be6:	f8ad 3010 	strh.w	r3, [sp, #16]
    6bea:	9003      	str	r0, [sp, #12]

	u8 adv_overhead[20] = {0x42, 0x1d,	// adv_nonconn_ind, length 29 (0001 1101)
    6bec:	1d8b      	adds	r3, r1, #6
    6bee:	f101 0516 	add.w	r5, r1, #22
    6bf2:	6818      	ldr	r0, [r3, #0]
    6bf4:	6859      	ldr	r1, [r3, #4]
    6bf6:	4614      	mov	r4, r2
    6bf8:	c403      	stmia	r4!, {r0, r1}
    6bfa:	3308      	adds	r3, #8
    6bfc:	42ab      	cmp	r3, r5
    6bfe:	4622      	mov	r2, r4
    6c00:	d1f7      	bne.n	6bf2 <bt_slave_le+0x1a>
    6c02:	6818      	ldr	r0, [r3, #0]
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
		slave_mac_address[i] = slave_mac_address_data[i];
    6c04:	4a8d      	ldr	r2, [pc, #564]	; (6e3c <bt_slave_le+0x264>)
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};

	u8 adv_overhead[20] = {0x42, 0x1d,	// adv_nonconn_ind, length 29 (0001 1101)
    6c06:	6020      	str	r0, [r4, #0]
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
		slave_mac_address[i] = slave_mac_address_data[i];
    6c08:	6814      	ldr	r4, [r2, #0]
						   0x03, 0x03, 0xaa, 0xfe, // service advertised - len, type, eddystone UUID
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
    6c0a:	2300      	movs	r3, #0
    6c0c:	4693      	mov	fp, r2
		slave_mac_address[i] = slave_mac_address_data[i];
    6c0e:	498c      	ldr	r1, [pc, #560]	; (6e40 <bt_slave_le+0x268>)
    6c10:	5ce0      	ldrb	r0, [r4, r3]
    6c12:	f101 0240 	add.w	r2, r1, #64	; 0x40
    6c16:	5498      	strb	r0, [r3, r2]
						   0x03, 0x03, 0xaa, 0xfe, // service advertised - len, type, eddystone UUID
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
    6c18:	3301      	adds	r3, #1
    6c1a:	2b06      	cmp	r3, #6
    6c1c:	4689      	mov	r9, r1
    6c1e:	d1f6      	bne.n	6c0e <bt_slave_le+0x36>
		slave_mac_address[i] = slave_mac_address_data[i];

	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
    6c20:	6a0a      	ldr	r2, [r1, #32]
    6c22:	230b      	movs	r3, #11
    6c24:	1f97      	subs	r7, r2, #6
    6c26:	fb97 f6f3 	sdiv	r6, r7, r3
	if (dlen > 11 + 6) {
    6c2a:	2a11      	cmp	r2, #17
		slave_mac_address[i] = slave_mac_address_data[i];

	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
    6c2c:	fb03 7716 	mls	r7, r3, r6, r7
	if (dlen > 11 + 6) {
    6c30:	dd02      	ble.n	6c38 <bt_slave_le+0x60>
		num_adv_ind = (dlen-6)/11 + 1;
		fin_adv_len = (dlen-6) % 11;
		if (fin_adv_len == 0) {
    6c32:	b11f      	cbz	r7, 6c3c <bt_slave_le+0x64>
	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
	if (dlen > 11 + 6) {
		num_adv_ind = (dlen-6)/11 + 1;
    6c34:	3601      	adds	r6, #1
    6c36:	e002      	b.n	6c3e <bt_slave_le+0x66>
}

void bt_slave_le() {
	u32 calc_crc;
	int i, j;
	int num_adv_ind = 1;
    6c38:	2601      	movs	r6, #1
    6c3a:	e000      	b.n	6c3e <bt_slave_le+0x66>
	fin_adv_len = (dlen-6) % 11;
	if (dlen > 11 + 6) {
		num_adv_ind = (dlen-6)/11 + 1;
		fin_adv_len = (dlen-6) % 11;
		if (fin_adv_len == 0) {
			fin_adv_len = 11;
    6c3c:	461f      	mov	r7, r3
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
    6c3e:	00b5      	lsls	r5, r6, #2
    6c40:	4628      	mov	r0, r5
    6c42:	f002 fe0b 	bl	985c <malloc>
	for (i=0; i< num_adv_ind-1; i++) {
    6c46:	f04f 0800 	mov.w	r8, #0
		if (fin_adv_len == 0) {
			fin_adv_len = 11;
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
    6c4a:	4604      	mov	r4, r0
	for (i=0; i< num_adv_ind-1; i++) {
    6c4c:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
    6c50:	45d0      	cmp	r8, sl
    6c52:	da07      	bge.n	6c64 <bt_slave_le+0x8c>
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
    6c54:	201f      	movs	r0, #31
    6c56:	f002 fe01 	bl	985c <malloc>
    6c5a:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
			fin_adv_len = 11;
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
	for (i=0; i< num_adv_ind-1; i++) {
    6c5e:	f108 0801 	add.w	r8, r8, #1
    6c62:	e7f3      	b.n	6c4c <bt_slave_le+0x74>
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));
    6c64:	f107 0017 	add.w	r0, r7, #23
    6c68:	f002 fdf8 	bl	985c <malloc>
    6c6c:	3d04      	subs	r5, #4
    6c6e:	5160      	str	r0, [r4, r5]

	for (i=0; i< num_adv_ind; i++) {
    6c70:	2500      	movs	r5, #0
    6c72:	46a8      	mov	r8, r5
    6c74:	45b0      	cmp	r8, r6
    6c76:	da61      	bge.n	6d3c <bt_slave_le+0x164>
    6c78:	2300      	movs	r3, #0
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
    6c7a:	a805      	add	r0, sp, #20
    6c7c:	5cc1      	ldrb	r1, [r0, r3]
    6c7e:	5962      	ldr	r2, [r4, r5]
    6c80:	54d1      	strb	r1, [r2, r3]
    6c82:	3301      	adds	r3, #1
    6c84:	2b14      	cmp	r3, #20
    6c86:	d1f8      	bne.n	6c7a <bt_slave_le+0xa2>
    6c88:	2305      	movs	r3, #5
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
    6c8a:	496e      	ldr	r1, [pc, #440]	; (6e44 <bt_slave_le+0x26c>)
    6c8c:	5962      	ldr	r2, [r4, r5]
    6c8e:	5cc8      	ldrb	r0, [r1, r3]
    6c90:	f1c3 0107 	rsb	r1, r3, #7
    6c94:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    6c98:	5450      	strb	r0, [r2, r1]
    6c9a:	d2f6      	bcs.n	6c8a <bt_slave_le+0xb2>
		adv_ind[i][17] = (u8) num_adv_ind;
    6c9c:	5963      	ldr	r3, [r4, r5]
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    6c9e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
		adv_ind[i][17] = (u8) num_adv_ind;
    6ca2:	745e      	strb	r6, [r3, #17]
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    6ca4:	5963      	ldr	r3, [r4, r5]
    6ca6:	4442      	add	r2, r8
		if (i < num_adv_ind -1) {
    6ca8:	45d0      	cmp	r8, sl

	for (i=0; i< num_adv_ind; i++) {
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
		adv_ind[i][17] = (u8) num_adv_ind;
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    6caa:	74da      	strb	r2, [r3, #19]
		if (i < num_adv_ind -1) {
    6cac:	da0f      	bge.n	6cce <bt_slave_le+0xf6>
    6cae:	210b      	movs	r1, #11
    6cb0:	fb01 f108 	mul.w	r1, r1, r8
    6cb4:	2314      	movs	r3, #20
			for (j=0; j<11; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
    6cb6:	f8db 2000 	ldr.w	r2, [fp]
    6cba:	440a      	add	r2, r1
    6cbc:	441a      	add	r2, r3
    6cbe:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
    6cc2:	5962      	ldr	r2, [r4, r5]
    6cc4:	54d0      	strb	r0, [r2, r3]
    6cc6:	3301      	adds	r3, #1
    6cc8:	2b1f      	cmp	r3, #31
    6cca:	d1f4      	bne.n	6cb6 <bt_slave_le+0xde>
    6ccc:	e020      	b.n	6d10 <bt_slave_le+0x138>
    6cce:	f04f 0e0b 	mov.w	lr, #11
			adv_ind_len = (u8) 31;
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
    6cd2:	b2fa      	uxtb	r2, r7
    6cd4:	fb0e fe08 	mul.w	lr, lr, r8
			u8 adv_len = (u8)(fin_adv_len + 7);
    6cd8:	1dd3      	adds	r3, r2, #7
    6cda:	b2db      	uxtb	r3, r3
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
		if (i < num_adv_ind -1) {
			for (j=0; j<11; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
			adv_ind_len = (u8) 31;
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
    6cdc:	f102 0012 	add.w	r0, r2, #18
			u8 adv_len = (u8)(fin_adv_len + 7);
    6ce0:	9301      	str	r3, [sp, #4]
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
		if (i < num_adv_ind -1) {
			for (j=0; j<11; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
			adv_ind_len = (u8) 31;
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
    6ce2:	b2c0      	uxtb	r0, r0
			u8 adv_len = (u8)(fin_adv_len + 7);
			for (j=0; j<fin_adv_len; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
    6ce4:	2300      	movs	r3, #0
    6ce6:	42bb      	cmp	r3, r7
    6ce8:	da0b      	bge.n	6d02 <bt_slave_le+0x12a>
    6cea:	4954      	ldr	r1, [pc, #336]	; (6e3c <bt_slave_le+0x264>)
    6cec:	6809      	ldr	r1, [r1, #0]
    6cee:	4471      	add	r1, lr
    6cf0:	4419      	add	r1, r3
    6cf2:	f891 c006 	ldrb.w	ip, [r1, #6]
    6cf6:	5961      	ldr	r1, [r4, r5]
    6cf8:	4419      	add	r1, r3
    6cfa:	f881 c014 	strb.w	ip, [r1, #20]
    6cfe:	3301      	adds	r3, #1
    6d00:	e7f1      	b.n	6ce6 <bt_slave_le+0x10e>
			adv_ind[i][1] = tot_len;
    6d02:	5963      	ldr	r3, [r4, r5]
			adv_ind[i][12] = adv_len;
			adv_ind_len = (u8) (fin_adv_len + 20);
    6d04:	3214      	adds	r2, #20
			adv_ind_len = (u8) 31;
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
			u8 adv_len = (u8)(fin_adv_len + 7);
			for (j=0; j<fin_adv_len; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
			adv_ind[i][1] = tot_len;
    6d06:	7058      	strb	r0, [r3, #1]
			adv_ind[i][12] = adv_len;
    6d08:	5963      	ldr	r3, [r4, r5]
    6d0a:	9801      	ldr	r0, [sp, #4]
    6d0c:	7318      	strb	r0, [r3, #12]
			adv_ind_len = (u8) (fin_adv_len + 20);
    6d0e:	b2d3      	uxtb	r3, r2
		adv_ind[i][26] = 0xa3;
		adv_ind[i][27] = 0x8f;
		*/
		////////
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
    6d10:	4a4d      	ldr	r2, [pc, #308]	; (6e48 <bt_slave_le+0x270>)
    6d12:	5961      	ldr	r1, [r4, r5]
    6d14:	6910      	ldr	r0, [r2, #16]
    6d16:	461a      	mov	r2, r3
    6d18:	9300      	str	r3, [sp, #0]
    6d1a:	f000 fcab 	bl	7674 <btle_calc_crc>
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
    6d1e:	5962      	ldr	r2, [r4, r5]
    6d20:	9b00      	ldr	r3, [sp, #0]
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    6d22:	0a01      	lsrs	r1, r0, #8
		*/
		////////
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
    6d24:	54d0      	strb	r0, [r2, r3]
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    6d26:	5962      	ldr	r2, [r4, r5]
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6d28:	0c00      	lsrs	r0, r0, #16
		////////
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    6d2a:	441a      	add	r2, r3
    6d2c:	7051      	strb	r1, [r2, #1]
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6d2e:	5962      	ldr	r2, [r4, r5]
	for (i=0; i< num_adv_ind-1; i++) {
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
    6d30:	f108 0801 	add.w	r8, r8, #1
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6d34:	4413      	add	r3, r2
    6d36:	7098      	strb	r0, [r3, #2]
    6d38:	3504      	adds	r5, #4
    6d3a:	e79b      	b.n	6c74 <bt_slave_le+0x9c>
	}

	clkn_start();
    6d3c:	f000 fefa 	bl	7b34 <clkn_start>

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    6d40:	f899 2012 	ldrb.w	r2, [r9, #18]
    6d44:	4b3e      	ldr	r3, [pc, #248]	; (6e40 <bt_slave_le+0x268>)
    6d46:	2a0c      	cmp	r2, #12
    6d48:	d132      	bne.n	6db0 <bt_slave_le+0x1d8>
		if (requested_mode != mode) break;
    6d4a:	7c9a      	ldrb	r2, [r3, #18]
    6d4c:	7c5b      	ldrb	r3, [r3, #17]
    6d4e:	429a      	cmp	r2, r3
    6d50:	d12e      	bne.n	6db0 <bt_slave_le+0x1d8>
		ICER0 = ICER0_ICE_USB;
    6d52:	4b3e      	ldr	r3, [pc, #248]	; (6e4c <bt_slave_le+0x274>)
    6d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6d58:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    6d5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    6d5e:	601a      	str	r2, [r3, #0]
    6d60:	f04f 0800 	mov.w	r8, #0
	for (i=0; i< num_adv_ind-1; i++) {
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
    6d64:	2500      	movs	r5, #0
	while (requested_mode == MODE_BT_SLAVE_LE) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
			for(j=0; j<num_adv_ind; j++) {
    6d66:	42b5      	cmp	r5, r6
    6d68:	da13      	bge.n	6d92 <bt_slave_le+0x1ba>
				if (j < num_adv_ind -1) {
    6d6a:	4555      	cmp	r5, sl
    6d6c:	ab03      	add	r3, sp, #12
    6d6e:	da02      	bge.n	6d76 <bt_slave_le+0x19e>
					adv_ind_len = (u8) (31 + 3);
					le_transmit(0x8e89bed7, adv_ind_len, adv_ind[j], ch[i]);
    6d70:	4837      	ldr	r0, [pc, #220]	; (6e50 <bt_slave_le+0x278>)
    6d72:	2122      	movs	r1, #34	; 0x22
    6d74:	e003      	b.n	6d7e <bt_slave_le+0x1a6>
				} else {
					adv_ind_len = (u8) (fin_adv_len + 20 + 3);
    6d76:	f107 0117 	add.w	r1, r7, #23
					le_transmit(0x8e89bed7, adv_ind_len, adv_ind[j], ch[i]);
    6d7a:	4835      	ldr	r0, [pc, #212]	; (6e50 <bt_slave_le+0x278>)
    6d7c:	b2c9      	uxtb	r1, r1
    6d7e:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    6d82:	f833 3008 	ldrh.w	r3, [r3, r8]
    6d86:	f7fe fa67 	bl	5258 <le_transmit>
	while (requested_mode == MODE_BT_SLAVE_LE) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
			for(j=0; j<num_adv_ind; j++) {
    6d8a:	3501      	adds	r5, #1
					le_transmit(0x8e89bed7, adv_ind_len, adv_ind[j], ch[i]);
				} else {
					adv_ind_len = (u8) (fin_adv_len + 20 + 3);
					le_transmit(0x8e89bed7, adv_ind_len, adv_ind[j], ch[i]);
				}
				msleep(10);
    6d8c:	f7fe f8f8 	bl	4f80 <msleep.constprop.3>
    6d90:	e7e9      	b.n	6d66 <bt_slave_le+0x18e>
    6d92:	f108 0802 	add.w	r8, r8, #2
	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
    6d96:	f1b8 0f06 	cmp.w	r8, #6
    6d9a:	d1e3      	bne.n	6d64 <bt_slave_le+0x18c>
				}
				msleep(10);
			}
			//msleep(5);
		}
		ISER0 = ISER0_ISE_USB;
    6d9c:	4b2d      	ldr	r3, [pc, #180]	; (6e54 <bt_slave_le+0x27c>)
    6d9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6da2:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    6da4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    6da8:	601a      	str	r2, [r3, #0]
		msleep(10);
    6daa:	f7fe f8e9 	bl	4f80 <msleep.constprop.3>
    6dae:	e7c7      	b.n	6d40 <bt_slave_le+0x168>
	}
	if (requested_mode == MODE_BT_SYNC_LE) {
    6db0:	f899 3012 	ldrb.w	r3, [r9, #18]
    6db4:	4e22      	ldr	r6, [pc, #136]	; (6e40 <bt_slave_le+0x268>)
    6db6:	2b13      	cmp	r3, #19
    6db8:	d134      	bne.n	6e24 <bt_slave_le+0x24c>
		ICER0 = ICER0_ICE_USB;
    6dba:	f8df 8090 	ldr.w	r8, [pc, #144]	; 6e4c <bt_slave_le+0x274>
    6dbe:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
		ICER0 = ICER0_ICE_DMA;
    6dc2:	f04f 6980 	mov.w	r9, #67108864	; 0x4000000
		adv_ind_len = (u8) (fin_adv_len + 20 + 3);
    6dc6:	f107 0117 	add.w	r1, r7, #23
		le_transmit(0x8e89bed7, adv_ind_len, adv_ind[0], (u16)2402);
    6dca:	6822      	ldr	r2, [r4, #0]
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(10);
	}
	if (requested_mode == MODE_BT_SYNC_LE) {
		ICER0 = ICER0_ICE_USB;
    6dcc:	f8c8 5000 	str.w	r5, [r8]
		ICER0 = ICER0_ICE_DMA;
		adv_ind_len = (u8) (fin_adv_len + 20 + 3);
		le_transmit(0x8e89bed7, adv_ind_len, adv_ind[0], (u16)2402);
    6dd0:	481f      	ldr	r0, [pc, #124]	; (6e50 <bt_slave_le+0x278>)
		ISER0 = ISER0_ISE_DMA;
		msleep(10);
	}
	if (requested_mode == MODE_BT_SYNC_LE) {
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
    6dd2:	f8c8 9000 	str.w	r9, [r8]
		adv_ind_len = (u8) (fin_adv_len + 20 + 3);
		le_transmit(0x8e89bed7, adv_ind_len, adv_ind[0], (u16)2402);
    6dd6:	b2c9      	uxtb	r1, r1
    6dd8:	f640 1362 	movw	r3, #2402	; 0x962
    6ddc:	f7fe fa3c 	bl	5258 <le_transmit>
		now_sync = (clkn & 0xffffff);
    6de0:	4b1d      	ldr	r3, [pc, #116]	; (6e58 <bt_slave_le+0x280>)
    6de2:	6818      	ldr	r0, [r3, #0]
    6de4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6de8:	62f0      	str	r0, [r6, #44]	; 0x2c
		start_sync = now_sync + 100.2 * 10000 / 3125; // wait for 99.8 ms
    6dea:	f002 fca1 	bl	9730 <__aeabi_ui2d>
    6dee:	a310      	add	r3, pc, #64	; (adr r3, 6e30 <bt_slave_le+0x258>)
    6df0:	e9d3 2300 	ldrd	r2, r3, [r3]
    6df4:	f002 fb60 	bl	94b8 <__adddf3>
    6df8:	f002 fd10 	bl	981c <__aeabi_d2uiz>

		ISER0 = ISER0_ISE_USB;
    6dfc:	4b15      	ldr	r3, [pc, #84]	; (6e54 <bt_slave_le+0x27c>)
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		adv_ind_len = (u8) (fin_adv_len + 20 + 3);
		le_transmit(0x8e89bed7, adv_ind_len, adv_ind[0], (u16)2402);
		now_sync = (clkn & 0xffffff);
		start_sync = now_sync + 100.2 * 10000 / 3125; // wait for 99.8 ms
    6dfe:	62b0      	str	r0, [r6, #40]	; 0x28

		ISER0 = ISER0_ISE_USB;
    6e00:	601d      	str	r5, [r3, #0]
		ISER0 = ISER0_ISE_DMA;

		requested_mode = MODE_BT_RSSI_LE;
    6e02:	2012      	movs	r0, #18
		le_transmit(0x8e89bed7, adv_ind_len, adv_ind[0], (u16)2402);
		now_sync = (clkn & 0xffffff);
		start_sync = now_sync + 100.2 * 10000 / 3125; // wait for 99.8 ms

		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
    6e04:	f8c3 9000 	str.w	r9, [r3]

		requested_mode = MODE_BT_RSSI_LE;
    6e08:	74b0      	strb	r0, [r6, #18]
		bt_le_sync_rssi(MODE_BT_RSSI_LE);
    6e0a:	f7fe ff1f 	bl	5c4c <bt_le_sync_rssi>
		
		ICER0 = ICER0_ICE_USB;
    6e0e:	f8c8 5000 	str.w	r5, [r8]
		cc2400_idle();
    6e12:	f7fd fbd3 	bl	45bc <cc2400_idle>
		dio_ssp_stop ();
    6e16:	f000 ff91 	bl	7d3c <dio_ssp_stop>
		cs_trigger_disable();
	}

}
    6e1a:	b00b      	add	sp, #44	; 0x2c
    6e1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_le_sync_rssi(MODE_BT_RSSI_LE);
		
		ICER0 = ICER0_ICE_USB;
		cc2400_idle();
		dio_ssp_stop ();
		cs_trigger_disable();
    6e20:	f000 be38 	b.w	7a94 <cs_trigger_disable>
	}

}
    6e24:	b00b      	add	sp, #44	; 0x2c
    6e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e2a:	bf00      	nop
    6e2c:	f3af 8000 	nop.w
    6e30:	70a3d70a 	.word	0x70a3d70a
    6e34:	40740a3d 	.word	0x40740a3d
    6e38:	0000aac0 	.word	0x0000aac0
    6e3c:	100014e0 	.word	0x100014e0
    6e40:	10000e34 	.word	0x10000e34
    6e44:	10000e74 	.word	0x10000e74
    6e48:	1000044c 	.word	0x1000044c
    6e4c:	e000e180 	.word	0xe000e180
    6e50:	8e89bed7 	.word	0x8e89bed7
    6e54:	e000e100 	.word	0xe000e100
    6e58:	10001024 	.word	0x10001024
    6e5c:	f3af 8000 	nop.w

00006e60 <rx_generic_sync>:

void rx_generic_sync(void) {
    6e60:	b500      	push	{lr}
    6e62:	b08b      	sub	sp, #44	; 0x2c
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6e64:	202d      	movs	r0, #45	; 0x2d
    6e66:	f001 fd47 	bl	88f8 <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    6e6a:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    6e6c:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    6e70:	202c      	movs	r0, #44	; 0x2c

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
	buf[0] = (reg_val >> 8) & 0xFF;
    6e72:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = reg_val & 0xFF;
	reg_val = cc2400_get(SYNCL);
    6e76:	f001 fd3f 	bl	88f8 <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    6e7a:	0a03      	lsrs	r3, r0, #8
    6e7c:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    6e80:	f88d 0007 	strb.w	r0, [sp, #7]

	queue_init();
    6e84:	f000 fcb6 	bl	77f4 <queue_init>
	clkn_start();
    6e88:	f000 fe54 	bl	7b34 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6e8c:	f001 fe0e 	bl	8aac <cc2400_status>
    6e90:	0640      	lsls	r0, r0, #25
    6e92:	d5fb      	bpl.n	6e8c <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6e94:	2061      	movs	r0, #97	; 0x61
    6e96:	f001 fe10 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6e9a:	f001 fe07 	bl	8aac <cc2400_status>
    6e9e:	0741      	lsls	r1, r0, #29
    6ea0:	d5fb      	bpl.n	6e9a <rx_generic_sync+0x3a>
	RXLED_SET;
    6ea2:	4b14      	ldr	r3, [pc, #80]	; (6ef4 <rx_generic_sync+0x94>)
    6ea4:	2210      	movs	r2, #16
    6ea6:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6ea8:	2280      	movs	r2, #128	; 0x80
    6eaa:	621a      	str	r2, [r3, #32]
		HGM_SET;
    6eac:	f44f 7280 	mov.w	r2, #256	; 0x100
    6eb0:	621a      	str	r2, [r3, #32]
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6eb2:	200e      	movs	r0, #14
    6eb4:	f001 fd20 	bl	88f8 <cc2400_get>
    6eb8:	f000 001f 	and.w	r0, r0, #31
    6ebc:	280f      	cmp	r0, #15
    6ebe:	d1f8      	bne.n	6eb2 <rx_generic_sync+0x52>
		cc2400_strobe(SRX);
    6ec0:	2062      	movs	r0, #98	; 0x62
    6ec2:	f001 fdfa 	bl	8aba <cc2400_strobe>
		USRLED_CLR;
    6ec6:	4b0c      	ldr	r3, [pc, #48]	; (6ef8 <rx_generic_sync+0x98>)
    6ec8:	2202      	movs	r2, #2
    6eca:	601a      	str	r2, [r3, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    6ecc:	f001 fdee 	bl	8aac <cc2400_status>
    6ed0:	06c2      	lsls	r2, r0, #27
    6ed2:	d5fb      	bpl.n	6ecc <rx_generic_sync+0x6c>
		USRLED_SET;
    6ed4:	4b07      	ldr	r3, [pc, #28]	; (6ef4 <rx_generic_sync+0x94>)
    6ed6:	2202      	movs	r2, #2
    6ed8:	601a      	str	r2, [r3, #0]

		cc2400_fifo_read(len, buf+4);
    6eda:	a902      	add	r1, sp, #8
    6edc:	2020      	movs	r0, #32
    6ede:	f001 fd9d 	bl	8a1c <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    6ee2:	a901      	add	r1, sp, #4
    6ee4:	2000      	movs	r0, #0
    6ee6:	f7fd fb0f 	bl	4508 <enqueue>
		handle_usb(clkn);
    6eea:	4b04      	ldr	r3, [pc, #16]	; (6efc <rx_generic_sync+0x9c>)
    6eec:	6818      	ldr	r0, [r3, #0]
    6eee:	f000 fcfd 	bl	78ec <handle_usb>
	}
    6ef2:	e7de      	b.n	6eb2 <rx_generic_sync+0x52>
    6ef4:	2009c038 	.word	0x2009c038
    6ef8:	2009c03c 	.word	0x2009c03c
    6efc:	10001024 	.word	0x10001024

00006f00 <rx_generic>:
}

void rx_generic(void) {
    6f00:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    6f02:	2020      	movs	r0, #32
    6f04:	f001 fcf8 	bl	88f8 <cc2400_get>
    6f08:	b108      	cbz	r0, 6f0e <rx_generic+0xe>
		rx_generic_sync();
    6f0a:	f7ff ffa9 	bl	6e60 <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    6f0e:	4b03      	ldr	r3, [pc, #12]	; (6f1c <rx_generic+0x1c>)
    6f10:	2203      	movs	r2, #3
    6f12:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    6f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
		rx_generic_sync();
	} else {
		modulation = MOD_NONE;
		bt_stream_rx();
    6f18:	f7fe bb7e 	b.w	5618 <bt_stream_rx>
    6f1c:	10000e34 	.word	0x10000e34

00006f20 <tx_generic>:
	}
}

void tx_generic(void) {
    6f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;
    6f24:	4d35      	ldr	r5, [pc, #212]	; (6ffc <tx_generic+0xdc>)

	mode = MODE_TX_GENERIC;
    6f26:	2310      	movs	r3, #16

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6f28:	202d      	movs	r0, #45	; 0x2d
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    6f2a:	7c6e      	ldrb	r6, [r5, #17]

	mode = MODE_TX_GENERIC;
    6f2c:	746b      	strb	r3, [r5, #17]

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6f2e:	f001 fce3 	bl	88f8 <cc2400_get>
    6f32:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    6f34:	202c      	movs	r0, #44	; 0x2c
    6f36:	f001 fcdf 	bl	88f8 <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    6f3a:	4c31      	ldr	r4, [pc, #196]	; (7000 <tx_generic+0xe0>)

	mode = MODE_TX_GENERIC;

	// Save existing syncword
	synch = cc2400_get(SYNCH);
	syncl = cc2400_get(SYNCL);
    6f3c:	4607      	mov	r7, r0

	cc2400_set(SYNCH, tx_pkt.synch);
    6f3e:	8821      	ldrh	r1, [r4, #0]
    6f40:	202d      	movs	r0, #45	; 0x2d
    6f42:	f001 fce2 	bl	890a <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    6f46:	202c      	movs	r0, #44	; 0x2c
    6f48:	8861      	ldrh	r1, [r4, #2]
    6f4a:	f001 fcde 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    6f4e:	2003      	movs	r0, #3
    6f50:	2157      	movs	r1, #87	; 0x57
    6f52:	f001 fcda 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    6f56:	2014      	movs	r0, #20
    6f58:	f241 314b 	movw	r1, #4939	; 0x134b
    6f5c:	f001 fcd5 	bl	890a <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    6f60:	2020      	movs	r0, #32
    6f62:	f640 7161 	movw	r1, #3937	; 0xf61
    6f66:	f001 fcd0 	bl	890a <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    6f6a:	2002      	movs	r0, #2
    6f6c:	88a1      	ldrh	r1, [r4, #4]
    6f6e:	f001 fccc 	bl	890a <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    6f72:	2005      	movs	r0, #5
    6f74:	79e1      	ldrb	r1, [r4, #7]
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    6f76:	b2f6      	uxtb	r6, r6
	cc2400_set(SYNCL, tx_pkt.syncl);
	cc2400_set(MDMCTRL, 0x0057);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(GRMDM, 0x0f61);
	cc2400_set(FSDIV, tx_pkt.channel);
	cc2400_set(FREND, tx_pkt.pa_level);
    6f78:	f001 fcc7 	bl	890a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6f7c:	f001 fd96 	bl	8aac <cc2400_status>
    6f80:	0642      	lsls	r2, r0, #25
    6f82:	d5fb      	bpl.n	6f7c <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6f84:	2061      	movs	r0, #97	; 0x61
    6f86:	f001 fd98 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6f8a:	f001 fd8f 	bl	8aac <cc2400_status>
    6f8e:	0743      	lsls	r3, r0, #29
    6f90:	d5fb      	bpl.n	6f8a <tx_generic+0x6a>
	TXLED_SET;
    6f92:	4b1c      	ldr	r3, [pc, #112]	; (7004 <tx_generic+0xe4>)
    6f94:	f44f 7280 	mov.w	r2, #256	; 0x100
    6f98:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6f9a:	2280      	movs	r2, #128	; 0x80
    6f9c:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6f9e:	200e      	movs	r0, #14
    6fa0:	f001 fcaa 	bl	88f8 <cc2400_get>
    6fa4:	f000 001f 	and.w	r0, r0, #31
    6fa8:	280f      	cmp	r0, #15
    6faa:	d1f8      	bne.n	6f9e <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    6fac:	79a0      	ldrb	r0, [r4, #6]
    6fae:	4916      	ldr	r1, [pc, #88]	; (7008 <tx_generic+0xe8>)
    6fb0:	f001 fcec 	bl	898c <cc2400_fifo_write>
	cc2400_strobe(STX);
    6fb4:	2063      	movs	r0, #99	; 0x63
    6fb6:	f001 fd80 	bl	8aba <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6fba:	200e      	movs	r0, #14
    6fbc:	f001 fc9c 	bl	88f8 <cc2400_get>
    6fc0:	f000 001f 	and.w	r0, r0, #31
    6fc4:	280f      	cmp	r0, #15
    6fc6:	d1f8      	bne.n	6fba <tx_generic+0x9a>
	TXLED_CLR;
    6fc8:	4b10      	ldr	r3, [pc, #64]	; (700c <tx_generic+0xec>)
    6fca:	f44f 7280 	mov.w	r2, #256	; 0x100
    6fce:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    6fd0:	2064      	movs	r0, #100	; 0x64
    6fd2:	f001 fd72 	bl	8aba <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6fd6:	f001 fd69 	bl	8aac <cc2400_status>
    6fda:	0744      	lsls	r4, r0, #29
    6fdc:	d4fb      	bmi.n	6fd6 <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    6fde:	4b0c      	ldr	r3, [pc, #48]	; (7010 <tx_generic+0xf0>)
    6fe0:	2280      	movs	r2, #128	; 0x80
    6fe2:	601a      	str	r2, [r3, #0]
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    6fe4:	202d      	movs	r0, #45	; 0x2d
    6fe6:	4641      	mov	r1, r8
    6fe8:	f001 fc8f 	bl	890a <cc2400_set>
	cc2400_set(SYNCL, syncl);
    6fec:	202c      	movs	r0, #44	; 0x2c
    6fee:	4639      	mov	r1, r7
    6ff0:	f001 fc8b 	bl	890a <cc2400_set>
	requested_mode = prev_mode;
    6ff4:	74ae      	strb	r6, [r5, #18]
    6ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ffa:	bf00      	nop
    6ffc:	10000e34 	.word	0x10000e34
    7000:	10001028 	.word	0x10001028
    7004:	2009c038 	.word	0x2009c038
    7008:	10001030 	.word	0x10001030
    700c:	2009c03c 	.word	0x2009c03c
    7010:	2009c05c 	.word	0x2009c05c

00007014 <specan>:
}

/* spectrum analysis */
void specan()
{
    7014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7018:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    701a:	4b3d      	ldr	r3, [pc, #244]	; (7110 <specan+0xfc>)
    701c:	2210      	movs	r2, #16
    701e:	601a      	str	r2, [r3, #0]

	queue_init();
    7020:	f000 fbe8 	bl	77f4 <queue_init>
	clkn_start();
    7024:	f000 fd86 	bl	7b34 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7028:	4b3a      	ldr	r3, [pc, #232]	; (7114 <specan+0x100>)
    702a:	2280      	movs	r2, #128	; 0x80
    702c:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    702e:	2012      	movs	r0, #18
    7030:	f642 3122 	movw	r1, #11042	; 0x2b22
    7034:	f001 fc69 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7038:	2014      	movs	r0, #20
    703a:	f241 314b 	movw	r1, #4939	; 0x134b
    703e:	f001 fc64 	bl	890a <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7042:	2020      	movs	r0, #32
    7044:	f240 1101 	movw	r1, #257	; 0x101
    7048:	f001 fc5f 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    704c:	2003      	movs	r0, #3
    704e:	2129      	movs	r1, #41	; 0x29
    7050:	f001 fc5b 	bl	890a <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    7054:	f001 fd2a 	bl	8aac <cc2400_status>
    7058:	0644      	lsls	r4, r0, #25
    705a:	d5fb      	bpl.n	7054 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    705c:	f001 fd26 	bl	8aac <cc2400_status>
    7060:	f000 0004 	and.w	r0, r0, #4
    7064:	f000 05ff 	and.w	r5, r0, #255	; 0xff
    7068:	2800      	cmp	r0, #0
    706a:	d1f7      	bne.n	705c <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    706c:	4b2a      	ldr	r3, [pc, #168]	; (7118 <specan+0x104>)
    706e:	7c9b      	ldrb	r3, [r3, #18]
    7070:	2b04      	cmp	r3, #4
    7072:	d147      	bne.n	7104 <specan+0xf0>
		for (f = low_freq; f < high_freq + 1; f++) {
    7074:	4b29      	ldr	r3, [pc, #164]	; (711c <specan+0x108>)
    7076:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
    707a:	4698      	mov	r8, r3
    707c:	b2a4      	uxth	r4, r4
    707e:	f8b8 304e 	ldrh.w	r3, [r8, #78]	; 0x4e
    7082:	b29b      	uxth	r3, r3
    7084:	42a3      	cmp	r3, r4
    7086:	dbf1      	blt.n	706c <specan+0x58>
    7088:	1e61      	subs	r1, r4, #1
			cc2400_set(FSDIV, f - 1);
    708a:	2002      	movs	r0, #2
    708c:	b289      	uxth	r1, r1
    708e:	f001 fc3c 	bl	890a <cc2400_set>
			cc2400_strobe(SFSON);
    7092:	2061      	movs	r0, #97	; 0x61
    7094:	f001 fd11 	bl	8aba <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7098:	f001 fd08 	bl	8aac <cc2400_status>
    709c:	0740      	lsls	r0, r0, #29
    709e:	d5fb      	bpl.n	7098 <specan+0x84>
			cc2400_strobe(SRX);
    70a0:	2062      	movs	r0, #98	; 0x62
    70a2:	f001 fd0a 	bl	8aba <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    70a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    70aa:	9300      	str	r3, [sp, #0]
    70ac:	9e00      	ldr	r6, [sp, #0]
    70ae:	3e01      	subs	r6, #1
    70b0:	9600      	str	r6, [sp, #0]
    70b2:	2e00      	cmp	r6, #0
    70b4:	d1fa      	bne.n	70ac <specan+0x98>
			buf[3 * i] = (f >> 8) & 0xFF;
    70b6:	ab0e      	add	r3, sp, #56	; 0x38
    70b8:	2703      	movs	r7, #3
    70ba:	fb07 3705 	mla	r7, r7, r5, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    70be:	2006      	movs	r0, #6
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
    70c0:	0a23      	lsrs	r3, r4, #8
    70c2:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    70c6:	f807 4c33 	strb.w	r4, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    70ca:	f001 fc15 	bl	88f8 <cc2400_get>
			i++;
    70ce:	3501      	adds	r5, #1
    70d0:	b2ed      	uxtb	r5, r5

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    70d2:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
    70d4:	2d10      	cmp	r5, #16

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    70d6:	f807 0c32 	strb.w	r0, [r7, #-50]
			i++;
			if (i == 16) {
    70da:	d109      	bne.n	70f0 <specan+0xdc>
				enqueue(SPECAN, buf);
    70dc:	2004      	movs	r0, #4
    70de:	eb0d 0100 	add.w	r1, sp, r0
    70e2:	f7fd fa11 	bl	4508 <enqueue>
				i = 0;

				handle_usb(clkn);
    70e6:	4b0e      	ldr	r3, [pc, #56]	; (7120 <specan+0x10c>)
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				enqueue(SPECAN, buf);
				i = 0;
    70e8:	4635      	mov	r5, r6

				handle_usb(clkn);
    70ea:	6818      	ldr	r0, [r3, #0]
    70ec:	f000 fbfe 	bl	78ec <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    70f0:	2064      	movs	r0, #100	; 0x64
    70f2:	f001 fce2 	bl	8aba <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    70f6:	f001 fcd9 	bl	8aac <cc2400_status>
    70fa:	0741      	lsls	r1, r0, #29
    70fc:	d4fb      	bmi.n	70f6 <specan+0xe2>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    70fe:	3401      	adds	r4, #1
    7100:	b2a4      	uxth	r4, r4
    7102:	e7bc      	b.n	707e <specan+0x6a>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    7104:	4b07      	ldr	r3, [pc, #28]	; (7124 <specan+0x110>)
    7106:	2210      	movs	r2, #16
    7108:	601a      	str	r2, [r3, #0]
}
    710a:	b00e      	add	sp, #56	; 0x38
    710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7110:	2009c038 	.word	0x2009c038
    7114:	2009c058 	.word	0x2009c058
    7118:	10000e34 	.word	0x10000e34
    711c:	1000044c 	.word	0x1000044c
    7120:	10001024 	.word	0x10001024
    7124:	2009c03c 	.word	0x2009c03c

00007128 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    7128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    712a:	4b44      	ldr	r3, [pc, #272]	; (723c <led_specan+0x114>)
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    712c:	2280      	movs	r2, #128	; 0x80
/* LED based spectrum analysis */
void led_specan()
{
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    712e:	6818      	ldr	r0, [r3, #0]
    7130:	889b      	ldrh	r3, [r3, #4]
    7132:	9002      	str	r0, [sp, #8]
    7134:	f8ad 300c 	strh.w	r3, [sp, #12]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7138:	4b41      	ldr	r3, [pc, #260]	; (7240 <led_specan+0x118>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    713a:	2012      	movs	r0, #18
	u16 channels[3] = {2412, 2437, 2462};
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    713c:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    713e:	f642 3122 	movw	r1, #11042	; 0x2b22
    7142:	f001 fbe2 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7146:	2014      	movs	r0, #20
    7148:	f241 314b 	movw	r1, #4939	; 0x134b
    714c:	f001 fbdd 	bl	890a <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7150:	2020      	movs	r0, #32
    7152:	f240 1101 	movw	r1, #257	; 0x101
    7156:	f001 fbd8 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    715a:	2003      	movs	r0, #3
    715c:	2129      	movs	r1, #41	; 0x29
    715e:	f001 fbd4 	bl	890a <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    7162:	2006      	movs	r0, #6
    7164:	21f1      	movs	r1, #241	; 0xf1
    7166:	f001 fbd0 	bl	890a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    716a:	f001 fc9f 	bl	8aac <cc2400_status>
    716e:	0641      	lsls	r1, r0, #25
    7170:	d5fb      	bpl.n	716a <led_specan+0x42>
	while ((cc2400_status() & FS_LOCK));
    7172:	f001 fc9b 	bl	8aac <cc2400_status>
    7176:	f000 0004 	and.w	r0, r0, #4
    717a:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    717e:	2800      	cmp	r0, #0
    7180:	d1f7      	bne.n	7172 <led_specan+0x4a>

	while (requested_mode == MODE_LED_SPECAN) {
    7182:	4b30      	ldr	r3, [pc, #192]	; (7244 <led_specan+0x11c>)
    7184:	7c9b      	ldrb	r3, [r3, #18]
    7186:	2b07      	cmp	r3, #7
    7188:	d155      	bne.n	7236 <led_specan+0x10e>
		cc2400_set(FSDIV, channels[i] - 1);
    718a:	aa04      	add	r2, sp, #16
    718c:	eb02 0344 	add.w	r3, r2, r4, lsl #1
    7190:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    7194:	2002      	movs	r0, #2
    7196:	3901      	subs	r1, #1
    7198:	b289      	uxth	r1, r1
    719a:	f001 fbb6 	bl	890a <cc2400_set>
		cc2400_strobe(SFSON);
    719e:	2061      	movs	r0, #97	; 0x61
    71a0:	f001 fc8b 	bl	8aba <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    71a4:	f001 fc82 	bl	8aac <cc2400_status>
    71a8:	0742      	lsls	r2, r0, #29
    71aa:	d5fb      	bpl.n	71a4 <led_specan+0x7c>
		cc2400_strobe(SRX);
    71ac:	2062      	movs	r0, #98	; 0x62
    71ae:	f001 fc84 	bl	8aba <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    71b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    71b6:	9301      	str	r3, [sp, #4]
    71b8:	9b01      	ldr	r3, [sp, #4]
    71ba:	3b01      	subs	r3, #1
    71bc:	9301      	str	r3, [sp, #4]
    71be:	2b00      	cmp	r3, #0
    71c0:	d1fa      	bne.n	71b8 <led_specan+0x90>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    71c2:	2006      	movs	r0, #6
    71c4:	f001 fb98 	bl	88f8 <cc2400_get>
		if (lvl > rssi_threshold) {
    71c8:	4b1f      	ldr	r3, [pc, #124]	; (7248 <led_specan+0x120>)
    71ca:	f340 2007 	sbfx	r0, r0, #8, #8
    71ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    71d2:	b25b      	sxtb	r3, r3
    71d4:	4298      	cmp	r0, r3
    71d6:	dd0c      	ble.n	71f2 <led_specan+0xca>
			switch (i) {
    71d8:	2c01      	cmp	r4, #1
    71da:	d007      	beq.n	71ec <led_specan+0xc4>
    71dc:	d303      	bcc.n	71e6 <led_specan+0xbe>
    71de:	2c02      	cmp	r4, #2
    71e0:	d116      	bne.n	7210 <led_specan+0xe8>
					break;
				case 1:
					RXLED_SET;
					break;
				case 2:
					USRLED_SET;
    71e2:	4b1a      	ldr	r3, [pc, #104]	; (724c <led_specan+0x124>)
    71e4:	e013      	b.n	720e <led_specan+0xe6>
		volatile u32 j = 500; while (--j); //FIXME crude delay
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
		if (lvl > rssi_threshold) {
			switch (i) {
				case 0:
					TXLED_SET;
    71e6:	f44f 7280 	mov.w	r2, #256	; 0x100
    71ea:	e000      	b.n	71ee <led_specan+0xc6>
					break;
				case 1:
					RXLED_SET;
    71ec:	2210      	movs	r2, #16
    71ee:	4b17      	ldr	r3, [pc, #92]	; (724c <led_specan+0x124>)
    71f0:	e00b      	b.n	720a <led_specan+0xe2>
					USRLED_SET;
					break;
			}
		}
		else {
			switch (i) {
    71f2:	2c01      	cmp	r4, #1
    71f4:	d007      	beq.n	7206 <led_specan+0xde>
    71f6:	d303      	bcc.n	7200 <led_specan+0xd8>
    71f8:	2c02      	cmp	r4, #2
    71fa:	d109      	bne.n	7210 <led_specan+0xe8>
					break;
				case 1:
					RXLED_CLR;
					break;
				case 2:
					USRLED_CLR;
    71fc:	4b14      	ldr	r3, [pc, #80]	; (7250 <led_specan+0x128>)
    71fe:	e006      	b.n	720e <led_specan+0xe6>
			}
		}
		else {
			switch (i) {
				case 0:
					TXLED_CLR;
    7200:	f44f 7280 	mov.w	r2, #256	; 0x100
    7204:	e000      	b.n	7208 <led_specan+0xe0>
					break;
				case 1:
					RXLED_CLR;
    7206:	2210      	movs	r2, #16
    7208:	4b11      	ldr	r3, [pc, #68]	; (7250 <led_specan+0x128>)
    720a:	601a      	str	r2, [r3, #0]
					break;
    720c:	e000      	b.n	7210 <led_specan+0xe8>
				case 2:
					USRLED_CLR;
    720e:	601c      	str	r4, [r3, #0]
					break;
			}
		}

		i = (i+1) % 3;
    7210:	2303      	movs	r3, #3
    7212:	3401      	adds	r4, #1
    7214:	fb94 f2f3 	sdiv	r2, r4, r3
    7218:	fb03 4412 	mls	r4, r3, r2, r4

		handle_usb(clkn);
    721c:	4b0d      	ldr	r3, [pc, #52]	; (7254 <led_specan+0x12c>)
					USRLED_CLR;
					break;
			}
		}

		i = (i+1) % 3;
    721e:	b2e4      	uxtb	r4, r4

		handle_usb(clkn);
    7220:	6818      	ldr	r0, [r3, #0]
    7222:	f000 fb63 	bl	78ec <handle_usb>

		cc2400_strobe(SRFOFF);
    7226:	2064      	movs	r0, #100	; 0x64
    7228:	f001 fc47 	bl	8aba <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    722c:	f001 fc3e 	bl	8aac <cc2400_status>
    7230:	0743      	lsls	r3, r0, #29
    7232:	d4fb      	bmi.n	722c <led_specan+0x104>
    7234:	e7a5      	b.n	7182 <led_specan+0x5a>
	}
}
    7236:	b004      	add	sp, #16
    7238:	bd10      	pop	{r4, pc}
    723a:	bf00      	nop
    723c:	0000aada 	.word	0x0000aada
    7240:	2009c058 	.word	0x2009c058
    7244:	10000e34 	.word	0x10000e34
    7248:	1000044c 	.word	0x1000044c
    724c:	2009c038 	.word	0x2009c038
    7250:	2009c03c 	.word	0x2009c03c
    7254:	10001024 	.word	0x10001024

00007258 <main>:

int main()
{
    7258:	b510      	push	{r4, lr}
	ubertooth_init();
    725a:	f001 fcf1 	bl	8c40 <ubertooth_init>
	clkn_init();
    725e:	f000 fc6f 	bl	7b40 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    7262:	4846      	ldr	r0, [pc, #280]	; (737c <main+0x124>)
    7264:	f000 faa0 	bl	77a8 <ubertooth_usb_init>
	cc2400_idle();
    7268:	f7fd f9a8 	bl	45bc <cc2400_idle>

	while (1) {
		handle_usb(clkn);
    726c:	4b44      	ldr	r3, [pc, #272]	; (7380 <main+0x128>)
		if(requested_mode != mode) {
    726e:	4c45      	ldr	r4, [pc, #276]	; (7384 <main+0x12c>)
	clkn_init();
	ubertooth_usb_init(vendor_request_handler);
	cc2400_idle();

	while (1) {
		handle_usb(clkn);
    7270:	6818      	ldr	r0, [r3, #0]
    7272:	f000 fb3b 	bl	78ec <handle_usb>
		if(requested_mode != mode) {
    7276:	7ca2      	ldrb	r2, [r4, #18]
    7278:	7c63      	ldrb	r3, [r4, #17]
    727a:	429a      	cmp	r2, r3
    727c:	d0f6      	beq.n	726c <main+0x14>
			switch (requested_mode) {
    727e:	7ca3      	ldrb	r3, [r4, #18]
    7280:	2b13      	cmp	r3, #19
    7282:	d8f3      	bhi.n	726c <main+0x14>
    7284:	a201      	add	r2, pc, #4	; (adr r2, 728c <main+0x34>)
    7286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    728a:	bf00      	nop
    728c:	00007269 	.word	0x00007269
    7290:	000072ed 	.word	0x000072ed
    7294:	000072f7 	.word	0x000072f7
    7298:	0000732b 	.word	0x0000732b
    729c:	00007355 	.word	0x00007355
    72a0:	00007339 	.word	0x00007339
    72a4:	00007349 	.word	0x00007349
    72a8:	0000735b 	.word	0x0000735b
    72ac:	00007301 	.word	0x00007301
    72b0:	00007305 	.word	0x00007305
    72b4:	00007317 	.word	0x00007317
    72b8:	000072dd 	.word	0x000072dd
    72bc:	0000731d 	.word	0x0000731d
    72c0:	00007361 	.word	0x00007361
    72c4:	000072e9 	.word	0x000072e9
    72c8:	0000736d 	.word	0x0000736d
    72cc:	00007377 	.word	0x00007377
    72d0:	0000730b 	.word	0x0000730b
    72d4:	0000730f 	.word	0x0000730f
    72d8:	00007321 	.word	0x00007321
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    72dc:	2001      	movs	r0, #1
    72de:	f001 fa39 	bl	8754 <wait>
					reset();
    72e2:	f001 fcb7 	bl	8c54 <reset>
					break;
    72e6:	e7c1      	b.n	726c <main+0x14>
				case MODE_AFH:
					mode = MODE_AFH;
    72e8:	230e      	movs	r3, #14
    72ea:	e000      	b.n	72ee <main+0x96>
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    72ec:	2301      	movs	r3, #1
    72ee:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    72f0:	f7fe f992 	bl	5618 <bt_stream_rx>
					break;
    72f4:	e7ba      	b.n	726c <main+0x14>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    72f6:	2302      	movs	r3, #2
    72f8:	7463      	strb	r3, [r4, #17]
					br_transmit();
    72fa:	f7fe fa3b 	bl	5774 <br_transmit>
					break;
    72fe:	e7b5      	b.n	726c <main+0x14>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    7300:	2308      	movs	r3, #8
    7302:	e7f4      	b.n	72ee <main+0x96>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    7304:	f7ff f9e6 	bl	66d4 <bt_follow_le>
					break;
    7308:	e7b0      	b.n	726c <main+0x14>
				//JWHUR cfo estimation tracking
				case MODE_BT_CFO_LE:
					bt_tracking_le(MODE_BT_CFO_LE);
    730a:	2011      	movs	r0, #17
    730c:	e000      	b.n	7310 <main+0xb8>
					break;
				case MODE_BT_RSSI_LE:
					bt_tracking_le(MODE_BT_RSSI_LE);
    730e:	2012      	movs	r0, #18
    7310:	f7ff f9f0 	bl	66f4 <bt_tracking_le>
					break;
    7314:	e7aa      	b.n	726c <main+0x14>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    7316:	f7ff fc25 	bl	6b64 <bt_promisc_le>
					break;
    731a:	e7a7      	b.n	726c <main+0x14>
				case MODE_BT_SLAVE_LE:
					mode = MODE_BT_SLAVE_LE;
    731c:	230c      	movs	r3, #12
    731e:	e000      	b.n	7322 <main+0xca>
					bt_slave_le();
					break;
				case MODE_BT_SYNC_LE:
					mode = MODE_BT_SYNC_LE;
    7320:	2313      	movs	r3, #19
    7322:	7463      	strb	r3, [r4, #17]
					bt_slave_le();
    7324:	f7ff fc58 	bl	6bd8 <bt_slave_le>
					break;
    7328:	e7a0      	b.n	726c <main+0x14>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    732a:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    732c:	4815      	ldr	r0, [pc, #84]	; (7384 <main+0x12c>)
    732e:	4916      	ldr	r1, [pc, #88]	; (7388 <main+0x130>)
				case MODE_BT_SYNC_LE:
					mode = MODE_BT_SYNC_LE;
					bt_slave_le();
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    7330:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    7332:	f000 ff15 	bl	8160 <cc2400_txtest>
					break;
    7336:	e799      	b.n	726c <main+0x14>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    7338:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    733a:	4813      	ldr	r0, [pc, #76]	; (7388 <main+0x130>)
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
					cc2400_txtest(&modulation, &channel);
					break;
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    733c:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    733e:	f000 fd13 	bl	7d68 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    7342:	2300      	movs	r3, #0
    7344:	74a3      	strb	r3, [r4, #18]
					break;
    7346:	e791      	b.n	726c <main+0x14>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    7348:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    734a:	480f      	ldr	r0, [pc, #60]	; (7388 <main+0x130>)
					mode = MODE_RANGE_TEST;
					cc2400_rangetest(&channel);
					requested_mode = MODE_IDLE;
					break;
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    734c:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    734e:	f000 fe4f 	bl	7ff0 <cc2400_repeater>
					break;
    7352:	e78b      	b.n	726c <main+0x14>
				case MODE_SPECAN:
					specan();
    7354:	f7ff fe5e 	bl	7014 <specan>
					break;
    7358:	e788      	b.n	726c <main+0x14>
				case MODE_LED_SPECAN:
					led_specan();
    735a:	f7ff fee5 	bl	7128 <led_specan>
					break;
    735e:	e785      	b.n	726c <main+0x14>
				case MODE_EGO:
					mode = MODE_EGO;
    7360:	230d      	movs	r3, #13
    7362:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    7364:	7d20      	ldrb	r0, [r4, #20]
    7366:	f001 f963 	bl	8630 <ego_main>
					break;
    736a:	e77f      	b.n	726c <main+0x14>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    736c:	230f      	movs	r3, #15
    736e:	7463      	strb	r3, [r4, #17]
					rx_generic();
    7370:	f7ff fdc6 	bl	6f00 <rx_generic>
					break;
    7374:	e77a      	b.n	726c <main+0x14>
				case MODE_TX_GENERIC:
					tx_generic();
    7376:	f7ff fdd3 	bl	6f20 <tx_generic>
					break;
    737a:	e777      	b.n	726c <main+0x14>
    737c:	000048dd 	.word	0x000048dd
    7380:	10001024 	.word	0x10001024
    7384:	10000e34 	.word	0x10000e34
    7388:	1000044c 	.word	0x1000044c

0000738c <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    738c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    738e:	4b42      	ldr	r3, [pc, #264]	; (7498 <precalc+0x10c>)
	syncword = 0;
    7390:	4842      	ldr	r0, [pc, #264]	; (749c <precalc+0x110>)
/* do all of the one time precalculation */
void precalc(void)
{
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    7392:	6819      	ldr	r1, [r3, #0]
	syncword = 0;
    7394:	2200      	movs	r2, #0
    7396:	2300      	movs	r3, #0
    7398:	e9c0 2300 	strd	r2, r3, [r0]
    739c:	2300      	movs	r3, #0
    739e:	0058      	lsls	r0, r3, #1

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    73a0:	224f      	movs	r2, #79	; 0x4f
    73a2:	fb90 f4f2 	sdiv	r4, r0, r2
    73a6:	fb02 0214 	mls	r2, r2, r4, r0
    73aa:	4e3d      	ldr	r6, [pc, #244]	; (74a0 <precalc+0x114>)
    73ac:	559a      	strb	r2, [r3, r6]
    73ae:	3301      	adds	r3, #1
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    73b0:	2b4f      	cmp	r3, #79	; 0x4f
    73b2:	d1f4      	bne.n	739e <precalc+0x12>
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    73b4:	4b3b      	ldr	r3, [pc, #236]	; (74a4 <precalc+0x118>)
    73b6:	f3c1 52c4 	ubfx	r2, r1, #23, #5
    73ba:	701a      	strb	r2, [r3, #0]
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    73bc:	f3c1 1407 	ubfx	r4, r1, #4, #8
    73c0:	f3c1 00c7 	ubfx	r0, r1, #3, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    73c4:	4b38      	ldr	r3, [pc, #224]	; (74a8 <precalc+0x11c>)
    73c6:	f3c1 42c3 	ubfx	r2, r1, #19, #4
	c1 = ((address >> 4) & 0x10) +
    73ca:	f000 0508 	and.w	r5, r0, #8
    73ce:	f004 0710 	and.w	r7, r4, #16
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    73d2:	701a      	strb	r2, [r3, #0]
	c1 = ((address >> 4) & 0x10) +
    73d4:	442f      	add	r7, r5
    73d6:	f3c1 0287 	ubfx	r2, r1, #2, #8
    73da:	f001 0501 	and.w	r5, r1, #1
    73de:	f3c1 0347 	ubfx	r3, r1, #1, #8
    73e2:	442f      	add	r7, r5
    73e4:	f002 0504 	and.w	r5, r2, #4
    73e8:	442f      	add	r7, r5
    73ea:	f003 0502 	and.w	r5, r3, #2
    73ee:	442f      	add	r7, r5
    73f0:	4d2e      	ldr	r5, [pc, #184]	; (74ac <precalc+0x120>)
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    73f2:	f004 0408 	and.w	r4, r4, #8


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    73f6:	702f      	strb	r7, [r5, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    73f8:	4d2d      	ldr	r5, [pc, #180]	; (74b0 <precalc+0x124>)
    73fa:	f3c1 2788 	ubfx	r7, r1, #10, #9
    73fe:	802f      	strh	r7, [r5, #0]
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
    7400:	098f      	lsrs	r7, r1, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    7402:	09cd      	lsrs	r5, r1, #7
    7404:	f007 0720 	and.w	r7, r7, #32
    7408:	f005 0540 	and.w	r5, r5, #64	; 0x40
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    740c:	0949      	lsrs	r1, r1, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    740e:	443d      	add	r5, r7
    7410:	f001 0110 	and.w	r1, r1, #16
    7414:	4429      	add	r1, r5
    7416:	440c      	add	r4, r1
    7418:	f000 0004 	and.w	r0, r0, #4
    741c:	4420      	add	r0, r4
    741e:	f002 0202 	and.w	r2, r2, #2
    7422:	4402      	add	r2, r0
    7424:	f003 0301 	and.w	r3, r3, #1
    7428:	4922      	ldr	r1, [pc, #136]	; (74b4 <precalc+0x128>)
    742a:	4413      	add	r3, r2
    742c:	700b      	strb	r3, [r1, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    742e:	4b22      	ldr	r3, [pc, #136]	; (74b8 <precalc+0x12c>)
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	b383      	cbz	r3, 7496 <precalc+0x10a>
    7434:	2400      	movs	r4, #0
    7436:	46a4      	mov	ip, r4
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    7438:	4f20      	ldr	r7, [pc, #128]	; (74bc <precalc+0x130>)
    743a:	2300      	movs	r3, #0
    743c:	5de2      	ldrb	r2, [r4, r7]

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    743e:	2500      	movs	r5, #0
    7440:	ea52 0103 	orrs.w	r1, r2, r3
    7444:	d008      	beq.n	7458 <precalc+0xcc>
		n &= n - 1;
    7446:	f112 30ff 	adds.w	r0, r2, #4294967295	; 0xffffffff
    744a:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    744e:	3501      	adds	r5, #1
		n &= n - 1;
    7450:	4002      	ands	r2, r0
    7452:	400b      	ands	r3, r1

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    7454:	b2ed      	uxtb	r5, r5
    7456:	e7f3      	b.n	7440 <precalc+0xb4>
    7458:	3401      	adds	r4, #1
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    745a:	4465      	add	r5, ip
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    745c:	2c0a      	cmp	r4, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    745e:	b2ed      	uxtb	r5, r5
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    7460:	d001      	beq.n	7466 <precalc+0xda>
			used_channels += count_bits((uint64_t) afh_map[i]);
    7462:	46ac      	mov	ip, r5
    7464:	e7e8      	b.n	7438 <precalc+0xac>
    7466:	4b16      	ldr	r3, [pc, #88]	; (74c0 <precalc+0x134>)
    7468:	701d      	strb	r5, [r3, #0]
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    746a:	2300      	movs	r3, #0
    746c:	461a      	mov	r2, r3
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    746e:	214f      	movs	r1, #79	; 0x4f
    7470:	fb93 f0f1 	sdiv	r0, r3, r1
    7474:	fb01 3010 	mls	r0, r1, r0, r3
    7478:	b2c1      	uxtb	r1, r0
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    747a:	08cc      	lsrs	r4, r1, #3
    747c:	5d3c      	ldrb	r4, [r7, r4]
    747e:	f000 0007 	and.w	r0, r0, #7
    7482:	fa44 f000 	asr.w	r0, r4, r0
    7486:	07c0      	lsls	r0, r0, #31
    7488:	d502      	bpl.n	7490 <precalc+0x104>
				bank[j++] = chan;
    748a:	1c50      	adds	r0, r2, #1
    748c:	54b1      	strb	r1, [r6, r2]
    748e:	b2c2      	uxtb	r2, r0
    7490:	3302      	adds	r3, #2
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    7492:	2b9e      	cmp	r3, #158	; 0x9e
    7494:	d1eb      	bne.n	746e <precalc+0xe2>
    7496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7498:	10001528 	.word	0x10001528
    749c:	10001178 	.word	0x10001178
    74a0:	1000158d 	.word	0x1000158d
    74a4:	1000158b 	.word	0x1000158b
    74a8:	10001538 	.word	0x10001538
    74ac:	1000158c 	.word	0x1000158c
    74b0:	1000153a 	.word	0x1000153a
    74b4:	100015dc 	.word	0x100015dc
    74b8:	100014a7 	.word	0x100014a7
    74bc:	1000100b 	.word	0x1000100b
    74c0:	10001009 	.word	0x10001009

000074c4 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    74c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74c6:	b087      	sub	sp, #28
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    74c8:	f3c0 02d8 	ubfx	r2, r0, #3, #25
	f = base_f % 79;
    74cc:	214f      	movs	r1, #79	; 0x4f
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    74ce:	f022 020f 	bic.w	r2, r2, #15
	f = base_f % 79;
    74d2:	fbb2 f7f1 	udiv	r7, r2, r1
    74d6:	fb01 2717 	mls	r7, r1, r7, r2
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    74da:	493f      	ldr	r1, [pc, #252]	; (75d8 <next_hop+0x114>)
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
    74dc:	f3c0 0340 	ubfx	r3, r0, #1, #1
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    74e0:	f891 c000 	ldrb.w	ip, [r1]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    74e4:	211f      	movs	r1, #31

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    74e6:	015e      	lsls	r6, r3, #5
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    74e8:	434b      	muls	r3, r1
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    74ea:	ea8c 4c10 	eor.w	ip, ip, r0, lsr #16
    74ee:	f00c 0c1f 	and.w	ip, ip, #31
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    74f2:	ea8c 0c03 	eor.w	ip, ip, r3
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    74f6:	4b39      	ldr	r3, [pc, #228]	; (75dc <next_hop+0x118>)

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    74f8:	b2b6      	uxth	r6, r6
	a = (a1 ^ (clock >> 21)) & 0x1f;
    74fa:	781c      	ldrb	r4, [r3, #0]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    74fc:	4b38      	ldr	r3, [pc, #224]	; (75e0 <next_hop+0x11c>)
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    74fe:	ea84 5450 	eor.w	r4, r4, r0, lsr #21
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    7502:	781b      	ldrb	r3, [r3, #0]
    7504:	eb04 0490 	add.w	r4, r4, r0, lsr #2
    7508:	405c      	eors	r4, r3
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    750a:	4b36      	ldr	r3, [pc, #216]	; (75e4 <next_hop+0x120>)

/* 5 bit permutation */
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    750c:	400c      	ands	r4, r1
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    750e:	881b      	ldrh	r3, [r3, #0]
    7510:	ea83 10d0 	eor.w	r0, r3, r0, lsr #7
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
	p_high &= 0x1f;
	p_low &= 0x1ff;
    7514:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7518:	b280      	uxth	r0, r0
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    751a:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
    751c:	fa40 f103 	asr.w	r1, r0, r3
    7520:	ad02      	add	r5, sp, #8
    7522:	f001 0101 	and.w	r1, r1, #1
    7526:	5559      	strb	r1, [r3, r5]
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7528:	3301      	adds	r3, #1
    752a:	2b09      	cmp	r3, #9
    752c:	d1f6      	bne.n	751c <next_hop+0x58>
    752e:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;
    7530:	fa4c f003 	asr.w	r0, ip, r3
    7534:	18e9      	adds	r1, r5, r3
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    7536:	3301      	adds	r3, #1
		p[i+9] = (p_high >> i) & 0x01;
    7538:	f000 0001 	and.w	r0, r0, #1
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    753c:	2b05      	cmp	r3, #5
		p[i+9] = (p_high >> i) & 0x01;
    753e:	7248      	strb	r0, [r1, #9]
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    7540:	d1f6      	bne.n	7530 <next_hop+0x6c>
    7542:	2300      	movs	r3, #0
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;
    7544:	fa44 f103 	asr.w	r1, r4, r3
    7548:	f001 0101 	and.w	r1, r1, #1
    754c:	f80d 1003 	strb.w	r1, [sp, r3]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    7550:	3301      	adds	r3, #1
    7552:	2b05      	cmp	r3, #5
    7554:	d1f6      	bne.n	7544 <next_hop+0x80>
    7556:	230d      	movs	r3, #13
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    7558:	5ce9      	ldrb	r1, [r5, r3]
    755a:	b179      	cbz	r1, 757c <next_hop+0xb8>
			tmp = z_bit[index1[i]];
    755c:	4922      	ldr	r1, [pc, #136]	; (75e8 <next_hop+0x124>)
    755e:	a806      	add	r0, sp, #24
    7560:	5c5c      	ldrb	r4, [r3, r1]
			z_bit[index1[i]] = z_bit[index2[i]];
    7562:	310e      	adds	r1, #14

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    7564:	4404      	add	r4, r0
			z_bit[index1[i]] = z_bit[index2[i]];
    7566:	5c58      	ldrb	r0, [r3, r1]
    7568:	a906      	add	r1, sp, #24
    756a:	4408      	add	r0, r1

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    756c:	f814 cc18 	ldrb.w	ip, [r4, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    7570:	f810 1c18 	ldrb.w	r1, [r0, #-24]
    7574:	f804 1c18 	strb.w	r1, [r4, #-24]
			z_bit[index2[i]] = tmp;
    7578:	f800 cc18 	strb.w	ip, [r0, #-24]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    757c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    7580:	d2ea      	bcs.n	7558 <next_hop+0x94>
    7582:	2100      	movs	r1, #0
    7584:	460b      	mov	r3, r1
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
		output += z_bit[i] << i;
    7586:	f81d 0003 	ldrb.w	r0, [sp, r3]
    758a:	4098      	lsls	r0, r3
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    758c:	3301      	adds	r3, #1
		output += z_bit[i] << i;
    758e:	4401      	add	r1, r0
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    7590:	2b05      	cmp	r3, #5
		output += z_bit[i] << i;
    7592:	b2c9      	uxtb	r1, r1
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    7594:	d1f7      	bne.n	7586 <next_hop+0xc2>
	perm = perm5(
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    7596:	4b15      	ldr	r3, [pc, #84]	; (75ec <next_hop+0x128>)
    7598:	4437      	add	r7, r6
    759a:	781b      	ldrb	r3, [r3, #0]
    759c:	4419      	add	r1, r3
    759e:	440f      	add	r7, r1
    75a0:	234f      	movs	r3, #79	; 0x4f
    75a2:	fbb7 f0f3 	udiv	r0, r7, r3
    75a6:	fb03 7710 	mls	r7, r3, r0, r7
    75aa:	4b11      	ldr	r3, [pc, #68]	; (75f0 <next_hop+0x12c>)
    75ac:	5dd8      	ldrb	r0, [r3, r7]
	if(afh_enabled) {
    75ae:	4b11      	ldr	r3, [pc, #68]	; (75f4 <next_hop+0x130>)
    75b0:	781b      	ldrb	r3, [r3, #0]
    75b2:	b16b      	cbz	r3, 75d0 <next_hop+0x10c>
		f_dash = base_f % used_channels;
    75b4:	4b10      	ldr	r3, [pc, #64]	; (75f8 <next_hop+0x134>)
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	fbb2 f0f3 	udiv	r0, r2, r3
    75bc:	fb03 2210 	mls	r2, r3, r0, r2
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    75c0:	4416      	add	r6, r2
    75c2:	440e      	add	r6, r1
    75c4:	fbb6 f1f3 	udiv	r1, r6, r3
    75c8:	fb03 6611 	mls	r6, r3, r1, r6
    75cc:	4b0b      	ldr	r3, [pc, #44]	; (75fc <next_hop+0x138>)
    75ce:	5d98      	ldrb	r0, [r3, r6]
	}
	return (2402 + next_channel);

}
    75d0:	f600 1062 	addw	r0, r0, #2402	; 0x962
    75d4:	b007      	add	sp, #28
    75d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75d8:	1000158c 	.word	0x1000158c
    75dc:	1000158b 	.word	0x1000158b
    75e0:	10001538 	.word	0x10001538
    75e4:	1000153a 	.word	0x1000153a
    75e8:	0000aaeb 	.word	0x0000aaeb
    75ec:	100015dc 	.word	0x100015dc
    75f0:	1000158d 	.word	0x1000158d
    75f4:	100014a7 	.word	0x100014a7
    75f8:	10001009 	.word	0x10001009
    75fc:	1000153c 	.word	0x1000153c

00007600 <btle_channel_index>:
}

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
    7600:	0840      	lsrs	r0, r0, #1
    7602:	d00a      	beq.n	761a <btle_channel_index+0x1a>
		idx = 37;
	else if (channel < 12)
    7604:	280b      	cmp	r0, #11
    7606:	d801      	bhi.n	760c <btle_channel_index+0xc>
		idx = channel - 1;
    7608:	3801      	subs	r0, #1
    760a:	e004      	b.n	7616 <btle_channel_index+0x16>
	else if (channel == 12)
    760c:	280c      	cmp	r0, #12
    760e:	d006      	beq.n	761e <btle_channel_index+0x1e>
		idx = 38;
	else if (channel < 39)
    7610:	2826      	cmp	r0, #38	; 0x26
    7612:	d806      	bhi.n	7622 <btle_channel_index+0x22>
		idx = channel - 2;
    7614:	3802      	subs	r0, #2
    7616:	b2c0      	uxtb	r0, r0
    7618:	4770      	bx	lr

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
		idx = 37;
    761a:	2025      	movs	r0, #37	; 0x25
    761c:	4770      	bx	lr
	else if (channel < 12)
		idx = channel - 1;
	else if (channel == 12)
		idx = 38;
    761e:	2026      	movs	r0, #38	; 0x26
    7620:	4770      	bx	lr
	else if (channel < 39)
		idx = channel - 2;
	else
		idx = 39;
    7622:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    7624:	4770      	bx	lr

00007626 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    7626:	280a      	cmp	r0, #10
    7628:	d802      	bhi.n	7630 <btle_channel_index_to_phys+0xa>
		phys = 2404 + 2 * idx;
    762a:	f200 40b2 	addw	r0, r0, #1202	; 0x4b2
    762e:	e003      	b.n	7638 <btle_channel_index_to_phys+0x12>
	else if (idx < 37)
    7630:	2824      	cmp	r0, #36	; 0x24
    7632:	d803      	bhi.n	763c <btle_channel_index_to_phys+0x16>
		phys = 2428 + 2 * (idx - 11);
    7634:	f200 40b3 	addw	r0, r0, #1203	; 0x4b3
    7638:	0040      	lsls	r0, r0, #1
    763a:	4770      	bx	lr
	else if (idx == 37)
    763c:	2825      	cmp	r0, #37	; 0x25
    763e:	d007      	beq.n	7650 <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
		phys = 2426;
    7640:	f640 137a 	movw	r3, #2426	; 0x97a
    7644:	2826      	cmp	r0, #38	; 0x26
    7646:	bf0c      	ite	eq
    7648:	4618      	moveq	r0, r3
    764a:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    764e:	4770      	bx	lr
	if (idx < 11)
		phys = 2404 + 2 * idx;
	else if (idx < 37)
		phys = 2428 + 2 * (idx - 11);
	else if (idx == 37)
		phys = 2402;
    7650:	f640 1062 	movw	r0, #2402	; 0x962
	else if (idx == 38)
		phys = 2426;
	else
		phys = 2480;
	return phys;
}
    7654:	4770      	bx	lr

00007656 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    7656:	b538      	push	{r3, r4, r5, lr}
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    7658:	7d45      	ldrb	r5, [r0, #21]

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    765a:	4604      	mov	r4, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    765c:	4628      	mov	r0, r5
    765e:	f7ff ffe2 	bl	7626 <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    7662:	7da2      	ldrb	r2, [r4, #22]
    7664:	2325      	movs	r3, #37	; 0x25
    7666:	442a      	add	r2, r5
    7668:	fb92 f1f3 	sdiv	r1, r2, r3
    766c:	fb03 2311 	mls	r3, r3, r1, r2
    7670:	7563      	strb	r3, [r4, #21]
	return phys;
}
    7672:	bd38      	pop	{r3, r4, r5, pc}

00007674 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    7674:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    7676:	2300      	movs	r3, #0
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
    7678:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    767c:	4293      	cmp	r3, r2
    767e:	da14      	bge.n	76aa <btle_calc_crc+0x36>
		u8 cur = data[i];
    7680:	5ccd      	ldrb	r5, [r1, r3]
    7682:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			int next_bit = (state ^ cur) & 1;
    7684:	ea85 0600 	eor.w	r6, r5, r0
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    7688:	f016 0f01 	tst.w	r6, #1
    768c:	ea4f 0555 	mov.w	r5, r5, lsr #1
    7690:	ea4f 0050 	mov.w	r0, r0, lsr #1
    7694:	d005      	beq.n	76a2 <btle_calc_crc+0x2e>
				state |= 1 << 23;
    7696:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
				state ^= lfsr_mask;
    769a:	f480 00b4 	eor.w	r0, r0, #5898240	; 0x5a0000
    769e:	f480 40c0 	eor.w	r0, r0, #24576	; 0x6000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    76a2:	3c01      	subs	r4, #1
    76a4:	d1ee      	bne.n	7684 <btle_calc_crc+0x10>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    76a6:	3301      	adds	r3, #1
    76a8:	e7e8      	b.n	767c <btle_calc_crc+0x8>
			}
		}
	}

	return state;
}
    76aa:	bd70      	pop	{r4, r5, r6, pc}

000076ac <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    76ac:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    76ae:	3a01      	subs	r2, #1
    76b0:	2a00      	cmp	r2, #0
    76b2:	db14      	blt.n	76de <btle_reverse_crc+0x32>
		u8 cur = data[i];
    76b4:	5c8d      	ldrb	r5, [r1, r2]
    76b6:	2307      	movs	r3, #7
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
    76b8:	0dc4      	lsrs	r4, r0, #23
			state = (state << 1) & 0xffffff;
    76ba:	0040      	lsls	r0, r0, #1
    76bc:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    76c0:	fa45 f003 	asr.w	r0, r5, r3
    76c4:	f000 0001 	and.w	r0, r0, #1
    76c8:	4060      	eors	r0, r4
    76ca:	4330      	orrs	r0, r6
			if (top_bit)
    76cc:	b11c      	cbz	r4, 76d6 <btle_reverse_crc+0x2a>
				state ^= lfsr_mask;
    76ce:	f480 0034 	eor.w	r0, r0, #11796480	; 0xb40000
    76d2:	f480 4040 	eor.w	r0, r0, #49152	; 0xc000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    76d6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    76da:	d2ed      	bcs.n	76b8 <btle_reverse_crc+0xc>
    76dc:	e7e7      	b.n	76ae <btle_reverse_crc+0x2>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    76de:	2300      	movs	r3, #0
    76e0:	461a      	mov	r2, r3
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    76e2:	fa20 f103 	lsr.w	r1, r0, r3
    76e6:	f1c3 0417 	rsb	r4, r3, #23
    76ea:	f001 0101 	and.w	r1, r1, #1
    76ee:	40a1      	lsls	r1, r4
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    76f0:	3301      	adds	r3, #1
    76f2:	2b18      	cmp	r3, #24
		ret |= ((state >> i) & 1) << (23 - i);
    76f4:	ea42 0201 	orr.w	r2, r2, r1
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    76f8:	d1f3      	bne.n	76e2 <btle_reverse_crc+0x36>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
}
    76fa:	4610      	mov	r0, r2
    76fc:	bd70      	pop	{r4, r5, r6, pc}
    76fe:	0000      	movs	r0, r0

00007700 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    7700:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    7702:	2300      	movs	r3, #0
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    7704:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    7708:	4293      	cmp	r3, r2
    770a:	da09      	bge.n	7720 <btle_crcgen_lut+0x20>
		key = data[i] ^ (state & 0xff);
    770c:	5ccd      	ldrb	r5, [r1, r3]
		state = (state >> 8) ^ btle_crc_lut[key];
    770e:	4c05      	ldr	r4, [pc, #20]	; (7724 <btle_crcgen_lut+0x24>)
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
		key = data[i] ^ (state & 0xff);
    7710:	4045      	eors	r5, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    7712:	b2ed      	uxtb	r5, r5
    7714:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    7718:	3301      	adds	r3, #1
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
    771a:	ea84 2010 	eor.w	r0, r4, r0, lsr #8
    771e:	e7f3      	b.n	7708 <btle_crcgen_lut+0x8>
	}
	return state;
}
    7720:	bd30      	pop	{r4, r5, pc}
    7722:	bf00      	nop
    7724:	100004a0 	.word	0x100004a0

00007728 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    7728:	b513      	push	{r0, r1, r4, lr}
    772a:	460b      	mov	r3, r1
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    772c:	8841      	ldrh	r1, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    772e:	6812      	ldr	r2, [r2, #0]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    7730:	f8ad 1004 	strh.w	r1, [sp, #4]
    7734:	8881      	ldrh	r1, [r0, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    7736:	7840      	ldrb	r0, [r0, #1]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    7738:	f8ad 1006 	strh.w	r1, [sp, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    773c:	4904      	ldr	r1, [pc, #16]	; (7750 <usb_vendor_request_handler+0x28>)
    773e:	680c      	ldr	r4, [r1, #0]
    7740:	a901      	add	r1, sp, #4
    7742:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    7744:	1e43      	subs	r3, r0, #1
    7746:	4258      	negs	r0, r3
    7748:	4158      	adcs	r0, r3
    774a:	b002      	add	sp, #8
    774c:	bd10      	pop	{r4, pc}
    774e:	bf00      	nop
    7750:	100036e4 	.word	0x100036e4

00007754 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    7754:	b530      	push	{r4, r5, lr}
    7756:	b087      	sub	sp, #28
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    7758:	ad01      	add	r5, sp, #4
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
	return (BOOL) (rv==1);
}


void set_serial_descriptor(u8 *descriptors) {
    775a:	4604      	mov	r4, r0
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    775c:	4669      	mov	r1, sp
    775e:	4628      	mov	r0, r5
    7760:	f001 faae 	bl	8cc0 <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    7764:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7768:	b9e2      	cbnz	r2, 77a4 <set_serial_descriptor+0x50>
    776a:	4623      	mov	r3, r4
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    776c:	3201      	adds	r2, #1
    776e:	5ca9      	ldrb	r1, [r5, r2]
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    7770:	2000      	movs	r0, #0
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    7772:	090c      	lsrs	r4, r1, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7774:	2c09      	cmp	r4, #9
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
    7776:	f001 010f 	and.w	r1, r1, #15
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    777a:	bf86      	itte	hi
    777c:	3457      	addhi	r4, #87	; 0x57
    777e:	b2e4      	uxtbhi	r4, r4
    7780:	3430      	addls	r4, #48	; 0x30
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7782:	2909      	cmp	r1, #9
    7784:	bf86      	itte	hi
    7786:	3157      	addhi	r1, #87	; 0x57
    7788:	b2c9      	uxtbhi	r1, r1
    778a:	3130      	addls	r1, #48	; 0x30
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    778c:	2a10      	cmp	r2, #16
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    778e:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
			desc[1+ i * 4] = 0;
    7792:	f883 007d 	strb.w	r0, [r3, #125]	; 0x7d
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7796:	f883 107e 	strb.w	r1, [r3, #126]	; 0x7e
			desc[3 + i * 4] = 0;
    779a:	f883 007f 	strb.w	r0, [r3, #127]	; 0x7f
    779e:	f103 0304 	add.w	r3, r3, #4
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    77a2:	d1e3      	bne.n	776c <set_serial_descriptor+0x18>
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[3 + i * 4] = 0;
		}
	}
}
    77a4:	b007      	add	sp, #28
    77a6:	bd30      	pop	{r4, r5, pc}

000077a8 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    77a8:	b538      	push	{r3, r4, r5, lr}
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    77aa:	4c0d      	ldr	r4, [pc, #52]	; (77e0 <ubertooth_usb_init+0x38>)
		}
	}
}

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    77ac:	4605      	mov	r5, r0
	// initialise stack
	USBInit();
    77ae:	f001 fb65 	bl	8e7c <USBInit>

	set_serial_descriptor(abDescriptors);
    77b2:	4620      	mov	r0, r4
    77b4:	f7ff ffce 	bl	7754 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    77b8:	4620      	mov	r0, r4
    77ba:	f001 fd9d 	bl	92f8 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    77be:	4b09      	ldr	r3, [pc, #36]	; (77e4 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    77c0:	4a09      	ldr	r2, [pc, #36]	; (77e8 <ubertooth_usb_init+0x40>)
    77c2:	2002      	movs	r0, #2
    77c4:	4909      	ldr	r1, [pc, #36]	; (77ec <ubertooth_usb_init+0x44>)
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);

	// Request handler
	v_req_handler = vendor_req_handler;
    77c6:	601d      	str	r5, [r3, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    77c8:	f001 fb4e 	bl	8e68 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    77cc:	4908      	ldr	r1, [pc, #32]	; (77f0 <ubertooth_usb_init+0x48>)
    77ce:	20ff      	movs	r0, #255	; 0xff
    77d0:	f001 fd78 	bl	92c4 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    77d4:	2001      	movs	r0, #1
    77d6:	f001 fbe6 	bl	8fa6 <USBHwConnect>

	return 0;
}
    77da:	2000      	movs	r0, #0
    77dc:	bd38      	pop	{r3, r4, r5, pc}
    77de:	bf00      	nop
    77e0:	100008a0 	.word	0x100008a0
    77e4:	100036e4 	.word	0x100036e4
    77e8:	100035e0 	.word	0x100035e0
    77ec:	00007729 	.word	0x00007729
    77f0:	0000ab07 	.word	0x0000ab07

000077f4 <queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    77f4:	4b04      	ldr	r3, [pc, #16]	; (7808 <queue_init+0x14>)
    77f6:	2100      	movs	r1, #0
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    77f8:	4804      	ldr	r0, [pc, #16]	; (780c <queue_init+0x18>)
    77fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    77fe:	6019      	str	r1, [r3, #0]
	tail = 0;
    7800:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    7802:	f7fc bd15 	b.w	4230 <memset>
    7806:	bf00      	nop
    7808:	10000e7c 	.word	0x10000e7c
    780c:	100015e0 	.word	0x100015e0

00007810 <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
    7810:	4b0a      	ldr	r3, [pc, #40]	; (783c <usb_enqueue+0x2c>)
    7812:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    7814:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    7816:	f001 017f 	and.w	r1, r1, #127	; 0x7f
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    781a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    781e:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    7820:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7824:	4291      	cmp	r1, r2
    7826:	d006      	beq.n	7836 <usb_enqueue+0x26>
		return NULL;
	}

	++tail;
    7828:	685a      	ldr	r2, [r3, #4]
    782a:	3201      	adds	r2, #1
    782c:	605a      	str	r2, [r3, #4]
	return &fifo[t];
    782e:	4b04      	ldr	r3, [pc, #16]	; (7840 <usb_enqueue+0x30>)
    7830:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    7834:	4770      	bx	lr
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    7836:	2000      	movs	r0, #0
	}

	++tail;
	return &fifo[t];

}
    7838:	4770      	bx	lr
    783a:	bf00      	nop
    783c:	10000e7c 	.word	0x10000e7c
    7840:	100015e0 	.word	0x100015e0

00007844 <usb_enqueue_time>:

//JWHUR
usb_time_rx *usb_enqueue_time(void)
{
	u8 h = head & 0x7F;
    7844:	4b0a      	ldr	r3, [pc, #40]	; (7870 <usb_enqueue_time+0x2c>)
    7846:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    7848:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    784a:	f001 017f 	and.w	r1, r1, #127	; 0x7f

//JWHUR
usb_time_rx *usb_enqueue_time(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    784e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    7852:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    7854:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7858:	4291      	cmp	r1, r2
    785a:	d006      	beq.n	786a <usb_enqueue_time+0x26>
		return NULL;
	}

	++tail;
    785c:	685a      	ldr	r2, [r3, #4]
    785e:	3201      	adds	r2, #1
    7860:	605a      	str	r2, [r3, #4]
	return &fifo[t];
    7862:	4b04      	ldr	r3, [pc, #16]	; (7874 <usb_enqueue_time+0x30>)
    7864:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    7868:	4770      	bx	lr
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    786a:	2000      	movs	r0, #0
	}

	++tail;
	return &fifo[t];

}
    786c:	4770      	bx	lr
    786e:	bf00      	nop
    7870:	10000e7c 	.word	0x10000e7c
    7874:	100015e0 	.word	0x100015e0

00007878 <dequeue>:


usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    7878:	4b08      	ldr	r3, [pc, #32]	; (789c <dequeue+0x24>)
    787a:	6818      	ldr	r0, [r3, #0]
	u8 t = tail & 0x7F;
    787c:	685a      	ldr	r2, [r3, #4]
}


usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    787e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
    7882:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7886:	4290      	cmp	r0, r2
    7888:	d006      	beq.n	7898 <dequeue+0x20>
		return NULL;
	}

	++head;
    788a:	681a      	ldr	r2, [r3, #0]
    788c:	3201      	adds	r2, #1
    788e:	601a      	str	r2, [r3, #0]
	return &fifo[h];
    7890:	4b03      	ldr	r3, [pc, #12]	; (78a0 <dequeue+0x28>)
    7892:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    7896:	4770      	bx	lr
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
		return NULL;
    7898:	2000      	movs	r0, #0
	}

	++head;
	return &fifo[h];
}
    789a:	4770      	bx	lr
    789c:	10000e7c 	.word	0x10000e7c
    78a0:	100015e0 	.word	0x100015e0

000078a4 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    78a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    78a6:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    78a8:	f7ff ffe6 	bl	7878 <dequeue>
    78ac:	4b0d      	ldr	r3, [pc, #52]	; (78e4 <dequeue_send+0x40>)
	if (pkt != NULL) {
    78ae:	4604      	mov	r4, r0
    78b0:	b138      	cbz	r0, 78c2 <dequeue_send+0x1e>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    78b2:	2082      	movs	r0, #130	; 0x82
    78b4:	4621      	mov	r1, r4
    78b6:	2240      	movs	r2, #64	; 0x40

int dequeue_send(u32 clkn)
{
	usb_pkt_rx *pkt = dequeue();
	if (pkt != NULL) {
		last_usb_pkt = clkn;
    78b8:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    78ba:	f001 fba5 	bl	9008 <USBHwEPWrite>
		return 1;
    78be:	2001      	movs	r0, #1
    78c0:	e00e      	b.n	78e0 <dequeue_send+0x3c>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    78c2:	689a      	ldr	r2, [r3, #8]
    78c4:	4908      	ldr	r1, [pc, #32]	; (78e8 <dequeue_send+0x44>)
    78c6:	1aaa      	subs	r2, r5, r2
    78c8:	428a      	cmp	r2, r1
    78ca:	d908      	bls.n	78de <dequeue_send+0x3a>
			u8 pkt_type = KEEP_ALIVE;
    78cc:	2203      	movs	r2, #3
    78ce:	a902      	add	r1, sp, #8
    78d0:	f801 2d01 	strb.w	r2, [r1, #-1]!
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    78d4:	2082      	movs	r0, #130	; 0x82
    78d6:	2201      	movs	r2, #1
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
		return 1;
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
			u8 pkt_type = KEEP_ALIVE;
			last_usb_pkt = clkn;
    78d8:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    78da:	f001 fb95 	bl	9008 <USBHwEPWrite>
		}
		return 0;
    78de:	4620      	mov	r0, r4
	}
}
    78e0:	b003      	add	sp, #12
    78e2:	bd30      	pop	{r4, r5, pc}
    78e4:	10000e7c 	.word	0x10000e7c
    78e8:	00061a80 	.word	0x00061a80

000078ec <handle_usb>:

void handle_usb(u32 clkn)
{
    78ec:	b538      	push	{r3, r4, r5, lr}
    78ee:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    78f0:	2082      	movs	r0, #130	; 0x82
    78f2:	f001 fb63 	bl	8fbc <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    78f6:	0681      	lsls	r1, r0, #26
void handle_usb(u32 clkn)
{
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    78f8:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    78fa:	d402      	bmi.n	7902 <handle_usb+0x16>
		dequeue_send(clkn);
    78fc:	4620      	mov	r0, r4
    78fe:	f7ff ffd1 	bl	78a4 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    7902:	066a      	lsls	r2, r5, #25
    7904:	d402      	bmi.n	790c <handle_usb+0x20>
		dequeue_send(clkn);
    7906:	4620      	mov	r0, r4
    7908:	f7ff ffcc 	bl	78a4 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    790c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!(epstat & EPSTAT_B2FULL)) {
		dequeue_send(clkn);
	}

	/* polled "interrupt" */
	USBHwISR();
    7910:	f001 bbe6 	b.w	90e0 <USBHwISR>

00007914 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    7914:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    7916:	229e      	movs	r2, #158	; 0x9e
    7918:	4807      	ldr	r0, [pc, #28]	; (7938 <rssi_reset+0x24>)
    791a:	2100      	movs	r1, #0
    791c:	f7fc fc88 	bl	4230 <memset>

	rssi_count = 0;
    7920:	4a06      	ldr	r2, [pc, #24]	; (793c <rssi_reset+0x28>)
    7922:	2300      	movs	r3, #0
    7924:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    7926:	4a06      	ldr	r2, [pc, #24]	; (7940 <rssi_reset+0x2c>)
    7928:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    792a:	4b06      	ldr	r3, [pc, #24]	; (7944 <rssi_reset+0x30>)
    792c:	2280      	movs	r2, #128	; 0x80
    792e:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    7930:	4b05      	ldr	r3, [pc, #20]	; (7948 <rssi_reset+0x34>)
    7932:	227f      	movs	r2, #127	; 0x7f
    7934:	701a      	strb	r2, [r3, #0]
    7936:	bd08      	pop	{r3, pc}
    7938:	10000e88 	.word	0x10000e88
    793c:	100014a6 	.word	0x100014a6
    7940:	100036e8 	.word	0x100036e8
    7944:	10001008 	.word	0x10001008
    7948:	1000100a 	.word	0x1000100a

0000794c <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    794c:	4b0b      	ldr	r3, [pc, #44]	; (797c <rssi_add+0x30>)
    794e:	f993 2000 	ldrsb.w	r2, [r3]
    7952:	4290      	cmp	r0, r2
    7954:	bfa8      	it	ge
    7956:	4602      	movge	r2, r0
    7958:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    795a:	4b09      	ldr	r3, [pc, #36]	; (7980 <rssi_add+0x34>)
    795c:	f993 2000 	ldrsb.w	r2, [r3]
    7960:	4290      	cmp	r0, r2
    7962:	bfb8      	it	lt
    7964:	4602      	movlt	r2, r0
    7966:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    7968:	4b06      	ldr	r3, [pc, #24]	; (7984 <rssi_add+0x38>)
    796a:	681a      	ldr	r2, [r3, #0]
    796c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    7970:	6018      	str	r0, [r3, #0]
	rssi_count += 1;
    7972:	4b05      	ldr	r3, [pc, #20]	; (7988 <rssi_add+0x3c>)
    7974:	781a      	ldrb	r2, [r3, #0]
    7976:	3201      	adds	r2, #1
    7978:	701a      	strb	r2, [r3, #0]
    797a:	4770      	bx	lr
    797c:	10001008 	.word	0x10001008
    7980:	1000100a 	.word	0x1000100a
    7984:	100036e8 	.word	0x100036e8
    7988:	100014a6 	.word	0x100014a6

0000798c <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    798c:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    798e:	f640 1362 	movw	r3, #2402	; 0x962
    7992:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7996:	bf38      	it	cc
    7998:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    799a:	4b0d      	ldr	r3, [pc, #52]	; (79d0 <rssi_iir_update+0x44>)
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;

	int i = channel - 2402;
    799c:	f6a0 1062 	subw	r0, r0, #2402	; 0x962

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    79a0:	781b      	ldrb	r3, [r3, #0]
    79a2:	b123      	cbz	r3, 79ae <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    79a4:	4a0b      	ldr	r2, [pc, #44]	; (79d4 <rssi_iir_update+0x48>)
    79a6:	6812      	ldr	r2, [r2, #0]
    79a8:	3280      	adds	r2, #128	; 0x80
    79aa:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    79ae:	2403      	movs	r4, #3
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    79b0:	4a09      	ldr	r2, [pc, #36]	; (79d8 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    79b2:	4363      	muls	r3, r4
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    79b4:	f932 1010 	ldrsh.w	r1, [r2, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    79b8:	24fd      	movs	r4, #253	; 0xfd
    79ba:	fb04 3301 	mla	r3, r4, r1, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    79be:	f44f 7180 	mov.w	r1, #256	; 0x100
    79c2:	3380      	adds	r3, #128	; 0x80
    79c4:	fb93 f3f1 	sdiv	r3, r3, r1
    79c8:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    79cc:	bd10      	pop	{r4, pc}
    79ce:	bf00      	nop
    79d0:	100014a6 	.word	0x100014a6
    79d4:	100036e8 	.word	0x100036e8
    79d8:	10000e88 	.word	0x10000e88

000079dc <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    79dc:	f640 1362 	movw	r3, #2402	; 0x962
    79e0:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    79e4:	bf38      	it	cc
    79e6:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    79e8:	4a05      	ldr	r2, [pc, #20]	; (7a00 <rssi_get_avg+0x24>)
    79ea:	f6a0 1362 	subw	r3, r0, #2402	; 0x962
    79ee:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
    79f2:	f44f 7380 	mov.w	r3, #256	; 0x100
    79f6:	3080      	adds	r0, #128	; 0x80
    79f8:	fb90 f0f3 	sdiv	r0, r0, r3
}
    79fc:	b240      	sxtb	r0, r0
    79fe:	4770      	bx	lr
    7a00:	10000e88 	.word	0x10000e88

00007a04 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    7a04:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    7a06:	4d15      	ldr	r5, [pc, #84]	; (7a5c <cs_threshold_calc_and_set+0x58>)
    7a08:	782c      	ldrb	r4, [r5, #0]
    7a0a:	b263      	sxtb	r3, r4
    7a0c:	2b00      	cmp	r3, #0
    7a0e:	dd05      	ble.n	7a1c <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    7a10:	f7ff ffe4 	bl	79dc <rssi_get_avg>
		level = rssi - 54 + cs_threshold_req;
    7a14:	782c      	ldrb	r4, [r5, #0]
    7a16:	3c36      	subs	r4, #54	; 0x36
    7a18:	4420      	add	r0, r4
    7a1a:	b2c4      	uxtb	r4, r0
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
	level = level > -20 ? -20 : level;
    7a1c:	f06f 0377 	mvn.w	r3, #119	; 0x77
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
    7a20:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    7a22:	429c      	cmp	r4, r3
    7a24:	bfb8      	it	lt
    7a26:	461c      	movlt	r4, r3
    7a28:	f06f 0313 	mvn.w	r3, #19
    7a2c:	429c      	cmp	r4, r3
    7a2e:	bfa8      	it	ge
    7a30:	461c      	movge	r4, r3
    7a32:	b2e4      	uxtb	r4, r4
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    7a34:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7a38:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    7a3c:	2006      	movs	r0, #6
    7a3e:	f041 0103 	orr.w	r1, r1, #3
    7a42:	f000 ff62 	bl	890a <cc2400_set>
	cs_threshold_cur = level;
    7a46:	4b06      	ldr	r3, [pc, #24]	; (7a60 <cs_threshold_calc_and_set+0x5c>)
    7a48:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    7a4a:	b264      	sxtb	r4, r4
    7a4c:	f114 0f77 	cmn.w	r4, #119	; 0x77
    7a50:	4b04      	ldr	r3, [pc, #16]	; (7a64 <cs_threshold_calc_and_set+0x60>)
    7a52:	bfac      	ite	ge
    7a54:	2400      	movge	r4, #0
    7a56:	2401      	movlt	r4, #1
    7a58:	701c      	strb	r4, [r3, #0]
    7a5a:	bd38      	pop	{r3, r4, r5, pc}
    7a5c:	100014a8 	.word	0x100014a8
    7a60:	10001520 	.word	0x10001520
    7a64:	10001170 	.word	0x10001170

00007a68 <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    7a68:	4b07      	ldr	r3, [pc, #28]	; (7a88 <cs_trigger_enable+0x20>)
    7a6a:	2200      	movs	r2, #0
    7a6c:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    7a6e:	4b07      	ldr	r3, [pc, #28]	; (7a8c <cs_trigger_enable+0x24>)
    7a70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7a74:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7a76:	4b06      	ldr	r3, [pc, #24]	; (7a90 <cs_trigger_enable+0x28>)
    7a78:	2204      	movs	r2, #4
    7a7a:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    7a7c:	689a      	ldr	r2, [r3, #8]
    7a7e:	f042 0204 	orr.w	r2, r2, #4
    7a82:	609a      	str	r2, [r3, #8]
    7a84:	4770      	bx	lr
    7a86:	bf00      	nop
    7a88:	10001521 	.word	0x10001521
    7a8c:	e000e100 	.word	0xe000e100
    7a90:	400280ac 	.word	0x400280ac

00007a94 <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    7a94:	4b07      	ldr	r3, [pc, #28]	; (7ab4 <cs_trigger_disable+0x20>)
    7a96:	681a      	ldr	r2, [r3, #0]
    7a98:	f022 0204 	bic.w	r2, r2, #4
    7a9c:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7a9e:	2204      	movs	r2, #4
    7aa0:	f843 2c08 	str.w	r2, [r3, #-8]
	ICER0 = ICER0_ICE_EINT3;
    7aa4:	4b04      	ldr	r3, [pc, #16]	; (7ab8 <cs_trigger_disable+0x24>)
    7aa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7aaa:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    7aac:	4b03      	ldr	r3, [pc, #12]	; (7abc <cs_trigger_disable+0x28>)
    7aae:	2200      	movs	r2, #0
    7ab0:	701a      	strb	r2, [r3, #0]
    7ab2:	4770      	bx	lr
    7ab4:	400280b4 	.word	0x400280b4
    7ab8:	e000e180 	.word	0xe000e180
    7abc:	10001521 	.word	0x10001521

00007ac0 <cs_reset>:
}

void cs_reset(void)
{
    7ac0:	b508      	push	{r3, lr}
	cs_trigger_disable();
    7ac2:	f7ff ffe7 	bl	7a94 <cs_trigger_disable>

	cs_no_squelch = 0;
    7ac6:	4b04      	ldr	r3, [pc, #16]	; (7ad8 <cs_reset+0x18>)
    7ac8:	2200      	movs	r2, #0
    7aca:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    7acc:	4a03      	ldr	r2, [pc, #12]	; (7adc <cs_reset+0x1c>)
    7ace:	2388      	movs	r3, #136	; 0x88
    7ad0:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    7ad2:	4a03      	ldr	r2, [pc, #12]	; (7ae0 <cs_reset+0x20>)
    7ad4:	7013      	strb	r3, [r2, #0]
    7ad6:	bd08      	pop	{r3, pc}
    7ad8:	10001170 	.word	0x10001170
    7adc:	100014a8 	.word	0x100014a8
    7ae0:	10001520 	.word	0x10001520

00007ae4 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    7ae4:	4b0a      	ldr	r3, [pc, #40]	; (7b10 <clkn_stop+0x2c>)
    7ae6:	2202      	movs	r2, #2
    7ae8:	601a      	str	r2, [r3, #0]

	clkn = 0;
    7aea:	4a0a      	ldr	r2, [pc, #40]	; (7b14 <clkn_stop+0x30>)
    7aec:	2300      	movs	r3, #0
    7aee:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    7af0:	4a09      	ldr	r2, [pc, #36]	; (7b18 <clkn_stop+0x34>)
    7af2:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    7af4:	4a09      	ldr	r2, [pc, #36]	; (7b1c <clkn_stop+0x38>)
    7af6:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    7af8:	4a09      	ldr	r2, [pc, #36]	; (7b20 <clkn_stop+0x3c>)
    7afa:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    7afc:	4a09      	ldr	r2, [pc, #36]	; (7b24 <clkn_stop+0x40>)
    7afe:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    7b00:	4a09      	ldr	r2, [pc, #36]	; (7b28 <clkn_stop+0x44>)
    7b02:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    7b04:	4a09      	ldr	r2, [pc, #36]	; (7b2c <clkn_stop+0x48>)
    7b06:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    7b08:	4a09      	ldr	r2, [pc, #36]	; (7b30 <clkn_stop+0x4c>)
    7b0a:	6013      	str	r3, [r2, #0]
    7b0c:	4770      	bx	lr
    7b0e:	bf00      	nop
    7b10:	40004004 	.word	0x40004004
    7b14:	10001024 	.word	0x10001024
    7b18:	10001000 	.word	0x10001000
    7b1c:	10001018 	.word	0x10001018
    7b20:	10001172 	.word	0x10001172
    7b24:	100014a4 	.word	0x100014a4
    7b28:	10001020 	.word	0x10001020
    7b2c:	1000101c 	.word	0x1000101c
    7b30:	100014dc 	.word	0x100014dc

00007b34 <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    7b34:	4b01      	ldr	r3, [pc, #4]	; (7b3c <clkn_start+0x8>)
    7b36:	2201      	movs	r2, #1
    7b38:	601a      	str	r2, [r3, #0]
    7b3a:	4770      	bx	lr
    7b3c:	40004004 	.word	0x40004004

00007b40 <clkn_init>:
}

void clkn_init()
{
    7b40:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    7b42:	f7ff ffcf 	bl	7ae4 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    7b46:	4b06      	ldr	r3, [pc, #24]	; (7b60 <clkn_init+0x20>)
    7b48:	2204      	movs	r2, #4
    7b4a:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    7b4c:	f502 6243 	add.w	r2, r2, #3120	; 0xc30
    7b50:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    7b52:	2203      	movs	r2, #3
    7b54:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    7b56:	4b03      	ldr	r3, [pc, #12]	; (7b64 <clkn_init+0x24>)
    7b58:	2202      	movs	r2, #2
    7b5a:	601a      	str	r2, [r3, #0]
    7b5c:	bd08      	pop	{r3, pc}
    7b5e:	bf00      	nop
    7b60:	4000400c 	.word	0x4000400c
    7b64:	e000e100 	.word	0xe000e100

00007b68 <dma_disable>:
{
	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    7b68:	4b15      	ldr	r3, [pc, #84]	; (7bc0 <dma_disable+0x58>)
    7b6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7b6e:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    7b70:	4a14      	ldr	r2, [pc, #80]	; (7bc4 <dma_disable+0x5c>)
    7b72:	2300      	movs	r3, #0
    7b74:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    7b76:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    7b78:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    7b7a:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    7b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    7b80:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    7b84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    7b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    7b8c:	23ff      	movs	r3, #255	; 0xff
    7b8e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    7b92:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    7b94:	6093      	str	r3, [r2, #8]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    7b96:	4b0c      	ldr	r3, [pc, #48]	; (7bc8 <dma_disable+0x60>)
    7b98:	681a      	ldr	r2, [r3, #0]
    7b9a:	f022 0201 	bic.w	r2, r2, #1
    7b9e:	601a      	str	r2, [r3, #0]
	while (DMACConfig & DMACConfig_E);
    7ba0:	681a      	ldr	r2, [r3, #0]
    7ba2:	f012 0201 	ands.w	r2, r2, #1
    7ba6:	d1fb      	bne.n	7ba0 <dma_disable+0x38>

	/* reset interrupt counters */
	rx_tc = 0;
    7ba8:	4b08      	ldr	r3, [pc, #32]	; (7bcc <dma_disable+0x64>)
    7baa:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    7bac:	4b08      	ldr	r3, [pc, #32]	; (7bd0 <dma_disable+0x68>)
    7bae:	601a      	str	r2, [r3, #0]

	active_rxbuf = &rxbuf1[0];
    7bb0:	4a08      	ldr	r2, [pc, #32]	; (7bd4 <dma_disable+0x6c>)
    7bb2:	4b09      	ldr	r3, [pc, #36]	; (7bd8 <dma_disable+0x70>)
    7bb4:	601a      	str	r2, [r3, #0]
	idle_rxbuf = &rxbuf2[0];
    7bb6:	4a09      	ldr	r2, [pc, #36]	; (7bdc <dma_disable+0x74>)
    7bb8:	4b09      	ldr	r3, [pc, #36]	; (7be0 <dma_disable+0x78>)
    7bba:	601a      	str	r2, [r3, #0]
    7bbc:	4770      	bx	lr
    7bbe:	bf00      	nop
    7bc0:	e000e180 	.word	0xe000e180
    7bc4:	50004110 	.word	0x50004110
    7bc8:	50004030 	.word	0x50004030
    7bcc:	10001004 	.word	0x10001004
    7bd0:	1000151c 	.word	0x1000151c
    7bd4:	100014e9 	.word	0x100014e9
    7bd8:	10001064 	.word	0x10001064
    7bdc:	100014a9 	.word	0x100014a9
    7be0:	10001180 	.word	0x10001180

00007be4 <dma_init>:
}

void dma_init()
{
    7be4:	b508      	push	{r3, lr}
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    7be6:	4b14      	ldr	r3, [pc, #80]	; (7c38 <dma_init+0x54>)
    7be8:	681a      	ldr	r2, [r3, #0]
    7bea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    7bee:	601a      	str	r2, [r3, #0]

	dma_disable();
    7bf0:	f7ff ffba 	bl	7b68 <dma_disable>

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7bf4:	4b11      	ldr	r3, [pc, #68]	; (7c3c <dma_init+0x58>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7bf6:	4a12      	ldr	r2, [pc, #72]	; (7c40 <dma_init+0x5c>)
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7bf8:	4812      	ldr	r0, [pc, #72]	; (7c44 <dma_init+0x60>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7bfa:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7bfc:	4a12      	ldr	r2, [pc, #72]	; (7c48 <dma_init+0x64>)
	rx_dma_lli1.control = (DMA_SIZE) |
    7bfe:	4913      	ldr	r1, [pc, #76]	; (7c4c <dma_init+0x68>)
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    7c00:	6010      	str	r0, [r2, #0]
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7c02:	6018      	str	r0, [r3, #0]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7c04:	4812      	ldr	r0, [pc, #72]	; (7c50 <dma_init+0x6c>)
	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7c06:	609a      	str	r2, [r3, #8]
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
    7c08:	60d1      	str	r1, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7c0a:	6050      	str	r0, [r2, #4]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    7c0c:	6093      	str	r3, [r2, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7c0e:	4a11      	ldr	r2, [pc, #68]	; (7c54 <dma_init+0x70>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    7c10:	60d9      	str	r1, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7c12:	2101      	movs	r1, #1
    7c14:	6011      	str	r1, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
    7c16:	6811      	ldr	r1, [r2, #0]
    7c18:	07c9      	lsls	r1, r1, #31
    7c1a:	d5fc      	bpl.n	7c16 <dma_init+0x32>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    7c1c:	681a      	ldr	r2, [r3, #0]
    7c1e:	490e      	ldr	r1, [pc, #56]	; (7c58 <dma_init+0x74>)
    7c20:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    7c22:	685a      	ldr	r2, [r3, #4]
    7c24:	604a      	str	r2, [r1, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    7c26:	689a      	ldr	r2, [r3, #8]
    7c28:	608a      	str	r2, [r1, #8]
	DMACC0Control = rx_dma_lli1.control;
    7c2a:	68da      	ldr	r2, [r3, #12]
    7c2c:	4b0b      	ldr	r3, [pc, #44]	; (7c5c <dma_init+0x78>)
    7c2e:	601a      	str	r2, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    7c30:	f24d 0206 	movw	r2, #53254	; 0xd006
    7c34:	605a      	str	r2, [r3, #4]
    7c36:	bd08      	pop	{r3, pc}
    7c38:	400fc0c4 	.word	0x400fc0c4
    7c3c:	100037ac 	.word	0x100037ac
    7c40:	100014e9 	.word	0x100014e9
    7c44:	40030008 	.word	0x40030008
    7c48:	1000379c 	.word	0x1000379c
    7c4c:	88009032 	.word	0x88009032
    7c50:	100014a9 	.word	0x100014a9
    7c54:	50004030 	.word	0x50004030
    7c58:	50004100 	.word	0x50004100
    7c5c:	5000410c 	.word	0x5000410c

00007c60 <dma_init_le>:
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */
}

void dma_init_le()
{
    7c60:	b508      	push	{r3, lr}
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    7c62:	4b1a      	ldr	r3, [pc, #104]	; (7ccc <dma_init_le+0x6c>)
    7c64:	681a      	ldr	r2, [r3, #0]
    7c66:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    7c6a:	601a      	str	r2, [r3, #0]

	dma_disable();
    7c6c:	f7ff ff7c 	bl	7b68 <dma_disable>

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7c70:	4b17      	ldr	r3, [pc, #92]	; (7cd0 <dma_init_le+0x70>)
    7c72:	2201      	movs	r2, #1
    7c74:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    7c76:	681a      	ldr	r2, [r3, #0]
    7c78:	07d0      	lsls	r0, r2, #31
    7c7a:	d5fc      	bpl.n	7c76 <dma_init_le+0x16>
    7c7c:	4b15      	ldr	r3, [pc, #84]	; (7cd4 <dma_init_le+0x74>)
    7c7e:	2200      	movs	r2, #0

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7c80:	4915      	ldr	r1, [pc, #84]	; (7cd8 <dma_init_le+0x78>)
    7c82:	f843 1c10 	str.w	r1, [r3, #-16]
    7c86:	4915      	ldr	r1, [pc, #84]	; (7cdc <dma_init_le+0x7c>)
    7c88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    7c8c:	f843 1c0c 	str.w	r1, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7c90:	2a0a      	cmp	r2, #10
    7c92:	bf14      	ite	ne
    7c94:	4619      	movne	r1, r3
    7c96:	2100      	moveq	r1, #0
    7c98:	f843 1c08 	str.w	r1, [r3, #-8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7c9c:	3201      	adds	r2, #1
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7c9e:	4910      	ldr	r1, [pc, #64]	; (7ce0 <dma_init_le+0x80>)

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7ca0:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7ca2:	f843 1c04 	str.w	r1, [r3, #-4]
    7ca6:	f103 0310 	add.w	r3, r3, #16

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7caa:	d1e9      	bne.n	7c80 <dma_init_le+0x20>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    7cac:	4b0d      	ldr	r3, [pc, #52]	; (7ce4 <dma_init_le+0x84>)
    7cae:	490e      	ldr	r1, [pc, #56]	; (7ce8 <dma_init_le+0x88>)
    7cb0:	681a      	ldr	r2, [r3, #0]
    7cb2:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7cb4:	685a      	ldr	r2, [r3, #4]
    7cb6:	604a      	str	r2, [r1, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7cb8:	689a      	ldr	r2, [r3, #8]
    7cba:	608a      	str	r2, [r1, #8]
	DMACC0Control = le_dma_lli[0].control;
    7cbc:	68da      	ldr	r2, [r3, #12]
    7cbe:	4b0b      	ldr	r3, [pc, #44]	; (7cec <dma_init_le+0x8c>)
    7cc0:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    7cc2:	f24d 0206 	movw	r2, #53254	; 0xd006
    7cc6:	605a      	str	r2, [r3, #4]
    7cc8:	bd08      	pop	{r3, pc}
    7cca:	bf00      	nop
    7ccc:	400fc0c4 	.word	0x400fc0c4
    7cd0:	50004030 	.word	0x50004030
    7cd4:	100036fc 	.word	0x100036fc
    7cd8:	40030008 	.word	0x40030008
    7cdc:	100014e9 	.word	0x100014e9
    7ce0:	88001004 	.word	0x88001004
    7ce4:	100036ec 	.word	0x100036ec
    7ce8:	50004100 	.word	0x50004100
    7cec:	5000410c 	.word	0x5000410c

00007cf0 <dio_ssp_start>:


void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    7cf0:	4a0d      	ldr	r2, [pc, #52]	; (7d28 <dio_ssp_start+0x38>)
    7cf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7cf6:	6013      	str	r3, [r2, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7cf8:	4a0c      	ldr	r2, [pc, #48]	; (7d2c <dio_ssp_start+0x3c>)
    7cfa:	6811      	ldr	r1, [r2, #0]
    7cfc:	f041 0101 	orr.w	r1, r1, #1
    7d00:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7d02:	f852 1c20 	ldr.w	r1, [r2, #-32]
    7d06:	f041 0102 	orr.w	r1, r1, #2
    7d0a:	f842 1c20 	str.w	r1, [r2, #-32]


static void dma_enable(void)
{
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    7d0e:	4a08      	ldr	r2, [pc, #32]	; (7d30 <dio_ssp_start+0x40>)
    7d10:	6811      	ldr	r1, [r2, #0]
    7d12:	f041 0101 	orr.w	r1, r1, #1
    7d16:	6011      	str	r1, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    7d18:	4a06      	ldr	r2, [pc, #24]	; (7d34 <dio_ssp_start+0x44>)
    7d1a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7d1e:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;

	dma_enable();

	/* activate slave select pin */
	DIO_SSEL_CLR;
    7d20:	4a05      	ldr	r2, [pc, #20]	; (7d38 <dio_ssp_start+0x48>)
    7d22:	6013      	str	r3, [r2, #0]
    7d24:	4770      	bx	lr
    7d26:	bf00      	nop
    7d28:	2009c098 	.word	0x2009c098
    7d2c:	40030024 	.word	0x40030024
    7d30:	50004110 	.word	0x50004110
    7d34:	e000e100 	.word	0xe000e100
    7d38:	2009c09c 	.word	0x2009c09c

00007d3c <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    7d3c:	4b08      	ldr	r3, [pc, #32]	; (7d60 <dio_ssp_stop+0x24>)
    7d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7d42:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7d44:	4b07      	ldr	r3, [pc, #28]	; (7d64 <dio_ssp_stop+0x28>)
    7d46:	681a      	ldr	r2, [r3, #0]
    7d48:	f022 0201 	bic.w	r2, r2, #1
    7d4c:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    7d4e:	f853 2c20 	ldr.w	r2, [r3, #-32]
    7d52:	f022 0202 	bic.w	r2, r2, #2
    7d56:	f843 2c20 	str.w	r2, [r3, #-32]

	dma_disable();
    7d5a:	f7ff bf05 	b.w	7b68 <dma_disable>
    7d5e:	bf00      	nop
    7d60:	2009c098 	.word	0x2009c098
    7d64:	40030024 	.word	0x40030024

00007d68 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    7d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d6c:	b096      	sub	sp, #88	; 0x58
    7d6e:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    7d70:	2315      	movs	r3, #21
    7d72:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	txbuf[1] = 0; // request
    7d76:	2300      	movs	r3, #0
    7d78:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    7d7c:	4681      	mov	r9, r0

	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
    7d7e:	233a      	movs	r3, #58	; 0x3a
    7d80:	f107 0058 	add.w	r0, r7, #88	; 0x58
    7d84:	f840 3d58 	str.w	r3, [r0, #-88]!
	iap_entry(command, result);
    7d88:	4b94      	ldr	r3, [pc, #592]	; (7fdc <cc2400_rangetest+0x274>)
    7d8a:	4638      	mov	r0, r7
    7d8c:	f107 0114 	add.w	r1, r7, #20
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    7d94:	7d3a      	ldrb	r2, [r7, #20]
    7d96:	46ea      	mov	sl, sp
    7d98:	2a00      	cmp	r2, #0
    7d9a:	f040 811b 	bne.w	7fd4 <cc2400_rangetest+0x26c>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    7d9e:	69bb      	ldr	r3, [r7, #24]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7da0:	2012      	movs	r0, #18
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    7da2:	0e19      	lsrs	r1, r3, #24
    7da4:	f887 1042 	strb.w	r1, [r7, #66]	; 0x42
	txbuf[3] = (result[1] >> 16) & 0xFF;
    7da8:	0c19      	lsrs	r1, r3, #16
    7daa:	f887 1043 	strb.w	r1, [r7, #67]	; 0x43
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
    7dae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    7db2:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    7db4:	69fb      	ldr	r3, [r7, #28]
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    7db6:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    7dba:	0e19      	lsrs	r1, r3, #24
    7dbc:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	txbuf[7] = (result[2] >> 16) & 0xFF;
    7dc0:	0c19      	lsrs	r1, r3, #16
    7dc2:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
    7dc6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    7dca:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    7dcc:	6a3b      	ldr	r3, [r7, #32]
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    7dce:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    7dd2:	0e19      	lsrs	r1, r3, #24
    7dd4:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[11] = (result[3] >> 16) & 0xFF;
    7dd8:	0c19      	lsrs	r1, r3, #16
    7dda:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
    7dde:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    7de2:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    7de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    7de6:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    7dea:	0e19      	lsrs	r1, r3, #24
    7dec:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[15] = (result[4] >> 16) & 0xFF;
    7df0:	0c19      	lsrs	r1, r3, #16
    7df2:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[16] = (result[4] >> 8) & 0xFF;
    7df6:	0a19      	lsrs	r1, r3, #8
    7df8:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[17] = result[4] & 0xFF;
    7dfc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7e00:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
    7e04:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
    7e06:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
	txbuf[19] = 0; // request number
    7e0a:	f887 2053 	strb.w	r2, [r7, #83]	; 0x53
	txbuf[20] = 0xff; // reply pa
    7e0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	txbuf[21] = 0xff; // reply number
    7e12:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7e16:	f000 fd78 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    7e1a:	2014      	movs	r0, #20
    7e1c:	f241 314b 	movw	r1, #4939	; 0x134b
    7e20:	f000 fd73 	bl	890a <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    7e24:	2020      	movs	r0, #32
    7e26:	f640 51f1 	movw	r1, #3569	; 0xdf1
    7e2a:	f000 fd6e 	bl	890a <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    7e2e:	f8b9 1000 	ldrh.w	r1, [r9]
    7e32:	2002      	movs	r0, #2
    7e34:	b289      	uxth	r1, r1
    7e36:	f000 fd68 	bl	890a <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    7e3a:	202d      	movs	r0, #45	; 0x2d
    7e3c:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    7e40:	f000 fd63 	bl	890a <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    7e44:	202c      	movs	r0, #44	; 0x2c
    7e46:	f241 5184 	movw	r1, #5508	; 0x1584
    7e4a:	f000 fd5e 	bl	890a <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    7e4e:	2005      	movs	r0, #5
    7e50:	2108      	movs	r1, #8
    7e52:	f000 fd5a 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    7e56:	2003      	movs	r0, #3
    7e58:	2129      	movs	r1, #41	; 0x29
    7e5a:	f000 fd56 	bl	890a <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7e5e:	f000 fe25 	bl	8aac <cc2400_status>
    7e62:	0646      	lsls	r6, r0, #25
    7e64:	d5fb      	bpl.n	7e5e <cc2400_rangetest+0xf6>
	cc2400_strobe(SFSON);
    7e66:	2061      	movs	r0, #97	; 0x61
    7e68:	f000 fe27 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7e6c:	f000 fe1e 	bl	8aac <cc2400_status>
    7e70:	0745      	lsls	r5, r0, #29
    7e72:	d5fb      	bpl.n	7e6c <cc2400_rangetest+0x104>
	TXLED_SET;
    7e74:	4b5a      	ldr	r3, [pc, #360]	; (7fe0 <cc2400_rangetest+0x278>)
    7e76:	f44f 7280 	mov.w	r2, #256	; 0x100
    7e7a:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7e7c:	2280      	movs	r2, #128	; 0x80
    7e7e:	621a      	str	r2, [r3, #32]
#endif
	for (pa = 0; pa < 8; pa++) {
    7e80:	2400      	movs	r4, #0
		cc2400_set(FREND, 8 | pa);
    7e82:	2005      	movs	r0, #5
    7e84:	f044 0108 	orr.w	r1, r4, #8
    7e88:	f000 fd3f 	bl	890a <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7e8c:	2500      	movs	r5, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
    7e8e:	f887 4052 	strb.w	r4, [r7, #82]	; 0x52
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
    7e92:	f887 5053 	strb.w	r5, [r7, #83]	; 0x53
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7e96:	200e      	movs	r0, #14
    7e98:	f000 fd2e 	bl	88f8 <cc2400_get>
    7e9c:	f000 001f 	and.w	r0, r0, #31
    7ea0:	280f      	cmp	r0, #15
    7ea2:	d1f8      	bne.n	7e96 <cc2400_rangetest+0x12e>
    7ea4:	2600      	movs	r6, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    7ea6:	f107 0840 	add.w	r8, r7, #64	; 0x40
    7eaa:	f818 1006 	ldrb.w	r1, [r8, r6]
    7eae:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7eb0:	3601      	adds	r6, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    7eb2:	f000 fd65 	bl	8980 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7eb6:	2e16      	cmp	r6, #22
    7eb8:	d1f5      	bne.n	7ea6 <cc2400_rangetest+0x13e>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    7eba:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7ebc:	3501      	adds	r5, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    7ebe:	f000 fdfc 	bl	8aba <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7ec2:	2d10      	cmp	r5, #16
    7ec4:	d1e5      	bne.n	7e92 <cc2400_rangetest+0x12a>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    7ec6:	3401      	adds	r4, #1
    7ec8:	b2e4      	uxtb	r4, r4
    7eca:	2c08      	cmp	r4, #8
    7ecc:	d1d9      	bne.n	7e82 <cc2400_rangetest+0x11a>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7ece:	200e      	movs	r0, #14
    7ed0:	f000 fd12 	bl	88f8 <cc2400_get>
    7ed4:	f000 001f 	and.w	r0, r0, #31
    7ed8:	280f      	cmp	r0, #15
    7eda:	d1f8      	bne.n	7ece <cc2400_rangetest+0x166>
	TXLED_CLR;
    7edc:	4b41      	ldr	r3, [pc, #260]	; (7fe4 <cc2400_rangetest+0x27c>)
    7ede:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ee2:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    7ee4:	2064      	movs	r0, #100	; 0x64
    7ee6:	f000 fde8 	bl	8aba <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7eea:	f000 fddf 	bl	8aac <cc2400_status>
    7eee:	0744      	lsls	r4, r0, #29
    7ef0:	d4fb      	bmi.n	7eea <cc2400_rangetest+0x182>
	cc2400_set(FSDIV, *chan_ptr - 1);
    7ef2:	f8b9 1000 	ldrh.w	r1, [r9]
    7ef6:	2002      	movs	r0, #2
    7ef8:	b289      	uxth	r1, r1
    7efa:	3901      	subs	r1, #1
    7efc:	b289      	uxth	r1, r1
    7efe:	f000 fd04 	bl	890a <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7f02:	f000 fdd3 	bl	8aac <cc2400_status>
    7f06:	0640      	lsls	r0, r0, #25
    7f08:	d5fb      	bpl.n	7f02 <cc2400_rangetest+0x19a>
	cc2400_strobe(SFSON);
    7f0a:	2061      	movs	r0, #97	; 0x61
    7f0c:	f000 fdd5 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7f10:	f000 fdcc 	bl	8aac <cc2400_status>
    7f14:	0741      	lsls	r1, r0, #29
    7f16:	d5fb      	bpl.n	7f10 <cc2400_rangetest+0x1a8>
	RXLED_SET;
    7f18:	4b31      	ldr	r3, [pc, #196]	; (7fe0 <cc2400_rangetest+0x278>)
    7f1a:	2210      	movs	r2, #16
    7f1c:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7f1e:	200e      	movs	r0, #14
    7f20:	f000 fcea 	bl	88f8 <cc2400_get>
    7f24:	f000 001f 	and.w	r0, r0, #31
    7f28:	280f      	cmp	r0, #15
    7f2a:	d1f8      	bne.n	7f1e <cc2400_rangetest+0x1b6>
		cc2400_strobe(SRX);
    7f2c:	2062      	movs	r0, #98	; 0x62
    7f2e:	f000 fdc4 	bl	8aba <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    7f32:	f000 fdbb 	bl	8aac <cc2400_status>
    7f36:	06c2      	lsls	r2, r0, #27
    7f38:	d5fb      	bpl.n	7f32 <cc2400_rangetest+0x1ca>
		USRLED_SET;
    7f3a:	4b29      	ldr	r3, [pc, #164]	; (7fe0 <cc2400_rangetest+0x278>)
    7f3c:	2202      	movs	r2, #2
    7f3e:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    7f40:	2400      	movs	r4, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
    7f42:	2070      	movs	r0, #112	; 0x70
    7f44:	f000 fce6 	bl	8914 <cc2400_get8>
    7f48:	f107 0528 	add.w	r5, r7, #40	; 0x28
    7f4c:	5528      	strb	r0, [r5, r4]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    7f4e:	3401      	adds	r4, #1
    7f50:	2c16      	cmp	r4, #22
    7f52:	d1f6      	bne.n	7f42 <cc2400_rangetest+0x1da>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    7f54:	f000 fdaa 	bl	8aac <cc2400_status>
    7f58:	0703      	lsls	r3, r0, #28
    7f5a:	d402      	bmi.n	7f62 <cc2400_rangetest+0x1fa>
			break;
		USRLED_CLR;
    7f5c:	2202      	movs	r2, #2
    7f5e:	4b21      	ldr	r3, [pc, #132]	; (7fe4 <cc2400_rangetest+0x27c>)
    7f60:	e7dc      	b.n	7f1c <cc2400_rangetest+0x1b4>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7f62:	200e      	movs	r0, #14
    7f64:	f000 fcc8 	bl	88f8 <cc2400_get>
    7f68:	f000 001f 	and.w	r0, r0, #31
    7f6c:	280f      	cmp	r0, #15
    7f6e:	d1f8      	bne.n	7f62 <cc2400_rangetest+0x1fa>
	cc2400_strobe(SRFOFF);
    7f70:	2064      	movs	r0, #100	; 0x64
    7f72:	f000 fda2 	bl	8aba <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7f76:	f000 fd99 	bl	8aac <cc2400_status>
    7f7a:	f000 0004 	and.w	r0, r0, #4
    7f7e:	f000 03ff 	and.w	r3, r0, #255	; 0xff
    7f82:	2800      	cmp	r0, #0
    7f84:	d1f7      	bne.n	7f76 <cc2400_rangetest+0x20e>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    7f86:	4a18      	ldr	r2, [pc, #96]	; (7fe8 <cc2400_rangetest+0x280>)
    7f88:	2180      	movs	r1, #128	; 0x80
    7f8a:	6011      	str	r1, [r2, #0]
#endif
	RXLED_CLR;
    7f8c:	2110      	movs	r1, #16
    7f8e:	f842 1c20 	str.w	r1, [r2, #-32]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    7f92:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
    7f96:	4a15      	ldr	r2, [pc, #84]	; (7fec <cc2400_rangetest+0x284>)
    7f98:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
    7f9a:	7050      	strb	r0, [r2, #1]
	rr.request_num = rxbuf[19];
    7f9c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    7fa0:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
    7fa4:	7090      	strb	r0, [r2, #2]
	rr.reply_pa    = rxbuf[20];
    7fa6:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
    7faa:	70d0      	strb	r0, [r2, #3]
	rr.reply_num   = rxbuf[21];
    7fac:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    7fb0:	7110      	strb	r0, [r2, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
    7fb2:	5cec      	ldrb	r4, [r5, r3]
    7fb4:	f818 0003 	ldrb.w	r0, [r8, r3]
    7fb8:	4284      	cmp	r4, r0
    7fba:	bf18      	it	ne
    7fbc:	1c99      	addne	r1, r3, #2
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    7fbe:	f103 0301 	add.w	r3, r3, #1
    7fc2:	bf18      	it	ne
    7fc4:	b2c9      	uxtbne	r1, r1
    7fc6:	2b12      	cmp	r3, #18
    7fc8:	d1f3      	bne.n	7fb2 <cc2400_rangetest+0x24a>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    7fca:	4b06      	ldr	r3, [pc, #24]	; (7fe4 <cc2400_rangetest+0x27c>)
    7fcc:	7011      	strb	r1, [r2, #0]
    7fce:	2202      	movs	r2, #2
    7fd0:	601a      	str	r2, [r3, #0]
    7fd2:	46d5      	mov	sp, sl
#endif
}
    7fd4:	3758      	adds	r7, #88	; 0x58
    7fd6:	46bd      	mov	sp, r7
    7fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fdc:	0000ab84 	.word	0x0000ab84
    7fe0:	2009c038 	.word	0x2009c038
    7fe4:	2009c03c 	.word	0x2009c03c
    7fe8:	2009c05c 	.word	0x2009c05c
    7fec:	100014e4 	.word	0x100014e4

00007ff0 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    7ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ff2:	b087      	sub	sp, #28
    7ff4:	4607      	mov	r7, r0
	u8 pa = 0;
	u8 buf[len];

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    7ff6:	2012      	movs	r0, #18
    7ff8:	f642 3122 	movw	r1, #11042	; 0x2b22
    7ffc:	f000 fc85 	bl	890a <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    8000:	2014      	movs	r0, #20
    8002:	f241 314b 	movw	r1, #4939	; 0x134b
    8006:	f000 fc80 	bl	890a <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    800a:	8839      	ldrh	r1, [r7, #0]
    800c:	2002      	movs	r0, #2
    800e:	b289      	uxth	r1, r1
    8010:	3901      	subs	r1, #1
    8012:	b289      	uxth	r1, r1
    8014:	f000 fc79 	bl	890a <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    8018:	202d      	movs	r0, #45	; 0x2d
    801a:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    801e:	f000 fc74 	bl	890a <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    8022:	202c      	movs	r0, #44	; 0x2c
    8024:	f241 5184 	movw	r1, #5508	; 0x1584
    8028:	f000 fc6f 	bl	890a <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    802c:	2005      	movs	r0, #5
    802e:	2108      	movs	r1, #8
    8030:	f000 fc6b 	bl	890a <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8034:	2003      	movs	r0, #3
    8036:	2129      	movs	r1, #41	; 0x29
    8038:	f000 fc67 	bl	890a <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    803c:	f000 fd36 	bl	8aac <cc2400_status>
    8040:	0643      	lsls	r3, r0, #25
    8042:	d5fb      	bpl.n	803c <cc2400_repeater+0x4c>
		cc2400_strobe(SFSON);
    8044:	2061      	movs	r0, #97	; 0x61
    8046:	f000 fd38 	bl	8aba <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    804a:	f000 fd2f 	bl	8aac <cc2400_status>
    804e:	0746      	lsls	r6, r0, #29
    8050:	d5fb      	bpl.n	804a <cc2400_repeater+0x5a>
		RXLED_SET;
    8052:	4b41      	ldr	r3, [pc, #260]	; (8158 <cc2400_repeater+0x168>)
    8054:	2210      	movs	r2, #16
    8056:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    8058:	f44f 7280 	mov.w	r2, #256	; 0x100
    805c:	605a      	str	r2, [r3, #4]
		USRLED_CLR;
    805e:	2202      	movs	r2, #2
    8060:	605a      	str	r2, [r3, #4]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8062:	2280      	movs	r2, #128	; 0x80
    8064:	621a      	str	r2, [r3, #32]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8066:	200e      	movs	r0, #14
    8068:	f000 fc46 	bl	88f8 <cc2400_get>
    806c:	f000 001f 	and.w	r0, r0, #31
    8070:	280f      	cmp	r0, #15
    8072:	d1f8      	bne.n	8066 <cc2400_repeater+0x76>
			USRLED_CLR;
    8074:	4b39      	ldr	r3, [pc, #228]	; (815c <cc2400_repeater+0x16c>)
    8076:	2202      	movs	r2, #2
    8078:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    807a:	2062      	movs	r0, #98	; 0x62
    807c:	f000 fd1d 	bl	8aba <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    8080:	f000 fd14 	bl	8aac <cc2400_status>
    8084:	06c5      	lsls	r5, r0, #27
    8086:	d5fb      	bpl.n	8080 <cc2400_repeater+0x90>
			USRLED_SET;
    8088:	4b33      	ldr	r3, [pc, #204]	; (8158 <cc2400_repeater+0x168>)
    808a:	2202      	movs	r2, #2
    808c:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    808e:	2400      	movs	r4, #0
				buf[i] = cc2400_get8(FIFOREG);
    8090:	2070      	movs	r0, #112	; 0x70
    8092:	f000 fc3f 	bl	8914 <cc2400_get8>
    8096:	f80d 0004 	strb.w	r0, [sp, r4]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    809a:	3401      	adds	r4, #1
    809c:	2c16      	cmp	r4, #22
    809e:	d1f7      	bne.n	8090 <cc2400_repeater+0xa0>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    80a0:	f000 fd04 	bl	8aac <cc2400_status>
    80a4:	0704      	lsls	r4, r0, #28
    80a6:	d5de      	bpl.n	8066 <cc2400_repeater+0x76>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
    80a8:	4b2c      	ldr	r3, [pc, #176]	; (815c <cc2400_repeater+0x16c>)
    80aa:	2202      	movs	r2, #2
    80ac:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    80ae:	2210      	movs	r2, #16
    80b0:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    80b2:	2064      	movs	r0, #100	; 0x64
    80b4:	f000 fd01 	bl	8aba <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    80b8:	f000 fcf8 	bl	8aac <cc2400_status>
    80bc:	0740      	lsls	r0, r0, #29
    80be:	d4fb      	bmi.n	80b8 <cc2400_repeater+0xc8>
		while (!(cc2400_status() & XOSC16M_STABLE));
    80c0:	f000 fcf4 	bl	8aac <cc2400_status>
    80c4:	0641      	lsls	r1, r0, #25
    80c6:	d5fb      	bpl.n	80c0 <cc2400_repeater+0xd0>
		cc2400_set(FSDIV, *chan_ptr);
    80c8:	8839      	ldrh	r1, [r7, #0]
    80ca:	2002      	movs	r0, #2
    80cc:	b289      	uxth	r1, r1
    80ce:	f000 fc1c 	bl	890a <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    80d2:	f000 fceb 	bl	8aac <cc2400_status>
    80d6:	0642      	lsls	r2, r0, #25
    80d8:	d5fb      	bpl.n	80d2 <cc2400_repeater+0xe2>
		cc2400_strobe(SFSON);
    80da:	2061      	movs	r0, #97	; 0x61
    80dc:	f000 fced 	bl	8aba <cc2400_strobe>
		TXLED_SET;
    80e0:	4b1d      	ldr	r3, [pc, #116]	; (8158 <cc2400_repeater+0x168>)
    80e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    80e6:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    80e8:	2315      	movs	r3, #21
    80ea:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    80ee:	2301      	movs	r3, #1
    80f0:	f88d 3001 	strb.w	r3, [sp, #1]
		for (pa = 0; pa < 8; pa++) {
    80f4:	2400      	movs	r4, #0
			cc2400_set(FREND, 8 | pa);
    80f6:	2005      	movs	r0, #5
    80f8:	f044 0108 	orr.w	r1, r4, #8
    80fc:	f000 fc05 	bl	890a <cc2400_set>
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    8100:	2500      	movs	r5, #0
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
    8102:	f88d 4014 	strb.w	r4, [sp, #20]
			for (i = 0; i < 16; i++) {
				buf[21] = i;
    8106:	f88d 5015 	strb.w	r5, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    810a:	200e      	movs	r0, #14
    810c:	f000 fbf4 	bl	88f8 <cc2400_get>
    8110:	f000 001f 	and.w	r0, r0, #31
    8114:	280f      	cmp	r0, #15
    8116:	d1f8      	bne.n	810a <cc2400_repeater+0x11a>
    8118:	2600      	movs	r6, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    811a:	f81d 1006 	ldrb.w	r1, [sp, r6]
    811e:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    8120:	3601      	adds	r6, #1
					cc2400_set8(FIFOREG, buf[j]);
    8122:	f000 fc2d 	bl	8980 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    8126:	2e16      	cmp	r6, #22
    8128:	d1f7      	bne.n	811a <cc2400_repeater+0x12a>
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    812a:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    812c:	3501      	adds	r5, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    812e:	f000 fcc4 	bl	8aba <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    8132:	2d10      	cmp	r5, #16
    8134:	d1e7      	bne.n	8106 <cc2400_repeater+0x116>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    8136:	3401      	adds	r4, #1
    8138:	b2e4      	uxtb	r4, r4
    813a:	2c08      	cmp	r4, #8
    813c:	d1db      	bne.n	80f6 <cc2400_repeater+0x106>
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    813e:	4b07      	ldr	r3, [pc, #28]	; (815c <cc2400_repeater+0x16c>)
    8140:	f44f 7280 	mov.w	r2, #256	; 0x100
    8144:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8146:	2064      	movs	r0, #100	; 0x64
    8148:	f000 fcb7 	bl	8aba <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    814c:	f000 fcae 	bl	8aac <cc2400_status>
    8150:	0743      	lsls	r3, r0, #29
    8152:	d4fb      	bmi.n	814c <cc2400_repeater+0x15c>
    8154:	e74f      	b.n	7ff6 <cc2400_repeater+0x6>
    8156:	bf00      	nop
    8158:	2009c038 	.word	0x2009c038
    815c:	2009c03c 	.word	0x2009c03c

00008160 <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8160:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8162:	7803      	ldrb	r3, [r0, #0]
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8164:	460d      	mov	r5, r1
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8166:	b123      	cbz	r3, 8172 <cc2400_txtest+0x12>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8168:	7803      	ldrb	r3, [r0, #0]
    816a:	2b01      	cmp	r3, #1
    816c:	d12f      	bne.n	81ce <cc2400_txtest+0x6e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    816e:	2440      	movs	r4, #64	; 0x40
    8170:	e000      	b.n	8174 <cc2400_txtest+0x14>
void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    8172:	2429      	movs	r4, #41	; 0x29
		mdmctrl = 0x0040; // 250 kHz frequency deviation
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    8174:	2012      	movs	r0, #18
    8176:	f642 3122 	movw	r1, #11042	; 0x2b22
    817a:	f000 fbc6 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    817e:	2014      	movs	r0, #20
    8180:	f243 314b 	movw	r1, #13131	; 0x334b
    8184:	f000 fbc1 	bl	890a <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    8188:	2020      	movs	r0, #32
    818a:	f640 51f1 	movw	r1, #3569	; 0xdf1
    818e:	f000 fbbc 	bl	890a <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    8192:	8829      	ldrh	r1, [r5, #0]
    8194:	2002      	movs	r0, #2
    8196:	b289      	uxth	r1, r1
    8198:	f000 fbb7 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    819c:	2003      	movs	r0, #3
    819e:	4621      	mov	r1, r4
    81a0:	f000 fbb3 	bl	890a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    81a4:	f000 fc82 	bl	8aac <cc2400_status>
    81a8:	0641      	lsls	r1, r0, #25
    81aa:	d5fb      	bpl.n	81a4 <cc2400_txtest+0x44>
	cc2400_strobe(SFSON);
    81ac:	2061      	movs	r0, #97	; 0x61
    81ae:	f000 fc84 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    81b2:	f000 fc7b 	bl	8aac <cc2400_status>
    81b6:	0742      	lsls	r2, r0, #29
    81b8:	d5fb      	bpl.n	81b2 <cc2400_txtest+0x52>
	TXLED_SET;
    81ba:	4b05      	ldr	r3, [pc, #20]	; (81d0 <cc2400_txtest+0x70>)
    81bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    81c0:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    81c2:	2063      	movs	r0, #99	; 0x63
    81c4:	f000 fc79 	bl	8aba <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    81c8:	4b02      	ldr	r3, [pc, #8]	; (81d4 <cc2400_txtest+0x74>)
    81ca:	2280      	movs	r2, #128	; 0x80
    81cc:	601a      	str	r2, [r3, #0]
    81ce:	bd38      	pop	{r3, r4, r5, pc}
    81d0:	2009c038 	.word	0x2009c038
    81d4:	2009c058 	.word	0x2009c058

000081d8 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    81d8:	4b04      	ldr	r3, [pc, #16]	; (81ec <ssp_stop+0x14>)
    81da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    81de:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    81e0:	4b03      	ldr	r3, [pc, #12]	; (81f0 <ssp_stop+0x18>)
    81e2:	681a      	ldr	r2, [r3, #0]
    81e4:	f022 0202 	bic.w	r2, r2, #2
    81e8:	601a      	str	r2, [r3, #0]
    81ea:	4770      	bx	lr
    81ec:	2009c098 	.word	0x2009c098
    81f0:	40030004 	.word	0x40030004

000081f4 <do_rx>:
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    81f4:	2300      	movs	r3, #0
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    81f6:	4a05      	ldr	r2, [pc, #20]	; (820c <do_rx+0x18>)
    81f8:	6812      	ldr	r2, [r2, #0]
    81fa:	0752      	lsls	r2, r2, #29
    81fc:	d5fb      	bpl.n	81f6 <do_rx+0x2>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    81fe:	4a04      	ldr	r2, [pc, #16]	; (8210 <do_rx+0x1c>)
    8200:	6812      	ldr	r2, [r2, #0]
    8202:	54c2      	strb	r2, [r0, r3]
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    8204:	3301      	adds	r3, #1
    8206:	2b24      	cmp	r3, #36	; 0x24
    8208:	d1f5      	bne.n	81f6 <do_rx+0x2>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    820a:	4770      	bx	lr
    820c:	4003000c 	.word	0x4003000c
    8210:	40030008 	.word	0x40030008

00008214 <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    8214:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    8216:	4b08      	ldr	r3, [pc, #32]	; (8238 <sleep_ms+0x24>)
    8218:	4a08      	ldr	r2, [pc, #32]	; (823c <sleep_ms+0x28>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	6812      	ldr	r2, [r2, #0]
    821e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8222:	f640 4435 	movw	r4, #3125	; 0xc35
    8226:	fb04 2303 	mla	r3, r4, r3, r2
    822a:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    822c:	f242 7310 	movw	r3, #10000	; 0x2710
    8230:	4359      	muls	r1, r3
    8232:	60c1      	str	r1, [r0, #12]
    8234:	bd10      	pop	{r4, pc}
    8236:	bf00      	nop
    8238:	10001024 	.word	0x10001024
    823c:	40004008 	.word	0x40004008

00008240 <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    8240:	4b0b      	ldr	r3, [pc, #44]	; (8270 <sleep_elapsed+0x30>)
    8242:	4a0c      	ldr	r2, [pc, #48]	; (8274 <sleep_elapsed+0x34>)
    8244:	681b      	ldr	r3, [r3, #0]
    8246:	6812      	ldr	r2, [r2, #0]
    8248:	f640 4135 	movw	r1, #3125	; 0xc35
    824c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8250:	fb01 2303 	mla	r3, r1, r3, r2
	if (now < state->sleep_start)
    8254:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    8256:	68c0      	ldr	r0, [r0, #12]
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
	if (now < state->sleep_start)
    8258:	4293      	cmp	r3, r2
		now += 3276800000;
    825a:	bf3c      	itt	cc
    825c:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    8260:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    8264:	1a9b      	subs	r3, r3, r2
}
    8266:	4283      	cmp	r3, r0
    8268:	bf34      	ite	cc
    826a:	2000      	movcc	r0, #0
    826c:	2001      	movcs	r0, #1
    826e:	4770      	bx	lr
    8270:	10001024 	.word	0x10001024
    8274:	40004008 	.word	0x40004008

00008278 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    8278:	4770      	bx	lr
    827a:	0000      	movs	r0, r0

0000827c <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    827c:	2300      	movs	r3, #0
    827e:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    8280:	4b03      	ldr	r3, [pc, #12]	; (8290 <init_state+0x14>)
    8282:	f640 1268 	movw	r2, #2408	; 0x968
    8286:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    8288:	2301      	movs	r3, #1
    828a:	7003      	strb	r3, [r0, #0]
    828c:	4770      	bx	lr
    828e:	bf00      	nop
    8290:	1000044c 	.word	0x1000044c

00008294 <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    8294:	2301      	movs	r3, #1
    8296:	7003      	strb	r3, [r0, #0]
    8298:	4770      	bx	lr
    829a:	0000      	movs	r0, r0

0000829c <start_rf_state>:
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    829c:	b510      	push	{r4, lr}
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    829e:	f647 71ff 	movw	r1, #32767	; 0x7fff
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    82a2:	4604      	mov	r4, r0
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    82a4:	200d      	movs	r0, #13
    82a6:	f000 fb30 	bl	890a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    82aa:	2012      	movs	r0, #18
    82ac:	f642 3122 	movw	r1, #11042	; 0x2b22
    82b0:	f000 fb2b 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    82b4:	2014      	movs	r0, #20
    82b6:	f241 314b 	movw	r1, #4939	; 0x134b
    82ba:	f000 fb26 	bl	890a <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    82be:	2020      	movs	r0, #32
    82c0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    82c4:	f000 fb21 	bl	890a <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    82c8:	4b1e      	ldr	r3, [pc, #120]	; (8344 <start_rf_state+0xa8>)
    82ca:	2002      	movs	r0, #2
    82cc:	8819      	ldrh	r1, [r3, #0]
    82ce:	b289      	uxth	r1, r1
    82d0:	3901      	subs	r1, #1
    82d2:	b289      	uxth	r1, r1
    82d4:	f000 fb19 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    82d8:	2003      	movs	r0, #3
    82da:	2126      	movs	r1, #38	; 0x26
    82dc:	f000 fb15 	bl	890a <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    82e0:	2021      	movs	r0, #33	; 0x21
    82e2:	2103      	movs	r1, #3
    82e4:	f000 fb11 	bl	890a <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    82e8:	202d      	movs	r0, #45	; 0x2d
    82ea:	f246 310f 	movw	r1, #25359	; 0x630f
    82ee:	f000 fb0c 	bl	890a <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    82f2:	202c      	movs	r0, #44	; 0x2c
    82f4:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    82f8:	f000 fb07 	bl	890a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    82fc:	f000 fbd6 	bl	8aac <cc2400_status>
    8300:	0640      	lsls	r0, r0, #25
    8302:	d5fb      	bpl.n	82fc <start_rf_state+0x60>
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    8304:	4a10      	ldr	r2, [pc, #64]	; (8348 <start_rf_state+0xac>)
    8306:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    830a:	6013      	str	r3, [r2, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    830c:	4a0f      	ldr	r2, [pc, #60]	; (834c <start_rf_state+0xb0>)

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    830e:	2061      	movs	r0, #97	; 0x61
static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8310:	6811      	ldr	r1, [r2, #0]
    8312:	f041 0102 	orr.w	r1, r1, #2
    8316:	6011      	str	r1, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    8318:	4a0d      	ldr	r2, [pc, #52]	; (8350 <start_rf_state+0xb4>)
    831a:	6013      	str	r3, [r2, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    831c:	f000 fbcd 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8320:	f000 fbc4 	bl	8aac <cc2400_status>
    8324:	0741      	lsls	r1, r0, #29
    8326:	d5fb      	bpl.n	8320 <start_rf_state+0x84>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8328:	200e      	movs	r0, #14
    832a:	f000 fae5 	bl	88f8 <cc2400_get>
    832e:	f000 001f 	and.w	r0, r0, #31
    8332:	280f      	cmp	r0, #15
    8334:	d1f8      	bne.n	8328 <start_rf_state+0x8c>

	cc2400_strobe(SRX);
    8336:	2062      	movs	r0, #98	; 0x62
    8338:	f000 fbbf 	bl	8aba <cc2400_strobe>
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
    833c:	2302      	movs	r3, #2
    833e:	7023      	strb	r3, [r4, #0]
    8340:	bd10      	pop	{r4, pc}
    8342:	bf00      	nop
    8344:	1000044c 	.word	0x1000044c
    8348:	2009c098 	.word	0x2009c098
    834c:	40030004 	.word	0x40030004
    8350:	2009c09c 	.word	0x2009c09c

00008354 <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    8354:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    8356:	f647 71ff 	movw	r1, #32767	; 0x7fff
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    835a:	4604      	mov	r4, r0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    835c:	200d      	movs	r0, #13
    835e:	f000 fad4 	bl	890a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8362:	2012      	movs	r0, #18
    8364:	f642 3122 	movw	r1, #11042	; 0x2b22
    8368:	f000 facf 	bl	890a <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    836c:	2014      	movs	r0, #20
    836e:	f243 314b 	movw	r1, #13131	; 0x334b
    8372:	f000 faca 	bl	890a <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8376:	2020      	movs	r0, #32
    8378:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    837c:	f000 fac5 	bl	890a <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    8380:	4b1a      	ldr	r3, [pc, #104]	; (83ec <start_jamming_state+0x98>)
    8382:	2002      	movs	r0, #2
    8384:	8819      	ldrh	r1, [r3, #0]
    8386:	b289      	uxth	r1, r1
    8388:	f000 fabf 	bl	890a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    838c:	2003      	movs	r0, #3
    838e:	2126      	movs	r1, #38	; 0x26
    8390:	f000 fabb 	bl	890a <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8394:	2021      	movs	r0, #33	; 0x21
    8396:	2103      	movs	r1, #3
    8398:	f000 fab7 	bl	890a <cc2400_set>
	cc2400_set(FREND, 0xf);
    839c:	2005      	movs	r0, #5
    839e:	210f      	movs	r1, #15
    83a0:	f000 fab3 	bl	890a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    83a4:	f000 fb82 	bl	8aac <cc2400_status>
    83a8:	0642      	lsls	r2, r0, #25
    83aa:	d5fb      	bpl.n	83a4 <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    83ac:	2061      	movs	r0, #97	; 0x61
    83ae:	f000 fb84 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    83b2:	f000 fb7b 	bl	8aac <cc2400_status>
    83b6:	0743      	lsls	r3, r0, #29
    83b8:	d5fb      	bpl.n	83b2 <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    83ba:	200e      	movs	r0, #14
    83bc:	f000 fa9c 	bl	88f8 <cc2400_get>
    83c0:	f000 001f 	and.w	r0, r0, #31
    83c4:	280f      	cmp	r0, #15
    83c6:	d1f8      	bne.n	83ba <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    83c8:	4b09      	ldr	r3, [pc, #36]	; (83f0 <start_jamming_state+0x9c>)
    83ca:	2280      	movs	r2, #128	; 0x80
    83cc:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    83ce:	2063      	movs	r0, #99	; 0x63
    83d0:	f000 fb73 	bl	8aba <cc2400_strobe>
	TXLED_SET;
    83d4:	4b07      	ldr	r3, [pc, #28]	; (83f4 <start_jamming_state+0xa0>)
    83d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    83da:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    83dc:	2305      	movs	r3, #5
    83de:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    83e0:	69a3      	ldr	r3, [r4, #24]
    83e2:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    83e4:	f644 6320 	movw	r3, #20000	; 0x4e20
    83e8:	60e3      	str	r3, [r4, #12]
    83ea:	bd10      	pop	{r4, pc}
    83ec:	1000044c 	.word	0x1000044c
    83f0:	2009c058 	.word	0x2009c058
    83f4:	2009c038 	.word	0x2009c038

000083f8 <sleep_state>:
		ssp_stop();
		state->timer_active = 1;
	}
}

static void sleep_state(ego_fsm_state_t *state) {
    83f8:	b510      	push	{r4, lr}
    83fa:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    83fc:	f7ff ff20 	bl	8240 <sleep_elapsed>
    8400:	b1b0      	cbz	r0, 8430 <sleep_state+0x38>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    8402:	6863      	ldr	r3, [r4, #4]
    8404:	1c5a      	adds	r2, r3, #1
    8406:	4b0b      	ldr	r3, [pc, #44]	; (8434 <sleep_state+0x3c>)
    8408:	4013      	ands	r3, r2
    840a:	2b00      	cmp	r3, #0
    840c:	da03      	bge.n	8416 <sleep_state+0x1e>
    840e:	3b01      	subs	r3, #1
    8410:	f063 0303 	orn	r3, r3, #3
    8414:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    8416:	4a08      	ldr	r2, [pc, #32]	; (8438 <sleep_state+0x40>)
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    8418:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    841a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    841e:	4b07      	ldr	r3, [pc, #28]	; (843c <sleep_state+0x44>)

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    8420:	4620      	mov	r0, r4
    8422:	2107      	movs	r1, #7

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
		channel = channels[state->channel_index];
    8424:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    8426:	f7ff fef5 	bl	8214 <sleep_ms>
		state->timer_active = 1;
    842a:	2301      	movs	r3, #1
    842c:	6123      	str	r3, [r4, #16]

		state->state = EGO_ST_START_RX;
    842e:	7023      	strb	r3, [r4, #0]
    8430:	bd10      	pop	{r4, pc}
    8432:	bf00      	nop
    8434:	80000003 	.word	0x80000003
    8438:	0000ab30 	.word	0x0000ab30
    843c:	1000044c 	.word	0x1000044c

00008440 <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    8440:	b510      	push	{r4, lr}
    8442:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8444:	f7ff fefc 	bl	8240 <sleep_elapsed>
    8448:	b130      	cbz	r0, 8458 <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    844a:	2301      	movs	r3, #1
    844c:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    844e:	6123      	str	r3, [r4, #16]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    8450:	69a3      	ldr	r3, [r4, #24]
    8452:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8454:	4b01      	ldr	r3, [pc, #4]	; (845c <jam_sleep_state+0x1c>)
    8456:	60e3      	str	r3, [r4, #12]
    8458:	bd10      	pop	{r4, pc}
    845a:	bf00      	nop
    845c:	0001adb0 	.word	0x0001adb0

00008460 <jamming_state>:

	state->state = EGO_ST_JAMMING;
	sleep_ms_anchor(state, 2);
}

void jamming_state(ego_fsm_state_t *state) {
    8460:	b510      	push	{r4, lr}
    8462:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8464:	f7ff feec 	bl	8240 <sleep_elapsed>
    8468:	b300      	cbz	r0, 84ac <jamming_state+0x4c>
		cc2400_strobe(SRFOFF);
    846a:	2064      	movs	r0, #100	; 0x64
    846c:	f000 fb25 	bl	8aba <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    8470:	4b0f      	ldr	r3, [pc, #60]	; (84b0 <jamming_state+0x50>)
    8472:	2280      	movs	r2, #128	; 0x80
    8474:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    8476:	f44f 7280 	mov.w	r2, #256	; 0x100
    847a:	f843 2c20 	str.w	r2, [r3, #-32]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    847e:	6863      	ldr	r3, [r4, #4]
    8480:	1c5a      	adds	r2, r3, #1
    8482:	4b0c      	ldr	r3, [pc, #48]	; (84b4 <jamming_state+0x54>)
    8484:	4013      	ands	r3, r2
    8486:	2b00      	cmp	r3, #0
    8488:	da03      	bge.n	8492 <jamming_state+0x32>
    848a:	3b01      	subs	r3, #1
    848c:	f063 0303 	orn	r3, r3, #3
    8490:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    8492:	4a09      	ldr	r2, [pc, #36]	; (84b8 <jamming_state+0x58>)
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    8494:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    8496:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    849a:	4b08      	ldr	r3, [pc, #32]	; (84bc <jamming_state+0x5c>)
    849c:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    849e:	2303      	movs	r3, #3
    84a0:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    84a2:	69a3      	ldr	r3, [r4, #24]
    84a4:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    84a6:	f64e 2360 	movw	r3, #60000	; 0xea60
    84aa:	60e3      	str	r3, [r4, #12]
    84ac:	bd10      	pop	{r4, pc}
    84ae:	bf00      	nop
    84b0:	2009c05c 	.word	0x2009c05c
    84b4:	80000003 	.word	0x80000003
    84b8:	0000ab30 	.word	0x0000ab30
    84bc:	1000044c 	.word	0x1000044c

000084c0 <continuous_cap_state>:
// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
    84c0:	b510      	push	{r4, lr}
    84c2:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    84c4:	2100      	movs	r1, #0
    84c6:	2228      	movs	r2, #40	; 0x28
    84c8:	4668      	mov	r0, sp
    84ca:	f7fb feb1 	bl	4230 <memset>
		.rxtime = CLK100NS,
    84ce:	4b17      	ldr	r3, [pc, #92]	; (852c <continuous_cap_state+0x6c>)
    84d0:	4a17      	ldr	r2, [pc, #92]	; (8530 <continuous_cap_state+0x70>)
    84d2:	681b      	ldr	r3, [r3, #0]
    84d4:	6812      	ldr	r2, [r2, #0]
    84d6:	f640 4135 	movw	r1, #3125	; 0xc35
    84da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    84de:	fb01 2303 	mla	r3, r1, r3, r2
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    84e2:	9309      	str	r3, [sp, #36]	; 0x24
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    84e4:	f000 fae2 	bl	8aac <cc2400_status>
static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    84e8:	06c0      	lsls	r0, r0, #27
    84ea:	d51d      	bpl.n	8528 <continuous_cap_state+0x68>
		RXLED_SET;
    84ec:	4b11      	ldr	r3, [pc, #68]	; (8534 <continuous_cap_state+0x74>)
    84ee:	2410      	movs	r4, #16
    84f0:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    84f2:	4668      	mov	r0, sp
    84f4:	f7ff fe7e 	bl	81f4 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    84f8:	2006      	movs	r0, #6
    84fa:	4669      	mov	r1, sp
    84fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    84fe:	f7fc fd4d 	bl	4f9c <enqueue_with_ts>
		RXLED_CLR;
    8502:	4b0d      	ldr	r3, [pc, #52]	; (8538 <continuous_cap_state+0x78>)

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    8504:	2061      	movs	r0, #97	; 0x61

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    8506:	601c      	str	r4, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    8508:	f000 fad7 	bl	8aba <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    850c:	f000 face 	bl	8aac <cc2400_status>
    8510:	0741      	lsls	r1, r0, #29
    8512:	d5fb      	bpl.n	850c <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8514:	200e      	movs	r0, #14
    8516:	f000 f9ef 	bl	88f8 <cc2400_get>
    851a:	f000 001f 	and.w	r0, r0, #31
    851e:	280f      	cmp	r0, #15
    8520:	d1f8      	bne.n	8514 <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    8522:	2062      	movs	r0, #98	; 0x62
    8524:	f000 fac9 	bl	8aba <cc2400_strobe>
	}
}
    8528:	b00a      	add	sp, #40	; 0x28
    852a:	bd10      	pop	{r4, pc}
    852c:	10001024 	.word	0x10001024
    8530:	40004008 	.word	0x40004008
    8534:	2009c038 	.word	0x2009c038
    8538:	2009c03c 	.word	0x2009c03c

0000853c <jam_cap_state>:

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
    853c:	b510      	push	{r4, lr}
    853e:	4604      	mov	r4, r0
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    8540:	f000 fab4 	bl	8aac <cc2400_status>
	}
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
    8544:	06c3      	lsls	r3, r0, #27
    8546:	d50e      	bpl.n	8566 <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
    8548:	2304      	movs	r3, #4
    854a:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    854c:	2301      	movs	r3, #1
    854e:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    8550:	4b11      	ldr	r3, [pc, #68]	; (8598 <jam_cap_state+0x5c>)
    8552:	4a12      	ldr	r2, [pc, #72]	; (859c <jam_cap_state+0x60>)
    8554:	681b      	ldr	r3, [r3, #0]
    8556:	6812      	ldr	r2, [r2, #0]
    8558:	f3c3 0313 	ubfx	r3, r3, #0, #20
    855c:	f640 4135 	movw	r1, #3125	; 0xc35
    8560:	fb01 2303 	mla	r3, r1, r3, r2
    8564:	61a3      	str	r3, [r4, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    8566:	6923      	ldr	r3, [r4, #16]
    8568:	b15b      	cbz	r3, 8582 <jam_cap_state+0x46>
    856a:	4620      	mov	r0, r4
    856c:	f7ff fe68 	bl	8240 <sleep_elapsed>
    8570:	b138      	cbz	r0, 8582 <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    8572:	2304      	movs	r3, #4
    8574:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    8576:	2300      	movs	r3, #0
    8578:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    857a:	4620      	mov	r0, r4
    857c:	210b      	movs	r1, #11
    857e:	f7ff fe49 	bl	8214 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    8582:	7823      	ldrb	r3, [r4, #0]
    8584:	2b02      	cmp	r3, #2
    8586:	d006      	beq.n	8596 <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    8588:	2064      	movs	r0, #100	; 0x64
    858a:	f000 fa96 	bl	8aba <cc2400_strobe>
		ssp_stop();
	}
}
    858e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
		cc2400_strobe(SRFOFF);
		ssp_stop();
    8592:	f7ff be21 	b.w	81d8 <ssp_stop>
    8596:	bd10      	pop	{r4, pc}
    8598:	10001024 	.word	0x10001024
    859c:	40004008 	.word	0x40004008

000085a0 <cap_state>:
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    85a0:	b530      	push	{r4, r5, lr}
    85a2:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    85a4:	2100      	movs	r1, #0
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    85a6:	4604      	mov	r4, r0
	ego_packet_t packet = {
    85a8:	2228      	movs	r2, #40	; 0x28
    85aa:	4668      	mov	r0, sp
    85ac:	f7fb fe40 	bl	4230 <memset>
		.rxtime = CLK100NS,
    85b0:	4b1b      	ldr	r3, [pc, #108]	; (8620 <cap_state+0x80>)
    85b2:	4a1c      	ldr	r2, [pc, #112]	; (8624 <cap_state+0x84>)
    85b4:	681b      	ldr	r3, [r3, #0]
    85b6:	6812      	ldr	r2, [r2, #0]
    85b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    85bc:	f640 4135 	movw	r1, #3125	; 0xc35
    85c0:	fb01 2303 	mla	r3, r1, r3, r2
	};

	if (sleep_elapsed(state)) {
    85c4:	4620      	mov	r0, r4
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    85c6:	9309      	str	r3, [sp, #36]	; 0x24
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    85c8:	f7ff fe3a 	bl	8240 <sleep_elapsed>
    85cc:	b128      	cbz	r0, 85da <cap_state+0x3a>
		sleep_ms(state, 4);
    85ce:	4620      	mov	r0, r4
    85d0:	2104      	movs	r1, #4
    85d2:	f7ff fe1f 	bl	8214 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    85d6:	2303      	movs	r3, #3
    85d8:	7023      	strb	r3, [r4, #0]
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    85da:	f000 fa67 	bl	8aac <cc2400_status>
	if (sleep_elapsed(state)) {
		sleep_ms(state, 4);
		state->state = EGO_ST_SLEEP;
	}

	if (sync_received()) {
    85de:	06c2      	lsls	r2, r0, #27
    85e0:	d512      	bpl.n	8608 <cap_state+0x68>
		RXLED_SET;
    85e2:	4b11      	ldr	r3, [pc, #68]	; (8628 <cap_state+0x88>)
    85e4:	2510      	movs	r5, #16
    85e6:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    85e8:	4668      	mov	r0, sp
    85ea:	f7ff fe03 	bl	81f4 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    85ee:	4669      	mov	r1, sp
    85f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    85f2:	2006      	movs	r0, #6
    85f4:	f7fc fcd2 	bl	4f9c <enqueue_with_ts>
		RXLED_CLR;
    85f8:	4b0c      	ldr	r3, [pc, #48]	; (862c <cap_state+0x8c>)

		sleep_ms(state, 6);
    85fa:	4620      	mov	r0, r4

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    85fc:	601d      	str	r5, [r3, #0]

		sleep_ms(state, 6);
    85fe:	2106      	movs	r1, #6
    8600:	f7ff fe08 	bl	8214 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8604:	2303      	movs	r3, #3
    8606:	7023      	strb	r3, [r4, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    8608:	7823      	ldrb	r3, [r4, #0]
    860a:	2b02      	cmp	r3, #2
    860c:	d006      	beq.n	861c <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    860e:	2064      	movs	r0, #100	; 0x64
    8610:	f000 fa53 	bl	8aba <cc2400_strobe>
		ssp_stop();
    8614:	f7ff fde0 	bl	81d8 <ssp_stop>
		state->timer_active = 1;
    8618:	2301      	movs	r3, #1
    861a:	6123      	str	r3, [r4, #16]
	}
}
    861c:	b00b      	add	sp, #44	; 0x2c
    861e:	bd30      	pop	{r4, r5, pc}
    8620:	10001024 	.word	0x10001024
    8624:	40004008 	.word	0x40004008
    8628:	2009c038 	.word	0x2009c038
    862c:	2009c03c 	.word	0x2009c03c

00008630 <ego_main>:
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    8630:	b530      	push	{r4, r5, lr}
    8632:	b089      	sub	sp, #36	; 0x24
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    8634:	2100      	movs	r1, #0
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    8636:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    8638:	221c      	movs	r2, #28
    863a:	a801      	add	r0, sp, #4
    863c:	f7fb fdf8 	bl	4230 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    8640:	2c01      	cmp	r4, #1
    8642:	4d14      	ldr	r5, [pc, #80]	; (8694 <ego_main+0x64>)
    8644:	d009      	beq.n	865a <ego_main+0x2a>
    8646:	d306      	bcc.n	8656 <ego_main+0x26>
    8648:	2c02      	cmp	r4, #2
    864a:	d101      	bne.n	8650 <ego_main+0x20>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
			break;
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    864c:	4c12      	ldr	r4, [pc, #72]	; (8698 <ego_main+0x68>)
			break;
    864e:	e005      	b.n	865c <ego_main+0x2c>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    8650:	2300      	movs	r3, #0
    8652:	702b      	strb	r3, [r5, #0]
    8654:	e01b      	b.n	868e <ego_main+0x5e>
		jamming_state,
	};

	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
    8656:	4c11      	ldr	r4, [pc, #68]	; (869c <ego_main+0x6c>)
    8658:	e000      	b.n	865c <ego_main+0x2c>
			break;
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    865a:	4c11      	ldr	r4, [pc, #68]	; (86a0 <ego_main+0x70>)
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
}

static void ego_init(void) {
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    865c:	4b11      	ldr	r3, [pc, #68]	; (86a4 <ego_main+0x74>)
    865e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8662:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    8664:	f000 f8c0 	bl	87e8 <dio_ssp_init>
	}

	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
    8668:	782b      	ldrb	r3, [r5, #0]
    866a:	2b0d      	cmp	r3, #13
    866c:	d106      	bne.n	867c <ego_main+0x4c>
			break;
		handler[state.state](&state);
    866e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8672:	a801      	add	r0, sp, #4
    8674:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    8678:	4798      	blx	r3
	}
    867a:	e7f5      	b.n	8668 <ego_main+0x38>

	dio_ssp_init();
}

static void ego_deinit(void) {
	cc2400_strobe(SRFOFF);
    867c:	2064      	movs	r0, #100	; 0x64
    867e:	f000 fa1c 	bl	8aba <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8682:	f7ff fda9 	bl	81d8 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8686:	4b08      	ldr	r3, [pc, #32]	; (86a8 <ego_main+0x78>)
    8688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    868c:	601a      	str	r2, [r3, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    868e:	b009      	add	sp, #36	; 0x24
    8690:	bd30      	pop	{r4, r5, pc}
    8692:	bf00      	nop
    8694:	10000e46 	.word	0x10000e46
    8698:	0000ab6c 	.word	0x0000ab6c
    869c:	0000ab38 	.word	0x0000ab38
    86a0:	0000ab54 	.word	0x0000ab54
    86a4:	e000e100 	.word	0xe000e100
    86a8:	e000e180 	.word	0xe000e180

000086ac <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    86ac:	f000 bd18 	b.w	90e0 <USBHwISR>

000086b0 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    86b0:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    86b2:	2300      	movs	r3, #0
    86b4:	4a0c      	ldr	r2, [pc, #48]	; (86e8 <Reset_Handler+0x38>)
    86b6:	490d      	ldr	r1, [pc, #52]	; (86ec <Reset_Handler+0x3c>)
    86b8:	1898      	adds	r0, r3, r2
    86ba:	4288      	cmp	r0, r1
    86bc:	d204      	bcs.n	86c8 <Reset_Handler+0x18>
	{
		*dest++ = *src++;
    86be:	490c      	ldr	r1, [pc, #48]	; (86f0 <Reset_Handler+0x40>)
    86c0:	5859      	ldr	r1, [r3, r1]
    86c2:	5099      	str	r1, [r3, r2]
    86c4:	3304      	adds	r3, #4
    86c6:	e7f5      	b.n	86b4 <Reset_Handler+0x4>
{
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    86c8:	4b0a      	ldr	r3, [pc, #40]	; (86f4 <Reset_Handler+0x44>)
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    86ca:	4a0b      	ldr	r2, [pc, #44]	; (86f8 <Reset_Handler+0x48>)
    86cc:	4293      	cmp	r3, r2
    86ce:	d203      	bcs.n	86d8 <Reset_Handler+0x28>
	{
		*src++ = 0;
    86d0:	2200      	movs	r2, #0
    86d2:	f843 2b04 	str.w	r2, [r3], #4
    86d6:	e7f8      	b.n	86ca <Reset_Handler+0x1a>
	}

	__libc_init_array();
    86d8:	f7fb fd7c 	bl	41d4 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    86dc:	4b07      	ldr	r3, [pc, #28]	; (86fc <Reset_Handler+0x4c>)
    86de:	4a08      	ldr	r2, [pc, #32]	; (8700 <Reset_Handler+0x50>)
    86e0:	601a      	str	r2, [r3, #0]

	main();
    86e2:	f7fe fdb9 	bl	7258 <main>
    86e6:	e7fe      	b.n	86e6 <Reset_Handler+0x36>
    86e8:	10000020 	.word	0x10000020
    86ec:	10000e14 	.word	0x10000e14
    86f0:	0000abd8 	.word	0x0000abd8
    86f4:	10000e18 	.word	0x10000e18
    86f8:	100037c0 	.word	0x100037c0
    86fc:	e000ed08 	.word	0xe000ed08
    8700:	00004000 	.word	0x00004000

00008704 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    8704:	e7fe      	b.n	8704 <ADC_IRQHandler>
    8706:	0000      	movs	r0, r0

00008708 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    8708:	4a04      	ldr	r2, [pc, #16]	; (871c <spi_delay+0x14>)
    870a:	230a      	movs	r3, #10
    870c:	6013      	str	r3, [r2, #0]
       while (--delay_counter);
    870e:	6813      	ldr	r3, [r2, #0]
    8710:	3b01      	subs	r3, #1
    8712:	6013      	str	r3, [r2, #0]
    8714:	2b00      	cmp	r3, #0
    8716:	d1fa      	bne.n	870e <spi_delay+0x6>
}
    8718:	4770      	bx	lr
    871a:	bf00      	nop
    871c:	10000f28 	.word	0x10000f28

00008720 <rbit>:
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
  u32 result = 0;
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    8720:	fa90 f0a0 	rbit	r0, r0
  return result;
}
    8724:	4770      	bx	lr
    8726:	0000      	movs	r0, r0

00008728 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    8728:	0883      	lsrs	r3, r0, #2
    872a:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    872e:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    8732:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    8736:	eb03 2390 	add.w	r3, r3, r0, lsr #10
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    873a:	4a05      	ldr	r2, [pc, #20]	; (8750 <wait_us+0x28>)
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    873c:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    8740:	6050      	str	r0, [r2, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    8742:	6853      	ldr	r3, [r2, #4]
    8744:	3b01      	subs	r3, #1
    8746:	6053      	str	r3, [r2, #4]
    8748:	2b00      	cmp	r3, #0
    874a:	d1fa      	bne.n	8742 <wait_us+0x1a>
}
    874c:	4770      	bx	lr
    874e:	bf00      	nop
    8750:	10000f28 	.word	0x10000f28

00008754 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8754:	4b01      	ldr	r3, [pc, #4]	; (875c <wait+0x8>)
    8756:	4358      	muls	r0, r3
    8758:	f7ff bfe6 	b.w	8728 <wait_us>
    875c:	000f4240 	.word	0x000f4240

00008760 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    8760:	4a10      	ldr	r2, [pc, #64]	; (87a4 <all_pins_off+0x44>)
    8762:	2300      	movs	r3, #0
    8764:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    8766:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    8768:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    876a:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    876c:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    876e:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    8770:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    8772:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    8774:	4a0c      	ldr	r2, [pc, #48]	; (87a8 <all_pins_off+0x48>)
    8776:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    8778:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    877a:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    877c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    877e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    8782:	4a0a      	ldr	r2, [pc, #40]	; (87ac <all_pins_off+0x4c>)
    8784:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    8786:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    8788:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    878a:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    878c:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    878e:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    8790:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    8792:	4a07      	ldr	r2, [pc, #28]	; (87b0 <all_pins_off+0x50>)
    8794:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    8796:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    8798:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    879a:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    879c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    87a0:	4770      	bx	lr
    87a2:	bf00      	nop
    87a4:	4002c000 	.word	0x4002c000
    87a8:	2009c000 	.word	0x2009c000
    87ac:	4002c040 	.word	0x4002c040
    87b0:	2009c014 	.word	0x2009c014

000087b4 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    87b4:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    87b6:	f7ff ffd3 	bl	8760 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    87ba:	4a0a      	ldr	r2, [pc, #40]	; (87e4 <gpio_init+0x30>)
    87bc:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    87be:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    87c2:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    87c4:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    87c6:	f240 11b1 	movw	r1, #433	; 0x1b1
    87ca:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    87cc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    87d0:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    87d2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    87d6:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    87d8:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    87da:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    87dc:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    87de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    87e2:	bd08      	pop	{r3, pc}
    87e4:	2009c000 	.word	0x2009c000

000087e8 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    87e8:	4b11      	ldr	r3, [pc, #68]	; (8830 <dio_ssp_init+0x48>)
    87ea:	681a      	ldr	r2, [r3, #0]
    87ec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    87f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    87f4:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    87f6:	681a      	ldr	r2, [r3, #0]
    87f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    87fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    8800:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    8802:	681a      	ldr	r2, [r3, #0]
    8804:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    8808:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    880c:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    880e:	681a      	ldr	r2, [r3, #0]
    8810:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    8814:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8818:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    881a:	4b06      	ldr	r3, [pc, #24]	; (8834 <dio_ssp_init+0x4c>)
    881c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8820:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    8822:	4b05      	ldr	r3, [pc, #20]	; (8838 <dio_ssp_init+0x50>)
    8824:	22c7      	movs	r2, #199	; 0xc7
    8826:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    8828:	220c      	movs	r2, #12
    882a:	605a      	str	r2, [r3, #4]
    882c:	4770      	bx	lr
    882e:	bf00      	nop
    8830:	4002c000 	.word	0x4002c000
    8834:	2009c098 	.word	0x2009c098
    8838:	40030000 	.word	0x40030000

0000883c <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    883c:	4b09      	ldr	r3, [pc, #36]	; (8864 <atest_init+0x28>)
    883e:	681a      	ldr	r2, [r3, #0]
    8840:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
    8844:	601a      	str	r2, [r3, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    8846:	4b08      	ldr	r3, [pc, #32]	; (8868 <atest_init+0x2c>)
    8848:	681a      	ldr	r2, [r3, #0]
    884a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
    884e:	601a      	str	r2, [r3, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    8850:	4b06      	ldr	r3, [pc, #24]	; (886c <atest_init+0x30>)
    8852:	681a      	ldr	r2, [r3, #0]
    8854:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    8858:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    885a:	681a      	ldr	r2, [r3, #0]
    885c:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    8860:	601a      	str	r2, [r3, #0]
    8862:	4770      	bx	lr
    8864:	4002c004 	.word	0x4002c004
    8868:	2009c000 	.word	0x2009c000
    886c:	4002c044 	.word	0x4002c044

00008870 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    8870:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    8872:	2401      	movs	r4, #1
    8874:	1e43      	subs	r3, r0, #1
    8876:	409c      	lsls	r4, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    8878:	2220      	movs	r2, #32

	while (len--) {
    887a:	3801      	subs	r0, #1

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    887c:	4b0d      	ldr	r3, [pc, #52]	; (88b4 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    887e:	b2c0      	uxtb	r0, r0
    8880:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    8882:	601a      	str	r2, [r3, #0]
    8884:	4b0c      	ldr	r3, [pc, #48]	; (88b8 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    8886:	d011      	beq.n	88ac <cc2400_spi+0x3c>
		if (data & msb)
    8888:	4221      	tst	r1, r4
			MOSI_SET;
		else
			MOSI_CLR;
    888a:	bf08      	it	eq
    888c:	4d09      	ldreq	r5, [pc, #36]	; (88b4 <cc2400_spi+0x44>)
    888e:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
		if (data & msb)
			MOSI_SET;
    8892:	bf14      	ite	ne
    8894:	601a      	strne	r2, [r3, #0]
		else
			MOSI_CLR;
    8896:	602a      	streq	r2, [r5, #0]
		data <<= 1;

		SCLK_SET;
    8898:	2210      	movs	r2, #16
    889a:	601a      	str	r2, [r3, #0]
		if (MISO)
    889c:	4b07      	ldr	r3, [pc, #28]	; (88bc <cc2400_spi+0x4c>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    889e:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    88a0:	681b      	ldr	r3, [r3, #0]
    88a2:	079b      	lsls	r3, r3, #30
			data |= 1;
    88a4:	bf48      	it	mi
    88a6:	f041 0101 	orrmi.w	r1, r1, #1
    88aa:	e7e6      	b.n	887a <cc2400_spi+0xa>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    88ac:	2220      	movs	r2, #32
    88ae:	601a      	str	r2, [r3, #0]

	return data;
}
    88b0:	4608      	mov	r0, r1
    88b2:	bd30      	pop	{r4, r5, pc}
    88b4:	2009c05c 	.word	0x2009c05c
    88b8:	2009c058 	.word	0x2009c058
    88bc:	2009c054 	.word	0x2009c054

000088c0 <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    88c0:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    88c2:	4c0a      	ldr	r4, [pc, #40]	; (88ec <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    88c4:	f7ff ffba 	bl	883c <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    88c8:	f44f 7300 	mov.w	r3, #512	; 0x200
    88cc:	6023      	str	r3, [r4, #0]
	wait_us(50);
    88ce:	2032      	movs	r0, #50	; 0x32
    88d0:	f7ff ff2a 	bl	8728 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    88d4:	4b06      	ldr	r3, [pc, #24]	; (88f0 <cc2400_init+0x30>)
    88d6:	2220      	movs	r2, #32
    88d8:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    88da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    88de:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    88e0:	2018      	movs	r0, #24
    88e2:	4904      	ldr	r1, [pc, #16]	; (88f4 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    88e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    88e8:	f7ff bfc2 	b.w	8870 <cc2400_spi>
    88ec:	2009c038 	.word	0x2009c038
    88f0:	2009c058 	.word	0x2009c058
    88f4:	000d7fff 	.word	0x000d7fff

000088f8 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    88f8:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    88fa:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    88fe:	0409      	lsls	r1, r1, #16
    8900:	2018      	movs	r0, #24
    8902:	f7ff ffb5 	bl	8870 <cc2400_spi>
	return in & 0xFFFF;
}
    8906:	b280      	uxth	r0, r0
    8908:	bd08      	pop	{r3, pc}

0000890a <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    890a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    890e:	2018      	movs	r0, #24
    8910:	f7ff bfae 	b.w	8870 <cc2400_spi>

00008914 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    8914:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    8916:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    891a:	0209      	lsls	r1, r1, #8
    891c:	2010      	movs	r0, #16
    891e:	f7ff ffa7 	bl	8870 <cc2400_spi>
	return in & 0xFF;
}
    8922:	b2c0      	uxtb	r0, r0
    8924:	bd08      	pop	{r3, pc}
    8926:	0000      	movs	r0, r0

00008928 <cc2400_get_rev>:

//JWHUR cc2400_get_rev
u8 cc2400_get_rev (u8 reg)
{
    8928:	b510      	push	{r4, lr}
	u32 out = (reg | 0x80) << 8;
	u32 msb = 1 << 15;
	u8 len = 16;
	CSN_CLR;
    892a:	4b12      	ldr	r3, [pc, #72]	; (8974 <cc2400_get_rev+0x4c>)
    892c:	2220      	movs	r2, #32
}

//JWHUR cc2400_get_rev
u8 cc2400_get_rev (u8 reg)
{
	u32 out = (reg | 0x80) << 8;
    892e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	u32 msb = 1 << 15;
	u8 len = 16;
	CSN_CLR;
    8932:	601a      	str	r2, [r3, #0]
}

//JWHUR cc2400_get_rev
u8 cc2400_get_rev (u8 reg)
{
	u32 out = (reg | 0x80) << 8;
    8934:	0200      	lsls	r0, r0, #8
	u32 msb = 1 << 15;
	u8 len = 16;
	CSN_CLR;
	while (len--) {
    8936:	2211      	movs	r2, #17
    8938:	1e53      	subs	r3, r2, #1
    893a:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    893e:	4b0e      	ldr	r3, [pc, #56]	; (8978 <cc2400_get_rev+0x50>)
    8940:	d014      	beq.n	896c <cc2400_get_rev+0x44>
		if (out & msb) MOSI_SET;
    8942:	f410 4f00 	tst.w	r0, #32768	; 0x8000
		else MOSI_CLR;
    8946:	bf08      	it	eq
    8948:	4c0a      	ldreq	r4, [pc, #40]	; (8974 <cc2400_get_rev+0x4c>)
    894a:	f04f 0101 	mov.w	r1, #1
	u32 out = (reg | 0x80) << 8;
	u32 msb = 1 << 15;
	u8 len = 16;
	CSN_CLR;
	while (len--) {
		if (out & msb) MOSI_SET;
    894e:	bf14      	ite	ne
    8950:	6019      	strne	r1, [r3, #0]
		else MOSI_CLR;
    8952:	6021      	streq	r1, [r4, #0]
		out <<= 1;
		SCLK_SET;
    8954:	2110      	movs	r1, #16
    8956:	6019      	str	r1, [r3, #0]
		if (MISO) out |= 1;
    8958:	4b08      	ldr	r3, [pc, #32]	; (897c <cc2400_get_rev+0x54>)
	u8 len = 16;
	CSN_CLR;
	while (len--) {
		if (out & msb) MOSI_SET;
		else MOSI_CLR;
		out <<= 1;
    895a:	0040      	lsls	r0, r0, #1
		SCLK_SET;
		if (MISO) out |= 1;
    895c:	681b      	ldr	r3, [r3, #0]
    895e:	079c      	lsls	r4, r3, #30
		SCLK_CLR;
    8960:	4b04      	ldr	r3, [pc, #16]	; (8974 <cc2400_get_rev+0x4c>)
	while (len--) {
		if (out & msb) MOSI_SET;
		else MOSI_CLR;
		out <<= 1;
		SCLK_SET;
		if (MISO) out |= 1;
    8962:	bf48      	it	mi
    8964:	f040 0001 	orrmi.w	r0, r0, #1
		SCLK_CLR;
    8968:	6019      	str	r1, [r3, #0]
    896a:	e7e5      	b.n	8938 <cc2400_get_rev+0x10>
	}
	CSN_SET;
    896c:	2220      	movs	r2, #32
    896e:	601a      	str	r2, [r3, #0]
	return out & 0xFF;
}
    8970:	b2c0      	uxtb	r0, r0
    8972:	bd10      	pop	{r4, pc}
    8974:	2009c05c 	.word	0x2009c05c
    8978:	2009c058 	.word	0x2009c058
    897c:	2009c054 	.word	0x2009c054

00008980 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    8980:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    8984:	2010      	movs	r0, #16
    8986:	f7ff bf73 	b.w	8870 <cc2400_spi>
    898a:	0000      	movs	r0, r0

0000898c <cc2400_fifo_write>:
       while (--delay_counter);
}


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    898e:	4b21      	ldr	r3, [pc, #132]	; (8a14 <cc2400_fifo_write+0x88>)
    8990:	2220      	movs	r2, #32
    8992:	601a      	str	r2, [r3, #0]
    8994:	2308      	movs	r3, #8


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
    8996:	2270      	movs	r2, #112	; 0x70

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    8998:	f012 0f80 	tst.w	r2, #128	; 0x80
    899c:	4d1e      	ldr	r5, [pc, #120]	; (8a18 <cc2400_fifo_write+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    899e:	bf08      	it	eq
    89a0:	4e1c      	ldreq	r6, [pc, #112]	; (8a14 <cc2400_fifo_write+0x88>)
    89a2:	f04f 0401 	mov.w	r4, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    89a6:	bf14      	ite	ne
    89a8:	602c      	strne	r4, [r5, #0]
		else
			MOSI_CLR;
    89aa:	6034      	streq	r4, [r6, #0]
		reg <<= 1;
		SCLK_SET;
    89ac:	2410      	movs	r4, #16
    89ae:	602c      	str	r4, [r5, #0]
    89b0:	3b01      	subs	r3, #1
		SCLK_CLR;
    89b2:	4d18      	ldr	r5, [pc, #96]	; (8a14 <cc2400_fifo_write+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    89b4:	0052      	lsls	r2, r2, #1
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    89b6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    89ba:	b2d2      	uxtb	r2, r2
		SCLK_SET;
		SCLK_CLR;
    89bc:	602c      	str	r4, [r5, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    89be:	d1eb      	bne.n	8998 <cc2400_fifo_write+0xc>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    89c0:	b2da      	uxtb	r2, r3
    89c2:	4282      	cmp	r2, r0
    89c4:	d217      	bcs.n	89f6 <cc2400_fifo_write+0x6a>
		temp = data[i];
    89c6:	5cca      	ldrb	r2, [r1, r3]
    89c8:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
    89ca:	f012 0f80 	tst.w	r2, #128	; 0x80
    89ce:	4e12      	ldr	r6, [pc, #72]	; (8a18 <cc2400_fifo_write+0x8c>)
				MOSI_SET;
			else
				MOSI_CLR;
    89d0:	bf08      	it	eq
    89d2:	4f10      	ldreq	r7, [pc, #64]	; (8a14 <cc2400_fifo_write+0x88>)
    89d4:	f04f 0501 	mov.w	r5, #1

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
    89d8:	bf14      	ite	ne
    89da:	6035      	strne	r5, [r6, #0]
			else
				MOSI_CLR;
    89dc:	603d      	streq	r5, [r7, #0]
			temp <<= 1;
			SCLK_SET;
    89de:	2510      	movs	r5, #16
    89e0:	6035      	str	r5, [r6, #0]
    89e2:	3c01      	subs	r4, #1
			SCLK_CLR;
    89e4:	4e0b      	ldr	r6, [pc, #44]	; (8a14 <cc2400_fifo_write+0x88>)
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    89e6:	0052      	lsls	r2, r2, #1
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    89e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    89ec:	b2d2      	uxtb	r2, r2
			SCLK_SET;
			SCLK_CLR;
    89ee:	6035      	str	r5, [r6, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    89f0:	d1eb      	bne.n	89ca <cc2400_fifo_write+0x3e>
    89f2:	3301      	adds	r3, #1
    89f4:	e7e4      	b.n	89c0 <cc2400_fifo_write+0x34>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    89f6:	2308      	movs	r3, #8
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    89f8:	4c07      	ldr	r4, [pc, #28]	; (8a18 <cc2400_fifo_write+0x8c>)
		SCLK_CLR;
    89fa:	4906      	ldr	r1, [pc, #24]	; (8a14 <cc2400_fifo_write+0x88>)
    89fc:	3b01      	subs	r3, #1
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    89fe:	2210      	movs	r2, #16
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    8a00:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		SCLK_SET;
    8a04:	6022      	str	r2, [r4, #0]
		SCLK_CLR;
    8a06:	600a      	str	r2, [r1, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    8a08:	d1f6      	bne.n	89f8 <cc2400_fifo_write+0x6c>
		SCLK_SET;
		SCLK_CLR;
	}
	
	spi_delay();
    8a0a:	f7ff fe7d 	bl	8708 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    8a0e:	2320      	movs	r3, #32
    8a10:	6023      	str	r3, [r4, #0]
    8a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a14:	2009c05c 	.word	0x2009c05c
    8a18:	2009c058 	.word	0x2009c058

00008a1c <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    8a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    8a20:	4b20      	ldr	r3, [pc, #128]	; (8aa4 <cc2400_fifo_read+0x88>)
    8a22:	2220      	movs	r2, #32
    8a24:	601a      	str	r2, [r3, #0]
	/* end transaction by raising CSN */
	CSN_SET;
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    8a26:	4607      	mov	r7, r0
    8a28:	4688      	mov	r8, r1
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    8a2a:	2508      	movs	r5, #8
/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
	u8 msb = 1 << 7;
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;
    8a2c:	23f0      	movs	r3, #240	; 0xf0

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    8a2e:	f013 0f80 	tst.w	r3, #128	; 0x80
    8a32:	491d      	ldr	r1, [pc, #116]	; (8aa8 <cc2400_fifo_read+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    8a34:	bf08      	it	eq
    8a36:	481b      	ldreq	r0, [pc, #108]	; (8aa4 <cc2400_fifo_read+0x88>)
    8a38:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    8a3c:	bf14      	ite	ne
    8a3e:	600a      	strne	r2, [r1, #0]
		else
			MOSI_CLR;
    8a40:	6002      	streq	r2, [r0, #0]
		reg <<= 1;
		SCLK_SET;
    8a42:	2210      	movs	r2, #16
    8a44:	600a      	str	r2, [r1, #0]
    8a46:	3d01      	subs	r5, #1
		SCLK_CLR;
    8a48:	4916      	ldr	r1, [pc, #88]	; (8aa4 <cc2400_fifo_read+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    8a4a:	005b      	lsls	r3, r3, #1
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8a4c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    8a50:	b2db      	uxtb	r3, r3
		SCLK_SET;
		SCLK_CLR;
    8a52:	600a      	str	r2, [r1, #0]
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8a54:	d1eb      	bne.n	8a2e <cc2400_fifo_read+0x12>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    8a56:	b2eb      	uxtb	r3, r5
    8a58:	42bb      	cmp	r3, r7
    8a5a:	d21b      	bcs.n	8a94 <cc2400_fifo_read+0x78>
    8a5c:	2608      	movs	r6, #8
    8a5e:	2400      	movs	r4, #0
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
    8a60:	f7ff fe52 	bl	8708 <spi_delay>
			SCLK_SET;
    8a64:	4b10      	ldr	r3, [pc, #64]	; (8aa8 <cc2400_fifo_read+0x8c>)
    8a66:	2210      	movs	r2, #16
    8a68:	601a      	str	r2, [r3, #0]
			temp <<= 1;
			if (MISO)
    8a6a:	3b04      	subs	r3, #4
    8a6c:	681b      	ldr	r3, [r3, #0]
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    8a6e:	0064      	lsls	r4, r4, #1
			if (MISO)
    8a70:	079b      	lsls	r3, r3, #30
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    8a72:	b2e4      	uxtb	r4, r4
			if (MISO)
				temp |= 1;
    8a74:	bf48      	it	mi
    8a76:	f044 0401 	orrmi.w	r4, r4, #1
    8a7a:	3e01      	subs	r6, #1
			spi_delay();
    8a7c:	f7ff fe44 	bl	8708 <spi_delay>
			SCLK_CLR;
    8a80:	4b08      	ldr	r3, [pc, #32]	; (8aa4 <cc2400_fifo_read+0x88>)
    8a82:	2210      	movs	r2, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8a84:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
			SCLK_SET;
			temp <<= 1;
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
    8a88:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8a8a:	d1e9      	bne.n	8a60 <cc2400_fifo_read+0x44>
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
		}
		buf[i] = temp;
    8a8c:	f808 4005 	strb.w	r4, [r8, r5]
    8a90:	3501      	adds	r5, #1
    8a92:	e7e0      	b.n	8a56 <cc2400_fifo_read+0x3a>
	}

	/* end transaction by raising CSN */
	spi_delay();
    8a94:	f7ff fe38 	bl	8708 <spi_delay>
	CSN_SET;
    8a98:	4b03      	ldr	r3, [pc, #12]	; (8aa8 <cc2400_fifo_read+0x8c>)
    8a9a:	2220      	movs	r2, #32
    8a9c:	601a      	str	r2, [r3, #0]
    8a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8aa2:	bf00      	nop
    8aa4:	2009c05c 	.word	0x2009c05c
    8aa8:	2009c058 	.word	0x2009c058

00008aac <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    8aac:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    8aae:	2100      	movs	r1, #0
    8ab0:	2008      	movs	r0, #8
    8ab2:	f7ff fedd 	bl	8870 <cc2400_spi>
}
    8ab6:	b2c0      	uxtb	r0, r0
    8ab8:	bd08      	pop	{r3, pc}

00008aba <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    8aba:	b508      	push	{r3, lr}
    8abc:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    8abe:	2008      	movs	r0, #8
    8ac0:	f7ff fed6 	bl	8870 <cc2400_spi>
}
    8ac4:	b2c0      	uxtb	r0, r0
    8ac6:	bd08      	pop	{r3, pc}

00008ac8 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    8ac8:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8aca:	2018      	movs	r0, #24
    8acc:	2100      	movs	r1, #0
    8ace:	f7ff fecf 	bl	8870 <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    8ad2:	2000      	movs	r0, #0
    8ad4:	f7ff ff10 	bl	88f8 <cc2400_get>
    8ad8:	2800      	cmp	r0, #0
    8ada:	d1fa      	bne.n	8ad2 <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8adc:	2018      	movs	r0, #24
    8ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8ae2:	f7ff fec5 	bl	8870 <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    8ae6:	2000      	movs	r0, #0
    8ae8:	f7ff ff06 	bl	88f8 <cc2400_get>
    8aec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    8af0:	d1f9      	bne.n	8ae6 <cc2400_reset+0x1e>
}
    8af2:	bd08      	pop	{r3, pc}

00008af4 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    8af4:	b510      	push	{r4, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    8af6:	4b46      	ldr	r3, [pc, #280]	; (8c10 <clock_start+0x11c>)
    8af8:	f244 023a 	movw	r2, #16442	; 0x403a
    8afc:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    8afe:	2200      	movs	r2, #0
    8b00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    8b04:	3380      	adds	r3, #128	; 0x80
    8b06:	681a      	ldr	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    8b08:	21aa      	movs	r1, #170	; 0xaa

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    8b0a:	f022 0202 	bic.w	r2, r2, #2
    8b0e:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    8b10:	4a40      	ldr	r2, [pc, #256]	; (8c14 <clock_start+0x120>)
    8b12:	6011      	str	r1, [r2, #0]
    8b14:	2155      	movs	r1, #85	; 0x55
    8b16:	6011      	str	r1, [r2, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    8b18:	4a3f      	ldr	r2, [pc, #252]	; (8c18 <clock_start+0x124>)
    8b1a:	6812      	ldr	r2, [r2, #0]
    8b1c:	0190      	lsls	r0, r2, #6
    8b1e:	d4fb      	bmi.n	8b18 <clock_start+0x24>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    8b20:	681a      	ldr	r2, [r3, #0]
    8b22:	f022 0201 	bic.w	r2, r2, #1
    8b26:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    8b28:	4b3a      	ldr	r3, [pc, #232]	; (8c14 <clock_start+0x120>)
    8b2a:	22aa      	movs	r2, #170	; 0xaa
    8b2c:	601a      	str	r2, [r3, #0]
    8b2e:	2255      	movs	r2, #85	; 0x55
    8b30:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    8b32:	4b39      	ldr	r3, [pc, #228]	; (8c18 <clock_start+0x124>)
    8b34:	681b      	ldr	r3, [r3, #0]
    8b36:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    8b3a:	d1fa      	bne.n	8b32 <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    8b3c:	4a37      	ldr	r2, [pc, #220]	; (8c1c <clock_start+0x128>)
    8b3e:	6013      	str	r3, [r2, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    8b40:	f7ff ffc2 	bl	8ac8 <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8b44:	2018      	movs	r0, #24
    8b46:	4936      	ldr	r1, [pc, #216]	; (8c20 <clock_start+0x12c>)
    8b48:	f7ff fe92 	bl	8870 <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    8b4c:	2060      	movs	r0, #96	; 0x60
    8b4e:	f7ff ffb4 	bl	8aba <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8b52:	f7ff ffab 	bl	8aac <cc2400_status>
    8b56:	0641      	lsls	r1, r0, #25
    8b58:	d5fb      	bpl.n	8b52 <clock_start+0x5e>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    8b5a:	4b32      	ldr	r3, [pc, #200]	; (8c24 <clock_start+0x130>)
    8b5c:	2220      	movs	r2, #32
    8b5e:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    8b60:	681a      	ldr	r2, [r3, #0]
    8b62:	0652      	lsls	r2, r2, #25
    8b64:	d5fc      	bpl.n	8b60 <clock_start+0x6c>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    8b66:	4b30      	ldr	r3, [pc, #192]	; (8c28 <clock_start+0x134>)
    8b68:	2208      	movs	r2, #8
    8b6a:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    8b6c:	2200      	movs	r2, #0
    8b6e:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    8b70:	2201      	movs	r2, #1
    8b72:	f843 2c9c 	str.w	r2, [r3, #-156]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    8b76:	4a2d      	ldr	r2, [pc, #180]	; (8c2c <clock_start+0x138>)
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
#endif
	PCLKSEL1  = 0;

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    8b78:	3b9c      	subs	r3, #156	; 0x9c

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    8b7a:	f843 2c88 	str.w	r2, [r3, #-136]
	PLL0FEED_SEQUENCE;
    8b7e:	21aa      	movs	r1, #170	; 0xaa
    8b80:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    8b82:	482b      	ldr	r0, [pc, #172]	; (8c30 <clock_start+0x13c>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    8b84:	f843 1c80 	str.w	r1, [r3, #-128]
    8b88:	f843 2c80 	str.w	r2, [r3, #-128]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    8b8c:	6804      	ldr	r4, [r0, #0]
    8b8e:	f044 0401 	orr.w	r4, r4, #1
    8b92:	6004      	str	r4, [r0, #0]
	PLL0FEED_SEQUENCE;
    8b94:	f843 1c80 	str.w	r1, [r3, #-128]
    8b98:	f843 2c80 	str.w	r2, [r3, #-128]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    8b9c:	4b1e      	ldr	r3, [pc, #120]	; (8c18 <clock_start+0x124>)
    8b9e:	681b      	ldr	r3, [r3, #0]
    8ba0:	01db      	lsls	r3, r3, #7
    8ba2:	d5fb      	bpl.n	8b9c <clock_start+0xa8>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    8ba4:	4b1d      	ldr	r3, [pc, #116]	; (8c1c <clock_start+0x128>)
    8ba6:	2203      	movs	r2, #3
    8ba8:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    8baa:	f853 2c84 	ldr.w	r2, [r3, #-132]
    8bae:	f042 0202 	orr.w	r2, r2, #2
    8bb2:	f843 2c84 	str.w	r2, [r3, #-132]
	PLL0FEED_SEQUENCE;
    8bb6:	22aa      	movs	r2, #170	; 0xaa
    8bb8:	f843 2c78 	str.w	r2, [r3, #-120]
    8bbc:	2255      	movs	r2, #85	; 0x55
    8bbe:	f843 2c78 	str.w	r2, [r3, #-120]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    8bc2:	4b15      	ldr	r3, [pc, #84]	; (8c18 <clock_start+0x124>)
    8bc4:	681b      	ldr	r3, [r3, #0]
    8bc6:	019c      	lsls	r4, r3, #6
    8bc8:	d5fb      	bpl.n	8bc2 <clock_start+0xce>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    8bca:	4b1a      	ldr	r3, [pc, #104]	; (8c34 <clock_start+0x140>)
    8bcc:	2222      	movs	r2, #34	; 0x22
    8bce:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    8bd0:	21aa      	movs	r1, #170	; 0xaa
    8bd2:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    8bd4:	4818      	ldr	r0, [pc, #96]	; (8c38 <clock_start+0x144>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    8bd6:	6099      	str	r1, [r3, #8]
    8bd8:	609a      	str	r2, [r3, #8]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    8bda:	6804      	ldr	r4, [r0, #0]
    8bdc:	f044 0401 	orr.w	r4, r4, #1
    8be0:	6004      	str	r4, [r0, #0]
	PLL1FEED_SEQUENCE;
    8be2:	6099      	str	r1, [r3, #8]
    8be4:	609a      	str	r2, [r3, #8]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    8be6:	4b15      	ldr	r3, [pc, #84]	; (8c3c <clock_start+0x148>)
    8be8:	681a      	ldr	r2, [r3, #0]
    8bea:	05d0      	lsls	r0, r2, #23
    8bec:	d5fb      	bpl.n	8be6 <clock_start+0xf2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    8bee:	681a      	ldr	r2, [r3, #0]
    8bf0:	0551      	lsls	r1, r2, #21
    8bf2:	d5fc      	bpl.n	8bee <clock_start+0xfa>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    8bf4:	4b10      	ldr	r3, [pc, #64]	; (8c38 <clock_start+0x144>)
    8bf6:	681a      	ldr	r2, [r3, #0]
    8bf8:	f042 0202 	orr.w	r2, r2, #2
    8bfc:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    8bfe:	22aa      	movs	r2, #170	; 0xaa
    8c00:	60da      	str	r2, [r3, #12]
    8c02:	2255      	movs	r2, #85	; 0x55
    8c04:	60da      	str	r2, [r3, #12]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    8c06:	4b0d      	ldr	r3, [pc, #52]	; (8c3c <clock_start+0x148>)
    8c08:	681b      	ldr	r3, [r3, #0]
    8c0a:	059a      	lsls	r2, r3, #22
    8c0c:	d5fb      	bpl.n	8c06 <clock_start+0x112>
}
    8c0e:	bd10      	pop	{r4, pc}
    8c10:	400fc000 	.word	0x400fc000
    8c14:	400fc08c 	.word	0x400fc08c
    8c18:	400fc088 	.word	0x400fc088
    8c1c:	400fc104 	.word	0x400fc104
    8c20:	00081570 	.word	0x00081570
    8c24:	400fc1a0 	.word	0x400fc1a0
    8c28:	400fc1a8 	.word	0x400fc1a8
    8c2c:	00010018 	.word	0x00010018
    8c30:	400fc080 	.word	0x400fc080
    8c34:	400fc0a4 	.word	0x400fc0a4
    8c38:	400fc0a0 	.word	0x400fc0a0
    8c3c:	400fc0a8 	.word	0x400fc0a8

00008c40 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    8c40:	b508      	push	{r3, lr}
	gpio_init();
    8c42:	f7ff fdb7 	bl	87b4 <gpio_init>
	cc2400_init();
    8c46:	f7ff fe3b 	bl	88c0 <cc2400_init>
	clock_start();
}
    8c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ubertooth_init()
{
	gpio_init();
	cc2400_init();
	clock_start();
    8c4e:	f7ff bf51 	b.w	8af4 <clock_start>
    8c52:	0000      	movs	r0, r0

00008c54 <reset>:
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
}

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    8c54:	b508      	push	{r3, lr}
	all_pins_off();
    8c56:	f7ff fd83 	bl	8760 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    8c5a:	4b09      	ldr	r3, [pc, #36]	; (8c80 <reset+0x2c>)
    8c5c:	2202      	movs	r2, #2
    8c5e:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    8c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c64:	681a      	ldr	r2, [r3, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8c66:	4807      	ldr	r0, [pc, #28]	; (8c84 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    8c68:	f042 0203 	orr.w	r2, r2, #3
    8c6c:	601a      	str	r2, [r3, #0]
	WDFEED_SEQUENCE;
    8c6e:	22aa      	movs	r2, #170	; 0xaa
    8c70:	609a      	str	r2, [r3, #8]
    8c72:	2255      	movs	r2, #85	; 0x55
    8c74:	609a      	str	r2, [r3, #8]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    8c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8c7a:	f7ff bd55 	b.w	8728 <wait_us>
    8c7e:	bf00      	nop
    8c80:	2009c03c 	.word	0x2009c03c
    8c84:	000f4240 	.word	0x000f4240

00008c88 <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8c88:	b530      	push	{r4, r5, lr}
    8c8a:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8c8c:	2336      	movs	r3, #54	; 0x36
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8c8e:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8c90:	a80a      	add	r0, sp, #40	; 0x28
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8c92:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8c94:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8c98:	a905      	add	r1, sp, #20
    8c9a:	4668      	mov	r0, sp
    8c9c:	4b07      	ldr	r3, [pc, #28]	; (8cbc <get_part_num+0x34>)
    8c9e:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    8ca0:	9b05      	ldr	r3, [sp, #20]
    8ca2:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    8ca4:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8ca6:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    8ca8:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8caa:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    8cac:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    8cae:	0e1b      	lsrs	r3, r3, #24
    8cb0:	7123      	strb	r3, [r4, #4]
	*len = 5;
    8cb2:	2305      	movs	r3, #5
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    8cb4:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	*len = 5;
    8cb6:	602b      	str	r3, [r5, #0]
	
}
    8cb8:	b00b      	add	sp, #44	; 0x2c
    8cba:	bd30      	pop	{r4, r5, pc}
    8cbc:	1fff1ff1 	.word	0x1fff1ff1

00008cc0 <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    8cc0:	b530      	push	{r4, r5, lr}
    8cc2:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8cc4:	233a      	movs	r3, #58	; 0x3a
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    8cc6:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8cc8:	a80a      	add	r0, sp, #40	; 0x28
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    8cca:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8ccc:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8cd0:	a905      	add	r1, sp, #20
    8cd2:	4668      	mov	r0, sp
    8cd4:	4b13      	ldr	r3, [pc, #76]	; (8d24 <get_device_serial+0x64>)
    8cd6:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    8cd8:	9b05      	ldr	r3, [sp, #20]
    8cda:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    8cdc:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8cde:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    8ce0:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8ce2:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    8ce4:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    8ce6:	0e1b      	lsrs	r3, r3, #24
    8ce8:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    8cea:	9b07      	ldr	r3, [sp, #28]
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    8cec:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
    8cee:	0a1a      	lsrs	r2, r3, #8
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
    8cf0:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    8cf2:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    8cf4:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    8cf6:	0e1b      	lsrs	r3, r3, #24
    8cf8:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    8cfa:	9b08      	ldr	r3, [sp, #32]
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
    8cfc:	71e2      	strb	r2, [r4, #7]
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
    8cfe:	0a1a      	lsrs	r2, r3, #8
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
    8d00:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    8d02:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    8d04:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    8d06:	0e1b      	lsrs	r3, r3, #24
    8d08:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    8d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
    8d0c:	72e2      	strb	r2, [r4, #11]
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
    8d0e:	0a1a      	lsrs	r2, r3, #8
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
    8d10:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    8d12:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    8d14:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    8d16:	0e1b      	lsrs	r3, r3, #24
    8d18:	7423      	strb	r3, [r4, #16]
	*len = 17;
    8d1a:	2311      	movs	r3, #17
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
	buffer[15] = (result[4] >> 16) & 0xFF;
    8d1c:	73e2      	strb	r2, [r4, #15]
	buffer[16] = (result[4] >> 24) & 0xFF;
	*len = 17;
    8d1e:	602b      	str	r3, [r5, #0]
}
    8d20:	b00b      	add	sp, #44	; 0x2c
    8d22:	bd30      	pop	{r4, r5, pc}
    8d24:	1fff1ff1 	.word	0x1fff1ff1

00008d28 <set_isp>:

void set_isp(void)
{
    8d28:	b500      	push	{lr}
    8d2a:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    8d2c:	2339      	movs	r3, #57	; 0x39
    8d2e:	a80a      	add	r0, sp, #40	; 0x28
    8d30:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8d34:	a905      	add	r1, sp, #20
    8d36:	4668      	mov	r0, sp
    8d38:	4b02      	ldr	r3, [pc, #8]	; (8d44 <set_isp+0x1c>)
    8d3a:	4798      	blx	r3
}
    8d3c:	b00b      	add	sp, #44	; 0x2c
    8d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    8d42:	bf00      	nop
    8d44:	1fff1ff1 	.word	0x1fff1ff1

00008d48 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    8d48:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8d4a:	4c08      	ldr	r4, [pc, #32]	; (8d6c <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    8d4c:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8d4e:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    8d50:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8d52:	2d40      	cmp	r5, #64	; 0x40
    8d54:	bfa8      	it	ge
    8d56:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    8d58:	462a      	mov	r2, r5
    8d5a:	f000 f955 	bl	9008 <USBHwEPWrite>
	pbData += iChunk;
    8d5e:	6863      	ldr	r3, [r4, #4]
    8d60:	442b      	add	r3, r5
    8d62:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    8d64:	6823      	ldr	r3, [r4, #0]
    8d66:	1b5d      	subs	r5, r3, r5
    8d68:	6025      	str	r5, [r4, #0]
    8d6a:	bd38      	pop	{r3, r4, r5, pc}
    8d6c:	10000f30 	.word	0x10000f30

00008d70 <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    8d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    8d72:	4b11      	ldr	r3, [pc, #68]	; (8db8 <_HandleRequest.constprop.1+0x48>)
    8d74:	7a1c      	ldrb	r4, [r3, #8]
    8d76:	461d      	mov	r5, r3
    8d78:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    8d7c:	2c02      	cmp	r4, #2
    8d7e:	d10d      	bne.n	8d9c <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    8d80:	2200      	movs	r2, #0
    8d82:	a902      	add	r1, sp, #8
    8d84:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    8d88:	f103 0008 	add.w	r0, r3, #8
    8d8c:	f103 0210 	add.w	r2, r3, #16
    8d90:	3304      	adds	r3, #4
    8d92:	f000 fa63 	bl	925c <USBFilterOsVendorMessage>
    8d96:	b108      	cbz	r0, 8d9c <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    8d98:	9801      	ldr	r0, [sp, #4]
    8d9a:	e00a      	b.n	8db2 <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    8d9c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    8da0:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    8da2:	b12b      	cbz	r3, 8db0 <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    8da4:	4805      	ldr	r0, [pc, #20]	; (8dbc <_HandleRequest.constprop.1+0x4c>)
    8da6:	f100 0108 	add.w	r1, r0, #8
    8daa:	1f02      	subs	r2, r0, #4
    8dac:	4798      	blx	r3
    8dae:	e000      	b.n	8db2 <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    8db0:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    8db2:	b003      	add	sp, #12
    8db4:	bd30      	pop	{r4, r5, pc}
    8db6:	bf00      	nop
    8db8:	10000f30 	.word	0x10000f30
    8dbc:	10000f38 	.word	0x10000f38

00008dc0 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    8dc0:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    8dc2:	2800      	cmp	r0, #0
    8dc4:	d14a      	bne.n	8e5c <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    8dc6:	f001 0304 	and.w	r3, r1, #4
    8dca:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    8dce:	4c25      	ldr	r4, [pc, #148]	; (8e64 <USBHandleControlTransfer+0xa4>)
    8dd0:	b30b      	cbz	r3, 8e16 <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    8dd2:	2208      	movs	r2, #8
    8dd4:	f104 0108 	add.w	r1, r4, #8
    8dd8:	f000 f946 	bl	9068 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8ddc:	7a22      	ldrb	r2, [r4, #8]
    8dde:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    8de2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8de8:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    8dea:	89e3      	ldrh	r3, [r4, #14]
    8dec:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    8dee:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    8df0:	b10b      	cbz	r3, 8df6 <USBHandleControlTransfer+0x36>
    8df2:	09d2      	lsrs	r2, r2, #7
    8df4:	d034      	beq.n	8e60 <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    8df6:	f7ff ffbb 	bl	8d70 <_HandleRequest.constprop.1>
    8dfa:	b928      	cbnz	r0, 8e08 <USBHandleControlTransfer+0x48>
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8dfc:	2080      	movs	r0, #128	; 0x80
    8dfe:	2101      	movs	r1, #1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8e04:	f000 b8f4 	b.w	8ff0 <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    8e08:	89e2      	ldrh	r2, [r4, #14]
    8e0a:	6923      	ldr	r3, [r4, #16]
    8e0c:	429a      	cmp	r2, r3
    8e0e:	bfd4      	ite	le
    8e10:	6022      	strle	r2, [r4, #0]
    8e12:	6023      	strgt	r3, [r4, #0]
    8e14:	e019      	b.n	8e4a <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    8e16:	6822      	ldr	r2, [r4, #0]
    8e18:	2a00      	cmp	r2, #0
    8e1a:	dd1a      	ble.n	8e52 <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    8e1c:	6861      	ldr	r1, [r4, #4]
    8e1e:	f000 f923 	bl	9068 <USBHwEPRead>
				if (iChunk < 0) {
    8e22:	2800      	cmp	r0, #0
    8e24:	dbea      	blt.n	8dfc <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    8e26:	6863      	ldr	r3, [r4, #4]
    8e28:	4403      	add	r3, r0
    8e2a:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    8e2c:	6823      	ldr	r3, [r4, #0]
    8e2e:	1a18      	subs	r0, r3, r0
    8e30:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    8e32:	b9a8      	cbnz	r0, 8e60 <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8e34:	7a23      	ldrb	r3, [r4, #8]
    8e36:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    8e3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e40:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    8e42:	f7ff ff95 	bl	8d70 <_HandleRequest.constprop.1>
    8e46:	2800      	cmp	r0, #0
    8e48:	d0d8      	beq.n	8dfc <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    8e4e:	f7ff bf7b 	b.w	8d48 <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    8e52:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    8e58:	f000 b906 	b.w	9068 <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    8e5c:	2880      	cmp	r0, #128	; 0x80
    8e5e:	d0f4      	beq.n	8e4a <USBHandleControlTransfer+0x8a>
    8e60:	bd10      	pop	{r4, pc}
    8e62:	bf00      	nop
    8e64:	10000f30 	.word	0x10000f30

00008e68 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    8e68:	4b02      	ldr	r3, [pc, #8]	; (8e74 <USBRegisterRequestHandler+0xc>)
    8e6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e6e:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    8e70:	6242      	str	r2, [r0, #36]	; 0x24
    8e72:	4770      	bx	lr
    8e74:	10000f30 	.word	0x10000f30

00008e78 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    8e78:	4770      	bx	lr
    8e7a:	0000      	movs	r0, r0

00008e7c <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    8e7c:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    8e7e:	4c0e      	ldr	r4, [pc, #56]	; (8eb8 <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    8e80:	f000 f994 	bl	91ac <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    8e84:	480d      	ldr	r0, [pc, #52]	; (8ebc <USBInit+0x40>)
    8e86:	f000 f87d 	bl	8f84 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    8e8a:	4621      	mov	r1, r4
    8e8c:	2000      	movs	r0, #0
    8e8e:	f000 f85f 	bl	8f50 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    8e92:	4621      	mov	r1, r4
    8e94:	2080      	movs	r0, #128	; 0x80
    8e96:	f000 f85b 	bl	8f50 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    8e9a:	2000      	movs	r0, #0
    8e9c:	2140      	movs	r1, #64	; 0x40
    8e9e:	f000 f83b 	bl	8f18 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    8ea2:	2080      	movs	r0, #128	; 0x80
    8ea4:	2140      	movs	r1, #64	; 0x40
    8ea6:	f000 f837 	bl	8f18 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    8eaa:	2000      	movs	r0, #0
    8eac:	4904      	ldr	r1, [pc, #16]	; (8ec0 <USBInit+0x44>)
    8eae:	4a05      	ldr	r2, [pc, #20]	; (8ec4 <USBInit+0x48>)
    8eb0:	f7ff ffda 	bl	8e68 <USBRegisterRequestHandler>

	return TRUE;
}
    8eb4:	2001      	movs	r0, #1
    8eb6:	bd10      	pop	{r4, pc}
    8eb8:	00008dc1 	.word	0x00008dc1
    8ebc:	00008e79 	.word	0x00008e79
    8ec0:	0000935d 	.word	0x0000935d
    8ec4:	10000f64 	.word	0x10000f64

00008ec8 <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    8ec8:	4b03      	ldr	r3, [pc, #12]	; (8ed8 <Wait4DevInt+0x10>)
    8eca:	681b      	ldr	r3, [r3, #0]
    8ecc:	4003      	ands	r3, r0
    8ece:	4283      	cmp	r3, r0
    8ed0:	d1fa      	bne.n	8ec8 <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    8ed2:	4b02      	ldr	r3, [pc, #8]	; (8edc <Wait4DevInt+0x14>)
    8ed4:	6018      	str	r0, [r3, #0]
    8ed6:	4770      	bx	lr
    8ed8:	5000c200 	.word	0x5000c200
    8edc:	5000c208 	.word	0x5000c208

00008ee0 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    8ee0:	4b04      	ldr	r3, [pc, #16]	; (8ef4 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8ee2:	0400      	lsls	r0, r0, #16
    8ee4:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    8ee8:	2230      	movs	r2, #48	; 0x30
    8eea:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8eec:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    8eee:	2010      	movs	r0, #16
    8ef0:	f7ff bfea 	b.w	8ec8 <Wait4DevInt>
    8ef4:	5000c208 	.word	0x5000c208

00008ef8 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    8ef8:	b510      	push	{r4, lr}
    8efa:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8efc:	0424      	lsls	r4, r4, #16
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    // write command code
    USBHwCmd(bCmd);
    8efe:	f7ff ffef 	bl	8ee0 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8f02:	4b04      	ldr	r3, [pc, #16]	; (8f14 <USBHwCmdWrite+0x1c>)
    8f04:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    8f08:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    8f0a:	2010      	movs	r0, #16
}
    8f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    8f10:	f7ff bfda 	b.w	8ec8 <Wait4DevInt>
    8f14:	5000c210 	.word	0x5000c210

00008f18 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    8f18:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    8f1a:	f000 040f 	and.w	r4, r0, #15
    8f1e:	09c0      	lsrs	r0, r0, #7
    8f20:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    8f24:	2201      	movs	r2, #1
    8f26:	40a2      	lsls	r2, r4
    8f28:	4b08      	ldr	r3, [pc, #32]	; (8f4c <USBHwEPConfig+0x34>)
    8f2a:	6818      	ldr	r0, [r3, #0]
    8f2c:	4302      	orrs	r2, r0
    8f2e:	601a      	str	r2, [r3, #0]
    USBEpIn = idx;
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    8f30:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    8f34:	605c      	str	r4, [r3, #4]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    8f36:	6099      	str	r1, [r3, #8]
    Wait4DevInt(EP_RLZED);
    8f38:	f7ff ffc6 	bl	8ec8 <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8f3c:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    8f40:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    8f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8f46:	f7ff bfd7 	b.w	8ef8 <USBHwCmdWrite>
    8f4a:	bf00      	nop
    8f4c:	5000c244 	.word	0x5000c244

00008f50 <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8f50:	4a0a      	ldr	r2, [pc, #40]	; (8f7c <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    8f52:	f000 030f 	and.w	r3, r0, #15
    8f56:	09c0      	lsrs	r0, r0, #7

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8f58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    8f5c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    8f60:	2101      	movs	r1, #1
    8f62:	fa01 f000 	lsl.w	r0, r1, r0
    8f66:	4b06      	ldr	r3, [pc, #24]	; (8f80 <USBHwRegisterEPIntHandler+0x30>)
    8f68:	681a      	ldr	r2, [r3, #0]
    8f6a:	4310      	orrs	r0, r2
    8f6c:	6018      	str	r0, [r3, #0]
    USBDevIntEn |= EP_SLOW;
    8f6e:	f853 2c30 	ldr.w	r2, [r3, #-48]
    8f72:	f042 0204 	orr.w	r2, r2, #4
    8f76:	f843 2c30 	str.w	r2, [r3, #-48]
    8f7a:	4770      	bx	lr
    8f7c:	10000f6c 	.word	0x10000f6c
    8f80:	5000c234 	.word	0x5000c234

00008f84 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    8f84:	4b03      	ldr	r3, [pc, #12]	; (8f94 <USBHwRegisterDevIntHandler+0x10>)
    8f86:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    8f88:	4b03      	ldr	r3, [pc, #12]	; (8f98 <USBHwRegisterDevIntHandler+0x14>)
    8f8a:	681a      	ldr	r2, [r3, #0]
    8f8c:	f042 0208 	orr.w	r2, r2, #8
    8f90:	601a      	str	r2, [r3, #0]
    8f92:	4770      	bx	lr
    8f94:	10000f6c 	.word	0x10000f6c
    8f98:	5000c204 	.word	0x5000c204

00008f9c <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    8f9c:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    8fa0:	20d0      	movs	r0, #208	; 0xd0
    8fa2:	f7ff bfa9 	b.w	8ef8 <USBHwCmdWrite>

00008fa6 <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    8fa6:	1c01      	adds	r1, r0, #0
    8fa8:	bf18      	it	ne
    8faa:	2101      	movne	r1, #1
    8fac:	20fe      	movs	r0, #254	; 0xfe
    8fae:	f7ff bfa3 	b.w	8ef8 <USBHwCmdWrite>

00008fb2 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    8fb2:	4601      	mov	r1, r0
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    8fb4:	20f3      	movs	r0, #243	; 0xf3
    8fb6:	f7ff bf9f 	b.w	8ef8 <USBHwCmdWrite>
    8fba:	0000      	movs	r0, r0

00008fbc <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    8fbc:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    8fbe:	f000 040f 	and.w	r4, r0, #15
    8fc2:	09c0      	lsrs	r0, r0, #7
    8fc4:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8fc8:	4620      	mov	r0, r4
    8fca:	f7ff ff89 	bl	8ee0 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8fce:	0424      	lsls	r4, r4, #16
    8fd0:	4b05      	ldr	r3, [pc, #20]	; (8fe8 <USBHwEPGetStatus+0x2c>)
    8fd2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    8fd6:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    8fd8:	2020      	movs	r0, #32
    8fda:	f7ff ff75 	bl	8ec8 <Wait4DevInt>
    return USBCmdData;
    8fde:	4b03      	ldr	r3, [pc, #12]	; (8fec <USBHwEPGetStatus+0x30>)
    8fe0:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    8fe2:	b2c0      	uxtb	r0, r0
    8fe4:	bd10      	pop	{r4, pc}
    8fe6:	bf00      	nop
    8fe8:	5000c210 	.word	0x5000c210
    8fec:	5000c214 	.word	0x5000c214

00008ff0 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    8ff0:	f000 030f 	and.w	r3, r0, #15
    8ff4:	09c0      	lsrs	r0, r0, #7
    8ff6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    8ffa:	3100      	adds	r1, #0
    8ffc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    9000:	bf18      	it	ne
    9002:	2101      	movne	r1, #1
    9004:	f7ff bf78 	b.w	8ef8 <USBHwCmdWrite>

00009008 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    9008:	b510      	push	{r4, lr}
    U32 idx;
    
    idx = EP2IDX(bEP);
    900a:	f000 030f 	and.w	r3, r0, #15
    900e:	09c0      	lsrs	r0, r0, #7
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    9010:	4614      	mov	r4, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    9012:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    9016:	4a11      	ldr	r2, [pc, #68]	; (905c <USBHwEPWrite+0x54>)
    9018:	009b      	lsls	r3, r3, #2
    901a:	f043 0302 	orr.w	r3, r3, #2
    901e:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    9020:	4b0f      	ldr	r3, [pc, #60]	; (9060 <USBHwEPWrite+0x58>)
    9022:	601c      	str	r4, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    9024:	4b0d      	ldr	r3, [pc, #52]	; (905c <USBHwEPWrite+0x54>)
    9026:	681a      	ldr	r2, [r3, #0]
    9028:	f012 0202 	ands.w	r2, r2, #2
    902c:	d00e      	beq.n	904c <USBHwEPWrite+0x44>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    902e:	788a      	ldrb	r2, [r1, #2]
    9030:	78cb      	ldrb	r3, [r1, #3]
    9032:	0412      	lsls	r2, r2, #16
    9034:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    9038:	780b      	ldrb	r3, [r1, #0]
        pbBuf += 4;
    903a:	3104      	adds	r1, #4
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    903c:	431a      	orrs	r2, r3
    903e:	f811 3c03 	ldrb.w	r3, [r1, #-3]
    9042:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    9046:	4b07      	ldr	r3, [pc, #28]	; (9064 <USBHwEPWrite+0x5c>)
    9048:	601a      	str	r2, [r3, #0]
    904a:	e7eb      	b.n	9024 <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    904c:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    904e:	f7ff ff47 	bl	8ee0 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    9052:	20fa      	movs	r0, #250	; 0xfa
    9054:	f7ff ff44 	bl	8ee0 <USBHwCmd>
    
    return iLen;
}
    9058:	4620      	mov	r0, r4
    905a:	bd10      	pop	{r4, pc}
    905c:	5000c228 	.word	0x5000c228
    9060:	5000c224 	.word	0x5000c224
    9064:	5000c21c 	.word	0x5000c21c

00009068 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    9068:	b538      	push	{r3, r4, r5, lr}
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    906a:	f000 030f 	and.w	r3, r0, #15
    906e:	09c0      	lsrs	r0, r0, #7
    9070:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    9074:	4c14      	ldr	r4, [pc, #80]	; (90c8 <USBHwEPRead+0x60>)
    9076:	009b      	lsls	r3, r3, #2
    9078:	f043 0301 	orr.w	r3, r3, #1
    907c:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    907e:	4b13      	ldr	r3, [pc, #76]	; (90cc <USBHwEPRead+0x64>)
    9080:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    9082:	051d      	lsls	r5, r3, #20
    9084:	d5fb      	bpl.n	907e <USBHwEPRead+0x16>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    9086:	055c      	lsls	r4, r3, #21
    9088:	d51b      	bpl.n	90c2 <USBHwEPRead+0x5a>
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    908a:	f3c3 0509 	ubfx	r5, r3, #0, #10
    
    // get data
    dwData = 0;
    908e:	2300      	movs	r3, #0
    for (i = 0; i < dwLen; i++) {
    9090:	461c      	mov	r4, r3
    9092:	42ac      	cmp	r4, r5
    9094:	d00b      	beq.n	90ae <USBHwEPRead+0x46>
        if ((i % 4) == 0) {
    9096:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    909a:	bf04      	itt	eq
    909c:	4b0c      	ldreq	r3, [pc, #48]	; (90d0 <USBHwEPRead+0x68>)
    909e:	681b      	ldreq	r3, [r3, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    90a0:	b111      	cbz	r1, 90a8 <USBHwEPRead+0x40>
    90a2:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    90a4:	bf38      	it	cc
    90a6:	550b      	strbcc	r3, [r1, r4]
        }
        dwData >>= 8;
    90a8:	0a1b      	lsrs	r3, r3, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    90aa:	3401      	adds	r4, #1
    90ac:	e7f1      	b.n	9092 <USBHwEPRead+0x2a>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    90ae:	4b06      	ldr	r3, [pc, #24]	; (90c8 <USBHwEPRead+0x60>)
    90b0:	2200      	movs	r2, #0
    90b2:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    90b4:	f7ff ff14 	bl	8ee0 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    90b8:	20f2      	movs	r0, #242	; 0xf2
    90ba:	f7ff ff11 	bl	8ee0 <USBHwCmd>
    
    return dwLen;
    90be:	4620      	mov	r0, r4
    90c0:	bd38      	pop	{r3, r4, r5, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    90c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    90c6:	bd38      	pop	{r3, r4, r5, pc}
    90c8:	5000c228 	.word	0x5000c228
    90cc:	5000c220 	.word	0x5000c220
    90d0:	5000c218 	.word	0x5000c218

000090d4 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    90d4:	1c01      	adds	r1, r0, #0
    90d6:	bf18      	it	ne
    90d8:	2101      	movne	r1, #1
    90da:	20d8      	movs	r0, #216	; 0xd8
    90dc:	f7ff bf0c 	b.w	8ef8 <USBHwCmdWrite>

000090e0 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    90e0:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    90e2:	4b29      	ldr	r3, [pc, #164]	; (9188 <USBHwISR+0xa8>)
    90e4:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    90e6:	07e1      	lsls	r1, r4, #31
    90e8:	d511      	bpl.n	910e <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    90ea:	2201      	movs	r2, #1
    90ec:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    90ee:	4b27      	ldr	r3, [pc, #156]	; (918c <USBHwISR+0xac>)
    90f0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    90f2:	b165      	cbz	r5, 910e <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    90f4:	20f5      	movs	r0, #245	; 0xf5
    90f6:	f7ff fef3 	bl	8ee0 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    90fa:	4b25      	ldr	r3, [pc, #148]	; (9190 <USBHwISR+0xb0>)
    90fc:	4a25      	ldr	r2, [pc, #148]	; (9194 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    90fe:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9100:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    9102:	f7ff fee1 	bl	8ec8 <Wait4DevInt>
    return USBCmdData;
    9106:	4b24      	ldr	r3, [pc, #144]	; (9198 <USBHwISR+0xb8>)
    9108:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    910a:	b2c0      	uxtb	r0, r0
    910c:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    910e:	0722      	lsls	r2, r4, #28
    9110:	d517      	bpl.n	9142 <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    9112:	4b22      	ldr	r3, [pc, #136]	; (919c <USBHwISR+0xbc>)
    9114:	2208      	movs	r2, #8
    9116:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    9118:	20fe      	movs	r0, #254	; 0xfe
    911a:	f7ff fee1 	bl	8ee0 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    911e:	4b1c      	ldr	r3, [pc, #112]	; (9190 <USBHwISR+0xb0>)
    9120:	4a1f      	ldr	r2, [pc, #124]	; (91a0 <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    9122:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9124:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    9126:	f7ff fecf 	bl	8ec8 <Wait4DevInt>
    return USBCmdData;
    912a:	4b1b      	ldr	r3, [pc, #108]	; (9198 <USBHwISR+0xb8>)
    912c:	6818      	ldr	r0, [r3, #0]
    912e:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    9130:	f010 0f1a 	tst.w	r0, #26
    9134:	d005      	beq.n	9142 <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    9136:	4b15      	ldr	r3, [pc, #84]	; (918c <USBHwISR+0xac>)
    9138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    913a:	b113      	cbz	r3, 9142 <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    913c:	f000 0015 	and.w	r0, r0, #21
    9140:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    9142:	0763      	lsls	r3, r4, #29
    9144:	d51e      	bpl.n	9184 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    9146:	4b15      	ldr	r3, [pc, #84]	; (919c <USBHwISR+0xbc>)
    9148:	2204      	movs	r2, #4
    914a:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    914c:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
    914e:	2301      	movs	r3, #1
    9150:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    9152:	4a14      	ldr	r2, [pc, #80]	; (91a4 <USBHwISR+0xc4>)
    9154:	6812      	ldr	r2, [r2, #0]
    9156:	4213      	tst	r3, r2
    9158:	d011      	beq.n	917e <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    915a:	4a13      	ldr	r2, [pc, #76]	; (91a8 <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    915c:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    915e:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    9160:	f7ff feb2 	bl	8ec8 <Wait4DevInt>
                bEPStat = USBCmdData;
    9164:	4b0c      	ldr	r3, [pc, #48]	; (9198 <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    9166:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    9168:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    916a:	4b08      	ldr	r3, [pc, #32]	; (918c <USBHwISR+0xac>)
    916c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    9170:	b12b      	cbz	r3, 917e <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    9172:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    9176:	b2c0      	uxtb	r0, r0
    9178:	f001 011f 	and.w	r1, r1, #31
    917c:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    917e:	3401      	adds	r4, #1
    9180:	2c20      	cmp	r4, #32
    9182:	d1e4      	bne.n	914e <USBHwISR+0x6e>
    9184:	bd38      	pop	{r3, r4, r5, pc}
    9186:	bf00      	nop
    9188:	5000c200 	.word	0x5000c200
    918c:	10000f6c 	.word	0x10000f6c
    9190:	5000c210 	.word	0x5000c210
    9194:	00f50200 	.word	0x00f50200
    9198:	5000c214 	.word	0x5000c214
    919c:	5000c208 	.word	0x5000c208
    91a0:	00fe0200 	.word	0x00fe0200
    91a4:	5000c230 	.word	0x5000c230
    91a8:	5000c238 	.word	0x5000c238

000091ac <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    91ac:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    91ae:	4b24      	ldr	r3, [pc, #144]	; (9240 <USBHwInit+0x94>)
    91b0:	681a      	ldr	r2, [r3, #0]
    91b2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    91b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    91ba:	601a      	str	r2, [r3, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    91bc:	f853 2c04 	ldr.w	r2, [r3, #-4]
    91c0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    91c4:	f042 0210 	orr.w	r2, r2, #16
    91c8:	f843 2c04 	str.w	r2, [r3, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    91cc:	f853 2c04 	ldr.w	r2, [r3, #-4]
    91d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    91d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    91d8:	f843 2c04 	str.w	r2, [r3, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    91dc:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    91e0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
    91e4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    91e8:	f843 2c0c 	str.w	r2, [r3, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    91ec:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    91f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    91f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    91f8:	f843 2c0c 	str.w	r2, [r3, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    91fc:	4b11      	ldr	r3, [pc, #68]	; (9244 <USBHwInit+0x98>)
    91fe:	681a      	ldr	r2, [r3, #0]
    9200:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    9204:	601a      	str	r2, [r3, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    9206:	4b10      	ldr	r3, [pc, #64]	; (9248 <USBHwInit+0x9c>)
    9208:	681a      	ldr	r2, [r3, #0]
    920a:	f042 0212 	orr.w	r2, r2, #18
    920e:	601a      	str	r2, [r3, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    9210:	4b0e      	ldr	r3, [pc, #56]	; (924c <USBHwInit+0xa0>)
    9212:	681a      	ldr	r2, [r3, #0]
    9214:	0792      	lsls	r2, r2, #30
    9216:	d5fb      	bpl.n	9210 <USBHwInit+0x64>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    9218:	681a      	ldr	r2, [r3, #0]
    921a:	06d0      	lsls	r0, r2, #27
    921c:	d5fc      	bpl.n	9218 <USBHwInit+0x6c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    921e:	4b0c      	ldr	r3, [pc, #48]	; (9250 <USBHwInit+0xa4>)
    9220:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    9222:	4a0c      	ldr	r2, [pc, #48]	; (9254 <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    9224:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    9226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    922a:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    922c:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    922e:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    9230:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    9232:	4b09      	ldr	r3, [pc, #36]	; (9258 <USBHwInit+0xac>)
    9234:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    9236:	f7ff febc 	bl	8fb2 <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    923a:	2001      	movs	r0, #1
    923c:	bd08      	pop	{r3, pc}
    923e:	bf00      	nop
    9240:	4002c010 	.word	0x4002c010
    9244:	400fc0c4 	.word	0x400fc0c4
    9248:	5000cff4 	.word	0x5000cff4
    924c:	5000cff8 	.word	0x5000cff8
    9250:	5000c204 	.word	0x5000c204
    9254:	5000c208 	.word	0x5000c208
    9258:	5000c240 	.word	0x5000c240

0000925c <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    925c:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    925e:	4c16      	ldr	r4, [pc, #88]	; (92b8 <USBFilterOsVendorMessage+0x5c>)
    9260:	2500      	movs	r5, #0
    9262:	7824      	ldrb	r4, [r4, #0]
    9264:	b314      	cbz	r4, 92ac <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    9266:	7846      	ldrb	r6, [r0, #1]
    9268:	42a6      	cmp	r6, r4
    926a:	d121      	bne.n	92b0 <USBFilterOsVendorMessage+0x54>
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    926c:	8884      	ldrh	r4, [r0, #4]
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    926e:	600d      	str	r5, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    9270:	2c04      	cmp	r4, #4
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
	
		int iRequestLength = pSetup->wLength;
    9272:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    9274:	8845      	ldrh	r5, [r0, #2]
	
		switch (pSetup->wIndex) {
    9276:	d005      	beq.n	9284 <USBFilterOsVendorMessage+0x28>
    9278:	2c05      	cmp	r4, #5
    927a:	d11b      	bne.n	92b4 <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    927c:	480f      	ldr	r0, [pc, #60]	; (92bc <USBFilterOsVendorMessage+0x60>)
    927e:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    9280:	2092      	movs	r0, #146	; 0x92
    9282:	e002      	b.n	928a <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    9284:	480e      	ldr	r0, [pc, #56]	; (92c0 <USBFilterOsVendorMessage+0x64>)
    9286:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    9288:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    928a:	6010      	str	r0, [r2, #0]
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
    928c:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    928e:	0a28      	lsrs	r0, r5, #8
    9290:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    9292:	4284      	cmp	r4, r0
    9294:	db0e      	blt.n	92b4 <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    9296:	681d      	ldr	r5, [r3, #0]
    9298:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    929a:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    929c:	601d      	str	r5, [r3, #0]
    929e:	42b0      	cmp	r0, r6
    92a0:	bfd4      	ite	le
    92a2:	6010      	strle	r0, [r2, #0]
    92a4:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    92a6:	2001      	movs	r0, #1
    92a8:	6008      	str	r0, [r1, #0]
		return TRUE;
    92aa:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    92ac:	4620      	mov	r0, r4
    92ae:	bd70      	pop	{r4, r5, r6, pc}
    92b0:	4628      	mov	r0, r5
    92b2:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    92b4:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    92b6:	bd70      	pop	{r4, r5, r6, pc}
    92b8:	10000fb4 	.word	0x10000fb4
    92bc:	1000095d 	.word	0x1000095d
    92c0:	0000ab88 	.word	0x0000ab88

000092c4 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    92c4:	b510      	push	{r4, lr}
	bMsVendorIndex = bVendorRequestIndex;
    92c6:	4b0a      	ldr	r3, [pc, #40]	; (92f0 <USBRegisterWinusbInterface+0x2c>)
    92c8:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    92ca:	b179      	cbz	r1, 92ec <USBRegisterWinusbInterface+0x28>
    92cc:	4b09      	ldr	r3, [pc, #36]	; (92f4 <USBRegisterWinusbInterface+0x30>)
    92ce:	2200      	movs	r2, #0
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    92d0:	5c8c      	ldrb	r4, [r1, r2]
    92d2:	1e98      	subs	r0, r3, #2
    92d4:	b13c      	cbz	r4, 92e6 <USBRegisterWinusbInterface+0x22>
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    92d6:	3201      	adds	r2, #1
    92d8:	2a26      	cmp	r2, #38	; 0x26
    92da:	4618      	mov	r0, r3
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    92dc:	f803 4c02 	strb.w	r4, [r3, #-2]
    92e0:	f103 0302 	add.w	r3, r3, #2
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    92e4:	d1f4      	bne.n	92d0 <USBRegisterWinusbInterface+0xc>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    92e6:	2300      	movs	r3, #0
    92e8:	7003      	strb	r3, [r0, #0]
	pbWriteCursor[2] = 0;
    92ea:	7083      	strb	r3, [r0, #2]
    92ec:	bd10      	pop	{r4, pc}
    92ee:	bf00      	nop
    92f0:	10000fb4 	.word	0x10000fb4
    92f4:	100009a1 	.word	0x100009a1

000092f8 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    92f8:	4b01      	ldr	r3, [pc, #4]	; (9300 <USBRegisterDescriptors+0x8>)
    92fa:	6058      	str	r0, [r3, #4]
    92fc:	4770      	bx	lr
    92fe:	bf00      	nop
    9300:	10000fb4 	.word	0x10000fb4

00009304 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    9304:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    9306:	0a05      	lsrs	r5, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    9308:	2d03      	cmp	r5, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    930a:	b2c6      	uxtb	r6, r0
    930c:	4911      	ldr	r1, [pc, #68]	; (9354 <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    930e:	d108      	bne.n	9322 <USBGetDescriptor+0x1e>
    9310:	2eee      	cmp	r6, #238	; 0xee
    9312:	d106      	bne.n	9322 <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    9314:	4810      	ldr	r0, [pc, #64]	; (9358 <USBGetDescriptor+0x54>)
    9316:	7809      	ldrb	r1, [r1, #0]
	
	*ppbData = abOsStringDescriptor;
    9318:	3092      	adds	r0, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    931a:	7401      	strb	r1, [r0, #16]
	
	*ppbData = abOsStringDescriptor;
    931c:	6018      	str	r0, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    931e:	2312      	movs	r3, #18
    9320:	e012      	b.n	9348 <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    9322:	6849      	ldr	r1, [r1, #4]
	iCurIndex = 0;
    9324:	2400      	movs	r4, #0
	
	while (pab[DESC_bLength] != 0) {
    9326:	e001      	b.n	932c <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    9328:	3401      	adds	r4, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    932a:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    932c:	7808      	ldrb	r0, [r1, #0]
    932e:	b180      	cbz	r0, 9352 <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    9330:	784f      	ldrb	r7, [r1, #1]
    9332:	42af      	cmp	r7, r5
    9334:	d1f9      	bne.n	932a <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    9336:	42b4      	cmp	r4, r6
    9338:	d1f6      	bne.n	9328 <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    933a:	2d02      	cmp	r5, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    933c:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    933e:	d106      	bne.n	934e <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    9340:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    9342:	788b      	ldrb	r3, [r1, #2]
    9344:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    9348:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    934a:	2001      	movs	r0, #1
    934c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    934e:	780b      	ldrb	r3, [r1, #0]
    9350:	e7fa      	b.n	9348 <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    9352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9354:	10000fb4 	.word	0x10000fb4
    9358:	1000095d 	.word	0x1000095d

0000935c <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    935c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9360:	4e4b      	ldr	r6, [pc, #300]	; (9490 <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    9362:	4604      	mov	r4, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9364:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    9366:	460d      	mov	r5, r1
    9368:	4617      	mov	r7, r2
    936a:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    936c:	b943      	cbnz	r3, 9380 <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    936e:	7826      	ldrb	r6, [r4, #0]
    9370:	f006 061f 	and.w	r6, r6, #31
    9374:	2e01      	cmp	r6, #1
    9376:	d053      	beq.n	9420 <USBHandleStandardRequest+0xc4>
    9378:	d306      	bcc.n	9388 <USBHandleStandardRequest+0x2c>
    937a:	2e02      	cmp	r6, #2
    937c:	d062      	beq.n	9444 <USBHandleStandardRequest+0xe8>
    937e:	e081      	b.n	9484 <USBHandleStandardRequest+0x128>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9380:	4798      	blx	r3
    9382:	2800      	cmp	r0, #0
    9384:	d0f3      	beq.n	936e <USBHandleStandardRequest+0x12>
    9386:	e080      	b.n	948a <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9388:	7862      	ldrb	r2, [r4, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    938a:	683b      	ldr	r3, [r7, #0]

	switch (pSetup->bRequest) {
    938c:	2a09      	cmp	r2, #9
    938e:	d879      	bhi.n	9484 <USBHandleStandardRequest+0x128>
    9390:	e8df f002 	tbb	[pc, r2]
    9394:	78787805 	.word	0x78787805
    9398:	780d0978 	.word	0x780d0978
    939c:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    939e:	2200      	movs	r2, #0
    93a0:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    93a2:	705a      	strb	r2, [r3, #1]
    93a4:	e045      	b.n	9432 <USBHandleStandardRequest+0xd6>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    93a6:	78a0      	ldrb	r0, [r4, #2]
    93a8:	f7ff fdf8 	bl	8f9c <USBHwSetAddress>
    93ac:	e06d      	b.n	948a <USBHandleStandardRequest+0x12e>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    93ae:	8860      	ldrh	r0, [r4, #2]
    93b0:	88a1      	ldrh	r1, [r4, #4]
    93b2:	462a      	mov	r2, r5
    93b4:	463b      	mov	r3, r7
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    93b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    93ba:	f7ff bfa3 	b.w	9304 <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    93be:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    93c2:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    93c4:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    93c6:	6028      	str	r0, [r5, #0]
    93c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    93cc:	78a6      	ldrb	r6, [r4, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    93ce:	b90e      	cbnz	r6, 93d4 <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    93d0:	4630      	mov	r0, r6
    93d2:	e01f      	b.n	9414 <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    93d4:	27ff      	movs	r7, #255	; 0xff
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    93d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
		bCurConfig = 0xFF;
    93da:	46b9      	mov	r9, r7
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    93dc:	782b      	ldrb	r3, [r5, #0]
    93de:	b1c3      	cbz	r3, 9412 <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    93e0:	786b      	ldrb	r3, [r5, #1]
    93e2:	2b04      	cmp	r3, #4
    93e4:	d006      	beq.n	93f4 <USBHandleStandardRequest+0x98>
    93e6:	2b05      	cmp	r3, #5
    93e8:	d006      	beq.n	93f8 <USBHandleStandardRequest+0x9c>
    93ea:	2b02      	cmp	r3, #2
    93ec:	d10e      	bne.n	940c <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    93ee:	f895 9005 	ldrb.w	r9, [r5, #5]
    93f2:	e00b      	b.n	940c <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    93f4:	78ef      	ldrb	r7, [r5, #3]
    93f6:	e009      	b.n	940c <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    93f8:	45b1      	cmp	r9, r6
    93fa:	d107      	bne.n	940c <USBHandleStandardRequest+0xb0>
    93fc:	b937      	cbnz	r7, 940c <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    93fe:	7969      	ldrb	r1, [r5, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    9400:	792b      	ldrb	r3, [r5, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    9402:	78a8      	ldrb	r0, [r5, #2]
    9404:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    9408:	f7ff fd86 	bl	8f18 <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    940c:	782b      	ldrb	r3, [r5, #0]
    940e:	441d      	add	r5, r3
    9410:	e7e4      	b.n	93dc <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    9412:	2001      	movs	r0, #1
    9414:	f7ff fe5e 	bl	90d4 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    9418:	8863      	ldrh	r3, [r4, #2]
    941a:	f888 300c 	strb.w	r3, [r8, #12]
    941e:	e034      	b.n	948a <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9420:	7863      	ldrb	r3, [r4, #1]
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    9422:	683a      	ldr	r2, [r7, #0]
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9424:	2b0a      	cmp	r3, #10
    9426:	d006      	beq.n	9436 <USBHandleStandardRequest+0xda>
    9428:	2b0b      	cmp	r3, #11
    942a:	d007      	beq.n	943c <USBHandleStandardRequest+0xe0>
    942c:	bb53      	cbnz	r3, 9484 <USBHandleStandardRequest+0x128>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    942e:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    9430:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    9432:	2302      	movs	r3, #2
    9434:	e004      	b.n	9440 <USBHandleStandardRequest+0xe4>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    9436:	2300      	movs	r3, #0
    9438:	7013      	strb	r3, [r2, #0]
    943a:	e016      	b.n	946a <USBHandleStandardRequest+0x10e>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    943c:	8863      	ldrh	r3, [r4, #2]
    943e:	bb0b      	cbnz	r3, 9484 <USBHandleStandardRequest+0x128>
			return FALSE;
		}
		*piLen = 0;
    9440:	602b      	str	r3, [r5, #0]
    9442:	e022      	b.n	948a <USBHandleStandardRequest+0x12e>
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    9444:	f8d7 8000 	ldr.w	r8, [r7]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9448:	7867      	ldrb	r7, [r4, #1]
    944a:	2f01      	cmp	r7, #1
    944c:	d00f      	beq.n	946e <USBHandleStandardRequest+0x112>
    944e:	d302      	bcc.n	9456 <USBHandleStandardRequest+0xfa>
    9450:	2f03      	cmp	r7, #3
    9452:	d010      	beq.n	9476 <USBHandleStandardRequest+0x11a>
    9454:	e016      	b.n	9484 <USBHandleStandardRequest+0x128>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    9456:	7920      	ldrb	r0, [r4, #4]
    9458:	f7ff fdb0 	bl	8fbc <USBHwEPGetStatus>
		pbData[1] = 0;
    945c:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    945e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9462:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    9466:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    946a:	602e      	str	r6, [r5, #0]
    946c:	e00d      	b.n	948a <USBHandleStandardRequest+0x12e>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    946e:	8861      	ldrh	r1, [r4, #2]
    9470:	b941      	cbnz	r1, 9484 <USBHandleStandardRequest+0x128>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    9472:	7920      	ldrb	r0, [r4, #4]
    9474:	e003      	b.n	947e <USBHandleStandardRequest+0x122>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    9476:	8863      	ldrh	r3, [r4, #2]
    9478:	b923      	cbnz	r3, 9484 <USBHandleStandardRequest+0x128>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    947a:	7920      	ldrb	r0, [r4, #4]
    947c:	2101      	movs	r1, #1
    947e:	f7ff fdb7 	bl	8ff0 <USBHwEPStall>
    9482:	e002      	b.n	948a <USBHandleStandardRequest+0x12e>
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
    9484:	2000      	movs	r0, #0
    9486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
		return TRUE;
    948a:	2001      	movs	r0, #1
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9490:	10000fb4 	.word	0x10000fb4

00009494 <__aeabi_llsl>:
    9494:	4091      	lsls	r1, r2
    9496:	1c03      	adds	r3, r0, #0
    9498:	4090      	lsls	r0, r2
    949a:	469c      	mov	ip, r3
    949c:	3a20      	subs	r2, #32
    949e:	4093      	lsls	r3, r2
    94a0:	4319      	orrs	r1, r3
    94a2:	4252      	negs	r2, r2
    94a4:	4663      	mov	r3, ip
    94a6:	40d3      	lsrs	r3, r2
    94a8:	4319      	orrs	r1, r3
    94aa:	4770      	bx	lr

000094ac <__aeabi_drsub>:
    94ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    94b0:	e002      	b.n	94b8 <__adddf3>
    94b2:	bf00      	nop

000094b4 <__aeabi_dsub>:
    94b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000094b8 <__adddf3>:
    94b8:	b530      	push	{r4, r5, lr}
    94ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
    94be:	ea4f 0543 	mov.w	r5, r3, lsl #1
    94c2:	ea94 0f05 	teq	r4, r5
    94c6:	bf08      	it	eq
    94c8:	ea90 0f02 	teqeq	r0, r2
    94cc:	bf1f      	itttt	ne
    94ce:	ea54 0c00 	orrsne.w	ip, r4, r0
    94d2:	ea55 0c02 	orrsne.w	ip, r5, r2
    94d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    94da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    94de:	f000 80e2 	beq.w	96a6 <__adddf3+0x1ee>
    94e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    94e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    94ea:	bfb8      	it	lt
    94ec:	426d      	neglt	r5, r5
    94ee:	dd0c      	ble.n	950a <__adddf3+0x52>
    94f0:	442c      	add	r4, r5
    94f2:	ea80 0202 	eor.w	r2, r0, r2
    94f6:	ea81 0303 	eor.w	r3, r1, r3
    94fa:	ea82 0000 	eor.w	r0, r2, r0
    94fe:	ea83 0101 	eor.w	r1, r3, r1
    9502:	ea80 0202 	eor.w	r2, r0, r2
    9506:	ea81 0303 	eor.w	r3, r1, r3
    950a:	2d36      	cmp	r5, #54	; 0x36
    950c:	bf88      	it	hi
    950e:	bd30      	pophi	{r4, r5, pc}
    9510:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9514:	ea4f 3101 	mov.w	r1, r1, lsl #12
    9518:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    951c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    9520:	d002      	beq.n	9528 <__adddf3+0x70>
    9522:	4240      	negs	r0, r0
    9524:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9528:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    952c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    9530:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    9534:	d002      	beq.n	953c <__adddf3+0x84>
    9536:	4252      	negs	r2, r2
    9538:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    953c:	ea94 0f05 	teq	r4, r5
    9540:	f000 80a7 	beq.w	9692 <__adddf3+0x1da>
    9544:	f1a4 0401 	sub.w	r4, r4, #1
    9548:	f1d5 0e20 	rsbs	lr, r5, #32
    954c:	db0d      	blt.n	956a <__adddf3+0xb2>
    954e:	fa02 fc0e 	lsl.w	ip, r2, lr
    9552:	fa22 f205 	lsr.w	r2, r2, r5
    9556:	1880      	adds	r0, r0, r2
    9558:	f141 0100 	adc.w	r1, r1, #0
    955c:	fa03 f20e 	lsl.w	r2, r3, lr
    9560:	1880      	adds	r0, r0, r2
    9562:	fa43 f305 	asr.w	r3, r3, r5
    9566:	4159      	adcs	r1, r3
    9568:	e00e      	b.n	9588 <__adddf3+0xd0>
    956a:	f1a5 0520 	sub.w	r5, r5, #32
    956e:	f10e 0e20 	add.w	lr, lr, #32
    9572:	2a01      	cmp	r2, #1
    9574:	fa03 fc0e 	lsl.w	ip, r3, lr
    9578:	bf28      	it	cs
    957a:	f04c 0c02 	orrcs.w	ip, ip, #2
    957e:	fa43 f305 	asr.w	r3, r3, r5
    9582:	18c0      	adds	r0, r0, r3
    9584:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    9588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    958c:	d507      	bpl.n	959e <__adddf3+0xe6>
    958e:	f04f 0e00 	mov.w	lr, #0
    9592:	f1dc 0c00 	rsbs	ip, ip, #0
    9596:	eb7e 0000 	sbcs.w	r0, lr, r0
    959a:	eb6e 0101 	sbc.w	r1, lr, r1
    959e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    95a2:	d31b      	bcc.n	95dc <__adddf3+0x124>
    95a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    95a8:	d30c      	bcc.n	95c4 <__adddf3+0x10c>
    95aa:	0849      	lsrs	r1, r1, #1
    95ac:	ea5f 0030 	movs.w	r0, r0, rrx
    95b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    95b4:	f104 0401 	add.w	r4, r4, #1
    95b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    95bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    95c0:	f080 809a 	bcs.w	96f8 <__adddf3+0x240>
    95c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    95c8:	bf08      	it	eq
    95ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    95ce:	f150 0000 	adcs.w	r0, r0, #0
    95d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    95d6:	ea41 0105 	orr.w	r1, r1, r5
    95da:	bd30      	pop	{r4, r5, pc}
    95dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    95e0:	4140      	adcs	r0, r0
    95e2:	eb41 0101 	adc.w	r1, r1, r1
    95e6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    95ea:	f1a4 0401 	sub.w	r4, r4, #1
    95ee:	d1e9      	bne.n	95c4 <__adddf3+0x10c>
    95f0:	f091 0f00 	teq	r1, #0
    95f4:	bf04      	itt	eq
    95f6:	4601      	moveq	r1, r0
    95f8:	2000      	moveq	r0, #0
    95fa:	fab1 f381 	clz	r3, r1
    95fe:	bf08      	it	eq
    9600:	3320      	addeq	r3, #32
    9602:	f1a3 030b 	sub.w	r3, r3, #11
    9606:	f1b3 0220 	subs.w	r2, r3, #32
    960a:	da0c      	bge.n	9626 <__adddf3+0x16e>
    960c:	320c      	adds	r2, #12
    960e:	dd08      	ble.n	9622 <__adddf3+0x16a>
    9610:	f102 0c14 	add.w	ip, r2, #20
    9614:	f1c2 020c 	rsb	r2, r2, #12
    9618:	fa01 f00c 	lsl.w	r0, r1, ip
    961c:	fa21 f102 	lsr.w	r1, r1, r2
    9620:	e00c      	b.n	963c <__adddf3+0x184>
    9622:	f102 0214 	add.w	r2, r2, #20
    9626:	bfd8      	it	le
    9628:	f1c2 0c20 	rsble	ip, r2, #32
    962c:	fa01 f102 	lsl.w	r1, r1, r2
    9630:	fa20 fc0c 	lsr.w	ip, r0, ip
    9634:	bfdc      	itt	le
    9636:	ea41 010c 	orrle.w	r1, r1, ip
    963a:	4090      	lslle	r0, r2
    963c:	1ae4      	subs	r4, r4, r3
    963e:	bfa2      	ittt	ge
    9640:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    9644:	4329      	orrge	r1, r5
    9646:	bd30      	popge	{r4, r5, pc}
    9648:	ea6f 0404 	mvn.w	r4, r4
    964c:	3c1f      	subs	r4, #31
    964e:	da1c      	bge.n	968a <__adddf3+0x1d2>
    9650:	340c      	adds	r4, #12
    9652:	dc0e      	bgt.n	9672 <__adddf3+0x1ba>
    9654:	f104 0414 	add.w	r4, r4, #20
    9658:	f1c4 0220 	rsb	r2, r4, #32
    965c:	fa20 f004 	lsr.w	r0, r0, r4
    9660:	fa01 f302 	lsl.w	r3, r1, r2
    9664:	ea40 0003 	orr.w	r0, r0, r3
    9668:	fa21 f304 	lsr.w	r3, r1, r4
    966c:	ea45 0103 	orr.w	r1, r5, r3
    9670:	bd30      	pop	{r4, r5, pc}
    9672:	f1c4 040c 	rsb	r4, r4, #12
    9676:	f1c4 0220 	rsb	r2, r4, #32
    967a:	fa20 f002 	lsr.w	r0, r0, r2
    967e:	fa01 f304 	lsl.w	r3, r1, r4
    9682:	ea40 0003 	orr.w	r0, r0, r3
    9686:	4629      	mov	r1, r5
    9688:	bd30      	pop	{r4, r5, pc}
    968a:	fa21 f004 	lsr.w	r0, r1, r4
    968e:	4629      	mov	r1, r5
    9690:	bd30      	pop	{r4, r5, pc}
    9692:	f094 0f00 	teq	r4, #0
    9696:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    969a:	bf06      	itte	eq
    969c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    96a0:	3401      	addeq	r4, #1
    96a2:	3d01      	subne	r5, #1
    96a4:	e74e      	b.n	9544 <__adddf3+0x8c>
    96a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    96aa:	bf18      	it	ne
    96ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    96b0:	d029      	beq.n	9706 <__adddf3+0x24e>
    96b2:	ea94 0f05 	teq	r4, r5
    96b6:	bf08      	it	eq
    96b8:	ea90 0f02 	teqeq	r0, r2
    96bc:	d005      	beq.n	96ca <__adddf3+0x212>
    96be:	ea54 0c00 	orrs.w	ip, r4, r0
    96c2:	bf04      	itt	eq
    96c4:	4619      	moveq	r1, r3
    96c6:	4610      	moveq	r0, r2
    96c8:	bd30      	pop	{r4, r5, pc}
    96ca:	ea91 0f03 	teq	r1, r3
    96ce:	bf1e      	ittt	ne
    96d0:	2100      	movne	r1, #0
    96d2:	2000      	movne	r0, #0
    96d4:	bd30      	popne	{r4, r5, pc}
    96d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    96da:	d105      	bne.n	96e8 <__adddf3+0x230>
    96dc:	0040      	lsls	r0, r0, #1
    96de:	4149      	adcs	r1, r1
    96e0:	bf28      	it	cs
    96e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    96e6:	bd30      	pop	{r4, r5, pc}
    96e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    96ec:	bf3c      	itt	cc
    96ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    96f2:	bd30      	popcc	{r4, r5, pc}
    96f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    96f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    96fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9700:	f04f 0000 	mov.w	r0, #0
    9704:	bd30      	pop	{r4, r5, pc}
    9706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    970a:	bf1a      	itte	ne
    970c:	4619      	movne	r1, r3
    970e:	4610      	movne	r0, r2
    9710:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    9714:	bf1c      	itt	ne
    9716:	460b      	movne	r3, r1
    9718:	4602      	movne	r2, r0
    971a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    971e:	bf06      	itte	eq
    9720:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    9724:	ea91 0f03 	teqeq	r1, r3
    9728:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    972c:	bd30      	pop	{r4, r5, pc}
    972e:	bf00      	nop

00009730 <__aeabi_ui2d>:
    9730:	f090 0f00 	teq	r0, #0
    9734:	bf04      	itt	eq
    9736:	2100      	moveq	r1, #0
    9738:	4770      	bxeq	lr
    973a:	b530      	push	{r4, r5, lr}
    973c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9740:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9744:	f04f 0500 	mov.w	r5, #0
    9748:	f04f 0100 	mov.w	r1, #0
    974c:	e750      	b.n	95f0 <__adddf3+0x138>
    974e:	bf00      	nop

00009750 <__aeabi_i2d>:
    9750:	f090 0f00 	teq	r0, #0
    9754:	bf04      	itt	eq
    9756:	2100      	moveq	r1, #0
    9758:	4770      	bxeq	lr
    975a:	b530      	push	{r4, r5, lr}
    975c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9760:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9764:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    9768:	bf48      	it	mi
    976a:	4240      	negmi	r0, r0
    976c:	f04f 0100 	mov.w	r1, #0
    9770:	e73e      	b.n	95f0 <__adddf3+0x138>
    9772:	bf00      	nop

00009774 <__aeabi_f2d>:
    9774:	0042      	lsls	r2, r0, #1
    9776:	ea4f 01e2 	mov.w	r1, r2, asr #3
    977a:	ea4f 0131 	mov.w	r1, r1, rrx
    977e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    9782:	bf1f      	itttt	ne
    9784:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    9788:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    978c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    9790:	4770      	bxne	lr
    9792:	f092 0f00 	teq	r2, #0
    9796:	bf14      	ite	ne
    9798:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    979c:	4770      	bxeq	lr
    979e:	b530      	push	{r4, r5, lr}
    97a0:	f44f 7460 	mov.w	r4, #896	; 0x380
    97a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    97a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    97ac:	e720      	b.n	95f0 <__adddf3+0x138>
    97ae:	bf00      	nop

000097b0 <__aeabi_ul2d>:
    97b0:	ea50 0201 	orrs.w	r2, r0, r1
    97b4:	bf08      	it	eq
    97b6:	4770      	bxeq	lr
    97b8:	b530      	push	{r4, r5, lr}
    97ba:	f04f 0500 	mov.w	r5, #0
    97be:	e00a      	b.n	97d6 <__aeabi_l2d+0x16>

000097c0 <__aeabi_l2d>:
    97c0:	ea50 0201 	orrs.w	r2, r0, r1
    97c4:	bf08      	it	eq
    97c6:	4770      	bxeq	lr
    97c8:	b530      	push	{r4, r5, lr}
    97ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    97ce:	d502      	bpl.n	97d6 <__aeabi_l2d+0x16>
    97d0:	4240      	negs	r0, r0
    97d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    97d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    97da:	f104 0432 	add.w	r4, r4, #50	; 0x32
    97de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    97e2:	f43f aedc 	beq.w	959e <__adddf3+0xe6>
    97e6:	f04f 0203 	mov.w	r2, #3
    97ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    97ee:	bf18      	it	ne
    97f0:	3203      	addne	r2, #3
    97f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    97f6:	bf18      	it	ne
    97f8:	3203      	addne	r2, #3
    97fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    97fe:	f1c2 0320 	rsb	r3, r2, #32
    9802:	fa00 fc03 	lsl.w	ip, r0, r3
    9806:	fa20 f002 	lsr.w	r0, r0, r2
    980a:	fa01 fe03 	lsl.w	lr, r1, r3
    980e:	ea40 000e 	orr.w	r0, r0, lr
    9812:	fa21 f102 	lsr.w	r1, r1, r2
    9816:	4414      	add	r4, r2
    9818:	e6c1      	b.n	959e <__adddf3+0xe6>
    981a:	bf00      	nop

0000981c <__aeabi_d2uiz>:
    981c:	004a      	lsls	r2, r1, #1
    981e:	d211      	bcs.n	9844 <__aeabi_d2uiz+0x28>
    9820:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9824:	d211      	bcs.n	984a <__aeabi_d2uiz+0x2e>
    9826:	d50d      	bpl.n	9844 <__aeabi_d2uiz+0x28>
    9828:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    982c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9830:	d40e      	bmi.n	9850 <__aeabi_d2uiz+0x34>
    9832:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    9836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    983a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    983e:	fa23 f002 	lsr.w	r0, r3, r2
    9842:	4770      	bx	lr
    9844:	f04f 0000 	mov.w	r0, #0
    9848:	4770      	bx	lr
    984a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    984e:	d102      	bne.n	9856 <__aeabi_d2uiz+0x3a>
    9850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9854:	4770      	bx	lr
    9856:	f04f 0000 	mov.w	r0, #0
    985a:	4770      	bx	lr

0000985c <malloc>:
    985c:	f240 4348 	movw	r3, #1096	; 0x448
    9860:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9864:	4601      	mov	r1, r0
    9866:	6818      	ldr	r0, [r3, #0]
    9868:	f000 b800 	b.w	986c <_malloc_r>

0000986c <_malloc_r>:
    986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9870:	f101 050b 	add.w	r5, r1, #11
    9874:	2d16      	cmp	r5, #22
    9876:	bf87      	ittee	hi
    9878:	f025 0507 	bichi.w	r5, r5, #7
    987c:	0feb      	lsrhi	r3, r5, #31
    987e:	2300      	movls	r3, #0
    9880:	2510      	movls	r5, #16
    9882:	428d      	cmp	r5, r1
    9884:	bf2c      	ite	cs
    9886:	4619      	movcs	r1, r3
    9888:	f043 0101 	orrcc.w	r1, r3, #1
    988c:	b083      	sub	sp, #12
    988e:	4607      	mov	r7, r0
    9890:	2900      	cmp	r1, #0
    9892:	f040 80b4 	bne.w	99fe <_malloc_r+0x192>
    9896:	f000 fb45 	bl	9f24 <__malloc_lock>
    989a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    989e:	d21f      	bcs.n	98e0 <_malloc_r+0x74>
    98a0:	f640 2604 	movw	r6, #2564	; 0xa04
    98a4:	f2c1 0600 	movt	r6, #4096	; 0x1000
    98a8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    98ac:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
    98b0:	68dc      	ldr	r4, [r3, #12]
    98b2:	429c      	cmp	r4, r3
    98b4:	f000 81f4 	beq.w	9ca0 <_malloc_r+0x434>
    98b8:	6863      	ldr	r3, [r4, #4]
    98ba:	68e2      	ldr	r2, [r4, #12]
    98bc:	f023 0303 	bic.w	r3, r3, #3
    98c0:	4423      	add	r3, r4
    98c2:	6858      	ldr	r0, [r3, #4]
    98c4:	68a1      	ldr	r1, [r4, #8]
    98c6:	f040 0501 	orr.w	r5, r0, #1
    98ca:	60ca      	str	r2, [r1, #12]
    98cc:	4638      	mov	r0, r7
    98ce:	6091      	str	r1, [r2, #8]
    98d0:	605d      	str	r5, [r3, #4]
    98d2:	f000 fb29 	bl	9f28 <__malloc_unlock>
    98d6:	3408      	adds	r4, #8
    98d8:	4620      	mov	r0, r4
    98da:	b003      	add	sp, #12
    98dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98e0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    98e4:	bf04      	itt	eq
    98e6:	217e      	moveq	r1, #126	; 0x7e
    98e8:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
    98ec:	f040 808e 	bne.w	9a0c <_malloc_r+0x1a0>
    98f0:	f640 2604 	movw	r6, #2564	; 0xa04
    98f4:	f2c1 0600 	movt	r6, #4096	; 0x1000
    98f8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    98fc:	68cc      	ldr	r4, [r1, #12]
    98fe:	42a1      	cmp	r1, r4
    9900:	d106      	bne.n	9910 <_malloc_r+0xa4>
    9902:	e00d      	b.n	9920 <_malloc_r+0xb4>
    9904:	2b00      	cmp	r3, #0
    9906:	f280 8163 	bge.w	9bd0 <_malloc_r+0x364>
    990a:	68e4      	ldr	r4, [r4, #12]
    990c:	42a1      	cmp	r1, r4
    990e:	d007      	beq.n	9920 <_malloc_r+0xb4>
    9910:	6862      	ldr	r2, [r4, #4]
    9912:	f022 0203 	bic.w	r2, r2, #3
    9916:	1b53      	subs	r3, r2, r5
    9918:	2b0f      	cmp	r3, #15
    991a:	ddf3      	ble.n	9904 <_malloc_r+0x98>
    991c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    9920:	f10c 0c01 	add.w	ip, ip, #1
    9924:	f640 2304 	movw	r3, #2564	; 0xa04
    9928:	f2c1 0300 	movt	r3, #4096	; 0x1000
    992c:	6934      	ldr	r4, [r6, #16]
    992e:	f103 0e08 	add.w	lr, r3, #8
    9932:	4574      	cmp	r4, lr
    9934:	bf08      	it	eq
    9936:	685a      	ldreq	r2, [r3, #4]
    9938:	d021      	beq.n	997e <_malloc_r+0x112>
    993a:	6861      	ldr	r1, [r4, #4]
    993c:	f021 0103 	bic.w	r1, r1, #3
    9940:	1b4a      	subs	r2, r1, r5
    9942:	2a0f      	cmp	r2, #15
    9944:	f300 8190 	bgt.w	9c68 <_malloc_r+0x3fc>
    9948:	2a00      	cmp	r2, #0
    994a:	f8c3 e014 	str.w	lr, [r3, #20]
    994e:	f8c3 e010 	str.w	lr, [r3, #16]
    9952:	da66      	bge.n	9a22 <_malloc_r+0x1b6>
    9954:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9958:	f080 815f 	bcs.w	9c1a <_malloc_r+0x3ae>
    995c:	08c9      	lsrs	r1, r1, #3
    995e:	108a      	asrs	r2, r1, #2
    9960:	f04f 0801 	mov.w	r8, #1
    9964:	fa08 f802 	lsl.w	r8, r8, r2
    9968:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    996c:	685a      	ldr	r2, [r3, #4]
    996e:	6888      	ldr	r0, [r1, #8]
    9970:	ea48 0202 	orr.w	r2, r8, r2
    9974:	60a0      	str	r0, [r4, #8]
    9976:	60e1      	str	r1, [r4, #12]
    9978:	605a      	str	r2, [r3, #4]
    997a:	608c      	str	r4, [r1, #8]
    997c:	60c4      	str	r4, [r0, #12]
    997e:	ea4f 03ac 	mov.w	r3, ip, asr #2
    9982:	2001      	movs	r0, #1
    9984:	4098      	lsls	r0, r3
    9986:	4290      	cmp	r0, r2
    9988:	d858      	bhi.n	9a3c <_malloc_r+0x1d0>
    998a:	4202      	tst	r2, r0
    998c:	d106      	bne.n	999c <_malloc_r+0x130>
    998e:	f02c 0c03 	bic.w	ip, ip, #3
    9992:	0040      	lsls	r0, r0, #1
    9994:	4202      	tst	r2, r0
    9996:	f10c 0c04 	add.w	ip, ip, #4
    999a:	d0fa      	beq.n	9992 <_malloc_r+0x126>
    999c:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
    99a0:	4644      	mov	r4, r8
    99a2:	46e1      	mov	r9, ip
    99a4:	68e3      	ldr	r3, [r4, #12]
    99a6:	429c      	cmp	r4, r3
    99a8:	d107      	bne.n	99ba <_malloc_r+0x14e>
    99aa:	e170      	b.n	9c8e <_malloc_r+0x422>
    99ac:	2a00      	cmp	r2, #0
    99ae:	f280 8181 	bge.w	9cb4 <_malloc_r+0x448>
    99b2:	68db      	ldr	r3, [r3, #12]
    99b4:	429c      	cmp	r4, r3
    99b6:	f000 816a 	beq.w	9c8e <_malloc_r+0x422>
    99ba:	6859      	ldr	r1, [r3, #4]
    99bc:	f021 0103 	bic.w	r1, r1, #3
    99c0:	1b4a      	subs	r2, r1, r5
    99c2:	2a0f      	cmp	r2, #15
    99c4:	ddf2      	ble.n	99ac <_malloc_r+0x140>
    99c6:	461c      	mov	r4, r3
    99c8:	f854 cf08 	ldr.w	ip, [r4, #8]!
    99cc:	68d9      	ldr	r1, [r3, #12]
    99ce:	f045 0901 	orr.w	r9, r5, #1
    99d2:	f042 0801 	orr.w	r8, r2, #1
    99d6:	441d      	add	r5, r3
    99d8:	f8c3 9004 	str.w	r9, [r3, #4]
    99dc:	4638      	mov	r0, r7
    99de:	f8cc 100c 	str.w	r1, [ip, #12]
    99e2:	f8c1 c008 	str.w	ip, [r1, #8]
    99e6:	6175      	str	r5, [r6, #20]
    99e8:	6135      	str	r5, [r6, #16]
    99ea:	f8c5 e00c 	str.w	lr, [r5, #12]
    99ee:	f8c5 e008 	str.w	lr, [r5, #8]
    99f2:	f8c5 8004 	str.w	r8, [r5, #4]
    99f6:	50aa      	str	r2, [r5, r2]
    99f8:	f000 fa96 	bl	9f28 <__malloc_unlock>
    99fc:	e76c      	b.n	98d8 <_malloc_r+0x6c>
    99fe:	230c      	movs	r3, #12
    9a00:	2400      	movs	r4, #0
    9a02:	6003      	str	r3, [r0, #0]
    9a04:	4620      	mov	r0, r4
    9a06:	b003      	add	sp, #12
    9a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a0c:	f1bc 0f04 	cmp.w	ip, #4
    9a10:	f200 80ef 	bhi.w	9bf2 <_malloc_r+0x386>
    9a14:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    9a18:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    9a1c:	ea4f 014c 	mov.w	r1, ip, lsl #1
    9a20:	e766      	b.n	98f0 <_malloc_r+0x84>
    9a22:	4421      	add	r1, r4
    9a24:	684b      	ldr	r3, [r1, #4]
    9a26:	4638      	mov	r0, r7
    9a28:	f043 0301 	orr.w	r3, r3, #1
    9a2c:	604b      	str	r3, [r1, #4]
    9a2e:	f000 fa7b 	bl	9f28 <__malloc_unlock>
    9a32:	3408      	adds	r4, #8
    9a34:	4620      	mov	r0, r4
    9a36:	b003      	add	sp, #12
    9a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a3c:	68b4      	ldr	r4, [r6, #8]
    9a3e:	6863      	ldr	r3, [r4, #4]
    9a40:	f023 0903 	bic.w	r9, r3, #3
    9a44:	454d      	cmp	r5, r9
    9a46:	d804      	bhi.n	9a52 <_malloc_r+0x1e6>
    9a48:	ebc5 0309 	rsb	r3, r5, r9
    9a4c:	2b0f      	cmp	r3, #15
    9a4e:	f300 80af 	bgt.w	9bb0 <_malloc_r+0x344>
    9a52:	f640 73cc 	movw	r3, #4044	; 0xfcc
    9a56:	f640 6a10 	movw	sl, #3600	; 0xe10
    9a5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9a5e:	f2c1 0a00 	movt	sl, #4096	; 0x1000
    9a62:	681b      	ldr	r3, [r3, #0]
    9a64:	f8da 1000 	ldr.w	r1, [sl]
    9a68:	442b      	add	r3, r5
    9a6a:	3101      	adds	r1, #1
    9a6c:	bf1d      	ittte	ne
    9a6e:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
    9a72:	330f      	addne	r3, #15
    9a74:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
    9a78:	f103 0c10 	addeq.w	ip, r3, #16
    9a7c:	bf18      	it	ne
    9a7e:	f023 0c0f 	bicne.w	ip, r3, #15
    9a82:	eb04 0209 	add.w	r2, r4, r9
    9a86:	4661      	mov	r1, ip
    9a88:	4638      	mov	r0, r7
    9a8a:	e88d 1004 	stmia.w	sp, {r2, ip}
    9a8e:	f000 fa4d 	bl	9f2c <_sbrk_r>
    9a92:	e89d 1004 	ldmia.w	sp, {r2, ip}
    9a96:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9a9a:	4680      	mov	r8, r0
    9a9c:	f000 8120 	beq.w	9ce0 <_malloc_r+0x474>
    9aa0:	4282      	cmp	r2, r0
    9aa2:	f200 811a 	bhi.w	9cda <_malloc_r+0x46e>
    9aa6:	f640 7bd0 	movw	fp, #4048	; 0xfd0
    9aaa:	f2c1 0b00 	movt	fp, #4096	; 0x1000
    9aae:	f8db 3000 	ldr.w	r3, [fp]
    9ab2:	4542      	cmp	r2, r8
    9ab4:	4463      	add	r3, ip
    9ab6:	f8cb 3000 	str.w	r3, [fp]
    9aba:	f000 815f 	beq.w	9d7c <_malloc_r+0x510>
    9abe:	f8da 0000 	ldr.w	r0, [sl]
    9ac2:	f640 6110 	movw	r1, #3600	; 0xe10
    9ac6:	3001      	adds	r0, #1
    9ac8:	bf1c      	itt	ne
    9aca:	ebc2 0208 	rsbne	r2, r2, r8
    9ace:	189b      	addne	r3, r3, r2
    9ad0:	f2c1 0100 	movt	r1, #4096	; 0x1000
    9ad4:	bf0c      	ite	eq
    9ad6:	f8c1 8000 	streq.w	r8, [r1]
    9ada:	f8cb 3000 	strne.w	r3, [fp]
    9ade:	f018 0307 	ands.w	r3, r8, #7
    9ae2:	bf1f      	itttt	ne
    9ae4:	f1c3 0208 	rsbne	r2, r3, #8
    9ae8:	4490      	addne	r8, r2
    9aea:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
    9aee:	f103 0a08 	addne.w	sl, r3, #8
    9af2:	eb08 030c 	add.w	r3, r8, ip
    9af6:	bf08      	it	eq
    9af8:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
    9afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9b00:	ebc3 0a0a 	rsb	sl, r3, sl
    9b04:	4651      	mov	r1, sl
    9b06:	4638      	mov	r0, r7
    9b08:	f000 fa10 	bl	9f2c <_sbrk_r>
    9b0c:	1c43      	adds	r3, r0, #1
    9b0e:	bf18      	it	ne
    9b10:	ebc8 0100 	rsbne	r1, r8, r0
    9b14:	f8db 3000 	ldr.w	r3, [fp]
    9b18:	bf15      	itete	ne
    9b1a:	4451      	addne	r1, sl
    9b1c:	f04f 0a00 	moveq.w	sl, #0
    9b20:	f041 0101 	orrne.w	r1, r1, #1
    9b24:	2101      	moveq	r1, #1
    9b26:	f640 72d0 	movw	r2, #4048	; 0xfd0
    9b2a:	4453      	add	r3, sl
    9b2c:	42b4      	cmp	r4, r6
    9b2e:	f8c6 8008 	str.w	r8, [r6, #8]
    9b32:	f8cb 3000 	str.w	r3, [fp]
    9b36:	f8c8 1004 	str.w	r1, [r8, #4]
    9b3a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9b3e:	d018      	beq.n	9b72 <_malloc_r+0x306>
    9b40:	f1b9 0f0f 	cmp.w	r9, #15
    9b44:	f240 80fb 	bls.w	9d3e <_malloc_r+0x4d2>
    9b48:	6861      	ldr	r1, [r4, #4]
    9b4a:	f1a9 000c 	sub.w	r0, r9, #12
    9b4e:	f020 0007 	bic.w	r0, r0, #7
    9b52:	f001 0101 	and.w	r1, r1, #1
    9b56:	ea40 0c01 	orr.w	ip, r0, r1
    9b5a:	f04f 0e05 	mov.w	lr, #5
    9b5e:	1821      	adds	r1, r4, r0
    9b60:	280f      	cmp	r0, #15
    9b62:	f8c4 c004 	str.w	ip, [r4, #4]
    9b66:	f8c1 e004 	str.w	lr, [r1, #4]
    9b6a:	f8c1 e008 	str.w	lr, [r1, #8]
    9b6e:	f200 8111 	bhi.w	9d94 <_malloc_r+0x528>
    9b72:	f640 72c8 	movw	r2, #4040	; 0xfc8
    9b76:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9b7a:	6811      	ldr	r1, [r2, #0]
    9b7c:	68b4      	ldr	r4, [r6, #8]
    9b7e:	428b      	cmp	r3, r1
    9b80:	bf88      	it	hi
    9b82:	6013      	strhi	r3, [r2, #0]
    9b84:	f640 72c4 	movw	r2, #4036	; 0xfc4
    9b88:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9b8c:	6811      	ldr	r1, [r2, #0]
    9b8e:	428b      	cmp	r3, r1
    9b90:	bf88      	it	hi
    9b92:	6013      	strhi	r3, [r2, #0]
    9b94:	6862      	ldr	r2, [r4, #4]
    9b96:	f022 0203 	bic.w	r2, r2, #3
    9b9a:	4295      	cmp	r5, r2
    9b9c:	ebc5 0302 	rsb	r3, r5, r2
    9ba0:	d801      	bhi.n	9ba6 <_malloc_r+0x33a>
    9ba2:	2b0f      	cmp	r3, #15
    9ba4:	dc04      	bgt.n	9bb0 <_malloc_r+0x344>
    9ba6:	4638      	mov	r0, r7
    9ba8:	f000 f9be 	bl	9f28 <__malloc_unlock>
    9bac:	2400      	movs	r4, #0
    9bae:	e693      	b.n	98d8 <_malloc_r+0x6c>
    9bb0:	f045 0201 	orr.w	r2, r5, #1
    9bb4:	f043 0301 	orr.w	r3, r3, #1
    9bb8:	4425      	add	r5, r4
    9bba:	6062      	str	r2, [r4, #4]
    9bbc:	4638      	mov	r0, r7
    9bbe:	60b5      	str	r5, [r6, #8]
    9bc0:	606b      	str	r3, [r5, #4]
    9bc2:	f000 f9b1 	bl	9f28 <__malloc_unlock>
    9bc6:	3408      	adds	r4, #8
    9bc8:	4620      	mov	r0, r4
    9bca:	b003      	add	sp, #12
    9bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bd0:	4422      	add	r2, r4
    9bd2:	6850      	ldr	r0, [r2, #4]
    9bd4:	68e3      	ldr	r3, [r4, #12]
    9bd6:	68a1      	ldr	r1, [r4, #8]
    9bd8:	f040 0501 	orr.w	r5, r0, #1
    9bdc:	60cb      	str	r3, [r1, #12]
    9bde:	4638      	mov	r0, r7
    9be0:	6099      	str	r1, [r3, #8]
    9be2:	6055      	str	r5, [r2, #4]
    9be4:	f000 f9a0 	bl	9f28 <__malloc_unlock>
    9be8:	3408      	adds	r4, #8
    9bea:	4620      	mov	r0, r4
    9bec:	b003      	add	sp, #12
    9bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bf2:	f1bc 0f14 	cmp.w	ip, #20
    9bf6:	bf9c      	itt	ls
    9bf8:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
    9bfc:	ea4f 014c 	movls.w	r1, ip, lsl #1
    9c00:	f67f ae76 	bls.w	98f0 <_malloc_r+0x84>
    9c04:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    9c08:	f200 808f 	bhi.w	9d2a <_malloc_r+0x4be>
    9c0c:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    9c10:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    9c14:	ea4f 014c 	mov.w	r1, ip, lsl #1
    9c18:	e66a      	b.n	98f0 <_malloc_r+0x84>
    9c1a:	0a4b      	lsrs	r3, r1, #9
    9c1c:	2b04      	cmp	r3, #4
    9c1e:	d958      	bls.n	9cd2 <_malloc_r+0x466>
    9c20:	2b14      	cmp	r3, #20
    9c22:	bf9c      	itt	ls
    9c24:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
    9c28:	0050      	lslls	r0, r2, #1
    9c2a:	d905      	bls.n	9c38 <_malloc_r+0x3cc>
    9c2c:	2b54      	cmp	r3, #84	; 0x54
    9c2e:	f200 80ba 	bhi.w	9da6 <_malloc_r+0x53a>
    9c32:	0b0a      	lsrs	r2, r1, #12
    9c34:	326e      	adds	r2, #110	; 0x6e
    9c36:	0050      	lsls	r0, r2, #1
    9c38:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9c3c:	6883      	ldr	r3, [r0, #8]
    9c3e:	f640 2804 	movw	r8, #2564	; 0xa04
    9c42:	4283      	cmp	r3, r0
    9c44:	f2c1 0800 	movt	r8, #4096	; 0x1000
    9c48:	d07f      	beq.n	9d4a <_malloc_r+0x4de>
    9c4a:	685a      	ldr	r2, [r3, #4]
    9c4c:	f022 0203 	bic.w	r2, r2, #3
    9c50:	4291      	cmp	r1, r2
    9c52:	d202      	bcs.n	9c5a <_malloc_r+0x3ee>
    9c54:	689b      	ldr	r3, [r3, #8]
    9c56:	4298      	cmp	r0, r3
    9c58:	d1f7      	bne.n	9c4a <_malloc_r+0x3de>
    9c5a:	68d9      	ldr	r1, [r3, #12]
    9c5c:	6872      	ldr	r2, [r6, #4]
    9c5e:	60e1      	str	r1, [r4, #12]
    9c60:	60a3      	str	r3, [r4, #8]
    9c62:	608c      	str	r4, [r1, #8]
    9c64:	60dc      	str	r4, [r3, #12]
    9c66:	e68a      	b.n	997e <_malloc_r+0x112>
    9c68:	f045 0601 	orr.w	r6, r5, #1
    9c6c:	f042 0101 	orr.w	r1, r2, #1
    9c70:	4425      	add	r5, r4
    9c72:	6066      	str	r6, [r4, #4]
    9c74:	4638      	mov	r0, r7
    9c76:	615d      	str	r5, [r3, #20]
    9c78:	611d      	str	r5, [r3, #16]
    9c7a:	f8c5 e00c 	str.w	lr, [r5, #12]
    9c7e:	f8c5 e008 	str.w	lr, [r5, #8]
    9c82:	6069      	str	r1, [r5, #4]
    9c84:	50aa      	str	r2, [r5, r2]
    9c86:	3408      	adds	r4, #8
    9c88:	f000 f94e 	bl	9f28 <__malloc_unlock>
    9c8c:	e624      	b.n	98d8 <_malloc_r+0x6c>
    9c8e:	f109 0901 	add.w	r9, r9, #1
    9c92:	f019 0f03 	tst.w	r9, #3
    9c96:	f104 0408 	add.w	r4, r4, #8
    9c9a:	f47f ae83 	bne.w	99a4 <_malloc_r+0x138>
    9c9e:	e028      	b.n	9cf2 <_malloc_r+0x486>
    9ca0:	f104 0308 	add.w	r3, r4, #8
    9ca4:	6964      	ldr	r4, [r4, #20]
    9ca6:	42a3      	cmp	r3, r4
    9ca8:	bf08      	it	eq
    9caa:	f10c 0c02 	addeq.w	ip, ip, #2
    9cae:	f43f ae39 	beq.w	9924 <_malloc_r+0xb8>
    9cb2:	e601      	b.n	98b8 <_malloc_r+0x4c>
    9cb4:	4419      	add	r1, r3
    9cb6:	6848      	ldr	r0, [r1, #4]
    9cb8:	461c      	mov	r4, r3
    9cba:	f854 2f08 	ldr.w	r2, [r4, #8]!
    9cbe:	68db      	ldr	r3, [r3, #12]
    9cc0:	f040 0501 	orr.w	r5, r0, #1
    9cc4:	604d      	str	r5, [r1, #4]
    9cc6:	4638      	mov	r0, r7
    9cc8:	60d3      	str	r3, [r2, #12]
    9cca:	609a      	str	r2, [r3, #8]
    9ccc:	f000 f92c 	bl	9f28 <__malloc_unlock>
    9cd0:	e602      	b.n	98d8 <_malloc_r+0x6c>
    9cd2:	098a      	lsrs	r2, r1, #6
    9cd4:	3238      	adds	r2, #56	; 0x38
    9cd6:	0050      	lsls	r0, r2, #1
    9cd8:	e7ae      	b.n	9c38 <_malloc_r+0x3cc>
    9cda:	42b4      	cmp	r4, r6
    9cdc:	f43f aee3 	beq.w	9aa6 <_malloc_r+0x23a>
    9ce0:	68b4      	ldr	r4, [r6, #8]
    9ce2:	6862      	ldr	r2, [r4, #4]
    9ce4:	f022 0203 	bic.w	r2, r2, #3
    9ce8:	e757      	b.n	9b9a <_malloc_r+0x32e>
    9cea:	f8d8 8000 	ldr.w	r8, [r8]
    9cee:	4598      	cmp	r8, r3
    9cf0:	d16b      	bne.n	9dca <_malloc_r+0x55e>
    9cf2:	f01c 0f03 	tst.w	ip, #3
    9cf6:	f1a8 0308 	sub.w	r3, r8, #8
    9cfa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    9cfe:	d1f4      	bne.n	9cea <_malloc_r+0x47e>
    9d00:	6873      	ldr	r3, [r6, #4]
    9d02:	ea23 0300 	bic.w	r3, r3, r0
    9d06:	6073      	str	r3, [r6, #4]
    9d08:	0040      	lsls	r0, r0, #1
    9d0a:	4298      	cmp	r0, r3
    9d0c:	f63f ae96 	bhi.w	9a3c <_malloc_r+0x1d0>
    9d10:	2800      	cmp	r0, #0
    9d12:	f43f ae93 	beq.w	9a3c <_malloc_r+0x1d0>
    9d16:	4203      	tst	r3, r0
    9d18:	46cc      	mov	ip, r9
    9d1a:	f47f ae3f 	bne.w	999c <_malloc_r+0x130>
    9d1e:	0040      	lsls	r0, r0, #1
    9d20:	4203      	tst	r3, r0
    9d22:	f10c 0c04 	add.w	ip, ip, #4
    9d26:	d0fa      	beq.n	9d1e <_malloc_r+0x4b2>
    9d28:	e638      	b.n	999c <_malloc_r+0x130>
    9d2a:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    9d2e:	d816      	bhi.n	9d5e <_malloc_r+0x4f2>
    9d30:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    9d34:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    9d38:	ea4f 014c 	mov.w	r1, ip, lsl #1
    9d3c:	e5d8      	b.n	98f0 <_malloc_r+0x84>
    9d3e:	2301      	movs	r3, #1
    9d40:	f8c8 3004 	str.w	r3, [r8, #4]
    9d44:	4644      	mov	r4, r8
    9d46:	2200      	movs	r2, #0
    9d48:	e727      	b.n	9b9a <_malloc_r+0x32e>
    9d4a:	1092      	asrs	r2, r2, #2
    9d4c:	2001      	movs	r0, #1
    9d4e:	4090      	lsls	r0, r2
    9d50:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9d54:	4619      	mov	r1, r3
    9d56:	4302      	orrs	r2, r0
    9d58:	f8c8 2004 	str.w	r2, [r8, #4]
    9d5c:	e77f      	b.n	9c5e <_malloc_r+0x3f2>
    9d5e:	f240 5354 	movw	r3, #1364	; 0x554
    9d62:	459c      	cmp	ip, r3
    9d64:	bf9d      	ittte	ls
    9d66:	ea4f 4c95 	movls.w	ip, r5, lsr #18
    9d6a:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
    9d6e:	ea4f 014c 	movls.w	r1, ip, lsl #1
    9d72:	21fc      	movhi	r1, #252	; 0xfc
    9d74:	bf88      	it	hi
    9d76:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
    9d7a:	e5b9      	b.n	98f0 <_malloc_r+0x84>
    9d7c:	f3c2 010b 	ubfx	r1, r2, #0, #12
    9d80:	2900      	cmp	r1, #0
    9d82:	f47f ae9c 	bne.w	9abe <_malloc_r+0x252>
    9d86:	eb0c 0109 	add.w	r1, ip, r9
    9d8a:	68b2      	ldr	r2, [r6, #8]
    9d8c:	f041 0101 	orr.w	r1, r1, #1
    9d90:	6051      	str	r1, [r2, #4]
    9d92:	e6ee      	b.n	9b72 <_malloc_r+0x306>
    9d94:	f104 0108 	add.w	r1, r4, #8
    9d98:	4638      	mov	r0, r7
    9d9a:	9200      	str	r2, [sp, #0]
    9d9c:	f000 f95c 	bl	a058 <_free_r>
    9da0:	9a00      	ldr	r2, [sp, #0]
    9da2:	6813      	ldr	r3, [r2, #0]
    9da4:	e6e5      	b.n	9b72 <_malloc_r+0x306>
    9da6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9daa:	d803      	bhi.n	9db4 <_malloc_r+0x548>
    9dac:	0bca      	lsrs	r2, r1, #15
    9dae:	3277      	adds	r2, #119	; 0x77
    9db0:	0050      	lsls	r0, r2, #1
    9db2:	e741      	b.n	9c38 <_malloc_r+0x3cc>
    9db4:	f240 5254 	movw	r2, #1364	; 0x554
    9db8:	4293      	cmp	r3, r2
    9dba:	bf9d      	ittte	ls
    9dbc:	0c8a      	lsrls	r2, r1, #18
    9dbe:	327c      	addls	r2, #124	; 0x7c
    9dc0:	0050      	lslls	r0, r2, #1
    9dc2:	20fc      	movhi	r0, #252	; 0xfc
    9dc4:	bf88      	it	hi
    9dc6:	227e      	movhi	r2, #126	; 0x7e
    9dc8:	e736      	b.n	9c38 <_malloc_r+0x3cc>
    9dca:	6873      	ldr	r3, [r6, #4]
    9dcc:	e79c      	b.n	9d08 <_malloc_r+0x49c>
    9dce:	bf00      	nop

00009dd0 <memcmp>:
    9dd0:	2a03      	cmp	r2, #3
    9dd2:	b470      	push	{r4, r5, r6}
    9dd4:	d914      	bls.n	9e00 <memcmp+0x30>
    9dd6:	ea40 0301 	orr.w	r3, r0, r1
    9dda:	079b      	lsls	r3, r3, #30
    9ddc:	d111      	bne.n	9e02 <memcmp+0x32>
    9dde:	460c      	mov	r4, r1
    9de0:	4603      	mov	r3, r0
    9de2:	6825      	ldr	r5, [r4, #0]
    9de4:	681e      	ldr	r6, [r3, #0]
    9de6:	4621      	mov	r1, r4
    9de8:	42ae      	cmp	r6, r5
    9dea:	4618      	mov	r0, r3
    9dec:	f104 0404 	add.w	r4, r4, #4
    9df0:	f103 0304 	add.w	r3, r3, #4
    9df4:	d104      	bne.n	9e00 <memcmp+0x30>
    9df6:	3a04      	subs	r2, #4
    9df8:	2a03      	cmp	r2, #3
    9dfa:	4618      	mov	r0, r3
    9dfc:	4621      	mov	r1, r4
    9dfe:	d8f0      	bhi.n	9de2 <memcmp+0x12>
    9e00:	b1c2      	cbz	r2, 9e34 <memcmp+0x64>
    9e02:	7805      	ldrb	r5, [r0, #0]
    9e04:	780c      	ldrb	r4, [r1, #0]
    9e06:	42a5      	cmp	r5, r4
    9e08:	bf04      	itt	eq
    9e0a:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
    9e0e:	2300      	moveq	r3, #0
    9e10:	d006      	beq.n	9e20 <memcmp+0x50>
    9e12:	e00c      	b.n	9e2e <memcmp+0x5e>
    9e14:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    9e18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    9e1c:	42a5      	cmp	r5, r4
    9e1e:	d106      	bne.n	9e2e <memcmp+0x5e>
    9e20:	4293      	cmp	r3, r2
    9e22:	f103 0301 	add.w	r3, r3, #1
    9e26:	d1f5      	bne.n	9e14 <memcmp+0x44>
    9e28:	2000      	movs	r0, #0
    9e2a:	bc70      	pop	{r4, r5, r6}
    9e2c:	4770      	bx	lr
    9e2e:	1b28      	subs	r0, r5, r4
    9e30:	bc70      	pop	{r4, r5, r6}
    9e32:	4770      	bx	lr
    9e34:	4610      	mov	r0, r2
    9e36:	e7f8      	b.n	9e2a <memcmp+0x5a>

00009e38 <memcpy>:
    9e38:	4684      	mov	ip, r0
    9e3a:	ea41 0300 	orr.w	r3, r1, r0
    9e3e:	f013 0303 	ands.w	r3, r3, #3
    9e42:	d149      	bne.n	9ed8 <memcpy+0xa0>
    9e44:	3a40      	subs	r2, #64	; 0x40
    9e46:	d323      	bcc.n	9e90 <memcpy+0x58>
    9e48:	680b      	ldr	r3, [r1, #0]
    9e4a:	6003      	str	r3, [r0, #0]
    9e4c:	684b      	ldr	r3, [r1, #4]
    9e4e:	6043      	str	r3, [r0, #4]
    9e50:	688b      	ldr	r3, [r1, #8]
    9e52:	6083      	str	r3, [r0, #8]
    9e54:	68cb      	ldr	r3, [r1, #12]
    9e56:	60c3      	str	r3, [r0, #12]
    9e58:	690b      	ldr	r3, [r1, #16]
    9e5a:	6103      	str	r3, [r0, #16]
    9e5c:	694b      	ldr	r3, [r1, #20]
    9e5e:	6143      	str	r3, [r0, #20]
    9e60:	698b      	ldr	r3, [r1, #24]
    9e62:	6183      	str	r3, [r0, #24]
    9e64:	69cb      	ldr	r3, [r1, #28]
    9e66:	61c3      	str	r3, [r0, #28]
    9e68:	6a0b      	ldr	r3, [r1, #32]
    9e6a:	6203      	str	r3, [r0, #32]
    9e6c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    9e6e:	6243      	str	r3, [r0, #36]	; 0x24
    9e70:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    9e72:	6283      	str	r3, [r0, #40]	; 0x28
    9e74:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    9e76:	62c3      	str	r3, [r0, #44]	; 0x2c
    9e78:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    9e7a:	6303      	str	r3, [r0, #48]	; 0x30
    9e7c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9e7e:	6343      	str	r3, [r0, #52]	; 0x34
    9e80:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    9e82:	6383      	str	r3, [r0, #56]	; 0x38
    9e84:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    9e86:	63c3      	str	r3, [r0, #60]	; 0x3c
    9e88:	3040      	adds	r0, #64	; 0x40
    9e8a:	3140      	adds	r1, #64	; 0x40
    9e8c:	3a40      	subs	r2, #64	; 0x40
    9e8e:	d2db      	bcs.n	9e48 <memcpy+0x10>
    9e90:	3230      	adds	r2, #48	; 0x30
    9e92:	d30b      	bcc.n	9eac <memcpy+0x74>
    9e94:	680b      	ldr	r3, [r1, #0]
    9e96:	6003      	str	r3, [r0, #0]
    9e98:	684b      	ldr	r3, [r1, #4]
    9e9a:	6043      	str	r3, [r0, #4]
    9e9c:	688b      	ldr	r3, [r1, #8]
    9e9e:	6083      	str	r3, [r0, #8]
    9ea0:	68cb      	ldr	r3, [r1, #12]
    9ea2:	60c3      	str	r3, [r0, #12]
    9ea4:	3010      	adds	r0, #16
    9ea6:	3110      	adds	r1, #16
    9ea8:	3a10      	subs	r2, #16
    9eaa:	d2f3      	bcs.n	9e94 <memcpy+0x5c>
    9eac:	320c      	adds	r2, #12
    9eae:	d305      	bcc.n	9ebc <memcpy+0x84>
    9eb0:	f851 3b04 	ldr.w	r3, [r1], #4
    9eb4:	f840 3b04 	str.w	r3, [r0], #4
    9eb8:	3a04      	subs	r2, #4
    9eba:	d2f9      	bcs.n	9eb0 <memcpy+0x78>
    9ebc:	3204      	adds	r2, #4
    9ebe:	d008      	beq.n	9ed2 <memcpy+0x9a>
    9ec0:	07d2      	lsls	r2, r2, #31
    9ec2:	bf1c      	itt	ne
    9ec4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    9ec8:	f800 3b01 	strbne.w	r3, [r0], #1
    9ecc:	d301      	bcc.n	9ed2 <memcpy+0x9a>
    9ece:	880b      	ldrh	r3, [r1, #0]
    9ed0:	8003      	strh	r3, [r0, #0]
    9ed2:	4660      	mov	r0, ip
    9ed4:	4770      	bx	lr
    9ed6:	bf00      	nop
    9ed8:	2a08      	cmp	r2, #8
    9eda:	d313      	bcc.n	9f04 <memcpy+0xcc>
    9edc:	078b      	lsls	r3, r1, #30
    9ede:	d0b1      	beq.n	9e44 <memcpy+0xc>
    9ee0:	f010 0303 	ands.w	r3, r0, #3
    9ee4:	d0ae      	beq.n	9e44 <memcpy+0xc>
    9ee6:	f1c3 0304 	rsb	r3, r3, #4
    9eea:	1ad2      	subs	r2, r2, r3
    9eec:	07db      	lsls	r3, r3, #31
    9eee:	bf1c      	itt	ne
    9ef0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    9ef4:	f800 3b01 	strbne.w	r3, [r0], #1
    9ef8:	d3a4      	bcc.n	9e44 <memcpy+0xc>
    9efa:	f831 3b02 	ldrh.w	r3, [r1], #2
    9efe:	f820 3b02 	strh.w	r3, [r0], #2
    9f02:	e79f      	b.n	9e44 <memcpy+0xc>
    9f04:	3a04      	subs	r2, #4
    9f06:	d3d9      	bcc.n	9ebc <memcpy+0x84>
    9f08:	3a01      	subs	r2, #1
    9f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
    9f0e:	f800 3b01 	strb.w	r3, [r0], #1
    9f12:	d2f9      	bcs.n	9f08 <memcpy+0xd0>
    9f14:	780b      	ldrb	r3, [r1, #0]
    9f16:	7003      	strb	r3, [r0, #0]
    9f18:	784b      	ldrb	r3, [r1, #1]
    9f1a:	7043      	strb	r3, [r0, #1]
    9f1c:	788b      	ldrb	r3, [r1, #2]
    9f1e:	7083      	strb	r3, [r0, #2]
    9f20:	4660      	mov	r0, ip
    9f22:	4770      	bx	lr

00009f24 <__malloc_lock>:
    9f24:	4770      	bx	lr
    9f26:	bf00      	nop

00009f28 <__malloc_unlock>:
    9f28:	4770      	bx	lr
    9f2a:	bf00      	nop

00009f2c <_sbrk_r>:
    9f2c:	b538      	push	{r3, r4, r5, lr}
    9f2e:	f243 74bc 	movw	r4, #14268	; 0x37bc
    9f32:	2300      	movs	r3, #0
    9f34:	4605      	mov	r5, r0
    9f36:	f2c1 0400 	movt	r4, #4096	; 0x1000
    9f3a:	4608      	mov	r0, r1
    9f3c:	6023      	str	r3, [r4, #0]
    9f3e:	f000 f957 	bl	a1f0 <_sbrk>
    9f42:	1c43      	adds	r3, r0, #1
    9f44:	d000      	beq.n	9f48 <_sbrk_r+0x1c>
    9f46:	bd38      	pop	{r3, r4, r5, pc}
    9f48:	6823      	ldr	r3, [r4, #0]
    9f4a:	2b00      	cmp	r3, #0
    9f4c:	d0fb      	beq.n	9f46 <_sbrk_r+0x1a>
    9f4e:	602b      	str	r3, [r5, #0]
    9f50:	bd38      	pop	{r3, r4, r5, pc}
    9f52:	bf00      	nop

00009f54 <strlen>:
    9f54:	f020 0103 	bic.w	r1, r0, #3
    9f58:	f010 0003 	ands.w	r0, r0, #3
    9f5c:	f1c0 0000 	rsb	r0, r0, #0
    9f60:	f851 3b04 	ldr.w	r3, [r1], #4
    9f64:	f100 0c04 	add.w	ip, r0, #4
    9f68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    9f6c:	f06f 0200 	mvn.w	r2, #0
    9f70:	bf1c      	itt	ne
    9f72:	fa22 f20c 	lsrne.w	r2, r2, ip
    9f76:	4313      	orrne	r3, r2
    9f78:	f04f 0c01 	mov.w	ip, #1
    9f7c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    9f80:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    9f84:	eba3 020c 	sub.w	r2, r3, ip
    9f88:	ea22 0203 	bic.w	r2, r2, r3
    9f8c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    9f90:	bf04      	itt	eq
    9f92:	f851 3b04 	ldreq.w	r3, [r1], #4
    9f96:	3004      	addeq	r0, #4
    9f98:	d0f4      	beq.n	9f84 <strlen+0x30>
    9f9a:	f013 0fff 	tst.w	r3, #255	; 0xff
    9f9e:	bf1f      	itttt	ne
    9fa0:	3001      	addne	r0, #1
    9fa2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    9fa6:	3001      	addne	r0, #1
    9fa8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    9fac:	bf18      	it	ne
    9fae:	3001      	addne	r0, #1
    9fb0:	4770      	bx	lr
    9fb2:	bf00      	nop

00009fb4 <_malloc_trim_r>:
    9fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fb6:	f640 2404 	movw	r4, #2564	; 0xa04
    9fba:	f2c1 0400 	movt	r4, #4096	; 0x1000
    9fbe:	460f      	mov	r7, r1
    9fc0:	4605      	mov	r5, r0
    9fc2:	f7ff ffaf 	bl	9f24 <__malloc_lock>
    9fc6:	68a3      	ldr	r3, [r4, #8]
    9fc8:	685e      	ldr	r6, [r3, #4]
    9fca:	f026 0603 	bic.w	r6, r6, #3
    9fce:	1bf7      	subs	r7, r6, r7
    9fd0:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
    9fd4:	0b3f      	lsrs	r7, r7, #12
    9fd6:	3f01      	subs	r7, #1
    9fd8:	033f      	lsls	r7, r7, #12
    9fda:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    9fde:	db07      	blt.n	9ff0 <_malloc_trim_r+0x3c>
    9fe0:	4628      	mov	r0, r5
    9fe2:	2100      	movs	r1, #0
    9fe4:	f7ff ffa2 	bl	9f2c <_sbrk_r>
    9fe8:	68a3      	ldr	r3, [r4, #8]
    9fea:	4433      	add	r3, r6
    9fec:	4298      	cmp	r0, r3
    9fee:	d004      	beq.n	9ffa <_malloc_trim_r+0x46>
    9ff0:	4628      	mov	r0, r5
    9ff2:	f7ff ff99 	bl	9f28 <__malloc_unlock>
    9ff6:	2000      	movs	r0, #0
    9ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ffa:	4628      	mov	r0, r5
    9ffc:	4279      	negs	r1, r7
    9ffe:	f7ff ff95 	bl	9f2c <_sbrk_r>
    a002:	3001      	adds	r0, #1
    a004:	d010      	beq.n	a028 <_malloc_trim_r+0x74>
    a006:	f640 73d0 	movw	r3, #4048	; 0xfd0
    a00a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a00e:	681a      	ldr	r2, [r3, #0]
    a010:	68a1      	ldr	r1, [r4, #8]
    a012:	1bf6      	subs	r6, r6, r7
    a014:	f046 0601 	orr.w	r6, r6, #1
    a018:	4628      	mov	r0, r5
    a01a:	1bd7      	subs	r7, r2, r7
    a01c:	604e      	str	r6, [r1, #4]
    a01e:	601f      	str	r7, [r3, #0]
    a020:	f7ff ff82 	bl	9f28 <__malloc_unlock>
    a024:	2001      	movs	r0, #1
    a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a028:	4628      	mov	r0, r5
    a02a:	2100      	movs	r1, #0
    a02c:	f7ff ff7e 	bl	9f2c <_sbrk_r>
    a030:	68a3      	ldr	r3, [r4, #8]
    a032:	1ac2      	subs	r2, r0, r3
    a034:	2a0f      	cmp	r2, #15
    a036:	dddb      	ble.n	9ff0 <_malloc_trim_r+0x3c>
    a038:	f640 6110 	movw	r1, #3600	; 0xe10
    a03c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    a040:	680c      	ldr	r4, [r1, #0]
    a042:	f640 71d0 	movw	r1, #4048	; 0xfd0
    a046:	f042 0201 	orr.w	r2, r2, #1
    a04a:	1b00      	subs	r0, r0, r4
    a04c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    a050:	605a      	str	r2, [r3, #4]
    a052:	6008      	str	r0, [r1, #0]
    a054:	e7cc      	b.n	9ff0 <_malloc_trim_r+0x3c>
    a056:	bf00      	nop

0000a058 <_free_r>:
    a058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a05c:	460e      	mov	r6, r1
    a05e:	4681      	mov	r9, r0
    a060:	2900      	cmp	r1, #0
    a062:	d060      	beq.n	a126 <_free_r+0xce>
    a064:	f7ff ff5e 	bl	9f24 <__malloc_lock>
    a068:	f856 1c04 	ldr.w	r1, [r6, #-4]
    a06c:	f1a6 0408 	sub.w	r4, r6, #8
    a070:	f021 0301 	bic.w	r3, r1, #1
    a074:	18e2      	adds	r2, r4, r3
    a076:	6857      	ldr	r7, [r2, #4]
    a078:	f640 2504 	movw	r5, #2564	; 0xa04
    a07c:	f2c1 0500 	movt	r5, #4096	; 0x1000
    a080:	f027 0003 	bic.w	r0, r7, #3
    a084:	68af      	ldr	r7, [r5, #8]
    a086:	4297      	cmp	r7, r2
    a088:	d062      	beq.n	a150 <_free_r+0xf8>
    a08a:	f011 0c01 	ands.w	ip, r1, #1
    a08e:	6050      	str	r0, [r2, #4]
    a090:	bf18      	it	ne
    a092:	2100      	movne	r1, #0
    a094:	d111      	bne.n	a0ba <_free_r+0x62>
    a096:	f856 1c08 	ldr.w	r1, [r6, #-8]
    a09a:	f105 0808 	add.w	r8, r5, #8
    a09e:	1a64      	subs	r4, r4, r1
    a0a0:	68a6      	ldr	r6, [r4, #8]
    a0a2:	440b      	add	r3, r1
    a0a4:	4546      	cmp	r6, r8
    a0a6:	bf1d      	ittte	ne
    a0a8:	f8d4 800c 	ldrne.w	r8, [r4, #12]
    a0ac:	4661      	movne	r1, ip
    a0ae:	f8c6 800c 	strne.w	r8, [r6, #12]
    a0b2:	2101      	moveq	r1, #1
    a0b4:	bf18      	it	ne
    a0b6:	f8c8 6008 	strne.w	r6, [r8, #8]
    a0ba:	1816      	adds	r6, r2, r0
    a0bc:	6876      	ldr	r6, [r6, #4]
    a0be:	07f6      	lsls	r6, r6, #31
    a0c0:	d408      	bmi.n	a0d4 <_free_r+0x7c>
    a0c2:	4403      	add	r3, r0
    a0c4:	6890      	ldr	r0, [r2, #8]
    a0c6:	b911      	cbnz	r1, a0ce <_free_r+0x76>
    a0c8:	4e48      	ldr	r6, [pc, #288]	; (a1ec <_free_r+0x194>)
    a0ca:	42b0      	cmp	r0, r6
    a0cc:	d05f      	beq.n	a18e <_free_r+0x136>
    a0ce:	68d2      	ldr	r2, [r2, #12]
    a0d0:	60c2      	str	r2, [r0, #12]
    a0d2:	6090      	str	r0, [r2, #8]
    a0d4:	f043 0201 	orr.w	r2, r3, #1
    a0d8:	6062      	str	r2, [r4, #4]
    a0da:	50e3      	str	r3, [r4, r3]
    a0dc:	b9f1      	cbnz	r1, a11c <_free_r+0xc4>
    a0de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a0e2:	d322      	bcc.n	a12a <_free_r+0xd2>
    a0e4:	0a5a      	lsrs	r2, r3, #9
    a0e6:	2a04      	cmp	r2, #4
    a0e8:	d85a      	bhi.n	a1a0 <_free_r+0x148>
    a0ea:	0998      	lsrs	r0, r3, #6
    a0ec:	3038      	adds	r0, #56	; 0x38
    a0ee:	0041      	lsls	r1, r0, #1
    a0f0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    a0f4:	68aa      	ldr	r2, [r5, #8]
    a0f6:	f640 2104 	movw	r1, #2564	; 0xa04
    a0fa:	42aa      	cmp	r2, r5
    a0fc:	f2c1 0100 	movt	r1, #4096	; 0x1000
    a100:	d05a      	beq.n	a1b8 <_free_r+0x160>
    a102:	6851      	ldr	r1, [r2, #4]
    a104:	f021 0103 	bic.w	r1, r1, #3
    a108:	428b      	cmp	r3, r1
    a10a:	d202      	bcs.n	a112 <_free_r+0xba>
    a10c:	6892      	ldr	r2, [r2, #8]
    a10e:	4295      	cmp	r5, r2
    a110:	d1f7      	bne.n	a102 <_free_r+0xaa>
    a112:	68d3      	ldr	r3, [r2, #12]
    a114:	60e3      	str	r3, [r4, #12]
    a116:	60a2      	str	r2, [r4, #8]
    a118:	609c      	str	r4, [r3, #8]
    a11a:	60d4      	str	r4, [r2, #12]
    a11c:	4648      	mov	r0, r9
    a11e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a122:	f7ff bf01 	b.w	9f28 <__malloc_unlock>
    a126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a12a:	08db      	lsrs	r3, r3, #3
    a12c:	109a      	asrs	r2, r3, #2
    a12e:	2001      	movs	r0, #1
    a130:	4090      	lsls	r0, r2
    a132:	6869      	ldr	r1, [r5, #4]
    a134:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    a138:	689a      	ldr	r2, [r3, #8]
    a13a:	4301      	orrs	r1, r0
    a13c:	6069      	str	r1, [r5, #4]
    a13e:	60a2      	str	r2, [r4, #8]
    a140:	60e3      	str	r3, [r4, #12]
    a142:	4648      	mov	r0, r9
    a144:	609c      	str	r4, [r3, #8]
    a146:	60d4      	str	r4, [r2, #12]
    a148:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a14c:	f7ff beec 	b.w	9f28 <__malloc_unlock>
    a150:	07cf      	lsls	r7, r1, #31
    a152:	4418      	add	r0, r3
    a154:	d407      	bmi.n	a166 <_free_r+0x10e>
    a156:	f856 1c08 	ldr.w	r1, [r6, #-8]
    a15a:	1a64      	subs	r4, r4, r1
    a15c:	68e3      	ldr	r3, [r4, #12]
    a15e:	68a2      	ldr	r2, [r4, #8]
    a160:	4408      	add	r0, r1
    a162:	60d3      	str	r3, [r2, #12]
    a164:	609a      	str	r2, [r3, #8]
    a166:	f640 620c 	movw	r2, #3596	; 0xe0c
    a16a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    a16e:	6813      	ldr	r3, [r2, #0]
    a170:	f040 0201 	orr.w	r2, r0, #1
    a174:	4298      	cmp	r0, r3
    a176:	6062      	str	r2, [r4, #4]
    a178:	60ac      	str	r4, [r5, #8]
    a17a:	d3cf      	bcc.n	a11c <_free_r+0xc4>
    a17c:	f640 73cc 	movw	r3, #4044	; 0xfcc
    a180:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a184:	6819      	ldr	r1, [r3, #0]
    a186:	4648      	mov	r0, r9
    a188:	f7ff ff14 	bl	9fb4 <_malloc_trim_r>
    a18c:	e7c6      	b.n	a11c <_free_r+0xc4>
    a18e:	f043 0201 	orr.w	r2, r3, #1
    a192:	616c      	str	r4, [r5, #20]
    a194:	612c      	str	r4, [r5, #16]
    a196:	60e0      	str	r0, [r4, #12]
    a198:	60a0      	str	r0, [r4, #8]
    a19a:	6062      	str	r2, [r4, #4]
    a19c:	50e3      	str	r3, [r4, r3]
    a19e:	e7bd      	b.n	a11c <_free_r+0xc4>
    a1a0:	2a14      	cmp	r2, #20
    a1a2:	bf9c      	itt	ls
    a1a4:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
    a1a8:	0041      	lslls	r1, r0, #1
    a1aa:	d9a1      	bls.n	a0f0 <_free_r+0x98>
    a1ac:	2a54      	cmp	r2, #84	; 0x54
    a1ae:	d80b      	bhi.n	a1c8 <_free_r+0x170>
    a1b0:	0b18      	lsrs	r0, r3, #12
    a1b2:	306e      	adds	r0, #110	; 0x6e
    a1b4:	0041      	lsls	r1, r0, #1
    a1b6:	e79b      	b.n	a0f0 <_free_r+0x98>
    a1b8:	1080      	asrs	r0, r0, #2
    a1ba:	2501      	movs	r5, #1
    a1bc:	4085      	lsls	r5, r0
    a1be:	6848      	ldr	r0, [r1, #4]
    a1c0:	4613      	mov	r3, r2
    a1c2:	4328      	orrs	r0, r5
    a1c4:	6048      	str	r0, [r1, #4]
    a1c6:	e7a5      	b.n	a114 <_free_r+0xbc>
    a1c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    a1cc:	d803      	bhi.n	a1d6 <_free_r+0x17e>
    a1ce:	0bd8      	lsrs	r0, r3, #15
    a1d0:	3077      	adds	r0, #119	; 0x77
    a1d2:	0041      	lsls	r1, r0, #1
    a1d4:	e78c      	b.n	a0f0 <_free_r+0x98>
    a1d6:	f240 5154 	movw	r1, #1364	; 0x554
    a1da:	428a      	cmp	r2, r1
    a1dc:	bf9d      	ittte	ls
    a1de:	0c98      	lsrls	r0, r3, #18
    a1e0:	307c      	addls	r0, #124	; 0x7c
    a1e2:	0041      	lslls	r1, r0, #1
    a1e4:	21fc      	movhi	r1, #252	; 0xfc
    a1e6:	bf88      	it	hi
    a1e8:	207e      	movhi	r0, #126	; 0x7e
    a1ea:	e781      	b.n	a0f0 <_free_r+0x98>
    a1ec:	10000a0c 	.word	0x10000a0c

0000a1f0 <_sbrk>:
    a1f0:	f640 73f8 	movw	r3, #4088	; 0xff8
    a1f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1f8:	6819      	ldr	r1, [r3, #0]
    a1fa:	f243 72c0 	movw	r2, #14272	; 0x37c0
    a1fe:	f2c1 0200 	movt	r2, #4096	; 0x1000
    a202:	2900      	cmp	r1, #0
    a204:	bf18      	it	ne
    a206:	460a      	movne	r2, r1
    a208:	4410      	add	r0, r2
    a20a:	6018      	str	r0, [r3, #0]
    a20c:	4610      	mov	r0, r2
    a20e:	4770      	bx	lr
    a210:	00000043 	.word	0x00000043

0000a214 <_global_impure_ptr>:
    a214:	10000020                                 ...

0000a218 <whitening_index>:
    a218:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    a228:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    a238:	5a541b28 662f703f                       (.TZ?p/f

0000a240 <whitening>:
    a240:	01010101 01000100 00000100 00010000     ................
    a250:	01000101 00010101 01010100 00010000     ................
    a260:	01010001 01010000 00000000 00010100     ................
    a270:	01000101 01010100 00000100 00010100     ................
    a280:	00000100 00000100 00000000 01000001     ................
    a290:	01010000 00000100 01010101 01010100     ................
    a2a0:	00000000 01010101 00010101 01010000     ................
    a2b0:	01010001 01000000 00000100 75010001              ...............

0000a2bf <compile_info>:
    a2bf:	72656275 746f6f74 30322068 302d3731     ubertooth 2017-0
    a2cf:	32522d33 776d2820 6d406c6e 2d6c6e77     3-R2 (mwnl@mwnl-
    a2df:	6f6e656c 20296f76 38313032 3830202e     lenovo) 2018. 08
    a2ef:	3332202e eb28202e 2029a9aa 353a3031     . 23. (...) 10:5
    a2ff:	37323a32 54534b20 bcb24000                       2:27 KST.

0000a308 <whitening_word>:
    a308:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    a318:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    a328:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    a338:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    a348:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    a358:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    a368:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    a378:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    a388:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    a398:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    a3a8:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    a3b8:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    a3c8:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    a3d8:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    a3e8:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    a3f8:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    a408:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    a418:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    a428:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    a438:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    a448:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    a458:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    a468:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    a478:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    a488:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    a498:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    a4a8:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    a4b8:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    a4c8:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    a4d8:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    a4e8:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    a4f8:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    a508:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    a518:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    a528:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    a538:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    a548:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    a558:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    a568:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    a578:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    a588:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    a598:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    a5a8:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    a5b8:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    a5c8:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    a5d8:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    a5e8:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    a5f8:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    a608:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    a618:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    a628:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    a638:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    a648:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    a658:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    a668:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    a678:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    a688:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    a698:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    a6a8:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    a6b8:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    a6c8:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    a6d8:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    a6e8:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    a6f8:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    a708:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    a718:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    a728:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    a738:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    a748:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    a758:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    a768:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    a778:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    a788:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    a798:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    a7a8:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    a7b8:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    a7c8:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    a7d8:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    a7e8:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    a7f8:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    a808:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    a818:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    a828:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    a838:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    a848:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    a858:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    a868:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    a878:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    a888:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    a898:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    a8a8:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    a8b8:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    a8c8:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    a8d8:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    a8e8:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    a8f8:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    a908:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    a918:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    a928:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    a938:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    a948:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    a958:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    a968:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    a978:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    a988:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    a998:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    a9a8:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    a9b8:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    a9c8:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    a9d8:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    a9e8:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    a9f8:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    aa08:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    aa18:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    aa28:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    aa38:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    aa48:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    aa58:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    aa68:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    aa78:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000aa88 <hop_interval_lut>:
    aa88:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    aa98:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    aaa8:	120c0916 00000024 00000001 00000001     ....$...........
    aab8:	00000001 00000001 097a0962 1d4209b0     ........b.z...B.
    aac8:	ffffffff 0303ffff 1612feaa 0010feaa     ................
    aad8:	096caa02 099e0985 37313032 2d33302d     ..l.....2017-03-
    aae8:	00003252                                         R2.

0000aaeb <index1.3911>:
    aaeb:	03010200 03000100 01020001 03010100              ..............

0000aaf9 <index2.3912>:
    aaf9:	04020301 04020304 03040304 387b0203     ..............{8
    ab09:	37346361 2d383861 36326363 6161342d     ac47a88-cc26-4aa
    ab19:	38382d39 342d6237 38616332 37306663     9-887b-42ca8cf07
    ab29:	7d333661 68000000                                a63}...

0000ab30 <channels>:
    ab30:	09720968 09a50977                       h.r.w...

0000ab38 <follow_handler.4002>:
    ab38:	0000827d 0000829d 000085a1 000083f9     }...............
    ab48:	00008279 00008279 00008279              y...y...y...

0000ab54 <continuous_rx_handler.4003>:
    ab54:	00008295 0000829d 000084c1 00008279     ............y...
    ab64:	00008279 00008279                       y...y...

0000ab6c <jam_handler.4004>:
    ab6c:	0000827d 0000829d 0000853d 00008441     }.......=...A...
    ab7c:	00008355 00008461                       U...a...

0000ab84 <iap_entry>:
    ab84:	1fff1ff1                                ....

0000ab88 <abExtendedOsFeatureDescriptor>:
    ab88:	00000028 00040100 00000001 00000000     (...............
    ab98:	49570100 4253554e 00000000 00000000     ..WINUSB........
    aba8:	00000000 00000000                       ........

0000abb0 <_init>:
    abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abb2:	bf00      	nop
    abb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    abb6:	bc08      	pop	{r3}
    abb8:	469e      	mov	lr, r3
    abba:	4770      	bx	lr

0000abbc <__init_array_start>:
    abbc:	00004371 	.word	0x00004371

0000abc0 <__frame_dummy_init_array_entry>:
    abc0:	00004155                                UA..

0000abc4 <_fini>:
    abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abc6:	bf00      	nop
    abc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    abca:	bc08      	pop	{r3}
    abcc:	469e      	mov	lr, r3
    abce:	4770      	bx	lr

0000abd0 <__fini_array_start>:
    abd0:	00004125 	.word	0x00004125

0000abd4 <__fini_array_end>:
    abd4:	00000000 	.word	0x00000000

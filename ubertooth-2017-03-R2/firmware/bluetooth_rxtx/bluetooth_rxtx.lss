
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006158  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000df4  10000020  0000a158  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002998  10000e18  0000af4c  00010e18  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010e14  2**0
                  CONTENTS, READONLY
  5 .comment      0000001f  00000000  00000000  00010e3d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f97a  00000000  00000000  00010e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c6a  00000000  00000000  000207d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006933  00000000  00000000  00024440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000960  00000000  00000000  0002ad78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000988  00000000  00000000  0002b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003eeb  00000000  00000000  0002c060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003365  00000000  00000000  0002ff4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001610  00000000  00000000  000332b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 41 80 00 00 95 80 00 00 95 80 00 00     .?..A...........
    4010:	95 80 00 00 95 80 00 00 95 80 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 95 80 00 00     ................
    4030:	95 80 00 00 00 00 00 00 95 80 00 00 95 80 00 00     ................
    4040:	95 80 00 00 65 50 00 00 95 80 00 00 95 80 00 00     ....eP..........
    4050:	95 80 00 00 95 80 00 00 95 80 00 00 95 80 00 00     ................
    4060:	95 80 00 00 95 80 00 00 95 80 00 00 95 80 00 00     ................
    4070:	95 80 00 00 95 80 00 00 95 80 00 00 95 80 00 00     ................
    4080:	95 80 00 00 95 80 00 00 95 80 00 00 95 80 00 00     ................
    4090:	95 80 00 00 a5 51 00 00 95 80 00 00 95 80 00 00     .....Q..........
    40a0:	3d 80 00 00 95 80 00 00 d9 51 00 00 95 80 00 00     =........Q......
    40b0:	95 80 00 00 95 80 00 00 95 80 00 00 95 80 00 00     ................
    40c0:	95 80 00 00 95 80 00 00 95 80 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	b508      	push	{r3, lr}
    40ce:	f640 6014 	movw	r0, #3604	; 0xe14
    40d2:	4b07      	ldr	r3, [pc, #28]	; (40f0 <deregister_tm_clones+0x24>)
    40d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    40d8:	1a1b      	subs	r3, r3, r0
    40da:	2b06      	cmp	r3, #6
    40dc:	d800      	bhi.n	40e0 <deregister_tm_clones+0x14>
    40de:	bd08      	pop	{r3, pc}
    40e0:	f240 0300 	movw	r3, #0
    40e4:	f2c0 0300 	movt	r3, #0
    40e8:	2b00      	cmp	r3, #0
    40ea:	d0f8      	beq.n	40de <deregister_tm_clones+0x12>
    40ec:	4798      	blx	r3
    40ee:	e7f6      	b.n	40de <deregister_tm_clones+0x12>
    40f0:	10000e17 	.word	0x10000e17

000040f4 <register_tm_clones>:
    40f4:	b508      	push	{r3, lr}
    40f6:	f640 6014 	movw	r0, #3604	; 0xe14
    40fa:	f640 6314 	movw	r3, #3604	; 0xe14
    40fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4102:	f2c1 0000 	movt	r0, #4096	; 0x1000
    4106:	1a1b      	subs	r3, r3, r0
    4108:	109b      	asrs	r3, r3, #2
    410a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    410e:	1059      	asrs	r1, r3, #1
    4110:	d100      	bne.n	4114 <register_tm_clones+0x20>
    4112:	bd08      	pop	{r3, pc}
    4114:	f240 0200 	movw	r2, #0
    4118:	f2c0 0200 	movt	r2, #0
    411c:	2a00      	cmp	r2, #0
    411e:	d0f8      	beq.n	4112 <register_tm_clones+0x1e>
    4120:	4790      	blx	r2
    4122:	e7f6      	b.n	4112 <register_tm_clones+0x1e>

00004124 <__do_global_dtors_aux>:
    4124:	b510      	push	{r4, lr}
    4126:	f640 6418 	movw	r4, #3608	; 0xe18
    412a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    412e:	7823      	ldrb	r3, [r4, #0]
    4130:	b973      	cbnz	r3, 4150 <__do_global_dtors_aux+0x2c>
    4132:	f7ff ffcb 	bl	40cc <deregister_tm_clones>
    4136:	f240 0300 	movw	r3, #0
    413a:	f2c0 0300 	movt	r3, #0
    413e:	b12b      	cbz	r3, 414c <__do_global_dtors_aux+0x28>
    4140:	f24a 1034 	movw	r0, #41268	; 0xa134
    4144:	f2c0 0000 	movt	r0, #0
    4148:	f3af 8000 	nop.w
    414c:	2301      	movs	r3, #1
    414e:	7023      	strb	r3, [r4, #0]
    4150:	bd10      	pop	{r4, pc}
    4152:	bf00      	nop

00004154 <frame_dummy>:
    4154:	b508      	push	{r3, lr}
    4156:	f240 0300 	movw	r3, #0
    415a:	f2c0 0300 	movt	r3, #0
    415e:	b14b      	cbz	r3, 4174 <frame_dummy+0x20>
    4160:	f24a 1034 	movw	r0, #41268	; 0xa134
    4164:	f640 611c 	movw	r1, #3612	; 0xe1c
    4168:	f2c0 0000 	movt	r0, #0
    416c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4170:	f3af 8000 	nop.w
    4174:	f640 6014 	movw	r0, #3604	; 0xe14
    4178:	f2c1 0000 	movt	r0, #4096	; 0x1000
    417c:	6803      	ldr	r3, [r0, #0]
    417e:	b12b      	cbz	r3, 418c <frame_dummy+0x38>
    4180:	f240 0300 	movw	r3, #0
    4184:	f2c0 0300 	movt	r3, #0
    4188:	b103      	cbz	r3, 418c <frame_dummy+0x38>
    418a:	4798      	blx	r3
    418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4190:	e7b0      	b.n	40f4 <register_tm_clones>
    4192:	bf00      	nop

00004194 <atexit>:
    4194:	4601      	mov	r1, r0
    4196:	2000      	movs	r0, #0
    4198:	4602      	mov	r2, r0
    419a:	4603      	mov	r3, r0
    419c:	f000 b892 	b.w	42c4 <__register_exitproc>

000041a0 <__libc_fini_array>:
    41a0:	b538      	push	{r3, r4, r5, lr}
    41a2:	f24a 1458 	movw	r4, #41304	; 0xa158
    41a6:	f24a 1554 	movw	r5, #41300	; 0xa154
    41aa:	f2c0 0500 	movt	r5, #0
    41ae:	f2c0 0400 	movt	r4, #0
    41b2:	1b64      	subs	r4, r4, r5
    41b4:	10a4      	asrs	r4, r4, #2
    41b6:	bf18      	it	ne
    41b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    41bc:	d005      	beq.n	41ca <__libc_fini_array+0x2a>
    41be:	3c01      	subs	r4, #1
    41c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    41c4:	4798      	blx	r3
    41c6:	2c00      	cmp	r4, #0
    41c8:	d1f9      	bne.n	41be <__libc_fini_array+0x1e>
    41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41ce:	f005 bfbb 	b.w	a148 <_fini>
    41d2:	bf00      	nop

000041d4 <__libc_init_array>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	f24a 1640 	movw	r6, #41280	; 0xa140
    41da:	f24a 1540 	movw	r5, #41280	; 0xa140
    41de:	f2c0 0500 	movt	r5, #0
    41e2:	f2c0 0600 	movt	r6, #0
    41e6:	1b76      	subs	r6, r6, r5
    41e8:	10b6      	asrs	r6, r6, #2
    41ea:	bf1c      	itt	ne
    41ec:	3d04      	subne	r5, #4
    41ee:	2400      	movne	r4, #0
    41f0:	d005      	beq.n	41fe <__libc_init_array+0x2a>
    41f2:	3401      	adds	r4, #1
    41f4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    41f8:	4798      	blx	r3
    41fa:	42a6      	cmp	r6, r4
    41fc:	d1f9      	bne.n	41f2 <__libc_init_array+0x1e>
    41fe:	f24a 1648 	movw	r6, #41288	; 0xa148
    4202:	f24a 1540 	movw	r5, #41280	; 0xa140
    4206:	f2c0 0500 	movt	r5, #0
    420a:	f2c0 0600 	movt	r6, #0
    420e:	1b76      	subs	r6, r6, r5
    4210:	f005 ff90 	bl	a134 <_init>
    4214:	10b6      	asrs	r6, r6, #2
    4216:	bf1c      	itt	ne
    4218:	3d04      	subne	r5, #4
    421a:	2400      	movne	r4, #0
    421c:	d006      	beq.n	422c <__libc_init_array+0x58>
    421e:	3401      	adds	r4, #1
    4220:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4224:	4798      	blx	r3
    4226:	42a6      	cmp	r6, r4
    4228:	d1f9      	bne.n	421e <__libc_init_array+0x4a>
    422a:	bd70      	pop	{r4, r5, r6, pc}
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	bf00      	nop

00004230 <memset>:
    4230:	b4f0      	push	{r4, r5, r6, r7}
    4232:	0784      	lsls	r4, r0, #30
    4234:	d043      	beq.n	42be <memset+0x8e>
    4236:	1e54      	subs	r4, r2, #1
    4238:	2a00      	cmp	r2, #0
    423a:	d03e      	beq.n	42ba <memset+0x8a>
    423c:	b2cd      	uxtb	r5, r1
    423e:	4603      	mov	r3, r0
    4240:	e003      	b.n	424a <memset+0x1a>
    4242:	1e62      	subs	r2, r4, #1
    4244:	2c00      	cmp	r4, #0
    4246:	d038      	beq.n	42ba <memset+0x8a>
    4248:	4614      	mov	r4, r2
    424a:	f803 5b01 	strb.w	r5, [r3], #1
    424e:	079a      	lsls	r2, r3, #30
    4250:	d1f7      	bne.n	4242 <memset+0x12>
    4252:	2c03      	cmp	r4, #3
    4254:	d92a      	bls.n	42ac <memset+0x7c>
    4256:	b2cd      	uxtb	r5, r1
    4258:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    425c:	2c0f      	cmp	r4, #15
    425e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4262:	d915      	bls.n	4290 <memset+0x60>
    4264:	f1a4 0710 	sub.w	r7, r4, #16
    4268:	093f      	lsrs	r7, r7, #4
    426a:	f103 0610 	add.w	r6, r3, #16
    426e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    4272:	461a      	mov	r2, r3
    4274:	6015      	str	r5, [r2, #0]
    4276:	6055      	str	r5, [r2, #4]
    4278:	6095      	str	r5, [r2, #8]
    427a:	60d5      	str	r5, [r2, #12]
    427c:	3210      	adds	r2, #16
    427e:	42b2      	cmp	r2, r6
    4280:	d1f8      	bne.n	4274 <memset+0x44>
    4282:	f004 040f 	and.w	r4, r4, #15
    4286:	3701      	adds	r7, #1
    4288:	2c03      	cmp	r4, #3
    428a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    428e:	d90d      	bls.n	42ac <memset+0x7c>
    4290:	461e      	mov	r6, r3
    4292:	4622      	mov	r2, r4
    4294:	3a04      	subs	r2, #4
    4296:	2a03      	cmp	r2, #3
    4298:	f846 5b04 	str.w	r5, [r6], #4
    429c:	d8fa      	bhi.n	4294 <memset+0x64>
    429e:	1f22      	subs	r2, r4, #4
    42a0:	f022 0203 	bic.w	r2, r2, #3
    42a4:	3204      	adds	r2, #4
    42a6:	4413      	add	r3, r2
    42a8:	f004 0403 	and.w	r4, r4, #3
    42ac:	b12c      	cbz	r4, 42ba <memset+0x8a>
    42ae:	b2c9      	uxtb	r1, r1
    42b0:	441c      	add	r4, r3
    42b2:	f803 1b01 	strb.w	r1, [r3], #1
    42b6:	42a3      	cmp	r3, r4
    42b8:	d1fb      	bne.n	42b2 <memset+0x82>
    42ba:	bcf0      	pop	{r4, r5, r6, r7}
    42bc:	4770      	bx	lr
    42be:	4614      	mov	r4, r2
    42c0:	4603      	mov	r3, r0
    42c2:	e7c6      	b.n	4252 <memset+0x22>

000042c4 <__register_exitproc>:
    42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c6:	f249 7498 	movw	r4, #38808	; 0x9798
    42ca:	f2c0 0400 	movt	r4, #0
    42ce:	6826      	ldr	r6, [r4, #0]
    42d0:	b085      	sub	sp, #20
    42d2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    42d6:	4607      	mov	r7, r0
    42d8:	2c00      	cmp	r4, #0
    42da:	d043      	beq.n	4364 <__register_exitproc+0xa0>
    42dc:	6865      	ldr	r5, [r4, #4]
    42de:	2d1f      	cmp	r5, #31
    42e0:	dd21      	ble.n	4326 <__register_exitproc+0x62>
    42e2:	f648 54e1 	movw	r4, #36321	; 0x8de1
    42e6:	f2c0 0400 	movt	r4, #0
    42ea:	b91c      	cbnz	r4, 42f4 <__register_exitproc+0x30>
    42ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f0:	b005      	add	sp, #20
    42f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42f8:	9103      	str	r1, [sp, #12]
    42fa:	9202      	str	r2, [sp, #8]
    42fc:	9301      	str	r3, [sp, #4]
    42fe:	f004 fd6f 	bl	8de0 <malloc>
    4302:	9903      	ldr	r1, [sp, #12]
    4304:	4604      	mov	r4, r0
    4306:	9a02      	ldr	r2, [sp, #8]
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	2800      	cmp	r0, #0
    430c:	d0ee      	beq.n	42ec <__register_exitproc+0x28>
    430e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    4312:	2000      	movs	r0, #0
    4314:	6025      	str	r5, [r4, #0]
    4316:	6060      	str	r0, [r4, #4]
    4318:	4605      	mov	r5, r0
    431a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    431e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    4322:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    4326:	b93f      	cbnz	r7, 4338 <__register_exitproc+0x74>
    4328:	1c6b      	adds	r3, r5, #1
    432a:	2000      	movs	r0, #0
    432c:	3502      	adds	r5, #2
    432e:	6063      	str	r3, [r4, #4]
    4330:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    4334:	b005      	add	sp, #20
    4336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4338:	2601      	movs	r6, #1
    433a:	40ae      	lsls	r6, r5
    433c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    4340:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    4344:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    4348:	2f02      	cmp	r7, #2
    434a:	ea42 0206 	orr.w	r2, r2, r6
    434e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    4352:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4356:	bf02      	ittt	eq
    4358:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
    435c:	431e      	orreq	r6, r3
    435e:	f8c4 618c 	streq.w	r6, [r4, #396]	; 0x18c
    4362:	e7e1      	b.n	4328 <__register_exitproc+0x64>
    4364:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    4368:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    436c:	e7b6      	b.n	42dc <__register_exitproc+0x18>
    436e:	bf00      	nop

00004370 <register_fini>:
    4370:	f240 0300 	movw	r3, #0
    4374:	f2c0 0300 	movt	r3, #0
    4378:	b12b      	cbz	r3, 4386 <register_fini+0x16>
    437a:	f244 10a1 	movw	r0, #16801	; 0x41a1
    437e:	f2c0 0000 	movt	r0, #0
    4382:	f7ff bf07 	b.w	4194 <atexit>
    4386:	4770      	bx	lr

00004388 <msleep>:
/*
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
    4388:	b510      	push	{r4, lr}
	uint32_t now = (clkn & 0xffffff);
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    438a:	f242 7110 	movw	r1, #10000	; 0x2710
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    438e:	4b08      	ldr	r3, [pc, #32]	; (43b0 <msleep+0x28>)
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    4390:	4348      	muls	r0, r1
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    4392:	681a      	ldr	r2, [r3, #0]
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    4394:	f640 4435 	movw	r4, #3125	; 0xc35
    4398:	fbb0 f1f4 	udiv	r1, r0, r4
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    439c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    43a0:	440a      	add	r2, r1
	// handle clkn overflow
	if (stop_at >= ((uint32_t)1<<28)) {
		stop_at -= ((uint32_t)1<<28);
		while ((clkn & 0xffffff) >= now || (clkn & 0xffffff) < stop_at);
	} else {
		while ((clkn & 0xffffff) < stop_at);
    43a2:	6819      	ldr	r1, [r3, #0]
    43a4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    43a8:	4291      	cmp	r1, r2
    43aa:	d3fa      	bcc.n	43a2 <msleep+0x1a>
	}
}
    43ac:	bd10      	pop	{r4, pc}
    43ae:	bf00      	nop
    43b0:	10001014 	.word	0x10001014

000043b4 <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    43b4:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43b6:	2300      	movs	r3, #0
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;
    43b8:	461a      	mov	r2, r3

	for(size_t i=0; i<8; i++)
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    43ba:	fa40 f103 	asr.w	r1, r0, r3
    43be:	f1c3 0407 	rsb	r4, r3, #7
    43c2:	f001 0101 	and.w	r1, r1, #1
    43c6:	40a1      	lsls	r1, r4

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43c8:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    43ca:	430a      	orrs	r2, r1

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43cc:	2b08      	cmp	r3, #8
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    43ce:	b2d2      	uxtb	r2, r2

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43d0:	d1f3      	bne.n	43ba <reverse8+0x6>
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
	}

	return reversed;
}
    43d2:	4610      	mov	r0, r2
    43d4:	bd10      	pop	{r4, pc}
    43d6:	0000      	movs	r0, r0

000043d8 <cc2400_rx>:
	target.syncword = 0;
}

/* start un-buffered rx */
static void cc2400_rx()
{
    43d8:	b538      	push	{r3, r4, r5, lr}
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    43da:	4b25      	ldr	r3, [pc, #148]	; (4470 <cc2400_rx+0x98>)
    43dc:	4c25      	ldr	r4, [pc, #148]	; (4474 <cc2400_rx+0x9c>)
    43de:	781a      	ldrb	r2, [r3, #0]
    43e0:	b112      	cbz	r2, 43e8 <cc2400_rx+0x10>
    43e2:	781a      	ldrb	r2, [r3, #0]
    43e4:	2a01      	cmp	r2, #1
    43e6:	d128      	bne.n	443a <cc2400_rx+0x62>
		if (modulation == MOD_BT_BASIC_RATE) {
    43e8:	781b      	ldrb	r3, [r3, #0]
    43ea:	b133      	cbz	r3, 43fa <cc2400_rx+0x22>
			mdmctrl = 0x0029; // 160 kHz frequency deviation
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    43ec:	4b20      	ldr	r3, [pc, #128]	; (4470 <cc2400_rx+0x98>)
    43ee:	781d      	ldrb	r5, [r3, #0]
}

/* start un-buffered rx */
static void cc2400_rx()
{
	u16 mdmctrl = 0;
    43f0:	2d01      	cmp	r5, #1
    43f2:	bf0c      	ite	eq
    43f4:	2540      	moveq	r5, #64	; 0x40
    43f6:	2500      	movne	r5, #0
    43f8:	e000      	b.n	43fc <cc2400_rx+0x24>

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
		if (modulation == MOD_BT_BASIC_RATE) {
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    43fa:	2529      	movs	r5, #41	; 0x29
		} else if (modulation == MOD_BT_LOW_ENERGY) {
			mdmctrl = 0x0040; // 250 kHz frequency deviation
		}
		cc2400_set(MANAND,  0x7fff);
    43fc:	200d      	movs	r0, #13
    43fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
    4402:	f003 ff4a 	bl	829a <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    4406:	2012      	movs	r0, #18
    4408:	f642 3122 	movw	r1, #11042	; 0x2b22
    440c:	f003 ff45 	bl	829a <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
    4410:	2014      	movs	r0, #20
    4412:	f241 314b 	movw	r1, #4939	; 0x134b
    4416:	f003 ff40 	bl	829a <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    441a:	2020      	movs	r0, #32
    441c:	f240 1101 	movw	r1, #257	; 0x101
    4420:	f003 ff3b 	bl	829a <cc2400_set>
		//      |  | |   |  +--------> CRC off
		//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
		//      |  | +---------------> 2 preamble bytes of 01010101
		//      |  +-----------------> not packet mode
			//      +--------------------> un-buffered mode
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4424:	8821      	ldrh	r1, [r4, #0]
    4426:	2002      	movs	r0, #2
    4428:	b289      	uxth	r1, r1
    442a:	3901      	subs	r1, #1
    442c:	b289      	uxth	r1, r1
    442e:	f003 ff34 	bl	829a <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    4432:	2003      	movs	r0, #3
    4434:	4629      	mov	r1, r5
    4436:	f003 ff30 	bl	829a <cc2400_set>
	}

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    443a:	8820      	ldrh	r0, [r4, #0]
    443c:	b280      	uxth	r0, r0
    443e:	f002 ffa9 	bl	7394 <cs_threshold_calc_and_set>

	clkn_start();
    4442:	f003 f83f 	bl	74c4 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    4446:	f003 ffcb 	bl	83e0 <cc2400_status>
    444a:	0642      	lsls	r2, r0, #25
    444c:	d5fb      	bpl.n	4446 <cc2400_rx+0x6e>
	cc2400_strobe(SFSON);
    444e:	2061      	movs	r0, #97	; 0x61
    4450:	f003 ffcd 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4454:	f003 ffc4 	bl	83e0 <cc2400_status>
    4458:	0743      	lsls	r3, r0, #29
    445a:	d5fb      	bpl.n	4454 <cc2400_rx+0x7c>
	cc2400_strobe(SRX);
    445c:	2062      	movs	r0, #98	; 0x62
    445e:	f003 ffc6 	bl	83ee <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    4462:	4b05      	ldr	r3, [pc, #20]	; (4478 <cc2400_rx+0xa0>)
    4464:	2280      	movs	r2, #128	; 0x80
    4466:	601a      	str	r2, [r3, #0]
	HGM_SET;
    4468:	f44f 7280 	mov.w	r2, #256	; 0x100
    446c:	601a      	str	r2, [r3, #0]
    446e:	bd38      	pop	{r3, r4, r5, pc}
    4470:	10000e34 	.word	0x10000e34
    4474:	1000044c 	.word	0x1000044c
    4478:	2009c058 	.word	0x2009c058

0000447c <cc2400_rx_sync>:
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    447c:	b570      	push	{r4, r5, r6, lr}
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    447e:	4b28      	ldr	r3, [pc, #160]	; (4520 <cc2400_rx_sync+0xa4>)
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4480:	4604      	mov	r4, r0
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4482:	781a      	ldrb	r2, [r3, #0]
    4484:	b132      	cbz	r2, 4494 <cc2400_rx_sync+0x18>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    4486:	781b      	ldrb	r3, [r3, #0]
    4488:	2b01      	cmp	r3, #1
    448a:	d147      	bne.n	451c <cc2400_rx_sync+0xa0>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    448c:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    448e:	f240 5661 	movw	r6, #1377	; 0x561
    4492:	e002      	b.n	449a <cc2400_rx_sync+0x1e>
static void cc2400_rx_sync(u32 sync)
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    4494:	2529      	movs	r5, #41	; 0x29
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    4496:	f240 4661 	movw	r6, #1121	; 0x461
	} else {
		/* oops */
		return;
	}

	cc2400_set(MANAND,  0x7fff);
    449a:	200d      	movs	r0, #13
    449c:	f647 71ff 	movw	r1, #32767	; 0x7fff
    44a0:	f003 fefb 	bl	829a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    44a4:	2012      	movs	r0, #18
    44a6:	f642 3122 	movw	r1, #11042	; 0x2b22
    44aa:	f003 fef6 	bl	829a <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    44ae:	2014      	movs	r0, #20
    44b0:	f241 214b 	movw	r1, #4683	; 0x124b
    44b4:	f003 fef1 	bl	829a <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    44b8:	2020      	movs	r0, #32
    44ba:	4631      	mov	r1, r6
    44bc:	f003 feed 	bl	829a <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    44c0:	b2a1      	uxth	r1, r4
    44c2:	202c      	movs	r0, #44	; 0x2c
    44c4:	f003 fee9 	bl	829a <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    44c8:	0c21      	lsrs	r1, r4, #16

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    44ca:	4c16      	ldr	r4, [pc, #88]	; (4524 <cc2400_rx_sync+0xa8>)
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    44cc:	202d      	movs	r0, #45	; 0x2d
    44ce:	f003 fee4 	bl	829a <cc2400_set>

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    44d2:	8821      	ldrh	r1, [r4, #0]
    44d4:	2002      	movs	r0, #2
    44d6:	b289      	uxth	r1, r1
    44d8:	3901      	subs	r1, #1
    44da:	b289      	uxth	r1, r1
    44dc:	f003 fedd 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    44e0:	2003      	movs	r0, #3
    44e2:	4629      	mov	r1, r5
    44e4:	f003 fed9 	bl	829a <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    44e8:	8820      	ldrh	r0, [r4, #0]
    44ea:	b280      	uxth	r0, r0
    44ec:	f002 ff52 	bl	7394 <cs_threshold_calc_and_set>

	clkn_start();
    44f0:	f002 ffe8 	bl	74c4 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    44f4:	f003 ff74 	bl	83e0 <cc2400_status>
    44f8:	0640      	lsls	r0, r0, #25
    44fa:	d5fb      	bpl.n	44f4 <cc2400_rx_sync+0x78>
	cc2400_strobe(SFSON);
    44fc:	2061      	movs	r0, #97	; 0x61
    44fe:	f003 ff76 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4502:	f003 ff6d 	bl	83e0 <cc2400_status>
    4506:	0741      	lsls	r1, r0, #29
    4508:	d5fb      	bpl.n	4502 <cc2400_rx_sync+0x86>
	cc2400_strobe(SRX);
    450a:	2062      	movs	r0, #98	; 0x62
    450c:	f003 ff6f 	bl	83ee <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    4510:	4b05      	ldr	r3, [pc, #20]	; (4528 <cc2400_rx_sync+0xac>)
    4512:	2280      	movs	r2, #128	; 0x80
    4514:	601a      	str	r2, [r3, #0]
	HGM_SET;
    4516:	f44f 7280 	mov.w	r2, #256	; 0x100
    451a:	601a      	str	r2, [r3, #0]
    451c:	bd70      	pop	{r4, r5, r6, pc}
    451e:	bf00      	nop
    4520:	10000e34 	.word	0x10000e34
    4524:	1000044c 	.word	0x1000044c
    4528:	2009c058 	.word	0x2009c058

0000452c <enqueue>:

/* Unpacked symbol buffers (two rxbufs) */
char unpacked[DMA_SIZE*8*2];

static int enqueue(uint8_t type, uint8_t* buf)
{
    452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452e:	4606      	mov	r6, r0
    4530:	460f      	mov	r7, r1
	usb_pkt_rx* f = usb_enqueue();
    4532:	f002 fe4f 	bl	71d4 <usb_enqueue>
    4536:	4d1e      	ldr	r5, [pc, #120]	; (45b0 <enqueue+0x84>)

	/* fail if queue is full */
	if (f == NULL) {
    4538:	4604      	mov	r4, r0
    453a:	b920      	cbnz	r0, 4546 <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    453c:	786b      	ldrb	r3, [r5, #1]
    453e:	f043 0304 	orr.w	r3, r3, #4
    4542:	706b      	strb	r3, [r5, #1]
		return 0;
    4544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	f->pkt_type = type;
	if(type == SPECAN) {
    4546:	2e04      	cmp	r6, #4
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    4548:	7006      	strb	r6, [r0, #0]
	if(type == SPECAN) {
    454a:	d10e      	bne.n	456a <enqueue+0x3e>
		f->clkn_high = (clkn >> 20) & 0xff;
    454c:	4b19      	ldr	r3, [pc, #100]	; (45b4 <enqueue+0x88>)
		f->clk100ns = CLK100NS;
    454e:	f640 4135 	movw	r1, #3125	; 0xc35
		return 0;
	}

	f->pkt_type = type;
	if(type == SPECAN) {
		f->clkn_high = (clkn >> 20) & 0xff;
    4552:	681a      	ldr	r2, [r3, #0]
    4554:	0d12      	lsrs	r2, r2, #20
    4556:	70c2      	strb	r2, [r0, #3]
		f->clk100ns = CLK100NS;
    4558:	4a17      	ldr	r2, [pc, #92]	; (45b8 <enqueue+0x8c>)
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	6812      	ldr	r2, [r2, #0]
    455e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4562:	fb01 2303 	mla	r3, r1, r3, r2
    4566:	6043      	str	r3, [r0, #4]
    4568:	e015      	b.n	4596 <enqueue+0x6a>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    456a:	78ab      	ldrb	r3, [r5, #2]
    456c:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    456e:	686b      	ldr	r3, [r5, #4]
    4570:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    4572:	892b      	ldrh	r3, [r5, #8]
    4574:	b29b      	uxth	r3, r3
    4576:	3b62      	subs	r3, #98	; 0x62
    4578:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    457a:	4b10      	ldr	r3, [pc, #64]	; (45bc <enqueue+0x90>)
    457c:	781b      	ldrb	r3, [r3, #0]
    457e:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    4580:	4b0f      	ldr	r3, [pc, #60]	; (45c0 <enqueue+0x94>)
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4586:	8928      	ldrh	r0, [r5, #8]
    4588:	b280      	uxth	r0, r0
    458a:	f002 feef 	bl	736c <rssi_get_avg>
		f->rssi_count = rssi_count;
    458e:	4b0d      	ldr	r3, [pc, #52]	; (45c4 <enqueue+0x98>)
		f->clkn_high = idle_buf_clkn_high;
		f->clk100ns = idle_buf_clk100ns;
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
		f->rssi_min = rssi_min;
		f->rssi_max = rssi_max;
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4590:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    4592:	781b      	ldrb	r3, [r3, #0]
    4594:	72e3      	strb	r3, [r4, #11]
	}

	memcpy(f->data, buf, DMA_SIZE);
    4596:	f104 000e 	add.w	r0, r4, #14
    459a:	4639      	mov	r1, r7
    459c:	2232      	movs	r2, #50	; 0x32
    459e:	f004 ff0d 	bl	93bc <memcpy>

	f->status = status;
    45a2:	786b      	ldrb	r3, [r5, #1]
	status = 0;

	return 1;
    45a4:	2001      	movs	r0, #1
		f->rssi_count = rssi_count;
	}

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    45a6:	7063      	strb	r3, [r4, #1]
	status = 0;
    45a8:	2300      	movs	r3, #0
    45aa:	706b      	strb	r3, [r5, #1]

	return 1;
}
    45ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45ae:	bf00      	nop
    45b0:	10000e34 	.word	0x10000e34
    45b4:	10001014 	.word	0x10001014
    45b8:	40004008 	.word	0x40004008
    45bc:	10000ffa 	.word	0x10000ffa
    45c0:	10000ff8 	.word	0x10000ff8
    45c4:	10001496 	.word	0x10001496

000045c8 <le_set_access_address>:
	// reset GIO
	cc2400_set(IOCFG, gio_save);
}

/* set LE access address */
static void le_set_access_address(u32 aa) {
    45c8:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    45ca:	4c04      	ldr	r4, [pc, #16]	; (45dc <le_set_access_address+0x14>)
    45cc:	6060      	str	r0, [r4, #4]
	aa_rev = rbit(aa);
    45ce:	f003 fd6f 	bl	80b0 <rbit>
	le.syncl = aa_rev & 0xffff;
    45d2:	8160      	strh	r0, [r4, #10]
	le.synch = aa_rev >> 16;
    45d4:	0c00      	lsrs	r0, r0, #16
    45d6:	8120      	strh	r0, [r4, #8]
    45d8:	bd10      	pop	{r4, pc}
    45da:	bf00      	nop
    45dc:	1000044c 	.word	0x1000044c

000045e0 <cc2400_idle>:
		}
	}
}

static void cc2400_idle()
{
    45e0:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    45e2:	2064      	movs	r0, #100	; 0x64
    45e4:	f003 ff03 	bl	83ee <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    45e8:	f003 fefa 	bl	83e0 <cc2400_status>
    45ec:	f000 0004 	and.w	r0, r0, #4
    45f0:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    45f4:	2800      	cmp	r0, #0
    45f6:	d1f7      	bne.n	45e8 <cc2400_idle+0x8>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    45f8:	4b20      	ldr	r3, [pc, #128]	; (467c <cc2400_idle+0x9c>)
    45fa:	2280      	movs	r2, #128	; 0x80
    45fc:	601a      	str	r2, [r3, #0]
	HGM_CLR;
#endif

	RXLED_CLR;
    45fe:	2110      	movs	r1, #16
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
	HGM_CLR;
    4600:	f44f 7280 	mov.w	r2, #256	; 0x100
    4604:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    4606:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    460a:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    460e:	2202      	movs	r2, #2
    4610:	f843 2c20 	str.w	r2, [r3, #-32]

	clkn_stop();
    4614:	f002 ff2e 	bl	7474 <clkn_stop>
	dio_ssp_stop();
    4618:	f003 f858 	bl	76cc <dio_ssp_stop>
	cs_reset();
    461c:	f002 ff18 	bl	7450 <cs_reset>
	rssi_reset();
    4620:	f002 fe40 	bl	72a4 <rssi_reset>

	/* hopping stuff */
	hop_mode = HOP_NONE;
    4624:	4b16      	ldr	r3, [pc, #88]	; (4680 <cc2400_idle+0xa0>)
	do_hop = 0;
	channel = 2441;
    4626:	4a17      	ldr	r2, [pc, #92]	; (4684 <cc2400_idle+0xa4>)
    4628:	f640 1189 	movw	r1, #2441	; 0x989
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    462c:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    462e:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    4630:	8011      	strh	r1, [r2, #0]
	hop_direct_channel = 0;
	hop_timeout = 158;
    4632:	219e      	movs	r1, #158	; 0x9e

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
    4634:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    4636:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	requested_channel = 0;
	le_adv_channel = 2402;
    463a:	f640 1162 	movw	r1, #2402	; 0x962
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
	hop_timeout = 158;
	requested_channel = 0;
    463e:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    4640:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a


	/* bulk USB stuff */
	idle_buf_clkn_high = 0;
    4644:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    4646:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    4648:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    464a:	741c      	strb	r4, [r3, #16]
	status = 0;
    464c:	705c      	strb	r4, [r3, #1]

	/* operation mode */
	mode = MODE_IDLE;
    464e:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    4650:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    4652:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    4654:	751c      	strb	r4, [r3, #20]

	modulation = MOD_BT_BASIC_RATE;
    4656:	701c      	strb	r4, [r3, #0]

	/* specan stuff */
	low_freq = 2400;
    4658:	f44f 6316 	mov.w	r3, #2400	; 0x960
    465c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	high_freq = 2483;
    4660:	3353      	adds	r3, #83	; 0x53
    4662:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
	rssi_threshold = -30;

	target.address = 0;
    4666:	4908      	ldr	r1, [pc, #32]	; (4688 <cc2400_idle+0xa8>)
	modulation = MOD_BT_BASIC_RATE;

	/* specan stuff */
	low_freq = 2400;
	high_freq = 2483;
	rssi_threshold = -30;
    4668:	23e2      	movs	r3, #226	; 0xe2
    466a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

	target.address = 0;
    466e:	2200      	movs	r2, #0
    4670:	2300      	movs	r3, #0
    4672:	e9c1 2300 	strd	r2, r3, [r1]
	target.syncword = 0;
    4676:	e9c1 2302 	strd	r2, r3, [r1, #8]
    467a:	bd10      	pop	{r4, pc}
    467c:	2009c05c 	.word	0x2009c05c
    4680:	10000e34 	.word	0x10000e34
    4684:	1000044c 	.word	0x1000044c
    4688:	10001518 	.word	0x10001518

0000468c <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    468c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    4690:	4c39      	ldr	r4, [pc, #228]	; (4778 <cb_follow_le+0xec>)
    4692:	8820      	ldrh	r0, [r4, #0]
    4694:	4626      	mov	r6, r4
    4696:	b280      	uxth	r0, r0
    4698:	3862      	subs	r0, #98	; 0x62
    469a:	b2c0      	uxtb	r0, r0
    469c:	f002 fc92 	bl	6fc4 <btle_channel_index>
    46a0:	4936      	ldr	r1, [pc, #216]	; (477c <cb_follow_le+0xf0>)

	u32 access_address = 0;
    46a2:	2200      	movs	r2, #0

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    46a4:	5c0d      	ldrb	r5, [r1, r0]

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46a6:	4613      	mov	r3, r2
    46a8:	468c      	mov	ip, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    46aa:	4f35      	ldr	r7, [pc, #212]	; (4780 <cb_follow_le+0xf4>)
    46ac:	5dd9      	ldrb	r1, [r3, r7]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46ae:	3301      	adds	r3, #1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    46b0:	07c9      	lsls	r1, r1, #31
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46b2:	2b1f      	cmp	r3, #31
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    46b4:	ea41 0252 	orr.w	r2, r1, r2, lsr #1
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46b8:	d1f7      	bne.n	46aa <cb_follow_le+0x1e>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    46ba:	6871      	ldr	r1, [r6, #4]
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    46bc:	5cf8      	ldrb	r0, [r7, r3]
    46be:	07c0      	lsls	r0, r0, #31
    46c0:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
		if (access_address == le.access_address) {
    46c4:	428a      	cmp	r2, r1
    46c6:	d14f      	bne.n	4768 <cb_follow_le+0xdc>
    46c8:	2200      	movs	r2, #0
    46ca:	eb07 0803 	add.w	r8, r7, r3
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46ce:	2000      	movs	r0, #0
    46d0:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    46d4:	4601      	mov	r1, r0
    46d6:	eb08 0401 	add.w	r4, r8, r1
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
    46da:	2a03      	cmp	r2, #3
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
    46dc:	f814 4c1f 	ldrb.w	r4, [r4, #-31]
					if (j >= 4) { // unwhiten data bytes
    46e0:	dd0c      	ble.n	46fc <cb_follow_le+0x70>
						bit ^= whitening[idx];
    46e2:	eb0c 0e05 	add.w	lr, ip, r5
    46e6:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    46ea:	3501      	adds	r5, #1
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
    46ec:	ea84 040e 	eor.w	r4, r4, lr
						idx = (idx + 1) % sizeof(whitening);
    46f0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    46f4:	fbb5 f9fe 	udiv	r9, r5, lr
    46f8:	fb0e 5519 	mls	r5, lr, r9, r5
					}
					byte |= bit << k;
    46fc:	408c      	lsls	r4, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46fe:	3101      	adds	r1, #1
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    4700:	4320      	orrs	r0, r4
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    4702:	2908      	cmp	r1, #8
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    4704:	b2c0      	uxtb	r0, r0
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    4706:	d1e6      	bne.n	46d6 <cb_follow_le+0x4a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    4708:	4c1e      	ldr	r4, [pc, #120]	; (4784 <cb_follow_le+0xf8>)
    470a:	6821      	ldr	r1, [r4, #0]
    470c:	5488      	strb	r0, [r1, r2]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    470e:	3201      	adds	r2, #1
    4710:	2a2e      	cmp	r2, #46	; 0x2e
    4712:	d1da      	bne.n	46ca <cb_follow_le+0x3e>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    4714:	6973      	ldr	r3, [r6, #20]
    4716:	b95b      	cbnz	r3, 4730 <cb_follow_le+0xa4>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    4718:	6821      	ldr	r1, [r4, #0]
    471a:	2001      	movs	r0, #1
    471c:	f7ff ff06 	bl	452c <enqueue>
			RXLED_SET;
    4720:	4b19      	ldr	r3, [pc, #100]	; (4788 <cb_follow_le+0xfc>)
    4722:	2210      	movs	r2, #16
    4724:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    4726:	4b19      	ldr	r3, [pc, #100]	; (478c <cb_follow_le+0x100>)
    4728:	6820      	ldr	r0, [r4, #0]
    472a:	699b      	ldr	r3, [r3, #24]
    472c:	4798      	blx	r3

			break;
    472e:	e01f      	b.n	4770 <cb_follow_le+0xe4>
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    4730:	6823      	ldr	r3, [r4, #0]
    4732:	795d      	ldrb	r5, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4734:	4b10      	ldr	r3, [pc, #64]	; (4778 <cb_follow_le+0xec>)
    4736:	6821      	ldr	r1, [r4, #0]
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    4738:	f005 053f 	and.w	r5, r5, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    473c:	1caa      	adds	r2, r5, #2
    473e:	6918      	ldr	r0, [r3, #16]
    4740:	3104      	adds	r1, #4
    4742:	f002 fcbf 	bl	70c4 <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    4746:	6822      	ldr	r2, [r4, #0]
    4748:	f105 0308 	add.w	r3, r5, #8
    474c:	5cd1      	ldrb	r1, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    474e:	6822      	ldr	r2, [r4, #0]
    4750:	1deb      	adds	r3, r5, #7
    4752:	5cd3      	ldrb	r3, [r2, r3]
							 |  idle_rxbuf[4+len+0];
    4754:	6822      	ldr	r2, [r4, #0]
    4756:	3506      	adds	r5, #6
    4758:	5d52      	ldrb	r2, [r2, r5]
			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
							 | (idle_rxbuf[4+len+1] << 8)
    475a:	021b      	lsls	r3, r3, #8
    475c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
							 |  idle_rxbuf[4+len+0];
    4760:	4313      	orrs	r3, r2
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    4762:	4298      	cmp	r0, r3
    4764:	d104      	bne.n	4770 <cb_follow_le+0xe4>
    4766:	e7d7      	b.n	4718 <cb_follow_le+0x8c>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    4768:	3301      	adds	r3, #1
    476a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    476e:	d1a5      	bne.n	46bc <cb_follow_le+0x30>
			break;
		}
	}

	return 1;
}
    4770:	2001      	movs	r0, #1
    4772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4776:	bf00      	nop
    4778:	1000044c 	.word	0x1000044c
    477c:	0000979c 	.word	0x0000979c
    4780:	10001174 	.word	0x10001174
    4784:	10001170 	.word	0x10001170
    4788:	2009c038 	.word	0x2009c038
    478c:	10000e34 	.word	0x10000e34

00004790 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4790:	b538      	push	{r3, r4, r5, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4792:	4b58      	ldr	r3, [pc, #352]	; (48f4 <connection_follow_cb+0x164>)
}

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4794:	4605      	mov	r5, r0
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4796:	7e1a      	ldrb	r2, [r3, #24]
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	// u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
	u8 header = packet[HEADER_IDX];
    4798:	7901      	ldrb	r1, [r0, #4]
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    479a:	2a02      	cmp	r2, #2
    479c:	461c      	mov	r4, r3
    479e:	d113      	bne.n	47c8 <connection_follow_cb+0x38>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    47a0:	2203      	movs	r2, #3
    47a2:	761a      	strb	r2, [r3, #24]
		le.conn_epoch = clkn;
    47a4:	4a54      	ldr	r2, [pc, #336]	; (48f8 <connection_follow_cb+0x168>)
    47a6:	6812      	ldr	r2, [r2, #0]
    47a8:	61da      	str	r2, [r3, #28]
		le.interval_timer = le.conn_interval - 1;
    47aa:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    47ac:	3a01      	subs	r2, #1
    47ae:	b292      	uxth	r2, r2
    47b0:	841a      	strh	r2, [r3, #32]
		le.conn_count = 0;
    47b2:	2200      	movs	r2, #0
    47b4:	849a      	strh	r2, [r3, #36]	; 0x24
		le.update_pending = 0;
    47b6:	62da      	str	r2, [r3, #44]	; 0x2c

		// hue hue hue
		if (jam_mode != JAM_NONE)
    47b8:	4b50      	ldr	r3, [pc, #320]	; (48fc <connection_follow_cb+0x16c>)
    47ba:	7cda      	ldrb	r2, [r3, #19]
    47bc:	2a00      	cmp	r2, #0
    47be:	f000 8098 	beq.w	48f2 <connection_follow_cb+0x162>
			le_jam_count = JAM_COUNT_DEFAULT;
    47c2:	2228      	movs	r2, #40	; 0x28
    47c4:	61da      	str	r2, [r3, #28]
    47c6:	bd38      	pop	{r3, r4, r5, pc}

	} else if (le.link_state == LINK_CONNECTED) {
    47c8:	2a03      	cmp	r2, #3
    47ca:	d13b      	bne.n	4844 <connection_follow_cb+0xb4>
		u8 llid =  header & 0x03;

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		// hue hue hue
		if (jam_mode != JAM_NONE)
			le_jam_count = JAM_COUNT_DEFAULT;

	} else if (le.link_state == LINK_CONNECTED) {
		u8 llid =  header & 0x03;
    47ce:	f001 0103 	and.w	r1, r1, #3

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47d2:	b1a3      	cbz	r3, 47fe <connection_follow_cb+0x6e>
    47d4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    47d6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    47d8:	b29b      	uxth	r3, r3
    47da:	429a      	cmp	r2, r3
    47dc:	d10f      	bne.n	47fe <connection_follow_cb+0x6e>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    47de:	4b46      	ldr	r3, [pc, #280]	; (48f8 <connection_follow_cb+0x168>)
    47e0:	681b      	ldr	r3, [r3, #0]
    47e2:	61e3      	str	r3, [r4, #28]
			le.conn_interval = le.interval_update;
    47e4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    47e6:	8463      	strh	r3, [r4, #34]	; 0x22
			le.interval_timer = le.interval_update - 1;
    47e8:	3b01      	subs	r3, #1
    47ea:	b29b      	uxth	r3, r3
    47ec:	8423      	strh	r3, [r4, #32]
			le.win_size = le.win_size_update;
    47ee:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    47f2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			le.win_offset = le.win_offset_update;
    47f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    47f8:	8523      	strh	r3, [r4, #40]	; 0x28
			le.update_pending = 0;
    47fa:	2300      	movs	r3, #0
    47fc:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		if (llid == 0x03 && data[0] == 0x00) {
    47fe:	2903      	cmp	r1, #3
    4800:	d177      	bne.n	48f2 <connection_follow_cb+0x162>
    4802:	79ab      	ldrb	r3, [r5, #6]
    4804:	2b00      	cmp	r3, #0
    4806:	d174      	bne.n	48f2 <connection_follow_cb+0x162>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    4808:	79eb      	ldrb	r3, [r5, #7]
    480a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    480e:	7a6a      	ldrb	r2, [r5, #9]
    4810:	7a2b      	ldrb	r3, [r5, #8]
    4812:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    4816:	86e3      	strh	r3, [r4, #54]	; 0x36
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    4818:	7aea      	ldrb	r2, [r5, #11]
    481a:	7aab      	ldrb	r3, [r5, #10]
    481c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    4820:	8663      	strh	r3, [r4, #50]	; 0x32
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4822:	7c6a      	ldrb	r2, [r5, #17]
    4824:	7c2b      	ldrb	r3, [r5, #16]
    4826:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    482a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    482c:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    482e:	b292      	uxth	r2, r2
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4830:	8623      	strh	r3, [r4, #48]	; 0x30
			if (le.update_instant - le.conn_count < 32767)
    4832:	1a9b      	subs	r3, r3, r2
    4834:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    4838:	4293      	cmp	r3, r2
    483a:	dc5a      	bgt.n	48f2 <connection_follow_cb+0x162>
				le.update_pending = 1;
    483c:	4b2d      	ldr	r3, [pc, #180]	; (48f4 <connection_follow_cb+0x164>)
    483e:	2201      	movs	r2, #1
    4840:	62da      	str	r2, [r3, #44]	; 0x2c
    4842:	bd38      	pop	{r3, r4, r5, pc}
		}

	} else if (le.link_state == LINK_LISTENING) {
    4844:	2a01      	cmp	r2, #1
    4846:	d154      	bne.n	48f2 <connection_follow_cb+0x162>
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
    4848:	f001 010f 	and.w	r1, r1, #15
    484c:	2905      	cmp	r1, #5
    484e:	d150      	bne.n	48f2 <connection_follow_cb+0x162>
			uint16_t conn_interval;

			// ignore packets with incorrect length
			if (*data_len != 34)
    4850:	7943      	ldrb	r3, [r0, #5]
    4852:	2b22      	cmp	r3, #34	; 0x22
    4854:	d14d      	bne.n	48f2 <connection_follow_cb+0x162>
				return;

			// conn interval must be [7.5 ms, 4.0s] in units of 1.25 ms
			conn_interval = (packet[29] << 8) | packet[28];
    4856:	7f03      	ldrb	r3, [r0, #28]
    4858:	7f42      	ldrb	r2, [r0, #29]
    485a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    485e:	3a06      	subs	r2, #6
    4860:	b292      	uxth	r2, r2
    4862:	f640 437a 	movw	r3, #3194	; 0xc7a
    4866:	429a      	cmp	r2, r3
    4868:	d843      	bhi.n	48f2 <connection_follow_cb+0x162>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    486a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    486c:	b92b      	cbnz	r3, 487a <connection_follow_cb+0xea>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    486e:	2302      	movs	r3, #2
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4870:	2000      	movs	r0, #0
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4872:	7623      	strb	r3, [r4, #24]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4874:	6160      	str	r0, [r4, #20]

			for (i = 0; i < 4; ++i)
    4876:	4603      	mov	r3, r0
    4878:	e011      	b.n	489e <connection_follow_cb+0x10e>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    487a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    487e:	1da9      	adds	r1, r5, #6
    4880:	2206      	movs	r2, #6
    4882:	f004 fd67 	bl	9354 <memcmp>
			if (conn_interval < 6 || conn_interval > 3200)
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    4886:	2800      	cmp	r0, #0
    4888:	d0f1      	beq.n	486e <connection_follow_cb+0xde>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    488a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    488e:	f105 010c 	add.w	r1, r5, #12
    4892:	2206      	movs	r2, #6
    4894:	f004 fd5e 	bl	9354 <memcmp>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    4898:	2800      	cmp	r0, #0
    489a:	d0e8      	beq.n	486e <connection_follow_cb+0xde>
    489c:	bd38      	pop	{r3, r4, r5, pc}
    489e:	18ea      	adds	r2, r5, r3

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
    48a0:	7c91      	ldrb	r1, [r2, #18]
    48a2:	00da      	lsls	r2, r3, #3
    48a4:	fa01 f202 	lsl.w	r2, r1, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    48a8:	3301      	adds	r3, #1
    48aa:	2b04      	cmp	r3, #4
				aa |= packet[18+i] << (i*8);
    48ac:	ea40 0002 	orr.w	r0, r0, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    48b0:	d1f5      	bne.n	489e <connection_follow_cb+0x10e>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    48b2:	f7ff fe89 	bl	45c8 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
    48b6:	7de8      	ldrb	r0, [r5, #23]
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    48b8:	7e2b      	ldrb	r3, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    48ba:	0200      	lsls	r0, r0, #8
    48bc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
						|  packet[CRC_INIT+0];
    48c0:	7dab      	ldrb	r3, [r5, #22]
    48c2:	4318      	orrs	r0, r3
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    48c4:	60e0      	str	r0, [r4, #12]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    48c6:	f003 fbf3 	bl	80b0 <rbit>

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    48ca:	7e6b      	ldrb	r3, [r5, #25]

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    48cc:	6120      	str	r0, [r4, #16]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    48ce:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    48d2:	7eab      	ldrb	r3, [r5, #26]
    48d4:	8523      	strh	r3, [r4, #40]	; 0x28

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    48d6:	7f6a      	ldrb	r2, [r5, #29]
    48d8:	7f2b      	ldrb	r3, [r5, #28]
    48da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    48de:	8463      	strh	r3, [r4, #34]	; 0x22
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48e0:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
			le.channel_idx = le.channel_increment;

			// Hop to the initial channel immediately
			do_hop = 1;
    48e4:	2201      	movs	r2, #1
#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48e6:	f003 031f 	and.w	r3, r3, #31
    48ea:	76a3      	strb	r3, [r4, #26]
			le.channel_idx = le.channel_increment;
    48ec:	7663      	strb	r3, [r4, #25]

			// Hop to the initial channel immediately
			do_hop = 1;
    48ee:	4b03      	ldr	r3, [pc, #12]	; (48fc <connection_follow_cb+0x16c>)
    48f0:	72da      	strb	r2, [r3, #11]
    48f2:	bd38      	pop	{r3, r4, r5, pc}
    48f4:	1000044c 	.word	0x1000044c
    48f8:	10001014 	.word	0x10001014
    48fc:	10000e34 	.word	0x10000e34

00004900 <vendor_request_handler>:

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    4900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    4904:	4c8a      	ldr	r4, [pc, #552]	; (4b30 <vendor_request_handler+0x230>)

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    4906:	461d      	mov	r5, r3
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    4908:	681b      	ldr	r3, [r3, #0]

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    490a:	460f      	mov	r7, r1
    490c:	4616      	mov	r6, r2
	uint32_t clock;
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;
    490e:	6223      	str	r3, [r4, #32]

	switch (request) {
    4910:	284d      	cmp	r0, #77	; 0x4d
    4912:	f200 8370 	bhi.w	4ff6 <vendor_request_handler+0x6f6>
    4916:	e8df f010 	tbh	[pc, r0, lsl #1]
    491a:	0104      	.short	0x0104
    491c:	00540050 	.word	0x00540050
    4920:	005c0057 	.word	0x005c0057
    4924:	0064005f 	.word	0x0064005f
    4928:	00690067 	.word	0x00690067
    492c:	0072006d 	.word	0x0072006d
    4930:	00cb00c4 	.word	0x00cb00c4
    4934:	00800109 	.word	0x00800109
    4938:	0085007b 	.word	0x0085007b
    493c:	008d008a 	.word	0x008d008a
    4940:	009a0092 	.word	0x009a0092
    4944:	00bf00bd 	.word	0x00bf00bd
    4948:	010200c1 	.word	0x010200c1
    494c:	036e0106 	.word	0x036e0106
    4950:	009c0121 	.word	0x009c0121
    4954:	00ad00a3 	.word	0x00ad00a3
    4958:	00af00ab 	.word	0x00af00ab
    495c:	0140014e 	.word	0x0140014e
    4960:	016e016b 	.word	0x016e016b
    4964:	01760172 	.word	0x01760172
    4968:	01de01a9 	.word	0x01de01a9
    496c:	02420202 	.word	0x02420202
    4970:	02540249 	.word	0x02540249
    4974:	0263036b 	.word	0x0263036b
    4978:	026e0268 	.word	0x026e0268
    497c:	02840275 	.word	0x02840275
    4980:	01f801eb 	.word	0x01f801eb
    4984:	02e80291 	.word	0x02e80291
    4988:	034d015d 	.word	0x034d015d
    498c:	02b9036e 	.word	0x02b9036e
    4990:	03670364 	.word	0x03670364
    4994:	01da01c8 	.word	0x01da01c8
    4998:	036e020d 	.word	0x036e020d
    499c:	02cf004e 	.word	0x02cf004e
    49a0:	02df013e 	.word	0x02df013e
    49a4:	02f30214 	.word	0x02f30214
    49a8:	030a02fe 	.word	0x030a02fe
    49ac:	03200315 	.word	0x03200315
    49b0:	0336032b 	.word	0x0336032b
    49b4:	0341      	.short	0x0341
    49b6:	2400      	movs	r4, #0
    49b8:	e26d      	b.n	4e96 <vendor_request_handler+0x596>
	case UBERTOOTH_PING:
		*data_len = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    49ba:	2001      	movs	r0, #1
    49bc:	74a0      	strb	r0, [r4, #18]
		*data_len = 0;
    49be:	2300      	movs	r3, #0
    49c0:	e1a0      	b.n	4d04 <vendor_request_handler+0x404>
		break;

	case UBERTOOTH_TX_SYMBOLS:
		hop_mode = HOP_BLUETOOTH;
    49c2:	2302      	movs	r3, #2
    49c4:	72a3      	strb	r3, [r4, #10]
    49c6:	e0f4      	b.n	4bb2 <vendor_request_handler+0x2b2>
		requested_mode = MODE_TX_SYMBOLS;
		*data_len = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    49c8:	4b5a      	ldr	r3, [pc, #360]	; (4b34 <vendor_request_handler+0x234>)
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
    49d0:	e117      	b.n	4c02 <vendor_request_handler+0x302>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    49d2:	880a      	ldrh	r2, [r1, #0]
    49d4:	2302      	movs	r3, #2
    49d6:	e015      	b.n	4a04 <vendor_request_handler+0x104>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    49d8:	4b56      	ldr	r3, [pc, #344]	; (4b34 <vendor_request_handler+0x234>)
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
    49e0:	e10f      	b.n	4c02 <vendor_request_handler+0x302>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    49e2:	880a      	ldrh	r2, [r1, #0]
    49e4:	2310      	movs	r3, #16
    49e6:	e00d      	b.n	4a04 <vendor_request_handler+0x104>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    49e8:	4b52      	ldr	r3, [pc, #328]	; (4b34 <vendor_request_handler+0x234>)
    49ea:	e024      	b.n	4a36 <vendor_request_handler+0x136>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    49ec:	880a      	ldrh	r2, [r1, #0]
    49ee:	f44f 7380 	mov.w	r3, #256	; 0x100
    49f2:	e007      	b.n	4a04 <vendor_request_handler+0x104>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    49f4:	4b4f      	ldr	r3, [pc, #316]	; (4b34 <vendor_request_handler+0x234>)
    49f6:	681b      	ldr	r3, [r3, #0]
    49f8:	f3c3 2340 	ubfx	r3, r3, #9, #1
    49fc:	e101      	b.n	4c02 <vendor_request_handler+0x302>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    49fe:	880a      	ldrh	r2, [r1, #0]
    4a00:	f44f 7300 	mov.w	r3, #512	; 0x200
    4a04:	b912      	cbnz	r2, 4a0c <vendor_request_handler+0x10c>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4a06:	4a4c      	ldr	r2, [pc, #304]	; (4b38 <vendor_request_handler+0x238>)
    4a08:	6013      	str	r3, [r2, #0]
    4a0a:	e2f1      	b.n	4ff0 <vendor_request_handler+0x6f0>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
    4a0c:	4a4b      	ldr	r2, [pc, #300]	; (4b3c <vendor_request_handler+0x23c>)
    4a0e:	e7fb      	b.n	4a08 <vendor_request_handler+0x108>
		else
			CC1V8_CLR;
		break;

	case UBERTOOTH_GET_PARTNUM:
		get_part_num(data, data_len);
    4a10:	4630      	mov	r0, r6
    4a12:	4629      	mov	r1, r5
    4a14:	f003 fdd2 	bl	85bc <get_part_num>
    4a18:	e2ea      	b.n	4ff0 <vendor_request_handler+0x6f0>
	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_GET_SERIAL:
		get_device_serial(data, data_len);
    4a1a:	4630      	mov	r0, r6
    4a1c:	4629      	mov	r1, r5
    4a1e:	f003 fde9 	bl	85f4 <get_device_serial>
    4a22:	e2e5      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4a24:	4b46      	ldr	r3, [pc, #280]	; (4b40 <vendor_request_handler+0x240>)
    4a26:	681b      	ldr	r3, [r3, #0]
    4a28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    4a2c:	e0e9      	b.n	4c02 <vendor_request_handler+0x302>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4a2e:	880a      	ldrh	r2, [r1, #0]
    4a30:	2380      	movs	r3, #128	; 0x80
    4a32:	e007      	b.n	4a44 <vendor_request_handler+0x144>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4a34:	4b42      	ldr	r3, [pc, #264]	; (4b40 <vendor_request_handler+0x240>)
    4a36:	681b      	ldr	r3, [r3, #0]
    4a38:	f3c3 2300 	ubfx	r3, r3, #8, #1
    4a3c:	e0e1      	b.n	4c02 <vendor_request_handler+0x302>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4a3e:	880a      	ldrh	r2, [r1, #0]
    4a40:	f44f 7380 	mov.w	r3, #256	; 0x100
    4a44:	b10a      	cbz	r2, 4a4a <vendor_request_handler+0x14a>
			HGM_SET;
    4a46:	4a3f      	ldr	r2, [pc, #252]	; (4b44 <vendor_request_handler+0x244>)
    4a48:	e7de      	b.n	4a08 <vendor_request_handler+0x108>
		else
			HGM_CLR;
    4a4a:	4a3f      	ldr	r2, [pc, #252]	; (4b48 <vendor_request_handler+0x248>)
    4a4c:	e7dc      	b.n	4a08 <vendor_request_handler+0x108>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4a4e:	2303      	movs	r3, #3
    4a50:	e2ae      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4a52:	2005      	movs	r0, #5
    4a54:	f003 fc18 	bl	8288 <cc2400_get>
    4a58:	f000 0007 	and.w	r0, r0, #7
    4a5c:	7030      	strb	r0, [r6, #0]
    4a5e:	e1dc      	b.n	4e1a <vendor_request_handler+0x51a>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4a60:	8809      	ldrh	r1, [r1, #0]
    4a62:	2907      	cmp	r1, #7
    4a64:	f200 82c7 	bhi.w	4ff6 <vendor_request_handler+0x6f6>
			cc2400_set(FREND, 8 | request_params[0]);
    4a68:	2005      	movs	r0, #5
    4a6a:	f041 0108 	orr.w	r1, r1, #8
    4a6e:	e20f      	b.n	4e90 <vendor_request_handler+0x590>
			return 0;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4a70:	2305      	movs	r3, #5
    4a72:	e29d      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4a74:	2306      	movs	r3, #6
    4a76:	e29b      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4a78:	4b34      	ldr	r3, [pc, #208]	; (4b4c <vendor_request_handler+0x24c>)
    4a7a:	781a      	ldrb	r2, [r3, #0]
    4a7c:	7032      	strb	r2, [r6, #0]
		data[1] = rr.request_pa;
    4a7e:	785a      	ldrb	r2, [r3, #1]
    4a80:	7072      	strb	r2, [r6, #1]
		data[2] = rr.request_num;
    4a82:	789a      	ldrb	r2, [r3, #2]
    4a84:	70b2      	strb	r2, [r6, #2]
		data[3] = rr.reply_pa;
    4a86:	78da      	ldrb	r2, [r3, #3]
    4a88:	70f2      	strb	r2, [r6, #3]
		data[4] = rr.reply_num;
    4a8a:	791b      	ldrb	r3, [r3, #4]
    4a8c:	7133      	strb	r3, [r6, #4]
		*data_len = 5;
    4a8e:	2305      	movs	r3, #5
    4a90:	602b      	str	r3, [r5, #0]
    4a92:	e2ad      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4a94:	2300      	movs	r3, #0
    4a96:	e28b      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4a98:	7823      	ldrb	r3, [r4, #0]
    4a9a:	e0b2      	b.n	4c02 <vendor_request_handler+0x302>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4a9c:	780b      	ldrb	r3, [r1, #0]
    4a9e:	7023      	strb	r3, [r4, #0]
    4aa0:	e2a6      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4aa2:	4b2b      	ldr	r3, [pc, #172]	; (4b50 <vendor_request_handler+0x250>)
    4aa4:	881a      	ldrh	r2, [r3, #0]
    4aa6:	7032      	strb	r2, [r6, #0]
		data[1] = (channel >> 8) & 0xFF;
    4aa8:	881b      	ldrh	r3, [r3, #0]
    4aaa:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4aae:	e19a      	b.n	4de6 <vendor_request_handler+0x4e6>
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4ab0:	880a      	ldrh	r2, [r1, #0]
    4ab2:	4b1f      	ldr	r3, [pc, #124]	; (4b30 <vendor_request_handler+0x230>)
    4ab4:	81e2      	strh	r2, [r4, #14]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4ab6:	89e1      	ldrh	r1, [r4, #14]
    4ab8:	f640 22ea 	movw	r2, #2794	; 0xaea
    4abc:	b289      	uxth	r1, r1
    4abe:	4291      	cmp	r1, r2
    4ac0:	d905      	bls.n	4ace <vendor_request_handler+0x1ce>
			hop_mode = HOP_SWEEP;
    4ac2:	2201      	movs	r2, #1
    4ac4:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4ac6:	f640 1262 	movw	r2, #2402	; 0x962
    4aca:	81da      	strh	r2, [r3, #14]
    4acc:	e017      	b.n	4afe <vendor_request_handler+0x1fe>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4ace:	2200      	movs	r2, #0
    4ad0:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4ad2:	89d9      	ldrh	r1, [r3, #14]
    4ad4:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4ad8:	b289      	uxth	r1, r1
    4ada:	4291      	cmp	r1, r2
    4adc:	bf8a      	itet	hi
    4ade:	89db      	ldrhhi	r3, [r3, #14]
    4ae0:	4613      	movls	r3, r2
    4ae2:	b29b      	uxthhi	r3, r3
    4ae4:	81e3      	strh	r3, [r4, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4ae6:	89e2      	ldrh	r2, [r4, #14]
    4ae8:	f640 23e9 	movw	r3, #2793	; 0xae9
    4aec:	b292      	uxth	r2, r2
    4aee:	429a      	cmp	r2, r3
    4af0:	bf97      	itett	ls
    4af2:	4b0f      	ldrls	r3, [pc, #60]	; (4b30 <vendor_request_handler+0x230>)
    4af4:	f640 23ea 	movwhi	r3, #2794	; 0xaea
    4af8:	89db      	ldrhls	r3, [r3, #14]
    4afa:	b29b      	uxthls	r3, r3
    4afc:	81e3      	strh	r3, [r4, #14]
		}

		le_adv_channel = requested_channel;
    4afe:	89e1      	ldrh	r1, [r4, #14]
    4b00:	4b13      	ldr	r3, [pc, #76]	; (4b50 <vendor_request_handler+0x250>)
    4b02:	b289      	uxth	r1, r1
    4b04:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
		if (mode != MODE_BT_FOLLOW_LE) {
    4b08:	7c61      	ldrb	r1, [r4, #17]
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
			requested_channel = MIN(requested_channel, MAX_FREQ);
		}

		le_adv_channel = requested_channel;
    4b0a:	4a09      	ldr	r2, [pc, #36]	; (4b30 <vendor_request_handler+0x230>)
		if (mode != MODE_BT_FOLLOW_LE) {
    4b0c:	2909      	cmp	r1, #9
    4b0e:	f000 826f 	beq.w	4ff0 <vendor_request_handler+0x6f0>
			channel = requested_channel;
    4b12:	89d1      	ldrh	r1, [r2, #14]
    4b14:	b289      	uxth	r1, r1
    4b16:	8019      	strh	r1, [r3, #0]
			requested_channel = 0;
    4b18:	2100      	movs	r1, #0
    4b1a:	81d1      	strh	r1, [r2, #14]
    4b1c:	e189      	b.n	4e32 <vendor_request_handler+0x532>
			cs_threshold_calc_and_set(channel);
		}
		break;

	case UBERTOOTH_SET_ISP:
		set_isp();
    4b1e:	f003 fd9d 	bl	865c <set_isp>
		*data_len = 0; /* should never return */
    4b22:	2300      	movs	r3, #0
    4b24:	e7b4      	b.n	4a90 <vendor_request_handler+0x190>
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4b26:	4a0b      	ldr	r2, [pc, #44]	; (4b54 <vendor_request_handler+0x254>)
    4b28:	4b0b      	ldr	r3, [pc, #44]	; (4b58 <vendor_request_handler+0x258>)
    4b2a:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    4b2c:	230b      	movs	r3, #11
    4b2e:	e23f      	b.n	4fb0 <vendor_request_handler+0x6b0>
    4b30:	10000e34 	.word	0x10000e34
    4b34:	2009c034 	.word	0x2009c034
    4b38:	2009c03c 	.word	0x2009c03c
    4b3c:	2009c038 	.word	0x2009c038
    4b40:	2009c054 	.word	0x2009c054
    4b44:	2009c058 	.word	0x2009c058
    4b48:	2009c05c 	.word	0x2009c05c
    4b4c:	100014d4 	.word	0x100014d4
    4b50:	1000044c 	.word	0x1000044c
    4b54:	4305bb21 	.word	0x4305bb21
    4b58:	1000001c 	.word	0x1000001c
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b5c:	880a      	ldrh	r2, [r1, #0]
    4b5e:	f46f 6c00 	mvn.w	ip, #2048	; 0x800
    4b62:	eb02 030c 	add.w	r3, r2, ip
    4b66:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4b6a:	b29b      	uxth	r3, r3
    4b6c:	428b      	cmp	r3, r1
    4b6e:	f200 8242 	bhi.w	4ff6 <vendor_request_handler+0x6f6>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b72:	887b      	ldrh	r3, [r7, #2]
		bootloader_ctrl = DFU_MODE;
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b74:	f46f 6600 	mvn.w	r6, #2048	; 0x800
    4b78:	1998      	adds	r0, r3, r6
    4b7a:	b280      	uxth	r0, r0
    4b7c:	4288      	cmp	r0, r1
    4b7e:	f200 823a 	bhi.w	4ff6 <vendor_request_handler+0x6f6>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b82:	4293      	cmp	r3, r2
    4b84:	f0c0 8237 	bcc.w	4ff6 <vendor_request_handler+0x6f6>
				request_params[1] < request_params[0])
			return 0;
		low_freq = request_params[0];
    4b88:	49b0      	ldr	r1, [pc, #704]	; (4e4c <vendor_request_handler+0x54c>)
    4b8a:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		high_freq = request_params[1];
    4b8e:	f8a1 304e 	strh.w	r3, [r1, #78]	; 0x4e
		requested_mode = MODE_SPECAN;
    4b92:	2304      	movs	r3, #4
    4b94:	e00d      	b.n	4bb2 <vendor_request_handler+0x2b2>
		*data_len = 0;
		break;

	case UBERTOOTH_RX_GENERIC:
		requested_mode = MODE_RX_GENERIC;
    4b96:	230f      	movs	r3, #15
    4b98:	e00b      	b.n	4bb2 <vendor_request_handler+0x2b2>
		*data_len = 0;
		break;

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4b9a:	880b      	ldrh	r3, [r1, #0]
    4b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4ba0:	f200 8229 	bhi.w	4ff6 <vendor_request_handler+0x6f6>
			return 0;
		rssi_threshold = 54 - request_params[0];
    4ba4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4ba8:	4aa8      	ldr	r2, [pc, #672]	; (4e4c <vendor_request_handler+0x54c>)
    4baa:	b2db      	uxtb	r3, r3
    4bac:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		requested_mode = MODE_LED_SPECAN;
    4bb0:	2307      	movs	r3, #7
    4bb2:	74a3      	strb	r3, [r4, #18]
    4bb4:	e7b5      	b.n	4b22 <vendor_request_handler+0x222>
		*data_len = 0;
		break;

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4bb6:	2300      	movs	r3, #0
    4bb8:	7033      	strb	r3, [r6, #0]
		data[1] = 0x00;
    4bba:	7073      	strb	r3, [r6, #1]

		length = (u8)strlen(GIT_REVISION);
    4bbc:	48a4      	ldr	r0, [pc, #656]	; (4e50 <vendor_request_handler+0x550>)
    4bbe:	f004 fc8b 	bl	94d8 <strlen>
    4bc2:	b2c4      	uxtb	r4, r0
		data[2] = length;
    4bc4:	70b4      	strb	r4, [r6, #2]

		memcpy(&data[3], GIT_REVISION, length);
    4bc6:	4622      	mov	r2, r4
    4bc8:	1cf0      	adds	r0, r6, #3
    4bca:	49a1      	ldr	r1, [pc, #644]	; (4e50 <vendor_request_handler+0x550>)
    4bcc:	f004 fbf6 	bl	93bc <memcpy>

		*data_len = 2 + 1 + length;
    4bd0:	3403      	adds	r4, #3
    4bd2:	e00b      	b.n	4bec <vendor_request_handler+0x2ec>
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4bd4:	489f      	ldr	r0, [pc, #636]	; (4e54 <vendor_request_handler+0x554>)
    4bd6:	f004 fc7f 	bl	94d8 <strlen>
    4bda:	b2c4      	uxtb	r4, r0
		data[0] = length;
    4bdc:	4630      	mov	r0, r6
    4bde:	f800 4b01 	strb.w	r4, [r0], #1
		memcpy(&data[1], compile_info, length);
    4be2:	4622      	mov	r2, r4
    4be4:	499b      	ldr	r1, [pc, #620]	; (4e54 <vendor_request_handler+0x554>)
    4be6:	f004 fbe9 	bl	93bc <memcpy>
		*data_len = 1 + length;
    4bea:	3401      	adds	r4, #1
    4bec:	602c      	str	r4, [r5, #0]
    4bee:	e1ff      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4bf0:	2001      	movs	r0, #1
    4bf2:	7030      	strb	r0, [r6, #0]
    4bf4:	e112      	b.n	4e1c <vendor_request_handler+0x51c>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4bf6:	880a      	ldrh	r2, [r1, #0]
    4bf8:	4b97      	ldr	r3, [pc, #604]	; (4e58 <vendor_request_handler+0x558>)
    4bfa:	701a      	strb	r2, [r3, #0]
    4bfc:	e118      	b.n	4e30 <vendor_request_handler+0x530>
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4bfe:	4b96      	ldr	r3, [pc, #600]	; (4e58 <vendor_request_handler+0x558>)
    4c00:	781b      	ldrb	r3, [r3, #0]
    4c02:	7033      	strb	r3, [r6, #0]
    4c04:	e109      	b.n	4e1a <vendor_request_handler+0x51a>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4c06:	4f95      	ldr	r7, [pc, #596]	; (4e5c <vendor_request_handler+0x55c>)
    4c08:	2400      	movs	r4, #0
    4c0a:	2500      	movs	r5, #0
    4c0c:	e9c7 4500 	strd	r4, r5, [r7]
		target.syncword = 0;
    4c10:	e9c7 4502 	strd	r4, r5, [r7, #8]
		for(int i=0; i < 8; i++) {
    4c14:	f04f 0800 	mov.w	r8, #0
			target.address |= (uint64_t)data[i] << 8*i;
    4c18:	f816 0008 	ldrb.w	r0, [r6, r8]
    4c1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4c20:	2100      	movs	r1, #0
    4c22:	f004 f8d1 	bl	8dc8 <__aeabi_llsl>
    4c26:	e9d7 4500 	ldrd	r4, r5, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4c2a:	f108 0801 	add.w	r8, r8, #1
			target.address |= (uint64_t)data[i] << 8*i;
    4c2e:	4320      	orrs	r0, r4
    4c30:	4329      	orrs	r1, r5
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4c32:	f1b8 0f08 	cmp.w	r8, #8
			target.address |= (uint64_t)data[i] << 8*i;
    4c36:	e9c7 0100 	strd	r0, r1, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4c3a:	d1ed      	bne.n	4c18 <vendor_request_handler+0x318>
    4c3c:	f04f 0800 	mov.w	r8, #0
    4c40:	eb06 0308 	add.w	r3, r6, r8
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c44:	7a18      	ldrb	r0, [r3, #8]
    4c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4c4a:	2100      	movs	r1, #0
    4c4c:	f004 f8bc 	bl	8dc8 <__aeabi_llsl>
    4c50:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c54:	f108 0801 	add.w	r8, r8, #1
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c58:	4320      	orrs	r0, r4
    4c5a:	4329      	orrs	r1, r5
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c5c:	f1b8 0f08 	cmp.w	r8, #8
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c60:	e9c7 0102 	strd	r0, r1, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c64:	d1ec      	bne.n	4c40 <vendor_request_handler+0x340>
			target.syncword |= (uint64_t)data[i+8] << 8*i;
		}
		precalc();
    4c66:	f002 f873 	bl	6d50 <precalc>
    4c6a:	e1c1      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
    4c6c:	4a7c      	ldr	r2, [pc, #496]	; (4e60 <vendor_request_handler+0x560>)
    4c6e:	2300      	movs	r3, #0
    4c70:	6013      	str	r3, [r2, #0]
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
    4c72:	6811      	ldr	r1, [r2, #0]
    4c74:	0209      	lsls	r1, r1, #8
    4c76:	6011      	str	r1, [r2, #0]
			clkn_offset |= data[i];
    4c78:	5cf0      	ldrb	r0, [r6, r3]
    4c7a:	6811      	ldr	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c7c:	3301      	adds	r3, #1
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c7e:	4301      	orrs	r1, r0
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c80:	2b04      	cmp	r3, #4
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c82:	6011      	str	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c84:	d1f5      	bne.n	4c72 <vendor_request_handler+0x372>
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
    4c86:	2302      	movs	r3, #2
    4c88:	72a3      	strb	r3, [r4, #10]
		dma_discard = 1;
		DIO_SSEL_SET;
    4c8a:	4b76      	ldr	r3, [pc, #472]	; (4e64 <vendor_request_handler+0x564>)
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c8c:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c92:	7420      	strb	r0, [r4, #16]
		DIO_SSEL_SET;
    4c94:	601a      	str	r2, [r3, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4c96:	7973      	ldrb	r3, [r6, #5]
    4c98:	7932      	ldrb	r2, [r6, #4]
    4c9a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    4c9e:	4b72      	ldr	r3, [pc, #456]	; (4e68 <vendor_request_handler+0x568>)
    4ca0:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    4ca2:	2308      	movs	r3, #8
    4ca4:	74a3      	strb	r3, [r4, #18]
		break;
    4ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
    4caa:	2305      	movs	r3, #5
    4cac:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_AFH;
    4cae:	230e      	movs	r3, #14
    4cb0:	74a3      	strb	r3, [r4, #18]

		for(int i=0; i < 10; i++) {
    4cb2:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4cb4:	496d      	ldr	r1, [pc, #436]	; (4e6c <vendor_request_handler+0x56c>)
    4cb6:	2200      	movs	r2, #0
    4cb8:	545a      	strb	r2, [r3, r1]

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
    4cba:	3301      	adds	r3, #1
    4cbc:	2b0a      	cmp	r3, #10
    4cbe:	d1f9      	bne.n	4cb4 <vendor_request_handler+0x3b4>
			afh_map[i] = 0;
		}
		used_channels = 0;
    4cc0:	4b6b      	ldr	r3, [pc, #428]	; (4e70 <vendor_request_handler+0x570>)
		afh_enabled = 1;
    4cc2:	2001      	movs	r0, #1
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
		}
		used_channels = 0;
    4cc4:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4cc6:	4b6b      	ldr	r3, [pc, #428]	; (4e74 <vendor_request_handler+0x574>)
    4cc8:	7018      	strb	r0, [r3, #0]
		break;
    4cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_HOP:
		do_hop = 1;
    4cce:	2001      	movs	r0, #1
    4cd0:	72e0      	strb	r0, [r4, #11]
		break;
    4cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4cd6:	78b2      	ldrb	r2, [r6, #2]
    4cd8:	7873      	ldrb	r3, [r6, #1]
    4cda:	0412      	lsls	r2, r2, #16
    4cdc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    4ce0:	7833      	ldrb	r3, [r6, #0]
    4ce2:	431a      	orrs	r2, r3
    4ce4:	78f3      	ldrb	r3, [r6, #3]
    4ce6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		clkn = clock;
    4cea:	4b63      	ldr	r3, [pc, #396]	; (4e78 <vendor_request_handler+0x578>)
    4cec:	601a      	str	r2, [r3, #0]
    4cee:	e09f      	b.n	4e30 <vendor_request_handler+0x530>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4cf0:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = data[i];
    4cf2:	5cf1      	ldrb	r1, [r6, r3]
    4cf4:	4a5d      	ldr	r2, [pc, #372]	; (4e6c <vendor_request_handler+0x56c>)
    4cf6:	5499      	strb	r1, [r3, r2]
		clkn = clock;
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    4cf8:	3301      	adds	r3, #1
    4cfa:	2b0a      	cmp	r3, #10
    4cfc:	d1f9      	bne.n	4cf2 <vendor_request_handler+0x3f2>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    4cfe:	4a5d      	ldr	r2, [pc, #372]	; (4e74 <vendor_request_handler+0x574>)
    4d00:	2001      	movs	r0, #1
    4d02:	7010      	strb	r0, [r2, #0]
		*data_len = 10;
    4d04:	602b      	str	r3, [r5, #0]
		break;
    4d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4d0a:	2300      	movs	r3, #0
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
    4d0c:	4957      	ldr	r1, [pc, #348]	; (4e6c <vendor_request_handler+0x56c>)
    4d0e:	2200      	movs	r2, #0
    4d10:	545a      	strb	r2, [r3, r1]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    4d12:	3301      	adds	r3, #1
    4d14:	2b0a      	cmp	r3, #10
    4d16:	d1f9      	bne.n	4d0c <vendor_request_handler+0x40c>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    4d18:	4956      	ldr	r1, [pc, #344]	; (4e74 <vendor_request_handler+0x574>)
    4d1a:	700a      	strb	r2, [r1, #0]
    4d1c:	e6b8      	b.n	4a90 <vendor_request_handler+0x190>
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    4d1e:	4b56      	ldr	r3, [pc, #344]	; (4e78 <vendor_request_handler+0x578>)
    4d20:	6819      	ldr	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4d22:	2300      	movs	r3, #0
    4d24:	00da      	lsls	r2, r3, #3
			data[i] = (clock >> (8*i)) & 0xff;
    4d26:	fa21 f202 	lsr.w	r2, r1, r2
    4d2a:	54f2      	strb	r2, [r6, r3]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(int i=0; i < 4; i++) {
    4d2c:	3301      	adds	r3, #1
    4d2e:	2b04      	cmp	r3, #4
    4d30:	d1f8      	bne.n	4d24 <vendor_request_handler+0x424>
    4d32:	e6ad      	b.n	4a90 <vendor_request_handler+0x190>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_TRIM_CLOCK:
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4d34:	7873      	ldrb	r3, [r6, #1]
    4d36:	7832      	ldrb	r2, [r6, #0]
    4d38:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    4d3c:	4b4a      	ldr	r3, [pc, #296]	; (4e68 <vendor_request_handler+0x568>)
    4d3e:	801a      	strh	r2, [r3, #0]
    4d40:	e156      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_FIX_CLOCK_DRIFT:
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4d42:	4b4e      	ldr	r3, [pc, #312]	; (4e7c <vendor_request_handler+0x57c>)
    4d44:	7830      	ldrb	r0, [r6, #0]
    4d46:	8819      	ldrh	r1, [r3, #0]
    4d48:	7872      	ldrb	r2, [r6, #1]
    4d4a:	b289      	uxth	r1, r1
    4d4c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4d50:	440a      	add	r2, r1
    4d52:	b292      	uxth	r2, r2
    4d54:	801a      	strh	r2, [r3, #0]

		// Too slow
		if (clk_drift_ppm < 0) {
    4d56:	881a      	ldrh	r2, [r3, #0]
    4d58:	4949      	ldr	r1, [pc, #292]	; (4e80 <vendor_request_handler+0x580>)
    4d5a:	b212      	sxth	r2, r2
    4d5c:	2a00      	cmp	r2, #0
    4d5e:	4a49      	ldr	r2, [pc, #292]	; (4e84 <vendor_request_handler+0x584>)
    4d60:	da07      	bge.n	4d72 <vendor_request_handler+0x472>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4d62:	881b      	ldrh	r3, [r3, #0]
    4d64:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d68:	425b      	negs	r3, r3
    4d6a:	b29b      	uxth	r3, r3
    4d6c:	fb90 f3f3 	sdiv	r3, r0, r3
    4d70:	e00a      	b.n	4d88 <vendor_request_handler+0x488>
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
		}
		// Too fast
		else if (clk_drift_ppm > 0) {
    4d72:	8818      	ldrh	r0, [r3, #0]
    4d74:	b200      	sxth	r0, r0
    4d76:	2800      	cmp	r0, #0
    4d78:	dd0d      	ble.n	4d96 <vendor_request_handler+0x496>
			clk_drift_correction = 320 / clk_drift_ppm;
    4d7a:	881b      	ldrh	r3, [r3, #0]
    4d7c:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d80:	b21b      	sxth	r3, r3
    4d82:	fb90 f3f3 	sdiv	r3, r0, r3
    4d86:	b29b      	uxth	r3, r3
    4d88:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4d8a:	4b3f      	ldr	r3, [pc, #252]	; (4e88 <vendor_request_handler+0x588>)
    4d8c:	6818      	ldr	r0, [r3, #0]
    4d8e:	8813      	ldrh	r3, [r2, #0]
    4d90:	b29b      	uxth	r3, r3
    4d92:	4403      	add	r3, r0
    4d94:	e001      	b.n	4d9a <vendor_request_handler+0x49a>
		}
		// Don't trim
		else {
			clk_drift_correction = 0;
    4d96:	2300      	movs	r3, #0
    4d98:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = 0;
    4d9a:	600b      	str	r3, [r1, #0]
    4d9c:	e128      	b.n	4ff0 <vendor_request_handler+0x6f0>
		}

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    4d9e:	2300      	movs	r3, #0
    4da0:	602b      	str	r3, [r5, #0]

		do_hop = 0;
    4da2:	72e3      	strb	r3, [r4, #11]
		hop_mode = HOP_BTLE;
    4da4:	2303      	movs	r3, #3
    4da6:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4da8:	2309      	movs	r3, #9
    4daa:	e03e      	b.n	4e2a <vendor_request_handler+0x52a>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4dac:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4dae:	4927      	ldr	r1, [pc, #156]	; (4e4c <vendor_request_handler+0x54c>)
    4db0:	00da      	lsls	r2, r3, #3
    4db2:	6849      	ldr	r1, [r1, #4]
    4db4:	fa21 f202 	lsr.w	r2, r1, r2
    4db8:	54f2      	strb	r2, [r6, r3]
		queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    4dba:	3301      	adds	r3, #1
    4dbc:	2b04      	cmp	r3, #4
    4dbe:	d1f6      	bne.n	4dae <vendor_request_handler+0x4ae>
    4dc0:	e666      	b.n	4a90 <vendor_request_handler+0x190>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4dc2:	78b3      	ldrb	r3, [r6, #2]
    4dc4:	7872      	ldrb	r2, [r6, #1]
    4dc6:	041b      	lsls	r3, r3, #16
    4dc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4dcc:	7832      	ldrb	r2, [r6, #0]
    4dce:	78f0      	ldrb	r0, [r6, #3]
    4dd0:	4313      	orrs	r3, r2
    4dd2:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4dd6:	f7ff fbf7 	bl	45c8 <le_set_access_address>
		le.target_set = 1;
    4dda:	2001      	movs	r0, #1
    4ddc:	4b1b      	ldr	r3, [pc, #108]	; (4e4c <vendor_request_handler+0x54c>)
    4dde:	e0fd      	b.n	4fdc <vendor_request_handler+0x6dc>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    4de0:	2313      	movs	r3, #19
    4de2:	7033      	strb	r3, [r6, #0]
		data[1] = 0x37;
    4de4:	2337      	movs	r3, #55	; 0x37
    4de6:	7073      	strb	r3, [r6, #1]
    4de8:	e02e      	b.n	4e48 <vendor_request_handler+0x548>
		*data_len = 2;
		break;

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    4dea:	4b18      	ldr	r3, [pc, #96]	; (4e4c <vendor_request_handler+0x54c>)
    4dec:	695b      	ldr	r3, [r3, #20]
    4dee:	3300      	adds	r3, #0
    4df0:	bf18      	it	ne
    4df2:	2301      	movne	r3, #1
    4df4:	e705      	b.n	4c02 <vendor_request_handler+0x302>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    4df6:	880a      	ldrh	r2, [r1, #0]
    4df8:	4b14      	ldr	r3, [pc, #80]	; (4e4c <vendor_request_handler+0x54c>)
    4dfa:	3200      	adds	r2, #0
    4dfc:	bf18      	it	ne
    4dfe:	2201      	movne	r2, #1
    4e00:	615a      	str	r2, [r3, #20]
    4e02:	e0f5      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_POLL:
		p = dequeue();
    4e04:	f002 fa00 	bl	7208 <dequeue>
		if (p != NULL) {
    4e08:	4601      	mov	r1, r0
    4e0a:	b128      	cbz	r0, 4e18 <vendor_request_handler+0x518>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4e0c:	4630      	mov	r0, r6
    4e0e:	2240      	movs	r2, #64	; 0x40
    4e10:	f004 fad4 	bl	93bc <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4e14:	2340      	movs	r3, #64	; 0x40
    4e16:	e63b      	b.n	4a90 <vendor_request_handler+0x190>
		} else {
			data[0] = 0;
    4e18:	7030      	strb	r0, [r6, #0]
			*data_len = 1;
    4e1a:	2001      	movs	r0, #1
    4e1c:	6028      	str	r0, [r5, #0]
    4e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    4e22:	2300      	movs	r3, #0
    4e24:	602b      	str	r3, [r5, #0]

		hop_mode = HOP_NONE;
    4e26:	72a3      	strb	r3, [r4, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4e28:	230a      	movs	r3, #10
    4e2a:	74a3      	strb	r3, [r4, #18]

		queue_init();
    4e2c:	f002 f9c4 	bl	71b8 <queue_init>
		cs_threshold_calc_and_set(channel);
    4e30:	4b06      	ldr	r3, [pc, #24]	; (4e4c <vendor_request_handler+0x54c>)
    4e32:	8818      	ldrh	r0, [r3, #0]
    4e34:	b280      	uxth	r0, r0
    4e36:	f002 faad 	bl	7394 <cs_threshold_calc_and_set>
    4e3a:	e0d9      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    4e3c:	7808      	ldrb	r0, [r1, #0]
    4e3e:	f003 fa23 	bl	8288 <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4e42:	0a03      	lsrs	r3, r0, #8
    4e44:	7033      	strb	r3, [r6, #0]
		data[1] = reg_val & 0xff;
    4e46:	7070      	strb	r0, [r6, #1]
		*data_len = 2;
    4e48:	2302      	movs	r3, #2
    4e4a:	e621      	b.n	4a90 <vendor_request_handler+0x190>
    4e4c:	1000044c 	.word	0x1000044c
    4e50:	0000a064 	.word	0x0000a064
    4e54:	00009843 	.word	0x00009843
    4e58:	10001498 	.word	0x10001498
    4e5c:	10001518 	.word	0x10001518
    4e60:	10001008 	.word	0x10001008
    4e64:	2009c098 	.word	0x2009c098
    4e68:	10001162 	.word	0x10001162
    4e6c:	10000ffb 	.word	0x10000ffb
    4e70:	10000ff9 	.word	0x10000ff9
    4e74:	10001497 	.word	0x10001497
    4e78:	10001014 	.word	0x10001014
    4e7c:	10001494 	.word	0x10001494
    4e80:	100014cc 	.word	0x100014cc
    4e84:	10001010 	.word	0x10001010
    4e88:	1000100c 	.word	0x1000100c
		break;

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4e8c:	7808      	ldrb	r0, [r1, #0]
    4e8e:	8849      	ldrh	r1, [r1, #2]
    4e90:	f003 fa03 	bl	829a <cc2400_set>
    4e94:	e0ac      	b.n	4ff0 <vendor_request_handler+0x6f0>
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e96:	883b      	ldrh	r3, [r7, #0]
    4e98:	42a3      	cmp	r3, r4
    4e9a:	f240 80a9 	bls.w	4ff0 <vendor_request_handler+0x6f0>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    4e9e:	2303      	movs	r3, #3
    4ea0:	4363      	muls	r3, r4
    4ea2:	18f2      	adds	r2, r6, r3
    4ea4:	7851      	ldrb	r1, [r2, #1]
    4ea6:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4ea8:	5cf0      	ldrb	r0, [r6, r3]
    4eaa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4eae:	3401      	adds	r4, #1
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
			cc2400_set(data[i*3], reg_val);
    4eb0:	f003 f9f3 	bl	829a <cc2400_set>
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4eb4:	b2e4      	uxtb	r4, r4
    4eb6:	e7ee      	b.n	4e96 <vendor_request_handler+0x596>
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;
	dlen = *data_len;

	switch (request) {
    4eb8:	2400      	movs	r4, #0
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
			reg_val = cc2400_get(i);
    4eba:	4620      	mov	r0, r4
    4ebc:	f003 f9e4 	bl	8288 <cc2400_get>
			data[i*3] = i;
    4ec0:	7034      	strb	r4, [r6, #0]
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4ec2:	3401      	adds	r4, #1
    4ec4:	b2e4      	uxtb	r4, r4
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4ec6:	0a03      	lsrs	r3, r0, #8
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4ec8:	2c2e      	cmp	r4, #46	; 0x2e
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4eca:	7073      	strb	r3, [r6, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4ecc:	70b0      	strb	r0, [r6, #2]
    4ece:	f106 0603 	add.w	r6, r6, #3
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4ed2:	d1f2      	bne.n	4eba <vendor_request_handler+0x5ba>
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
			data[(i*3)+2] = reg_val & 0xff;
		}
		*data_len = MAX_READ_REG*3;
    4ed4:	2387      	movs	r3, #135	; 0x87
    4ed6:	e5db      	b.n	4a90 <vendor_request_handler+0x190>
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4ed8:	79b2      	ldrb	r2, [r6, #6]
		memcpy(&tx_pkt, data, i);
    4eda:	4848      	ldr	r0, [pc, #288]	; (4ffc <vendor_request_handler+0x6fc>)
		}
		*data_len = MAX_READ_REG*3;
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4edc:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4ede:	4631      	mov	r1, r6
    4ee0:	b2d2      	uxtb	r2, r2
    4ee2:	f004 fa6b 	bl	93bc <memcpy>
		//tx_pkt.channel = data[4] << 8 | data[5];
		requested_mode = MODE_TX_GENERIC;
    4ee6:	2310      	movs	r3, #16
    4ee8:	e663      	b.n	4bb2 <vendor_request_handler+0x2b2>
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4eea:	4618      	mov	r0, r3
    4eec:	f003 ff78 	bl	8de0 <malloc>
    4ef0:	4b43      	ldr	r3, [pc, #268]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address_data, data, dlen);
    4ef2:	4631      	mov	r1, r6
    4ef4:	6a22      	ldr	r2, [r4, #32]
		requested_mode = MODE_TX_GENERIC;
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4ef6:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4ef8:	f004 fa60 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4efc:	230c      	movs	r3, #12
    4efe:	e057      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
	
	// WJHUR Power control
	case UBERTOOTH_BTLE_SLAVE_P0:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f00:	4618      	mov	r0, r3
    4f02:	f003 ff6d 	bl	8de0 <malloc>
    4f06:	4b3e      	ldr	r3, [pc, #248]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address_data, data, dlen);
    4f08:	4631      	mov	r1, r6
    4f0a:	6a22      	ldr	r2, [r4, #32]
		requested_mode = MODE_BT_SLAVE_LE;
		break;
	
	// WJHUR Power control
	case UBERTOOTH_BTLE_SLAVE_P0:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f0c:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f0e:	f004 fa55 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P0;
    4f12:	2311      	movs	r3, #17
    4f14:	e04c      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P1:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f16:	4618      	mov	r0, r3
    4f18:	f003 ff62 	bl	8de0 <malloc>
    4f1c:	4b38      	ldr	r3, [pc, #224]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address, data, dlen);
    4f1e:	4631      	mov	r1, r6
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P0;
		break;
	case UBERTOOTH_BTLE_SLAVE_P1:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f20:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address, data, dlen);
    4f22:	6a22      	ldr	r2, [r4, #32]
    4f24:	4837      	ldr	r0, [pc, #220]	; (5004 <vendor_request_handler+0x704>)
    4f26:	f004 fa49 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P1;
    4f2a:	2312      	movs	r3, #18
    4f2c:	e040      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P2:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f2e:	4618      	mov	r0, r3
    4f30:	f003 ff56 	bl	8de0 <malloc>
    4f34:	4b32      	ldr	r3, [pc, #200]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address_data, data, dlen);
    4f36:	4631      	mov	r1, r6
    4f38:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P1;
		break;
	case UBERTOOTH_BTLE_SLAVE_P2:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f3a:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f3c:	f004 fa3e 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P2;
    4f40:	2313      	movs	r3, #19
    4f42:	e035      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P3:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f44:	4618      	mov	r0, r3
    4f46:	f003 ff4b 	bl	8de0 <malloc>
    4f4a:	4b2d      	ldr	r3, [pc, #180]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address_data, data, dlen);
    4f4c:	4631      	mov	r1, r6
    4f4e:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P2;
		break;
	case UBERTOOTH_BTLE_SLAVE_P3:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f50:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f52:	f004 fa33 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P3;
    4f56:	2314      	movs	r3, #20
    4f58:	e02a      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P4:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f5a:	4618      	mov	r0, r3
    4f5c:	f003 ff40 	bl	8de0 <malloc>
    4f60:	4b27      	ldr	r3, [pc, #156]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address_data, data, dlen);
    4f62:	4631      	mov	r1, r6
    4f64:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P3;
		break;
	case UBERTOOTH_BTLE_SLAVE_P4:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f66:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f68:	f004 fa28 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P4;
    4f6c:	2315      	movs	r3, #21
    4f6e:	e01f      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P5:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f70:	4618      	mov	r0, r3
    4f72:	f003 ff35 	bl	8de0 <malloc>
    4f76:	4b22      	ldr	r3, [pc, #136]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address_data, data, dlen);
    4f78:	4631      	mov	r1, r6
    4f7a:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P4;
		break;
	case UBERTOOTH_BTLE_SLAVE_P5:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f7c:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f7e:	f004 fa1d 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P5;
    4f82:	2316      	movs	r3, #22
    4f84:	e014      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P6:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f86:	4618      	mov	r0, r3
    4f88:	f003 ff2a 	bl	8de0 <malloc>
    4f8c:	4b1c      	ldr	r3, [pc, #112]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address_data, data, dlen);
    4f8e:	4631      	mov	r1, r6
    4f90:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P5;
		break;
	case UBERTOOTH_BTLE_SLAVE_P6:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f92:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4f94:	f004 fa12 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P6;
    4f98:	2317      	movs	r3, #23
    4f9a:	e009      	b.n	4fb0 <vendor_request_handler+0x6b0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P7:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4f9c:	4618      	mov	r0, r3
    4f9e:	f003 ff1f 	bl	8de0 <malloc>
    4fa2:	4b17      	ldr	r3, [pc, #92]	; (5000 <vendor_request_handler+0x700>)
		memcpy(slave_mac_address_data, data, dlen);
    4fa4:	4631      	mov	r1, r6
    4fa6:	6a22      	ldr	r2, [r4, #32]
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
		memcpy(slave_mac_address_data, data, dlen);
		requested_mode = MODE_BT_SLAVE_LE_P6;
		break;
	case UBERTOOTH_BTLE_SLAVE_P7:
		slave_mac_address_data = (uint8_t*) malloc(sizeof(uint8_t)*dlen);
    4fa8:	6018      	str	r0, [r3, #0]
		memcpy(slave_mac_address_data, data, dlen);
    4faa:	f004 fa07 	bl	93bc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P7;
    4fae:	2318      	movs	r3, #24
    4fb0:	74a3      	strb	r3, [r4, #18]
    4fb2:	e01d      	b.n	4ff0 <vendor_request_handler+0x6f0>


	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4fb4:	7972      	ldrb	r2, [r6, #5]
    4fb6:	4b14      	ldr	r3, [pc, #80]	; (5008 <vendor_request_handler+0x708>)
		le.target[1] = data[4];
		le.target[2] = data[3];
		le.target[3] = data[2];
		le.target[4] = data[1];
		le.target[5] = data[0];
		le.target_set = 1;
    4fb8:	2001      	movs	r0, #1


	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[1] = data[4];
    4fbe:	7932      	ldrb	r2, [r6, #4]
    4fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target[2] = data[3];
    4fc4:	78f2      	ldrb	r2, [r6, #3]
    4fc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		le.target[3] = data[2];
    4fca:	78b2      	ldrb	r2, [r6, #2]
    4fcc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		le.target[4] = data[1];
    4fd0:	7872      	ldrb	r2, [r6, #1]
    4fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		le.target[5] = data[0];
    4fd6:	7832      	ldrb	r2, [r6, #0]
    4fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		le.target_set = 1;
    4fdc:	6418      	str	r0, [r3, #64]	; 0x40
		break;
    4fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    4fe2:	780b      	ldrb	r3, [r1, #0]
    4fe4:	74e3      	strb	r3, [r4, #19]
    4fe6:	e003      	b.n	4ff0 <vendor_request_handler+0x6f0>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    4fe8:	230d      	movs	r3, #13
    4fea:	74a3      	strb	r3, [r4, #18]
		ego_mode = request_params[0];
    4fec:	780b      	ldrb	r3, [r1, #0]
    4fee:	7523      	strb	r3, [r4, #20]
		break;

	default:
		return 0;
	}
	return 1;
    4ff0:	2001      	movs	r0, #1
    4ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4ff6:	2000      	movs	r0, #0

	default:
		return 0;
	}
	return 1;
}
    4ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ffc:	10001018 	.word	0x10001018
    5000:	100014d0 	.word	0x100014d0
    5004:	10000e58 	.word	0x10000e58
    5008:	1000044c 	.word	0x1000044c

0000500c <enqueue_with_ts>:

	return 1;
}

int enqueue_with_ts(uint8_t type, uint8_t* buf, uint32_t ts)
{
    500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5010:	4606      	mov	r6, r0
    5012:	460f      	mov	r7, r1
    5014:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    5016:	f002 f8dd 	bl	71d4 <usb_enqueue>
    501a:	4d10      	ldr	r5, [pc, #64]	; (505c <enqueue_with_ts+0x50>)

	/* fail if queue is full */
	if (f == NULL) {
    501c:	4604      	mov	r4, r0
    501e:	b928      	cbnz	r0, 502c <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    5020:	786b      	ldrb	r3, [r5, #1]
    5022:	f043 0304 	orr.w	r3, r3, #4
    5026:	706b      	strb	r3, [r5, #1]
		return 0;
    5028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    502c:	4b0c      	ldr	r3, [pc, #48]	; (5060 <enqueue_with_ts+0x54>)
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    502e:	7006      	strb	r6, [r0, #0]

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5030:	881b      	ldrh	r3, [r3, #0]
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    5032:	2600      	movs	r6, #0
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5034:	b29b      	uxth	r3, r3
    5036:	3b62      	subs	r3, #98	; 0x62
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    5038:	70c6      	strb	r6, [r0, #3]
	f->clk100ns = ts;
    503a:	f8c0 8004 	str.w	r8, [r0, #4]

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    503e:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    5040:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    5042:	72c6      	strb	r6, [r0, #11]

	memcpy(f->data, buf, DMA_SIZE);
    5044:	4639      	mov	r1, r7
    5046:	2232      	movs	r2, #50	; 0x32
    5048:	300e      	adds	r0, #14
    504a:	f004 f9b7 	bl	93bc <memcpy>

	f->status = status;
    504e:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    5050:	706e      	strb	r6, [r5, #1]
	f->rssi_avg = 0;
	f->rssi_count = 0;

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    5052:	7063      	strb	r3, [r4, #1]
	status = 0;

	return 1;
    5054:	2001      	movs	r0, #1
}
    5056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    505a:	bf00      	nop
    505c:	10000e34 	.word	0x10000e34
    5060:	1000044c 	.word	0x1000044c

00005064 <TIMER0_IRQHandler>:
	return 1;
}

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    5064:	b570      	push	{r4, r5, r6, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    5066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    506a:	681b      	ldr	r3, [r3, #0]
    506c:	07db      	lsls	r3, r3, #31
    506e:	d57f      	bpl.n	5170 <TIMER0_IRQHandler+0x10c>

		clkn += clkn_offset + 1;
    5070:	4940      	ldr	r1, [pc, #256]	; (5174 <TIMER0_IRQHandler+0x110>)
    5072:	4b41      	ldr	r3, [pc, #260]	; (5178 <TIMER0_IRQHandler+0x114>)
    5074:	6808      	ldr	r0, [r1, #0]
    5076:	681a      	ldr	r2, [r3, #0]
    5078:	4402      	add	r2, r0
    507a:	3201      	adds	r2, #1
    507c:	600a      	str	r2, [r1, #0]
		clkn_offset = 0;
    507e:	2200      	movs	r2, #0
    5080:	601a      	str	r2, [r3, #0]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5082:	4a3e      	ldr	r2, [pc, #248]	; (517c <TIMER0_IRQHandler+0x118>)
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    5084:	680c      	ldr	r4, [r1, #0]
    5086:	4b3e      	ldr	r3, [pc, #248]	; (5180 <TIMER0_IRQHandler+0x11c>)

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5088:	7a96      	ldrb	r6, [r2, #10]
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    508a:	69d8      	ldr	r0, [r3, #28]
    508c:	4615      	mov	r5, r2

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    508e:	b116      	cbz	r6, 5096 <TIMER0_IRQHandler+0x32>
    5090:	7a96      	ldrb	r6, [r2, #10]
    5092:	2e01      	cmp	r6, #1
    5094:	d105      	bne.n	50a2 <TIMER0_IRQHandler+0x3e>
			if ((clkn & 0x7f) == 0)
    5096:	680b      	ldr	r3, [r1, #0]
    5098:	065e      	lsls	r6, r3, #25
    509a:	d137      	bne.n	510c <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    509c:	2301      	movs	r3, #1
    509e:	72eb      	strb	r3, [r5, #11]
    50a0:	e034      	b.n	510c <TIMER0_IRQHandler+0xa8>
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    50a2:	7a95      	ldrb	r5, [r2, #10]
    50a4:	2d02      	cmp	r5, #2
    50a6:	d103      	bne.n	50b0 <TIMER0_IRQHandler+0x4c>
			if ((clkn & 0x1) == 0)
    50a8:	680b      	ldr	r3, [r1, #0]
    50aa:	07dc      	lsls	r4, r3, #31
    50ac:	d42e      	bmi.n	510c <TIMER0_IRQHandler+0xa8>
    50ae:	e02b      	b.n	5108 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    50b0:	7a95      	ldrb	r5, [r2, #10]
    50b2:	2d03      	cmp	r5, #3
    50b4:	d11c      	bne.n	50f0 <TIMER0_IRQHandler+0x8c>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    50b6:	7e1d      	ldrb	r5, [r3, #24]
    50b8:	2d03      	cmp	r5, #3
    50ba:	d127      	bne.n	510c <TIMER0_IRQHandler+0xa8>
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    50bc:	1a20      	subs	r0, r4, r0
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    50be:	0780      	lsls	r0, r0, #30
    50c0:	d124      	bne.n	510c <TIMER0_IRQHandler+0xa8>
				--le.interval_timer;
    50c2:	8c18      	ldrh	r0, [r3, #32]
    50c4:	b280      	uxth	r0, r0
    50c6:	3801      	subs	r0, #1
    50c8:	b280      	uxth	r0, r0
    50ca:	8418      	strh	r0, [r3, #32]
				if (le.interval_timer == 0) {
    50cc:	8c18      	ldrh	r0, [r3, #32]
    50ce:	b280      	uxth	r0, r0
    50d0:	b948      	cbnz	r0, 50e6 <TIMER0_IRQHandler+0x82>
					do_hop = 1;
    50d2:	2001      	movs	r0, #1
    50d4:	72d0      	strb	r0, [r2, #11]
					++le.conn_count;
    50d6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    50d8:	b292      	uxth	r2, r2
    50da:	4402      	add	r2, r0
    50dc:	b292      	uxth	r2, r2
    50de:	849a      	strh	r2, [r3, #36]	; 0x24
					le.interval_timer = le.conn_interval;
    50e0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    50e2:	841a      	strh	r2, [r3, #32]
    50e4:	e012      	b.n	510c <TIMER0_IRQHandler+0xa8>
				} else {
					TXLED_CLR; // hack!
    50e6:	4b27      	ldr	r3, [pc, #156]	; (5184 <TIMER0_IRQHandler+0x120>)
    50e8:	f44f 7280 	mov.w	r2, #256	; 0x100
    50ec:	601a      	str	r2, [r3, #0]
    50ee:	e00d      	b.n	510c <TIMER0_IRQHandler+0xa8>
				}
			}
		}
		else if (hop_mode == HOP_AFH) {
    50f0:	7a90      	ldrb	r0, [r2, #10]
    50f2:	2805      	cmp	r0, #5
    50f4:	d10a      	bne.n	510c <TIMER0_IRQHandler+0xa8>
			if( (last_hop + hop_timeout) == clkn ) {
    50f6:	4824      	ldr	r0, [pc, #144]	; (5188 <TIMER0_IRQHandler+0x124>)
    50f8:	6804      	ldr	r4, [r0, #0]
    50fa:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
    50fe:	680b      	ldr	r3, [r1, #0]
    5100:	b280      	uxth	r0, r0
    5102:	4420      	add	r0, r4
    5104:	4298      	cmp	r0, r3
    5106:	d101      	bne.n	510c <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    5108:	2301      	movs	r3, #1
    510a:	72d3      	strb	r3, [r2, #11]
			}
		}

		// Fix linear clock drift deviation
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    510c:	4a1f      	ldr	r2, [pc, #124]	; (518c <TIMER0_IRQHandler+0x128>)
    510e:	4b20      	ldr	r3, [pc, #128]	; (5190 <TIMER0_IRQHandler+0x12c>)
    5110:	6810      	ldr	r0, [r2, #0]
    5112:	b1c0      	cbz	r0, 5146 <TIMER0_IRQHandler+0xe2>
    5114:	8818      	ldrh	r0, [r3, #0]
    5116:	b280      	uxth	r0, r0
    5118:	b9a8      	cbnz	r0, 5146 <TIMER0_IRQHandler+0xe2>
			if(clkn >= clkn_next_drift_fix) {
    511a:	680c      	ldr	r4, [r1, #0]
    511c:	6810      	ldr	r0, [r2, #0]
    511e:	4284      	cmp	r4, r0
    5120:	d311      	bcc.n	5146 <TIMER0_IRQHandler+0xe2>

				// Too fast
				if(clk_drift_ppm >= 0) {
    5122:	481c      	ldr	r0, [pc, #112]	; (5194 <TIMER0_IRQHandler+0x130>)
    5124:	8800      	ldrh	r0, [r0, #0]
    5126:	b200      	sxth	r0, r0
    5128:	2800      	cmp	r0, #0
					clk100ns_offset = 1;
    512a:	bfac      	ite	ge
    512c:	2001      	movge	r0, #1
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    512e:	f641 0069 	movwlt	r0, #6249	; 0x1869
    5132:	8018      	strh	r0, [r3, #0]
				}
				clkn_last_drift_fix = clkn;
    5134:	680c      	ldr	r4, [r1, #0]
    5136:	4818      	ldr	r0, [pc, #96]	; (5198 <TIMER0_IRQHandler+0x134>)
    5138:	6004      	str	r4, [r0, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    513a:	6804      	ldr	r4, [r0, #0]
    513c:	4817      	ldr	r0, [pc, #92]	; (519c <TIMER0_IRQHandler+0x138>)
    513e:	8800      	ldrh	r0, [r0, #0]
    5140:	b280      	uxth	r0, r0
    5142:	4420      	add	r0, r4
    5144:	6010      	str	r0, [r2, #0]
			}
		}

		// Negative clock correction
		if(clk100ns_offset > 3124)
    5146:	8818      	ldrh	r0, [r3, #0]
    5148:	f640 4234 	movw	r2, #3124	; 0xc34
    514c:	b280      	uxth	r0, r0
    514e:	4290      	cmp	r0, r2
    5150:	d902      	bls.n	5158 <TIMER0_IRQHandler+0xf4>
			clkn += 2;
    5152:	680a      	ldr	r2, [r1, #0]
    5154:	3202      	adds	r2, #2
    5156:	600a      	str	r2, [r1, #0]

		T0MR0 = 3124 + clk100ns_offset;
    5158:	8819      	ldrh	r1, [r3, #0]
    515a:	4a11      	ldr	r2, [pc, #68]	; (51a0 <TIMER0_IRQHandler+0x13c>)
    515c:	b289      	uxth	r1, r1
    515e:	f601 4134 	addw	r1, r1, #3124	; 0xc34
    5162:	6011      	str	r1, [r2, #0]
		clk100ns_offset = 0;
    5164:	2200      	movs	r2, #0
    5166:	801a      	strh	r2, [r3, #0]

		/* Ack interrupt */
		T0IR = TIR_MR0_Interrupt;
    5168:	2201      	movs	r2, #1
    516a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    516e:	601a      	str	r2, [r3, #0]
    5170:	bd70      	pop	{r4, r5, r6, pc}
    5172:	bf00      	nop
    5174:	10001014 	.word	0x10001014
    5178:	10001008 	.word	0x10001008
    517c:	10000e34 	.word	0x10000e34
    5180:	1000044c 	.word	0x1000044c
    5184:	2009c03c 	.word	0x2009c03c
    5188:	10000ff0 	.word	0x10000ff0
    518c:	100014cc 	.word	0x100014cc
    5190:	10001162 	.word	0x10001162
    5194:	10001494 	.word	0x10001494
    5198:	1000100c 	.word	0x1000100c
    519c:	10001010 	.word	0x10001010
    51a0:	40004018 	.word	0x40004018

000051a4 <EINT3_IRQHandler>:
/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
void EINT3_IRQHandler()
{
	/* TODO - check specific source of shared interrupt */
	IO2IntClr   = PIN_GIO6; // clear interrupt
    51a4:	4b08      	ldr	r3, [pc, #32]	; (51c8 <EINT3_IRQHandler+0x24>)
    51a6:	2204      	movs	r2, #4
    51a8:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    51aa:	4b08      	ldr	r3, [pc, #32]	; (51cc <EINT3_IRQHandler+0x28>)
    51ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    51b0:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    51b2:	4b07      	ldr	r3, [pc, #28]	; (51d0 <EINT3_IRQHandler+0x2c>)
    51b4:	2201      	movs	r2, #1
    51b6:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    51b8:	4b06      	ldr	r3, [pc, #24]	; (51d4 <EINT3_IRQHandler+0x30>)
    51ba:	7a9a      	ldrb	r2, [r3, #10]
    51bc:	2a02      	cmp	r2, #2
		dma_discard = 0;
    51be:	bf04      	itt	eq
    51c0:	2200      	moveq	r2, #0
    51c2:	741a      	strbeq	r2, [r3, #16]
    51c4:	4770      	bx	lr
    51c6:	bf00      	nop
    51c8:	400280ac 	.word	0x400280ac
    51cc:	2009c09c 	.word	0x2009c09c
    51d0:	10001511 	.word	0x10001511
    51d4:	10000e34 	.word	0x10000e34

000051d8 <DMA_IRQHandler>:
		while ((clkn & 0xffffff) < stop_at);
	}
}

void DMA_IRQHandler()
{
    51d8:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    51da:	4b34      	ldr	r3, [pc, #208]	; (52ac <DMA_IRQHandler+0xd4>)
    51dc:	7c5a      	ldrb	r2, [r3, #17]
    51de:	2a01      	cmp	r2, #1
    51e0:	d029      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_FOLLOW
    51e2:	7c5a      	ldrb	r2, [r3, #17]
    51e4:	2a08      	cmp	r2, #8
    51e6:	d026      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_SPECAN
    51e8:	7c5a      	ldrb	r2, [r3, #17]
    51ea:	2a04      	cmp	r2, #4
    51ec:	d023      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_FOLLOW_LE
    51ee:	7c5a      	ldrb	r2, [r3, #17]
    51f0:	2a09      	cmp	r2, #9
    51f2:	d020      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_PROMISC_LE
    51f4:	7c5a      	ldrb	r2, [r3, #17]
    51f6:	2a0a      	cmp	r2, #10
    51f8:	d01d      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE
    51fa:	7c5a      	ldrb	r2, [r3, #17]
    51fc:	2a0c      	cmp	r2, #12
    51fe:	d01a      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P0
    5200:	7c5a      	ldrb	r2, [r3, #17]
    5202:	2a11      	cmp	r2, #17
    5204:	d017      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P1
    5206:	7c5a      	ldrb	r2, [r3, #17]
    5208:	2a12      	cmp	r2, #18
    520a:	d014      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P2
    520c:	7c5a      	ldrb	r2, [r3, #17]
    520e:	2a13      	cmp	r2, #19
    5210:	d011      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P3
    5212:	7c5a      	ldrb	r2, [r3, #17]
    5214:	2a14      	cmp	r2, #20
    5216:	d00e      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P4
    5218:	7c59      	ldrb	r1, [r3, #17]
    521a:	2915      	cmp	r1, #21
    521c:	d00b      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P5
    521e:	7c59      	ldrb	r1, [r3, #17]
    5220:	2916      	cmp	r1, #22
    5222:	d008      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P6
    5224:	7c59      	ldrb	r1, [r3, #17]
    5226:	2917      	cmp	r1, #23
    5228:	d005      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P7
    522a:	7c59      	ldrb	r1, [r3, #17]
    522c:	2918      	cmp	r1, #24
    522e:	d002      	beq.n	5236 <DMA_IRQHandler+0x5e>
	   || mode == MODE_RX_GENERIC)
    5230:	7c5a      	ldrb	r2, [r3, #17]
    5232:	2a0f      	cmp	r2, #15
    5234:	d139      	bne.n	52aa <DMA_IRQHandler+0xd2>
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
    5236:	4a1e      	ldr	r2, [pc, #120]	; (52b0 <DMA_IRQHandler+0xd8>)
    5238:	6812      	ldr	r2, [r2, #0]
    523a:	07d0      	lsls	r0, r2, #31
    523c:	d535      	bpl.n	52aa <DMA_IRQHandler+0xd2>
			if (DMACIntTCStat & (1 << 0)) {
    523e:	4a1d      	ldr	r2, [pc, #116]	; (52b4 <DMA_IRQHandler+0xdc>)
    5240:	6812      	ldr	r2, [r2, #0]
    5242:	07d1      	lsls	r1, r2, #31
    5244:	d526      	bpl.n	5294 <DMA_IRQHandler+0xbc>
				DMACIntTCClear = (1 << 0);
    5246:	4a1c      	ldr	r2, [pc, #112]	; (52b8 <DMA_IRQHandler+0xe0>)
    5248:	2101      	movs	r1, #1
    524a:	6011      	str	r1, [r2, #0]

				if (hop_mode == HOP_BLUETOOTH)
    524c:	7a9a      	ldrb	r2, [r3, #10]
    524e:	2a02      	cmp	r2, #2
    5250:	d103      	bne.n	525a <DMA_IRQHandler+0x82>
					DIO_SSEL_SET;
    5252:	4a1a      	ldr	r2, [pc, #104]	; (52bc <DMA_IRQHandler+0xe4>)
    5254:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5258:	6011      	str	r1, [r2, #0]

				idle_buf_clk100ns  = CLK100NS;
    525a:	4a19      	ldr	r2, [pc, #100]	; (52c0 <DMA_IRQHandler+0xe8>)
    525c:	4819      	ldr	r0, [pc, #100]	; (52c4 <DMA_IRQHandler+0xec>)
    525e:	6811      	ldr	r1, [r2, #0]
    5260:	6800      	ldr	r0, [r0, #0]
    5262:	f3c1 0113 	ubfx	r1, r1, #0, #20
    5266:	f640 4435 	movw	r4, #3125	; 0xc35
    526a:	fb04 0101 	mla	r1, r4, r1, r0
    526e:	6059      	str	r1, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    5270:	6812      	ldr	r2, [r2, #0]
    5272:	f3c2 5207 	ubfx	r2, r2, #20, #8
    5276:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    5278:	4a13      	ldr	r2, [pc, #76]	; (52c8 <DMA_IRQHandler+0xf0>)
    527a:	8812      	ldrh	r2, [r2, #0]
    527c:	b292      	uxth	r2, r2
    527e:	811a      	strh	r2, [r3, #8]

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    5280:	4a12      	ldr	r2, [pc, #72]	; (52cc <DMA_IRQHandler+0xf4>)
				active_rxbuf = idle_rxbuf;
    5282:	4b13      	ldr	r3, [pc, #76]	; (52d0 <DMA_IRQHandler+0xf8>)
				idle_buf_clk100ns  = CLK100NS;
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    5284:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    5286:	6818      	ldr	r0, [r3, #0]
    5288:	6010      	str	r0, [r2, #0]
				idle_rxbuf = tmp;
    528a:	6019      	str	r1, [r3, #0]

				++rx_tc;
    528c:	4b11      	ldr	r3, [pc, #68]	; (52d4 <DMA_IRQHandler+0xfc>)
    528e:	681a      	ldr	r2, [r3, #0]
    5290:	3201      	adds	r2, #1
    5292:	601a      	str	r2, [r3, #0]
			}
			if (DMACIntErrStat & (1 << 0)) {
    5294:	4b10      	ldr	r3, [pc, #64]	; (52d8 <DMA_IRQHandler+0x100>)
    5296:	681b      	ldr	r3, [r3, #0]
    5298:	07da      	lsls	r2, r3, #31
    529a:	d506      	bpl.n	52aa <DMA_IRQHandler+0xd2>
				DMACIntErrClr = (1 << 0);
    529c:	4b0f      	ldr	r3, [pc, #60]	; (52dc <DMA_IRQHandler+0x104>)
    529e:	2201      	movs	r2, #1
    52a0:	601a      	str	r2, [r3, #0]
				++rx_err;
    52a2:	4b0f      	ldr	r3, [pc, #60]	; (52e0 <DMA_IRQHandler+0x108>)
    52a4:	681a      	ldr	r2, [r3, #0]
    52a6:	3201      	adds	r2, #1
    52a8:	601a      	str	r2, [r3, #0]
    52aa:	bd10      	pop	{r4, pc}
    52ac:	10000e34 	.word	0x10000e34
    52b0:	50004000 	.word	0x50004000
    52b4:	50004004 	.word	0x50004004
    52b8:	50004008 	.word	0x50004008
    52bc:	2009c098 	.word	0x2009c098
    52c0:	10001014 	.word	0x10001014
    52c4:	40004008 	.word	0x40004008
    52c8:	1000044c 	.word	0x1000044c
    52cc:	10001054 	.word	0x10001054
    52d0:	10001170 	.word	0x10001170
    52d4:	10000ff4 	.word	0x10000ff4
    52d8:	5000400c 	.word	0x5000400c
    52dc:	50004010 	.word	0x50004010
    52e0:	1000150c 	.word	0x1000150c

000052e4 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data, u16 tx_pwr, u16 ch)
{
    52e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52e8:	b091      	sub	sp, #68	; 0x44
    52ea:	f8bd 8068 	ldrh.w	r8, [sp, #104]	; 0x68
    52ee:	468a      	mov	sl, r1
    52f0:	4605      	mov	r5, r0
    52f2:	4693      	mov	fp, r2
	u8 txbuf[64];
	u8 tx_len;
	u8 byte;
	u16 gio_save;
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);
    52f4:	f003 090f 	and.w	r9, r3, #15
    52f8:	f10d 34ff 	add.w	r4, sp, #4294967295	; 0xffffffff
    52fc:	f10d 0103 	add.w	r1, sp, #3

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
    5300:	2200      	movs	r2, #0
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
    5302:	b2eb      	uxtb	r3, r5
		aa >>= 8;
		txbuf[i] = 0;
    5304:	7062      	strb	r2, [r4, #1]
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
    5306:	0a2d      	lsrs	r5, r5, #8
		txbuf[i] = 0;
    5308:	2607      	movs	r6, #7
		for (j = 0; j < 8; ++j) {
			txbuf[i] |= (byte & 1) << (7 - j);
    530a:	f003 0001 	and.w	r0, r3, #1
    530e:	40b0      	lsls	r0, r6
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5310:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			txbuf[i] |= (byte & 1) << (7 - j);
    5314:	ea40 0202 	orr.w	r2, r0, r2
    5318:	b2d2      	uxtb	r2, r2
			byte >>= 1;
    531a:	ea4f 0353 	mov.w	r3, r3, lsr #1
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    531e:	d2f4      	bcs.n	530a <le_transmit+0x26>
    5320:	f804 2f01 	strb.w	r2, [r4, #1]!
	u16 gio_save;
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5324:	428c      	cmp	r4, r1
    5326:	d1eb      	bne.n	5300 <le_transmit+0x1c>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
    5328:	f1a8 0062 	sub.w	r0, r8, #98	; 0x62
    532c:	b2c0      	uxtb	r0, r0
    532e:	f001 fe49 	bl	6fc4 <btle_channel_index>
    5332:	4b50      	ldr	r3, [pc, #320]	; (5474 <le_transmit+0x190>)
	for (i = 0; i < len; ++i) {
    5334:	2400      	movs	r4, #0
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
    5336:	5c1f      	ldrb	r7, [r3, r0]
	for (i = 0; i < len; ++i) {
    5338:	4554      	cmp	r4, sl
    533a:	d220      	bcs.n	537e <le_transmit+0x9a>
    533c:	a800      	add	r0, sp, #0
		byte = data[i];
    533e:	f81b 3004 	ldrb.w	r3, [fp, r4]
    5342:	4420      	add	r0, r4
    5344:	2607      	movs	r6, #7
    5346:	2200      	movs	r2, #0
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    5348:	494a      	ldr	r1, [pc, #296]	; (5474 <le_transmit+0x190>)
    534a:	f003 0e01 	and.w	lr, r3, #1
    534e:	4439      	add	r1, r7
    5350:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    5354:	3701      	adds	r7, #1
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    5356:	ea8e 0e01 	eor.w	lr, lr, r1
			idx = (idx + 1) % sizeof(whitening);
    535a:	217f      	movs	r1, #127	; 0x7f
    535c:	fbb7 fcf1 	udiv	ip, r7, r1
    5360:	fb01 771c 	mls	r7, r1, ip, r7
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    5364:	fa0e f106 	lsl.w	r1, lr, r6
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5368:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    536c:	ea41 0202 	orr.w	r2, r1, r2
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			byte >>= 1;
    5370:	ea4f 0353 	mov.w	r3, r3, lsr #1
			txbuf[i+4] |= bit << (7 - j);
    5374:	b2d2      	uxtb	r2, r2
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5376:	d2e7      	bcs.n	5348 <le_transmit+0x64>
    5378:	7102      	strb	r2, [r0, #4]
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(jw_channel-2402)];
	for (i = 0; i < len; ++i) {
    537a:	3401      	adds	r4, #1
    537c:	e7dc      	b.n	5338 <le_transmit+0x54>
	}

	len += 4; // include the AA in len

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    537e:	200d      	movs	r0, #13
    5380:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5384:	f002 ff89 	bl	829a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5388:	2012      	movs	r0, #18
    538a:	f642 3122 	movw	r1, #11042	; 0x2b22
    538e:	f002 ff84 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5392:	2014      	movs	r0, #20
    5394:	f241 314b 	movw	r1, #4939	; 0x134b
    5398:	f002 ff7f 	bl	829a <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    539c:	2020      	movs	r0, #32
    539e:	f640 4101 	movw	r1, #3073	; 0xc01
    53a2:	f002 ff7a 	bl	829a <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   jw_channel);
    53a6:	2002      	movs	r0, #2
    53a8:	4641      	mov	r1, r8
    53aa:	f002 ff76 	bl	829a <cc2400_set>
	// 011 : -7
	// 100 : -4.6
	// 101 : -2.8
	// 110 : -1.3
	// 111 : 0
	cc2400_set(FREND, tx_pwr);
    53ae:	2005      	movs	r0, #5
    53b0:	4649      	mov	r1, r9
    53b2:	f002 ff72 	bl	829a <cc2400_set>
	//cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    53b6:	2003      	movs	r0, #3
    53b8:	2140      	movs	r1, #64	; 0x40
    53ba:	f002 ff6e 	bl	829a <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    53be:	2114      	movs	r1, #20
    53c0:	2023      	movs	r0, #35	; 0x23
    53c2:	f002 ff6a 	bl	829a <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    53c6:	07ea      	lsls	r2, r5, #31
		cc2400_set(SYNCH,   0xaaaa);
    53c8:	bf4c      	ite	mi
    53ca:	f64a 21aa 	movwmi	r1, #43690	; 0xaaaa
	else
		cc2400_set(SYNCH,   0x5555);
    53ce:	f245 5155 	movwpl	r1, #21845	; 0x5555
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
		cc2400_set(SYNCH,   0xaaaa);
    53d2:	202d      	movs	r0, #45	; 0x2d
	else
		cc2400_set(SYNCH,   0x5555);
    53d4:	f002 ff61 	bl	829a <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    53d8:	2008      	movs	r0, #8
    53da:	f002 ff55 	bl	8288 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53de:	f3c0 0108 	ubfx	r1, r0, #0, #9
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    53e2:	f10a 0a04 	add.w	sl, sl, #4
		cc2400_set(SYNCH,   0xaaaa);
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    53e6:	4604      	mov	r4, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53e8:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    53ec:	2008      	movs	r0, #8
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    53ee:	fa5f fa8a 	uxtb.w	sl, sl
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53f2:	f002 ff52 	bl	829a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    53f6:	f002 fff3 	bl	83e0 <cc2400_status>
    53fa:	0643      	lsls	r3, r0, #25
    53fc:	d5fb      	bpl.n	53f6 <le_transmit+0x112>
	cc2400_strobe(SFSON);
    53fe:	2061      	movs	r0, #97	; 0x61
    5400:	f002 fff5 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5404:	f002 ffec 	bl	83e0 <cc2400_status>
    5408:	0747      	lsls	r7, r0, #29
    540a:	d5fb      	bpl.n	5404 <le_transmit+0x120>
	TXLED_SET;
    540c:	4b1a      	ldr	r3, [pc, #104]	; (5478 <le_transmit+0x194>)
    540e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5412:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5414:	2280      	movs	r2, #128	; 0x80
    5416:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5418:	200e      	movs	r0, #14
    541a:	f002 ff35 	bl	8288 <cc2400_get>
    541e:	f000 001f 	and.w	r0, r0, #31
    5422:	280f      	cmp	r0, #15
    5424:	d1f8      	bne.n	5418 <le_transmit+0x134>
	cc2400_strobe(STX);
    5426:	2063      	movs	r0, #99	; 0x63
    5428:	f002 ffe1 	bl	83ee <cc2400_strobe>
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
	}*/

	//JWHUR cc2400 fifo write
	while (GIO6) ;
    542c:	4b13      	ldr	r3, [pc, #76]	; (547c <le_transmit+0x198>)
    542e:	681b      	ldr	r3, [r3, #0]
    5430:	075e      	lsls	r6, r3, #29
    5432:	d4fb      	bmi.n	542c <le_transmit+0x148>
	cc2400_fifo_write(len, txbuf);
    5434:	4650      	mov	r0, sl
    5436:	4669      	mov	r1, sp
    5438:	f002 ff42 	bl	82c0 <cc2400_fifo_write>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    543c:	200e      	movs	r0, #14
    543e:	f002 ff23 	bl	8288 <cc2400_get>
    5442:	f000 001f 	and.w	r0, r0, #31
    5446:	280f      	cmp	r0, #15
    5448:	d1f8      	bne.n	543c <le_transmit+0x158>
	TXLED_CLR;
    544a:	4b0d      	ldr	r3, [pc, #52]	; (5480 <le_transmit+0x19c>)
    544c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5450:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5452:	2064      	movs	r0, #100	; 0x64
    5454:	f002 ffcb 	bl	83ee <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5458:	f002 ffc2 	bl	83e0 <cc2400_status>
    545c:	0745      	lsls	r5, r0, #29
    545e:	d4fb      	bmi.n	5458 <le_transmit+0x174>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5460:	4b08      	ldr	r3, [pc, #32]	; (5484 <le_transmit+0x1a0>)
    5462:	2280      	movs	r2, #128	; 0x80
    5464:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5466:	2008      	movs	r0, #8
    5468:	4621      	mov	r1, r4
    546a:	f002 ff16 	bl	829a <cc2400_set>
}
    546e:	b011      	add	sp, #68	; 0x44
    5470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5474:	0000979c 	.word	0x0000979c
    5478:	2009c038 	.word	0x2009c038
    547c:	2009c054 	.word	0x2009c054
    5480:	2009c03c 	.word	0x2009c03c
    5484:	2009c05c 	.word	0x2009c05c

00005488 <le_jam>:

void le_jam(void) {
    5488:	b508      	push	{r3, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    548a:	200d      	movs	r0, #13
    548c:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5490:	f002 ff03 	bl	829a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5494:	2012      	movs	r0, #18
    5496:	f642 3122 	movw	r1, #11042	; 0x2b22
    549a:	f002 fefe 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    549e:	2014      	movs	r0, #20
    54a0:	f242 314b 	movw	r1, #9035	; 0x234b
    54a4:	f002 fef9 	bl	829a <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    54a8:	2020      	movs	r0, #32
    54aa:	f640 4101 	movw	r1, #3073	; 0xc01
    54ae:	f002 fef4 	bl	829a <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    54b2:	2005      	movs	r0, #5
    54b4:	210b      	movs	r1, #11
    54b6:	f002 fef0 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    54ba:	2003      	movs	r0, #3
    54bc:	2140      	movs	r1, #64	; 0x40
    54be:	f002 feec 	bl	829a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    54c2:	f002 ff8d 	bl	83e0 <cc2400_status>
    54c6:	0640      	lsls	r0, r0, #25
    54c8:	d5fb      	bpl.n	54c2 <le_jam+0x3a>
	cc2400_strobe(SFSON);
    54ca:	2061      	movs	r0, #97	; 0x61
    54cc:	f002 ff8f 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    54d0:	f002 ff86 	bl	83e0 <cc2400_status>
    54d4:	0741      	lsls	r1, r0, #29
    54d6:	d5fb      	bpl.n	54d0 <le_jam+0x48>
	TXLED_SET;
    54d8:	4b08      	ldr	r3, [pc, #32]	; (54fc <le_jam+0x74>)
    54da:	f44f 7280 	mov.w	r2, #256	; 0x100
    54de:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    54e0:	2280      	movs	r2, #128	; 0x80
    54e2:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    54e4:	200e      	movs	r0, #14
    54e6:	f002 fecf 	bl	8288 <cc2400_get>
    54ea:	f000 001f 	and.w	r0, r0, #31
    54ee:	280f      	cmp	r0, #15
    54f0:	d1f8      	bne.n	54e4 <le_jam+0x5c>
	cc2400_strobe(STX);
    54f2:	2063      	movs	r0, #99	; 0x63
#endif
}
    54f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);
    54f8:	f002 bf79 	b.w	83ee <cc2400_strobe>
    54fc:	2009c038 	.word	0x2009c038

00005500 <hop>:
}

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    5500:	b538      	push	{r3, r4, r5, lr}
	do_hop = 0;
    5502:	4c5f      	ldr	r4, [pc, #380]	; (5680 <hop+0x180>)
    5504:	2300      	movs	r3, #0
    5506:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    5508:	4b5e      	ldr	r3, [pc, #376]	; (5684 <hop+0x184>)
    550a:	4a5f      	ldr	r2, [pc, #380]	; (5688 <hop+0x188>)
    550c:	6819      	ldr	r1, [r3, #0]
    550e:	6011      	str	r1, [r2, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    5510:	7aa2      	ldrb	r2, [r4, #10]
    5512:	b94a      	cbnz	r2, 5528 <hop+0x28>
		if (cc2400_get(FSDIV) == (channel - 1))
    5514:	2002      	movs	r0, #2
    5516:	f002 feb7 	bl	8288 <cc2400_get>
    551a:	4b5c      	ldr	r3, [pc, #368]	; (568c <hop+0x18c>)
    551c:	881b      	ldrh	r3, [r3, #0]
    551e:	b29b      	uxth	r3, r3
    5520:	3b01      	subs	r3, #1
    5522:	4298      	cmp	r0, r3
    5524:	d17f      	bne.n	5626 <hop+0x126>
    5526:	bd38      	pop	{r3, r4, r5, pc}
			return;
	}
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
    5528:	7aa2      	ldrb	r2, [r4, #10]
    552a:	2a01      	cmp	r2, #1
    552c:	d131      	bne.n	5592 <hop+0x92>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    552e:	4b58      	ldr	r3, [pc, #352]	; (5690 <hop+0x190>)
    5530:	7819      	ldrb	r1, [r3, #0]
    5532:	4b58      	ldr	r3, [pc, #352]	; (5694 <hop+0x194>)
    5534:	7818      	ldrb	r0, [r3, #0]
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
		do {
			channel += 32;
    5536:	4b55      	ldr	r3, [pc, #340]	; (568c <hop+0x18c>)
    5538:	881a      	ldrh	r2, [r3, #0]
    553a:	b292      	uxth	r2, r2
    553c:	3220      	adds	r2, #32
    553e:	b292      	uxth	r2, r2
    5540:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    5542:	881a      	ldrh	r2, [r3, #0]
    5544:	b292      	uxth	r2, r2
    5546:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    554a:	d904      	bls.n	5556 <hop+0x56>
				channel -= 79;
    554c:	881a      	ldrh	r2, [r3, #0]
    554e:	b292      	uxth	r2, r2
    5550:	3a4f      	subs	r2, #79	; 0x4f
    5552:	b292      	uxth	r2, r2
    5554:	801a      	strh	r2, [r3, #0]
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    5556:	2900      	cmp	r1, #0
    5558:	d065      	beq.n	5626 <hop+0x126>
    555a:	2800      	cmp	r0, #0
    555c:	d063      	beq.n	5626 <hop+0x126>
    555e:	881a      	ldrh	r2, [r3, #0]
    5560:	881d      	ldrh	r5, [r3, #0]
    5562:	b292      	uxth	r2, r2
    5564:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    5568:	2208      	movs	r2, #8
    556a:	fb93 f3f2 	sdiv	r3, r3, r2
    556e:	4a4a      	ldr	r2, [pc, #296]	; (5698 <hop+0x198>)
    5570:	b2ad      	uxth	r5, r5
    5572:	5cd2      	ldrb	r2, [r2, r3]
    5574:	4b49      	ldr	r3, [pc, #292]	; (569c <hop+0x19c>)
    5576:	f6a5 1562 	subw	r5, r5, #2402	; 0x962
    557a:	402b      	ands	r3, r5
    557c:	2b00      	cmp	r3, #0
    557e:	da03      	bge.n	5588 <hop+0x88>
    5580:	3b01      	subs	r3, #1
    5582:	f063 0307 	orn	r3, r3, #7
    5586:	3301      	adds	r3, #1
    5588:	fa42 f303 	asr.w	r3, r2, r3
    558c:	07dd      	lsls	r5, r3, #31
    558e:	d5d2      	bpl.n	5536 <hop+0x36>
    5590:	e049      	b.n	5626 <hop+0x126>
	}

	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
    5592:	7aa2      	ldrb	r2, [r4, #10]
    5594:	2a05      	cmp	r2, #5
    5596:	d12d      	bne.n	55f4 <hop+0xf4>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5598:	4b3d      	ldr	r3, [pc, #244]	; (5690 <hop+0x190>)
    559a:	7819      	ldrb	r1, [r3, #0]
	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
		do {
			channel += 32;
    559c:	4b3b      	ldr	r3, [pc, #236]	; (568c <hop+0x18c>)
    559e:	881a      	ldrh	r2, [r3, #0]
    55a0:	b292      	uxth	r2, r2
    55a2:	3220      	adds	r2, #32
    55a4:	b292      	uxth	r2, r2
    55a6:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    55a8:	881a      	ldrh	r2, [r3, #0]
    55aa:	b292      	uxth	r2, r2
    55ac:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    55b0:	d904      	bls.n	55bc <hop+0xbc>
				channel -= 79;
    55b2:	881a      	ldrh	r2, [r3, #0]
    55b4:	b292      	uxth	r2, r2
    55b6:	3a4f      	subs	r2, #79	; 0x4f
    55b8:	b292      	uxth	r2, r2
    55ba:	801a      	strh	r2, [r3, #0]
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    55bc:	294f      	cmp	r1, #79	; 0x4f
    55be:	d032      	beq.n	5626 <hop+0x126>
    55c0:	881a      	ldrh	r2, [r3, #0]
    55c2:	8818      	ldrh	r0, [r3, #0]
    55c4:	b292      	uxth	r2, r2
    55c6:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    55ca:	2208      	movs	r2, #8
    55cc:	fb93 f3f2 	sdiv	r3, r3, r2
    55d0:	4a31      	ldr	r2, [pc, #196]	; (5698 <hop+0x198>)
    55d2:	b280      	uxth	r0, r0
    55d4:	5cd2      	ldrb	r2, [r2, r3]
    55d6:	4b31      	ldr	r3, [pc, #196]	; (569c <hop+0x19c>)
    55d8:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    55dc:	4003      	ands	r3, r0
    55de:	2b00      	cmp	r3, #0
    55e0:	da03      	bge.n	55ea <hop+0xea>
    55e2:	3b01      	subs	r3, #1
    55e4:	f063 0307 	orn	r3, r3, #7
    55e8:	3301      	adds	r3, #1
    55ea:	fa42 f303 	asr.w	r3, r2, r3
    55ee:	07da      	lsls	r2, r3, #31
    55f0:	d4d4      	bmi.n	559c <hop+0x9c>
    55f2:	e018      	b.n	5626 <hop+0x126>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    55f4:	7aa2      	ldrb	r2, [r4, #10]
    55f6:	2a02      	cmp	r2, #2
    55f8:	d105      	bne.n	5606 <hop+0x106>
		channel = next_hop(clkn);
    55fa:	6818      	ldr	r0, [r3, #0]
    55fc:	f001 fc44 	bl	6e88 <next_hop>
    5600:	4b22      	ldr	r3, [pc, #136]	; (568c <hop+0x18c>)
    5602:	8018      	strh	r0, [r3, #0]
    5604:	e00f      	b.n	5626 <hop+0x126>
	}

	else if (hop_mode == HOP_BTLE) {
    5606:	7aa3      	ldrb	r3, [r4, #10]
    5608:	2b03      	cmp	r3, #3
    560a:	d105      	bne.n	5618 <hop+0x118>
		channel = btle_next_hop(&le);
    560c:	4d1f      	ldr	r5, [pc, #124]	; (568c <hop+0x18c>)
    560e:	1d28      	adds	r0, r5, #4
    5610:	f001 fd03 	bl	701a <btle_next_hop>
    5614:	8028      	strh	r0, [r5, #0]
    5616:	e006      	b.n	5626 <hop+0x126>
	}

	else if (hop_mode == HOP_DIRECT) {
    5618:	7aa3      	ldrb	r3, [r4, #10]
    561a:	2b04      	cmp	r3, #4
    561c:	d103      	bne.n	5626 <hop+0x126>
		channel = hop_direct_channel;
    561e:	89a2      	ldrh	r2, [r4, #12]
    5620:	4b1a      	ldr	r3, [pc, #104]	; (568c <hop+0x18c>)
    5622:	b292      	uxth	r2, r2
    5624:	801a      	strh	r2, [r3, #0]
	}
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    5626:	2064      	movs	r0, #100	; 0x64
    5628:	f002 fee1 	bl	83ee <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    562c:	f002 fed8 	bl	83e0 <cc2400_status>
    5630:	0743      	lsls	r3, r0, #29
    5632:	d4fb      	bmi.n	562c <hop+0x12c>
    5634:	4d15      	ldr	r5, [pc, #84]	; (568c <hop+0x18c>)

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    5636:	7c60      	ldrb	r0, [r4, #17]
		cc2400_set(FSDIV, channel);
    5638:	8829      	ldrh	r1, [r5, #0]
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    563a:	b2c0      	uxtb	r0, r0
    563c:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel);
    563e:	b289      	uxth	r1, r1
	else
		cc2400_set(FSDIV, channel - 1);
    5640:	bf1e      	ittt	ne
    5642:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    5646:	2002      	movne	r0, #2
    5648:	b289      	uxthne	r1, r1
    564a:	f002 fe26 	bl	829a <cc2400_set>

	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    564e:	7aa3      	ldrb	r3, [r4, #10]
    5650:	b11b      	cbz	r3, 565a <hop+0x15a>
		cs_threshold_calc_and_set(channel);
    5652:	8828      	ldrh	r0, [r5, #0]
    5654:	b280      	uxth	r0, r0
    5656:	f001 fe9d 	bl	7394 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    565a:	2061      	movs	r0, #97	; 0x61
    565c:	f002 fec7 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5660:	f002 febe 	bl	83e0 <cc2400_status>
    5664:	0745      	lsls	r5, r0, #29
    5666:	d5fb      	bpl.n	5660 <hop+0x160>

	dma_discard = 1;
    5668:	2301      	movs	r3, #1
    566a:	7423      	strb	r3, [r4, #16]

	if(mode == MODE_TX_SYMBOLS)
    566c:	7c63      	ldrb	r3, [r4, #17]
    566e:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    5670:	bf0c      	ite	eq
    5672:	2063      	moveq	r0, #99	; 0x63
	else
		cc2400_strobe(SRX);
    5674:	2062      	movne	r0, #98	; 0x62
}
    5676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	dma_discard = 1;

	if(mode == MODE_TX_SYMBOLS)
		cc2400_strobe(STX);
	else
		cc2400_strobe(SRX);
    567a:	f002 beb8 	b.w	83ee <cc2400_strobe>
    567e:	bf00      	nop
    5680:	10000e34 	.word	0x10000e34
    5684:	10001014 	.word	0x10001014
    5688:	10000ff0 	.word	0x10000ff0
    568c:	1000044c 	.word	0x1000044c
    5690:	10000ff9 	.word	0x10000ff9
    5694:	10001497 	.word	0x10001497
    5698:	10000ffb 	.word	0x10000ffb
    569c:	80000007 	.word	0x80000007

000056a0 <bt_stream_rx>:
}

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    56a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int8_t rssi;
	int8_t rssi_at_trigger;

	RXLED_CLR;
    56a4:	4b49      	ldr	r3, [pc, #292]	; (57cc <bt_stream_rx+0x12c>)
    56a6:	2210      	movs	r2, #16
    56a8:	601a      	str	r2, [r3, #0]

	queue_init();
    56aa:	f001 fd85 	bl	71b8 <queue_init>
	dio_ssp_init();
    56ae:	f002 fd63 	bl	8178 <dio_ssp_init>
	dma_init();
    56b2:	f001 ff5f 	bl	7574 <dma_init>
	dio_ssp_start();
    56b6:	f001 ffe3 	bl	7680 <dio_ssp_start>

	cc2400_rx();
    56ba:	f7fe fe8d 	bl	43d8 <cc2400_rx>

	cs_trigger_enable();
    56be:	f001 fe9b 	bl	73f8 <cs_trigger_enable>

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    56c2:	4c43      	ldr	r4, [pc, #268]	; (57d0 <bt_stream_rx+0x130>)
    56c4:	7ca3      	ldrb	r3, [r4, #18]
    56c6:	46a1      	mov	r9, r4
    56c8:	2b01      	cmp	r3, #1
    56ca:	d175      	bne.n	57b8 <bt_stream_rx+0x118>
	{

		RXLED_CLR;
    56cc:	4b3f      	ldr	r3, [pc, #252]	; (57cc <bt_stream_rx+0x12c>)
    56ce:	2210      	movs	r2, #16
    56d0:	601a      	str	r2, [r3, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    56d2:	f001 fde7 	bl	72a4 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    56d6:	2580      	movs	r5, #128	; 0x80
		while (!rx_tc) {
    56d8:	4f3e      	ldr	r7, [pc, #248]	; (57d4 <bt_stream_rx+0x134>)
    56da:	4e3f      	ldr	r6, [pc, #252]	; (57d8 <bt_stream_rx+0x138>)
    56dc:	683b      	ldr	r3, [r7, #0]
    56de:	f8df 8118 	ldr.w	r8, [pc, #280]	; 57f8 <bt_stream_rx+0x158>
    56e2:	bb2b      	cbnz	r3, 5730 <bt_stream_rx+0x90>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    56e4:	2006      	movs	r0, #6
    56e6:	f002 fdcf 	bl	8288 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    56ea:	7833      	ldrb	r3, [r6, #0]
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while (!rx_tc) {
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    56ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    56f0:	b163      	cbz	r3, 570c <bt_stream_rx+0x6c>
    56f2:	b26b      	sxtb	r3, r5
    56f4:	3380      	adds	r3, #128	; 0x80
    56f6:	d109      	bne.n	570c <bt_stream_rx+0x6c>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    56f8:	4b38      	ldr	r3, [pc, #224]	; (57dc <bt_stream_rx+0x13c>)
    56fa:	b240      	sxtb	r0, r0
    56fc:	f993 5000 	ldrsb.w	r5, [r3]
    5700:	3536      	adds	r5, #54	; 0x36
    5702:	42a8      	cmp	r0, r5
    5704:	bfa8      	it	ge
    5706:	4605      	movge	r5, r0
    5708:	b2ed      	uxtb	r5, r5
				rssi_at_trigger = rssi;
    570a:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    570c:	b240      	sxtb	r0, r0
    570e:	f001 fde5 	bl	72dc <rssi_add>

			handle_usb(clkn);
    5712:	f8d8 0000 	ldr.w	r0, [r8]
    5716:	f001 fdb1 	bl	727c <handle_usb>

			/* If timer says time to hop, do it. */
			if (do_hop) {
    571a:	f899 300b 	ldrb.w	r3, [r9, #11]
    571e:	b113      	cbz	r3, 5726 <bt_stream_rx+0x86>
				hop();
    5720:	f7ff feee 	bl	5500 <hop>
    5724:	e7d8      	b.n	56d8 <bt_stream_rx+0x38>
			} else {
				TXLED_CLR;
    5726:	4b29      	ldr	r3, [pc, #164]	; (57cc <bt_stream_rx+0x12c>)
    5728:	f44f 7280 	mov.w	r2, #256	; 0x100
    572c:	601a      	str	r2, [r3, #0]
    572e:	e7d3      	b.n	56d8 <bt_stream_rx+0x38>
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    5730:	4b2b      	ldr	r3, [pc, #172]	; (57e0 <bt_stream_rx+0x140>)
    5732:	2210      	movs	r2, #16

		if (rx_err) {
    5734:	4d2b      	ldr	r5, [pc, #172]	; (57e4 <bt_stream_rx+0x144>)
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    5736:	601a      	str	r2, [r3, #0]

		if (rx_err) {
    5738:	682b      	ldr	r3, [r5, #0]
    573a:	b11b      	cbz	r3, 5744 <bt_stream_rx+0xa4>
			status |= DMA_ERROR;
    573c:	7863      	ldrb	r3, [r4, #1]
    573e:	f043 0302 	orr.w	r3, r3, #2
    5742:	7063      	strb	r3, [r4, #1]
		}

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5744:	683b      	ldr	r3, [r7, #0]
    5746:	2b01      	cmp	r3, #1
    5748:	d903      	bls.n	5752 <bt_stream_rx+0xb2>
			status |= DMA_OVERFLOW;
    574a:	7863      	ldrb	r3, [r4, #1]
    574c:	f043 0301 	orr.w	r3, r3, #1
    5750:	7063      	strb	r3, [r4, #1]

		if (dma_discard) {
    5752:	7c22      	ldrb	r2, [r4, #16]
    5754:	4b1e      	ldr	r3, [pc, #120]	; (57d0 <bt_stream_rx+0x130>)
    5756:	b12a      	cbz	r2, 5764 <bt_stream_rx+0xc4>
			status |= DISCARD;
    5758:	785a      	ldrb	r2, [r3, #1]
    575a:	f042 0220 	orr.w	r2, r2, #32
    575e:	705a      	strb	r2, [r3, #1]
			dma_discard = 0;
    5760:	2200      	movs	r2, #0
    5762:	741a      	strb	r2, [r3, #16]
		}

		rssi_iir_update(channel);
    5764:	4b20      	ldr	r3, [pc, #128]	; (57e8 <bt_stream_rx+0x148>)
    5766:	8818      	ldrh	r0, [r3, #0]
    5768:	b280      	uxth	r0, r0
    576a:	f001 fdd7 	bl	731c <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    576e:	7833      	ldrb	r3, [r6, #0]
    5770:	b913      	cbnz	r3, 5778 <bt_stream_rx+0xd8>
    5772:	4b1e      	ldr	r3, [pc, #120]	; (57ec <bt_stream_rx+0x14c>)
    5774:	781b      	ldrb	r3, [r3, #0]
    5776:	b12b      	cbz	r3, 5784 <bt_stream_rx+0xe4>
			status |= CS_TRIGGER;
    5778:	7863      	ldrb	r3, [r4, #1]
    577a:	f043 0308 	orr.w	r3, r3, #8
    577e:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5780:	2300      	movs	r3, #0
    5782:	7033      	strb	r3, [r6, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5784:	4b15      	ldr	r3, [pc, #84]	; (57dc <bt_stream_rx+0x13c>)
    5786:	f993 2000 	ldrsb.w	r2, [r3]
    578a:	4b19      	ldr	r3, [pc, #100]	; (57f0 <bt_stream_rx+0x150>)
    578c:	3235      	adds	r2, #53	; 0x35
    578e:	f993 3000 	ldrsb.w	r3, [r3]
    5792:	429a      	cmp	r2, r3
    5794:	da03      	bge.n	579e <bt_stream_rx+0xfe>
			status |= RSSI_TRIGGER;
    5796:	7863      	ldrb	r3, [r4, #1]
    5798:	f043 0310 	orr.w	r3, r3, #16
    579c:	7063      	strb	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    579e:	4b15      	ldr	r3, [pc, #84]	; (57f4 <bt_stream_rx+0x154>)
    57a0:	2000      	movs	r0, #0
    57a2:	6819      	ldr	r1, [r3, #0]
    57a4:	f7fe fec2 	bl	452c <enqueue>

		handle_usb(clkn);
    57a8:	f8d8 0000 	ldr.w	r0, [r8]
    57ac:	f001 fd66 	bl	727c <handle_usb>
		rx_tc = 0;
    57b0:	2300      	movs	r3, #0
    57b2:	603b      	str	r3, [r7, #0]
		rx_err = 0;
    57b4:	602b      	str	r3, [r5, #0]
    57b6:	e784      	b.n	56c2 <bt_stream_rx+0x22>

	cc2400_rx();

	cs_trigger_enable();

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    57b8:	7ca3      	ldrb	r3, [r4, #18]
    57ba:	2b08      	cmp	r3, #8
    57bc:	d086      	beq.n	56cc <bt_stream_rx+0x2c>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    57be:	f001 ff85 	bl	76cc <dio_ssp_stop>
	cs_trigger_disable();
}
    57c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
	cs_trigger_disable();
    57c6:	f001 be2d 	b.w	7424 <cs_trigger_disable>
    57ca:	bf00      	nop
    57cc:	2009c03c 	.word	0x2009c03c
    57d0:	10000e34 	.word	0x10000e34
    57d4:	10000ff4 	.word	0x10000ff4
    57d8:	10001511 	.word	0x10001511
    57dc:	10001510 	.word	0x10001510
    57e0:	2009c038 	.word	0x2009c038
    57e4:	1000150c 	.word	0x1000150c
    57e8:	1000044c 	.word	0x1000044c
    57ec:	10001160 	.word	0x10001160
    57f0:	10000ff8 	.word	0x10000ff8
    57f4:	10001170 	.word	0x10001170
    57f8:	10001014 	.word	0x10001014

000057fc <br_transmit>:
 * Transmit a BTBR packet with the specified access code.
 *
 * All modulation parameters are set within this function.
 */
void br_transmit()
{
    57fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5800:	4b95      	ldr	r3, [pc, #596]	; (5a58 <br_transmit+0x25c>)
    5802:	2201      	movs	r2, #1
    5804:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    5808:	2300      	movs	r3, #0
    580a:	4022      	ands	r2, r4
    580c:	402b      	ands	r3, r5
    580e:	ea52 0103 	orrs.w	r1, r2, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5812:	f04f 0700 	mov.w	r7, #0
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5816:	f245 5355 	movw	r3, #21845	; 0x5555
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    581a:	ea4f 76d5 	mov.w	r6, r5, lsr #31
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    581e:	f64a 28aa 	movw	r8, #43690	; 0xaaaa
    5822:	bf18      	it	ne
    5824:	4698      	movne	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    5826:	b2e0      	uxtb	r0, r4
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5828:	2f00      	cmp	r7, #0
    582a:	bf08      	it	eq
    582c:	2e01      	cmpeq	r6, #1
    582e:	bf14      	ite	ne
    5830:	2655      	movne	r6, #85	; 0x55
    5832:	26aa      	moveq	r6, #170	; 0xaa

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    5834:	f7fe fdbe 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5838:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
    583c:	f3c4 2007 	ubfx	r0, r4, #8, #8
    5840:	f7fe fdb8 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5844:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
    5848:	f3c4 4007 	ubfx	r0, r4, #16, #8
    584c:	f7fe fdb2 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5850:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
    5854:	0e20      	lsrs	r0, r4, #24
    5856:	f7fe fdad 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    585a:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
    585e:	b2e8      	uxtb	r0, r5
    5860:	f7fe fda8 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5864:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
    5868:	f3c5 2007 	ubfx	r0, r5, #8, #8
    586c:	f7fe fda2 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5870:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
    5874:	f3c5 4007 	ubfx	r0, r5, #16, #8
    5878:	f7fe fd9c 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    587c:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
    5880:	0e28      	lsrs	r0, r5, #24
    5882:	f7fe fd97 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5886:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
    588a:	4630      	mov	r0, r6
    588c:	f7fe fd92 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5890:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
    5894:	2077      	movs	r0, #119	; 0x77
    5896:	f7fe fd8d 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    589a:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
    589e:	2066      	movs	r0, #102	; 0x66
    58a0:	f7fe fd88 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58a4:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
    58a8:	2055      	movs	r0, #85	; 0x55
    58aa:	f7fe fd83 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58ae:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
    58b2:	2044      	movs	r0, #68	; 0x44
    58b4:	f7fe fd7e 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58b8:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
    58bc:	2033      	movs	r0, #51	; 0x33
    58be:	f7fe fd79 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58c2:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
    58c6:	2022      	movs	r0, #34	; 0x22
    58c8:	f7fe fd74 	bl	43b4 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58cc:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
		reverse8(0x11)
    58d0:	2011      	movs	r0, #17
    58d2:	f7fe fd6f 	bl	43b4 <reverse8>
	return reversed;
}

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;
    58d6:	463c      	mov	r4, r7
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58d8:	f88d 000f 	strb.w	r0, [sp, #15]

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58dc:	463b      	mov	r3, r7
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58de:	fa48 f203 	asr.w	r2, r8, r3
    58e2:	f1c3 010f 	rsb	r1, r3, #15
    58e6:	f002 0201 	and.w	r2, r2, #1
    58ea:	408a      	lsls	r2, r1

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58ec:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58ee:	4314      	orrs	r4, r2

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58f0:	2b10      	cmp	r3, #16
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58f2:	b2a4      	uxth	r4, r4

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58f4:	d1f3      	bne.n	58de <br_transmit+0xe2>
/* start buffered tx */
static void cc2400_tx_sync(uint32_t sync)
{
#ifdef TX_ENABLE
	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    58f6:	200d      	movs	r0, #13
    58f8:	f647 71ff 	movw	r1, #32767	; 0x7fff
    58fc:	f002 fccd 	bl	829a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5900:	2012      	movs	r0, #18
    5902:	f642 3122 	movw	r1, #11042	; 0x2b22
    5906:	f002 fcc8 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    590a:	2014      	movs	r0, #20
    590c:	f241 314b 	movw	r1, #4939	; 0x134b
    5910:	f002 fcc3 	bl	829a <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5914:	2020      	movs	r0, #32
    5916:	f640 4101 	movw	r1, #3073	; 0xc01
    591a:	f002 fcbe 	bl	829a <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
    591e:	4621      	mov	r1, r4
    5920:	202c      	movs	r0, #44	; 0x2c
    5922:	f002 fcba 	bl	829a <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5926:	202d      	movs	r0, #45	; 0x2d
    5928:	2100      	movs	r1, #0
    592a:	f002 fcb6 	bl	829a <cc2400_set>

	cc2400_set(FSDIV,   channel);
    592e:	4b4b      	ldr	r3, [pc, #300]	; (5a5c <br_transmit+0x260>)
    5930:	2002      	movs	r0, #2
    5932:	8819      	ldrh	r1, [r3, #0]
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)

	if (modulation == MOD_BT_BASIC_RATE) {
    5934:	4c4a      	ldr	r4, [pc, #296]	; (5a60 <br_transmit+0x264>)
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);

	cc2400_set(FSDIV,   channel);
    5936:	b289      	uxth	r1, r1
    5938:	f002 fcaf 	bl	829a <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    593c:	2005      	movs	r0, #5
    593e:	210b      	movs	r1, #11
    5940:	f002 fcab 	bl	829a <cc2400_set>

	if (modulation == MOD_BT_BASIC_RATE) {
    5944:	7823      	ldrb	r3, [r4, #0]
    5946:	b913      	cbnz	r3, 594e <br_transmit+0x152>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    5948:	2003      	movs	r0, #3
    594a:	2129      	movs	r1, #41	; 0x29
    594c:	e004      	b.n	5958 <br_transmit+0x15c>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    594e:	7823      	ldrb	r3, [r4, #0]
    5950:	2b01      	cmp	r3, #1
    5952:	d11d      	bne.n	5990 <br_transmit+0x194>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5954:	2003      	movs	r0, #3
    5956:	2140      	movs	r1, #64	; 0x40
    5958:	f002 fc9f 	bl	829a <cc2400_set>
	} else {
		/* oops */
		return;
	}

	clkn_start();
    595c:	f001 fdb2 	bl	74c4 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5960:	f002 fd3e 	bl	83e0 <cc2400_status>
    5964:	0645      	lsls	r5, r0, #25
    5966:	d5fb      	bpl.n	5960 <br_transmit+0x164>
	cc2400_strobe(SFSON);
    5968:	2061      	movs	r0, #97	; 0x61
    596a:	f002 fd40 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    596e:	f002 fd37 	bl	83e0 <cc2400_status>
    5972:	0740      	lsls	r0, r0, #29
    5974:	d5fb      	bpl.n	596e <br_transmit+0x172>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5976:	4b3b      	ldr	r3, [pc, #236]	; (5a64 <br_transmit+0x268>)
    5978:	2280      	movs	r2, #128	; 0x80
    597a:	601a      	str	r2, [r3, #0]
#endif

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    597c:	200e      	movs	r0, #14
    597e:	f002 fc83 	bl	8288 <cc2400_get>
    5982:	f000 001f 	and.w	r0, r0, #31
    5986:	280f      	cmp	r0, #15
    5988:	d1f8      	bne.n	597c <br_transmit+0x180>
	cc2400_strobe(STX);
    598a:	2063      	movs	r0, #99	; 0x63
    598c:	f002 fd2f 	bl	83ee <cc2400_strobe>
		reverse8(0x11)
	};

	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5990:	2114      	movs	r1, #20
    5992:	2023      	movs	r0, #35	; 0x23
    5994:	f002 fc81 	bl	829a <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5998:	2008      	movs	r0, #8
    599a:	f002 fc75 	bl	8288 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    599e:	f3c0 0108 	ubfx	r1, r0, #0, #9
	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    59a2:	4605      	mov	r5, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    59a4:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    59a8:	2008      	movs	r0, #8
    59aa:	f002 fc76 	bl	829a <cc2400_set>
 */
void br_transmit()
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;
    59ae:	2600      	movs	r6, #0

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
    59b0:	7ca3      	ldrb	r3, [r4, #18]
    59b2:	2b02      	cmp	r3, #2
    59b4:	d145      	bne.n	5a42 <br_transmit+0x246>
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    59b6:	0876      	lsrs	r6, r6, #1
    59b8:	4f2b      	ldr	r7, [pc, #172]	; (5a68 <br_transmit+0x26c>)
    59ba:	683b      	ldr	r3, [r7, #0]
    59bc:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
    59c0:	d105      	bne.n	59ce <br_transmit+0x1d2>

			// If timer says time to hop, do it.
			if (do_hop) {
    59c2:	7ae3      	ldrb	r3, [r4, #11]
    59c4:	2b00      	cmp	r3, #0
    59c6:	d0f7      	beq.n	59b8 <br_transmit+0x1bc>
				hop();
    59c8:	f7ff fd9a 	bl	5500 <hop>
    59cc:	e7f4      	b.n	59b8 <br_transmit+0x1bc>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    59ce:	4b27      	ldr	r3, [pc, #156]	; (5a6c <br_transmit+0x270>)
    59d0:	681a      	ldr	r2, [r3, #0]
    59d2:	f640 03c9 	movw	r3, #2249	; 0x8c9
    59d6:	429a      	cmp	r2, r3
    59d8:	d9f3      	bls.n	59c2 <br_transmit+0x1c6>
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    59da:	4b25      	ldr	r3, [pc, #148]	; (5a70 <br_transmit+0x274>)
    59dc:	f44f 7280 	mov.w	r2, #256	; 0x100
			if (do_hop) {
				hop();
			}
		}

		clkn_saved = clkn;
    59e0:	683e      	ldr	r6, [r7, #0]

		TXLED_SET;

		cc2400_fifo_write(16, data);
    59e2:	2010      	movs	r0, #16
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    59e4:	601a      	str	r2, [r3, #0]

		cc2400_fifo_write(16, data);
    59e6:	4669      	mov	r1, sp
    59e8:	f002 fc6a 	bl	82c0 <cc2400_fifo_write>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    59ec:	200e      	movs	r0, #14
    59ee:	f002 fc4b 	bl	8288 <cc2400_get>
    59f2:	f000 001f 	and.w	r0, r0, #31
    59f6:	280f      	cmp	r0, #15
    59f8:	d1f8      	bne.n	59ec <br_transmit+0x1f0>
		TXLED_CLR;
    59fa:	4b1e      	ldr	r3, [pc, #120]	; (5a74 <br_transmit+0x278>)
    59fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a00:	601a      	str	r2, [r3, #0]

		cc2400_strobe(SRFOFF);
    5a02:	2064      	movs	r0, #100	; 0x64
    5a04:	f002 fcf3 	bl	83ee <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    5a08:	f002 fcea 	bl	83e0 <cc2400_status>
    5a0c:	0741      	lsls	r1, r0, #29
    5a0e:	d4fb      	bmi.n	5a08 <br_transmit+0x20c>

		while (!(cc2400_status() & XOSC16M_STABLE));
    5a10:	f002 fce6 	bl	83e0 <cc2400_status>
    5a14:	0642      	lsls	r2, r0, #25
    5a16:	d5fb      	bpl.n	5a10 <br_transmit+0x214>
		cc2400_strobe(SFSON);
    5a18:	2061      	movs	r0, #97	; 0x61
    5a1a:	f002 fce8 	bl	83ee <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    5a1e:	f002 fcdf 	bl	83e0 <cc2400_status>
    5a22:	0743      	lsls	r3, r0, #29
    5a24:	d5fb      	bpl.n	5a1e <br_transmit+0x222>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5a26:	200e      	movs	r0, #14
    5a28:	f002 fc2e 	bl	8288 <cc2400_get>
    5a2c:	f000 001f 	and.w	r0, r0, #31
    5a30:	280f      	cmp	r0, #15
    5a32:	d1f8      	bne.n	5a26 <br_transmit+0x22a>
		cc2400_strobe(STX);
    5a34:	2063      	movs	r0, #99	; 0x63
    5a36:	f002 fcda 	bl	83ee <cc2400_strobe>

		handle_usb(clkn);
    5a3a:	6838      	ldr	r0, [r7, #0]
    5a3c:	f001 fc1e 	bl	727c <handle_usb>
    5a40:	e7b6      	b.n	59b0 <br_transmit+0x1b4>
	}

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5a42:	4b0d      	ldr	r3, [pc, #52]	; (5a78 <br_transmit+0x27c>)
    5a44:	2280      	movs	r2, #128	; 0x80
    5a46:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5a48:	2008      	movs	r0, #8
    5a4a:	4629      	mov	r1, r5
    5a4c:	f002 fc25 	bl	829a <cc2400_set>
}
    5a50:	b004      	add	sp, #16
    5a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a56:	bf00      	nop
    5a58:	10001518 	.word	0x10001518
    5a5c:	1000044c 	.word	0x1000044c
    5a60:	10000e34 	.word	0x10000e34
    5a64:	2009c058 	.word	0x2009c058
    5a68:	10001014 	.word	0x10001014
    5a6c:	40004008 	.word	0x40004008
    5a70:	2009c038 	.word	0x2009c038
    5a74:	2009c03c 	.word	0x2009c03c
    5a78:	2009c05c 	.word	0x2009c05c

00005a7c <reset_le>:
	le.syncl = aa_rev & 0xffff;
	le.synch = aa_rev >> 16;
}

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    5a7c:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    5a7e:	480f      	ldr	r0, [pc, #60]	; (5abc <reset_le+0x40>)
    5a80:	f7fe fda2 	bl	45c8 <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    5a84:	4b0e      	ldr	r3, [pc, #56]	; (5ac0 <reset_le+0x44>)
    5a86:	4a0f      	ldr	r2, [pc, #60]	; (5ac4 <reset_le+0x48>)
    5a88:	60da      	str	r2, [r3, #12]
	le.crc_init_reversed = 0xAAAAAA;
    5a8a:	4a0f      	ldr	r2, [pc, #60]	; (5ac8 <reset_le+0x4c>)
    5a8c:	611a      	str	r2, [r3, #16]
	le.crc_verify = 0;
    5a8e:	2200      	movs	r2, #0

	le.channel_idx = 0;
	le.channel_increment = 0;

	le.conn_epoch = 0;
	le.interval_timer = 0;
    5a90:	841a      	strh	r2, [r3, #32]
/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
    5a92:	615a      	str	r2, [r3, #20]

	le.conn_epoch = 0;
	le.interval_timer = 0;
	le.conn_interval = 0;
	le.conn_interval = 0;
	le.conn_count = 0;
    5a94:	849a      	strh	r2, [r3, #36]	; 0x24
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
	le.last_packet = 0;
    5a96:	645a      	str	r2, [r3, #68]	; 0x44

	le.link_state = LINK_INACTIVE;
    5a98:	761a      	strb	r2, [r3, #24]

	le.channel_idx = 0;
    5a9a:	765a      	strb	r2, [r3, #25]
	le.channel_increment = 0;
    5a9c:	769a      	strb	r2, [r3, #26]

	le.conn_epoch = 0;
    5a9e:	61da      	str	r2, [r3, #28]
	le.interval_timer = 0;
	le.conn_interval = 0;
    5aa0:	845a      	strh	r2, [r3, #34]	; 0x22
	le.conn_interval = 0;
	le.conn_count = 0;

	le.win_size = 0;
    5aa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	le.win_offset = 0;
    5aa6:	851a      	strh	r2, [r3, #40]	; 0x28

	le.update_pending = 0;
    5aa8:	62da      	str	r2, [r3, #44]	; 0x2c
	le.update_instant = 0;
    5aaa:	861a      	strh	r2, [r3, #48]	; 0x30
	le.interval_update = 0;
    5aac:	865a      	strh	r2, [r3, #50]	; 0x32
	le.win_size_update = 0;
    5aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	le.win_offset_update = 0;
    5ab2:	86da      	strh	r2, [r3, #54]	; 0x36

	do_hop = 0;
    5ab4:	4b05      	ldr	r3, [pc, #20]	; (5acc <reset_le+0x50>)
    5ab6:	72da      	strb	r2, [r3, #11]
    5ab8:	bd08      	pop	{r3, pc}
    5aba:	bf00      	nop
    5abc:	8e89bed6 	.word	0x8e89bed6
    5ac0:	1000044c 	.word	0x1000044c
    5ac4:	00555555 	.word	0x00555555
    5ac8:	00aaaaaa 	.word	0x00aaaaaa
    5acc:	10000e34 	.word	0x10000e34

00005ad0 <reset_le_promisc>:
}

// reset LE Promisc state
void reset_le_promisc(void) {
    5ad0:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    5ad2:	4c06      	ldr	r4, [pc, #24]	; (5aec <reset_le_promisc+0x1c>)
    5ad4:	2100      	movs	r1, #0
    5ad6:	4620      	mov	r0, r4
    5ad8:	f44f 7284 	mov.w	r2, #264	; 0x108
    5adc:	f7fe fba8 	bl	4230 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    5ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ae4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    5ae8:	bd10      	pop	{r4, pc}
    5aea:	bf00      	nop
    5aec:	10001058 	.word	0x10001058

00005af0 <bt_generic_le>:
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5af4:	4c69      	ldr	r4, [pc, #420]	; (5c9c <bt_generic_le+0x1ac>)
    5af6:	2301      	movs	r3, #1
	le_promisc.smallest_hop_interval = 0xffffffff;
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5af8:	4680      	mov	r8, r0
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5afa:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    5afc:	7460      	strb	r0, [r4, #17]

	reset_le();
    5afe:	f7ff ffbd 	bl	5a7c <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5b02:	4b67      	ldr	r3, [pc, #412]	; (5ca0 <bt_generic_le+0x1b0>)
    5b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b08:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5b0a:	4b66      	ldr	r3, [pc, #408]	; (5ca4 <bt_generic_le+0x1b4>)
    5b0c:	2210      	movs	r2, #16
    5b0e:	601a      	str	r2, [r3, #0]

	queue_init();
    5b10:	f001 fb52 	bl	71b8 <queue_init>
	dio_ssp_init();
    5b14:	f002 fb30 	bl	8178 <dio_ssp_init>
	dma_init();
    5b18:	f001 fd2c 	bl	7574 <dma_init>
	dio_ssp_start();
    5b1c:	f001 fdb0 	bl	7680 <dio_ssp_start>
	cc2400_rx();
    5b20:	f7fe fc5a 	bl	43d8 <cc2400_rx>

	cs_trigger_enable();
    5b24:	f001 fc68 	bl	73f8 <cs_trigger_enable>

	hold = 0;
    5b28:	2500      	movs	r5, #0

	while (requested_mode == active_mode) {
    5b2a:	7ca3      	ldrb	r3, [r4, #18]
    5b2c:	4543      	cmp	r3, r8
    5b2e:	f040 80a3 	bne.w	5c78 <bt_generic_le+0x188>
		if (requested_channel != 0) {
    5b32:	4b5a      	ldr	r3, [pc, #360]	; (5c9c <bt_generic_le+0x1ac>)
    5b34:	89db      	ldrh	r3, [r3, #14]
    5b36:	b29b      	uxth	r3, r3
    5b38:	b1d3      	cbz	r3, 5b70 <bt_generic_le+0x80>
			cc2400_strobe(SRFOFF);
    5b3a:	2064      	movs	r0, #100	; 0x64
    5b3c:	f002 fc57 	bl	83ee <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b40:	f002 fc4e 	bl	83e0 <cc2400_status>
    5b44:	0747      	lsls	r7, r0, #29
    5b46:	d4fb      	bmi.n	5b40 <bt_generic_le+0x50>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5b48:	4b57      	ldr	r3, [pc, #348]	; (5ca8 <bt_generic_le+0x1b8>)
    5b4a:	2002      	movs	r0, #2
    5b4c:	8819      	ldrh	r1, [r3, #0]
    5b4e:	b289      	uxth	r1, r1
    5b50:	3901      	subs	r1, #1
    5b52:	b289      	uxth	r1, r1
    5b54:	f002 fba1 	bl	829a <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5b58:	2061      	movs	r0, #97	; 0x61
    5b5a:	f002 fc48 	bl	83ee <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5b5e:	f002 fc3f 	bl	83e0 <cc2400_status>
    5b62:	0746      	lsls	r6, r0, #29
    5b64:	d5fb      	bpl.n	5b5e <bt_generic_le+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5b66:	2062      	movs	r0, #98	; 0x62
    5b68:	f002 fc41 	bl	83ee <cc2400_strobe>

			requested_channel = 0;
    5b6c:	2300      	movs	r3, #0
    5b6e:	81e3      	strh	r3, [r4, #14]
		}

		if (do_hop) {
    5b70:	7ae3      	ldrb	r3, [r4, #11]
    5b72:	4e4c      	ldr	r6, [pc, #304]	; (5ca4 <bt_generic_le+0x1b4>)
    5b74:	b113      	cbz	r3, 5b7c <bt_generic_le+0x8c>
			hop();
    5b76:	f7ff fcc3 	bl	5500 <hop>
    5b7a:	e002      	b.n	5b82 <bt_generic_le+0x92>
		} else {
			TXLED_CLR;
    5b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5b80:	6033      	str	r3, [r6, #0]
		}

		RXLED_CLR;
    5b82:	2310      	movs	r3, #16
    5b84:	6033      	str	r3, [r6, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5b86:	f001 fb8d 	bl	72a4 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5b8a:	2780      	movs	r7, #128	; 0x80
		while ((rx_tc == 0) && (rx_err == 0))
    5b8c:	4b47      	ldr	r3, [pc, #284]	; (5cac <bt_generic_le+0x1bc>)
    5b8e:	4e48      	ldr	r6, [pc, #288]	; (5cb0 <bt_generic_le+0x1c0>)
    5b90:	681a      	ldr	r2, [r3, #0]
    5b92:	4699      	mov	r9, r3
    5b94:	b9d2      	cbnz	r2, 5bcc <bt_generic_le+0xdc>
    5b96:	6833      	ldr	r3, [r6, #0]
    5b98:	b9c3      	cbnz	r3, 5bcc <bt_generic_le+0xdc>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b9a:	2006      	movs	r0, #6
    5b9c:	f002 fb74 	bl	8288 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5ba0:	4b44      	ldr	r3, [pc, #272]	; (5cb4 <bt_generic_le+0x1c4>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5ba2:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5ba6:	781b      	ldrb	r3, [r3, #0]
    5ba8:	b163      	cbz	r3, 5bc4 <bt_generic_le+0xd4>
    5baa:	b27b      	sxtb	r3, r7
    5bac:	3380      	adds	r3, #128	; 0x80
    5bae:	d109      	bne.n	5bc4 <bt_generic_le+0xd4>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5bb0:	4b41      	ldr	r3, [pc, #260]	; (5cb8 <bt_generic_le+0x1c8>)
    5bb2:	b240      	sxtb	r0, r0
    5bb4:	f993 7000 	ldrsb.w	r7, [r3]
    5bb8:	3736      	adds	r7, #54	; 0x36
    5bba:	42b8      	cmp	r0, r7
    5bbc:	bfa8      	it	ge
    5bbe:	4607      	movge	r7, r0
    5bc0:	b2ff      	uxtb	r7, r7
				rssi_at_trigger = rssi;
    5bc2:	4638      	mov	r0, r7
			}
			rssi_add(rssi);
    5bc4:	b240      	sxtb	r0, r0
    5bc6:	f001 fb89 	bl	72dc <rssi_add>
    5bca:	e7df      	b.n	5b8c <bt_generic_le+0x9c>
		}

		if (rx_err) {
    5bcc:	6833      	ldr	r3, [r6, #0]
    5bce:	b11b      	cbz	r3, 5bd8 <bt_generic_le+0xe8>
			status |= DMA_ERROR;
    5bd0:	7863      	ldrb	r3, [r4, #1]
    5bd2:	f043 0302 	orr.w	r3, r3, #2
    5bd6:	7063      	strb	r3, [r4, #1]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    5bd8:	f8d9 3000 	ldr.w	r3, [r9]
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d057      	beq.n	5c90 <bt_generic_le+0x1a0>
			goto rx_continue;

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5be0:	4b32      	ldr	r3, [pc, #200]	; (5cac <bt_generic_le+0x1bc>)
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	2b01      	cmp	r3, #1
    5be6:	d903      	bls.n	5bf0 <bt_generic_le+0x100>
			status |= DMA_OVERFLOW;
    5be8:	7863      	ldrb	r3, [r4, #1]
    5bea:	f043 0301 	orr.w	r3, r3, #1
    5bee:	7063      	strb	r3, [r4, #1]

		rssi_iir_update(channel);
    5bf0:	4b2d      	ldr	r3, [pc, #180]	; (5ca8 <bt_generic_le+0x1b8>)
    5bf2:	8818      	ldrh	r0, [r3, #0]
    5bf4:	b280      	uxth	r0, r0
    5bf6:	f001 fb91 	bl	731c <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5bfa:	4b2e      	ldr	r3, [pc, #184]	; (5cb4 <bt_generic_le+0x1c4>)
    5bfc:	781a      	ldrb	r2, [r3, #0]
    5bfe:	b912      	cbnz	r2, 5c06 <bt_generic_le+0x116>
    5c00:	4a2e      	ldr	r2, [pc, #184]	; (5cbc <bt_generic_le+0x1cc>)
    5c02:	7812      	ldrb	r2, [r2, #0]
    5c04:	b132      	cbz	r2, 5c14 <bt_generic_le+0x124>
			status |= CS_TRIGGER;
    5c06:	7862      	ldrb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
    5c08:	2502      	movs	r5, #2
		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
			status |= CS_TRIGGER;
    5c0a:	f042 0208 	orr.w	r2, r2, #8
    5c0e:	7062      	strb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
    5c10:	2200      	movs	r2, #0
    5c12:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5c14:	4b28      	ldr	r3, [pc, #160]	; (5cb8 <bt_generic_le+0x1c8>)
    5c16:	f993 2000 	ldrsb.w	r2, [r3]
    5c1a:	4b29      	ldr	r3, [pc, #164]	; (5cc0 <bt_generic_le+0x1d0>)
    5c1c:	3235      	adds	r2, #53	; 0x35
    5c1e:	f993 3000 	ldrsb.w	r3, [r3]
    5c22:	429a      	cmp	r2, r3
    5c24:	da05      	bge.n	5c32 <bt_generic_le+0x142>
			status |= RSSI_TRIGGER;
    5c26:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5c28:	2502      	movs	r5, #2
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    5c2a:	f043 0310 	orr.w	r3, r3, #16
    5c2e:	7063      	strb	r3, [r4, #1]
    5c30:	e000      	b.n	5c34 <bt_generic_le+0x144>
			hold = CS_HOLD_TIME;
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    5c32:	b36d      	cbz	r5, 5c90 <bt_generic_le+0x1a0>
			goto rx_continue;
		}
		hold--;

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5c34:	4823      	ldr	r0, [pc, #140]	; (5cc4 <bt_generic_le+0x1d4>)

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5c36:	3d01      	subs	r5, #1

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5c38:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    5c3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
    5c40:	f003 fbbc 	bl	93bc <memcpy>

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5c44:	b2ed      	uxtb	r5, r5

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5c46:	2300      	movs	r3, #0
    5c48:	481f      	ldr	r0, [pc, #124]	; (5cc8 <bt_generic_le+0x1d8>)
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
			hold = CS_HOLD_TIME;
    5c4a:	2200      	movs	r2, #0
    5c4c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c50:	491e      	ldr	r1, [pc, #120]	; (5ccc <bt_generic_le+0x1dc>)
    5c52:	680f      	ldr	r7, [r1, #0]
    5c54:	5cff      	ldrb	r7, [r7, r3]
				idle_rxbuf[i] <<= 1;
    5c56:	6809      	ldr	r1, [r1, #0]

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c58:	09ff      	lsrs	r7, r7, #7
    5c5a:	5487      	strb	r7, [r0, r2]
				idle_rxbuf[i] <<= 1;
    5c5c:	5ccf      	ldrb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c5e:	3201      	adds	r2, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5c60:	007f      	lsls	r7, r7, #1
    5c62:	b2ff      	uxtb	r7, r7
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c64:	2a08      	cmp	r2, #8
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5c66:	54cf      	strb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c68:	d1f2      	bne.n	5c50 <bt_generic_le+0x160>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5c6a:	3301      	adds	r3, #1
    5c6c:	2b32      	cmp	r3, #50	; 0x32
    5c6e:	d1eb      	bne.n	5c48 <bt_generic_le+0x158>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    5c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c72:	4814      	ldr	r0, [pc, #80]	; (5cc4 <bt_generic_le+0x1d4>)
    5c74:	4798      	blx	r3
		if (!ret) break;
    5c76:	b958      	cbnz	r0, 5c90 <bt_generic_le+0x1a0>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5c78:	4b15      	ldr	r3, [pc, #84]	; (5cd0 <bt_generic_le+0x1e0>)
    5c7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c7e:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5c80:	f7fe fcae 	bl	45e0 <cc2400_idle>
	dio_ssp_stop();
    5c84:	f001 fd22 	bl	76cc <dio_ssp_stop>
	cs_trigger_disable();
}
    5c88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ICER0 = ICER0_ICE_USB;

	// reset the radio completely
	cc2400_idle();
	dio_ssp_stop();
	cs_trigger_disable();
    5c8c:	f001 bbca 	b.w	7424 <cs_trigger_disable>

		int ret = data_cb(unpacked);
		if (!ret) break;

	rx_continue:
		rx_tc = 0;
    5c90:	2300      	movs	r3, #0
    5c92:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    5c96:	6033      	str	r3, [r6, #0]
    5c98:	e747      	b.n	5b2a <bt_generic_le+0x3a>
    5c9a:	bf00      	nop
    5c9c:	10000e34 	.word	0x10000e34
    5ca0:	e000e100 	.word	0xe000e100
    5ca4:	2009c03c 	.word	0x2009c03c
    5ca8:	1000044c 	.word	0x1000044c
    5cac:	10000ff4 	.word	0x10000ff4
    5cb0:	1000150c 	.word	0x1000150c
    5cb4:	10001511 	.word	0x10001511
    5cb8:	10001510 	.word	0x10001510
    5cbc:	10001160 	.word	0x10001160
    5cc0:	10000ff8 	.word	0x10000ff8
    5cc4:	10001174 	.word	0x10001174
    5cc8:	10001304 	.word	0x10001304
    5ccc:	10001170 	.word	0x10001170
    5cd0:	e000e180 	.word	0xe000e180

00005cd4 <bt_le_sync>:
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cd8:	b091      	sub	sp, #68	; 0x44
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5cda:	4daf      	ldr	r5, [pc, #700]	; (5f98 <bt_le_sync+0x2c4>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5cdc:	4caf      	ldr	r4, [pc, #700]	; (5f9c <bt_le_sync+0x2c8>)
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5cde:	2301      	movs	r3, #1
    5ce0:	702b      	strb	r3, [r5, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5ce2:	7623      	strb	r3, [r4, #24]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5ce4:	4bae      	ldr	r3, [pc, #696]	; (5fa0 <bt_le_sync+0x2cc>)
    5ce6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    5cea:	7468      	strb	r0, [r5, #17]

	le.link_state = LINK_LISTENING;

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5cec:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5cee:	4bad      	ldr	r3, [pc, #692]	; (5fa4 <bt_le_sync+0x2d0>)
    5cf0:	2210      	movs	r2, #16
    5cf2:	601a      	str	r2, [r3, #0]
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5cf4:	4606      	mov	r6, r0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;

	RXLED_CLR;

	queue_init();
    5cf6:	f001 fa5f 	bl	71b8 <queue_init>
	dio_ssp_init();
    5cfa:	f002 fa3d 	bl	8178 <dio_ssp_init>
	dma_init_le();
    5cfe:	f001 fc77 	bl	75f0 <dma_init_le>
	dio_ssp_start();
    5d02:	f001 fcbd 	bl	7680 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5d06:	6860      	ldr	r0, [r4, #4]
    5d08:	f002 f9d2 	bl	80b0 <rbit>
    5d0c:	f7fe fbb6 	bl	447c <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    5d10:	7cab      	ldrb	r3, [r5, #18]
    5d12:	42b3      	cmp	r3, r6
    5d14:	f040 81b6 	bne.w	6084 <bt_le_sync+0x3b0>
		if (requested_channel != 0) {
    5d18:	4b9f      	ldr	r3, [pc, #636]	; (5f98 <bt_le_sync+0x2c4>)
    5d1a:	89db      	ldrh	r3, [r3, #14]
    5d1c:	b29b      	uxth	r3, r3
    5d1e:	b1cb      	cbz	r3, 5d54 <bt_le_sync+0x80>
			cc2400_strobe(SRFOFF);
    5d20:	2064      	movs	r0, #100	; 0x64
    5d22:	f002 fb64 	bl	83ee <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5d26:	f002 fb5b 	bl	83e0 <cc2400_status>
    5d2a:	0743      	lsls	r3, r0, #29
    5d2c:	d4fb      	bmi.n	5d26 <bt_le_sync+0x52>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5d2e:	8821      	ldrh	r1, [r4, #0]
    5d30:	2002      	movs	r0, #2
    5d32:	b289      	uxth	r1, r1
    5d34:	3901      	subs	r1, #1
    5d36:	b289      	uxth	r1, r1
    5d38:	f002 faaf 	bl	829a <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5d3c:	2061      	movs	r0, #97	; 0x61
    5d3e:	f002 fb56 	bl	83ee <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5d42:	f002 fb4d 	bl	83e0 <cc2400_status>
    5d46:	0747      	lsls	r7, r0, #29
    5d48:	d5fb      	bpl.n	5d42 <bt_le_sync+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5d4a:	2062      	movs	r0, #98	; 0x62
    5d4c:	f002 fb4f 	bl	83ee <cc2400_strobe>

			requested_channel = 0;
    5d50:	2300      	movs	r3, #0
    5d52:	81eb      	strh	r3, [r5, #14]
		}

		RXLED_CLR;
    5d54:	4b93      	ldr	r3, [pc, #588]	; (5fa4 <bt_le_sync+0x2d0>)
    5d56:	2210      	movs	r2, #16
    5d58:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5d5a:	f001 faa3 	bl	72a4 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5d5e:	4b92      	ldr	r3, [pc, #584]	; (5fa8 <bt_le_sync+0x2d4>)
    5d60:	681a      	ldr	r2, [r3, #0]
    5d62:	4699      	mov	r9, r3
    5d64:	b942      	cbnz	r2, 5d78 <bt_le_sync+0xa4>
    5d66:	4b91      	ldr	r3, [pc, #580]	; (5fac <bt_le_sync+0x2d8>)
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	b92b      	cbnz	r3, 5d78 <bt_le_sync+0xa4>
    5d6c:	7aeb      	ldrb	r3, [r5, #11]
    5d6e:	b91b      	cbnz	r3, 5d78 <bt_le_sync+0xa4>
    5d70:	4b89      	ldr	r3, [pc, #548]	; (5f98 <bt_le_sync+0x2c4>)
    5d72:	7c9b      	ldrb	r3, [r3, #18]
    5d74:	42b3      	cmp	r3, r6
    5d76:	d0f2      	beq.n	5d5e <bt_le_sync+0x8a>
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d78:	2006      	movs	r0, #6
    5d7a:	f002 fa85 	bl	8288 <cc2400_get>
		rssi_min = rssi_max = rssi;
    5d7e:	4b8c      	ldr	r3, [pc, #560]	; (5fb0 <bt_le_sync+0x2dc>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d80:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;

		if (requested_mode != active_mode) {
    5d84:	7caa      	ldrb	r2, [r5, #18]
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5d86:	7018      	strb	r0, [r3, #0]
    5d88:	4b8a      	ldr	r3, [pc, #552]	; (5fb4 <bt_le_sync+0x2e0>)

		if (requested_mode != active_mode) {
    5d8a:	42b2      	cmp	r2, r6
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5d8c:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    5d8e:	4b82      	ldr	r3, [pc, #520]	; (5f98 <bt_le_sync+0x2c4>)
    5d90:	f040 8178 	bne.w	6084 <bt_le_sync+0x3b0>
			goto cleanup;
		}

		if (rx_err) {
    5d94:	4f85      	ldr	r7, [pc, #532]	; (5fac <bt_le_sync+0x2d8>)
    5d96:	683a      	ldr	r2, [r7, #0]
    5d98:	46bb      	mov	fp, r7
    5d9a:	b11a      	cbz	r2, 5da4 <bt_le_sync+0xd0>
			status |= DMA_ERROR;
    5d9c:	785a      	ldrb	r2, [r3, #1]
    5d9e:	f042 0202 	orr.w	r2, r2, #2
    5da2:	705a      	strb	r2, [r3, #1]
		}

		if (do_hop)
    5da4:	7aeb      	ldrb	r3, [r5, #11]
    5da6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5daa:	2b00      	cmp	r3, #0
    5dac:	f040 80b7 	bne.w	5f1e <bt_le_sync+0x24a>
			goto rx_flush;

		/* No DMA transfer? */
		if (!rx_tc)
    5db0:	f8d9 3000 	ldr.w	r3, [r9]
    5db4:	2b00      	cmp	r3, #0
    5db6:	d0ab      	beq.n	5d10 <bt_le_sync+0x3c>
			continue;

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
    5db8:	2234      	movs	r2, #52	; 0x34
    5dba:	a803      	add	r0, sp, #12
    5dbc:	f7fe fa38 	bl	4230 <memset>
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5dc0:	8820      	ldrh	r0, [r4, #0]
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5dc2:	6863      	ldr	r3, [r4, #4]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5dc4:	b280      	uxth	r0, r0
    5dc6:	3862      	subs	r0, #98	; 0x62
    5dc8:	b2c0      	uxtb	r0, r0
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5dca:	9303      	str	r3, [sp, #12]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5dcc:	f001 f8fa 	bl	6fc4 <btle_channel_index>
    5dd0:	f04f 0830 	mov.w	r8, #48	; 0x30
    5dd4:	fb08 f800 	mul.w	r8, r8, r0
    5dd8:	f8df a208 	ldr.w	sl, [pc, #520]	; 5fe4 <bt_le_sync+0x310>
    5ddc:	eb0a 0308 	add.w	r3, sl, r8
    5de0:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5de2:	4b75      	ldr	r3, [pc, #468]	; (5fb8 <bt_le_sync+0x2e4>)
    5de4:	f893 e000 	ldrb.w	lr, [r3]
					   | rxbuf1[i+1] << 16
    5de8:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5dea:	7898      	ldrb	r0, [r3, #2]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5dec:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5dee:	78d9      	ldrb	r1, [r3, #3]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5df0:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
					   | rxbuf1[i+2] << 8
    5df4:	430a      	orrs	r2, r1
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5df6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    5dfa:	9300      	str	r3, [sp, #0]
    5dfc:	f002 f958 	bl	80b0 <rbit>
    5e00:	f85a 2008 	ldr.w	r2, [sl, r8]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5e04:	9b00      	ldr	r3, [sp, #0]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e06:	4050      	eors	r0, r2
		}

		unsigned len = (p[5] & 0x3f) + 2;
    5e08:	f3c0 2a05 	ubfx	sl, r0, #8, #6
    5e0c:	f10a 0802 	add.w	r8, sl, #2
		if (len > 39)
    5e10:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e14:	9004      	str	r0, [sp, #16]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5e16:	f200 8082 	bhi.w	5f1e <bt_le_sync+0x24a>
			goto rx_flush;

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5e1a:	f10a 0a08 	add.w	sl, sl, #8
    5e1e:	ea4f 029a 	mov.w	r2, sl, lsr #2
		if (total_transfers < 11) {
    5e22:	2a0b      	cmp	r2, #11
    5e24:	d00d      	beq.n	5e42 <bt_le_sync+0x16e>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5e26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5e2a:	4a64      	ldr	r2, [pc, #400]	; (5fbc <bt_le_sync+0x2e8>)
    5e2c:	6812      	ldr	r2, [r2, #0]
    5e2e:	429a      	cmp	r2, r3
    5e30:	d20b      	bcs.n	5e4a <bt_le_sync+0x176>
    5e32:	f8db 1000 	ldr.w	r1, [fp]
    5e36:	2900      	cmp	r1, #0
    5e38:	d0f7      	beq.n	5e2a <bt_le_sync+0x156>
    5e3a:	e006      	b.n	5e4a <bt_le_sync+0x176>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5e3c:	f8db 3000 	ldr.w	r3, [fp]
    5e40:	b91b      	cbnz	r3, 5e4a <bt_le_sync+0x176>
    5e42:	4b5f      	ldr	r3, [pc, #380]	; (5fc0 <bt_le_sync+0x2ec>)
    5e44:	681b      	ldr	r3, [r3, #0]
    5e46:	07d8      	lsls	r0, r3, #31
    5e48:	d4f8      	bmi.n	5e3c <bt_le_sync+0x168>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e4a:	4b5e      	ldr	r3, [pc, #376]	; (5fc4 <bt_le_sync+0x2f0>)

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5e4c:	2061      	movs	r0, #97	; 0x61
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e4e:	681a      	ldr	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e50:	f04f 0b04 	mov.w	fp, #4
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e54:	f022 0201 	bic.w	r2, r2, #1
    5e58:	601a      	str	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5e5a:	f002 fac8 	bl	83ee <cc2400_strobe>

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5e5e:	4a56      	ldr	r2, [pc, #344]	; (5fb8 <bt_le_sync+0x2e4>)
    5e60:	f10b 0001 	add.w	r0, fp, #1
    5e64:	f812 100b 	ldrb.w	r1, [r2, fp]
    5e68:	f10b 0c03 	add.w	ip, fp, #3
					   | rxbuf1[i+1] << 16
    5e6c:	f812 e000 	ldrb.w	lr, [r2, r0]
    5e70:	f10b 0002 	add.w	r0, fp, #2
					   | rxbuf1[i+2] << 8
    5e74:	5c10      	ldrb	r0, [r2, r0]
					   | rxbuf1[i+3] << 0;
    5e76:	f812 c00c 	ldrb.w	ip, [r2, ip]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e7a:	ea4f 02ab 	mov.w	r2, fp, asr #2
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5e7e:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
					   | rxbuf1[i+2] << 8
    5e82:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e86:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    5e8a:	9200      	str	r2, [sp, #0]
    5e8c:	f002 f910 	bl	80b0 <rbit>
    5e90:	9a00      	ldr	r2, [sp, #0]
    5e92:	ab10      	add	r3, sp, #64	; 0x40
    5e94:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5e98:	9b01      	ldr	r3, [sp, #4]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e9a:	f10b 0b04 	add.w	fp, fp, #4
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5ea2:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5ea6:	ea82 0000 	eor.w	r0, r2, r0
    5eaa:	f841 0c30 	str.w	r0, [r1, #-48]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5eae:	d1d6      	bne.n	5e5e <bt_le_sync+0x18a>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    5eb0:	6963      	ldr	r3, [r4, #20]
    5eb2:	b9eb      	cbnz	r3, 5ef0 <bt_le_sync+0x21c>
			if (calc_crc != wire_crc) // skip packets with a bad CRC
				goto rx_flush;
		}


		RXLED_SET;
    5eb4:	4b44      	ldr	r3, [pc, #272]	; (5fc8 <bt_le_sync+0x2f4>)
    5eb6:	2210      	movs	r2, #16
    5eb8:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5eba:	a803      	add	r0, sp, #12
    5ebc:	69ab      	ldr	r3, [r5, #24]
    5ebe:	4798      	blx	r3

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
    5ec0:	4b42      	ldr	r3, [pc, #264]	; (5fcc <bt_le_sync+0x2f8>)
    5ec2:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
    5ec6:	f8c3 8000 	str.w	r8, [r3]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5eca:	a903      	add	r1, sp, #12
    5ecc:	2001      	movs	r0, #1
    5ece:	f7fe fb2d 	bl	452c <enqueue>
		ISER0 = ISER0_ISE_USB;
    5ed2:	4b33      	ldr	r3, [pc, #204]	; (5fa0 <bt_le_sync+0x2cc>)

		le.last_packet = CLK100NS;
    5ed4:	4a3e      	ldr	r2, [pc, #248]	; (5fd0 <bt_le_sync+0x2fc>)
		packet_cb((uint8_t *)packet);

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
		enqueue(LE_PACKET, (uint8_t *)packet);
		ISER0 = ISER0_ISE_USB;
    5ed6:	f8c3 8000 	str.w	r8, [r3]

		le.last_packet = CLK100NS;
    5eda:	4b3e      	ldr	r3, [pc, #248]	; (5fd4 <bt_le_sync+0x300>)
    5edc:	f640 4135 	movw	r1, #3125	; 0xc35
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	6812      	ldr	r2, [r2, #0]
    5ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5ee8:	fb01 2303 	mla	r3, r1, r3, r2
    5eec:	6463      	str	r3, [r4, #68]	; 0x44
    5eee:	e016      	b.n	5f1e <bt_le_sync+0x24a>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5ef0:	4b2a      	ldr	r3, [pc, #168]	; (5f9c <bt_le_sync+0x2c8>)
    5ef2:	a904      	add	r1, sp, #16
    5ef4:	6918      	ldr	r0, [r3, #16]
    5ef6:	4642      	mov	r2, r8
    5ef8:	f001 f8e4 	bl	70c4 <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    5efc:	ab10      	add	r3, sp, #64	; 0x40
    5efe:	4453      	add	r3, sl
    5f00:	f813 2c34 	ldrb.w	r2, [r3, #-52]
						 | (p[4+len+1] << 8)
    5f04:	ab10      	add	r3, sp, #64	; 0x40
    5f06:	4443      	add	r3, r8
    5f08:	f813 1c2f 	ldrb.w	r1, [r3, #-47]
    5f0c:	0209      	lsls	r1, r1, #8
    5f0e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
						 | (p[4+len+0] << 0);
    5f12:	f813 2c30 	ldrb.w	r2, [r3, #-48]
    5f16:	ea41 0302 	orr.w	r3, r1, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5f1a:	4298      	cmp	r0, r3
    5f1c:	d0ca      	beq.n	5eb4 <bt_le_sync+0x1e0>

		le.last_packet = CLK100NS;

	rx_flush:
		// this might happen twice, but it's safe to do so
		cc2400_strobe(SFSON);
    5f1e:	2061      	movs	r0, #97	; 0x61
    5f20:	f002 fa65 	bl	83ee <cc2400_strobe>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5f24:	4b27      	ldr	r3, [pc, #156]	; (5fc4 <bt_le_sync+0x2f0>)
    5f26:	681a      	ldr	r2, [r3, #0]
    5f28:	f022 0201 	bic.w	r2, r2, #1
    5f2c:	601a      	str	r2, [r3, #0]
		while (SSP1SR & SSPSR_RNE) {
    5f2e:	4b2a      	ldr	r3, [pc, #168]	; (5fd8 <bt_le_sync+0x304>)
    5f30:	681b      	ldr	r3, [r3, #0]
    5f32:	0759      	lsls	r1, r3, #29
    5f34:	d502      	bpl.n	5f3c <bt_le_sync+0x268>
			u8 tmp = (u8)DIO_SSP_DR;
    5f36:	4b29      	ldr	r3, [pc, #164]	; (5fdc <bt_le_sync+0x308>)
    5f38:	681b      	ldr	r3, [r3, #0]
    5f3a:	e7f8      	b.n	5f2e <bt_le_sync+0x25a>
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    5f3c:	4b25      	ldr	r3, [pc, #148]	; (5fd4 <bt_le_sync+0x300>)
    5f3e:	4a24      	ldr	r2, [pc, #144]	; (5fd0 <bt_le_sync+0x2fc>)
    5f40:	681b      	ldr	r3, [r3, #0]
    5f42:	6812      	ldr	r2, [r2, #0]
    5f44:	f640 4135 	movw	r1, #3125	; 0xc35
    5f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5f4c:	fb01 2303 	mla	r3, r1, r3, r2
		if (now < le.last_packet)
    5f50:	6c62      	ldr	r2, [r4, #68]	; 0x44
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f52:	7e21      	ldrb	r1, [r4, #24]
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
    5f54:	4293      	cmp	r3, r2
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f56:	f1a1 0102 	sub.w	r1, r1, #2
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5f5a:	bf38      	it	cc
    5f5c:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5f60:	b2c9      	uxtb	r1, r1
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5f62:	bf38      	it	cc
    5f64:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5f68:	2901      	cmp	r1, #1
    5f6a:	d803      	bhi.n	5f74 <bt_le_sync+0x2a0>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
			&& (now - le.last_packet > 50000000))
    5f6c:	491c      	ldr	r1, [pc, #112]	; (5fe0 <bt_le_sync+0x30c>)
    5f6e:	1a9b      	subs	r3, r3, r2
    5f70:	428b      	cmp	r3, r1
    5f72:	d802      	bhi.n	5f7a <bt_le_sync+0x2a6>
			// jam finished
			|| (le_jam_count == 1)
    5f74:	69eb      	ldr	r3, [r5, #28]
    5f76:	2b01      	cmp	r3, #1
    5f78:	d14f      	bne.n	601a <bt_le_sync+0x346>
			)
		{
			reset_le();
    5f7a:	f7ff fd7f 	bl	5a7c <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    5f7e:	4909      	ldr	r1, [pc, #36]	; (5fa4 <bt_le_sync+0x2d0>)
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f80:	2300      	movs	r3, #0
			TXLED_CLR;
    5f82:	f44f 7080 	mov.w	r0, #256	; 0x100
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f86:	61eb      	str	r3, [r5, #28]
			TXLED_CLR;
    5f88:	6008      	str	r0, [r1, #0]

			if (jam_mode == JAM_ONCE) {
    5f8a:	7ce9      	ldrb	r1, [r5, #19]
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f8c:	4a02      	ldr	r2, [pc, #8]	; (5f98 <bt_le_sync+0x2c4>)
			TXLED_CLR;

			if (jam_mode == JAM_ONCE) {
    5f8e:	2901      	cmp	r1, #1
    5f90:	d12a      	bne.n	5fe8 <bt_le_sync+0x314>
				jam_mode = JAM_NONE;
    5f92:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    5f94:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    5f96:	e075      	b.n	6084 <bt_le_sync+0x3b0>
    5f98:	10000e34 	.word	0x10000e34
    5f9c:	1000044c 	.word	0x1000044c
    5fa0:	e000e100 	.word	0xe000e100
    5fa4:	2009c03c 	.word	0x2009c03c
    5fa8:	10000ff4 	.word	0x10000ff4
    5fac:	1000150c 	.word	0x1000150c
    5fb0:	10000ff8 	.word	0x10000ff8
    5fb4:	10000ffa 	.word	0x10000ffa
    5fb8:	100014d9 	.word	0x100014d9
    5fbc:	50004104 	.word	0x50004104
    5fc0:	50004110 	.word	0x50004110
    5fc4:	40030024 	.word	0x40030024
    5fc8:	2009c038 	.word	0x2009c038
    5fcc:	e000e180 	.word	0xe000e180
    5fd0:	40004008 	.word	0x40004008
    5fd4:	10001014 	.word	0x10001014
    5fd8:	4003000c 	.word	0x4003000c
    5fdc:	40030008 	.word	0x40030008
    5fe0:	02faf080 	.word	0x02faf080
    5fe4:	0000988c 	.word	0x0000988c
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    5fe8:	2e0a      	cmp	r6, #10
    5fea:	d04b      	beq.n	6084 <bt_le_sync+0x3b0>
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5fec:	2301      	movs	r3, #1

			cc2400_strobe(SRFOFF);
    5fee:	2064      	movs	r0, #100	; 0x64

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5ff0:	7623      	strb	r3, [r4, #24]

			cc2400_strobe(SRFOFF);
    5ff2:	f002 f9fc 	bl	83ee <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5ff6:	f002 f9f3 	bl	83e0 <cc2400_status>
    5ffa:	0742      	lsls	r2, r0, #29
    5ffc:	d4fb      	bmi.n	5ff6 <bt_le_sync+0x322>

			/* Retune */
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5ffe:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    6002:	b29b      	uxth	r3, r3
    6004:	b123      	cbz	r3, 6010 <bt_le_sync+0x33c>
    6006:	4b26      	ldr	r3, [pc, #152]	; (60a0 <bt_le_sync+0x3cc>)
    6008:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    600c:	b29b      	uxth	r3, r3
    600e:	e001      	b.n	6014 <bt_le_sync+0x340>
    6010:	f640 1362 	movw	r3, #2402	; 0x962
    6014:	8023      	strh	r3, [r4, #0]
			restart_jamming = 1;
    6016:	2301      	movs	r3, #1
    6018:	632b      	str	r3, [r5, #48]	; 0x30
		}

		cc2400_set(SYNCL, le.syncl);
    601a:	202c      	movs	r0, #44	; 0x2c
    601c:	8961      	ldrh	r1, [r4, #10]
    601e:	f002 f93c 	bl	829a <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6022:	202d      	movs	r0, #45	; 0x2d
    6024:	8921      	ldrh	r1, [r4, #8]
    6026:	f002 f938 	bl	829a <cc2400_set>

		if (do_hop)
    602a:	7aeb      	ldrb	r3, [r5, #11]
    602c:	b10b      	cbz	r3, 6032 <bt_le_sync+0x35e>
			hop();
    602e:	f7ff fa67 	bl	5500 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6032:	69eb      	ldr	r3, [r5, #28]
    6034:	f8df 8070 	ldr.w	r8, [pc, #112]	; 60a8 <bt_le_sync+0x3d4>
    6038:	2b00      	cmp	r3, #0
    603a:	dd07      	ble.n	604c <bt_le_sync+0x378>
			le_jam();
    603c:	f7ff fa24 	bl	5488 <le_jam>
			--le_jam_count;
    6040:	f8d8 301c 	ldr.w	r3, [r8, #28]
    6044:	3b01      	subs	r3, #1
    6046:	f8c8 301c 	str.w	r3, [r8, #28]
    604a:	e016      	b.n	607a <bt_le_sync+0x3a6>
		} else {
			/* RX mode */
			dma_init_le();
    604c:	f001 fad0 	bl	75f0 <dma_init_le>
			dio_ssp_start();
    6050:	f001 fb16 	bl	7680 <dio_ssp_start>

			if (restart_jamming) {
    6054:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    6058:	b143      	cbz	r3, 606c <bt_le_sync+0x398>
				cc2400_rx_sync(rbit(le.access_address));
    605a:	6860      	ldr	r0, [r4, #4]
    605c:	f002 f828 	bl	80b0 <rbit>
    6060:	f7fe fa0c 	bl	447c <cc2400_rx_sync>
				restart_jamming = 0;
    6064:	2300      	movs	r3, #0
    6066:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    606a:	e006      	b.n	607a <bt_le_sync+0x3a6>
			} else {
				// wait till we're in FSLOCK before strobing RX
				while (!(cc2400_status() & FS_LOCK));
    606c:	f002 f9b8 	bl	83e0 <cc2400_status>
    6070:	0743      	lsls	r3, r0, #29
    6072:	d5fb      	bpl.n	606c <bt_le_sync+0x398>
				cc2400_strobe(SRX);
    6074:	2062      	movs	r0, #98	; 0x62
    6076:	f002 f9ba 	bl	83ee <cc2400_strobe>
			}
		}

		rx_tc = 0;
    607a:	2300      	movs	r3, #0
    607c:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    6080:	603b      	str	r3, [r7, #0]
    6082:	e645      	b.n	5d10 <bt_le_sync+0x3c>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6084:	4b07      	ldr	r3, [pc, #28]	; (60a4 <bt_le_sync+0x3d0>)
    6086:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    608a:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    608c:	f7fe faa8 	bl	45e0 <cc2400_idle>
	dio_ssp_stop();
    6090:	f001 fb1c 	bl	76cc <dio_ssp_stop>
	cs_trigger_disable();
    6094:	f001 f9c6 	bl	7424 <cs_trigger_disable>
}
    6098:	b011      	add	sp, #68	; 0x44
    609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    609e:	bf00      	nop
    60a0:	1000044c 	.word	0x1000044c
    60a4:	e000e180 	.word	0xe000e180
    60a8:	10000e34 	.word	0x10000e34

000060ac <bt_follow_le>:
			do_hop = 1;
		}
	}
}

void bt_follow_le() {
    60ac:	b510      	push	{r4, lr}
	reset_le();
    60ae:	f7ff fce5 	bl	5a7c <reset_le>
	packet_cb = connection_follow_cb;
    60b2:	4c04      	ldr	r4, [pc, #16]	; (60c4 <bt_follow_le+0x18>)
    60b4:	4b04      	ldr	r3, [pc, #16]	; (60c8 <bt_follow_le+0x1c>)
	bt_le_sync(MODE_BT_FOLLOW_LE);
    60b6:	2009      	movs	r0, #9
	}
}

void bt_follow_le() {
	reset_le();
	packet_cb = connection_follow_cb;
    60b8:	61a3      	str	r3, [r4, #24]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    60ba:	f7ff fe0b 	bl	5cd4 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    60be:	2300      	movs	r3, #0
    60c0:	7463      	strb	r3, [r4, #17]
    60c2:	bd10      	pop	{r4, pc}
    60c4:	10000e34 	.word	0x10000e34
    60c8:	00004791 	.word	0x00004791

000060cc <le_promisc_state>:
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    60cc:	b570      	push	{r4, r5, r6, lr}
    60ce:	b08e      	sub	sp, #56	; 0x38
    60d0:	4606      	mov	r6, r0
    60d2:	460d      	mov	r5, r1
    60d4:	4614      	mov	r4, r2
	u8 buf[50] = { 0, };
    60d6:	a801      	add	r0, sp, #4
    60d8:	2100      	movs	r1, #0
    60da:	2232      	movs	r2, #50	; 0x32
    60dc:	f7fe f8a8 	bl	4230 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    60e0:	4629      	mov	r1, r5
    60e2:	2c31      	cmp	r4, #49	; 0x31
    60e4:	bf34      	ite	cc
    60e6:	4622      	movcc	r2, r4
    60e8:	2231      	movcs	r2, #49	; 0x31
    60ea:	f10d 0005 	add.w	r0, sp, #5
void le_promisc_state(u8 type, void *data, unsigned len) {
	u8 buf[50] = { 0, };
	if (len > 49)
		len = 49;

	buf[0] = type;
    60ee:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    60f2:	f003 f963 	bl	93bc <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    60f6:	a901      	add	r1, sp, #4
    60f8:	2005      	movs	r0, #5
    60fa:	f7fe fa17 	bl	452c <enqueue>
}
    60fe:	b00e      	add	sp, #56	; 0x38
    6100:	bd70      	pop	{r4, r5, r6, pc}
    6102:	0000      	movs	r0, r0

00006104 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    6104:	b538      	push	{r3, r4, r5, lr}
	static u32 first_ts = 0;
	if (channel == 2404) {
    6106:	4a31      	ldr	r2, [pc, #196]	; (61cc <promisc_recover_hop_increment+0xc8>)
    6108:	f640 1364 	movw	r3, #2404	; 0x964
    610c:	8811      	ldrh	r1, [r2, #0]
    610e:	4c30      	ldr	r4, [pc, #192]	; (61d0 <promisc_recover_hop_increment+0xcc>)
    6110:	b289      	uxth	r1, r1
    6112:	4299      	cmp	r1, r3
    6114:	d10d      	bne.n	6132 <promisc_recover_hop_increment+0x2e>
		first_ts = CLK100NS;
    6116:	4b2f      	ldr	r3, [pc, #188]	; (61d4 <promisc_recover_hop_increment+0xd0>)
    6118:	4a2f      	ldr	r2, [pc, #188]	; (61d8 <promisc_recover_hop_increment+0xd4>)
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	6812      	ldr	r2, [r2, #0]
    611e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6122:	f640 4135 	movw	r1, #3125	; 0xc35
    6126:	fb01 2303 	mla	r3, r1, r3, r2
    612a:	6363      	str	r3, [r4, #52]	; 0x34
		hop_direct_channel = 2406;
    612c:	f640 1366 	movw	r3, #2406	; 0x966
    6130:	e048      	b.n	61c4 <promisc_recover_hop_increment+0xc0>
		do_hop = 1;
	} else if (channel == 2406) {
    6132:	8810      	ldrh	r0, [r2, #0]
    6134:	f640 1166 	movw	r1, #2406	; 0x966
    6138:	b280      	uxth	r0, r0
    613a:	4288      	cmp	r0, r1
    613c:	d142      	bne.n	61c4 <promisc_recover_hop_increment+0xc0>
		u32 second_ts = CLK100NS;
    613e:	4b25      	ldr	r3, [pc, #148]	; (61d4 <promisc_recover_hop_increment+0xd0>)
    6140:	4925      	ldr	r1, [pc, #148]	; (61d8 <promisc_recover_hop_increment+0xd4>)
    6142:	681b      	ldr	r3, [r3, #0]
    6144:	6809      	ldr	r1, [r1, #0]
    6146:	f640 4035 	movw	r0, #3125	; 0xc35
    614a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    614e:	fb00 1303 	mla	r3, r0, r3, r1
		if (second_ts < first_ts)
    6152:	6b60      	ldr	r0, [r4, #52]	; 0x34
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6154:	8c52      	ldrh	r2, [r2, #34]	; 0x22
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
    6156:	4283      	cmp	r3, r0
			second_ts += 3276800000; // handle rollover
    6158:	bf3c      	itt	cc
    615a:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    615e:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6162:	1a1b      	subs	r3, r3, r0
    6164:	f243 05d4 	movw	r5, #12500	; 0x30d4
    6168:	f641 006a 	movw	r0, #6250	; 0x186a
    616c:	fb00 3302 	mla	r3, r0, r2, r3
    6170:	4355      	muls	r5, r2
    6172:	fbb3 f3f5 	udiv	r3, r3, r5
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    6176:	2b24      	cmp	r3, #36	; 0x24
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6178:	4914      	ldr	r1, [pc, #80]	; (61cc <promisc_recover_hop_increment+0xc8>)
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    617a:	d821      	bhi.n	61c0 <promisc_recover_hop_increment+0xbc>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    617c:	4817      	ldr	r0, [pc, #92]	; (61dc <promisc_recover_hop_increment+0xd8>)
			le.interval_timer = le.conn_interval / 2;
    617e:	0852      	lsrs	r2, r2, #1
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6180:	4403      	add	r3, r0
    6182:	f893 0870 	ldrb.w	r0, [r3, #2160]	; 0x870
			le.interval_timer = le.conn_interval / 2;
    6186:	840a      	strh	r2, [r1, #32]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6188:	7688      	strb	r0, [r1, #26]
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    618a:	2225      	movs	r2, #37	; 0x25
    618c:	3001      	adds	r0, #1
    618e:	fb90 f5f2 	sdiv	r5, r0, r2
    6192:	fb02 0215 	mls	r2, r2, r5, r0
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    6196:	2300      	movs	r3, #0
    6198:	848b      	strh	r3, [r1, #36]	; 0x24
			le.conn_epoch = 0;
    619a:	61cb      	str	r3, [r1, #28]
			do_hop = 0;
    619c:	72e3      	strb	r3, [r4, #11]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
    619e:	2003      	movs	r0, #3
			le.crc_verify = 0;
    61a0:	614b      	str	r3, [r1, #20]
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    61a2:	4b0f      	ldr	r3, [pc, #60]	; (61e0 <promisc_recover_hop_increment+0xdc>)
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    61a4:	764a      	strb	r2, [r1, #25]
			le.link_state = LINK_CONNECTED;
    61a6:	7608      	strb	r0, [r1, #24]
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    61a8:	2201      	movs	r2, #1
    61aa:	311a      	adds	r1, #26
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    61ac:	61a3      	str	r3, [r4, #24]
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
    61ae:	72a0      	strb	r0, [r4, #10]
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    61b0:	f7ff ff8c 	bl	60cc <le_promisc_state>

			if (jam_mode != JAM_NONE)
    61b4:	7ce3      	ldrb	r3, [r4, #19]
    61b6:	b143      	cbz	r3, 61ca <promisc_recover_hop_increment+0xc6>
				le_jam_count = JAM_COUNT_DEFAULT;
    61b8:	4b05      	ldr	r3, [pc, #20]	; (61d0 <promisc_recover_hop_increment+0xcc>)
    61ba:	2228      	movs	r2, #40	; 0x28
    61bc:	61da      	str	r2, [r3, #28]
    61be:	bd38      	pop	{r3, r4, r5, pc}

			return;
		}
		hop_direct_channel = 2404;
    61c0:	f640 1364 	movw	r3, #2404	; 0x964
		do_hop = 1;
	}
	else {
		hop_direct_channel = 2404;
    61c4:	81a3      	strh	r3, [r4, #12]
		do_hop = 1;
    61c6:	2301      	movs	r3, #1
    61c8:	72e3      	strb	r3, [r4, #11]
    61ca:	bd38      	pop	{r3, r4, r5, pc}
    61cc:	1000044c 	.word	0x1000044c
    61d0:	10000e34 	.word	0x10000e34
    61d4:	10001014 	.word	0x10001014
    61d8:	40004008 	.word	0x40004008
    61dc:	0000979c 	.word	0x0000979c
    61e0:	00004791 	.word	0x00004791

000061e4 <promisc_recover_hop_interval>:
	}
}

void promisc_recover_hop_interval(u8 *packet) {
    61e4:	b538      	push	{r3, r4, r5, lr}
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    61e6:	4b25      	ldr	r3, [pc, #148]	; (627c <promisc_recover_hop_interval+0x98>)
    61e8:	f640 4235 	movw	r2, #3125	; 0xc35
    61ec:	681c      	ldr	r4, [r3, #0]
    61ee:	4b24      	ldr	r3, [pc, #144]	; (6280 <promisc_recover_hop_interval+0x9c>)
    61f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
    61f4:	681b      	ldr	r3, [r3, #0]
	if (cur_clk < prev_clk)
    61f6:	4d23      	ldr	r5, [pc, #140]	; (6284 <promisc_recover_hop_interval+0xa0>)
}

void promisc_recover_hop_interval(u8 *packet) {
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    61f8:	fb02 3404 	mla	r4, r2, r4, r3
	if (cur_clk < prev_clk)
    61fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    61fe:	429c      	cmp	r4, r3
    6200:	d205      	bcs.n	620e <promisc_recover_hop_interval+0x2a>
		cur_clk += 3267800000; // handle rollover
    6202:	f104 4443 	add.w	r4, r4, #3271557120	; 0xc3000000
    6206:	f5a4 1465 	sub.w	r4, r4, #3751936	; 0x394000
    620a:	f5a4 54a2 	sub.w	r4, r4, #5184	; 0x1440
	u32 clk_diff = cur_clk - prev_clk;
    620e:	1ae3      	subs	r3, r4, r3
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    6210:	f246 12a7 	movw	r2, #24999	; 0x61a7
    6214:	4293      	cmp	r3, r2
    6216:	d930      	bls.n	627a <promisc_recover_hop_interval+0x96>
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    6218:	4a1b      	ldr	r2, [pc, #108]	; (6288 <promisc_recover_hop_interval+0xa4>)
    621a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    621e:	428b      	cmp	r3, r1
		le_promisc.smallest_hop_interval = clk_diff;
    6220:	bf38      	it	cc
    6222:	f8c2 3100 	strcc.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6226:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    622a:	4918      	ldr	r1, [pc, #96]	; (628c <promisc_recover_hop_interval+0xa8>)
    622c:	f502 3261 	add.w	r2, r2, #230400	; 0x38400
    6230:	f202 3252 	addw	r2, r2, #850	; 0x352
    6234:	fbb2 f2f1 	udiv	r2, r2, r1

	if (le.conn_interval == obsv_hop_interval) {
    6238:	4915      	ldr	r1, [pc, #84]	; (6290 <promisc_recover_hop_interval+0xac>)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    623a:	b292      	uxth	r2, r2

	if (le.conn_interval == obsv_hop_interval) {
    623c:	8c48      	ldrh	r0, [r1, #34]	; 0x22
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    623e:	4b12      	ldr	r3, [pc, #72]	; (6288 <promisc_recover_hop_interval+0xa4>)

	if (le.conn_interval == obsv_hop_interval) {
    6240:	4290      	cmp	r0, r2
    6242:	d115      	bne.n	6270 <promisc_recover_hop_interval+0x8c>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    6244:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    6248:	3201      	adds	r2, #1
		if (le_promisc.consec_intervals == 5) {
    624a:	2a05      	cmp	r2, #5

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    624c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    6250:	d112      	bne.n	6278 <promisc_recover_hop_interval+0x94>
			packet_cb = promisc_recover_hop_increment;
    6252:	4b10      	ldr	r3, [pc, #64]	; (6294 <promisc_recover_hop_interval+0xb0>)
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    6254:	2002      	movs	r0, #2

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
    6256:	61ab      	str	r3, [r5, #24]
			hop_direct_channel = 2404;
    6258:	f640 1364 	movw	r3, #2404	; 0x964
    625c:	81ab      	strh	r3, [r5, #12]
			hop_mode = HOP_DIRECT;
    625e:	2304      	movs	r3, #4
    6260:	72ab      	strb	r3, [r5, #10]
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    6262:	3122      	adds	r1, #34	; 0x22
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    6264:	2301      	movs	r3, #1
			le_promisc_state(2, &le.conn_interval, 2);
    6266:	4602      	mov	r2, r0
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    6268:	72eb      	strb	r3, [r5, #11]
			le_promisc_state(2, &le.conn_interval, 2);
    626a:	f7ff ff2f 	bl	60cc <le_promisc_state>
    626e:	e003      	b.n	6278 <promisc_recover_hop_interval+0x94>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    6270:	844a      	strh	r2, [r1, #34]	; 0x22
		le_promisc.consec_intervals = 0;
    6272:	2200      	movs	r2, #0
    6274:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    6278:	63ac      	str	r4, [r5, #56]	; 0x38
    627a:	bd38      	pop	{r3, r4, r5, pc}
    627c:	10001014 	.word	0x10001014
    6280:	40004008 	.word	0x40004008
    6284:	10000e34 	.word	0x10000e34
    6288:	10001058 	.word	0x10001058
    628c:	00070ea4 	.word	0x00070ea4
    6290:	1000044c 	.word	0x1000044c
    6294:	00006105 	.word	0x00006105

00006298 <promisc_follow_cb>:
}

void promisc_follow_cb(u8 *packet) {
    6298:	b538      	push	{r3, r4, r5, lr}
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    629a:	4c18      	ldr	r4, [pc, #96]	; (62fc <promisc_follow_cb+0x64>)
	}

	prev_clk = cur_clk;
}

void promisc_follow_cb(u8 *packet) {
    629c:	4601      	mov	r1, r0
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    629e:	6963      	ldr	r3, [r4, #20]
    62a0:	bb53      	cbnz	r3, 62f8 <promisc_follow_cb+0x60>
    62a2:	7903      	ldrb	r3, [r0, #4]
    62a4:	2b01      	cmp	r3, #1
    62a6:	d127      	bne.n	62f8 <promisc_follow_cb+0x60>
    62a8:	7945      	ldrb	r5, [r0, #5]
    62aa:	bb2d      	cbnz	r5, 62f8 <promisc_follow_cb+0x60>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    62ac:	7a03      	ldrb	r3, [r0, #8]
    62ae:	79c0      	ldrb	r0, [r0, #7]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    62b0:	2202      	movs	r2, #2
void promisc_follow_cb(u8 *packet) {
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    62b2:	0200      	lsls	r0, r0, #8
    62b4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    62b8:	798b      	ldrb	r3, [r1, #6]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    62ba:	3104      	adds	r1, #4
    62bc:	4318      	orrs	r0, r3
    62be:	f000 fed7 	bl	7070 <btle_reverse_crc>
    62c2:	462a      	mov	r2, r5
    62c4:	60e0      	str	r0, [r4, #12]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    62c6:	462b      	mov	r3, r5
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    62c8:	fa20 f103 	lsr.w	r1, r0, r3
    62cc:	f1c3 0517 	rsb	r5, r3, #23
    62d0:	f001 0101 	and.w	r1, r1, #1
    62d4:	40a9      	lsls	r1, r5
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    62d6:	3301      	adds	r3, #1
    62d8:	2b18      	cmp	r3, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    62da:	ea42 0201 	orr.w	r2, r2, r1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    62de:	d1f3      	bne.n	62c8 <promisc_follow_cb+0x30>
    62e0:	6122      	str	r2, [r4, #16]
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
    62e2:	4b07      	ldr	r3, [pc, #28]	; (6300 <promisc_follow_cb+0x68>)
    62e4:	4a07      	ldr	r2, [pc, #28]	; (6304 <promisc_follow_cb+0x6c>)
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    62e6:	2001      	movs	r0, #1
		packet_cb = promisc_recover_hop_interval;
    62e8:	619a      	str	r2, [r3, #24]
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    62ea:	6160      	str	r0, [r4, #20]
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    62ec:	4906      	ldr	r1, [pc, #24]	; (6308 <promisc_follow_cb+0x70>)
    62ee:	2203      	movs	r2, #3
	}
}
    62f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    62f4:	f7ff beea 	b.w	60cc <le_promisc_state>
    62f8:	bd38      	pop	{r3, r4, r5, pc}
    62fa:	bf00      	nop
    62fc:	1000044c 	.word	0x1000044c
    6300:	10000e34 	.word	0x10000e34
    6304:	000061e5 	.word	0x000061e5
    6308:	10000458 	.word	0x10000458

0000630c <see_aa>:
	}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    630c:	b530      	push	{r4, r5, lr}
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    630e:	2200      	movs	r2, #0
		if (le_promisc.active_aa[i].aa == aa) {
    6310:	4d14      	ldr	r5, [pc, #80]	; (6364 <see_aa+0x58>)
    6312:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
    6316:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    631a:	4281      	cmp	r1, r0
    631c:	d102      	bne.n	6324 <see_aa+0x18>
			++le_promisc.active_aa[i].count;
    631e:	685a      	ldr	r2, [r3, #4]
    6320:	3201      	adds	r2, #1
    6322:	e01c      	b.n	635e <see_aa+0x52>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    6324:	3201      	adds	r2, #1
    6326:	2a20      	cmp	r2, #32
    6328:	d1f2      	bne.n	6310 <see_aa+0x4>
    632a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    632e:	4619      	mov	r1, r3
    6330:	2200      	movs	r2, #0
    6332:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    6336:	6864      	ldr	r4, [r4, #4]
    6338:	428c      	cmp	r4, r1
    633a:	db05      	blt.n	6348 <see_aa+0x3c>
    633c:	2900      	cmp	r1, #0
    633e:	bfa8      	it	ge
    6340:	460c      	movge	r4, r1
    6342:	bfb8      	it	lt
    6344:	4613      	movlt	r3, r2
    6346:	e000      	b.n	634a <see_aa+0x3e>
    6348:	4613      	mov	r3, r2
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    634a:	3201      	adds	r2, #1
    634c:	2a20      	cmp	r2, #32
    634e:	d001      	beq.n	6354 <see_aa+0x48>
    6350:	4621      	mov	r1, r4
    6352:	e7ee      	b.n	6332 <see_aa+0x26>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    6354:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    6358:	2201      	movs	r2, #1
    635a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    635e:	605a      	str	r2, [r3, #4]
    6360:	bd30      	pop	{r4, r5, pc}
    6362:	bf00      	nop
    6364:	10001058 	.word	0x10001058

00006368 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    636c:	b095      	sub	sp, #84	; 0x54
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    636e:	2100      	movs	r1, #0
	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6370:	4680      	mov	r8, r0
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    6372:	2240      	movs	r2, #64	; 0x40
    6374:	a804      	add	r0, sp, #16
    6376:	f7fd ff5b 	bl	4230 <memset>
    637a:	2301      	movs	r3, #1
    637c:	f88d 3010 	strb.w	r3, [sp, #16]
    6380:	f88d 3020 	strb.w	r3, [sp, #32]
    6384:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    6388:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    638c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6390:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    6394:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    6398:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    639c:	ad14      	add	r5, sp, #80	; 0x50
    639e:	ac04      	add	r4, sp, #16
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];
    63a0:	4e50      	ldr	r6, [pc, #320]	; (64e4 <cb_le_promisc+0x17c>)
    63a2:	4f51      	ldr	r7, [pc, #324]	; (64e8 <cb_le_promisc+0x180>)
    63a4:	8830      	ldrh	r0, [r6, #0]
    63a6:	b280      	uxth	r0, r0
    63a8:	3862      	subs	r0, #98	; 0x62
    63aa:	b2c0      	uxtb	r0, r0
    63ac:	f000 fe0a 	bl	6fc4 <btle_channel_index>
    63b0:	5c3a      	ldrb	r2, [r7, r0]

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    63b2:	2300      	movs	r3, #0
			desired[i][j] ^= whitening[idx];
    63b4:	18b9      	adds	r1, r7, r2
    63b6:	5ce0      	ldrb	r0, [r4, r3]
    63b8:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    63bc:	3201      	adds	r2, #1
	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
			desired[i][j] ^= whitening[idx];
    63be:	4041      	eors	r1, r0
    63c0:	54e1      	strb	r1, [r4, r3]
			idx = (idx + 1) % sizeof(whitening);
    63c2:	217f      	movs	r1, #127	; 0x7f

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    63c4:	3301      	adds	r3, #1
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    63c6:	fbb2 f0f1 	udiv	r0, r2, r1

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    63ca:	2b10      	cmp	r3, #16
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    63cc:	fb01 2210 	mls	r2, r1, r0, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    63d0:	d1f0      	bne.n	63b4 <cb_le_promisc+0x4c>
    63d2:	3410      	adds	r4, #16
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    63d4:	42ac      	cmp	r4, r5
    63d6:	d1e3      	bne.n	63a0 <cb_le_promisc+0x38>
    63d8:	f108 0520 	add.w	r5, r8, #32
    63dc:	f508 783c 	add.w	r8, r8, #752	; 0x2f0
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
    63e0:	4b42      	ldr	r3, [pc, #264]	; (64ec <cb_le_promisc+0x184>)
    63e2:	466c      	mov	r4, sp
    63e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    63e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    63ea:	2200      	movs	r2, #0
    63ec:	ab04      	add	r3, sp, #16
    63ee:	eb03 0182 	add.w	r1, r3, r2, lsl #2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    63f2:	2300      	movs	r3, #0
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
				if (unpacked[i+k] != desired[j][k]) {
    63f4:	f815 c003 	ldrb.w	ip, [r5, r3]
    63f8:	5cc8      	ldrb	r0, [r1, r3]
    63fa:	4584      	cmp	ip, r0
    63fc:	d002      	beq.n	6404 <cb_le_promisc+0x9c>
					ok[j] = 0;
    63fe:	2300      	movs	r3, #0
    6400:	50a3      	str	r3, [r4, r2]
					break;
    6402:	e002      	b.n	640a <cb_le_promisc+0xa2>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    6404:	3301      	adds	r3, #1
    6406:	2b10      	cmp	r3, #16
    6408:	d1f4      	bne.n	63f4 <cb_le_promisc+0x8c>
    640a:	3204      	adds	r2, #4
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    640c:	2a10      	cmp	r2, #16
    640e:	d1ed      	bne.n	63ec <cb_le_promisc+0x84>
    6410:	2300      	movs	r3, #0
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
			if (ok[j]) {
    6412:	58e2      	ldr	r2, [r4, r3]
    6414:	b91a      	cbnz	r2, 641e <cb_le_promisc+0xb6>
    6416:	3304      	adds	r3, #4
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    6418:	2b10      	cmp	r3, #16
    641a:	d1fa      	bne.n	6412 <cb_le_promisc+0xaa>
    641c:	e03e      	b.n	649c <cb_le_promisc+0x134>
		// skip if no match
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    641e:	8830      	ldrh	r0, [r6, #0]
    6420:	b280      	uxth	r0, r0
    6422:	3862      	subs	r0, #98	; 0x62
    6424:	b2c0      	uxtb	r0, r0
    6426:	f000 fdcd 	bl	6fc4 <btle_channel_index>
    642a:	5c38      	ldrb	r0, [r7, r0]
		for (j = 0; j < 4+3+3; ++j) {
    642c:	2300      	movs	r3, #0
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    642e:	2100      	movs	r1, #0
    6430:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
    6434:	460a      	mov	r2, r1
    6436:	eb0c 0402 	add.w	r4, ip, r2
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
    643a:	2b03      	cmp	r3, #3
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
    643c:	f814 4c20 	ldrb.w	r4, [r4, #-32]
				if (j >= 4) { // unwhiten data bytes
    6440:	dd0c      	ble.n	645c <cb_le_promisc+0xf4>
					bit ^= whitening[idx];
    6442:	eb07 0e00 	add.w	lr, r7, r0
    6446:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    644a:	3001      	adds	r0, #1
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
    644c:	ea84 040e 	eor.w	r4, r4, lr
					idx = (idx + 1) % sizeof(whitening);
    6450:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    6454:	fbb0 f9fe 	udiv	r9, r0, lr
    6458:	fb0e 0019 	mls	r0, lr, r9, r0
				}
				byte |= bit << k;
    645c:	4094      	lsls	r4, r2

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    645e:	3201      	adds	r2, #1
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6460:	4321      	orrs	r1, r4

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6462:	2a08      	cmp	r2, #8
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6464:	b2c9      	uxtb	r1, r1

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6466:	d1e6      	bne.n	6436 <cb_le_promisc+0xce>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    6468:	4c21      	ldr	r4, [pc, #132]	; (64f0 <cb_le_promisc+0x188>)
    646a:	6822      	ldr	r2, [r4, #0]
    646c:	54d1      	strb	r1, [r2, r3]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    646e:	3301      	adds	r3, #1
    6470:	2b0a      	cmp	r3, #10
    6472:	d1dc      	bne.n	642e <cb_le_promisc+0xc6>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    6474:	6823      	ldr	r3, [r4, #0]
    6476:	78d9      	ldrb	r1, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    6478:	6823      	ldr	r3, [r4, #0]
    647a:	789b      	ldrb	r3, [r3, #2]
				 (idle_rxbuf[1] <<  8) |
    647c:	6822      	ldr	r2, [r4, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    647e:	041b      	lsls	r3, r3, #16
				 (idle_rxbuf[1] <<  8) |
    6480:	7850      	ldrb	r0, [r2, #1]
				 (idle_rxbuf[0]);
    6482:	6822      	ldr	r2, [r4, #0]
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    6484:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    6488:	7812      	ldrb	r2, [r2, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    648a:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    648c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    6490:	f7ff ff3c 	bl	630c <see_aa>

		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    6494:	6821      	ldr	r1, [r4, #0]
    6496:	2001      	movs	r0, #1
    6498:	f7fe f848 	bl	452c <enqueue>
    649c:	3501      	adds	r5, #1
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    649e:	4545      	cmp	r5, r8
    64a0:	d19e      	bne.n	63e0 <cb_le_promisc+0x78>
    64a2:	2300      	movs	r3, #0
    64a4:	4a13      	ldr	r2, [pc, #76]	; (64f4 <cb_le_promisc+0x18c>)
    64a6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    64aa:	6849      	ldr	r1, [r1, #4]
    64ac:	2903      	cmp	r1, #3
    64ae:	dd11      	ble.n	64d4 <cb_le_promisc+0x16c>
			le_set_access_address(le_promisc.active_aa[i].aa);
    64b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    64b4:	f7fe f888 	bl	45c8 <le_set_access_address>
			data_cb = cb_follow_le;
    64b8:	4b0f      	ldr	r3, [pc, #60]	; (64f8 <cb_le_promisc+0x190>)
    64ba:	4a10      	ldr	r2, [pc, #64]	; (64fc <cb_le_promisc+0x194>)
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    64bc:	2400      	movs	r4, #0

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    64be:	62da      	str	r2, [r3, #44]	; 0x2c
			packet_cb = promisc_follow_cb;
    64c0:	4a0f      	ldr	r2, [pc, #60]	; (6500 <cb_le_promisc+0x198>)
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    64c2:	4620      	mov	r0, r4
	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
    64c4:	619a      	str	r2, [r3, #24]
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    64c6:	490f      	ldr	r1, [pc, #60]	; (6504 <cb_le_promisc+0x19c>)
    64c8:	2204      	movs	r2, #4
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    64ca:	6174      	str	r4, [r6, #20]
			le_promisc_state(0, &le.access_address, 4);
    64cc:	f7ff fdfe 	bl	60cc <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    64d0:	4620      	mov	r0, r4
    64d2:	e003      	b.n	64dc <cb_le_promisc+0x174>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    64d4:	3301      	adds	r3, #1
    64d6:	2b20      	cmp	r3, #32
    64d8:	d1e4      	bne.n	64a4 <cb_le_promisc+0x13c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    64da:	2001      	movs	r0, #1
}
    64dc:	b015      	add	sp, #84	; 0x54
    64de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    64e2:	bf00      	nop
    64e4:	1000044c 	.word	0x1000044c
    64e8:	0000979c 	.word	0x0000979c
    64ec:	0000a034 	.word	0x0000a034
    64f0:	10001170 	.word	0x10001170
    64f4:	10001058 	.word	0x10001058
    64f8:	10000e34 	.word	0x10000e34
    64fc:	0000468d 	.word	0x0000468d
    6500:	00006299 	.word	0x00006299
    6504:	10000450 	.word	0x10000450

00006508 <bt_promisc_le>:

void bt_promisc_le() {
    6508:	b538      	push	{r3, r4, r5, lr}
	while (requested_mode == MODE_BT_PROMISC_LE) {
    650a:	4d16      	ldr	r5, [pc, #88]	; (6564 <bt_promisc_le+0x5c>)
    650c:	7cab      	ldrb	r3, [r5, #18]
    650e:	2b0a      	cmp	r3, #10
    6510:	d126      	bne.n	6560 <bt_promisc_le+0x58>
		reset_le_promisc();

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6512:	4c15      	ldr	r4, [pc, #84]	; (6568 <bt_promisc_le+0x60>)
	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
		reset_le_promisc();
    6514:	f7ff fadc 	bl	5ad0 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6518:	8823      	ldrh	r3, [r4, #0]
    651a:	07da      	lsls	r2, r3, #31
			channel = 2440;
    651c:	bf44      	itt	mi
    651e:	f640 1388 	movwmi	r3, #2440	; 0x988
    6522:	8023      	strhmi	r3, [r4, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    6524:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6526:	b94b      	cbnz	r3, 653c <bt_promisc_le+0x34>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
    6528:	4b0f      	ldr	r3, [pc, #60]	; (6568 <bt_promisc_le+0x60>)
    652a:	8818      	ldrh	r0, [r3, #0]
    652c:	b280      	uxth	r0, r0
    652e:	f000 ff31 	bl	7394 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    6532:	4b0e      	ldr	r3, [pc, #56]	; (656c <bt_promisc_le+0x64>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    6534:	200a      	movs	r0, #10

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
			data_cb = cb_le_promisc;
    6536:	62eb      	str	r3, [r5, #44]	; 0x2c
			bt_generic_le(MODE_BT_PROMISC_LE);
    6538:	f7ff fada 	bl	5af0 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    653c:	7cad      	ldrb	r5, [r5, #18]
    653e:	b2ed      	uxtb	r5, r5
    6540:	2d0a      	cmp	r5, #10
    6542:	d10d      	bne.n	6560 <bt_promisc_le+0x58>
			break;

		le_promisc_state(0, &le.access_address, 4);
    6544:	2000      	movs	r0, #0
    6546:	490a      	ldr	r1, [pc, #40]	; (6570 <bt_promisc_le+0x68>)
    6548:	2204      	movs	r2, #4
    654a:	f7ff fdbf 	bl	60cc <le_promisc_state>
		packet_cb = promisc_follow_cb;
    654e:	4a09      	ldr	r2, [pc, #36]	; (6574 <bt_promisc_le+0x6c>)
    6550:	4b04      	ldr	r3, [pc, #16]	; (6564 <bt_promisc_le+0x5c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    6552:	4628      	mov	r0, r5
		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
			break;

		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
    6554:	619a      	str	r2, [r3, #24]
		le.crc_verify = 0;
    6556:	2300      	movs	r3, #0
    6558:	6163      	str	r3, [r4, #20]
		bt_le_sync(MODE_BT_PROMISC_LE);
    655a:	f7ff fbbb 	bl	5cd4 <bt_le_sync>
    655e:	e7d4      	b.n	650a <bt_promisc_le+0x2>
    6560:	bd38      	pop	{r3, r4, r5, pc}
    6562:	bf00      	nop
    6564:	10000e34 	.word	0x10000e34
    6568:	1000044c 	.word	0x1000044c
    656c:	00006369 	.word	0x00006369
    6570:	10000450 	.word	0x10000450
    6574:	00006299 	.word	0x00006299

00006578 <bt_slave_le>:
	}
}

void bt_slave_le(u16 tx_pwr) {
    6578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    657c:	b08f      	sub	sp, #60	; 0x3c
	int i, j;
	int num_adv_ind = 1;
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};
    657e:	4990      	ldr	r1, [pc, #576]	; (67c0 <bt_slave_le+0x248>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}

void bt_slave_le(u16 tx_pwr) {
    6580:	4682      	mov	sl, r0
	int i, j;
	int num_adv_ind = 1;
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};
    6582:	888b      	ldrh	r3, [r1, #4]
    6584:	6808      	ldr	r0, [r1, #0]
    6586:	f8ad 3020 	strh.w	r3, [sp, #32]
    658a:	9007      	str	r0, [sp, #28]

	u8 adv_overhead[20] = {0x42, 0x1d,	// adv_nonconn_ind, length 29 (__01 1101)
    658c:	1d8b      	adds	r3, r1, #6
    658e:	aa09      	add	r2, sp, #36	; 0x24
    6590:	f101 0516 	add.w	r5, r1, #22
    6594:	6818      	ldr	r0, [r3, #0]
    6596:	6859      	ldr	r1, [r3, #4]
    6598:	4614      	mov	r4, r2
    659a:	c403      	stmia	r4!, {r0, r1}
    659c:	3308      	adds	r3, #8
    659e:	42ab      	cmp	r3, r5
    65a0:	4622      	mov	r2, r4
    65a2:	d1f7      	bne.n	6594 <bt_slave_le+0x1c>
    65a4:	6818      	ldr	r0, [r3, #0]
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
		slave_mac_address[i] = slave_mac_address_data[i];
    65a6:	4a87      	ldr	r2, [pc, #540]	; (67c4 <bt_slave_le+0x24c>)
	int fin_adv_len = 0;
	u8 **adv_ind;
	u8 adv_ind_len;
	u16 ch[] = {2402, 2426, 2480};

	u8 adv_overhead[20] = {0x42, 0x1d,	// adv_nonconn_ind, length 29 (__01 1101)
    65a8:	6020      	str	r0, [r4, #0]
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
		slave_mac_address[i] = slave_mac_address_data[i];
    65aa:	6814      	ldr	r4, [r2, #0]
						   0x03, 0x03, 0xaa, 0xfe, // service advertised - len, type, eddystone UUID
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
    65ac:	2300      	movs	r3, #0
    65ae:	4693      	mov	fp, r2
		slave_mac_address[i] = slave_mac_address_data[i];
    65b0:	4a85      	ldr	r2, [pc, #532]	; (67c8 <bt_slave_le+0x250>)
    65b2:	5ce0      	ldrb	r0, [r4, r3]
    65b4:	f102 0124 	add.w	r1, r2, #36	; 0x24
    65b8:	5458      	strb	r0, [r3, r1]
						   0x03, 0x03, 0xaa, 0xfe, // service advertised - len, type, eddystone UUID
						   0x12, 0x16, 0xaa, 0xfe, // len(3 + URL frame + Eddystone URL), type, eddystone UUID
						   0x10, 0x00, 0x02, // URL frame - frametype(URL), tx power, URL scheme prefix (0x02: http://)
						   0xaa }; // preamble 0xaa

	for (i = 0; i < 6; i++)
    65ba:	3301      	adds	r3, #1
    65bc:	2b06      	cmp	r3, #6
    65be:	4690      	mov	r8, r2
    65c0:	d1f6      	bne.n	65b0 <bt_slave_le+0x38>
		slave_mac_address[i] = slave_mac_address_data[i];

	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
    65c2:	6a12      	ldr	r2, [r2, #32]
    65c4:	230b      	movs	r3, #11
    65c6:	1f97      	subs	r7, r2, #6
    65c8:	fb97 f6f3 	sdiv	r6, r7, r3
	if (dlen > 11 + 6) {
    65cc:	2a11      	cmp	r2, #17
		slave_mac_address[i] = slave_mac_address_data[i];

	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
    65ce:	fb03 7716 	mls	r7, r3, r6, r7
	if (dlen > 11 + 6) {
    65d2:	dd02      	ble.n	65da <bt_slave_le+0x62>
		num_adv_ind = (dlen-6)/11 + 1;
		fin_adv_len = (dlen-6) % 11;
		if (fin_adv_len == 0) {
    65d4:	b11f      	cbz	r7, 65de <bt_slave_le+0x66>
	// Standards said maximum advertising channel PDU length 39 bytes (adv payload 19 + 1 (preamble))
	// There's a probem, actual maximum length 34 bytes (adv payload 14 + 1 (preamble)) in ubertooth
	// Nexsus 5 smartphone can not receive BLE packet which has length over 31 bytes (adv payload 11 + 1 (preamble))
	fin_adv_len = (dlen-6) % 11;
	if (dlen > 11 + 6) {
		num_adv_ind = (dlen-6)/11 + 1;
    65d6:	3601      	adds	r6, #1
    65d8:	e002      	b.n	65e0 <bt_slave_le+0x68>
}

void bt_slave_le(u16 tx_pwr) {
	u32 calc_crc;
	int i, j;
	int num_adv_ind = 1;
    65da:	2601      	movs	r6, #1
    65dc:	e000      	b.n	65e0 <bt_slave_le+0x68>
	fin_adv_len = (dlen-6) % 11;
	if (dlen > 11 + 6) {
		num_adv_ind = (dlen-6)/11 + 1;
		fin_adv_len = (dlen-6) % 11;
		if (fin_adv_len == 0) {
			fin_adv_len = 11;
    65de:	461f      	mov	r7, r3
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
    65e0:	00b5      	lsls	r5, r6, #2
    65e2:	4628      	mov	r0, r5
    65e4:	f002 fbfc 	bl	8de0 <malloc>
	for (i=0; i< num_adv_ind-1; i++) {
    65e8:	2300      	movs	r3, #0
		if (fin_adv_len == 0) {
			fin_adv_len = 11;
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
    65ea:	4604      	mov	r4, r0
	for (i=0; i< num_adv_ind-1; i++) {
    65ec:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
    65f0:	454b      	cmp	r3, r9
    65f2:	da08      	bge.n	6606 <bt_slave_le+0x8e>
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
    65f4:	201f      	movs	r0, #31
    65f6:	9302      	str	r3, [sp, #8]
    65f8:	f002 fbf2 	bl	8de0 <malloc>
    65fc:	9b02      	ldr	r3, [sp, #8]
    65fe:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
			fin_adv_len = 11;
			num_adv_ind = num_adv_ind - 1;}
	}

	adv_ind = (u8**) malloc(sizeof(u8*)*num_adv_ind);
	for (i=0; i< num_adv_ind-1; i++) {
    6602:	3301      	adds	r3, #1
    6604:	e7f2      	b.n	65ec <bt_slave_le+0x74>
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));
    6606:	f107 0017 	add.w	r0, r7, #23
    660a:	f002 fbe9 	bl	8de0 <malloc>
    660e:	3d04      	subs	r5, #4
    6610:	5160      	str	r0, [r4, r5]

	for (i=0; i< num_adv_ind; i++) {
    6612:	2500      	movs	r5, #0
    6614:	462b      	mov	r3, r5
    6616:	42b3      	cmp	r3, r6
    6618:	da6f      	bge.n	66fa <bt_slave_le+0x182>
    661a:	2200      	movs	r2, #0
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
    661c:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
    6620:	f81e 0002 	ldrb.w	r0, [lr, r2]
    6624:	5961      	ldr	r1, [r4, r5]
    6626:	5488      	strb	r0, [r1, r2]
    6628:	3201      	adds	r2, #1
    662a:	2a14      	cmp	r2, #20
    662c:	d1f6      	bne.n	661c <bt_slave_le+0xa4>
    662e:	2205      	movs	r2, #5
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
    6630:	4966      	ldr	r1, [pc, #408]	; (67cc <bt_slave_le+0x254>)
    6632:	f1c2 0007 	rsb	r0, r2, #7
    6636:	f812 e001 	ldrb.w	lr, [r2, r1]
    663a:	5961      	ldr	r1, [r4, r5]
    663c:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    6640:	f801 e000 	strb.w	lr, [r1, r0]
    6644:	d2f4      	bcs.n	6630 <bt_slave_le+0xb8>
		adv_ind[i][17] = (u8) num_adv_ind;
    6646:	5962      	ldr	r2, [r4, r5]
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    6648:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
		adv_ind[i][17] = (u8) num_adv_ind;
    664c:	7456      	strb	r6, [r2, #17]
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    664e:	5962      	ldr	r2, [r4, r5]
    6650:	4419      	add	r1, r3
		if (i < num_adv_ind -1) {
    6652:	454b      	cmp	r3, r9

	for (i=0; i< num_adv_ind; i++) {
		for (j=0; j<20; j++) adv_ind[i][j] = adv_overhead[j];
		for (j=0; j<6; j++) adv_ind[i][j+2] = slave_mac_address[5-j];
		adv_ind[i][17] = (u8) num_adv_ind;
		adv_ind[i][19] = adv_overhead[19] + (u8) i;
    6654:	74d1      	strb	r1, [r2, #19]
		if (i < num_adv_ind -1) {
    6656:	da12      	bge.n	667e <bt_slave_le+0x106>
    6658:	210b      	movs	r1, #11
    665a:	4359      	muls	r1, r3
    665c:	f04f 0c14 	mov.w	ip, #20
			for (j=0; j<11; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
    6660:	f8db 2000 	ldr.w	r2, [fp]
    6664:	440a      	add	r2, r1
    6666:	4462      	add	r2, ip
    6668:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
    666c:	5962      	ldr	r2, [r4, r5]
    666e:	f802 000c 	strb.w	r0, [r2, ip]
    6672:	f10c 0c01 	add.w	ip, ip, #1
    6676:	f1bc 0f1f 	cmp.w	ip, #31
    667a:	d1f1      	bne.n	6660 <bt_slave_le+0xe8>
    667c:	e023      	b.n	66c6 <bt_slave_le+0x14e>
			adv_ind_len = (u8) 31;
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
    667e:	b2fa      	uxtb	r2, r7
    6680:	f102 0112 	add.w	r1, r2, #18
    6684:	f04f 0e0b 	mov.w	lr, #11
    6688:	b2c9      	uxtb	r1, r1
    668a:	fb0e fe03 	mul.w	lr, lr, r3
    668e:	9104      	str	r1, [sp, #16]
			u8 adv_len = (u8)(fin_adv_len + 7);
    6690:	1dd1      	adds	r1, r2, #7
    6692:	b2c9      	uxtb	r1, r1
    6694:	9105      	str	r1, [sp, #20]
			for (j=0; j<fin_adv_len; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
    6696:	2100      	movs	r1, #0
    6698:	42b9      	cmp	r1, r7
    669a:	da0b      	bge.n	66b4 <bt_slave_le+0x13c>
    669c:	4849      	ldr	r0, [pc, #292]	; (67c4 <bt_slave_le+0x24c>)
    669e:	6800      	ldr	r0, [r0, #0]
    66a0:	4470      	add	r0, lr
    66a2:	4408      	add	r0, r1
    66a4:	f890 c006 	ldrb.w	ip, [r0, #6]
    66a8:	5960      	ldr	r0, [r4, r5]
    66aa:	4408      	add	r0, r1
    66ac:	f880 c014 	strb.w	ip, [r0, #20]
    66b0:	3101      	adds	r1, #1
    66b2:	e7f1      	b.n	6698 <bt_slave_le+0x120>
			adv_ind[i][1] = tot_len;
    66b4:	5961      	ldr	r1, [r4, r5]
    66b6:	9804      	ldr	r0, [sp, #16]
			adv_ind[i][12] = adv_len;
			adv_ind_len = (u8) (fin_adv_len + 20);
    66b8:	3214      	adds	r2, #20
			adv_ind_len = (u8) 31;
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
			u8 adv_len = (u8)(fin_adv_len + 7);
			for (j=0; j<fin_adv_len; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
			adv_ind[i][1] = tot_len;
    66ba:	7048      	strb	r0, [r1, #1]
			adv_ind[i][12] = adv_len;
    66bc:	5961      	ldr	r1, [r4, r5]
    66be:	9805      	ldr	r0, [sp, #20]
			adv_ind_len = (u8) (fin_adv_len + 20);
    66c0:	fa5f fc82 	uxtb.w	ip, r2
		} else {
			u8 tot_len = (u8)(fin_adv_len + 18);
			u8 adv_len = (u8)(fin_adv_len + 7);
			for (j=0; j<fin_adv_len; j++) adv_ind[i][j+20] = slave_mac_address_data[6+11*i+j];
			adv_ind[i][1] = tot_len;
			adv_ind[i][12] = adv_len;
    66c4:	7308      	strb	r0, [r1, #12]
			adv_ind_len = (u8) (fin_adv_len + 20);
		}
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
    66c6:	4a42      	ldr	r2, [pc, #264]	; (67d0 <bt_slave_le+0x258>)
    66c8:	5961      	ldr	r1, [r4, r5]
    66ca:	6910      	ldr	r0, [r2, #16]
    66cc:	4662      	mov	r2, ip
    66ce:	9302      	str	r3, [sp, #8]
    66d0:	f8cd c00c 	str.w	ip, [sp, #12]
    66d4:	f000 fcb0 	bl	7038 <btle_calc_crc>
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
    66d8:	5962      	ldr	r2, [r4, r5]
    66da:	f8dd c00c 	ldr.w	ip, [sp, #12]
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    66de:	0a01      	lsrs	r1, r0, #8
			adv_ind_len = (u8) (fin_adv_len + 20);
		}
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
    66e0:	f802 000c 	strb.w	r0, [r2, ip]
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    66e4:	5962      	ldr	r2, [r4, r5]
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    66e6:	0c00      	lsrs	r0, r0, #16
		}
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind[i], adv_ind_len);
		adv_ind_len = (int) adv_ind_len;
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
    66e8:	4462      	add	r2, ip
    66ea:	7051      	strb	r1, [r2, #1]
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    66ec:	5962      	ldr	r2, [r4, r5]
    66ee:	3504      	adds	r5, #4
    66f0:	4462      	add	r2, ip
    66f2:	7090      	strb	r0, [r2, #2]
	for (i=0; i< num_adv_ind-1; i++) {
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
    66f4:	9b02      	ldr	r3, [sp, #8]
    66f6:	3301      	adds	r3, #1
    66f8:	e78d      	b.n	6616 <bt_slave_le+0x9e>
		adv_ind[i][adv_ind_len+0] = (calc_crc >> 0) & 0xff;
		adv_ind[i][adv_ind_len+1] = (calc_crc >> 8) & 0xff;
		adv_ind[i][adv_ind_len+2] = (calc_crc >> 16) & 0xff;
	}

	clkn_start();
    66fa:	f000 fee3 	bl	74c4 <clkn_start>

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE 
    66fe:	f898 2012 	ldrb.w	r2, [r8, #18]
    6702:	4b31      	ldr	r3, [pc, #196]	; (67c8 <bt_slave_le+0x250>)
    6704:	2a0c      	cmp	r2, #12
    6706:	d13f      	bne.n	6788 <bt_slave_le+0x210>
			|| requested_mode == MODE_BT_SLAVE_LE_P3
			|| requested_mode == MODE_BT_SLAVE_LE_P4
			|| requested_mode == MODE_BT_SLAVE_LE_P5
			|| requested_mode == MODE_BT_SLAVE_LE_P6
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
    6708:	f898 2012 	ldrb.w	r2, [r8, #18]
    670c:	f898 3011 	ldrb.w	r3, [r8, #17]
    6710:	429a      	cmp	r2, r3
    6712:	d151      	bne.n	67b8 <bt_slave_le+0x240>
		ICER0 = ICER0_ICE_USB;
    6714:	4b2f      	ldr	r3, [pc, #188]	; (67d4 <bt_slave_le+0x25c>)
    6716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    671a:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    671c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    6720:	601a      	str	r2, [r3, #0]
    6722:	f04f 0b00 	mov.w	fp, #0
	for (i=0; i< num_adv_ind-1; i++) {
		adv_ind[i] = (u8*) malloc(sizeof(u8)*31);
	}
	adv_ind[num_adv_ind-1] = (u8*) malloc(sizeof(u8)*(fin_adv_len + 1 + 3 + 4 + 4 + 6 + 2 + 3));

	for (i=0; i< num_adv_ind; i++) {
    6726:	2500      	movs	r5, #0
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
			for(j=0; j<num_adv_ind; j++) {
    6728:	42b5      	cmp	r5, r6
    672a:	da19      	bge.n	6760 <bt_slave_le+0x1e8>
				if (j < num_adv_ind -1) {
    672c:	454d      	cmp	r5, r9
    672e:	ab07      	add	r3, sp, #28
    6730:	da05      	bge.n	673e <bt_slave_le+0x1c6>
					adv_ind_len = (u8) (31 + 3);
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
    6732:	f833 300b 	ldrh.w	r3, [r3, fp]
    6736:	4828      	ldr	r0, [pc, #160]	; (67d8 <bt_slave_le+0x260>)
    6738:	9300      	str	r3, [sp, #0]
    673a:	2122      	movs	r1, #34	; 0x22
    673c:	e006      	b.n	674c <bt_slave_le+0x1d4>
				} else {
					adv_ind_len = (u8) (fin_adv_len + 20 + 3);
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
    673e:	f833 300b 	ldrh.w	r3, [r3, fp]
			for(j=0; j<num_adv_ind; j++) {
				if (j < num_adv_ind -1) {
					adv_ind_len = (u8) (31 + 3);
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
				} else {
					adv_ind_len = (u8) (fin_adv_len + 20 + 3);
    6742:	f107 0117 	add.w	r1, r7, #23
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
    6746:	4824      	ldr	r0, [pc, #144]	; (67d8 <bt_slave_le+0x260>)
    6748:	9300      	str	r3, [sp, #0]
    674a:	b2c9      	uxtb	r1, r1
    674c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    6750:	4653      	mov	r3, sl
    6752:	f7fe fdc7 	bl	52e4 <le_transmit>
				}
				msleep(10);
    6756:	200a      	movs	r0, #10
    6758:	f7fd fe16 	bl	4388 <msleep>
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
			for(j=0; j<num_adv_ind; j++) {
    675c:	3501      	adds	r5, #1
    675e:	e7e3      	b.n	6728 <bt_slave_le+0x1b0>
					adv_ind_len = (u8) (fin_adv_len + 20 + 3);
					le_transmit(0x8e89bed6, adv_ind_len, adv_ind[j], tx_pwr, ch[i]);
				}
				msleep(10);
			}
			msleep(5);
    6760:	2005      	movs	r0, #5
    6762:	f10b 0b02 	add.w	fp, fp, #2
    6766:	f7fd fe0f 	bl	4388 <msleep>
			|| requested_mode == MODE_BT_SLAVE_LE_P6
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		for(i=0; i<3; i++) {
    676a:	f1bb 0f06 	cmp.w	fp, #6
    676e:	d1da      	bne.n	6726 <bt_slave_le+0x1ae>
				}
				msleep(10);
			}
			msleep(5);
		}
		ISER0 = ISER0_ISE_USB;
    6770:	4b1a      	ldr	r3, [pc, #104]	; (67dc <bt_slave_le+0x264>)
    6772:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6776:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    6778:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    677c:	601a      	str	r2, [r3, #0]
		msleep(1000);
    677e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6782:	f7fd fe01 	bl	4388 <msleep>
    6786:	e7ba      	b.n	66fe <bt_slave_le+0x186>

	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE 
			|| requested_mode == MODE_BT_SLAVE_LE_P0
    6788:	7c9a      	ldrb	r2, [r3, #18]
    678a:	2a11      	cmp	r2, #17
    678c:	d0bc      	beq.n	6708 <bt_slave_le+0x190>
			|| requested_mode == MODE_BT_SLAVE_LE_P1
    678e:	7c9a      	ldrb	r2, [r3, #18]
    6790:	2a12      	cmp	r2, #18
    6792:	d0b9      	beq.n	6708 <bt_slave_le+0x190>
			|| requested_mode == MODE_BT_SLAVE_LE_P2
    6794:	7c9a      	ldrb	r2, [r3, #18]
    6796:	2a13      	cmp	r2, #19
    6798:	d0b6      	beq.n	6708 <bt_slave_le+0x190>
			|| requested_mode == MODE_BT_SLAVE_LE_P3
    679a:	7c9a      	ldrb	r2, [r3, #18]
    679c:	2a14      	cmp	r2, #20
    679e:	d0b3      	beq.n	6708 <bt_slave_le+0x190>
			|| requested_mode == MODE_BT_SLAVE_LE_P4
    67a0:	7c9a      	ldrb	r2, [r3, #18]
    67a2:	2a15      	cmp	r2, #21
    67a4:	d0b0      	beq.n	6708 <bt_slave_le+0x190>
			|| requested_mode == MODE_BT_SLAVE_LE_P5
    67a6:	7c9a      	ldrb	r2, [r3, #18]
    67a8:	2a16      	cmp	r2, #22
    67aa:	d0ad      	beq.n	6708 <bt_slave_le+0x190>
			|| requested_mode == MODE_BT_SLAVE_LE_P6
    67ac:	7c9a      	ldrb	r2, [r3, #18]
    67ae:	2a17      	cmp	r2, #23
    67b0:	d0aa      	beq.n	6708 <bt_slave_le+0x190>
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
    67b2:	7c9b      	ldrb	r3, [r3, #18]
    67b4:	2b18      	cmp	r3, #24
    67b6:	d0a7      	beq.n	6708 <bt_slave_le+0x190>
		}
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(1000);
	}
}
    67b8:	b00f      	add	sp, #60	; 0x3c
    67ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67be:	bf00      	nop
    67c0:	0000a044 	.word	0x0000a044
    67c4:	100014d0 	.word	0x100014d0
    67c8:	10000e34 	.word	0x10000e34
    67cc:	10000e58 	.word	0x10000e58
    67d0:	1000044c 	.word	0x1000044c
    67d4:	e000e180 	.word	0xe000e180
    67d8:	8e89bed6 	.word	0x8e89bed6
    67dc:	e000e100 	.word	0xe000e100

000067e0 <rx_generic_sync>:

void rx_generic_sync(void) {
    67e0:	b500      	push	{lr}
    67e2:	b08b      	sub	sp, #44	; 0x2c
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    67e4:	202d      	movs	r0, #45	; 0x2d
    67e6:	f001 fd4f 	bl	8288 <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    67ea:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    67ec:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    67f0:	202c      	movs	r0, #44	; 0x2c

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
	buf[0] = (reg_val >> 8) & 0xFF;
    67f2:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = reg_val & 0xFF;
	reg_val = cc2400_get(SYNCL);
    67f6:	f001 fd47 	bl	8288 <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    67fa:	0a03      	lsrs	r3, r0, #8
    67fc:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    6800:	f88d 0007 	strb.w	r0, [sp, #7]

	queue_init();
    6804:	f000 fcd8 	bl	71b8 <queue_init>
	clkn_start();
    6808:	f000 fe5c 	bl	74c4 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    680c:	f001 fde8 	bl	83e0 <cc2400_status>
    6810:	0643      	lsls	r3, r0, #25
    6812:	d5fb      	bpl.n	680c <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6814:	2061      	movs	r0, #97	; 0x61
    6816:	f001 fdea 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    681a:	f001 fde1 	bl	83e0 <cc2400_status>
    681e:	0740      	lsls	r0, r0, #29
    6820:	d5fb      	bpl.n	681a <rx_generic_sync+0x3a>
	RXLED_SET;
    6822:	4b14      	ldr	r3, [pc, #80]	; (6874 <rx_generic_sync+0x94>)
    6824:	2210      	movs	r2, #16
    6826:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6828:	2280      	movs	r2, #128	; 0x80
    682a:	621a      	str	r2, [r3, #32]
		HGM_SET;
    682c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6830:	621a      	str	r2, [r3, #32]
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6832:	200e      	movs	r0, #14
    6834:	f001 fd28 	bl	8288 <cc2400_get>
    6838:	f000 001f 	and.w	r0, r0, #31
    683c:	280f      	cmp	r0, #15
    683e:	d1f8      	bne.n	6832 <rx_generic_sync+0x52>
		cc2400_strobe(SRX);
    6840:	2062      	movs	r0, #98	; 0x62
    6842:	f001 fdd4 	bl	83ee <cc2400_strobe>
		USRLED_CLR;
    6846:	4b0c      	ldr	r3, [pc, #48]	; (6878 <rx_generic_sync+0x98>)
    6848:	2202      	movs	r2, #2
    684a:	601a      	str	r2, [r3, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    684c:	f001 fdc8 	bl	83e0 <cc2400_status>
    6850:	06c1      	lsls	r1, r0, #27
    6852:	d5fb      	bpl.n	684c <rx_generic_sync+0x6c>
		USRLED_SET;
    6854:	4b07      	ldr	r3, [pc, #28]	; (6874 <rx_generic_sync+0x94>)
    6856:	2202      	movs	r2, #2
    6858:	601a      	str	r2, [r3, #0]

		cc2400_fifo_read(len, buf+4);
    685a:	a902      	add	r1, sp, #8
    685c:	2020      	movs	r0, #32
    685e:	f001 fd77 	bl	8350 <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    6862:	a901      	add	r1, sp, #4
    6864:	2000      	movs	r0, #0
    6866:	f7fd fe61 	bl	452c <enqueue>
		handle_usb(clkn);
    686a:	4b04      	ldr	r3, [pc, #16]	; (687c <rx_generic_sync+0x9c>)
    686c:	6818      	ldr	r0, [r3, #0]
    686e:	f000 fd05 	bl	727c <handle_usb>
	}
    6872:	e7de      	b.n	6832 <rx_generic_sync+0x52>
    6874:	2009c038 	.word	0x2009c038
    6878:	2009c03c 	.word	0x2009c03c
    687c:	10001014 	.word	0x10001014

00006880 <rx_generic>:
}

void rx_generic(void) {
    6880:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    6882:	2020      	movs	r0, #32
    6884:	f001 fd00 	bl	8288 <cc2400_get>
    6888:	b108      	cbz	r0, 688e <rx_generic+0xe>
		rx_generic_sync();
    688a:	f7ff ffa9 	bl	67e0 <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    688e:	4b03      	ldr	r3, [pc, #12]	; (689c <rx_generic+0x1c>)
    6890:	2203      	movs	r2, #3
    6892:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    6894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
		rx_generic_sync();
	} else {
		modulation = MOD_NONE;
		bt_stream_rx();
    6898:	f7fe bf02 	b.w	56a0 <bt_stream_rx>
    689c:	10000e34 	.word	0x10000e34

000068a0 <tx_generic>:
	}
}

void tx_generic(void) {
    68a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;
    68a4:	4d35      	ldr	r5, [pc, #212]	; (697c <tx_generic+0xdc>)

	mode = MODE_TX_GENERIC;
    68a6:	2310      	movs	r3, #16

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    68a8:	202d      	movs	r0, #45	; 0x2d
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    68aa:	7c6e      	ldrb	r6, [r5, #17]

	mode = MODE_TX_GENERIC;
    68ac:	746b      	strb	r3, [r5, #17]

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    68ae:	f001 fceb 	bl	8288 <cc2400_get>
    68b2:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    68b4:	202c      	movs	r0, #44	; 0x2c
    68b6:	f001 fce7 	bl	8288 <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    68ba:	4c31      	ldr	r4, [pc, #196]	; (6980 <tx_generic+0xe0>)

	mode = MODE_TX_GENERIC;

	// Save existing syncword
	synch = cc2400_get(SYNCH);
	syncl = cc2400_get(SYNCL);
    68bc:	4607      	mov	r7, r0

	cc2400_set(SYNCH, tx_pkt.synch);
    68be:	8821      	ldrh	r1, [r4, #0]
    68c0:	202d      	movs	r0, #45	; 0x2d
    68c2:	f001 fcea 	bl	829a <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    68c6:	202c      	movs	r0, #44	; 0x2c
    68c8:	8861      	ldrh	r1, [r4, #2]
    68ca:	f001 fce6 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    68ce:	2003      	movs	r0, #3
    68d0:	2157      	movs	r1, #87	; 0x57
    68d2:	f001 fce2 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    68d6:	2014      	movs	r0, #20
    68d8:	f241 314b 	movw	r1, #4939	; 0x134b
    68dc:	f001 fcdd 	bl	829a <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    68e0:	2020      	movs	r0, #32
    68e2:	f640 7161 	movw	r1, #3937	; 0xf61
    68e6:	f001 fcd8 	bl	829a <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    68ea:	2002      	movs	r0, #2
    68ec:	88a1      	ldrh	r1, [r4, #4]
    68ee:	f001 fcd4 	bl	829a <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    68f2:	2005      	movs	r0, #5
    68f4:	79e1      	ldrb	r1, [r4, #7]
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    68f6:	b2f6      	uxtb	r6, r6
	cc2400_set(SYNCL, tx_pkt.syncl);
	cc2400_set(MDMCTRL, 0x0057);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(GRMDM, 0x0f61);
	cc2400_set(FSDIV, tx_pkt.channel);
	cc2400_set(FREND, tx_pkt.pa_level);
    68f8:	f001 fccf 	bl	829a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    68fc:	f001 fd70 	bl	83e0 <cc2400_status>
    6900:	0640      	lsls	r0, r0, #25
    6902:	d5fb      	bpl.n	68fc <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6904:	2061      	movs	r0, #97	; 0x61
    6906:	f001 fd72 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    690a:	f001 fd69 	bl	83e0 <cc2400_status>
    690e:	0741      	lsls	r1, r0, #29
    6910:	d5fb      	bpl.n	690a <tx_generic+0x6a>
	TXLED_SET;
    6912:	4b1c      	ldr	r3, [pc, #112]	; (6984 <tx_generic+0xe4>)
    6914:	f44f 7280 	mov.w	r2, #256	; 0x100
    6918:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    691a:	2280      	movs	r2, #128	; 0x80
    691c:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    691e:	200e      	movs	r0, #14
    6920:	f001 fcb2 	bl	8288 <cc2400_get>
    6924:	f000 001f 	and.w	r0, r0, #31
    6928:	280f      	cmp	r0, #15
    692a:	d1f8      	bne.n	691e <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    692c:	79a0      	ldrb	r0, [r4, #6]
    692e:	4916      	ldr	r1, [pc, #88]	; (6988 <tx_generic+0xe8>)
    6930:	f001 fcc6 	bl	82c0 <cc2400_fifo_write>
	cc2400_strobe(STX);
    6934:	2063      	movs	r0, #99	; 0x63
    6936:	f001 fd5a 	bl	83ee <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    693a:	200e      	movs	r0, #14
    693c:	f001 fca4 	bl	8288 <cc2400_get>
    6940:	f000 001f 	and.w	r0, r0, #31
    6944:	280f      	cmp	r0, #15
    6946:	d1f8      	bne.n	693a <tx_generic+0x9a>
	TXLED_CLR;
    6948:	4b10      	ldr	r3, [pc, #64]	; (698c <tx_generic+0xec>)
    694a:	f44f 7280 	mov.w	r2, #256	; 0x100
    694e:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    6950:	2064      	movs	r0, #100	; 0x64
    6952:	f001 fd4c 	bl	83ee <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6956:	f001 fd43 	bl	83e0 <cc2400_status>
    695a:	0742      	lsls	r2, r0, #29
    695c:	d4fb      	bmi.n	6956 <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    695e:	4b0c      	ldr	r3, [pc, #48]	; (6990 <tx_generic+0xf0>)
    6960:	2280      	movs	r2, #128	; 0x80
    6962:	601a      	str	r2, [r3, #0]
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    6964:	202d      	movs	r0, #45	; 0x2d
    6966:	4641      	mov	r1, r8
    6968:	f001 fc97 	bl	829a <cc2400_set>
	cc2400_set(SYNCL, syncl);
    696c:	202c      	movs	r0, #44	; 0x2c
    696e:	4639      	mov	r1, r7
    6970:	f001 fc93 	bl	829a <cc2400_set>
	requested_mode = prev_mode;
    6974:	74ae      	strb	r6, [r5, #18]
    6976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    697a:	bf00      	nop
    697c:	10000e34 	.word	0x10000e34
    6980:	10001018 	.word	0x10001018
    6984:	2009c038 	.word	0x2009c038
    6988:	10001020 	.word	0x10001020
    698c:	2009c03c 	.word	0x2009c03c
    6990:	2009c05c 	.word	0x2009c05c

00006994 <specan>:
}

/* spectrum analysis */
void specan()
{
    6994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6998:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    699a:	4b3d      	ldr	r3, [pc, #244]	; (6a90 <specan+0xfc>)
    699c:	2210      	movs	r2, #16
    699e:	601a      	str	r2, [r3, #0]

	queue_init();
    69a0:	f000 fc0a 	bl	71b8 <queue_init>
	clkn_start();
    69a4:	f000 fd8e 	bl	74c4 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    69a8:	4b3a      	ldr	r3, [pc, #232]	; (6a94 <specan+0x100>)
    69aa:	2280      	movs	r2, #128	; 0x80
    69ac:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    69ae:	2012      	movs	r0, #18
    69b0:	f642 3122 	movw	r1, #11042	; 0x2b22
    69b4:	f001 fc71 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    69b8:	2014      	movs	r0, #20
    69ba:	f241 314b 	movw	r1, #4939	; 0x134b
    69be:	f001 fc6c 	bl	829a <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    69c2:	2020      	movs	r0, #32
    69c4:	f240 1101 	movw	r1, #257	; 0x101
    69c8:	f001 fc67 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    69cc:	2003      	movs	r0, #3
    69ce:	2129      	movs	r1, #41	; 0x29
    69d0:	f001 fc63 	bl	829a <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    69d4:	f001 fd04 	bl	83e0 <cc2400_status>
    69d8:	0643      	lsls	r3, r0, #25
    69da:	d5fb      	bpl.n	69d4 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    69dc:	f001 fd00 	bl	83e0 <cc2400_status>
    69e0:	f000 0004 	and.w	r0, r0, #4
    69e4:	f000 05ff 	and.w	r5, r0, #255	; 0xff
    69e8:	2800      	cmp	r0, #0
    69ea:	d1f7      	bne.n	69dc <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    69ec:	4b2a      	ldr	r3, [pc, #168]	; (6a98 <specan+0x104>)
    69ee:	7c9b      	ldrb	r3, [r3, #18]
    69f0:	2b04      	cmp	r3, #4
    69f2:	d147      	bne.n	6a84 <specan+0xf0>
		for (f = low_freq; f < high_freq + 1; f++) {
    69f4:	4b29      	ldr	r3, [pc, #164]	; (6a9c <specan+0x108>)
    69f6:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
    69fa:	4698      	mov	r8, r3
    69fc:	b2a4      	uxth	r4, r4
    69fe:	f8b8 304e 	ldrh.w	r3, [r8, #78]	; 0x4e
    6a02:	b29b      	uxth	r3, r3
    6a04:	42a3      	cmp	r3, r4
    6a06:	dbf1      	blt.n	69ec <specan+0x58>
    6a08:	1e61      	subs	r1, r4, #1
			cc2400_set(FSDIV, f - 1);
    6a0a:	2002      	movs	r0, #2
    6a0c:	b289      	uxth	r1, r1
    6a0e:	f001 fc44 	bl	829a <cc2400_set>
			cc2400_strobe(SFSON);
    6a12:	2061      	movs	r0, #97	; 0x61
    6a14:	f001 fceb 	bl	83ee <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6a18:	f001 fce2 	bl	83e0 <cc2400_status>
    6a1c:	0747      	lsls	r7, r0, #29
    6a1e:	d5fb      	bpl.n	6a18 <specan+0x84>
			cc2400_strobe(SRX);
    6a20:	2062      	movs	r0, #98	; 0x62
    6a22:	f001 fce4 	bl	83ee <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    6a26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6a2a:	9300      	str	r3, [sp, #0]
    6a2c:	9e00      	ldr	r6, [sp, #0]
    6a2e:	3e01      	subs	r6, #1
    6a30:	9600      	str	r6, [sp, #0]
    6a32:	2e00      	cmp	r6, #0
    6a34:	d1fa      	bne.n	6a2c <specan+0x98>
			buf[3 * i] = (f >> 8) & 0xFF;
    6a36:	ab0e      	add	r3, sp, #56	; 0x38
    6a38:	2703      	movs	r7, #3
    6a3a:	fb07 3705 	mla	r7, r7, r5, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6a3e:	2006      	movs	r0, #6
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
    6a40:	0a23      	lsrs	r3, r4, #8
    6a42:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    6a46:	f807 4c33 	strb.w	r4, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6a4a:	f001 fc1d 	bl	8288 <cc2400_get>
			i++;
    6a4e:	3501      	adds	r5, #1
    6a50:	b2ed      	uxtb	r5, r5

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6a52:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
    6a54:	2d10      	cmp	r5, #16

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6a56:	f807 0c32 	strb.w	r0, [r7, #-50]
			i++;
			if (i == 16) {
    6a5a:	d109      	bne.n	6a70 <specan+0xdc>
				enqueue(SPECAN, buf);
    6a5c:	2004      	movs	r0, #4
    6a5e:	eb0d 0100 	add.w	r1, sp, r0
    6a62:	f7fd fd63 	bl	452c <enqueue>
				i = 0;

				handle_usb(clkn);
    6a66:	4b0e      	ldr	r3, [pc, #56]	; (6aa0 <specan+0x10c>)
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				enqueue(SPECAN, buf);
				i = 0;
    6a68:	4635      	mov	r5, r6

				handle_usb(clkn);
    6a6a:	6818      	ldr	r0, [r3, #0]
    6a6c:	f000 fc06 	bl	727c <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    6a70:	2064      	movs	r0, #100	; 0x64
    6a72:	f001 fcbc 	bl	83ee <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6a76:	f001 fcb3 	bl	83e0 <cc2400_status>
    6a7a:	0746      	lsls	r6, r0, #29
    6a7c:	d4fb      	bmi.n	6a76 <specan+0xe2>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    6a7e:	3401      	adds	r4, #1
    6a80:	b2a4      	uxth	r4, r4
    6a82:	e7bc      	b.n	69fe <specan+0x6a>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    6a84:	4b07      	ldr	r3, [pc, #28]	; (6aa4 <specan+0x110>)
    6a86:	2210      	movs	r2, #16
    6a88:	601a      	str	r2, [r3, #0]
}
    6a8a:	b00e      	add	sp, #56	; 0x38
    6a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a90:	2009c038 	.word	0x2009c038
    6a94:	2009c058 	.word	0x2009c058
    6a98:	10000e34 	.word	0x10000e34
    6a9c:	1000044c 	.word	0x1000044c
    6aa0:	10001014 	.word	0x10001014
    6aa4:	2009c03c 	.word	0x2009c03c

00006aa8 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    6aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6aaa:	4b44      	ldr	r3, [pc, #272]	; (6bbc <led_specan+0x114>)
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6aac:	2280      	movs	r2, #128	; 0x80
/* LED based spectrum analysis */
void led_specan()
{
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6aae:	6818      	ldr	r0, [r3, #0]
    6ab0:	889b      	ldrh	r3, [r3, #4]
    6ab2:	9002      	str	r0, [sp, #8]
    6ab4:	f8ad 300c 	strh.w	r3, [sp, #12]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6ab8:	4b41      	ldr	r3, [pc, #260]	; (6bc0 <led_specan+0x118>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6aba:	2012      	movs	r0, #18
	u16 channels[3] = {2412, 2437, 2462};
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6abc:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6abe:	f642 3122 	movw	r1, #11042	; 0x2b22
    6ac2:	f001 fbea 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6ac6:	2014      	movs	r0, #20
    6ac8:	f241 314b 	movw	r1, #4939	; 0x134b
    6acc:	f001 fbe5 	bl	829a <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6ad0:	2020      	movs	r0, #32
    6ad2:	f240 1101 	movw	r1, #257	; 0x101
    6ad6:	f001 fbe0 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6ada:	2003      	movs	r0, #3
    6adc:	2129      	movs	r1, #41	; 0x29
    6ade:	f001 fbdc 	bl	829a <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    6ae2:	2006      	movs	r0, #6
    6ae4:	21f1      	movs	r1, #241	; 0xf1
    6ae6:	f001 fbd8 	bl	829a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6aea:	f001 fc79 	bl	83e0 <cc2400_status>
    6aee:	0640      	lsls	r0, r0, #25
    6af0:	d5fb      	bpl.n	6aea <led_specan+0x42>
	while ((cc2400_status() & FS_LOCK));
    6af2:	f001 fc75 	bl	83e0 <cc2400_status>
    6af6:	f000 0004 	and.w	r0, r0, #4
    6afa:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    6afe:	2800      	cmp	r0, #0
    6b00:	d1f7      	bne.n	6af2 <led_specan+0x4a>

	while (requested_mode == MODE_LED_SPECAN) {
    6b02:	4b30      	ldr	r3, [pc, #192]	; (6bc4 <led_specan+0x11c>)
    6b04:	7c9b      	ldrb	r3, [r3, #18]
    6b06:	2b07      	cmp	r3, #7
    6b08:	d155      	bne.n	6bb6 <led_specan+0x10e>
		cc2400_set(FSDIV, channels[i] - 1);
    6b0a:	aa04      	add	r2, sp, #16
    6b0c:	eb02 0344 	add.w	r3, r2, r4, lsl #1
    6b10:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    6b14:	2002      	movs	r0, #2
    6b16:	3901      	subs	r1, #1
    6b18:	b289      	uxth	r1, r1
    6b1a:	f001 fbbe 	bl	829a <cc2400_set>
		cc2400_strobe(SFSON);
    6b1e:	2061      	movs	r0, #97	; 0x61
    6b20:	f001 fc65 	bl	83ee <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6b24:	f001 fc5c 	bl	83e0 <cc2400_status>
    6b28:	0741      	lsls	r1, r0, #29
    6b2a:	d5fb      	bpl.n	6b24 <led_specan+0x7c>
		cc2400_strobe(SRX);
    6b2c:	2062      	movs	r0, #98	; 0x62
    6b2e:	f001 fc5e 	bl	83ee <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    6b32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6b36:	9301      	str	r3, [sp, #4]
    6b38:	9b01      	ldr	r3, [sp, #4]
    6b3a:	3b01      	subs	r3, #1
    6b3c:	9301      	str	r3, [sp, #4]
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d1fa      	bne.n	6b38 <led_specan+0x90>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    6b42:	2006      	movs	r0, #6
    6b44:	f001 fba0 	bl	8288 <cc2400_get>
		if (lvl > rssi_threshold) {
    6b48:	4b1f      	ldr	r3, [pc, #124]	; (6bc8 <led_specan+0x120>)
    6b4a:	f340 2007 	sbfx	r0, r0, #8, #8
    6b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6b52:	b25b      	sxtb	r3, r3
    6b54:	4298      	cmp	r0, r3
    6b56:	dd0c      	ble.n	6b72 <led_specan+0xca>
			switch (i) {
    6b58:	2c01      	cmp	r4, #1
    6b5a:	d007      	beq.n	6b6c <led_specan+0xc4>
    6b5c:	d303      	bcc.n	6b66 <led_specan+0xbe>
    6b5e:	2c02      	cmp	r4, #2
    6b60:	d116      	bne.n	6b90 <led_specan+0xe8>
					break;
				case 1:
					RXLED_SET;
					break;
				case 2:
					USRLED_SET;
    6b62:	4b1a      	ldr	r3, [pc, #104]	; (6bcc <led_specan+0x124>)
    6b64:	e013      	b.n	6b8e <led_specan+0xe6>
		volatile u32 j = 500; while (--j); //FIXME crude delay
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
		if (lvl > rssi_threshold) {
			switch (i) {
				case 0:
					TXLED_SET;
    6b66:	f44f 7280 	mov.w	r2, #256	; 0x100
    6b6a:	e000      	b.n	6b6e <led_specan+0xc6>
					break;
				case 1:
					RXLED_SET;
    6b6c:	2210      	movs	r2, #16
    6b6e:	4b17      	ldr	r3, [pc, #92]	; (6bcc <led_specan+0x124>)
    6b70:	e00b      	b.n	6b8a <led_specan+0xe2>
					USRLED_SET;
					break;
			}
		}
		else {
			switch (i) {
    6b72:	2c01      	cmp	r4, #1
    6b74:	d007      	beq.n	6b86 <led_specan+0xde>
    6b76:	d303      	bcc.n	6b80 <led_specan+0xd8>
    6b78:	2c02      	cmp	r4, #2
    6b7a:	d109      	bne.n	6b90 <led_specan+0xe8>
					break;
				case 1:
					RXLED_CLR;
					break;
				case 2:
					USRLED_CLR;
    6b7c:	4b14      	ldr	r3, [pc, #80]	; (6bd0 <led_specan+0x128>)
    6b7e:	e006      	b.n	6b8e <led_specan+0xe6>
			}
		}
		else {
			switch (i) {
				case 0:
					TXLED_CLR;
    6b80:	f44f 7280 	mov.w	r2, #256	; 0x100
    6b84:	e000      	b.n	6b88 <led_specan+0xe0>
					break;
				case 1:
					RXLED_CLR;
    6b86:	2210      	movs	r2, #16
    6b88:	4b11      	ldr	r3, [pc, #68]	; (6bd0 <led_specan+0x128>)
    6b8a:	601a      	str	r2, [r3, #0]
					break;
    6b8c:	e000      	b.n	6b90 <led_specan+0xe8>
				case 2:
					USRLED_CLR;
    6b8e:	601c      	str	r4, [r3, #0]
					break;
			}
		}

		i = (i+1) % 3;
    6b90:	2303      	movs	r3, #3
    6b92:	3401      	adds	r4, #1
    6b94:	fb94 f2f3 	sdiv	r2, r4, r3
    6b98:	fb03 4412 	mls	r4, r3, r2, r4

		handle_usb(clkn);
    6b9c:	4b0d      	ldr	r3, [pc, #52]	; (6bd4 <led_specan+0x12c>)
					USRLED_CLR;
					break;
			}
		}

		i = (i+1) % 3;
    6b9e:	b2e4      	uxtb	r4, r4

		handle_usb(clkn);
    6ba0:	6818      	ldr	r0, [r3, #0]
    6ba2:	f000 fb6b 	bl	727c <handle_usb>

		cc2400_strobe(SRFOFF);
    6ba6:	2064      	movs	r0, #100	; 0x64
    6ba8:	f001 fc21 	bl	83ee <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    6bac:	f001 fc18 	bl	83e0 <cc2400_status>
    6bb0:	0742      	lsls	r2, r0, #29
    6bb2:	d4fb      	bmi.n	6bac <led_specan+0x104>
    6bb4:	e7a5      	b.n	6b02 <led_specan+0x5a>
	}
}
    6bb6:	b004      	add	sp, #16
    6bb8:	bd10      	pop	{r4, pc}
    6bba:	bf00      	nop
    6bbc:	0000a05e 	.word	0x0000a05e
    6bc0:	2009c058 	.word	0x2009c058
    6bc4:	10000e34 	.word	0x10000e34
    6bc8:	1000044c 	.word	0x1000044c
    6bcc:	2009c038 	.word	0x2009c038
    6bd0:	2009c03c 	.word	0x2009c03c
    6bd4:	10001014 	.word	0x10001014

00006bd8 <main>:

int main()
{
    6bd8:	b510      	push	{r4, lr}
	ubertooth_init();
    6bda:	f001 fccb 	bl	8574 <ubertooth_init>
	clkn_init();
    6bde:	f000 fc77 	bl	74d0 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    6be2:	4857      	ldr	r0, [pc, #348]	; (6d40 <main+0x168>)
    6be4:	f000 fac2 	bl	716c <ubertooth_usb_init>
	cc2400_idle();
    6be8:	f7fd fcfa 	bl	45e0 <cc2400_idle>

	while (1) {
		handle_usb(clkn);
    6bec:	4b55      	ldr	r3, [pc, #340]	; (6d44 <main+0x16c>)
		if(requested_mode != mode) {
    6bee:	4c56      	ldr	r4, [pc, #344]	; (6d48 <main+0x170>)
	clkn_init();
	ubertooth_usb_init(vendor_request_handler);
	cc2400_idle();

	while (1) {
		handle_usb(clkn);
    6bf0:	6818      	ldr	r0, [r3, #0]
    6bf2:	f000 fb43 	bl	727c <handle_usb>
		if(requested_mode != mode) {
    6bf6:	7ca2      	ldrb	r2, [r4, #18]
    6bf8:	7c63      	ldrb	r3, [r4, #17]
    6bfa:	429a      	cmp	r2, r3
    6bfc:	d0f6      	beq.n	6bec <main+0x14>
			switch (requested_mode) {
    6bfe:	7ca3      	ldrb	r3, [r4, #18]
    6c00:	2b18      	cmp	r3, #24
    6c02:	d8f3      	bhi.n	6bec <main+0x14>
    6c04:	a201      	add	r2, pc, #4	; (adr r2, 6c0c <main+0x34>)
    6c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6c0a:	bf00      	nop
    6c0c:	00006be9 	.word	0x00006be9
    6c10:	00006c81 	.word	0x00006c81
    6c14:	00006c8b 	.word	0x00006c8b
    6c18:	00006ca9 	.word	0x00006ca9
    6c1c:	00006cd3 	.word	0x00006cd3
    6c20:	00006cb7 	.word	0x00006cb7
    6c24:	00006cc7 	.word	0x00006cc7
    6c28:	00006cd9 	.word	0x00006cd9
    6c2c:	00006c95 	.word	0x00006c95
    6c30:	00006c99 	.word	0x00006c99
    6c34:	00006c9f 	.word	0x00006c9f
    6c38:	00006c71 	.word	0x00006c71
    6c3c:	00006ca5 	.word	0x00006ca5
    6c40:	00006cdf 	.word	0x00006cdf
    6c44:	00006c7d 	.word	0x00006c7d
    6c48:	00006ceb 	.word	0x00006ceb
    6c4c:	00006cf5 	.word	0x00006cf5
    6c50:	00006cfb 	.word	0x00006cfb
    6c54:	00006d03 	.word	0x00006d03
    6c58:	00006d0b 	.word	0x00006d0b
    6c5c:	00006d13 	.word	0x00006d13
    6c60:	00006d1b 	.word	0x00006d1b
    6c64:	00006d23 	.word	0x00006d23
    6c68:	00006d2b 	.word	0x00006d2b
    6c6c:	00006d33 	.word	0x00006d33
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    6c70:	2001      	movs	r0, #1
    6c72:	f001 fa37 	bl	80e4 <wait>
					reset();
    6c76:	f001 fc87 	bl	8588 <reset>
					break;
    6c7a:	e7b7      	b.n	6bec <main+0x14>
				case MODE_AFH:
					mode = MODE_AFH;
    6c7c:	230e      	movs	r3, #14
    6c7e:	e000      	b.n	6c82 <main+0xaa>
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    6c80:	2301      	movs	r3, #1
    6c82:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    6c84:	f7fe fd0c 	bl	56a0 <bt_stream_rx>
					break;
    6c88:	e7b0      	b.n	6bec <main+0x14>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    6c8a:	2302      	movs	r3, #2
    6c8c:	7463      	strb	r3, [r4, #17]
					br_transmit();
    6c8e:	f7fe fdb5 	bl	57fc <br_transmit>
					break;
    6c92:	e7ab      	b.n	6bec <main+0x14>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    6c94:	2308      	movs	r3, #8
    6c96:	e7f4      	b.n	6c82 <main+0xaa>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    6c98:	f7ff fa08 	bl	60ac <bt_follow_le>
					break;
    6c9c:	e7a6      	b.n	6bec <main+0x14>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    6c9e:	f7ff fc33 	bl	6508 <bt_promisc_le>
					break;
    6ca2:	e7a3      	b.n	6bec <main+0x14>
				case MODE_BT_SLAVE_LE:
					mode = MODE_BT_SLAVE_LE;
    6ca4:	230c      	movs	r3, #12
    6ca6:	e045      	b.n	6d34 <main+0x15c>
					bt_slave_le(0x000f);
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6ca8:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    6caa:	4827      	ldr	r0, [pc, #156]	; (6d48 <main+0x170>)
    6cac:	4927      	ldr	r1, [pc, #156]	; (6d4c <main+0x174>)
				case MODE_BT_SLAVE_LE:
					mode = MODE_BT_SLAVE_LE;
					bt_slave_le(0x000f);
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6cae:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    6cb0:	f000 ff1e 	bl	7af0 <cc2400_txtest>
					break;
    6cb4:	e79a      	b.n	6bec <main+0x14>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6cb6:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    6cb8:	4824      	ldr	r0, [pc, #144]	; (6d4c <main+0x174>)
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
					cc2400_txtest(&modulation, &channel);
					break;
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6cba:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    6cbc:	f000 fd1c 	bl	76f8 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    6cc0:	2300      	movs	r3, #0
    6cc2:	74a3      	strb	r3, [r4, #18]
					break;
    6cc4:	e792      	b.n	6bec <main+0x14>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6cc6:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    6cc8:	4820      	ldr	r0, [pc, #128]	; (6d4c <main+0x174>)
					mode = MODE_RANGE_TEST;
					cc2400_rangetest(&channel);
					requested_mode = MODE_IDLE;
					break;
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6cca:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    6ccc:	f000 fe58 	bl	7980 <cc2400_repeater>
					break;
    6cd0:	e78c      	b.n	6bec <main+0x14>
				case MODE_SPECAN:
					specan();
    6cd2:	f7ff fe5f 	bl	6994 <specan>
					break;
    6cd6:	e789      	b.n	6bec <main+0x14>
				case MODE_LED_SPECAN:
					led_specan();
    6cd8:	f7ff fee6 	bl	6aa8 <led_specan>
					break;
    6cdc:	e786      	b.n	6bec <main+0x14>
				case MODE_EGO:
					mode = MODE_EGO;
    6cde:	230d      	movs	r3, #13
    6ce0:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    6ce2:	7d20      	ldrb	r0, [r4, #20]
    6ce4:	f001 f96c 	bl	7fc0 <ego_main>
					break;
    6ce8:	e780      	b.n	6bec <main+0x14>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    6cea:	230f      	movs	r3, #15
    6cec:	7463      	strb	r3, [r4, #17]
					rx_generic();
    6cee:	f7ff fdc7 	bl	6880 <rx_generic>
					break;
    6cf2:	e77b      	b.n	6bec <main+0x14>
				case MODE_TX_GENERIC:
					tx_generic();
    6cf4:	f7ff fdd4 	bl	68a0 <tx_generic>
					break;
    6cf8:	e778      	b.n	6bec <main+0x14>
				case MODE_IDLE:
					cc2400_idle();
					break;
				// JWHUR POWER CONTROL
				case MODE_BT_SLAVE_LE_P0:
					mode = MODE_BT_SLAVE_LE_P0;
    6cfa:	2311      	movs	r3, #17
    6cfc:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x0008);
    6cfe:	2008      	movs	r0, #8
    6d00:	e01a      	b.n	6d38 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P1:
					mode = MODE_BT_SLAVE_LE_P1;
    6d02:	2312      	movs	r3, #18
    6d04:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x0009);
    6d06:	2009      	movs	r0, #9
    6d08:	e016      	b.n	6d38 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P2:
					mode = MODE_BT_SLAVE_LE_P2;
    6d0a:	2313      	movs	r3, #19
    6d0c:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000a);
    6d0e:	200a      	movs	r0, #10
    6d10:	e012      	b.n	6d38 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P3:
					mode = MODE_BT_SLAVE_LE_P3;
    6d12:	2314      	movs	r3, #20
    6d14:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000b);
    6d16:	200b      	movs	r0, #11
    6d18:	e00e      	b.n	6d38 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P4:
					mode = MODE_BT_SLAVE_LE_P4;
    6d1a:	2315      	movs	r3, #21
    6d1c:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000c);
    6d1e:	200c      	movs	r0, #12
    6d20:	e00a      	b.n	6d38 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P5:
					mode = MODE_BT_SLAVE_LE_P5;
    6d22:	2316      	movs	r3, #22
    6d24:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000d);
    6d26:	200d      	movs	r0, #13
    6d28:	e006      	b.n	6d38 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P6:
					mode = MODE_BT_SLAVE_LE_P6;
    6d2a:	2317      	movs	r3, #23
    6d2c:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000e);
    6d2e:	200e      	movs	r0, #14
    6d30:	e002      	b.n	6d38 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P7:
					mode = MODE_BT_SLAVE_LE_P7;
    6d32:	2318      	movs	r3, #24
    6d34:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000f);
    6d36:	200f      	movs	r0, #15
    6d38:	f7ff fc1e 	bl	6578 <bt_slave_le>
					break;
    6d3c:	e756      	b.n	6bec <main+0x14>
    6d3e:	bf00      	nop
    6d40:	00004901 	.word	0x00004901
    6d44:	10001014 	.word	0x10001014
    6d48:	10000e34 	.word	0x10000e34
    6d4c:	1000044c 	.word	0x1000044c

00006d50 <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    6d50:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6d52:	4b42      	ldr	r3, [pc, #264]	; (6e5c <precalc+0x10c>)
	syncword = 0;
    6d54:	4842      	ldr	r0, [pc, #264]	; (6e60 <precalc+0x110>)
/* do all of the one time precalculation */
void precalc(void)
{
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6d56:	6819      	ldr	r1, [r3, #0]
	syncword = 0;
    6d58:	2200      	movs	r2, #0
    6d5a:	2300      	movs	r3, #0
    6d5c:	e9c0 2300 	strd	r2, r3, [r0]
    6d60:	2300      	movs	r3, #0
    6d62:	0058      	lsls	r0, r3, #1

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    6d64:	224f      	movs	r2, #79	; 0x4f
    6d66:	fb90 f4f2 	sdiv	r4, r0, r2
    6d6a:	fb02 0214 	mls	r2, r2, r4, r0
    6d6e:	4e3d      	ldr	r6, [pc, #244]	; (6e64 <precalc+0x114>)
    6d70:	559a      	strb	r2, [r3, r6]
    6d72:	3301      	adds	r3, #1
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    6d74:	2b4f      	cmp	r3, #79	; 0x4f
    6d76:	d1f4      	bne.n	6d62 <precalc+0x12>
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    6d78:	4b3b      	ldr	r3, [pc, #236]	; (6e68 <precalc+0x118>)
    6d7a:	f3c1 52c4 	ubfx	r2, r1, #23, #5
    6d7e:	701a      	strb	r2, [r3, #0]
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    6d80:	f3c1 1407 	ubfx	r4, r1, #4, #8
    6d84:	f3c1 00c7 	ubfx	r0, r1, #3, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    6d88:	4b38      	ldr	r3, [pc, #224]	; (6e6c <precalc+0x11c>)
    6d8a:	f3c1 42c3 	ubfx	r2, r1, #19, #4
	c1 = ((address >> 4) & 0x10) +
    6d8e:	f000 0508 	and.w	r5, r0, #8
    6d92:	f004 0710 	and.w	r7, r4, #16
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    6d96:	701a      	strb	r2, [r3, #0]
	c1 = ((address >> 4) & 0x10) +
    6d98:	442f      	add	r7, r5
    6d9a:	f3c1 0287 	ubfx	r2, r1, #2, #8
    6d9e:	f001 0501 	and.w	r5, r1, #1
    6da2:	f3c1 0347 	ubfx	r3, r1, #1, #8
    6da6:	442f      	add	r7, r5
    6da8:	f002 0504 	and.w	r5, r2, #4
    6dac:	442f      	add	r7, r5
    6dae:	f003 0502 	and.w	r5, r3, #2
    6db2:	442f      	add	r7, r5
    6db4:	4d2e      	ldr	r5, [pc, #184]	; (6e70 <precalc+0x120>)
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6db6:	f004 0408 	and.w	r4, r4, #8


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    6dba:	702f      	strb	r7, [r5, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    6dbc:	4d2d      	ldr	r5, [pc, #180]	; (6e74 <precalc+0x124>)
    6dbe:	f3c1 2788 	ubfx	r7, r1, #10, #9
    6dc2:	802f      	strh	r7, [r5, #0]
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
    6dc4:	098f      	lsrs	r7, r1, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6dc6:	09cd      	lsrs	r5, r1, #7
    6dc8:	f007 0720 	and.w	r7, r7, #32
    6dcc:	f005 0540 	and.w	r5, r5, #64	; 0x40
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    6dd0:	0949      	lsrs	r1, r1, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6dd2:	443d      	add	r5, r7
    6dd4:	f001 0110 	and.w	r1, r1, #16
    6dd8:	4429      	add	r1, r5
    6dda:	440c      	add	r4, r1
    6ddc:	f000 0004 	and.w	r0, r0, #4
    6de0:	4420      	add	r0, r4
    6de2:	f002 0202 	and.w	r2, r2, #2
    6de6:	4402      	add	r2, r0
    6de8:	f003 0301 	and.w	r3, r3, #1
    6dec:	4922      	ldr	r1, [pc, #136]	; (6e78 <precalc+0x128>)
    6dee:	4413      	add	r3, r2
    6df0:	700b      	strb	r3, [r1, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    6df2:	4b22      	ldr	r3, [pc, #136]	; (6e7c <precalc+0x12c>)
    6df4:	781b      	ldrb	r3, [r3, #0]
    6df6:	b383      	cbz	r3, 6e5a <precalc+0x10a>
    6df8:	2400      	movs	r4, #0
    6dfa:	46a4      	mov	ip, r4
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    6dfc:	4f20      	ldr	r7, [pc, #128]	; (6e80 <precalc+0x130>)
    6dfe:	2300      	movs	r3, #0
    6e00:	5de2      	ldrb	r2, [r4, r7]

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6e02:	2500      	movs	r5, #0
    6e04:	ea52 0103 	orrs.w	r1, r2, r3
    6e08:	d008      	beq.n	6e1c <precalc+0xcc>
		n &= n - 1;
    6e0a:	f112 30ff 	adds.w	r0, r2, #4294967295	; 0xffffffff
    6e0e:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6e12:	3501      	adds	r5, #1
		n &= n - 1;
    6e14:	4002      	ands	r2, r0
    6e16:	400b      	ands	r3, r1

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6e18:	b2ed      	uxtb	r5, r5
    6e1a:	e7f3      	b.n	6e04 <precalc+0xb4>
    6e1c:	3401      	adds	r4, #1
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    6e1e:	4465      	add	r5, ip
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6e20:	2c0a      	cmp	r4, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    6e22:	b2ed      	uxtb	r5, r5
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6e24:	d001      	beq.n	6e2a <precalc+0xda>
			used_channels += count_bits((uint64_t) afh_map[i]);
    6e26:	46ac      	mov	ip, r5
    6e28:	e7e8      	b.n	6dfc <precalc+0xac>
    6e2a:	4b16      	ldr	r3, [pc, #88]	; (6e84 <precalc+0x134>)
    6e2c:	701d      	strb	r5, [r3, #0]
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6e2e:	2300      	movs	r3, #0
    6e30:	461a      	mov	r2, r3
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    6e32:	214f      	movs	r1, #79	; 0x4f
    6e34:	fb93 f0f1 	sdiv	r0, r3, r1
    6e38:	fb01 3010 	mls	r0, r1, r0, r3
    6e3c:	b2c1      	uxtb	r1, r0
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    6e3e:	08cc      	lsrs	r4, r1, #3
    6e40:	5d3c      	ldrb	r4, [r7, r4]
    6e42:	f000 0007 	and.w	r0, r0, #7
    6e46:	fa44 f000 	asr.w	r0, r4, r0
    6e4a:	07c0      	lsls	r0, r0, #31
    6e4c:	d502      	bpl.n	6e54 <precalc+0x104>
				bank[j++] = chan;
    6e4e:	1c50      	adds	r0, r2, #1
    6e50:	54b1      	strb	r1, [r6, r2]
    6e52:	b2c2      	uxtb	r2, r0
    6e54:	3302      	adds	r3, #2
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    6e56:	2b9e      	cmp	r3, #158	; 0x9e
    6e58:	d1eb      	bne.n	6e32 <precalc+0xe2>
    6e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e5c:	10001518 	.word	0x10001518
    6e60:	10001168 	.word	0x10001168
    6e64:	1000157d 	.word	0x1000157d
    6e68:	1000157b 	.word	0x1000157b
    6e6c:	10001528 	.word	0x10001528
    6e70:	1000157c 	.word	0x1000157c
    6e74:	1000152a 	.word	0x1000152a
    6e78:	100015cc 	.word	0x100015cc
    6e7c:	10001497 	.word	0x10001497
    6e80:	10000ffb 	.word	0x10000ffb
    6e84:	10000ff9 	.word	0x10000ff9

00006e88 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    6e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e8a:	b087      	sub	sp, #28
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6e8c:	f3c0 02d8 	ubfx	r2, r0, #3, #25
	f = base_f % 79;
    6e90:	214f      	movs	r1, #79	; 0x4f
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6e92:	f022 020f 	bic.w	r2, r2, #15
	f = base_f % 79;
    6e96:	fbb2 f7f1 	udiv	r7, r2, r1
    6e9a:	fb01 2717 	mls	r7, r1, r7, r2
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6e9e:	493f      	ldr	r1, [pc, #252]	; (6f9c <next_hop+0x114>)
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
    6ea0:	f3c0 0340 	ubfx	r3, r0, #1, #1
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6ea4:	f891 c000 	ldrb.w	ip, [r1]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6ea8:	211f      	movs	r1, #31

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    6eaa:	015e      	lsls	r6, r3, #5
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6eac:	434b      	muls	r3, r1
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6eae:	ea8c 4c10 	eor.w	ip, ip, r0, lsr #16
    6eb2:	f00c 0c1f 	and.w	ip, ip, #31
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6eb6:	ea8c 0c03 	eor.w	ip, ip, r3
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6eba:	4b39      	ldr	r3, [pc, #228]	; (6fa0 <next_hop+0x118>)

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    6ebc:	b2b6      	uxth	r6, r6
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6ebe:	781c      	ldrb	r4, [r3, #0]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6ec0:	4b38      	ldr	r3, [pc, #224]	; (6fa4 <next_hop+0x11c>)
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6ec2:	ea84 5450 	eor.w	r4, r4, r0, lsr #21
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6ec6:	781b      	ldrb	r3, [r3, #0]
    6ec8:	eb04 0490 	add.w	r4, r4, r0, lsr #2
    6ecc:	405c      	eors	r4, r3
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6ece:	4b36      	ldr	r3, [pc, #216]	; (6fa8 <next_hop+0x120>)

/* 5 bit permutation */
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    6ed0:	400c      	ands	r4, r1
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6ed2:	881b      	ldrh	r3, [r3, #0]
    6ed4:	ea83 10d0 	eor.w	r0, r3, r0, lsr #7
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
	p_high &= 0x1f;
	p_low &= 0x1ff;
    6ed8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6edc:	b280      	uxth	r0, r0
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    6ede:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
    6ee0:	fa40 f103 	asr.w	r1, r0, r3
    6ee4:	ad02      	add	r5, sp, #8
    6ee6:	f001 0101 	and.w	r1, r1, #1
    6eea:	5559      	strb	r1, [r3, r5]
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    6eec:	3301      	adds	r3, #1
    6eee:	2b09      	cmp	r3, #9
    6ef0:	d1f6      	bne.n	6ee0 <next_hop+0x58>
    6ef2:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;
    6ef4:	fa4c f003 	asr.w	r0, ip, r3
    6ef8:	18e9      	adds	r1, r5, r3
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6efa:	3301      	adds	r3, #1
		p[i+9] = (p_high >> i) & 0x01;
    6efc:	f000 0001 	and.w	r0, r0, #1
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6f00:	2b05      	cmp	r3, #5
		p[i+9] = (p_high >> i) & 0x01;
    6f02:	7248      	strb	r0, [r1, #9]
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6f04:	d1f6      	bne.n	6ef4 <next_hop+0x6c>
    6f06:	2300      	movs	r3, #0
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;
    6f08:	fa44 f103 	asr.w	r1, r4, r3
    6f0c:	f001 0101 	and.w	r1, r1, #1
    6f10:	f80d 1003 	strb.w	r1, [sp, r3]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    6f14:	3301      	adds	r3, #1
    6f16:	2b05      	cmp	r3, #5
    6f18:	d1f6      	bne.n	6f08 <next_hop+0x80>
    6f1a:	230d      	movs	r3, #13
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    6f1c:	5ce9      	ldrb	r1, [r5, r3]
    6f1e:	b179      	cbz	r1, 6f40 <next_hop+0xb8>
			tmp = z_bit[index1[i]];
    6f20:	4922      	ldr	r1, [pc, #136]	; (6fac <next_hop+0x124>)
    6f22:	a806      	add	r0, sp, #24
    6f24:	5c5c      	ldrb	r4, [r3, r1]
			z_bit[index1[i]] = z_bit[index2[i]];
    6f26:	310e      	adds	r1, #14

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    6f28:	4404      	add	r4, r0
			z_bit[index1[i]] = z_bit[index2[i]];
    6f2a:	5c58      	ldrb	r0, [r3, r1]
    6f2c:	a906      	add	r1, sp, #24
    6f2e:	4408      	add	r0, r1

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    6f30:	f814 cc18 	ldrb.w	ip, [r4, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    6f34:	f810 1c18 	ldrb.w	r1, [r0, #-24]
    6f38:	f804 1c18 	strb.w	r1, [r4, #-24]
			z_bit[index2[i]] = tmp;
    6f3c:	f800 cc18 	strb.w	ip, [r0, #-24]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    6f40:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    6f44:	d2ea      	bcs.n	6f1c <next_hop+0x94>
    6f46:	2100      	movs	r1, #0
    6f48:	460b      	mov	r3, r1
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
		output += z_bit[i] << i;
    6f4a:	f81d 0003 	ldrb.w	r0, [sp, r3]
    6f4e:	4098      	lsls	r0, r3
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6f50:	3301      	adds	r3, #1
		output += z_bit[i] << i;
    6f52:	4401      	add	r1, r0
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6f54:	2b05      	cmp	r3, #5
		output += z_bit[i] << i;
    6f56:	b2c9      	uxtb	r1, r1
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6f58:	d1f7      	bne.n	6f4a <next_hop+0xc2>
	perm = perm5(
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    6f5a:	4b15      	ldr	r3, [pc, #84]	; (6fb0 <next_hop+0x128>)
    6f5c:	4437      	add	r7, r6
    6f5e:	781b      	ldrb	r3, [r3, #0]
    6f60:	4419      	add	r1, r3
    6f62:	440f      	add	r7, r1
    6f64:	234f      	movs	r3, #79	; 0x4f
    6f66:	fbb7 f0f3 	udiv	r0, r7, r3
    6f6a:	fb03 7710 	mls	r7, r3, r0, r7
    6f6e:	4b11      	ldr	r3, [pc, #68]	; (6fb4 <next_hop+0x12c>)
    6f70:	5dd8      	ldrb	r0, [r3, r7]
	if(afh_enabled) {
    6f72:	4b11      	ldr	r3, [pc, #68]	; (6fb8 <next_hop+0x130>)
    6f74:	781b      	ldrb	r3, [r3, #0]
    6f76:	b16b      	cbz	r3, 6f94 <next_hop+0x10c>
		f_dash = base_f % used_channels;
    6f78:	4b10      	ldr	r3, [pc, #64]	; (6fbc <next_hop+0x134>)
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	fbb2 f0f3 	udiv	r0, r2, r3
    6f80:	fb03 2210 	mls	r2, r3, r0, r2
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    6f84:	4416      	add	r6, r2
    6f86:	440e      	add	r6, r1
    6f88:	fbb6 f1f3 	udiv	r1, r6, r3
    6f8c:	fb03 6611 	mls	r6, r3, r1, r6
    6f90:	4b0b      	ldr	r3, [pc, #44]	; (6fc0 <next_hop+0x138>)
    6f92:	5d98      	ldrb	r0, [r3, r6]
	}
	return (2402 + next_channel);

}
    6f94:	f600 1062 	addw	r0, r0, #2402	; 0x962
    6f98:	b007      	add	sp, #28
    6f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f9c:	1000157c 	.word	0x1000157c
    6fa0:	1000157b 	.word	0x1000157b
    6fa4:	10001528 	.word	0x10001528
    6fa8:	1000152a 	.word	0x1000152a
    6fac:	0000a06f 	.word	0x0000a06f
    6fb0:	100015cc 	.word	0x100015cc
    6fb4:	1000157d 	.word	0x1000157d
    6fb8:	10001497 	.word	0x10001497
    6fbc:	10000ff9 	.word	0x10000ff9
    6fc0:	1000152c 	.word	0x1000152c

00006fc4 <btle_channel_index>:
}

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
    6fc4:	0840      	lsrs	r0, r0, #1
    6fc6:	d00a      	beq.n	6fde <btle_channel_index+0x1a>
		idx = 37;
	else if (channel < 12)
    6fc8:	280b      	cmp	r0, #11
    6fca:	d801      	bhi.n	6fd0 <btle_channel_index+0xc>
		idx = channel - 1;
    6fcc:	3801      	subs	r0, #1
    6fce:	e004      	b.n	6fda <btle_channel_index+0x16>
	else if (channel == 12)
    6fd0:	280c      	cmp	r0, #12
    6fd2:	d006      	beq.n	6fe2 <btle_channel_index+0x1e>
		idx = 38;
	else if (channel < 39)
    6fd4:	2826      	cmp	r0, #38	; 0x26
    6fd6:	d806      	bhi.n	6fe6 <btle_channel_index+0x22>
		idx = channel - 2;
    6fd8:	3802      	subs	r0, #2
    6fda:	b2c0      	uxtb	r0, r0
    6fdc:	4770      	bx	lr

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
		idx = 37;
    6fde:	2025      	movs	r0, #37	; 0x25
    6fe0:	4770      	bx	lr
	else if (channel < 12)
		idx = channel - 1;
	else if (channel == 12)
		idx = 38;
    6fe2:	2026      	movs	r0, #38	; 0x26
    6fe4:	4770      	bx	lr
	else if (channel < 39)
		idx = channel - 2;
	else
		idx = 39;
    6fe6:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    6fe8:	4770      	bx	lr

00006fea <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    6fea:	280a      	cmp	r0, #10
    6fec:	d802      	bhi.n	6ff4 <btle_channel_index_to_phys+0xa>
		phys = 2404 + 2 * idx;
    6fee:	f200 40b2 	addw	r0, r0, #1202	; 0x4b2
    6ff2:	e003      	b.n	6ffc <btle_channel_index_to_phys+0x12>
	else if (idx < 37)
    6ff4:	2824      	cmp	r0, #36	; 0x24
    6ff6:	d803      	bhi.n	7000 <btle_channel_index_to_phys+0x16>
		phys = 2428 + 2 * (idx - 11);
    6ff8:	f200 40b3 	addw	r0, r0, #1203	; 0x4b3
    6ffc:	0040      	lsls	r0, r0, #1
    6ffe:	4770      	bx	lr
	else if (idx == 37)
    7000:	2825      	cmp	r0, #37	; 0x25
    7002:	d007      	beq.n	7014 <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
		phys = 2426;
    7004:	f640 137a 	movw	r3, #2426	; 0x97a
    7008:	2826      	cmp	r0, #38	; 0x26
    700a:	bf0c      	ite	eq
    700c:	4618      	moveq	r0, r3
    700e:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    7012:	4770      	bx	lr
	if (idx < 11)
		phys = 2404 + 2 * idx;
	else if (idx < 37)
		phys = 2428 + 2 * (idx - 11);
	else if (idx == 37)
		phys = 2402;
    7014:	f640 1062 	movw	r0, #2402	; 0x962
	else if (idx == 38)
		phys = 2426;
	else
		phys = 2480;
	return phys;
}
    7018:	4770      	bx	lr

0000701a <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    701a:	b538      	push	{r3, r4, r5, lr}
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    701c:	7d45      	ldrb	r5, [r0, #21]

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    701e:	4604      	mov	r4, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    7020:	4628      	mov	r0, r5
    7022:	f7ff ffe2 	bl	6fea <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    7026:	7da2      	ldrb	r2, [r4, #22]
    7028:	2325      	movs	r3, #37	; 0x25
    702a:	442a      	add	r2, r5
    702c:	fb92 f1f3 	sdiv	r1, r2, r3
    7030:	fb03 2311 	mls	r3, r3, r1, r2
    7034:	7563      	strb	r3, [r4, #21]
	return phys;
}
    7036:	bd38      	pop	{r3, r4, r5, pc}

00007038 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    7038:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    703a:	2300      	movs	r3, #0
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
    703c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    7040:	4293      	cmp	r3, r2
    7042:	da14      	bge.n	706e <btle_calc_crc+0x36>
		u8 cur = data[i];
    7044:	5ccd      	ldrb	r5, [r1, r3]
    7046:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			int next_bit = (state ^ cur) & 1;
    7048:	ea85 0600 	eor.w	r6, r5, r0
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    704c:	f016 0f01 	tst.w	r6, #1
    7050:	ea4f 0555 	mov.w	r5, r5, lsr #1
    7054:	ea4f 0050 	mov.w	r0, r0, lsr #1
    7058:	d005      	beq.n	7066 <btle_calc_crc+0x2e>
				state |= 1 << 23;
    705a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
				state ^= lfsr_mask;
    705e:	f480 00b4 	eor.w	r0, r0, #5898240	; 0x5a0000
    7062:	f480 40c0 	eor.w	r0, r0, #24576	; 0x6000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    7066:	3c01      	subs	r4, #1
    7068:	d1ee      	bne.n	7048 <btle_calc_crc+0x10>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    706a:	3301      	adds	r3, #1
    706c:	e7e8      	b.n	7040 <btle_calc_crc+0x8>
			}
		}
	}

	return state;
}
    706e:	bd70      	pop	{r4, r5, r6, pc}

00007070 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    7070:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    7072:	3a01      	subs	r2, #1
    7074:	2a00      	cmp	r2, #0
    7076:	db14      	blt.n	70a2 <btle_reverse_crc+0x32>
		u8 cur = data[i];
    7078:	5c8d      	ldrb	r5, [r1, r2]
    707a:	2307      	movs	r3, #7
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
    707c:	0dc4      	lsrs	r4, r0, #23
			state = (state << 1) & 0xffffff;
    707e:	0040      	lsls	r0, r0, #1
    7080:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    7084:	fa45 f003 	asr.w	r0, r5, r3
    7088:	f000 0001 	and.w	r0, r0, #1
    708c:	4060      	eors	r0, r4
    708e:	4330      	orrs	r0, r6
			if (top_bit)
    7090:	b11c      	cbz	r4, 709a <btle_reverse_crc+0x2a>
				state ^= lfsr_mask;
    7092:	f480 0034 	eor.w	r0, r0, #11796480	; 0xb40000
    7096:	f480 4040 	eor.w	r0, r0, #49152	; 0xc000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    709a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    709e:	d2ed      	bcs.n	707c <btle_reverse_crc+0xc>
    70a0:	e7e7      	b.n	7072 <btle_reverse_crc+0x2>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    70a2:	2300      	movs	r3, #0
    70a4:	461a      	mov	r2, r3
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    70a6:	fa20 f103 	lsr.w	r1, r0, r3
    70aa:	f1c3 0417 	rsb	r4, r3, #23
    70ae:	f001 0101 	and.w	r1, r1, #1
    70b2:	40a1      	lsls	r1, r4
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    70b4:	3301      	adds	r3, #1
    70b6:	2b18      	cmp	r3, #24
		ret |= ((state >> i) & 1) << (23 - i);
    70b8:	ea42 0201 	orr.w	r2, r2, r1
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    70bc:	d1f3      	bne.n	70a6 <btle_reverse_crc+0x36>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
}
    70be:	4610      	mov	r0, r2
    70c0:	bd70      	pop	{r4, r5, r6, pc}
    70c2:	0000      	movs	r0, r0

000070c4 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    70c4:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    70c6:	2300      	movs	r3, #0
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    70c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    70cc:	4293      	cmp	r3, r2
    70ce:	da09      	bge.n	70e4 <btle_crcgen_lut+0x20>
		key = data[i] ^ (state & 0xff);
    70d0:	5ccd      	ldrb	r5, [r1, r3]
		state = (state >> 8) ^ btle_crc_lut[key];
    70d2:	4c05      	ldr	r4, [pc, #20]	; (70e8 <btle_crcgen_lut+0x24>)
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
		key = data[i] ^ (state & 0xff);
    70d4:	4045      	eors	r5, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    70d6:	b2ed      	uxtb	r5, r5
    70d8:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    70dc:	3301      	adds	r3, #1
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
    70de:	ea84 2010 	eor.w	r0, r4, r0, lsr #8
    70e2:	e7f3      	b.n	70cc <btle_crcgen_lut+0x8>
	}
	return state;
}
    70e4:	bd30      	pop	{r4, r5, pc}
    70e6:	bf00      	nop
    70e8:	100004a0 	.word	0x100004a0

000070ec <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    70ec:	b513      	push	{r0, r1, r4, lr}
    70ee:	460b      	mov	r3, r1
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    70f0:	8841      	ldrh	r1, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    70f2:	6812      	ldr	r2, [r2, #0]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    70f4:	f8ad 1004 	strh.w	r1, [sp, #4]
    70f8:	8881      	ldrh	r1, [r0, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    70fa:	7840      	ldrb	r0, [r0, #1]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    70fc:	f8ad 1006 	strh.w	r1, [sp, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    7100:	4904      	ldr	r1, [pc, #16]	; (7114 <usb_vendor_request_handler+0x28>)
    7102:	680c      	ldr	r4, [r1, #0]
    7104:	a901      	add	r1, sp, #4
    7106:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    7108:	1e43      	subs	r3, r0, #1
    710a:	4258      	negs	r0, r3
    710c:	4158      	adcs	r0, r3
    710e:	b002      	add	sp, #8
    7110:	bd10      	pop	{r4, pc}
    7112:	bf00      	nop
    7114:	100036d4 	.word	0x100036d4

00007118 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    7118:	b530      	push	{r4, r5, lr}
    711a:	b087      	sub	sp, #28
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    711c:	ad01      	add	r5, sp, #4
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
	return (BOOL) (rv==1);
}


void set_serial_descriptor(u8 *descriptors) {
    711e:	4604      	mov	r4, r0
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    7120:	4669      	mov	r1, sp
    7122:	4628      	mov	r0, r5
    7124:	f001 fa66 	bl	85f4 <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    7128:	f89d 2004 	ldrb.w	r2, [sp, #4]
    712c:	b9e2      	cbnz	r2, 7168 <set_serial_descriptor+0x50>
    712e:	4623      	mov	r3, r4
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    7130:	3201      	adds	r2, #1
    7132:	5ca9      	ldrb	r1, [r5, r2]
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    7134:	2000      	movs	r0, #0
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    7136:	090c      	lsrs	r4, r1, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7138:	2c09      	cmp	r4, #9
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
    713a:	f001 010f 	and.w	r1, r1, #15
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    713e:	bf86      	itte	hi
    7140:	3457      	addhi	r4, #87	; 0x57
    7142:	b2e4      	uxtbhi	r4, r4
    7144:	3430      	addls	r4, #48	; 0x30
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7146:	2909      	cmp	r1, #9
    7148:	bf86      	itte	hi
    714a:	3157      	addhi	r1, #87	; 0x57
    714c:	b2c9      	uxtbhi	r1, r1
    714e:	3130      	addls	r1, #48	; 0x30
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    7150:	2a10      	cmp	r2, #16
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7152:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
			desc[1+ i * 4] = 0;
    7156:	f883 007d 	strb.w	r0, [r3, #125]	; 0x7d
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    715a:	f883 107e 	strb.w	r1, [r3, #126]	; 0x7e
			desc[3 + i * 4] = 0;
    715e:	f883 007f 	strb.w	r0, [r3, #127]	; 0x7f
    7162:	f103 0304 	add.w	r3, r3, #4
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    7166:	d1e3      	bne.n	7130 <set_serial_descriptor+0x18>
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[3 + i * 4] = 0;
		}
	}
}
    7168:	b007      	add	sp, #28
    716a:	bd30      	pop	{r4, r5, pc}

0000716c <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    716c:	b538      	push	{r3, r4, r5, lr}
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    716e:	4c0d      	ldr	r4, [pc, #52]	; (71a4 <ubertooth_usb_init+0x38>)
		}
	}
}

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    7170:	4605      	mov	r5, r0
	// initialise stack
	USBInit();
    7172:	f001 fb1d 	bl	87b0 <USBInit>

	set_serial_descriptor(abDescriptors);
    7176:	4620      	mov	r0, r4
    7178:	f7ff ffce 	bl	7118 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    717c:	4620      	mov	r0, r4
    717e:	f001 fd55 	bl	8c2c <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    7182:	4b09      	ldr	r3, [pc, #36]	; (71a8 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    7184:	4a09      	ldr	r2, [pc, #36]	; (71ac <ubertooth_usb_init+0x40>)
    7186:	2002      	movs	r0, #2
    7188:	4909      	ldr	r1, [pc, #36]	; (71b0 <ubertooth_usb_init+0x44>)
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);

	// Request handler
	v_req_handler = vendor_req_handler;
    718a:	601d      	str	r5, [r3, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    718c:	f001 fb06 	bl	879c <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    7190:	4908      	ldr	r1, [pc, #32]	; (71b4 <ubertooth_usb_init+0x48>)
    7192:	20ff      	movs	r0, #255	; 0xff
    7194:	f001 fd30 	bl	8bf8 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    7198:	2001      	movs	r0, #1
    719a:	f001 fb9e 	bl	88da <USBHwConnect>

	return 0;
}
    719e:	2000      	movs	r0, #0
    71a0:	bd38      	pop	{r3, r4, r5, pc}
    71a2:	bf00      	nop
    71a4:	100008a0 	.word	0x100008a0
    71a8:	100036d4 	.word	0x100036d4
    71ac:	100035d0 	.word	0x100035d0
    71b0:	000070ed 	.word	0x000070ed
    71b4:	0000a08b 	.word	0x0000a08b

000071b8 <queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    71b8:	4b04      	ldr	r3, [pc, #16]	; (71cc <queue_init+0x14>)
    71ba:	2100      	movs	r1, #0
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    71bc:	4804      	ldr	r0, [pc, #16]	; (71d0 <queue_init+0x18>)
    71be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    71c2:	6019      	str	r1, [r3, #0]
	tail = 0;
    71c4:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    71c6:	f7fd b833 	b.w	4230 <memset>
    71ca:	bf00      	nop
    71cc:	10000e70 	.word	0x10000e70
    71d0:	100015d0 	.word	0x100015d0

000071d4 <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
    71d4:	4b0a      	ldr	r3, [pc, #40]	; (7200 <usb_enqueue+0x2c>)
    71d6:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    71d8:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    71da:	f001 017f 	and.w	r1, r1, #127	; 0x7f
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    71de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    71e2:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    71e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    71e8:	4291      	cmp	r1, r2
    71ea:	d006      	beq.n	71fa <usb_enqueue+0x26>
		return NULL;
	}

	++tail;
    71ec:	685a      	ldr	r2, [r3, #4]
    71ee:	3201      	adds	r2, #1
    71f0:	605a      	str	r2, [r3, #4]
	return &fifo[t];
    71f2:	4b04      	ldr	r3, [pc, #16]	; (7204 <usb_enqueue+0x30>)
    71f4:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    71f8:	4770      	bx	lr
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    71fa:	2000      	movs	r0, #0
	}

	++tail;
	return &fifo[t];

}
    71fc:	4770      	bx	lr
    71fe:	bf00      	nop
    7200:	10000e70 	.word	0x10000e70
    7204:	100015d0 	.word	0x100015d0

00007208 <dequeue>:

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    7208:	4b08      	ldr	r3, [pc, #32]	; (722c <dequeue+0x24>)
    720a:	6818      	ldr	r0, [r3, #0]
	u8 t = tail & 0x7F;
    720c:	685a      	ldr	r2, [r3, #4]

}

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    720e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
    7212:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7216:	4290      	cmp	r0, r2
    7218:	d006      	beq.n	7228 <dequeue+0x20>
		return NULL;
	}

	++head;
    721a:	681a      	ldr	r2, [r3, #0]
    721c:	3201      	adds	r2, #1
    721e:	601a      	str	r2, [r3, #0]
	return &fifo[h];
    7220:	4b03      	ldr	r3, [pc, #12]	; (7230 <dequeue+0x28>)
    7222:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    7226:	4770      	bx	lr
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
		return NULL;
    7228:	2000      	movs	r0, #0
	}

	++head;
	return &fifo[h];
}
    722a:	4770      	bx	lr
    722c:	10000e70 	.word	0x10000e70
    7230:	100015d0 	.word	0x100015d0

00007234 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    7234:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7236:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    7238:	f7ff ffe6 	bl	7208 <dequeue>
    723c:	4b0d      	ldr	r3, [pc, #52]	; (7274 <dequeue_send+0x40>)
	if (pkt != NULL) {
    723e:	4604      	mov	r4, r0
    7240:	b138      	cbz	r0, 7252 <dequeue_send+0x1e>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    7242:	2082      	movs	r0, #130	; 0x82
    7244:	4621      	mov	r1, r4
    7246:	2240      	movs	r2, #64	; 0x40

int dequeue_send(u32 clkn)
{
	usb_pkt_rx *pkt = dequeue();
	if (pkt != NULL) {
		last_usb_pkt = clkn;
    7248:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    724a:	f001 fb77 	bl	893c <USBHwEPWrite>
		return 1;
    724e:	2001      	movs	r0, #1
    7250:	e00e      	b.n	7270 <dequeue_send+0x3c>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    7252:	689a      	ldr	r2, [r3, #8]
    7254:	4908      	ldr	r1, [pc, #32]	; (7278 <dequeue_send+0x44>)
    7256:	1aaa      	subs	r2, r5, r2
    7258:	428a      	cmp	r2, r1
    725a:	d908      	bls.n	726e <dequeue_send+0x3a>
			u8 pkt_type = KEEP_ALIVE;
    725c:	2203      	movs	r2, #3
    725e:	a902      	add	r1, sp, #8
    7260:	f801 2d01 	strb.w	r2, [r1, #-1]!
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7264:	2082      	movs	r0, #130	; 0x82
    7266:	2201      	movs	r2, #1
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
		return 1;
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
			u8 pkt_type = KEEP_ALIVE;
			last_usb_pkt = clkn;
    7268:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    726a:	f001 fb67 	bl	893c <USBHwEPWrite>
		}
		return 0;
    726e:	4620      	mov	r0, r4
	}
}
    7270:	b003      	add	sp, #12
    7272:	bd30      	pop	{r4, r5, pc}
    7274:	10000e70 	.word	0x10000e70
    7278:	00061a80 	.word	0x00061a80

0000727c <handle_usb>:

void handle_usb(u32 clkn)
{
    727c:	b538      	push	{r3, r4, r5, lr}
    727e:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    7280:	2082      	movs	r0, #130	; 0x82
    7282:	f001 fb35 	bl	88f0 <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    7286:	0681      	lsls	r1, r0, #26
void handle_usb(u32 clkn)
{
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    7288:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    728a:	d402      	bmi.n	7292 <handle_usb+0x16>
		dequeue_send(clkn);
    728c:	4620      	mov	r0, r4
    728e:	f7ff ffd1 	bl	7234 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    7292:	066a      	lsls	r2, r5, #25
    7294:	d402      	bmi.n	729c <handle_usb+0x20>
		dequeue_send(clkn);
    7296:	4620      	mov	r0, r4
    7298:	f7ff ffcc 	bl	7234 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    729c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!(epstat & EPSTAT_B2FULL)) {
		dequeue_send(clkn);
	}

	/* polled "interrupt" */
	USBHwISR();
    72a0:	f001 bbb8 	b.w	8a14 <USBHwISR>

000072a4 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    72a4:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    72a6:	229e      	movs	r2, #158	; 0x9e
    72a8:	4807      	ldr	r0, [pc, #28]	; (72c8 <rssi_reset+0x24>)
    72aa:	2100      	movs	r1, #0
    72ac:	f7fc ffc0 	bl	4230 <memset>

	rssi_count = 0;
    72b0:	4a06      	ldr	r2, [pc, #24]	; (72cc <rssi_reset+0x28>)
    72b2:	2300      	movs	r3, #0
    72b4:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    72b6:	4a06      	ldr	r2, [pc, #24]	; (72d0 <rssi_reset+0x2c>)
    72b8:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    72ba:	4b06      	ldr	r3, [pc, #24]	; (72d4 <rssi_reset+0x30>)
    72bc:	2280      	movs	r2, #128	; 0x80
    72be:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    72c0:	4b05      	ldr	r3, [pc, #20]	; (72d8 <rssi_reset+0x34>)
    72c2:	227f      	movs	r2, #127	; 0x7f
    72c4:	701a      	strb	r2, [r3, #0]
    72c6:	bd08      	pop	{r3, pc}
    72c8:	10000e7c 	.word	0x10000e7c
    72cc:	10001496 	.word	0x10001496
    72d0:	100036d8 	.word	0x100036d8
    72d4:	10000ff8 	.word	0x10000ff8
    72d8:	10000ffa 	.word	0x10000ffa

000072dc <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    72dc:	4b0b      	ldr	r3, [pc, #44]	; (730c <rssi_add+0x30>)
    72de:	f993 2000 	ldrsb.w	r2, [r3]
    72e2:	4290      	cmp	r0, r2
    72e4:	bfa8      	it	ge
    72e6:	4602      	movge	r2, r0
    72e8:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    72ea:	4b09      	ldr	r3, [pc, #36]	; (7310 <rssi_add+0x34>)
    72ec:	f993 2000 	ldrsb.w	r2, [r3]
    72f0:	4290      	cmp	r0, r2
    72f2:	bfb8      	it	lt
    72f4:	4602      	movlt	r2, r0
    72f6:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    72f8:	4b06      	ldr	r3, [pc, #24]	; (7314 <rssi_add+0x38>)
    72fa:	681a      	ldr	r2, [r3, #0]
    72fc:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    7300:	6018      	str	r0, [r3, #0]
	rssi_count += 1;
    7302:	4b05      	ldr	r3, [pc, #20]	; (7318 <rssi_add+0x3c>)
    7304:	781a      	ldrb	r2, [r3, #0]
    7306:	3201      	adds	r2, #1
    7308:	701a      	strb	r2, [r3, #0]
    730a:	4770      	bx	lr
    730c:	10000ff8 	.word	0x10000ff8
    7310:	10000ffa 	.word	0x10000ffa
    7314:	100036d8 	.word	0x100036d8
    7318:	10001496 	.word	0x10001496

0000731c <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    731c:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    731e:	f640 1362 	movw	r3, #2402	; 0x962
    7322:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7326:	bf38      	it	cc
    7328:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    732a:	4b0d      	ldr	r3, [pc, #52]	; (7360 <rssi_iir_update+0x44>)
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;

	int i = channel - 2402;
    732c:	f6a0 1062 	subw	r0, r0, #2402	; 0x962

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    7330:	781b      	ldrb	r3, [r3, #0]
    7332:	b123      	cbz	r3, 733e <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    7334:	4a0b      	ldr	r2, [pc, #44]	; (7364 <rssi_iir_update+0x48>)
    7336:	6812      	ldr	r2, [r2, #0]
    7338:	3280      	adds	r2, #128	; 0x80
    733a:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    733e:	2403      	movs	r4, #3
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7340:	4a09      	ldr	r2, [pc, #36]	; (7368 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7342:	4363      	muls	r3, r4
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7344:	f932 1010 	ldrsh.w	r1, [r2, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7348:	24fd      	movs	r4, #253	; 0xfd
    734a:	fb04 3301 	mla	r3, r4, r1, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    734e:	f44f 7180 	mov.w	r1, #256	; 0x100
    7352:	3380      	adds	r3, #128	; 0x80
    7354:	fb93 f3f1 	sdiv	r3, r3, r1
    7358:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    735c:	bd10      	pop	{r4, pc}
    735e:	bf00      	nop
    7360:	10001496 	.word	0x10001496
    7364:	100036d8 	.word	0x100036d8
    7368:	10000e7c 	.word	0x10000e7c

0000736c <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    736c:	f640 1362 	movw	r3, #2402	; 0x962
    7370:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7374:	bf38      	it	cc
    7376:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    7378:	4a05      	ldr	r2, [pc, #20]	; (7390 <rssi_get_avg+0x24>)
    737a:	f6a0 1362 	subw	r3, r0, #2402	; 0x962
    737e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
    7382:	f44f 7380 	mov.w	r3, #256	; 0x100
    7386:	3080      	adds	r0, #128	; 0x80
    7388:	fb90 f0f3 	sdiv	r0, r0, r3
}
    738c:	b240      	sxtb	r0, r0
    738e:	4770      	bx	lr
    7390:	10000e7c 	.word	0x10000e7c

00007394 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    7394:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    7396:	4d15      	ldr	r5, [pc, #84]	; (73ec <cs_threshold_calc_and_set+0x58>)
    7398:	782c      	ldrb	r4, [r5, #0]
    739a:	b263      	sxtb	r3, r4
    739c:	2b00      	cmp	r3, #0
    739e:	dd05      	ble.n	73ac <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    73a0:	f7ff ffe4 	bl	736c <rssi_get_avg>
		level = rssi - 54 + cs_threshold_req;
    73a4:	782c      	ldrb	r4, [r5, #0]
    73a6:	3c36      	subs	r4, #54	; 0x36
    73a8:	4420      	add	r0, r4
    73aa:	b2c4      	uxtb	r4, r0
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
	level = level > -20 ? -20 : level;
    73ac:	f06f 0377 	mvn.w	r3, #119	; 0x77
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
    73b0:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    73b2:	429c      	cmp	r4, r3
    73b4:	bfb8      	it	lt
    73b6:	461c      	movlt	r4, r3
    73b8:	f06f 0313 	mvn.w	r3, #19
    73bc:	429c      	cmp	r4, r3
    73be:	bfa8      	it	ge
    73c0:	461c      	movge	r4, r3
    73c2:	b2e4      	uxtb	r4, r4
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    73c4:	f104 0138 	add.w	r1, r4, #56	; 0x38
    73c8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    73cc:	2006      	movs	r0, #6
    73ce:	f041 0103 	orr.w	r1, r1, #3
    73d2:	f000 ff62 	bl	829a <cc2400_set>
	cs_threshold_cur = level;
    73d6:	4b06      	ldr	r3, [pc, #24]	; (73f0 <cs_threshold_calc_and_set+0x5c>)
    73d8:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    73da:	b264      	sxtb	r4, r4
    73dc:	f114 0f77 	cmn.w	r4, #119	; 0x77
    73e0:	4b04      	ldr	r3, [pc, #16]	; (73f4 <cs_threshold_calc_and_set+0x60>)
    73e2:	bfac      	ite	ge
    73e4:	2400      	movge	r4, #0
    73e6:	2401      	movlt	r4, #1
    73e8:	701c      	strb	r4, [r3, #0]
    73ea:	bd38      	pop	{r3, r4, r5, pc}
    73ec:	10001498 	.word	0x10001498
    73f0:	10001510 	.word	0x10001510
    73f4:	10001160 	.word	0x10001160

000073f8 <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    73f8:	4b07      	ldr	r3, [pc, #28]	; (7418 <cs_trigger_enable+0x20>)
    73fa:	2200      	movs	r2, #0
    73fc:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    73fe:	4b07      	ldr	r3, [pc, #28]	; (741c <cs_trigger_enable+0x24>)
    7400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7404:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7406:	4b06      	ldr	r3, [pc, #24]	; (7420 <cs_trigger_enable+0x28>)
    7408:	2204      	movs	r2, #4
    740a:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    740c:	689a      	ldr	r2, [r3, #8]
    740e:	f042 0204 	orr.w	r2, r2, #4
    7412:	609a      	str	r2, [r3, #8]
    7414:	4770      	bx	lr
    7416:	bf00      	nop
    7418:	10001511 	.word	0x10001511
    741c:	e000e100 	.word	0xe000e100
    7420:	400280ac 	.word	0x400280ac

00007424 <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    7424:	4b07      	ldr	r3, [pc, #28]	; (7444 <cs_trigger_disable+0x20>)
    7426:	681a      	ldr	r2, [r3, #0]
    7428:	f022 0204 	bic.w	r2, r2, #4
    742c:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    742e:	2204      	movs	r2, #4
    7430:	f843 2c08 	str.w	r2, [r3, #-8]
	ICER0 = ICER0_ICE_EINT3;
    7434:	4b04      	ldr	r3, [pc, #16]	; (7448 <cs_trigger_disable+0x24>)
    7436:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    743a:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    743c:	4b03      	ldr	r3, [pc, #12]	; (744c <cs_trigger_disable+0x28>)
    743e:	2200      	movs	r2, #0
    7440:	701a      	strb	r2, [r3, #0]
    7442:	4770      	bx	lr
    7444:	400280b4 	.word	0x400280b4
    7448:	e000e180 	.word	0xe000e180
    744c:	10001511 	.word	0x10001511

00007450 <cs_reset>:
}

void cs_reset(void)
{
    7450:	b508      	push	{r3, lr}
	cs_trigger_disable();
    7452:	f7ff ffe7 	bl	7424 <cs_trigger_disable>

	cs_no_squelch = 0;
    7456:	4b04      	ldr	r3, [pc, #16]	; (7468 <cs_reset+0x18>)
    7458:	2200      	movs	r2, #0
    745a:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    745c:	4a03      	ldr	r2, [pc, #12]	; (746c <cs_reset+0x1c>)
    745e:	2388      	movs	r3, #136	; 0x88
    7460:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    7462:	4a03      	ldr	r2, [pc, #12]	; (7470 <cs_reset+0x20>)
    7464:	7013      	strb	r3, [r2, #0]
    7466:	bd08      	pop	{r3, pc}
    7468:	10001160 	.word	0x10001160
    746c:	10001498 	.word	0x10001498
    7470:	10001510 	.word	0x10001510

00007474 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    7474:	4b0a      	ldr	r3, [pc, #40]	; (74a0 <clkn_stop+0x2c>)
    7476:	2202      	movs	r2, #2
    7478:	601a      	str	r2, [r3, #0]

	clkn = 0;
    747a:	4a0a      	ldr	r2, [pc, #40]	; (74a4 <clkn_stop+0x30>)
    747c:	2300      	movs	r3, #0
    747e:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    7480:	4a09      	ldr	r2, [pc, #36]	; (74a8 <clkn_stop+0x34>)
    7482:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    7484:	4a09      	ldr	r2, [pc, #36]	; (74ac <clkn_stop+0x38>)
    7486:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    7488:	4a09      	ldr	r2, [pc, #36]	; (74b0 <clkn_stop+0x3c>)
    748a:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    748c:	4a09      	ldr	r2, [pc, #36]	; (74b4 <clkn_stop+0x40>)
    748e:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    7490:	4a09      	ldr	r2, [pc, #36]	; (74b8 <clkn_stop+0x44>)
    7492:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    7494:	4a09      	ldr	r2, [pc, #36]	; (74bc <clkn_stop+0x48>)
    7496:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    7498:	4a09      	ldr	r2, [pc, #36]	; (74c0 <clkn_stop+0x4c>)
    749a:	6013      	str	r3, [r2, #0]
    749c:	4770      	bx	lr
    749e:	bf00      	nop
    74a0:	40004004 	.word	0x40004004
    74a4:	10001014 	.word	0x10001014
    74a8:	10000ff0 	.word	0x10000ff0
    74ac:	10001008 	.word	0x10001008
    74b0:	10001162 	.word	0x10001162
    74b4:	10001494 	.word	0x10001494
    74b8:	10001010 	.word	0x10001010
    74bc:	1000100c 	.word	0x1000100c
    74c0:	100014cc 	.word	0x100014cc

000074c4 <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    74c4:	4b01      	ldr	r3, [pc, #4]	; (74cc <clkn_start+0x8>)
    74c6:	2201      	movs	r2, #1
    74c8:	601a      	str	r2, [r3, #0]
    74ca:	4770      	bx	lr
    74cc:	40004004 	.word	0x40004004

000074d0 <clkn_init>:
}

void clkn_init()
{
    74d0:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    74d2:	f7ff ffcf 	bl	7474 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    74d6:	4b06      	ldr	r3, [pc, #24]	; (74f0 <clkn_init+0x20>)
    74d8:	2204      	movs	r2, #4
    74da:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    74dc:	f502 6243 	add.w	r2, r2, #3120	; 0xc30
    74e0:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    74e2:	2203      	movs	r2, #3
    74e4:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    74e6:	4b03      	ldr	r3, [pc, #12]	; (74f4 <clkn_init+0x24>)
    74e8:	2202      	movs	r2, #2
    74ea:	601a      	str	r2, [r3, #0]
    74ec:	bd08      	pop	{r3, pc}
    74ee:	bf00      	nop
    74f0:	4000400c 	.word	0x4000400c
    74f4:	e000e100 	.word	0xe000e100

000074f8 <dma_disable>:
{
	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    74f8:	4b15      	ldr	r3, [pc, #84]	; (7550 <dma_disable+0x58>)
    74fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    74fe:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    7500:	4a14      	ldr	r2, [pc, #80]	; (7554 <dma_disable+0x5c>)
    7502:	2300      	movs	r3, #0
    7504:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    7506:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    7508:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    750a:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    750c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    7510:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    7514:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    7518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    751c:	23ff      	movs	r3, #255	; 0xff
    751e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    7522:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    7524:	6093      	str	r3, [r2, #8]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    7526:	4b0c      	ldr	r3, [pc, #48]	; (7558 <dma_disable+0x60>)
    7528:	681a      	ldr	r2, [r3, #0]
    752a:	f022 0201 	bic.w	r2, r2, #1
    752e:	601a      	str	r2, [r3, #0]
	while (DMACConfig & DMACConfig_E);
    7530:	681a      	ldr	r2, [r3, #0]
    7532:	f012 0201 	ands.w	r2, r2, #1
    7536:	d1fb      	bne.n	7530 <dma_disable+0x38>

	/* reset interrupt counters */
	rx_tc = 0;
    7538:	4b08      	ldr	r3, [pc, #32]	; (755c <dma_disable+0x64>)
    753a:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    753c:	4b08      	ldr	r3, [pc, #32]	; (7560 <dma_disable+0x68>)
    753e:	601a      	str	r2, [r3, #0]

	active_rxbuf = &rxbuf1[0];
    7540:	4a08      	ldr	r2, [pc, #32]	; (7564 <dma_disable+0x6c>)
    7542:	4b09      	ldr	r3, [pc, #36]	; (7568 <dma_disable+0x70>)
    7544:	601a      	str	r2, [r3, #0]
	idle_rxbuf = &rxbuf2[0];
    7546:	4a09      	ldr	r2, [pc, #36]	; (756c <dma_disable+0x74>)
    7548:	4b09      	ldr	r3, [pc, #36]	; (7570 <dma_disable+0x78>)
    754a:	601a      	str	r2, [r3, #0]
    754c:	4770      	bx	lr
    754e:	bf00      	nop
    7550:	e000e180 	.word	0xe000e180
    7554:	50004110 	.word	0x50004110
    7558:	50004030 	.word	0x50004030
    755c:	10000ff4 	.word	0x10000ff4
    7560:	1000150c 	.word	0x1000150c
    7564:	100014d9 	.word	0x100014d9
    7568:	10001054 	.word	0x10001054
    756c:	10001499 	.word	0x10001499
    7570:	10001170 	.word	0x10001170

00007574 <dma_init>:
}

void dma_init()
{
    7574:	b508      	push	{r3, lr}
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    7576:	4b14      	ldr	r3, [pc, #80]	; (75c8 <dma_init+0x54>)
    7578:	681a      	ldr	r2, [r3, #0]
    757a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    757e:	601a      	str	r2, [r3, #0]

	dma_disable();
    7580:	f7ff ffba 	bl	74f8 <dma_disable>

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7584:	4b11      	ldr	r3, [pc, #68]	; (75cc <dma_init+0x58>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7586:	4a12      	ldr	r2, [pc, #72]	; (75d0 <dma_init+0x5c>)
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7588:	4812      	ldr	r0, [pc, #72]	; (75d4 <dma_init+0x60>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    758a:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    758c:	4a12      	ldr	r2, [pc, #72]	; (75d8 <dma_init+0x64>)
	rx_dma_lli1.control = (DMA_SIZE) |
    758e:	4913      	ldr	r1, [pc, #76]	; (75dc <dma_init+0x68>)
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    7590:	6010      	str	r0, [r2, #0]
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7592:	6018      	str	r0, [r3, #0]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7594:	4812      	ldr	r0, [pc, #72]	; (75e0 <dma_init+0x6c>)
	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7596:	609a      	str	r2, [r3, #8]
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
    7598:	60d1      	str	r1, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    759a:	6050      	str	r0, [r2, #4]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    759c:	6093      	str	r3, [r2, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    759e:	4a11      	ldr	r2, [pc, #68]	; (75e4 <dma_init+0x70>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    75a0:	60d9      	str	r1, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    75a2:	2101      	movs	r1, #1
    75a4:	6011      	str	r1, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
    75a6:	6811      	ldr	r1, [r2, #0]
    75a8:	07c9      	lsls	r1, r1, #31
    75aa:	d5fc      	bpl.n	75a6 <dma_init+0x32>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    75ac:	681a      	ldr	r2, [r3, #0]
    75ae:	490e      	ldr	r1, [pc, #56]	; (75e8 <dma_init+0x74>)
    75b0:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    75b2:	685a      	ldr	r2, [r3, #4]
    75b4:	604a      	str	r2, [r1, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    75b6:	689a      	ldr	r2, [r3, #8]
    75b8:	608a      	str	r2, [r1, #8]
	DMACC0Control = rx_dma_lli1.control;
    75ba:	68da      	ldr	r2, [r3, #12]
    75bc:	4b0b      	ldr	r3, [pc, #44]	; (75ec <dma_init+0x78>)
    75be:	601a      	str	r2, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    75c0:	f24d 0206 	movw	r2, #53254	; 0xd006
    75c4:	605a      	str	r2, [r3, #4]
    75c6:	bd08      	pop	{r3, pc}
    75c8:	400fc0c4 	.word	0x400fc0c4
    75cc:	1000379c 	.word	0x1000379c
    75d0:	100014d9 	.word	0x100014d9
    75d4:	40030008 	.word	0x40030008
    75d8:	1000378c 	.word	0x1000378c
    75dc:	88009032 	.word	0x88009032
    75e0:	10001499 	.word	0x10001499
    75e4:	50004030 	.word	0x50004030
    75e8:	50004100 	.word	0x50004100
    75ec:	5000410c 	.word	0x5000410c

000075f0 <dma_init_le>:
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */
}

void dma_init_le()
{
    75f0:	b508      	push	{r3, lr}
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    75f2:	4b1a      	ldr	r3, [pc, #104]	; (765c <dma_init_le+0x6c>)
    75f4:	681a      	ldr	r2, [r3, #0]
    75f6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    75fa:	601a      	str	r2, [r3, #0]

	dma_disable();
    75fc:	f7ff ff7c 	bl	74f8 <dma_disable>

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7600:	4b17      	ldr	r3, [pc, #92]	; (7660 <dma_init_le+0x70>)
    7602:	2201      	movs	r2, #1
    7604:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    7606:	681a      	ldr	r2, [r3, #0]
    7608:	07d0      	lsls	r0, r2, #31
    760a:	d5fc      	bpl.n	7606 <dma_init_le+0x16>
    760c:	4b15      	ldr	r3, [pc, #84]	; (7664 <dma_init_le+0x74>)
    760e:	2200      	movs	r2, #0

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7610:	4915      	ldr	r1, [pc, #84]	; (7668 <dma_init_le+0x78>)
    7612:	f843 1c10 	str.w	r1, [r3, #-16]
    7616:	4915      	ldr	r1, [pc, #84]	; (766c <dma_init_le+0x7c>)
    7618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    761c:	f843 1c0c 	str.w	r1, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7620:	2a0a      	cmp	r2, #10
    7622:	bf14      	ite	ne
    7624:	4619      	movne	r1, r3
    7626:	2100      	moveq	r1, #0
    7628:	f843 1c08 	str.w	r1, [r3, #-8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    762c:	3201      	adds	r2, #1
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    762e:	4910      	ldr	r1, [pc, #64]	; (7670 <dma_init_le+0x80>)

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7630:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7632:	f843 1c04 	str.w	r1, [r3, #-4]
    7636:	f103 0310 	add.w	r3, r3, #16

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    763a:	d1e9      	bne.n	7610 <dma_init_le+0x20>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    763c:	4b0d      	ldr	r3, [pc, #52]	; (7674 <dma_init_le+0x84>)
    763e:	490e      	ldr	r1, [pc, #56]	; (7678 <dma_init_le+0x88>)
    7640:	681a      	ldr	r2, [r3, #0]
    7642:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7644:	685a      	ldr	r2, [r3, #4]
    7646:	604a      	str	r2, [r1, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7648:	689a      	ldr	r2, [r3, #8]
    764a:	608a      	str	r2, [r1, #8]
	DMACC0Control = le_dma_lli[0].control;
    764c:	68da      	ldr	r2, [r3, #12]
    764e:	4b0b      	ldr	r3, [pc, #44]	; (767c <dma_init_le+0x8c>)
    7650:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    7652:	f24d 0206 	movw	r2, #53254	; 0xd006
    7656:	605a      	str	r2, [r3, #4]
    7658:	bd08      	pop	{r3, pc}
    765a:	bf00      	nop
    765c:	400fc0c4 	.word	0x400fc0c4
    7660:	50004030 	.word	0x50004030
    7664:	100036ec 	.word	0x100036ec
    7668:	40030008 	.word	0x40030008
    766c:	100014d9 	.word	0x100014d9
    7670:	88001004 	.word	0x88001004
    7674:	100036dc 	.word	0x100036dc
    7678:	50004100 	.word	0x50004100
    767c:	5000410c 	.word	0x5000410c

00007680 <dio_ssp_start>:


void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    7680:	4a0d      	ldr	r2, [pc, #52]	; (76b8 <dio_ssp_start+0x38>)
    7682:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7686:	6013      	str	r3, [r2, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7688:	4a0c      	ldr	r2, [pc, #48]	; (76bc <dio_ssp_start+0x3c>)
    768a:	6811      	ldr	r1, [r2, #0]
    768c:	f041 0101 	orr.w	r1, r1, #1
    7690:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7692:	f852 1c20 	ldr.w	r1, [r2, #-32]
    7696:	f041 0102 	orr.w	r1, r1, #2
    769a:	f842 1c20 	str.w	r1, [r2, #-32]


static void dma_enable(void)
{
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    769e:	4a08      	ldr	r2, [pc, #32]	; (76c0 <dio_ssp_start+0x40>)
    76a0:	6811      	ldr	r1, [r2, #0]
    76a2:	f041 0101 	orr.w	r1, r1, #1
    76a6:	6011      	str	r1, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    76a8:	4a06      	ldr	r2, [pc, #24]	; (76c4 <dio_ssp_start+0x44>)
    76aa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    76ae:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;

	dma_enable();

	/* activate slave select pin */
	DIO_SSEL_CLR;
    76b0:	4a05      	ldr	r2, [pc, #20]	; (76c8 <dio_ssp_start+0x48>)
    76b2:	6013      	str	r3, [r2, #0]
    76b4:	4770      	bx	lr
    76b6:	bf00      	nop
    76b8:	2009c098 	.word	0x2009c098
    76bc:	40030024 	.word	0x40030024
    76c0:	50004110 	.word	0x50004110
    76c4:	e000e100 	.word	0xe000e100
    76c8:	2009c09c 	.word	0x2009c09c

000076cc <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    76cc:	4b08      	ldr	r3, [pc, #32]	; (76f0 <dio_ssp_stop+0x24>)
    76ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    76d2:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    76d4:	4b07      	ldr	r3, [pc, #28]	; (76f4 <dio_ssp_stop+0x28>)
    76d6:	681a      	ldr	r2, [r3, #0]
    76d8:	f022 0201 	bic.w	r2, r2, #1
    76dc:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    76de:	f853 2c20 	ldr.w	r2, [r3, #-32]
    76e2:	f022 0202 	bic.w	r2, r2, #2
    76e6:	f843 2c20 	str.w	r2, [r3, #-32]

	dma_disable();
    76ea:	f7ff bf05 	b.w	74f8 <dma_disable>
    76ee:	bf00      	nop
    76f0:	2009c098 	.word	0x2009c098
    76f4:	40030024 	.word	0x40030024

000076f8 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    76f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    76fc:	b096      	sub	sp, #88	; 0x58
    76fe:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    7700:	2315      	movs	r3, #21
    7702:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	txbuf[1] = 0; // request
    7706:	2300      	movs	r3, #0
    7708:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    770c:	4681      	mov	r9, r0

	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
    770e:	233a      	movs	r3, #58	; 0x3a
    7710:	f107 0058 	add.w	r0, r7, #88	; 0x58
    7714:	f840 3d58 	str.w	r3, [r0, #-88]!
	iap_entry(command, result);
    7718:	4b94      	ldr	r3, [pc, #592]	; (796c <cc2400_rangetest+0x274>)
    771a:	4638      	mov	r0, r7
    771c:	f107 0114 	add.w	r1, r7, #20
    7720:	681b      	ldr	r3, [r3, #0]
    7722:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    7724:	7d3a      	ldrb	r2, [r7, #20]
    7726:	46ea      	mov	sl, sp
    7728:	2a00      	cmp	r2, #0
    772a:	f040 811b 	bne.w	7964 <cc2400_rangetest+0x26c>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    772e:	69bb      	ldr	r3, [r7, #24]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7730:	2012      	movs	r0, #18
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    7732:	0e19      	lsrs	r1, r3, #24
    7734:	f887 1042 	strb.w	r1, [r7, #66]	; 0x42
	txbuf[3] = (result[1] >> 16) & 0xFF;
    7738:	0c19      	lsrs	r1, r3, #16
    773a:	f887 1043 	strb.w	r1, [r7, #67]	; 0x43
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
    773e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    7742:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    7744:	69fb      	ldr	r3, [r7, #28]
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    7746:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    774a:	0e19      	lsrs	r1, r3, #24
    774c:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	txbuf[7] = (result[2] >> 16) & 0xFF;
    7750:	0c19      	lsrs	r1, r3, #16
    7752:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
    7756:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    775a:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    775c:	6a3b      	ldr	r3, [r7, #32]
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    775e:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    7762:	0e19      	lsrs	r1, r3, #24
    7764:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[11] = (result[3] >> 16) & 0xFF;
    7768:	0c19      	lsrs	r1, r3, #16
    776a:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
    776e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    7772:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    7774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    7776:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    777a:	0e19      	lsrs	r1, r3, #24
    777c:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[15] = (result[4] >> 16) & 0xFF;
    7780:	0c19      	lsrs	r1, r3, #16
    7782:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[16] = (result[4] >> 8) & 0xFF;
    7786:	0a19      	lsrs	r1, r3, #8
    7788:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[17] = result[4] & 0xFF;
    778c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7790:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
    7794:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
    7796:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
	txbuf[19] = 0; // request number
    779a:	f887 2053 	strb.w	r2, [r7, #83]	; 0x53
	txbuf[20] = 0xff; // reply pa
    779e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	txbuf[21] = 0xff; // reply number
    77a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    77a6:	f000 fd78 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    77aa:	2014      	movs	r0, #20
    77ac:	f241 314b 	movw	r1, #4939	; 0x134b
    77b0:	f000 fd73 	bl	829a <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    77b4:	2020      	movs	r0, #32
    77b6:	f640 51f1 	movw	r1, #3569	; 0xdf1
    77ba:	f000 fd6e 	bl	829a <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    77be:	f8b9 1000 	ldrh.w	r1, [r9]
    77c2:	2002      	movs	r0, #2
    77c4:	b289      	uxth	r1, r1
    77c6:	f000 fd68 	bl	829a <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    77ca:	202d      	movs	r0, #45	; 0x2d
    77cc:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    77d0:	f000 fd63 	bl	829a <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    77d4:	202c      	movs	r0, #44	; 0x2c
    77d6:	f241 5184 	movw	r1, #5508	; 0x1584
    77da:	f000 fd5e 	bl	829a <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    77de:	2005      	movs	r0, #5
    77e0:	2108      	movs	r1, #8
    77e2:	f000 fd5a 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    77e6:	2003      	movs	r0, #3
    77e8:	2129      	movs	r1, #41	; 0x29
    77ea:	f000 fd56 	bl	829a <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    77ee:	f000 fdf7 	bl	83e0 <cc2400_status>
    77f2:	0646      	lsls	r6, r0, #25
    77f4:	d5fb      	bpl.n	77ee <cc2400_rangetest+0xf6>
	cc2400_strobe(SFSON);
    77f6:	2061      	movs	r0, #97	; 0x61
    77f8:	f000 fdf9 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    77fc:	f000 fdf0 	bl	83e0 <cc2400_status>
    7800:	0745      	lsls	r5, r0, #29
    7802:	d5fb      	bpl.n	77fc <cc2400_rangetest+0x104>
	TXLED_SET;
    7804:	4b5a      	ldr	r3, [pc, #360]	; (7970 <cc2400_rangetest+0x278>)
    7806:	f44f 7280 	mov.w	r2, #256	; 0x100
    780a:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    780c:	2280      	movs	r2, #128	; 0x80
    780e:	621a      	str	r2, [r3, #32]
#endif
	for (pa = 0; pa < 8; pa++) {
    7810:	2400      	movs	r4, #0
		cc2400_set(FREND, 8 | pa);
    7812:	2005      	movs	r0, #5
    7814:	f044 0108 	orr.w	r1, r4, #8
    7818:	f000 fd3f 	bl	829a <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    781c:	2500      	movs	r5, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
    781e:	f887 4052 	strb.w	r4, [r7, #82]	; 0x52
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
    7822:	f887 5053 	strb.w	r5, [r7, #83]	; 0x53
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7826:	200e      	movs	r0, #14
    7828:	f000 fd2e 	bl	8288 <cc2400_get>
    782c:	f000 001f 	and.w	r0, r0, #31
    7830:	280f      	cmp	r0, #15
    7832:	d1f8      	bne.n	7826 <cc2400_rangetest+0x12e>
    7834:	2600      	movs	r6, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    7836:	f107 0840 	add.w	r8, r7, #64	; 0x40
    783a:	f818 1006 	ldrb.w	r1, [r8, r6]
    783e:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7840:	3601      	adds	r6, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    7842:	f000 fd38 	bl	82b6 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7846:	2e16      	cmp	r6, #22
    7848:	d1f5      	bne.n	7836 <cc2400_rangetest+0x13e>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    784a:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    784c:	3501      	adds	r5, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    784e:	f000 fdce 	bl	83ee <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7852:	2d10      	cmp	r5, #16
    7854:	d1e5      	bne.n	7822 <cc2400_rangetest+0x12a>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    7856:	3401      	adds	r4, #1
    7858:	b2e4      	uxtb	r4, r4
    785a:	2c08      	cmp	r4, #8
    785c:	d1d9      	bne.n	7812 <cc2400_rangetest+0x11a>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    785e:	200e      	movs	r0, #14
    7860:	f000 fd12 	bl	8288 <cc2400_get>
    7864:	f000 001f 	and.w	r0, r0, #31
    7868:	280f      	cmp	r0, #15
    786a:	d1f8      	bne.n	785e <cc2400_rangetest+0x166>
	TXLED_CLR;
    786c:	4b41      	ldr	r3, [pc, #260]	; (7974 <cc2400_rangetest+0x27c>)
    786e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7872:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    7874:	2064      	movs	r0, #100	; 0x64
    7876:	f000 fdba 	bl	83ee <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    787a:	f000 fdb1 	bl	83e0 <cc2400_status>
    787e:	0744      	lsls	r4, r0, #29
    7880:	d4fb      	bmi.n	787a <cc2400_rangetest+0x182>
	cc2400_set(FSDIV, *chan_ptr - 1);
    7882:	f8b9 1000 	ldrh.w	r1, [r9]
    7886:	2002      	movs	r0, #2
    7888:	b289      	uxth	r1, r1
    788a:	3901      	subs	r1, #1
    788c:	b289      	uxth	r1, r1
    788e:	f000 fd04 	bl	829a <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7892:	f000 fda5 	bl	83e0 <cc2400_status>
    7896:	0640      	lsls	r0, r0, #25
    7898:	d5fb      	bpl.n	7892 <cc2400_rangetest+0x19a>
	cc2400_strobe(SFSON);
    789a:	2061      	movs	r0, #97	; 0x61
    789c:	f000 fda7 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    78a0:	f000 fd9e 	bl	83e0 <cc2400_status>
    78a4:	0741      	lsls	r1, r0, #29
    78a6:	d5fb      	bpl.n	78a0 <cc2400_rangetest+0x1a8>
	RXLED_SET;
    78a8:	4b31      	ldr	r3, [pc, #196]	; (7970 <cc2400_rangetest+0x278>)
    78aa:	2210      	movs	r2, #16
    78ac:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    78ae:	200e      	movs	r0, #14
    78b0:	f000 fcea 	bl	8288 <cc2400_get>
    78b4:	f000 001f 	and.w	r0, r0, #31
    78b8:	280f      	cmp	r0, #15
    78ba:	d1f8      	bne.n	78ae <cc2400_rangetest+0x1b6>
		cc2400_strobe(SRX);
    78bc:	2062      	movs	r0, #98	; 0x62
    78be:	f000 fd96 	bl	83ee <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    78c2:	f000 fd8d 	bl	83e0 <cc2400_status>
    78c6:	06c2      	lsls	r2, r0, #27
    78c8:	d5fb      	bpl.n	78c2 <cc2400_rangetest+0x1ca>
		USRLED_SET;
    78ca:	4b29      	ldr	r3, [pc, #164]	; (7970 <cc2400_rangetest+0x278>)
    78cc:	2202      	movs	r2, #2
    78ce:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    78d0:	2400      	movs	r4, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
    78d2:	2070      	movs	r0, #112	; 0x70
    78d4:	f000 fce6 	bl	82a4 <cc2400_get8>
    78d8:	f107 0528 	add.w	r5, r7, #40	; 0x28
    78dc:	5528      	strb	r0, [r5, r4]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    78de:	3401      	adds	r4, #1
    78e0:	2c16      	cmp	r4, #22
    78e2:	d1f6      	bne.n	78d2 <cc2400_rangetest+0x1da>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    78e4:	f000 fd7c 	bl	83e0 <cc2400_status>
    78e8:	0703      	lsls	r3, r0, #28
    78ea:	d402      	bmi.n	78f2 <cc2400_rangetest+0x1fa>
			break;
		USRLED_CLR;
    78ec:	2202      	movs	r2, #2
    78ee:	4b21      	ldr	r3, [pc, #132]	; (7974 <cc2400_rangetest+0x27c>)
    78f0:	e7dc      	b.n	78ac <cc2400_rangetest+0x1b4>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    78f2:	200e      	movs	r0, #14
    78f4:	f000 fcc8 	bl	8288 <cc2400_get>
    78f8:	f000 001f 	and.w	r0, r0, #31
    78fc:	280f      	cmp	r0, #15
    78fe:	d1f8      	bne.n	78f2 <cc2400_rangetest+0x1fa>
	cc2400_strobe(SRFOFF);
    7900:	2064      	movs	r0, #100	; 0x64
    7902:	f000 fd74 	bl	83ee <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7906:	f000 fd6b 	bl	83e0 <cc2400_status>
    790a:	f000 0004 	and.w	r0, r0, #4
    790e:	f000 03ff 	and.w	r3, r0, #255	; 0xff
    7912:	2800      	cmp	r0, #0
    7914:	d1f7      	bne.n	7906 <cc2400_rangetest+0x20e>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    7916:	4a18      	ldr	r2, [pc, #96]	; (7978 <cc2400_rangetest+0x280>)
    7918:	2180      	movs	r1, #128	; 0x80
    791a:	6011      	str	r1, [r2, #0]
#endif
	RXLED_CLR;
    791c:	2110      	movs	r1, #16
    791e:	f842 1c20 	str.w	r1, [r2, #-32]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    7922:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
    7926:	4a15      	ldr	r2, [pc, #84]	; (797c <cc2400_rangetest+0x284>)
    7928:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
    792a:	7050      	strb	r0, [r2, #1]
	rr.request_num = rxbuf[19];
    792c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    7930:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
    7934:	7090      	strb	r0, [r2, #2]
	rr.reply_pa    = rxbuf[20];
    7936:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
    793a:	70d0      	strb	r0, [r2, #3]
	rr.reply_num   = rxbuf[21];
    793c:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    7940:	7110      	strb	r0, [r2, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
    7942:	5cec      	ldrb	r4, [r5, r3]
    7944:	f818 0003 	ldrb.w	r0, [r8, r3]
    7948:	4284      	cmp	r4, r0
    794a:	bf18      	it	ne
    794c:	1c99      	addne	r1, r3, #2
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    794e:	f103 0301 	add.w	r3, r3, #1
    7952:	bf18      	it	ne
    7954:	b2c9      	uxtbne	r1, r1
    7956:	2b12      	cmp	r3, #18
    7958:	d1f3      	bne.n	7942 <cc2400_rangetest+0x24a>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    795a:	4b06      	ldr	r3, [pc, #24]	; (7974 <cc2400_rangetest+0x27c>)
    795c:	7011      	strb	r1, [r2, #0]
    795e:	2202      	movs	r2, #2
    7960:	601a      	str	r2, [r3, #0]
    7962:	46d5      	mov	sp, sl
#endif
}
    7964:	3758      	adds	r7, #88	; 0x58
    7966:	46bd      	mov	sp, r7
    7968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    796c:	0000a108 	.word	0x0000a108
    7970:	2009c038 	.word	0x2009c038
    7974:	2009c03c 	.word	0x2009c03c
    7978:	2009c05c 	.word	0x2009c05c
    797c:	100014d4 	.word	0x100014d4

00007980 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    7980:	b5f0      	push	{r4, r5, r6, r7, lr}
    7982:	b087      	sub	sp, #28
    7984:	4607      	mov	r7, r0
	u8 pa = 0;
	u8 buf[len];

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    7986:	2012      	movs	r0, #18
    7988:	f642 3122 	movw	r1, #11042	; 0x2b22
    798c:	f000 fc85 	bl	829a <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    7990:	2014      	movs	r0, #20
    7992:	f241 314b 	movw	r1, #4939	; 0x134b
    7996:	f000 fc80 	bl	829a <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    799a:	8839      	ldrh	r1, [r7, #0]
    799c:	2002      	movs	r0, #2
    799e:	b289      	uxth	r1, r1
    79a0:	3901      	subs	r1, #1
    79a2:	b289      	uxth	r1, r1
    79a4:	f000 fc79 	bl	829a <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    79a8:	202d      	movs	r0, #45	; 0x2d
    79aa:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    79ae:	f000 fc74 	bl	829a <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    79b2:	202c      	movs	r0, #44	; 0x2c
    79b4:	f241 5184 	movw	r1, #5508	; 0x1584
    79b8:	f000 fc6f 	bl	829a <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    79bc:	2005      	movs	r0, #5
    79be:	2108      	movs	r1, #8
    79c0:	f000 fc6b 	bl	829a <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    79c4:	2003      	movs	r0, #3
    79c6:	2129      	movs	r1, #41	; 0x29
    79c8:	f000 fc67 	bl	829a <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    79cc:	f000 fd08 	bl	83e0 <cc2400_status>
    79d0:	0643      	lsls	r3, r0, #25
    79d2:	d5fb      	bpl.n	79cc <cc2400_repeater+0x4c>
		cc2400_strobe(SFSON);
    79d4:	2061      	movs	r0, #97	; 0x61
    79d6:	f000 fd0a 	bl	83ee <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    79da:	f000 fd01 	bl	83e0 <cc2400_status>
    79de:	0746      	lsls	r6, r0, #29
    79e0:	d5fb      	bpl.n	79da <cc2400_repeater+0x5a>
		RXLED_SET;
    79e2:	4b41      	ldr	r3, [pc, #260]	; (7ae8 <cc2400_repeater+0x168>)
    79e4:	2210      	movs	r2, #16
    79e6:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    79e8:	f44f 7280 	mov.w	r2, #256	; 0x100
    79ec:	605a      	str	r2, [r3, #4]
		USRLED_CLR;
    79ee:	2202      	movs	r2, #2
    79f0:	605a      	str	r2, [r3, #4]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    79f2:	2280      	movs	r2, #128	; 0x80
    79f4:	621a      	str	r2, [r3, #32]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    79f6:	200e      	movs	r0, #14
    79f8:	f000 fc46 	bl	8288 <cc2400_get>
    79fc:	f000 001f 	and.w	r0, r0, #31
    7a00:	280f      	cmp	r0, #15
    7a02:	d1f8      	bne.n	79f6 <cc2400_repeater+0x76>
			USRLED_CLR;
    7a04:	4b39      	ldr	r3, [pc, #228]	; (7aec <cc2400_repeater+0x16c>)
    7a06:	2202      	movs	r2, #2
    7a08:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    7a0a:	2062      	movs	r0, #98	; 0x62
    7a0c:	f000 fcef 	bl	83ee <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    7a10:	f000 fce6 	bl	83e0 <cc2400_status>
    7a14:	06c5      	lsls	r5, r0, #27
    7a16:	d5fb      	bpl.n	7a10 <cc2400_repeater+0x90>
			USRLED_SET;
    7a18:	4b33      	ldr	r3, [pc, #204]	; (7ae8 <cc2400_repeater+0x168>)
    7a1a:	2202      	movs	r2, #2
    7a1c:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    7a1e:	2400      	movs	r4, #0
				buf[i] = cc2400_get8(FIFOREG);
    7a20:	2070      	movs	r0, #112	; 0x70
    7a22:	f000 fc3f 	bl	82a4 <cc2400_get8>
    7a26:	f80d 0004 	strb.w	r0, [sp, r4]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    7a2a:	3401      	adds	r4, #1
    7a2c:	2c16      	cmp	r4, #22
    7a2e:	d1f7      	bne.n	7a20 <cc2400_repeater+0xa0>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    7a30:	f000 fcd6 	bl	83e0 <cc2400_status>
    7a34:	0704      	lsls	r4, r0, #28
    7a36:	d5de      	bpl.n	79f6 <cc2400_repeater+0x76>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
    7a38:	4b2c      	ldr	r3, [pc, #176]	; (7aec <cc2400_repeater+0x16c>)
    7a3a:	2202      	movs	r2, #2
    7a3c:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    7a3e:	2210      	movs	r2, #16
    7a40:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    7a42:	2064      	movs	r0, #100	; 0x64
    7a44:	f000 fcd3 	bl	83ee <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7a48:	f000 fcca 	bl	83e0 <cc2400_status>
    7a4c:	0740      	lsls	r0, r0, #29
    7a4e:	d4fb      	bmi.n	7a48 <cc2400_repeater+0xc8>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7a50:	f000 fcc6 	bl	83e0 <cc2400_status>
    7a54:	0641      	lsls	r1, r0, #25
    7a56:	d5fb      	bpl.n	7a50 <cc2400_repeater+0xd0>
		cc2400_set(FSDIV, *chan_ptr);
    7a58:	8839      	ldrh	r1, [r7, #0]
    7a5a:	2002      	movs	r0, #2
    7a5c:	b289      	uxth	r1, r1
    7a5e:	f000 fc1c 	bl	829a <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7a62:	f000 fcbd 	bl	83e0 <cc2400_status>
    7a66:	0642      	lsls	r2, r0, #25
    7a68:	d5fb      	bpl.n	7a62 <cc2400_repeater+0xe2>
		cc2400_strobe(SFSON);
    7a6a:	2061      	movs	r0, #97	; 0x61
    7a6c:	f000 fcbf 	bl	83ee <cc2400_strobe>
		TXLED_SET;
    7a70:	4b1d      	ldr	r3, [pc, #116]	; (7ae8 <cc2400_repeater+0x168>)
    7a72:	f44f 7280 	mov.w	r2, #256	; 0x100
    7a76:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    7a78:	2315      	movs	r3, #21
    7a7a:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    7a7e:	2301      	movs	r3, #1
    7a80:	f88d 3001 	strb.w	r3, [sp, #1]
		for (pa = 0; pa < 8; pa++) {
    7a84:	2400      	movs	r4, #0
			cc2400_set(FREND, 8 | pa);
    7a86:	2005      	movs	r0, #5
    7a88:	f044 0108 	orr.w	r1, r4, #8
    7a8c:	f000 fc05 	bl	829a <cc2400_set>
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7a90:	2500      	movs	r5, #0
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
    7a92:	f88d 4014 	strb.w	r4, [sp, #20]
			for (i = 0; i < 16; i++) {
				buf[21] = i;
    7a96:	f88d 5015 	strb.w	r5, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7a9a:	200e      	movs	r0, #14
    7a9c:	f000 fbf4 	bl	8288 <cc2400_get>
    7aa0:	f000 001f 	and.w	r0, r0, #31
    7aa4:	280f      	cmp	r0, #15
    7aa6:	d1f8      	bne.n	7a9a <cc2400_repeater+0x11a>
    7aa8:	2600      	movs	r6, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    7aaa:	f81d 1006 	ldrb.w	r1, [sp, r6]
    7aae:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7ab0:	3601      	adds	r6, #1
					cc2400_set8(FIFOREG, buf[j]);
    7ab2:	f000 fc00 	bl	82b6 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7ab6:	2e16      	cmp	r6, #22
    7ab8:	d1f7      	bne.n	7aaa <cc2400_repeater+0x12a>
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    7aba:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7abc:	3501      	adds	r5, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    7abe:	f000 fc96 	bl	83ee <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7ac2:	2d10      	cmp	r5, #16
    7ac4:	d1e7      	bne.n	7a96 <cc2400_repeater+0x116>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    7ac6:	3401      	adds	r4, #1
    7ac8:	b2e4      	uxtb	r4, r4
    7aca:	2c08      	cmp	r4, #8
    7acc:	d1db      	bne.n	7a86 <cc2400_repeater+0x106>
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    7ace:	4b07      	ldr	r3, [pc, #28]	; (7aec <cc2400_repeater+0x16c>)
    7ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ad4:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    7ad6:	2064      	movs	r0, #100	; 0x64
    7ad8:	f000 fc89 	bl	83ee <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7adc:	f000 fc80 	bl	83e0 <cc2400_status>
    7ae0:	0743      	lsls	r3, r0, #29
    7ae2:	d4fb      	bmi.n	7adc <cc2400_repeater+0x15c>
    7ae4:	e74f      	b.n	7986 <cc2400_repeater+0x6>
    7ae6:	bf00      	nop
    7ae8:	2009c038 	.word	0x2009c038
    7aec:	2009c03c 	.word	0x2009c03c

00007af0 <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    7af0:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    7af2:	7803      	ldrb	r3, [r0, #0]
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    7af4:	460d      	mov	r5, r1
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    7af6:	b123      	cbz	r3, 7b02 <cc2400_txtest+0x12>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    7af8:	7803      	ldrb	r3, [r0, #0]
    7afa:	2b01      	cmp	r3, #1
    7afc:	d12f      	bne.n	7b5e <cc2400_txtest+0x6e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    7afe:	2440      	movs	r4, #64	; 0x40
    7b00:	e000      	b.n	7b04 <cc2400_txtest+0x14>
void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    7b02:	2429      	movs	r4, #41	; 0x29
		mdmctrl = 0x0040; // 250 kHz frequency deviation
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    7b04:	2012      	movs	r0, #18
    7b06:	f642 3122 	movw	r1, #11042	; 0x2b22
    7b0a:	f000 fbc6 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    7b0e:	2014      	movs	r0, #20
    7b10:	f243 314b 	movw	r1, #13131	; 0x334b
    7b14:	f000 fbc1 	bl	829a <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    7b18:	2020      	movs	r0, #32
    7b1a:	f640 51f1 	movw	r1, #3569	; 0xdf1
    7b1e:	f000 fbbc 	bl	829a <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    7b22:	8829      	ldrh	r1, [r5, #0]
    7b24:	2002      	movs	r0, #2
    7b26:	b289      	uxth	r1, r1
    7b28:	f000 fbb7 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    7b2c:	2003      	movs	r0, #3
    7b2e:	4621      	mov	r1, r4
    7b30:	f000 fbb3 	bl	829a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7b34:	f000 fc54 	bl	83e0 <cc2400_status>
    7b38:	0641      	lsls	r1, r0, #25
    7b3a:	d5fb      	bpl.n	7b34 <cc2400_txtest+0x44>
	cc2400_strobe(SFSON);
    7b3c:	2061      	movs	r0, #97	; 0x61
    7b3e:	f000 fc56 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7b42:	f000 fc4d 	bl	83e0 <cc2400_status>
    7b46:	0742      	lsls	r2, r0, #29
    7b48:	d5fb      	bpl.n	7b42 <cc2400_txtest+0x52>
	TXLED_SET;
    7b4a:	4b05      	ldr	r3, [pc, #20]	; (7b60 <cc2400_txtest+0x70>)
    7b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
    7b50:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    7b52:	2063      	movs	r0, #99	; 0x63
    7b54:	f000 fc4b 	bl	83ee <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7b58:	4b02      	ldr	r3, [pc, #8]	; (7b64 <cc2400_txtest+0x74>)
    7b5a:	2280      	movs	r2, #128	; 0x80
    7b5c:	601a      	str	r2, [r3, #0]
    7b5e:	bd38      	pop	{r3, r4, r5, pc}
    7b60:	2009c038 	.word	0x2009c038
    7b64:	2009c058 	.word	0x2009c058

00007b68 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    7b68:	4b04      	ldr	r3, [pc, #16]	; (7b7c <ssp_stop+0x14>)
    7b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7b6e:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    7b70:	4b03      	ldr	r3, [pc, #12]	; (7b80 <ssp_stop+0x18>)
    7b72:	681a      	ldr	r2, [r3, #0]
    7b74:	f022 0202 	bic.w	r2, r2, #2
    7b78:	601a      	str	r2, [r3, #0]
    7b7a:	4770      	bx	lr
    7b7c:	2009c098 	.word	0x2009c098
    7b80:	40030004 	.word	0x40030004

00007b84 <do_rx>:
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    7b84:	2300      	movs	r3, #0
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    7b86:	4a05      	ldr	r2, [pc, #20]	; (7b9c <do_rx+0x18>)
    7b88:	6812      	ldr	r2, [r2, #0]
    7b8a:	0752      	lsls	r2, r2, #29
    7b8c:	d5fb      	bpl.n	7b86 <do_rx+0x2>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    7b8e:	4a04      	ldr	r2, [pc, #16]	; (7ba0 <do_rx+0x1c>)
    7b90:	6812      	ldr	r2, [r2, #0]
    7b92:	54c2      	strb	r2, [r0, r3]
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    7b94:	3301      	adds	r3, #1
    7b96:	2b24      	cmp	r3, #36	; 0x24
    7b98:	d1f5      	bne.n	7b86 <do_rx+0x2>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    7b9a:	4770      	bx	lr
    7b9c:	4003000c 	.word	0x4003000c
    7ba0:	40030008 	.word	0x40030008

00007ba4 <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    7ba4:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    7ba6:	4b08      	ldr	r3, [pc, #32]	; (7bc8 <sleep_ms+0x24>)
    7ba8:	4a08      	ldr	r2, [pc, #32]	; (7bcc <sleep_ms+0x28>)
    7baa:	681b      	ldr	r3, [r3, #0]
    7bac:	6812      	ldr	r2, [r2, #0]
    7bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7bb2:	f640 4435 	movw	r4, #3125	; 0xc35
    7bb6:	fb04 2303 	mla	r3, r4, r3, r2
    7bba:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    7bbc:	f242 7310 	movw	r3, #10000	; 0x2710
    7bc0:	4359      	muls	r1, r3
    7bc2:	60c1      	str	r1, [r0, #12]
    7bc4:	bd10      	pop	{r4, pc}
    7bc6:	bf00      	nop
    7bc8:	10001014 	.word	0x10001014
    7bcc:	40004008 	.word	0x40004008

00007bd0 <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    7bd0:	4b0b      	ldr	r3, [pc, #44]	; (7c00 <sleep_elapsed+0x30>)
    7bd2:	4a0c      	ldr	r2, [pc, #48]	; (7c04 <sleep_elapsed+0x34>)
    7bd4:	681b      	ldr	r3, [r3, #0]
    7bd6:	6812      	ldr	r2, [r2, #0]
    7bd8:	f640 4135 	movw	r1, #3125	; 0xc35
    7bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7be0:	fb01 2303 	mla	r3, r1, r3, r2
	if (now < state->sleep_start)
    7be4:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    7be6:	68c0      	ldr	r0, [r0, #12]
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
	if (now < state->sleep_start)
    7be8:	4293      	cmp	r3, r2
		now += 3276800000;
    7bea:	bf3c      	itt	cc
    7bec:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    7bf0:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    7bf4:	1a9b      	subs	r3, r3, r2
}
    7bf6:	4283      	cmp	r3, r0
    7bf8:	bf34      	ite	cc
    7bfa:	2000      	movcc	r0, #0
    7bfc:	2001      	movcs	r0, #1
    7bfe:	4770      	bx	lr
    7c00:	10001014 	.word	0x10001014
    7c04:	40004008 	.word	0x40004008

00007c08 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    7c08:	4770      	bx	lr
    7c0a:	0000      	movs	r0, r0

00007c0c <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    7c0c:	2300      	movs	r3, #0
    7c0e:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    7c10:	4b03      	ldr	r3, [pc, #12]	; (7c20 <init_state+0x14>)
    7c12:	f640 1268 	movw	r2, #2408	; 0x968
    7c16:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    7c18:	2301      	movs	r3, #1
    7c1a:	7003      	strb	r3, [r0, #0]
    7c1c:	4770      	bx	lr
    7c1e:	bf00      	nop
    7c20:	1000044c 	.word	0x1000044c

00007c24 <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    7c24:	2301      	movs	r3, #1
    7c26:	7003      	strb	r3, [r0, #0]
    7c28:	4770      	bx	lr
    7c2a:	0000      	movs	r0, r0

00007c2c <start_rf_state>:
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    7c2c:	b510      	push	{r4, lr}
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    7c2e:	f647 71ff 	movw	r1, #32767	; 0x7fff
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    7c32:	4604      	mov	r4, r0
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    7c34:	200d      	movs	r0, #13
    7c36:	f000 fb30 	bl	829a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7c3a:	2012      	movs	r0, #18
    7c3c:	f642 3122 	movw	r1, #11042	; 0x2b22
    7c40:	f000 fb2b 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7c44:	2014      	movs	r0, #20
    7c46:	f241 314b 	movw	r1, #4939	; 0x134b
    7c4a:	f000 fb26 	bl	829a <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    7c4e:	2020      	movs	r0, #32
    7c50:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    7c54:	f000 fb21 	bl	829a <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    7c58:	4b1e      	ldr	r3, [pc, #120]	; (7cd4 <start_rf_state+0xa8>)
    7c5a:	2002      	movs	r0, #2
    7c5c:	8819      	ldrh	r1, [r3, #0]
    7c5e:	b289      	uxth	r1, r1
    7c60:	3901      	subs	r1, #1
    7c62:	b289      	uxth	r1, r1
    7c64:	f000 fb19 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    7c68:	2003      	movs	r0, #3
    7c6a:	2126      	movs	r1, #38	; 0x26
    7c6c:	f000 fb15 	bl	829a <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    7c70:	2021      	movs	r0, #33	; 0x21
    7c72:	2103      	movs	r1, #3
    7c74:	f000 fb11 	bl	829a <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    7c78:	202d      	movs	r0, #45	; 0x2d
    7c7a:	f246 310f 	movw	r1, #25359	; 0x630f
    7c7e:	f000 fb0c 	bl	829a <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    7c82:	202c      	movs	r0, #44	; 0x2c
    7c84:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    7c88:	f000 fb07 	bl	829a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7c8c:	f000 fba8 	bl	83e0 <cc2400_status>
    7c90:	0640      	lsls	r0, r0, #25
    7c92:	d5fb      	bpl.n	7c8c <start_rf_state+0x60>
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    7c94:	4a10      	ldr	r2, [pc, #64]	; (7cd8 <start_rf_state+0xac>)
    7c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7c9a:	6013      	str	r3, [r2, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7c9c:	4a0f      	ldr	r2, [pc, #60]	; (7cdc <start_rf_state+0xb0>)

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    7c9e:	2061      	movs	r0, #97	; 0x61
static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7ca0:	6811      	ldr	r1, [r2, #0]
    7ca2:	f041 0102 	orr.w	r1, r1, #2
    7ca6:	6011      	str	r1, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    7ca8:	4a0d      	ldr	r2, [pc, #52]	; (7ce0 <start_rf_state+0xb4>)
    7caa:	6013      	str	r3, [r2, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    7cac:	f000 fb9f 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7cb0:	f000 fb96 	bl	83e0 <cc2400_status>
    7cb4:	0741      	lsls	r1, r0, #29
    7cb6:	d5fb      	bpl.n	7cb0 <start_rf_state+0x84>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7cb8:	200e      	movs	r0, #14
    7cba:	f000 fae5 	bl	8288 <cc2400_get>
    7cbe:	f000 001f 	and.w	r0, r0, #31
    7cc2:	280f      	cmp	r0, #15
    7cc4:	d1f8      	bne.n	7cb8 <start_rf_state+0x8c>

	cc2400_strobe(SRX);
    7cc6:	2062      	movs	r0, #98	; 0x62
    7cc8:	f000 fb91 	bl	83ee <cc2400_strobe>
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
    7ccc:	2302      	movs	r3, #2
    7cce:	7023      	strb	r3, [r4, #0]
    7cd0:	bd10      	pop	{r4, pc}
    7cd2:	bf00      	nop
    7cd4:	1000044c 	.word	0x1000044c
    7cd8:	2009c098 	.word	0x2009c098
    7cdc:	40030004 	.word	0x40030004
    7ce0:	2009c09c 	.word	0x2009c09c

00007ce4 <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    7ce4:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    7ce6:	f647 71ff 	movw	r1, #32767	; 0x7fff
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    7cea:	4604      	mov	r4, r0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    7cec:	200d      	movs	r0, #13
    7cee:	f000 fad4 	bl	829a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7cf2:	2012      	movs	r0, #18
    7cf4:	f642 3122 	movw	r1, #11042	; 0x2b22
    7cf8:	f000 facf 	bl	829a <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    7cfc:	2014      	movs	r0, #20
    7cfe:	f243 314b 	movw	r1, #13131	; 0x334b
    7d02:	f000 faca 	bl	829a <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    7d06:	2020      	movs	r0, #32
    7d08:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    7d0c:	f000 fac5 	bl	829a <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    7d10:	4b1a      	ldr	r3, [pc, #104]	; (7d7c <start_jamming_state+0x98>)
    7d12:	2002      	movs	r0, #2
    7d14:	8819      	ldrh	r1, [r3, #0]
    7d16:	b289      	uxth	r1, r1
    7d18:	f000 fabf 	bl	829a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    7d1c:	2003      	movs	r0, #3
    7d1e:	2126      	movs	r1, #38	; 0x26
    7d20:	f000 fabb 	bl	829a <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    7d24:	2021      	movs	r0, #33	; 0x21
    7d26:	2103      	movs	r1, #3
    7d28:	f000 fab7 	bl	829a <cc2400_set>
	cc2400_set(FREND, 0xf);
    7d2c:	2005      	movs	r0, #5
    7d2e:	210f      	movs	r1, #15
    7d30:	f000 fab3 	bl	829a <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7d34:	f000 fb54 	bl	83e0 <cc2400_status>
    7d38:	0642      	lsls	r2, r0, #25
    7d3a:	d5fb      	bpl.n	7d34 <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    7d3c:	2061      	movs	r0, #97	; 0x61
    7d3e:	f000 fb56 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7d42:	f000 fb4d 	bl	83e0 <cc2400_status>
    7d46:	0743      	lsls	r3, r0, #29
    7d48:	d5fb      	bpl.n	7d42 <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7d4a:	200e      	movs	r0, #14
    7d4c:	f000 fa9c 	bl	8288 <cc2400_get>
    7d50:	f000 001f 	and.w	r0, r0, #31
    7d54:	280f      	cmp	r0, #15
    7d56:	d1f8      	bne.n	7d4a <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7d58:	4b09      	ldr	r3, [pc, #36]	; (7d80 <start_jamming_state+0x9c>)
    7d5a:	2280      	movs	r2, #128	; 0x80
    7d5c:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    7d5e:	2063      	movs	r0, #99	; 0x63
    7d60:	f000 fb45 	bl	83ee <cc2400_strobe>
	TXLED_SET;
    7d64:	4b07      	ldr	r3, [pc, #28]	; (7d84 <start_jamming_state+0xa0>)
    7d66:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d6a:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    7d6c:	2305      	movs	r3, #5
    7d6e:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7d70:	69a3      	ldr	r3, [r4, #24]
    7d72:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7d74:	f644 6320 	movw	r3, #20000	; 0x4e20
    7d78:	60e3      	str	r3, [r4, #12]
    7d7a:	bd10      	pop	{r4, pc}
    7d7c:	1000044c 	.word	0x1000044c
    7d80:	2009c058 	.word	0x2009c058
    7d84:	2009c038 	.word	0x2009c038

00007d88 <sleep_state>:
		ssp_stop();
		state->timer_active = 1;
	}
}

static void sleep_state(ego_fsm_state_t *state) {
    7d88:	b510      	push	{r4, lr}
    7d8a:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7d8c:	f7ff ff20 	bl	7bd0 <sleep_elapsed>
    7d90:	b1b0      	cbz	r0, 7dc0 <sleep_state+0x38>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7d92:	6863      	ldr	r3, [r4, #4]
    7d94:	1c5a      	adds	r2, r3, #1
    7d96:	4b0b      	ldr	r3, [pc, #44]	; (7dc4 <sleep_state+0x3c>)
    7d98:	4013      	ands	r3, r2
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	da03      	bge.n	7da6 <sleep_state+0x1e>
    7d9e:	3b01      	subs	r3, #1
    7da0:	f063 0303 	orn	r3, r3, #3
    7da4:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    7da6:	4a08      	ldr	r2, [pc, #32]	; (7dc8 <sleep_state+0x40>)
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7da8:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    7daa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    7dae:	4b07      	ldr	r3, [pc, #28]	; (7dcc <sleep_state+0x44>)

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    7db0:	4620      	mov	r0, r4
    7db2:	2107      	movs	r1, #7

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
		channel = channels[state->channel_index];
    7db4:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    7db6:	f7ff fef5 	bl	7ba4 <sleep_ms>
		state->timer_active = 1;
    7dba:	2301      	movs	r3, #1
    7dbc:	6123      	str	r3, [r4, #16]

		state->state = EGO_ST_START_RX;
    7dbe:	7023      	strb	r3, [r4, #0]
    7dc0:	bd10      	pop	{r4, pc}
    7dc2:	bf00      	nop
    7dc4:	80000003 	.word	0x80000003
    7dc8:	0000a0b4 	.word	0x0000a0b4
    7dcc:	1000044c 	.word	0x1000044c

00007dd0 <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    7dd0:	b510      	push	{r4, lr}
    7dd2:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7dd4:	f7ff fefc 	bl	7bd0 <sleep_elapsed>
    7dd8:	b130      	cbz	r0, 7de8 <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    7dda:	2301      	movs	r3, #1
    7ddc:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    7dde:	6123      	str	r3, [r4, #16]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7de0:	69a3      	ldr	r3, [r4, #24]
    7de2:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7de4:	4b01      	ldr	r3, [pc, #4]	; (7dec <jam_sleep_state+0x1c>)
    7de6:	60e3      	str	r3, [r4, #12]
    7de8:	bd10      	pop	{r4, pc}
    7dea:	bf00      	nop
    7dec:	0001adb0 	.word	0x0001adb0

00007df0 <jamming_state>:

	state->state = EGO_ST_JAMMING;
	sleep_ms_anchor(state, 2);
}

void jamming_state(ego_fsm_state_t *state) {
    7df0:	b510      	push	{r4, lr}
    7df2:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7df4:	f7ff feec 	bl	7bd0 <sleep_elapsed>
    7df8:	b300      	cbz	r0, 7e3c <jamming_state+0x4c>
		cc2400_strobe(SRFOFF);
    7dfa:	2064      	movs	r0, #100	; 0x64
    7dfc:	f000 faf7 	bl	83ee <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    7e00:	4b0f      	ldr	r3, [pc, #60]	; (7e40 <jamming_state+0x50>)
    7e02:	2280      	movs	r2, #128	; 0x80
    7e04:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    7e06:	f44f 7280 	mov.w	r2, #256	; 0x100
    7e0a:	f843 2c20 	str.w	r2, [r3, #-32]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7e0e:	6863      	ldr	r3, [r4, #4]
    7e10:	1c5a      	adds	r2, r3, #1
    7e12:	4b0c      	ldr	r3, [pc, #48]	; (7e44 <jamming_state+0x54>)
    7e14:	4013      	ands	r3, r2
    7e16:	2b00      	cmp	r3, #0
    7e18:	da03      	bge.n	7e22 <jamming_state+0x32>
    7e1a:	3b01      	subs	r3, #1
    7e1c:	f063 0303 	orn	r3, r3, #3
    7e20:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    7e22:	4a09      	ldr	r2, [pc, #36]	; (7e48 <jamming_state+0x58>)
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7e24:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    7e26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    7e2a:	4b08      	ldr	r3, [pc, #32]	; (7e4c <jamming_state+0x5c>)
    7e2c:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    7e2e:	2303      	movs	r3, #3
    7e30:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7e32:	69a3      	ldr	r3, [r4, #24]
    7e34:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7e36:	f64e 2360 	movw	r3, #60000	; 0xea60
    7e3a:	60e3      	str	r3, [r4, #12]
    7e3c:	bd10      	pop	{r4, pc}
    7e3e:	bf00      	nop
    7e40:	2009c05c 	.word	0x2009c05c
    7e44:	80000003 	.word	0x80000003
    7e48:	0000a0b4 	.word	0x0000a0b4
    7e4c:	1000044c 	.word	0x1000044c

00007e50 <continuous_cap_state>:
// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
    7e50:	b510      	push	{r4, lr}
    7e52:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    7e54:	2100      	movs	r1, #0
    7e56:	2228      	movs	r2, #40	; 0x28
    7e58:	4668      	mov	r0, sp
    7e5a:	f7fc f9e9 	bl	4230 <memset>
		.rxtime = CLK100NS,
    7e5e:	4b17      	ldr	r3, [pc, #92]	; (7ebc <continuous_cap_state+0x6c>)
    7e60:	4a17      	ldr	r2, [pc, #92]	; (7ec0 <continuous_cap_state+0x70>)
    7e62:	681b      	ldr	r3, [r3, #0]
    7e64:	6812      	ldr	r2, [r2, #0]
    7e66:	f640 4135 	movw	r1, #3125	; 0xc35
    7e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7e6e:	fb01 2303 	mla	r3, r1, r3, r2
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    7e72:	9309      	str	r3, [sp, #36]	; 0x24
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7e74:	f000 fab4 	bl	83e0 <cc2400_status>
static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    7e78:	06c0      	lsls	r0, r0, #27
    7e7a:	d51d      	bpl.n	7eb8 <continuous_cap_state+0x68>
		RXLED_SET;
    7e7c:	4b11      	ldr	r3, [pc, #68]	; (7ec4 <continuous_cap_state+0x74>)
    7e7e:	2410      	movs	r4, #16
    7e80:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    7e82:	4668      	mov	r0, sp
    7e84:	f7ff fe7e 	bl	7b84 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    7e88:	2006      	movs	r0, #6
    7e8a:	4669      	mov	r1, sp
    7e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7e8e:	f7fd f8bd 	bl	500c <enqueue_with_ts>
		RXLED_CLR;
    7e92:	4b0d      	ldr	r3, [pc, #52]	; (7ec8 <continuous_cap_state+0x78>)

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    7e94:	2061      	movs	r0, #97	; 0x61

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    7e96:	601c      	str	r4, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    7e98:	f000 faa9 	bl	83ee <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7e9c:	f000 faa0 	bl	83e0 <cc2400_status>
    7ea0:	0741      	lsls	r1, r0, #29
    7ea2:	d5fb      	bpl.n	7e9c <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7ea4:	200e      	movs	r0, #14
    7ea6:	f000 f9ef 	bl	8288 <cc2400_get>
    7eaa:	f000 001f 	and.w	r0, r0, #31
    7eae:	280f      	cmp	r0, #15
    7eb0:	d1f8      	bne.n	7ea4 <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    7eb2:	2062      	movs	r0, #98	; 0x62
    7eb4:	f000 fa9b 	bl	83ee <cc2400_strobe>
	}
}
    7eb8:	b00a      	add	sp, #40	; 0x28
    7eba:	bd10      	pop	{r4, pc}
    7ebc:	10001014 	.word	0x10001014
    7ec0:	40004008 	.word	0x40004008
    7ec4:	2009c038 	.word	0x2009c038
    7ec8:	2009c03c 	.word	0x2009c03c

00007ecc <jam_cap_state>:

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
    7ecc:	b510      	push	{r4, lr}
    7ece:	4604      	mov	r4, r0
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7ed0:	f000 fa86 	bl	83e0 <cc2400_status>
	}
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
    7ed4:	06c3      	lsls	r3, r0, #27
    7ed6:	d50e      	bpl.n	7ef6 <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
    7ed8:	2304      	movs	r3, #4
    7eda:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    7edc:	2301      	movs	r3, #1
    7ede:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    7ee0:	4b11      	ldr	r3, [pc, #68]	; (7f28 <jam_cap_state+0x5c>)
    7ee2:	4a12      	ldr	r2, [pc, #72]	; (7f2c <jam_cap_state+0x60>)
    7ee4:	681b      	ldr	r3, [r3, #0]
    7ee6:	6812      	ldr	r2, [r2, #0]
    7ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7eec:	f640 4135 	movw	r1, #3125	; 0xc35
    7ef0:	fb01 2303 	mla	r3, r1, r3, r2
    7ef4:	61a3      	str	r3, [r4, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    7ef6:	6923      	ldr	r3, [r4, #16]
    7ef8:	b15b      	cbz	r3, 7f12 <jam_cap_state+0x46>
    7efa:	4620      	mov	r0, r4
    7efc:	f7ff fe68 	bl	7bd0 <sleep_elapsed>
    7f00:	b138      	cbz	r0, 7f12 <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    7f02:	2304      	movs	r3, #4
    7f04:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    7f06:	2300      	movs	r3, #0
    7f08:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    7f0a:	4620      	mov	r0, r4
    7f0c:	210b      	movs	r1, #11
    7f0e:	f7ff fe49 	bl	7ba4 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    7f12:	7823      	ldrb	r3, [r4, #0]
    7f14:	2b02      	cmp	r3, #2
    7f16:	d006      	beq.n	7f26 <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    7f18:	2064      	movs	r0, #100	; 0x64
    7f1a:	f000 fa68 	bl	83ee <cc2400_strobe>
		ssp_stop();
	}
}
    7f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
		cc2400_strobe(SRFOFF);
		ssp_stop();
    7f22:	f7ff be21 	b.w	7b68 <ssp_stop>
    7f26:	bd10      	pop	{r4, pc}
    7f28:	10001014 	.word	0x10001014
    7f2c:	40004008 	.word	0x40004008

00007f30 <cap_state>:
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    7f30:	b530      	push	{r4, r5, lr}
    7f32:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    7f34:	2100      	movs	r1, #0
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    7f36:	4604      	mov	r4, r0
	ego_packet_t packet = {
    7f38:	2228      	movs	r2, #40	; 0x28
    7f3a:	4668      	mov	r0, sp
    7f3c:	f7fc f978 	bl	4230 <memset>
		.rxtime = CLK100NS,
    7f40:	4b1b      	ldr	r3, [pc, #108]	; (7fb0 <cap_state+0x80>)
    7f42:	4a1c      	ldr	r2, [pc, #112]	; (7fb4 <cap_state+0x84>)
    7f44:	681b      	ldr	r3, [r3, #0]
    7f46:	6812      	ldr	r2, [r2, #0]
    7f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7f4c:	f640 4135 	movw	r1, #3125	; 0xc35
    7f50:	fb01 2303 	mla	r3, r1, r3, r2
	};

	if (sleep_elapsed(state)) {
    7f54:	4620      	mov	r0, r4
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    7f56:	9309      	str	r3, [sp, #36]	; 0x24
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    7f58:	f7ff fe3a 	bl	7bd0 <sleep_elapsed>
    7f5c:	b128      	cbz	r0, 7f6a <cap_state+0x3a>
		sleep_ms(state, 4);
    7f5e:	4620      	mov	r0, r4
    7f60:	2104      	movs	r1, #4
    7f62:	f7ff fe1f 	bl	7ba4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    7f66:	2303      	movs	r3, #3
    7f68:	7023      	strb	r3, [r4, #0]
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7f6a:	f000 fa39 	bl	83e0 <cc2400_status>
	if (sleep_elapsed(state)) {
		sleep_ms(state, 4);
		state->state = EGO_ST_SLEEP;
	}

	if (sync_received()) {
    7f6e:	06c2      	lsls	r2, r0, #27
    7f70:	d512      	bpl.n	7f98 <cap_state+0x68>
		RXLED_SET;
    7f72:	4b11      	ldr	r3, [pc, #68]	; (7fb8 <cap_state+0x88>)
    7f74:	2510      	movs	r5, #16
    7f76:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    7f78:	4668      	mov	r0, sp
    7f7a:	f7ff fe03 	bl	7b84 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    7f7e:	4669      	mov	r1, sp
    7f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7f82:	2006      	movs	r0, #6
    7f84:	f7fd f842 	bl	500c <enqueue_with_ts>
		RXLED_CLR;
    7f88:	4b0c      	ldr	r3, [pc, #48]	; (7fbc <cap_state+0x8c>)

		sleep_ms(state, 6);
    7f8a:	4620      	mov	r0, r4

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    7f8c:	601d      	str	r5, [r3, #0]

		sleep_ms(state, 6);
    7f8e:	2106      	movs	r1, #6
    7f90:	f7ff fe08 	bl	7ba4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    7f94:	2303      	movs	r3, #3
    7f96:	7023      	strb	r3, [r4, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    7f98:	7823      	ldrb	r3, [r4, #0]
    7f9a:	2b02      	cmp	r3, #2
    7f9c:	d006      	beq.n	7fac <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    7f9e:	2064      	movs	r0, #100	; 0x64
    7fa0:	f000 fa25 	bl	83ee <cc2400_strobe>
		ssp_stop();
    7fa4:	f7ff fde0 	bl	7b68 <ssp_stop>
		state->timer_active = 1;
    7fa8:	2301      	movs	r3, #1
    7faa:	6123      	str	r3, [r4, #16]
	}
}
    7fac:	b00b      	add	sp, #44	; 0x2c
    7fae:	bd30      	pop	{r4, r5, pc}
    7fb0:	10001014 	.word	0x10001014
    7fb4:	40004008 	.word	0x40004008
    7fb8:	2009c038 	.word	0x2009c038
    7fbc:	2009c03c 	.word	0x2009c03c

00007fc0 <ego_main>:
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    7fc0:	b530      	push	{r4, r5, lr}
    7fc2:	b089      	sub	sp, #36	; 0x24
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    7fc4:	2100      	movs	r1, #0
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    7fc6:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    7fc8:	221c      	movs	r2, #28
    7fca:	a801      	add	r0, sp, #4
    7fcc:	f7fc f930 	bl	4230 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    7fd0:	2c01      	cmp	r4, #1
    7fd2:	4d14      	ldr	r5, [pc, #80]	; (8024 <ego_main+0x64>)
    7fd4:	d009      	beq.n	7fea <ego_main+0x2a>
    7fd6:	d306      	bcc.n	7fe6 <ego_main+0x26>
    7fd8:	2c02      	cmp	r4, #2
    7fda:	d101      	bne.n	7fe0 <ego_main+0x20>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
			break;
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    7fdc:	4c12      	ldr	r4, [pc, #72]	; (8028 <ego_main+0x68>)
			break;
    7fde:	e005      	b.n	7fec <ego_main+0x2c>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    7fe0:	2300      	movs	r3, #0
    7fe2:	702b      	strb	r3, [r5, #0]
    7fe4:	e01b      	b.n	801e <ego_main+0x5e>
		jamming_state,
	};

	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
    7fe6:	4c11      	ldr	r4, [pc, #68]	; (802c <ego_main+0x6c>)
    7fe8:	e000      	b.n	7fec <ego_main+0x2c>
			break;
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    7fea:	4c11      	ldr	r4, [pc, #68]	; (8030 <ego_main+0x70>)
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
}

static void ego_init(void) {
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    7fec:	4b11      	ldr	r3, [pc, #68]	; (8034 <ego_main+0x74>)
    7fee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7ff2:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    7ff4:	f000 f8c0 	bl	8178 <dio_ssp_init>
	}

	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
    7ff8:	782b      	ldrb	r3, [r5, #0]
    7ffa:	2b0d      	cmp	r3, #13
    7ffc:	d106      	bne.n	800c <ego_main+0x4c>
			break;
		handler[state.state](&state);
    7ffe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8002:	a801      	add	r0, sp, #4
    8004:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    8008:	4798      	blx	r3
	}
    800a:	e7f5      	b.n	7ff8 <ego_main+0x38>

	dio_ssp_init();
}

static void ego_deinit(void) {
	cc2400_strobe(SRFOFF);
    800c:	2064      	movs	r0, #100	; 0x64
    800e:	f000 f9ee 	bl	83ee <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8012:	f7ff fda9 	bl	7b68 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8016:	4b08      	ldr	r3, [pc, #32]	; (8038 <ego_main+0x78>)
    8018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    801c:	601a      	str	r2, [r3, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    801e:	b009      	add	sp, #36	; 0x24
    8020:	bd30      	pop	{r4, r5, pc}
    8022:	bf00      	nop
    8024:	10000e46 	.word	0x10000e46
    8028:	0000a0f0 	.word	0x0000a0f0
    802c:	0000a0bc 	.word	0x0000a0bc
    8030:	0000a0d8 	.word	0x0000a0d8
    8034:	e000e100 	.word	0xe000e100
    8038:	e000e180 	.word	0xe000e180

0000803c <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    803c:	f000 bcea 	b.w	8a14 <USBHwISR>

00008040 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    8040:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    8042:	2300      	movs	r3, #0
    8044:	4a0c      	ldr	r2, [pc, #48]	; (8078 <Reset_Handler+0x38>)
    8046:	490d      	ldr	r1, [pc, #52]	; (807c <Reset_Handler+0x3c>)
    8048:	1898      	adds	r0, r3, r2
    804a:	4288      	cmp	r0, r1
    804c:	d204      	bcs.n	8058 <Reset_Handler+0x18>
	{
		*dest++ = *src++;
    804e:	490c      	ldr	r1, [pc, #48]	; (8080 <Reset_Handler+0x40>)
    8050:	5859      	ldr	r1, [r3, r1]
    8052:	5099      	str	r1, [r3, r2]
    8054:	3304      	adds	r3, #4
    8056:	e7f5      	b.n	8044 <Reset_Handler+0x4>
{
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    8058:	4b0a      	ldr	r3, [pc, #40]	; (8084 <Reset_Handler+0x44>)
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    805a:	4a0b      	ldr	r2, [pc, #44]	; (8088 <Reset_Handler+0x48>)
    805c:	4293      	cmp	r3, r2
    805e:	d203      	bcs.n	8068 <Reset_Handler+0x28>
	{
		*src++ = 0;
    8060:	2200      	movs	r2, #0
    8062:	f843 2b04 	str.w	r2, [r3], #4
    8066:	e7f8      	b.n	805a <Reset_Handler+0x1a>
	}

	__libc_init_array();
    8068:	f7fc f8b4 	bl	41d4 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    806c:	4b07      	ldr	r3, [pc, #28]	; (808c <Reset_Handler+0x4c>)
    806e:	4a08      	ldr	r2, [pc, #32]	; (8090 <Reset_Handler+0x50>)
    8070:	601a      	str	r2, [r3, #0]

	main();
    8072:	f7fe fdb1 	bl	6bd8 <main>
    8076:	e7fe      	b.n	8076 <Reset_Handler+0x36>
    8078:	10000020 	.word	0x10000020
    807c:	10000e14 	.word	0x10000e14
    8080:	0000a158 	.word	0x0000a158
    8084:	10000e18 	.word	0x10000e18
    8088:	100037b0 	.word	0x100037b0
    808c:	e000ed08 	.word	0xe000ed08
    8090:	00004000 	.word	0x00004000

00008094 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    8094:	e7fe      	b.n	8094 <ADC_IRQHandler>
    8096:	0000      	movs	r0, r0

00008098 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    8098:	4a04      	ldr	r2, [pc, #16]	; (80ac <spi_delay+0x14>)
    809a:	230a      	movs	r3, #10
    809c:	6013      	str	r3, [r2, #0]
       while (--delay_counter);
    809e:	6813      	ldr	r3, [r2, #0]
    80a0:	3b01      	subs	r3, #1
    80a2:	6013      	str	r3, [r2, #0]
    80a4:	2b00      	cmp	r3, #0
    80a6:	d1fa      	bne.n	809e <spi_delay+0x6>
}
    80a8:	4770      	bx	lr
    80aa:	bf00      	nop
    80ac:	10000f1c 	.word	0x10000f1c

000080b0 <rbit>:
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
  u32 result = 0;
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    80b0:	fa90 f0a0 	rbit	r0, r0
  return result;
}
    80b4:	4770      	bx	lr
    80b6:	0000      	movs	r0, r0

000080b8 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    80b8:	0883      	lsrs	r3, r0, #2
    80ba:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    80be:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    80c2:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    80c6:	eb03 2390 	add.w	r3, r3, r0, lsr #10
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    80ca:	4a05      	ldr	r2, [pc, #20]	; (80e0 <wait_us+0x28>)
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    80cc:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    80d0:	6050      	str	r0, [r2, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    80d2:	6853      	ldr	r3, [r2, #4]
    80d4:	3b01      	subs	r3, #1
    80d6:	6053      	str	r3, [r2, #4]
    80d8:	2b00      	cmp	r3, #0
    80da:	d1fa      	bne.n	80d2 <wait_us+0x1a>
}
    80dc:	4770      	bx	lr
    80de:	bf00      	nop
    80e0:	10000f1c 	.word	0x10000f1c

000080e4 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    80e4:	4b01      	ldr	r3, [pc, #4]	; (80ec <wait+0x8>)
    80e6:	4358      	muls	r0, r3
    80e8:	f7ff bfe6 	b.w	80b8 <wait_us>
    80ec:	000f4240 	.word	0x000f4240

000080f0 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    80f0:	4a10      	ldr	r2, [pc, #64]	; (8134 <all_pins_off+0x44>)
    80f2:	2300      	movs	r3, #0
    80f4:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    80f6:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    80f8:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    80fa:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    80fc:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    80fe:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    8100:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    8102:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    8104:	4a0c      	ldr	r2, [pc, #48]	; (8138 <all_pins_off+0x48>)
    8106:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    8108:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    810a:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    810c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    810e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    8112:	4a0a      	ldr	r2, [pc, #40]	; (813c <all_pins_off+0x4c>)
    8114:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    8116:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    8118:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    811a:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    811c:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    811e:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    8120:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    8122:	4a07      	ldr	r2, [pc, #28]	; (8140 <all_pins_off+0x50>)
    8124:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    8126:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    8128:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    812a:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    812c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    8130:	4770      	bx	lr
    8132:	bf00      	nop
    8134:	4002c000 	.word	0x4002c000
    8138:	2009c000 	.word	0x2009c000
    813c:	4002c040 	.word	0x4002c040
    8140:	2009c014 	.word	0x2009c014

00008144 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    8144:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    8146:	f7ff ffd3 	bl	80f0 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    814a:	4a0a      	ldr	r2, [pc, #40]	; (8174 <gpio_init+0x30>)
    814c:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    814e:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    8152:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    8154:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    8156:	f240 11b1 	movw	r1, #433	; 0x1b1
    815a:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    815c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    8160:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    8162:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    8166:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    8168:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    816a:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    816c:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    816e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    8172:	bd08      	pop	{r3, pc}
    8174:	2009c000 	.word	0x2009c000

00008178 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    8178:	4b11      	ldr	r3, [pc, #68]	; (81c0 <dio_ssp_init+0x48>)
    817a:	681a      	ldr	r2, [r3, #0]
    817c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    8180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    8184:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    8186:	681a      	ldr	r2, [r3, #0]
    8188:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    818c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    8190:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    8192:	681a      	ldr	r2, [r3, #0]
    8194:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    8198:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    819c:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    819e:	681a      	ldr	r2, [r3, #0]
    81a0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    81a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    81a8:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    81aa:	4b06      	ldr	r3, [pc, #24]	; (81c4 <dio_ssp_init+0x4c>)
    81ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    81b0:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    81b2:	4b05      	ldr	r3, [pc, #20]	; (81c8 <dio_ssp_init+0x50>)
    81b4:	22c7      	movs	r2, #199	; 0xc7
    81b6:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    81b8:	220c      	movs	r2, #12
    81ba:	605a      	str	r2, [r3, #4]
    81bc:	4770      	bx	lr
    81be:	bf00      	nop
    81c0:	4002c000 	.word	0x4002c000
    81c4:	2009c098 	.word	0x2009c098
    81c8:	40030000 	.word	0x40030000

000081cc <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    81cc:	4b09      	ldr	r3, [pc, #36]	; (81f4 <atest_init+0x28>)
    81ce:	681a      	ldr	r2, [r3, #0]
    81d0:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
    81d4:	601a      	str	r2, [r3, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    81d6:	4b08      	ldr	r3, [pc, #32]	; (81f8 <atest_init+0x2c>)
    81d8:	681a      	ldr	r2, [r3, #0]
    81da:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
    81de:	601a      	str	r2, [r3, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    81e0:	4b06      	ldr	r3, [pc, #24]	; (81fc <atest_init+0x30>)
    81e2:	681a      	ldr	r2, [r3, #0]
    81e4:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    81e8:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    81ea:	681a      	ldr	r2, [r3, #0]
    81ec:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    81f0:	601a      	str	r2, [r3, #0]
    81f2:	4770      	bx	lr
    81f4:	4002c004 	.word	0x4002c004
    81f8:	2009c000 	.word	0x2009c000
    81fc:	4002c044 	.word	0x4002c044

00008200 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    8200:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    8202:	2401      	movs	r4, #1
    8204:	1e43      	subs	r3, r0, #1
    8206:	409c      	lsls	r4, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    8208:	2220      	movs	r2, #32

	while (len--) {
    820a:	3801      	subs	r0, #1

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    820c:	4b0d      	ldr	r3, [pc, #52]	; (8244 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    820e:	b2c0      	uxtb	r0, r0
    8210:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    8212:	601a      	str	r2, [r3, #0]
    8214:	4b0c      	ldr	r3, [pc, #48]	; (8248 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    8216:	d011      	beq.n	823c <cc2400_spi+0x3c>
		if (data & msb)
    8218:	4221      	tst	r1, r4
			MOSI_SET;
		else
			MOSI_CLR;
    821a:	bf08      	it	eq
    821c:	4d09      	ldreq	r5, [pc, #36]	; (8244 <cc2400_spi+0x44>)
    821e:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
		if (data & msb)
			MOSI_SET;
    8222:	bf14      	ite	ne
    8224:	601a      	strne	r2, [r3, #0]
		else
			MOSI_CLR;
    8226:	602a      	streq	r2, [r5, #0]
		data <<= 1;

		SCLK_SET;
    8228:	2210      	movs	r2, #16
    822a:	601a      	str	r2, [r3, #0]
		if (MISO)
    822c:	4b07      	ldr	r3, [pc, #28]	; (824c <cc2400_spi+0x4c>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    822e:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    8230:	681b      	ldr	r3, [r3, #0]
    8232:	079b      	lsls	r3, r3, #30
			data |= 1;
    8234:	bf48      	it	mi
    8236:	f041 0101 	orrmi.w	r1, r1, #1
    823a:	e7e6      	b.n	820a <cc2400_spi+0xa>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    823c:	2220      	movs	r2, #32
    823e:	601a      	str	r2, [r3, #0]

	return data;
}
    8240:	4608      	mov	r0, r1
    8242:	bd30      	pop	{r4, r5, pc}
    8244:	2009c05c 	.word	0x2009c05c
    8248:	2009c058 	.word	0x2009c058
    824c:	2009c054 	.word	0x2009c054

00008250 <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    8250:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    8252:	4c0a      	ldr	r4, [pc, #40]	; (827c <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    8254:	f7ff ffba 	bl	81cc <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    8258:	f44f 7300 	mov.w	r3, #512	; 0x200
    825c:	6023      	str	r3, [r4, #0]
	wait_us(50);
    825e:	2032      	movs	r0, #50	; 0x32
    8260:	f7ff ff2a 	bl	80b8 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    8264:	4b06      	ldr	r3, [pc, #24]	; (8280 <cc2400_init+0x30>)
    8266:	2220      	movs	r2, #32
    8268:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    826a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    826e:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8270:	2018      	movs	r0, #24
    8272:	4904      	ldr	r1, [pc, #16]	; (8284 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    8274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8278:	f7ff bfc2 	b.w	8200 <cc2400_spi>
    827c:	2009c038 	.word	0x2009c038
    8280:	2009c058 	.word	0x2009c058
    8284:	000d7fff 	.word	0x000d7fff

00008288 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    8288:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    828a:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    828e:	0409      	lsls	r1, r1, #16
    8290:	2018      	movs	r0, #24
    8292:	f7ff ffb5 	bl	8200 <cc2400_spi>
	return in & 0xFFFF;
}
    8296:	b280      	uxth	r0, r0
    8298:	bd08      	pop	{r3, pc}

0000829a <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    829a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    829e:	2018      	movs	r0, #24
    82a0:	f7ff bfae 	b.w	8200 <cc2400_spi>

000082a4 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    82a4:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    82a6:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    82aa:	0209      	lsls	r1, r1, #8
    82ac:	2010      	movs	r0, #16
    82ae:	f7ff ffa7 	bl	8200 <cc2400_spi>
	return in & 0xFF;
}
    82b2:	b2c0      	uxtb	r0, r0
    82b4:	bd08      	pop	{r3, pc}

000082b6 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    82b6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    82ba:	2010      	movs	r0, #16
    82bc:	f7ff bfa0 	b.w	8200 <cc2400_spi>

000082c0 <cc2400_fifo_write>:
       while (--delay_counter);
}


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    82c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    82c2:	4b21      	ldr	r3, [pc, #132]	; (8348 <cc2400_fifo_write+0x88>)
    82c4:	2220      	movs	r2, #32
    82c6:	601a      	str	r2, [r3, #0]
    82c8:	2308      	movs	r3, #8


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
    82ca:	2270      	movs	r2, #112	; 0x70

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    82cc:	f012 0f80 	tst.w	r2, #128	; 0x80
    82d0:	4d1e      	ldr	r5, [pc, #120]	; (834c <cc2400_fifo_write+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    82d2:	bf08      	it	eq
    82d4:	4e1c      	ldreq	r6, [pc, #112]	; (8348 <cc2400_fifo_write+0x88>)
    82d6:	f04f 0401 	mov.w	r4, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    82da:	bf14      	ite	ne
    82dc:	602c      	strne	r4, [r5, #0]
		else
			MOSI_CLR;
    82de:	6034      	streq	r4, [r6, #0]
		reg <<= 1;
		SCLK_SET;
    82e0:	2410      	movs	r4, #16
    82e2:	602c      	str	r4, [r5, #0]
    82e4:	3b01      	subs	r3, #1
		SCLK_CLR;
    82e6:	4d18      	ldr	r5, [pc, #96]	; (8348 <cc2400_fifo_write+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    82e8:	0052      	lsls	r2, r2, #1
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    82ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    82ee:	b2d2      	uxtb	r2, r2
		SCLK_SET;
		SCLK_CLR;
    82f0:	602c      	str	r4, [r5, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    82f2:	d1eb      	bne.n	82cc <cc2400_fifo_write+0xc>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    82f4:	b2da      	uxtb	r2, r3
    82f6:	4282      	cmp	r2, r0
    82f8:	d217      	bcs.n	832a <cc2400_fifo_write+0x6a>
		temp = data[i];
    82fa:	5cca      	ldrb	r2, [r1, r3]
    82fc:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
    82fe:	f012 0f80 	tst.w	r2, #128	; 0x80
    8302:	4e12      	ldr	r6, [pc, #72]	; (834c <cc2400_fifo_write+0x8c>)
				MOSI_SET;
			else
				MOSI_CLR;
    8304:	bf08      	it	eq
    8306:	4f10      	ldreq	r7, [pc, #64]	; (8348 <cc2400_fifo_write+0x88>)
    8308:	f04f 0501 	mov.w	r5, #1

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
    830c:	bf14      	ite	ne
    830e:	6035      	strne	r5, [r6, #0]
			else
				MOSI_CLR;
    8310:	603d      	streq	r5, [r7, #0]
			temp <<= 1;
			SCLK_SET;
    8312:	2510      	movs	r5, #16
    8314:	6035      	str	r5, [r6, #0]
    8316:	3c01      	subs	r4, #1
			SCLK_CLR;
    8318:	4e0b      	ldr	r6, [pc, #44]	; (8348 <cc2400_fifo_write+0x88>)
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    831a:	0052      	lsls	r2, r2, #1
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    831c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    8320:	b2d2      	uxtb	r2, r2
			SCLK_SET;
			SCLK_CLR;
    8322:	6035      	str	r5, [r6, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    8324:	d1eb      	bne.n	82fe <cc2400_fifo_write+0x3e>
    8326:	3301      	adds	r3, #1
    8328:	e7e4      	b.n	82f4 <cc2400_fifo_write+0x34>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    832a:	2308      	movs	r3, #8
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    832c:	4c07      	ldr	r4, [pc, #28]	; (834c <cc2400_fifo_write+0x8c>)
		SCLK_CLR;
    832e:	4906      	ldr	r1, [pc, #24]	; (8348 <cc2400_fifo_write+0x88>)
    8330:	3b01      	subs	r3, #1
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    8332:	2210      	movs	r2, #16
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    8334:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		SCLK_SET;
    8338:	6022      	str	r2, [r4, #0]
		SCLK_CLR;
    833a:	600a      	str	r2, [r1, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    833c:	d1f6      	bne.n	832c <cc2400_fifo_write+0x6c>
		SCLK_SET;
		SCLK_CLR;
	}
	
	spi_delay();
    833e:	f7ff feab 	bl	8098 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    8342:	2320      	movs	r3, #32
    8344:	6023      	str	r3, [r4, #0]
    8346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8348:	2009c05c 	.word	0x2009c05c
    834c:	2009c058 	.word	0x2009c058

00008350 <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    8350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    8354:	4b20      	ldr	r3, [pc, #128]	; (83d8 <cc2400_fifo_read+0x88>)
    8356:	2220      	movs	r2, #32
    8358:	601a      	str	r2, [r3, #0]
	/* end transaction by raising CSN */
	CSN_SET;
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    835a:	4607      	mov	r7, r0
    835c:	4688      	mov	r8, r1
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    835e:	2508      	movs	r5, #8
/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
	u8 msb = 1 << 7;
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;
    8360:	23f0      	movs	r3, #240	; 0xf0

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    8362:	f013 0f80 	tst.w	r3, #128	; 0x80
    8366:	491d      	ldr	r1, [pc, #116]	; (83dc <cc2400_fifo_read+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    8368:	bf08      	it	eq
    836a:	481b      	ldreq	r0, [pc, #108]	; (83d8 <cc2400_fifo_read+0x88>)
    836c:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    8370:	bf14      	ite	ne
    8372:	600a      	strne	r2, [r1, #0]
		else
			MOSI_CLR;
    8374:	6002      	streq	r2, [r0, #0]
		reg <<= 1;
		SCLK_SET;
    8376:	2210      	movs	r2, #16
    8378:	600a      	str	r2, [r1, #0]
    837a:	3d01      	subs	r5, #1
		SCLK_CLR;
    837c:	4916      	ldr	r1, [pc, #88]	; (83d8 <cc2400_fifo_read+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    837e:	005b      	lsls	r3, r3, #1
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8380:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    8384:	b2db      	uxtb	r3, r3
		SCLK_SET;
		SCLK_CLR;
    8386:	600a      	str	r2, [r1, #0]
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8388:	d1eb      	bne.n	8362 <cc2400_fifo_read+0x12>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    838a:	b2eb      	uxtb	r3, r5
    838c:	42bb      	cmp	r3, r7
    838e:	d21b      	bcs.n	83c8 <cc2400_fifo_read+0x78>
    8390:	2608      	movs	r6, #8
    8392:	2400      	movs	r4, #0
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
    8394:	f7ff fe80 	bl	8098 <spi_delay>
			SCLK_SET;
    8398:	4b10      	ldr	r3, [pc, #64]	; (83dc <cc2400_fifo_read+0x8c>)
    839a:	2210      	movs	r2, #16
    839c:	601a      	str	r2, [r3, #0]
			temp <<= 1;
			if (MISO)
    839e:	3b04      	subs	r3, #4
    83a0:	681b      	ldr	r3, [r3, #0]
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    83a2:	0064      	lsls	r4, r4, #1
			if (MISO)
    83a4:	079a      	lsls	r2, r3, #30
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    83a6:	b2e4      	uxtb	r4, r4
			if (MISO)
				temp |= 1;
    83a8:	bf48      	it	mi
    83aa:	f044 0401 	orrmi.w	r4, r4, #1
    83ae:	3e01      	subs	r6, #1
			spi_delay();
    83b0:	f7ff fe72 	bl	8098 <spi_delay>
			SCLK_CLR;
    83b4:	4b08      	ldr	r3, [pc, #32]	; (83d8 <cc2400_fifo_read+0x88>)
    83b6:	2210      	movs	r2, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    83b8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
			SCLK_SET;
			temp <<= 1;
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
    83bc:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    83be:	d1e9      	bne.n	8394 <cc2400_fifo_read+0x44>
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
		}
		buf[i] = temp;
    83c0:	f808 4005 	strb.w	r4, [r8, r5]
    83c4:	3501      	adds	r5, #1
    83c6:	e7e0      	b.n	838a <cc2400_fifo_read+0x3a>
	}

	/* end transaction by raising CSN */
	spi_delay();
    83c8:	f7ff fe66 	bl	8098 <spi_delay>
	CSN_SET;
    83cc:	4b03      	ldr	r3, [pc, #12]	; (83dc <cc2400_fifo_read+0x8c>)
    83ce:	2220      	movs	r2, #32
    83d0:	601a      	str	r2, [r3, #0]
    83d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83d6:	bf00      	nop
    83d8:	2009c05c 	.word	0x2009c05c
    83dc:	2009c058 	.word	0x2009c058

000083e0 <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    83e0:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    83e2:	2100      	movs	r1, #0
    83e4:	2008      	movs	r0, #8
    83e6:	f7ff ff0b 	bl	8200 <cc2400_spi>
}
    83ea:	b2c0      	uxtb	r0, r0
    83ec:	bd08      	pop	{r3, pc}

000083ee <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    83ee:	b508      	push	{r3, lr}
    83f0:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    83f2:	2008      	movs	r0, #8
    83f4:	f7ff ff04 	bl	8200 <cc2400_spi>
}
    83f8:	b2c0      	uxtb	r0, r0
    83fa:	bd08      	pop	{r3, pc}

000083fc <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    83fc:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    83fe:	2018      	movs	r0, #24
    8400:	2100      	movs	r1, #0
    8402:	f7ff fefd 	bl	8200 <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    8406:	2000      	movs	r0, #0
    8408:	f7ff ff3e 	bl	8288 <cc2400_get>
    840c:	2800      	cmp	r0, #0
    840e:	d1fa      	bne.n	8406 <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8410:	2018      	movs	r0, #24
    8412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8416:	f7ff fef3 	bl	8200 <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    841a:	2000      	movs	r0, #0
    841c:	f7ff ff34 	bl	8288 <cc2400_get>
    8420:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    8424:	d1f9      	bne.n	841a <cc2400_reset+0x1e>
}
    8426:	bd08      	pop	{r3, pc}

00008428 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    8428:	b510      	push	{r4, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    842a:	4b46      	ldr	r3, [pc, #280]	; (8544 <clock_start+0x11c>)
    842c:	f244 023a 	movw	r2, #16442	; 0x403a
    8430:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    8432:	2200      	movs	r2, #0
    8434:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    8438:	3380      	adds	r3, #128	; 0x80
    843a:	681a      	ldr	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    843c:	21aa      	movs	r1, #170	; 0xaa

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    843e:	f022 0202 	bic.w	r2, r2, #2
    8442:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    8444:	4a40      	ldr	r2, [pc, #256]	; (8548 <clock_start+0x120>)
    8446:	6011      	str	r1, [r2, #0]
    8448:	2155      	movs	r1, #85	; 0x55
    844a:	6011      	str	r1, [r2, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    844c:	4a3f      	ldr	r2, [pc, #252]	; (854c <clock_start+0x124>)
    844e:	6812      	ldr	r2, [r2, #0]
    8450:	0194      	lsls	r4, r2, #6
    8452:	d4fb      	bmi.n	844c <clock_start+0x24>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    8454:	681a      	ldr	r2, [r3, #0]
    8456:	f022 0201 	bic.w	r2, r2, #1
    845a:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    845c:	4b3a      	ldr	r3, [pc, #232]	; (8548 <clock_start+0x120>)
    845e:	22aa      	movs	r2, #170	; 0xaa
    8460:	601a      	str	r2, [r3, #0]
    8462:	2255      	movs	r2, #85	; 0x55
    8464:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    8466:	4b39      	ldr	r3, [pc, #228]	; (854c <clock_start+0x124>)
    8468:	681b      	ldr	r3, [r3, #0]
    846a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    846e:	d1fa      	bne.n	8466 <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    8470:	4a37      	ldr	r2, [pc, #220]	; (8550 <clock_start+0x128>)
    8472:	6013      	str	r3, [r2, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    8474:	f7ff ffc2 	bl	83fc <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8478:	2018      	movs	r0, #24
    847a:	4936      	ldr	r1, [pc, #216]	; (8554 <clock_start+0x12c>)
    847c:	f7ff fec0 	bl	8200 <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    8480:	2060      	movs	r0, #96	; 0x60
    8482:	f7ff ffb4 	bl	83ee <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8486:	f7ff ffab 	bl	83e0 <cc2400_status>
    848a:	0640      	lsls	r0, r0, #25
    848c:	d5fb      	bpl.n	8486 <clock_start+0x5e>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    848e:	4b32      	ldr	r3, [pc, #200]	; (8558 <clock_start+0x130>)
    8490:	2220      	movs	r2, #32
    8492:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    8494:	681a      	ldr	r2, [r3, #0]
    8496:	0651      	lsls	r1, r2, #25
    8498:	d5fc      	bpl.n	8494 <clock_start+0x6c>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    849a:	4b30      	ldr	r3, [pc, #192]	; (855c <clock_start+0x134>)
    849c:	2208      	movs	r2, #8
    849e:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    84a0:	2200      	movs	r2, #0
    84a2:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    84a4:	2201      	movs	r2, #1
    84a6:	f843 2c9c 	str.w	r2, [r3, #-156]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    84aa:	4a2d      	ldr	r2, [pc, #180]	; (8560 <clock_start+0x138>)
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
#endif
	PCLKSEL1  = 0;

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    84ac:	3b9c      	subs	r3, #156	; 0x9c

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    84ae:	f843 2c88 	str.w	r2, [r3, #-136]
	PLL0FEED_SEQUENCE;
    84b2:	21aa      	movs	r1, #170	; 0xaa
    84b4:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    84b6:	482b      	ldr	r0, [pc, #172]	; (8564 <clock_start+0x13c>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    84b8:	f843 1c80 	str.w	r1, [r3, #-128]
    84bc:	f843 2c80 	str.w	r2, [r3, #-128]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    84c0:	6804      	ldr	r4, [r0, #0]
    84c2:	f044 0401 	orr.w	r4, r4, #1
    84c6:	6004      	str	r4, [r0, #0]
	PLL0FEED_SEQUENCE;
    84c8:	f843 1c80 	str.w	r1, [r3, #-128]
    84cc:	f843 2c80 	str.w	r2, [r3, #-128]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    84d0:	4b1e      	ldr	r3, [pc, #120]	; (854c <clock_start+0x124>)
    84d2:	681b      	ldr	r3, [r3, #0]
    84d4:	01da      	lsls	r2, r3, #7
    84d6:	d5fb      	bpl.n	84d0 <clock_start+0xa8>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    84d8:	4b1d      	ldr	r3, [pc, #116]	; (8550 <clock_start+0x128>)
    84da:	2203      	movs	r2, #3
    84dc:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    84de:	f853 2c84 	ldr.w	r2, [r3, #-132]
    84e2:	f042 0202 	orr.w	r2, r2, #2
    84e6:	f843 2c84 	str.w	r2, [r3, #-132]
	PLL0FEED_SEQUENCE;
    84ea:	22aa      	movs	r2, #170	; 0xaa
    84ec:	f843 2c78 	str.w	r2, [r3, #-120]
    84f0:	2255      	movs	r2, #85	; 0x55
    84f2:	f843 2c78 	str.w	r2, [r3, #-120]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    84f6:	4b15      	ldr	r3, [pc, #84]	; (854c <clock_start+0x124>)
    84f8:	681b      	ldr	r3, [r3, #0]
    84fa:	019b      	lsls	r3, r3, #6
    84fc:	d5fb      	bpl.n	84f6 <clock_start+0xce>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    84fe:	4b1a      	ldr	r3, [pc, #104]	; (8568 <clock_start+0x140>)
    8500:	2222      	movs	r2, #34	; 0x22
    8502:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    8504:	21aa      	movs	r1, #170	; 0xaa
    8506:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    8508:	4818      	ldr	r0, [pc, #96]	; (856c <clock_start+0x144>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    850a:	6099      	str	r1, [r3, #8]
    850c:	609a      	str	r2, [r3, #8]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    850e:	6804      	ldr	r4, [r0, #0]
    8510:	f044 0401 	orr.w	r4, r4, #1
    8514:	6004      	str	r4, [r0, #0]
	PLL1FEED_SEQUENCE;
    8516:	6099      	str	r1, [r3, #8]
    8518:	609a      	str	r2, [r3, #8]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    851a:	4b15      	ldr	r3, [pc, #84]	; (8570 <clock_start+0x148>)
    851c:	681a      	ldr	r2, [r3, #0]
    851e:	05d4      	lsls	r4, r2, #23
    8520:	d5fb      	bpl.n	851a <clock_start+0xf2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    8522:	681a      	ldr	r2, [r3, #0]
    8524:	0550      	lsls	r0, r2, #21
    8526:	d5fc      	bpl.n	8522 <clock_start+0xfa>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    8528:	4b10      	ldr	r3, [pc, #64]	; (856c <clock_start+0x144>)
    852a:	681a      	ldr	r2, [r3, #0]
    852c:	f042 0202 	orr.w	r2, r2, #2
    8530:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    8532:	22aa      	movs	r2, #170	; 0xaa
    8534:	60da      	str	r2, [r3, #12]
    8536:	2255      	movs	r2, #85	; 0x55
    8538:	60da      	str	r2, [r3, #12]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    853a:	4b0d      	ldr	r3, [pc, #52]	; (8570 <clock_start+0x148>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	0599      	lsls	r1, r3, #22
    8540:	d5fb      	bpl.n	853a <clock_start+0x112>
}
    8542:	bd10      	pop	{r4, pc}
    8544:	400fc000 	.word	0x400fc000
    8548:	400fc08c 	.word	0x400fc08c
    854c:	400fc088 	.word	0x400fc088
    8550:	400fc104 	.word	0x400fc104
    8554:	00081570 	.word	0x00081570
    8558:	400fc1a0 	.word	0x400fc1a0
    855c:	400fc1a8 	.word	0x400fc1a8
    8560:	00010018 	.word	0x00010018
    8564:	400fc080 	.word	0x400fc080
    8568:	400fc0a4 	.word	0x400fc0a4
    856c:	400fc0a0 	.word	0x400fc0a0
    8570:	400fc0a8 	.word	0x400fc0a8

00008574 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    8574:	b508      	push	{r3, lr}
	gpio_init();
    8576:	f7ff fde5 	bl	8144 <gpio_init>
	cc2400_init();
    857a:	f7ff fe69 	bl	8250 <cc2400_init>
	clock_start();
}
    857e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ubertooth_init()
{
	gpio_init();
	cc2400_init();
	clock_start();
    8582:	f7ff bf51 	b.w	8428 <clock_start>
    8586:	0000      	movs	r0, r0

00008588 <reset>:
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
}

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    8588:	b508      	push	{r3, lr}
	all_pins_off();
    858a:	f7ff fdb1 	bl	80f0 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    858e:	4b09      	ldr	r3, [pc, #36]	; (85b4 <reset+0x2c>)
    8590:	2202      	movs	r2, #2
    8592:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    8594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8598:	681a      	ldr	r2, [r3, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    859a:	4807      	ldr	r0, [pc, #28]	; (85b8 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    859c:	f042 0203 	orr.w	r2, r2, #3
    85a0:	601a      	str	r2, [r3, #0]
	WDFEED_SEQUENCE;
    85a2:	22aa      	movs	r2, #170	; 0xaa
    85a4:	609a      	str	r2, [r3, #8]
    85a6:	2255      	movs	r2, #85	; 0x55
    85a8:	609a      	str	r2, [r3, #8]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    85aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    85ae:	f7ff bd83 	b.w	80b8 <wait_us>
    85b2:	bf00      	nop
    85b4:	2009c03c 	.word	0x2009c03c
    85b8:	000f4240 	.word	0x000f4240

000085bc <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    85bc:	b530      	push	{r4, r5, lr}
    85be:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    85c0:	2336      	movs	r3, #54	; 0x36
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    85c2:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    85c4:	a80a      	add	r0, sp, #40	; 0x28
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    85c6:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    85c8:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    85cc:	a905      	add	r1, sp, #20
    85ce:	4668      	mov	r0, sp
    85d0:	4b07      	ldr	r3, [pc, #28]	; (85f0 <get_part_num+0x34>)
    85d2:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    85d4:	9b05      	ldr	r3, [sp, #20]
    85d6:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    85d8:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    85da:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    85dc:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    85de:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    85e0:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    85e2:	0e1b      	lsrs	r3, r3, #24
    85e4:	7123      	strb	r3, [r4, #4]
	*len = 5;
    85e6:	2305      	movs	r3, #5
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    85e8:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	*len = 5;
    85ea:	602b      	str	r3, [r5, #0]
	
}
    85ec:	b00b      	add	sp, #44	; 0x2c
    85ee:	bd30      	pop	{r4, r5, pc}
    85f0:	1fff1ff1 	.word	0x1fff1ff1

000085f4 <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    85f4:	b530      	push	{r4, r5, lr}
    85f6:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    85f8:	233a      	movs	r3, #58	; 0x3a
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    85fa:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    85fc:	a80a      	add	r0, sp, #40	; 0x28
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    85fe:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8600:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8604:	a905      	add	r1, sp, #20
    8606:	4668      	mov	r0, sp
    8608:	4b13      	ldr	r3, [pc, #76]	; (8658 <get_device_serial+0x64>)
    860a:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    860c:	9b05      	ldr	r3, [sp, #20]
    860e:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    8610:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8612:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    8614:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8616:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    8618:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    861a:	0e1b      	lsrs	r3, r3, #24
    861c:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    861e:	9b07      	ldr	r3, [sp, #28]
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    8620:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
    8622:	0a1a      	lsrs	r2, r3, #8
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
    8624:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    8626:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    8628:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    862a:	0e1b      	lsrs	r3, r3, #24
    862c:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    862e:	9b08      	ldr	r3, [sp, #32]
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
    8630:	71e2      	strb	r2, [r4, #7]
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
    8632:	0a1a      	lsrs	r2, r3, #8
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
    8634:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    8636:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    8638:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    863a:	0e1b      	lsrs	r3, r3, #24
    863c:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    863e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
    8640:	72e2      	strb	r2, [r4, #11]
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
    8642:	0a1a      	lsrs	r2, r3, #8
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
    8644:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    8646:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    8648:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    864a:	0e1b      	lsrs	r3, r3, #24
    864c:	7423      	strb	r3, [r4, #16]
	*len = 17;
    864e:	2311      	movs	r3, #17
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
	buffer[15] = (result[4] >> 16) & 0xFF;
    8650:	73e2      	strb	r2, [r4, #15]
	buffer[16] = (result[4] >> 24) & 0xFF;
	*len = 17;
    8652:	602b      	str	r3, [r5, #0]
}
    8654:	b00b      	add	sp, #44	; 0x2c
    8656:	bd30      	pop	{r4, r5, pc}
    8658:	1fff1ff1 	.word	0x1fff1ff1

0000865c <set_isp>:

void set_isp(void)
{
    865c:	b500      	push	{lr}
    865e:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    8660:	2339      	movs	r3, #57	; 0x39
    8662:	a80a      	add	r0, sp, #40	; 0x28
    8664:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8668:	a905      	add	r1, sp, #20
    866a:	4668      	mov	r0, sp
    866c:	4b02      	ldr	r3, [pc, #8]	; (8678 <set_isp+0x1c>)
    866e:	4798      	blx	r3
}
    8670:	b00b      	add	sp, #44	; 0x2c
    8672:	f85d fb04 	ldr.w	pc, [sp], #4
    8676:	bf00      	nop
    8678:	1fff1ff1 	.word	0x1fff1ff1

0000867c <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    867c:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    867e:	4c08      	ldr	r4, [pc, #32]	; (86a0 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    8680:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8682:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    8684:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8686:	2d40      	cmp	r5, #64	; 0x40
    8688:	bfa8      	it	ge
    868a:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    868c:	462a      	mov	r2, r5
    868e:	f000 f955 	bl	893c <USBHwEPWrite>
	pbData += iChunk;
    8692:	6863      	ldr	r3, [r4, #4]
    8694:	442b      	add	r3, r5
    8696:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    8698:	6823      	ldr	r3, [r4, #0]
    869a:	1b5d      	subs	r5, r3, r5
    869c:	6025      	str	r5, [r4, #0]
    869e:	bd38      	pop	{r3, r4, r5, pc}
    86a0:	10000f24 	.word	0x10000f24

000086a4 <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    86a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    86a6:	4b11      	ldr	r3, [pc, #68]	; (86ec <_HandleRequest.constprop.1+0x48>)
    86a8:	7a1c      	ldrb	r4, [r3, #8]
    86aa:	461d      	mov	r5, r3
    86ac:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    86b0:	2c02      	cmp	r4, #2
    86b2:	d10d      	bne.n	86d0 <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    86b4:	2200      	movs	r2, #0
    86b6:	a902      	add	r1, sp, #8
    86b8:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    86bc:	f103 0008 	add.w	r0, r3, #8
    86c0:	f103 0210 	add.w	r2, r3, #16
    86c4:	3304      	adds	r3, #4
    86c6:	f000 fa63 	bl	8b90 <USBFilterOsVendorMessage>
    86ca:	b108      	cbz	r0, 86d0 <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    86cc:	9801      	ldr	r0, [sp, #4]
    86ce:	e00a      	b.n	86e6 <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    86d0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    86d4:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    86d6:	b12b      	cbz	r3, 86e4 <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    86d8:	4805      	ldr	r0, [pc, #20]	; (86f0 <_HandleRequest.constprop.1+0x4c>)
    86da:	f100 0108 	add.w	r1, r0, #8
    86de:	1f02      	subs	r2, r0, #4
    86e0:	4798      	blx	r3
    86e2:	e000      	b.n	86e6 <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    86e4:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    86e6:	b003      	add	sp, #12
    86e8:	bd30      	pop	{r4, r5, pc}
    86ea:	bf00      	nop
    86ec:	10000f24 	.word	0x10000f24
    86f0:	10000f2c 	.word	0x10000f2c

000086f4 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    86f4:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    86f6:	2800      	cmp	r0, #0
    86f8:	d14a      	bne.n	8790 <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    86fa:	f001 0304 	and.w	r3, r1, #4
    86fe:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    8702:	4c25      	ldr	r4, [pc, #148]	; (8798 <USBHandleControlTransfer+0xa4>)
    8704:	b30b      	cbz	r3, 874a <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    8706:	2208      	movs	r2, #8
    8708:	f104 0108 	add.w	r1, r4, #8
    870c:	f000 f946 	bl	899c <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8710:	7a22      	ldrb	r2, [r4, #8]
    8712:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    8716:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    871c:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    871e:	89e3      	ldrh	r3, [r4, #14]
    8720:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    8722:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    8724:	b10b      	cbz	r3, 872a <USBHandleControlTransfer+0x36>
    8726:	09d2      	lsrs	r2, r2, #7
    8728:	d034      	beq.n	8794 <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    872a:	f7ff ffbb 	bl	86a4 <_HandleRequest.constprop.1>
    872e:	b928      	cbnz	r0, 873c <USBHandleControlTransfer+0x48>
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8730:	2080      	movs	r0, #128	; 0x80
    8732:	2101      	movs	r1, #1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8738:	f000 b8f4 	b.w	8924 <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    873c:	89e2      	ldrh	r2, [r4, #14]
    873e:	6923      	ldr	r3, [r4, #16]
    8740:	429a      	cmp	r2, r3
    8742:	bfd4      	ite	le
    8744:	6022      	strle	r2, [r4, #0]
    8746:	6023      	strgt	r3, [r4, #0]
    8748:	e019      	b.n	877e <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    874a:	6822      	ldr	r2, [r4, #0]
    874c:	2a00      	cmp	r2, #0
    874e:	dd1a      	ble.n	8786 <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    8750:	6861      	ldr	r1, [r4, #4]
    8752:	f000 f923 	bl	899c <USBHwEPRead>
				if (iChunk < 0) {
    8756:	2800      	cmp	r0, #0
    8758:	dbea      	blt.n	8730 <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    875a:	6863      	ldr	r3, [r4, #4]
    875c:	4403      	add	r3, r0
    875e:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    8760:	6823      	ldr	r3, [r4, #0]
    8762:	1a18      	subs	r0, r3, r0
    8764:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    8766:	b9a8      	cbnz	r0, 8794 <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8768:	7a23      	ldrb	r3, [r4, #8]
    876a:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    876e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8774:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    8776:	f7ff ff95 	bl	86a4 <_HandleRequest.constprop.1>
    877a:	2800      	cmp	r0, #0
    877c:	d0d8      	beq.n	8730 <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    877e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    8782:	f7ff bf7b 	b.w	867c <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    8786:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    878c:	f000 b906 	b.w	899c <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    8790:	2880      	cmp	r0, #128	; 0x80
    8792:	d0f4      	beq.n	877e <USBHandleControlTransfer+0x8a>
    8794:	bd10      	pop	{r4, pc}
    8796:	bf00      	nop
    8798:	10000f24 	.word	0x10000f24

0000879c <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    879c:	4b02      	ldr	r3, [pc, #8]	; (87a8 <USBRegisterRequestHandler+0xc>)
    879e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    87a2:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    87a4:	6242      	str	r2, [r0, #36]	; 0x24
    87a6:	4770      	bx	lr
    87a8:	10000f24 	.word	0x10000f24

000087ac <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    87ac:	4770      	bx	lr
    87ae:	0000      	movs	r0, r0

000087b0 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    87b0:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    87b2:	4c0e      	ldr	r4, [pc, #56]	; (87ec <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    87b4:	f000 f994 	bl	8ae0 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    87b8:	480d      	ldr	r0, [pc, #52]	; (87f0 <USBInit+0x40>)
    87ba:	f000 f87d 	bl	88b8 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    87be:	4621      	mov	r1, r4
    87c0:	2000      	movs	r0, #0
    87c2:	f000 f85f 	bl	8884 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    87c6:	4621      	mov	r1, r4
    87c8:	2080      	movs	r0, #128	; 0x80
    87ca:	f000 f85b 	bl	8884 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    87ce:	2000      	movs	r0, #0
    87d0:	2140      	movs	r1, #64	; 0x40
    87d2:	f000 f83b 	bl	884c <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    87d6:	2080      	movs	r0, #128	; 0x80
    87d8:	2140      	movs	r1, #64	; 0x40
    87da:	f000 f837 	bl	884c <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    87de:	2000      	movs	r0, #0
    87e0:	4904      	ldr	r1, [pc, #16]	; (87f4 <USBInit+0x44>)
    87e2:	4a05      	ldr	r2, [pc, #20]	; (87f8 <USBInit+0x48>)
    87e4:	f7ff ffda 	bl	879c <USBRegisterRequestHandler>

	return TRUE;
}
    87e8:	2001      	movs	r0, #1
    87ea:	bd10      	pop	{r4, pc}
    87ec:	000086f5 	.word	0x000086f5
    87f0:	000087ad 	.word	0x000087ad
    87f4:	00008c91 	.word	0x00008c91
    87f8:	10000f58 	.word	0x10000f58

000087fc <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    87fc:	4b03      	ldr	r3, [pc, #12]	; (880c <Wait4DevInt+0x10>)
    87fe:	681b      	ldr	r3, [r3, #0]
    8800:	4003      	ands	r3, r0
    8802:	4283      	cmp	r3, r0
    8804:	d1fa      	bne.n	87fc <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    8806:	4b02      	ldr	r3, [pc, #8]	; (8810 <Wait4DevInt+0x14>)
    8808:	6018      	str	r0, [r3, #0]
    880a:	4770      	bx	lr
    880c:	5000c200 	.word	0x5000c200
    8810:	5000c208 	.word	0x5000c208

00008814 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    8814:	4b04      	ldr	r3, [pc, #16]	; (8828 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8816:	0400      	lsls	r0, r0, #16
    8818:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    881c:	2230      	movs	r2, #48	; 0x30
    881e:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8820:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    8822:	2010      	movs	r0, #16
    8824:	f7ff bfea 	b.w	87fc <Wait4DevInt>
    8828:	5000c208 	.word	0x5000c208

0000882c <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    882c:	b510      	push	{r4, lr}
    882e:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8830:	0424      	lsls	r4, r4, #16
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    // write command code
    USBHwCmd(bCmd);
    8832:	f7ff ffef 	bl	8814 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8836:	4b04      	ldr	r3, [pc, #16]	; (8848 <USBHwCmdWrite+0x1c>)
    8838:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    883c:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    883e:	2010      	movs	r0, #16
}
    8840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    8844:	f7ff bfda 	b.w	87fc <Wait4DevInt>
    8848:	5000c210 	.word	0x5000c210

0000884c <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    884c:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    884e:	f000 040f 	and.w	r4, r0, #15
    8852:	09c0      	lsrs	r0, r0, #7
    8854:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    8858:	2201      	movs	r2, #1
    885a:	40a2      	lsls	r2, r4
    885c:	4b08      	ldr	r3, [pc, #32]	; (8880 <USBHwEPConfig+0x34>)
    885e:	6818      	ldr	r0, [r3, #0]
    8860:	4302      	orrs	r2, r0
    8862:	601a      	str	r2, [r3, #0]
    USBEpIn = idx;
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    8864:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    8868:	605c      	str	r4, [r3, #4]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    886a:	6099      	str	r1, [r3, #8]
    Wait4DevInt(EP_RLZED);
    886c:	f7ff ffc6 	bl	87fc <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8870:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    8874:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    8876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    887a:	f7ff bfd7 	b.w	882c <USBHwCmdWrite>
    887e:	bf00      	nop
    8880:	5000c244 	.word	0x5000c244

00008884 <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8884:	4a0a      	ldr	r2, [pc, #40]	; (88b0 <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    8886:	f000 030f 	and.w	r3, r0, #15
    888a:	09c0      	lsrs	r0, r0, #7

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    888c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    8890:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    8894:	2101      	movs	r1, #1
    8896:	fa01 f000 	lsl.w	r0, r1, r0
    889a:	4b06      	ldr	r3, [pc, #24]	; (88b4 <USBHwRegisterEPIntHandler+0x30>)
    889c:	681a      	ldr	r2, [r3, #0]
    889e:	4310      	orrs	r0, r2
    88a0:	6018      	str	r0, [r3, #0]
    USBDevIntEn |= EP_SLOW;
    88a2:	f853 2c30 	ldr.w	r2, [r3, #-48]
    88a6:	f042 0204 	orr.w	r2, r2, #4
    88aa:	f843 2c30 	str.w	r2, [r3, #-48]
    88ae:	4770      	bx	lr
    88b0:	10000f60 	.word	0x10000f60
    88b4:	5000c234 	.word	0x5000c234

000088b8 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    88b8:	4b03      	ldr	r3, [pc, #12]	; (88c8 <USBHwRegisterDevIntHandler+0x10>)
    88ba:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    88bc:	4b03      	ldr	r3, [pc, #12]	; (88cc <USBHwRegisterDevIntHandler+0x14>)
    88be:	681a      	ldr	r2, [r3, #0]
    88c0:	f042 0208 	orr.w	r2, r2, #8
    88c4:	601a      	str	r2, [r3, #0]
    88c6:	4770      	bx	lr
    88c8:	10000f60 	.word	0x10000f60
    88cc:	5000c204 	.word	0x5000c204

000088d0 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    88d0:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    88d4:	20d0      	movs	r0, #208	; 0xd0
    88d6:	f7ff bfa9 	b.w	882c <USBHwCmdWrite>

000088da <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    88da:	1c01      	adds	r1, r0, #0
    88dc:	bf18      	it	ne
    88de:	2101      	movne	r1, #1
    88e0:	20fe      	movs	r0, #254	; 0xfe
    88e2:	f7ff bfa3 	b.w	882c <USBHwCmdWrite>

000088e6 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    88e6:	4601      	mov	r1, r0
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    88e8:	20f3      	movs	r0, #243	; 0xf3
    88ea:	f7ff bf9f 	b.w	882c <USBHwCmdWrite>
    88ee:	0000      	movs	r0, r0

000088f0 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    88f0:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    88f2:	f000 040f 	and.w	r4, r0, #15
    88f6:	09c0      	lsrs	r0, r0, #7
    88f8:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    88fc:	4620      	mov	r0, r4
    88fe:	f7ff ff89 	bl	8814 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8902:	0424      	lsls	r4, r4, #16
    8904:	4b05      	ldr	r3, [pc, #20]	; (891c <USBHwEPGetStatus+0x2c>)
    8906:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    890a:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    890c:	2020      	movs	r0, #32
    890e:	f7ff ff75 	bl	87fc <Wait4DevInt>
    return USBCmdData;
    8912:	4b03      	ldr	r3, [pc, #12]	; (8920 <USBHwEPGetStatus+0x30>)
    8914:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    8916:	b2c0      	uxtb	r0, r0
    8918:	bd10      	pop	{r4, pc}
    891a:	bf00      	nop
    891c:	5000c210 	.word	0x5000c210
    8920:	5000c214 	.word	0x5000c214

00008924 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    8924:	f000 030f 	and.w	r3, r0, #15
    8928:	09c0      	lsrs	r0, r0, #7
    892a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    892e:	3100      	adds	r1, #0
    8930:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8934:	bf18      	it	ne
    8936:	2101      	movne	r1, #1
    8938:	f7ff bf78 	b.w	882c <USBHwCmdWrite>

0000893c <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    893c:	b510      	push	{r4, lr}
    U32 idx;
    
    idx = EP2IDX(bEP);
    893e:	f000 030f 	and.w	r3, r0, #15
    8942:	09c0      	lsrs	r0, r0, #7
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    8944:	4614      	mov	r4, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    8946:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    894a:	4a11      	ldr	r2, [pc, #68]	; (8990 <USBHwEPWrite+0x54>)
    894c:	009b      	lsls	r3, r3, #2
    894e:	f043 0302 	orr.w	r3, r3, #2
    8952:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    8954:	4b0f      	ldr	r3, [pc, #60]	; (8994 <USBHwEPWrite+0x58>)
    8956:	601c      	str	r4, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    8958:	4b0d      	ldr	r3, [pc, #52]	; (8990 <USBHwEPWrite+0x54>)
    895a:	681a      	ldr	r2, [r3, #0]
    895c:	f012 0202 	ands.w	r2, r2, #2
    8960:	d00e      	beq.n	8980 <USBHwEPWrite+0x44>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    8962:	788a      	ldrb	r2, [r1, #2]
    8964:	78cb      	ldrb	r3, [r1, #3]
    8966:	0412      	lsls	r2, r2, #16
    8968:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    896c:	780b      	ldrb	r3, [r1, #0]
        pbBuf += 4;
    896e:	3104      	adds	r1, #4
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    8970:	431a      	orrs	r2, r3
    8972:	f811 3c03 	ldrb.w	r3, [r1, #-3]
    8976:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    897a:	4b07      	ldr	r3, [pc, #28]	; (8998 <USBHwEPWrite+0x5c>)
    897c:	601a      	str	r2, [r3, #0]
    897e:	e7eb      	b.n	8958 <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    8980:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    8982:	f7ff ff47 	bl	8814 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    8986:	20fa      	movs	r0, #250	; 0xfa
    8988:	f7ff ff44 	bl	8814 <USBHwCmd>
    
    return iLen;
}
    898c:	4620      	mov	r0, r4
    898e:	bd10      	pop	{r4, pc}
    8990:	5000c228 	.word	0x5000c228
    8994:	5000c224 	.word	0x5000c224
    8998:	5000c21c 	.word	0x5000c21c

0000899c <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    899c:	b538      	push	{r3, r4, r5, lr}
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    899e:	f000 030f 	and.w	r3, r0, #15
    89a2:	09c0      	lsrs	r0, r0, #7
    89a4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    89a8:	4c14      	ldr	r4, [pc, #80]	; (89fc <USBHwEPRead+0x60>)
    89aa:	009b      	lsls	r3, r3, #2
    89ac:	f043 0301 	orr.w	r3, r3, #1
    89b0:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    89b2:	4b13      	ldr	r3, [pc, #76]	; (8a00 <USBHwEPRead+0x64>)
    89b4:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    89b6:	051d      	lsls	r5, r3, #20
    89b8:	d5fb      	bpl.n	89b2 <USBHwEPRead+0x16>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    89ba:	055c      	lsls	r4, r3, #21
    89bc:	d51b      	bpl.n	89f6 <USBHwEPRead+0x5a>
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    89be:	f3c3 0509 	ubfx	r5, r3, #0, #10
    
    // get data
    dwData = 0;
    89c2:	2300      	movs	r3, #0
    for (i = 0; i < dwLen; i++) {
    89c4:	461c      	mov	r4, r3
    89c6:	42ac      	cmp	r4, r5
    89c8:	d00b      	beq.n	89e2 <USBHwEPRead+0x46>
        if ((i % 4) == 0) {
    89ca:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    89ce:	bf04      	itt	eq
    89d0:	4b0c      	ldreq	r3, [pc, #48]	; (8a04 <USBHwEPRead+0x68>)
    89d2:	681b      	ldreq	r3, [r3, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    89d4:	b111      	cbz	r1, 89dc <USBHwEPRead+0x40>
    89d6:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    89d8:	bf38      	it	cc
    89da:	550b      	strbcc	r3, [r1, r4]
        }
        dwData >>= 8;
    89dc:	0a1b      	lsrs	r3, r3, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    89de:	3401      	adds	r4, #1
    89e0:	e7f1      	b.n	89c6 <USBHwEPRead+0x2a>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    89e2:	4b06      	ldr	r3, [pc, #24]	; (89fc <USBHwEPRead+0x60>)
    89e4:	2200      	movs	r2, #0
    89e6:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    89e8:	f7ff ff14 	bl	8814 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    89ec:	20f2      	movs	r0, #242	; 0xf2
    89ee:	f7ff ff11 	bl	8814 <USBHwCmd>
    
    return dwLen;
    89f2:	4620      	mov	r0, r4
    89f4:	bd38      	pop	{r3, r4, r5, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    89f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    89fa:	bd38      	pop	{r3, r4, r5, pc}
    89fc:	5000c228 	.word	0x5000c228
    8a00:	5000c220 	.word	0x5000c220
    8a04:	5000c218 	.word	0x5000c218

00008a08 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    8a08:	1c01      	adds	r1, r0, #0
    8a0a:	bf18      	it	ne
    8a0c:	2101      	movne	r1, #1
    8a0e:	20d8      	movs	r0, #216	; 0xd8
    8a10:	f7ff bf0c 	b.w	882c <USBHwCmdWrite>

00008a14 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    8a14:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    8a16:	4b29      	ldr	r3, [pc, #164]	; (8abc <USBHwISR+0xa8>)
    8a18:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    8a1a:	07e1      	lsls	r1, r4, #31
    8a1c:	d511      	bpl.n	8a42 <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    8a1e:	2201      	movs	r2, #1
    8a20:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    8a22:	4b27      	ldr	r3, [pc, #156]	; (8ac0 <USBHwISR+0xac>)
    8a24:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    8a26:	b165      	cbz	r5, 8a42 <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8a28:	20f5      	movs	r0, #245	; 0xf5
    8a2a:	f7ff fef3 	bl	8814 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8a2e:	4b25      	ldr	r3, [pc, #148]	; (8ac4 <USBHwISR+0xb0>)
    8a30:	4a25      	ldr	r2, [pc, #148]	; (8ac8 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    8a32:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8a34:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    8a36:	f7ff fee1 	bl	87fc <Wait4DevInt>
    return USBCmdData;
    8a3a:	4b24      	ldr	r3, [pc, #144]	; (8acc <USBHwISR+0xb8>)
    8a3c:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    8a3e:	b2c0      	uxtb	r0, r0
    8a40:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    8a42:	0722      	lsls	r2, r4, #28
    8a44:	d517      	bpl.n	8a76 <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    8a46:	4b22      	ldr	r3, [pc, #136]	; (8ad0 <USBHwISR+0xbc>)
    8a48:	2208      	movs	r2, #8
    8a4a:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8a4c:	20fe      	movs	r0, #254	; 0xfe
    8a4e:	f7ff fee1 	bl	8814 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8a52:	4b1c      	ldr	r3, [pc, #112]	; (8ac4 <USBHwISR+0xb0>)
    8a54:	4a1f      	ldr	r2, [pc, #124]	; (8ad4 <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    8a56:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8a58:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    8a5a:	f7ff fecf 	bl	87fc <Wait4DevInt>
    return USBCmdData;
    8a5e:	4b1b      	ldr	r3, [pc, #108]	; (8acc <USBHwISR+0xb8>)
    8a60:	6818      	ldr	r0, [r3, #0]
    8a62:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    8a64:	f010 0f1a 	tst.w	r0, #26
    8a68:	d005      	beq.n	8a76 <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    8a6a:	4b15      	ldr	r3, [pc, #84]	; (8ac0 <USBHwISR+0xac>)
    8a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8a6e:	b113      	cbz	r3, 8a76 <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    8a70:	f000 0015 	and.w	r0, r0, #21
    8a74:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    8a76:	0763      	lsls	r3, r4, #29
    8a78:	d51e      	bpl.n	8ab8 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    8a7a:	4b15      	ldr	r3, [pc, #84]	; (8ad0 <USBHwISR+0xbc>)
    8a7c:	2204      	movs	r2, #4
    8a7e:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    8a80:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
    8a82:	2301      	movs	r3, #1
    8a84:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    8a86:	4a14      	ldr	r2, [pc, #80]	; (8ad8 <USBHwISR+0xc4>)
    8a88:	6812      	ldr	r2, [r2, #0]
    8a8a:	4213      	tst	r3, r2
    8a8c:	d011      	beq.n	8ab2 <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    8a8e:	4a13      	ldr	r2, [pc, #76]	; (8adc <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    8a90:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    8a92:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    8a94:	f7ff feb2 	bl	87fc <Wait4DevInt>
                bEPStat = USBCmdData;
    8a98:	4b0c      	ldr	r3, [pc, #48]	; (8acc <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    8a9a:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    8a9c:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    8a9e:	4b08      	ldr	r3, [pc, #32]	; (8ac0 <USBHwISR+0xac>)
    8aa0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8aa4:	b12b      	cbz	r3, 8ab2 <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    8aa6:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    8aaa:	b2c0      	uxtb	r0, r0
    8aac:	f001 011f 	and.w	r1, r1, #31
    8ab0:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    8ab2:	3401      	adds	r4, #1
    8ab4:	2c20      	cmp	r4, #32
    8ab6:	d1e4      	bne.n	8a82 <USBHwISR+0x6e>
    8ab8:	bd38      	pop	{r3, r4, r5, pc}
    8aba:	bf00      	nop
    8abc:	5000c200 	.word	0x5000c200
    8ac0:	10000f60 	.word	0x10000f60
    8ac4:	5000c210 	.word	0x5000c210
    8ac8:	00f50200 	.word	0x00f50200
    8acc:	5000c214 	.word	0x5000c214
    8ad0:	5000c208 	.word	0x5000c208
    8ad4:	00fe0200 	.word	0x00fe0200
    8ad8:	5000c230 	.word	0x5000c230
    8adc:	5000c238 	.word	0x5000c238

00008ae0 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    8ae0:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    8ae2:	4b24      	ldr	r3, [pc, #144]	; (8b74 <USBHwInit+0x94>)
    8ae4:	681a      	ldr	r2, [r3, #0]
    8ae6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    8aea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    8aee:	601a      	str	r2, [r3, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    8af0:	f853 2c04 	ldr.w	r2, [r3, #-4]
    8af4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    8af8:	f042 0210 	orr.w	r2, r2, #16
    8afc:	f843 2c04 	str.w	r2, [r3, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    8b00:	f853 2c04 	ldr.w	r2, [r3, #-4]
    8b04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    8b08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    8b0c:	f843 2c04 	str.w	r2, [r3, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    8b10:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    8b14:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
    8b18:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    8b1c:	f843 2c0c 	str.w	r2, [r3, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    8b20:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    8b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    8b28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    8b2c:	f843 2c0c 	str.w	r2, [r3, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    8b30:	4b11      	ldr	r3, [pc, #68]	; (8b78 <USBHwInit+0x98>)
    8b32:	681a      	ldr	r2, [r3, #0]
    8b34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    8b38:	601a      	str	r2, [r3, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    8b3a:	4b10      	ldr	r3, [pc, #64]	; (8b7c <USBHwInit+0x9c>)
    8b3c:	681a      	ldr	r2, [r3, #0]
    8b3e:	f042 0212 	orr.w	r2, r2, #18
    8b42:	601a      	str	r2, [r3, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    8b44:	4b0e      	ldr	r3, [pc, #56]	; (8b80 <USBHwInit+0xa0>)
    8b46:	681a      	ldr	r2, [r3, #0]
    8b48:	0792      	lsls	r2, r2, #30
    8b4a:	d5fb      	bpl.n	8b44 <USBHwInit+0x64>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    8b4c:	681a      	ldr	r2, [r3, #0]
    8b4e:	06d0      	lsls	r0, r2, #27
    8b50:	d5fc      	bpl.n	8b4c <USBHwInit+0x6c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    8b52:	4b0c      	ldr	r3, [pc, #48]	; (8b84 <USBHwInit+0xa4>)
    8b54:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    8b56:	4a0c      	ldr	r2, [pc, #48]	; (8b88 <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    8b58:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    8b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8b5e:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    8b60:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    8b62:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    8b64:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    8b66:	4b09      	ldr	r3, [pc, #36]	; (8b8c <USBHwInit+0xac>)
    8b68:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    8b6a:	f7ff febc 	bl	88e6 <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    8b6e:	2001      	movs	r0, #1
    8b70:	bd08      	pop	{r3, pc}
    8b72:	bf00      	nop
    8b74:	4002c010 	.word	0x4002c010
    8b78:	400fc0c4 	.word	0x400fc0c4
    8b7c:	5000cff4 	.word	0x5000cff4
    8b80:	5000cff8 	.word	0x5000cff8
    8b84:	5000c204 	.word	0x5000c204
    8b88:	5000c208 	.word	0x5000c208
    8b8c:	5000c240 	.word	0x5000c240

00008b90 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    8b90:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    8b92:	4c16      	ldr	r4, [pc, #88]	; (8bec <USBFilterOsVendorMessage+0x5c>)
    8b94:	2500      	movs	r5, #0
    8b96:	7824      	ldrb	r4, [r4, #0]
    8b98:	b314      	cbz	r4, 8be0 <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    8b9a:	7846      	ldrb	r6, [r0, #1]
    8b9c:	42a6      	cmp	r6, r4
    8b9e:	d121      	bne.n	8be4 <USBFilterOsVendorMessage+0x54>
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    8ba0:	8884      	ldrh	r4, [r0, #4]
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    8ba2:	600d      	str	r5, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    8ba4:	2c04      	cmp	r4, #4
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
	
		int iRequestLength = pSetup->wLength;
    8ba6:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    8ba8:	8845      	ldrh	r5, [r0, #2]
	
		switch (pSetup->wIndex) {
    8baa:	d005      	beq.n	8bb8 <USBFilterOsVendorMessage+0x28>
    8bac:	2c05      	cmp	r4, #5
    8bae:	d11b      	bne.n	8be8 <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    8bb0:	480f      	ldr	r0, [pc, #60]	; (8bf0 <USBFilterOsVendorMessage+0x60>)
    8bb2:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    8bb4:	2092      	movs	r0, #146	; 0x92
    8bb6:	e002      	b.n	8bbe <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    8bb8:	480e      	ldr	r0, [pc, #56]	; (8bf4 <USBFilterOsVendorMessage+0x64>)
    8bba:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    8bbc:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    8bbe:	6010      	str	r0, [r2, #0]
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
    8bc0:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    8bc2:	0a28      	lsrs	r0, r5, #8
    8bc4:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    8bc6:	4284      	cmp	r4, r0
    8bc8:	db0e      	blt.n	8be8 <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    8bca:	681d      	ldr	r5, [r3, #0]
    8bcc:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    8bce:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    8bd0:	601d      	str	r5, [r3, #0]
    8bd2:	42b0      	cmp	r0, r6
    8bd4:	bfd4      	ite	le
    8bd6:	6010      	strle	r0, [r2, #0]
    8bd8:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    8bda:	2001      	movs	r0, #1
    8bdc:	6008      	str	r0, [r1, #0]
		return TRUE;
    8bde:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    8be0:	4620      	mov	r0, r4
    8be2:	bd70      	pop	{r4, r5, r6, pc}
    8be4:	4628      	mov	r0, r5
    8be6:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    8be8:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    8bea:	bd70      	pop	{r4, r5, r6, pc}
    8bec:	10000fa8 	.word	0x10000fa8
    8bf0:	1000095d 	.word	0x1000095d
    8bf4:	0000a10c 	.word	0x0000a10c

00008bf8 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    8bf8:	b510      	push	{r4, lr}
	bMsVendorIndex = bVendorRequestIndex;
    8bfa:	4b0a      	ldr	r3, [pc, #40]	; (8c24 <USBRegisterWinusbInterface+0x2c>)
    8bfc:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    8bfe:	b179      	cbz	r1, 8c20 <USBRegisterWinusbInterface+0x28>
    8c00:	4b09      	ldr	r3, [pc, #36]	; (8c28 <USBRegisterWinusbInterface+0x30>)
    8c02:	2200      	movs	r2, #0
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    8c04:	5c8c      	ldrb	r4, [r1, r2]
    8c06:	1e98      	subs	r0, r3, #2
    8c08:	b13c      	cbz	r4, 8c1a <USBRegisterWinusbInterface+0x22>
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    8c0a:	3201      	adds	r2, #1
    8c0c:	2a26      	cmp	r2, #38	; 0x26
    8c0e:	4618      	mov	r0, r3
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    8c10:	f803 4c02 	strb.w	r4, [r3, #-2]
    8c14:	f103 0302 	add.w	r3, r3, #2
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    8c18:	d1f4      	bne.n	8c04 <USBRegisterWinusbInterface+0xc>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    8c1a:	2300      	movs	r3, #0
    8c1c:	7003      	strb	r3, [r0, #0]
	pbWriteCursor[2] = 0;
    8c1e:	7083      	strb	r3, [r0, #2]
    8c20:	bd10      	pop	{r4, pc}
    8c22:	bf00      	nop
    8c24:	10000fa8 	.word	0x10000fa8
    8c28:	100009a1 	.word	0x100009a1

00008c2c <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    8c2c:	4b01      	ldr	r3, [pc, #4]	; (8c34 <USBRegisterDescriptors+0x8>)
    8c2e:	6058      	str	r0, [r3, #4]
    8c30:	4770      	bx	lr
    8c32:	bf00      	nop
    8c34:	10000fa8 	.word	0x10000fa8

00008c38 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    8c38:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    8c3a:	0a05      	lsrs	r5, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    8c3c:	2d03      	cmp	r5, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    8c3e:	b2c6      	uxtb	r6, r0
    8c40:	4911      	ldr	r1, [pc, #68]	; (8c88 <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    8c42:	d108      	bne.n	8c56 <USBGetDescriptor+0x1e>
    8c44:	2eee      	cmp	r6, #238	; 0xee
    8c46:	d106      	bne.n	8c56 <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    8c48:	4810      	ldr	r0, [pc, #64]	; (8c8c <USBGetDescriptor+0x54>)
    8c4a:	7809      	ldrb	r1, [r1, #0]
	
	*ppbData = abOsStringDescriptor;
    8c4c:	3092      	adds	r0, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    8c4e:	7401      	strb	r1, [r0, #16]
	
	*ppbData = abOsStringDescriptor;
    8c50:	6018      	str	r0, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    8c52:	2312      	movs	r3, #18
    8c54:	e012      	b.n	8c7c <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    8c56:	6849      	ldr	r1, [r1, #4]
	iCurIndex = 0;
    8c58:	2400      	movs	r4, #0
	
	while (pab[DESC_bLength] != 0) {
    8c5a:	e001      	b.n	8c60 <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    8c5c:	3401      	adds	r4, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    8c5e:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    8c60:	7808      	ldrb	r0, [r1, #0]
    8c62:	b180      	cbz	r0, 8c86 <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    8c64:	784f      	ldrb	r7, [r1, #1]
    8c66:	42af      	cmp	r7, r5
    8c68:	d1f9      	bne.n	8c5e <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    8c6a:	42b4      	cmp	r4, r6
    8c6c:	d1f6      	bne.n	8c5c <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    8c6e:	2d02      	cmp	r5, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    8c70:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    8c72:	d106      	bne.n	8c82 <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    8c74:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    8c76:	788b      	ldrb	r3, [r1, #2]
    8c78:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    8c7c:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    8c7e:	2001      	movs	r0, #1
    8c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    8c82:	780b      	ldrb	r3, [r1, #0]
    8c84:	e7fa      	b.n	8c7c <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    8c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c88:	10000fa8 	.word	0x10000fa8
    8c8c:	1000095d 	.word	0x1000095d

00008c90 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8c94:	4e4b      	ldr	r6, [pc, #300]	; (8dc4 <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8c96:	4604      	mov	r4, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8c98:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8c9a:	460d      	mov	r5, r1
    8c9c:	4617      	mov	r7, r2
    8c9e:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8ca0:	b943      	cbnz	r3, 8cb4 <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    8ca2:	7826      	ldrb	r6, [r4, #0]
    8ca4:	f006 061f 	and.w	r6, r6, #31
    8ca8:	2e01      	cmp	r6, #1
    8caa:	d053      	beq.n	8d54 <USBHandleStandardRequest+0xc4>
    8cac:	d306      	bcc.n	8cbc <USBHandleStandardRequest+0x2c>
    8cae:	2e02      	cmp	r6, #2
    8cb0:	d062      	beq.n	8d78 <USBHandleStandardRequest+0xe8>
    8cb2:	e081      	b.n	8db8 <USBHandleStandardRequest+0x128>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8cb4:	4798      	blx	r3
    8cb6:	2800      	cmp	r0, #0
    8cb8:	d0f3      	beq.n	8ca2 <USBHandleStandardRequest+0x12>
    8cba:	e080      	b.n	8dbe <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8cbc:	7862      	ldrb	r2, [r4, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    8cbe:	683b      	ldr	r3, [r7, #0]

	switch (pSetup->bRequest) {
    8cc0:	2a09      	cmp	r2, #9
    8cc2:	d879      	bhi.n	8db8 <USBHandleStandardRequest+0x128>
    8cc4:	e8df f002 	tbb	[pc, r2]
    8cc8:	78787805 	.word	0x78787805
    8ccc:	780d0978 	.word	0x780d0978
    8cd0:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    8cd2:	2200      	movs	r2, #0
    8cd4:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    8cd6:	705a      	strb	r2, [r3, #1]
    8cd8:	e045      	b.n	8d66 <USBHandleStandardRequest+0xd6>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    8cda:	78a0      	ldrb	r0, [r4, #2]
    8cdc:	f7ff fdf8 	bl	88d0 <USBHwSetAddress>
    8ce0:	e06d      	b.n	8dbe <USBHandleStandardRequest+0x12e>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    8ce2:	8860      	ldrh	r0, [r4, #2]
    8ce4:	88a1      	ldrh	r1, [r4, #4]
    8ce6:	462a      	mov	r2, r5
    8ce8:	463b      	mov	r3, r7
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    8cea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    8cee:	f7ff bfa3 	b.w	8c38 <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    8cf2:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    8cf6:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    8cf8:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    8cfa:	6028      	str	r0, [r5, #0]
    8cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    8d00:	78a6      	ldrb	r6, [r4, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    8d02:	b90e      	cbnz	r6, 8d08 <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    8d04:	4630      	mov	r0, r6
    8d06:	e01f      	b.n	8d48 <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    8d08:	27ff      	movs	r7, #255	; 0xff
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    8d0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
		bCurConfig = 0xFF;
    8d0e:	46b9      	mov	r9, r7
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    8d10:	782b      	ldrb	r3, [r5, #0]
    8d12:	b1c3      	cbz	r3, 8d46 <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    8d14:	786b      	ldrb	r3, [r5, #1]
    8d16:	2b04      	cmp	r3, #4
    8d18:	d006      	beq.n	8d28 <USBHandleStandardRequest+0x98>
    8d1a:	2b05      	cmp	r3, #5
    8d1c:	d006      	beq.n	8d2c <USBHandleStandardRequest+0x9c>
    8d1e:	2b02      	cmp	r3, #2
    8d20:	d10e      	bne.n	8d40 <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    8d22:	f895 9005 	ldrb.w	r9, [r5, #5]
    8d26:	e00b      	b.n	8d40 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    8d28:	78ef      	ldrb	r7, [r5, #3]
    8d2a:	e009      	b.n	8d40 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    8d2c:	45b1      	cmp	r9, r6
    8d2e:	d107      	bne.n	8d40 <USBHandleStandardRequest+0xb0>
    8d30:	b937      	cbnz	r7, 8d40 <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    8d32:	7969      	ldrb	r1, [r5, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    8d34:	792b      	ldrb	r3, [r5, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    8d36:	78a8      	ldrb	r0, [r5, #2]
    8d38:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    8d3c:	f7ff fd86 	bl	884c <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    8d40:	782b      	ldrb	r3, [r5, #0]
    8d42:	441d      	add	r5, r3
    8d44:	e7e4      	b.n	8d10 <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    8d46:	2001      	movs	r0, #1
    8d48:	f7ff fe5e 	bl	8a08 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    8d4c:	8863      	ldrh	r3, [r4, #2]
    8d4e:	f888 300c 	strb.w	r3, [r8, #12]
    8d52:	e034      	b.n	8dbe <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8d54:	7863      	ldrb	r3, [r4, #1]
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    8d56:	683a      	ldr	r2, [r7, #0]
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8d58:	2b0a      	cmp	r3, #10
    8d5a:	d006      	beq.n	8d6a <USBHandleStandardRequest+0xda>
    8d5c:	2b0b      	cmp	r3, #11
    8d5e:	d007      	beq.n	8d70 <USBHandleStandardRequest+0xe0>
    8d60:	bb53      	cbnz	r3, 8db8 <USBHandleStandardRequest+0x128>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    8d62:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    8d64:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    8d66:	2302      	movs	r3, #2
    8d68:	e004      	b.n	8d74 <USBHandleStandardRequest+0xe4>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    8d6a:	2300      	movs	r3, #0
    8d6c:	7013      	strb	r3, [r2, #0]
    8d6e:	e016      	b.n	8d9e <USBHandleStandardRequest+0x10e>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    8d70:	8863      	ldrh	r3, [r4, #2]
    8d72:	bb0b      	cbnz	r3, 8db8 <USBHandleStandardRequest+0x128>
			return FALSE;
		}
		*piLen = 0;
    8d74:	602b      	str	r3, [r5, #0]
    8d76:	e022      	b.n	8dbe <USBHandleStandardRequest+0x12e>
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    8d78:	f8d7 8000 	ldr.w	r8, [r7]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8d7c:	7867      	ldrb	r7, [r4, #1]
    8d7e:	2f01      	cmp	r7, #1
    8d80:	d00f      	beq.n	8da2 <USBHandleStandardRequest+0x112>
    8d82:	d302      	bcc.n	8d8a <USBHandleStandardRequest+0xfa>
    8d84:	2f03      	cmp	r7, #3
    8d86:	d010      	beq.n	8daa <USBHandleStandardRequest+0x11a>
    8d88:	e016      	b.n	8db8 <USBHandleStandardRequest+0x128>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    8d8a:	7920      	ldrb	r0, [r4, #4]
    8d8c:	f7ff fdb0 	bl	88f0 <USBHwEPGetStatus>
		pbData[1] = 0;
    8d90:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    8d92:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8d96:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    8d9a:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    8d9e:	602e      	str	r6, [r5, #0]
    8da0:	e00d      	b.n	8dbe <USBHandleStandardRequest+0x12e>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    8da2:	8861      	ldrh	r1, [r4, #2]
    8da4:	b941      	cbnz	r1, 8db8 <USBHandleStandardRequest+0x128>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    8da6:	7920      	ldrb	r0, [r4, #4]
    8da8:	e003      	b.n	8db2 <USBHandleStandardRequest+0x122>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    8daa:	8863      	ldrh	r3, [r4, #2]
    8dac:	b923      	cbnz	r3, 8db8 <USBHandleStandardRequest+0x128>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    8dae:	7920      	ldrb	r0, [r4, #4]
    8db0:	2101      	movs	r1, #1
    8db2:	f7ff fdb7 	bl	8924 <USBHwEPStall>
    8db6:	e002      	b.n	8dbe <USBHandleStandardRequest+0x12e>
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
    8db8:	2000      	movs	r0, #0
    8dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
		return TRUE;
    8dbe:	2001      	movs	r0, #1
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    8dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8dc4:	10000fa8 	.word	0x10000fa8

00008dc8 <__aeabi_llsl>:
    8dc8:	4091      	lsls	r1, r2
    8dca:	1c03      	adds	r3, r0, #0
    8dcc:	4090      	lsls	r0, r2
    8dce:	469c      	mov	ip, r3
    8dd0:	3a20      	subs	r2, #32
    8dd2:	4093      	lsls	r3, r2
    8dd4:	4319      	orrs	r1, r3
    8dd6:	4252      	negs	r2, r2
    8dd8:	4663      	mov	r3, ip
    8dda:	40d3      	lsrs	r3, r2
    8ddc:	4319      	orrs	r1, r3
    8dde:	4770      	bx	lr

00008de0 <malloc>:
    8de0:	f240 4348 	movw	r3, #1096	; 0x448
    8de4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8de8:	4601      	mov	r1, r0
    8dea:	6818      	ldr	r0, [r3, #0]
    8dec:	f000 b800 	b.w	8df0 <_malloc_r>

00008df0 <_malloc_r>:
    8df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8df4:	f101 050b 	add.w	r5, r1, #11
    8df8:	2d16      	cmp	r5, #22
    8dfa:	bf87      	ittee	hi
    8dfc:	f025 0507 	bichi.w	r5, r5, #7
    8e00:	0feb      	lsrhi	r3, r5, #31
    8e02:	2300      	movls	r3, #0
    8e04:	2510      	movls	r5, #16
    8e06:	428d      	cmp	r5, r1
    8e08:	bf2c      	ite	cs
    8e0a:	4619      	movcs	r1, r3
    8e0c:	f043 0101 	orrcc.w	r1, r3, #1
    8e10:	b083      	sub	sp, #12
    8e12:	4607      	mov	r7, r0
    8e14:	2900      	cmp	r1, #0
    8e16:	f040 80b4 	bne.w	8f82 <_malloc_r+0x192>
    8e1a:	f000 fb45 	bl	94a8 <__malloc_lock>
    8e1e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    8e22:	d21f      	bcs.n	8e64 <_malloc_r+0x74>
    8e24:	f640 2604 	movw	r6, #2564	; 0xa04
    8e28:	f2c1 0600 	movt	r6, #4096	; 0x1000
    8e2c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    8e30:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
    8e34:	68dc      	ldr	r4, [r3, #12]
    8e36:	429c      	cmp	r4, r3
    8e38:	f000 81f4 	beq.w	9224 <_malloc_r+0x434>
    8e3c:	6863      	ldr	r3, [r4, #4]
    8e3e:	68e2      	ldr	r2, [r4, #12]
    8e40:	f023 0303 	bic.w	r3, r3, #3
    8e44:	4423      	add	r3, r4
    8e46:	6858      	ldr	r0, [r3, #4]
    8e48:	68a1      	ldr	r1, [r4, #8]
    8e4a:	f040 0501 	orr.w	r5, r0, #1
    8e4e:	60ca      	str	r2, [r1, #12]
    8e50:	4638      	mov	r0, r7
    8e52:	6091      	str	r1, [r2, #8]
    8e54:	605d      	str	r5, [r3, #4]
    8e56:	f000 fb29 	bl	94ac <__malloc_unlock>
    8e5a:	3408      	adds	r4, #8
    8e5c:	4620      	mov	r0, r4
    8e5e:	b003      	add	sp, #12
    8e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e64:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    8e68:	bf04      	itt	eq
    8e6a:	217e      	moveq	r1, #126	; 0x7e
    8e6c:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
    8e70:	f040 808e 	bne.w	8f90 <_malloc_r+0x1a0>
    8e74:	f640 2604 	movw	r6, #2564	; 0xa04
    8e78:	f2c1 0600 	movt	r6, #4096	; 0x1000
    8e7c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8e80:	68cc      	ldr	r4, [r1, #12]
    8e82:	42a1      	cmp	r1, r4
    8e84:	d106      	bne.n	8e94 <_malloc_r+0xa4>
    8e86:	e00d      	b.n	8ea4 <_malloc_r+0xb4>
    8e88:	2b00      	cmp	r3, #0
    8e8a:	f280 8163 	bge.w	9154 <_malloc_r+0x364>
    8e8e:	68e4      	ldr	r4, [r4, #12]
    8e90:	42a1      	cmp	r1, r4
    8e92:	d007      	beq.n	8ea4 <_malloc_r+0xb4>
    8e94:	6862      	ldr	r2, [r4, #4]
    8e96:	f022 0203 	bic.w	r2, r2, #3
    8e9a:	1b53      	subs	r3, r2, r5
    8e9c:	2b0f      	cmp	r3, #15
    8e9e:	ddf3      	ble.n	8e88 <_malloc_r+0x98>
    8ea0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    8ea4:	f10c 0c01 	add.w	ip, ip, #1
    8ea8:	f640 2304 	movw	r3, #2564	; 0xa04
    8eac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8eb0:	6934      	ldr	r4, [r6, #16]
    8eb2:	f103 0e08 	add.w	lr, r3, #8
    8eb6:	4574      	cmp	r4, lr
    8eb8:	bf08      	it	eq
    8eba:	685a      	ldreq	r2, [r3, #4]
    8ebc:	d021      	beq.n	8f02 <_malloc_r+0x112>
    8ebe:	6861      	ldr	r1, [r4, #4]
    8ec0:	f021 0103 	bic.w	r1, r1, #3
    8ec4:	1b4a      	subs	r2, r1, r5
    8ec6:	2a0f      	cmp	r2, #15
    8ec8:	f300 8190 	bgt.w	91ec <_malloc_r+0x3fc>
    8ecc:	2a00      	cmp	r2, #0
    8ece:	f8c3 e014 	str.w	lr, [r3, #20]
    8ed2:	f8c3 e010 	str.w	lr, [r3, #16]
    8ed6:	da66      	bge.n	8fa6 <_malloc_r+0x1b6>
    8ed8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8edc:	f080 815f 	bcs.w	919e <_malloc_r+0x3ae>
    8ee0:	08c9      	lsrs	r1, r1, #3
    8ee2:	108a      	asrs	r2, r1, #2
    8ee4:	f04f 0801 	mov.w	r8, #1
    8ee8:	fa08 f802 	lsl.w	r8, r8, r2
    8eec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    8ef0:	685a      	ldr	r2, [r3, #4]
    8ef2:	6888      	ldr	r0, [r1, #8]
    8ef4:	ea48 0202 	orr.w	r2, r8, r2
    8ef8:	60a0      	str	r0, [r4, #8]
    8efa:	60e1      	str	r1, [r4, #12]
    8efc:	605a      	str	r2, [r3, #4]
    8efe:	608c      	str	r4, [r1, #8]
    8f00:	60c4      	str	r4, [r0, #12]
    8f02:	ea4f 03ac 	mov.w	r3, ip, asr #2
    8f06:	2001      	movs	r0, #1
    8f08:	4098      	lsls	r0, r3
    8f0a:	4290      	cmp	r0, r2
    8f0c:	d858      	bhi.n	8fc0 <_malloc_r+0x1d0>
    8f0e:	4202      	tst	r2, r0
    8f10:	d106      	bne.n	8f20 <_malloc_r+0x130>
    8f12:	f02c 0c03 	bic.w	ip, ip, #3
    8f16:	0040      	lsls	r0, r0, #1
    8f18:	4202      	tst	r2, r0
    8f1a:	f10c 0c04 	add.w	ip, ip, #4
    8f1e:	d0fa      	beq.n	8f16 <_malloc_r+0x126>
    8f20:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
    8f24:	4644      	mov	r4, r8
    8f26:	46e1      	mov	r9, ip
    8f28:	68e3      	ldr	r3, [r4, #12]
    8f2a:	429c      	cmp	r4, r3
    8f2c:	d107      	bne.n	8f3e <_malloc_r+0x14e>
    8f2e:	e170      	b.n	9212 <_malloc_r+0x422>
    8f30:	2a00      	cmp	r2, #0
    8f32:	f280 8181 	bge.w	9238 <_malloc_r+0x448>
    8f36:	68db      	ldr	r3, [r3, #12]
    8f38:	429c      	cmp	r4, r3
    8f3a:	f000 816a 	beq.w	9212 <_malloc_r+0x422>
    8f3e:	6859      	ldr	r1, [r3, #4]
    8f40:	f021 0103 	bic.w	r1, r1, #3
    8f44:	1b4a      	subs	r2, r1, r5
    8f46:	2a0f      	cmp	r2, #15
    8f48:	ddf2      	ble.n	8f30 <_malloc_r+0x140>
    8f4a:	461c      	mov	r4, r3
    8f4c:	f854 cf08 	ldr.w	ip, [r4, #8]!
    8f50:	68d9      	ldr	r1, [r3, #12]
    8f52:	f045 0901 	orr.w	r9, r5, #1
    8f56:	f042 0801 	orr.w	r8, r2, #1
    8f5a:	441d      	add	r5, r3
    8f5c:	f8c3 9004 	str.w	r9, [r3, #4]
    8f60:	4638      	mov	r0, r7
    8f62:	f8cc 100c 	str.w	r1, [ip, #12]
    8f66:	f8c1 c008 	str.w	ip, [r1, #8]
    8f6a:	6175      	str	r5, [r6, #20]
    8f6c:	6135      	str	r5, [r6, #16]
    8f6e:	f8c5 e00c 	str.w	lr, [r5, #12]
    8f72:	f8c5 e008 	str.w	lr, [r5, #8]
    8f76:	f8c5 8004 	str.w	r8, [r5, #4]
    8f7a:	50aa      	str	r2, [r5, r2]
    8f7c:	f000 fa96 	bl	94ac <__malloc_unlock>
    8f80:	e76c      	b.n	8e5c <_malloc_r+0x6c>
    8f82:	230c      	movs	r3, #12
    8f84:	2400      	movs	r4, #0
    8f86:	6003      	str	r3, [r0, #0]
    8f88:	4620      	mov	r0, r4
    8f8a:	b003      	add	sp, #12
    8f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f90:	f1bc 0f04 	cmp.w	ip, #4
    8f94:	f200 80ef 	bhi.w	9176 <_malloc_r+0x386>
    8f98:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    8f9c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    8fa0:	ea4f 014c 	mov.w	r1, ip, lsl #1
    8fa4:	e766      	b.n	8e74 <_malloc_r+0x84>
    8fa6:	4421      	add	r1, r4
    8fa8:	684b      	ldr	r3, [r1, #4]
    8faa:	4638      	mov	r0, r7
    8fac:	f043 0301 	orr.w	r3, r3, #1
    8fb0:	604b      	str	r3, [r1, #4]
    8fb2:	f000 fa7b 	bl	94ac <__malloc_unlock>
    8fb6:	3408      	adds	r4, #8
    8fb8:	4620      	mov	r0, r4
    8fba:	b003      	add	sp, #12
    8fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8fc0:	68b4      	ldr	r4, [r6, #8]
    8fc2:	6863      	ldr	r3, [r4, #4]
    8fc4:	f023 0903 	bic.w	r9, r3, #3
    8fc8:	454d      	cmp	r5, r9
    8fca:	d804      	bhi.n	8fd6 <_malloc_r+0x1e6>
    8fcc:	ebc5 0309 	rsb	r3, r5, r9
    8fd0:	2b0f      	cmp	r3, #15
    8fd2:	f300 80af 	bgt.w	9134 <_malloc_r+0x344>
    8fd6:	f640 73c0 	movw	r3, #4032	; 0xfc0
    8fda:	f640 6a10 	movw	sl, #3600	; 0xe10
    8fde:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8fe2:	f2c1 0a00 	movt	sl, #4096	; 0x1000
    8fe6:	681b      	ldr	r3, [r3, #0]
    8fe8:	f8da 1000 	ldr.w	r1, [sl]
    8fec:	442b      	add	r3, r5
    8fee:	3101      	adds	r1, #1
    8ff0:	bf1d      	ittte	ne
    8ff2:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
    8ff6:	330f      	addne	r3, #15
    8ff8:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
    8ffc:	f103 0c10 	addeq.w	ip, r3, #16
    9000:	bf18      	it	ne
    9002:	f023 0c0f 	bicne.w	ip, r3, #15
    9006:	eb04 0209 	add.w	r2, r4, r9
    900a:	4661      	mov	r1, ip
    900c:	4638      	mov	r0, r7
    900e:	e88d 1004 	stmia.w	sp, {r2, ip}
    9012:	f000 fa4d 	bl	94b0 <_sbrk_r>
    9016:	e89d 1004 	ldmia.w	sp, {r2, ip}
    901a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    901e:	4680      	mov	r8, r0
    9020:	f000 8120 	beq.w	9264 <_malloc_r+0x474>
    9024:	4282      	cmp	r2, r0
    9026:	f200 811a 	bhi.w	925e <_malloc_r+0x46e>
    902a:	f640 7bc4 	movw	fp, #4036	; 0xfc4
    902e:	f2c1 0b00 	movt	fp, #4096	; 0x1000
    9032:	f8db 3000 	ldr.w	r3, [fp]
    9036:	4542      	cmp	r2, r8
    9038:	4463      	add	r3, ip
    903a:	f8cb 3000 	str.w	r3, [fp]
    903e:	f000 815f 	beq.w	9300 <_malloc_r+0x510>
    9042:	f8da 0000 	ldr.w	r0, [sl]
    9046:	f640 6110 	movw	r1, #3600	; 0xe10
    904a:	3001      	adds	r0, #1
    904c:	bf1c      	itt	ne
    904e:	ebc2 0208 	rsbne	r2, r2, r8
    9052:	189b      	addne	r3, r3, r2
    9054:	f2c1 0100 	movt	r1, #4096	; 0x1000
    9058:	bf0c      	ite	eq
    905a:	f8c1 8000 	streq.w	r8, [r1]
    905e:	f8cb 3000 	strne.w	r3, [fp]
    9062:	f018 0307 	ands.w	r3, r8, #7
    9066:	bf1f      	itttt	ne
    9068:	f1c3 0208 	rsbne	r2, r3, #8
    906c:	4490      	addne	r8, r2
    906e:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
    9072:	f103 0a08 	addne.w	sl, r3, #8
    9076:	eb08 030c 	add.w	r3, r8, ip
    907a:	bf08      	it	eq
    907c:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
    9080:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9084:	ebc3 0a0a 	rsb	sl, r3, sl
    9088:	4651      	mov	r1, sl
    908a:	4638      	mov	r0, r7
    908c:	f000 fa10 	bl	94b0 <_sbrk_r>
    9090:	1c43      	adds	r3, r0, #1
    9092:	bf18      	it	ne
    9094:	ebc8 0100 	rsbne	r1, r8, r0
    9098:	f8db 3000 	ldr.w	r3, [fp]
    909c:	bf15      	itete	ne
    909e:	4451      	addne	r1, sl
    90a0:	f04f 0a00 	moveq.w	sl, #0
    90a4:	f041 0101 	orrne.w	r1, r1, #1
    90a8:	2101      	moveq	r1, #1
    90aa:	f640 72c4 	movw	r2, #4036	; 0xfc4
    90ae:	4453      	add	r3, sl
    90b0:	42b4      	cmp	r4, r6
    90b2:	f8c6 8008 	str.w	r8, [r6, #8]
    90b6:	f8cb 3000 	str.w	r3, [fp]
    90ba:	f8c8 1004 	str.w	r1, [r8, #4]
    90be:	f2c1 0200 	movt	r2, #4096	; 0x1000
    90c2:	d018      	beq.n	90f6 <_malloc_r+0x306>
    90c4:	f1b9 0f0f 	cmp.w	r9, #15
    90c8:	f240 80fb 	bls.w	92c2 <_malloc_r+0x4d2>
    90cc:	6861      	ldr	r1, [r4, #4]
    90ce:	f1a9 000c 	sub.w	r0, r9, #12
    90d2:	f020 0007 	bic.w	r0, r0, #7
    90d6:	f001 0101 	and.w	r1, r1, #1
    90da:	ea40 0c01 	orr.w	ip, r0, r1
    90de:	f04f 0e05 	mov.w	lr, #5
    90e2:	1821      	adds	r1, r4, r0
    90e4:	280f      	cmp	r0, #15
    90e6:	f8c4 c004 	str.w	ip, [r4, #4]
    90ea:	f8c1 e004 	str.w	lr, [r1, #4]
    90ee:	f8c1 e008 	str.w	lr, [r1, #8]
    90f2:	f200 8111 	bhi.w	9318 <_malloc_r+0x528>
    90f6:	f640 72bc 	movw	r2, #4028	; 0xfbc
    90fa:	f2c1 0200 	movt	r2, #4096	; 0x1000
    90fe:	6811      	ldr	r1, [r2, #0]
    9100:	68b4      	ldr	r4, [r6, #8]
    9102:	428b      	cmp	r3, r1
    9104:	bf88      	it	hi
    9106:	6013      	strhi	r3, [r2, #0]
    9108:	f640 72b8 	movw	r2, #4024	; 0xfb8
    910c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9110:	6811      	ldr	r1, [r2, #0]
    9112:	428b      	cmp	r3, r1
    9114:	bf88      	it	hi
    9116:	6013      	strhi	r3, [r2, #0]
    9118:	6862      	ldr	r2, [r4, #4]
    911a:	f022 0203 	bic.w	r2, r2, #3
    911e:	4295      	cmp	r5, r2
    9120:	ebc5 0302 	rsb	r3, r5, r2
    9124:	d801      	bhi.n	912a <_malloc_r+0x33a>
    9126:	2b0f      	cmp	r3, #15
    9128:	dc04      	bgt.n	9134 <_malloc_r+0x344>
    912a:	4638      	mov	r0, r7
    912c:	f000 f9be 	bl	94ac <__malloc_unlock>
    9130:	2400      	movs	r4, #0
    9132:	e693      	b.n	8e5c <_malloc_r+0x6c>
    9134:	f045 0201 	orr.w	r2, r5, #1
    9138:	f043 0301 	orr.w	r3, r3, #1
    913c:	4425      	add	r5, r4
    913e:	6062      	str	r2, [r4, #4]
    9140:	4638      	mov	r0, r7
    9142:	60b5      	str	r5, [r6, #8]
    9144:	606b      	str	r3, [r5, #4]
    9146:	f000 f9b1 	bl	94ac <__malloc_unlock>
    914a:	3408      	adds	r4, #8
    914c:	4620      	mov	r0, r4
    914e:	b003      	add	sp, #12
    9150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9154:	4422      	add	r2, r4
    9156:	6850      	ldr	r0, [r2, #4]
    9158:	68e3      	ldr	r3, [r4, #12]
    915a:	68a1      	ldr	r1, [r4, #8]
    915c:	f040 0501 	orr.w	r5, r0, #1
    9160:	60cb      	str	r3, [r1, #12]
    9162:	4638      	mov	r0, r7
    9164:	6099      	str	r1, [r3, #8]
    9166:	6055      	str	r5, [r2, #4]
    9168:	f000 f9a0 	bl	94ac <__malloc_unlock>
    916c:	3408      	adds	r4, #8
    916e:	4620      	mov	r0, r4
    9170:	b003      	add	sp, #12
    9172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9176:	f1bc 0f14 	cmp.w	ip, #20
    917a:	bf9c      	itt	ls
    917c:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
    9180:	ea4f 014c 	movls.w	r1, ip, lsl #1
    9184:	f67f ae76 	bls.w	8e74 <_malloc_r+0x84>
    9188:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    918c:	f200 808f 	bhi.w	92ae <_malloc_r+0x4be>
    9190:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    9194:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    9198:	ea4f 014c 	mov.w	r1, ip, lsl #1
    919c:	e66a      	b.n	8e74 <_malloc_r+0x84>
    919e:	0a4b      	lsrs	r3, r1, #9
    91a0:	2b04      	cmp	r3, #4
    91a2:	d958      	bls.n	9256 <_malloc_r+0x466>
    91a4:	2b14      	cmp	r3, #20
    91a6:	bf9c      	itt	ls
    91a8:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
    91ac:	0050      	lslls	r0, r2, #1
    91ae:	d905      	bls.n	91bc <_malloc_r+0x3cc>
    91b0:	2b54      	cmp	r3, #84	; 0x54
    91b2:	f200 80ba 	bhi.w	932a <_malloc_r+0x53a>
    91b6:	0b0a      	lsrs	r2, r1, #12
    91b8:	326e      	adds	r2, #110	; 0x6e
    91ba:	0050      	lsls	r0, r2, #1
    91bc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    91c0:	6883      	ldr	r3, [r0, #8]
    91c2:	f640 2804 	movw	r8, #2564	; 0xa04
    91c6:	4283      	cmp	r3, r0
    91c8:	f2c1 0800 	movt	r8, #4096	; 0x1000
    91cc:	d07f      	beq.n	92ce <_malloc_r+0x4de>
    91ce:	685a      	ldr	r2, [r3, #4]
    91d0:	f022 0203 	bic.w	r2, r2, #3
    91d4:	4291      	cmp	r1, r2
    91d6:	d202      	bcs.n	91de <_malloc_r+0x3ee>
    91d8:	689b      	ldr	r3, [r3, #8]
    91da:	4298      	cmp	r0, r3
    91dc:	d1f7      	bne.n	91ce <_malloc_r+0x3de>
    91de:	68d9      	ldr	r1, [r3, #12]
    91e0:	6872      	ldr	r2, [r6, #4]
    91e2:	60e1      	str	r1, [r4, #12]
    91e4:	60a3      	str	r3, [r4, #8]
    91e6:	608c      	str	r4, [r1, #8]
    91e8:	60dc      	str	r4, [r3, #12]
    91ea:	e68a      	b.n	8f02 <_malloc_r+0x112>
    91ec:	f045 0601 	orr.w	r6, r5, #1
    91f0:	f042 0101 	orr.w	r1, r2, #1
    91f4:	4425      	add	r5, r4
    91f6:	6066      	str	r6, [r4, #4]
    91f8:	4638      	mov	r0, r7
    91fa:	615d      	str	r5, [r3, #20]
    91fc:	611d      	str	r5, [r3, #16]
    91fe:	f8c5 e00c 	str.w	lr, [r5, #12]
    9202:	f8c5 e008 	str.w	lr, [r5, #8]
    9206:	6069      	str	r1, [r5, #4]
    9208:	50aa      	str	r2, [r5, r2]
    920a:	3408      	adds	r4, #8
    920c:	f000 f94e 	bl	94ac <__malloc_unlock>
    9210:	e624      	b.n	8e5c <_malloc_r+0x6c>
    9212:	f109 0901 	add.w	r9, r9, #1
    9216:	f019 0f03 	tst.w	r9, #3
    921a:	f104 0408 	add.w	r4, r4, #8
    921e:	f47f ae83 	bne.w	8f28 <_malloc_r+0x138>
    9222:	e028      	b.n	9276 <_malloc_r+0x486>
    9224:	f104 0308 	add.w	r3, r4, #8
    9228:	6964      	ldr	r4, [r4, #20]
    922a:	42a3      	cmp	r3, r4
    922c:	bf08      	it	eq
    922e:	f10c 0c02 	addeq.w	ip, ip, #2
    9232:	f43f ae39 	beq.w	8ea8 <_malloc_r+0xb8>
    9236:	e601      	b.n	8e3c <_malloc_r+0x4c>
    9238:	4419      	add	r1, r3
    923a:	6848      	ldr	r0, [r1, #4]
    923c:	461c      	mov	r4, r3
    923e:	f854 2f08 	ldr.w	r2, [r4, #8]!
    9242:	68db      	ldr	r3, [r3, #12]
    9244:	f040 0501 	orr.w	r5, r0, #1
    9248:	604d      	str	r5, [r1, #4]
    924a:	4638      	mov	r0, r7
    924c:	60d3      	str	r3, [r2, #12]
    924e:	609a      	str	r2, [r3, #8]
    9250:	f000 f92c 	bl	94ac <__malloc_unlock>
    9254:	e602      	b.n	8e5c <_malloc_r+0x6c>
    9256:	098a      	lsrs	r2, r1, #6
    9258:	3238      	adds	r2, #56	; 0x38
    925a:	0050      	lsls	r0, r2, #1
    925c:	e7ae      	b.n	91bc <_malloc_r+0x3cc>
    925e:	42b4      	cmp	r4, r6
    9260:	f43f aee3 	beq.w	902a <_malloc_r+0x23a>
    9264:	68b4      	ldr	r4, [r6, #8]
    9266:	6862      	ldr	r2, [r4, #4]
    9268:	f022 0203 	bic.w	r2, r2, #3
    926c:	e757      	b.n	911e <_malloc_r+0x32e>
    926e:	f8d8 8000 	ldr.w	r8, [r8]
    9272:	4598      	cmp	r8, r3
    9274:	d16b      	bne.n	934e <_malloc_r+0x55e>
    9276:	f01c 0f03 	tst.w	ip, #3
    927a:	f1a8 0308 	sub.w	r3, r8, #8
    927e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    9282:	d1f4      	bne.n	926e <_malloc_r+0x47e>
    9284:	6873      	ldr	r3, [r6, #4]
    9286:	ea23 0300 	bic.w	r3, r3, r0
    928a:	6073      	str	r3, [r6, #4]
    928c:	0040      	lsls	r0, r0, #1
    928e:	4298      	cmp	r0, r3
    9290:	f63f ae96 	bhi.w	8fc0 <_malloc_r+0x1d0>
    9294:	2800      	cmp	r0, #0
    9296:	f43f ae93 	beq.w	8fc0 <_malloc_r+0x1d0>
    929a:	4203      	tst	r3, r0
    929c:	46cc      	mov	ip, r9
    929e:	f47f ae3f 	bne.w	8f20 <_malloc_r+0x130>
    92a2:	0040      	lsls	r0, r0, #1
    92a4:	4203      	tst	r3, r0
    92a6:	f10c 0c04 	add.w	ip, ip, #4
    92aa:	d0fa      	beq.n	92a2 <_malloc_r+0x4b2>
    92ac:	e638      	b.n	8f20 <_malloc_r+0x130>
    92ae:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    92b2:	d816      	bhi.n	92e2 <_malloc_r+0x4f2>
    92b4:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    92b8:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    92bc:	ea4f 014c 	mov.w	r1, ip, lsl #1
    92c0:	e5d8      	b.n	8e74 <_malloc_r+0x84>
    92c2:	2301      	movs	r3, #1
    92c4:	f8c8 3004 	str.w	r3, [r8, #4]
    92c8:	4644      	mov	r4, r8
    92ca:	2200      	movs	r2, #0
    92cc:	e727      	b.n	911e <_malloc_r+0x32e>
    92ce:	1092      	asrs	r2, r2, #2
    92d0:	2001      	movs	r0, #1
    92d2:	4090      	lsls	r0, r2
    92d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    92d8:	4619      	mov	r1, r3
    92da:	4302      	orrs	r2, r0
    92dc:	f8c8 2004 	str.w	r2, [r8, #4]
    92e0:	e77f      	b.n	91e2 <_malloc_r+0x3f2>
    92e2:	f240 5354 	movw	r3, #1364	; 0x554
    92e6:	459c      	cmp	ip, r3
    92e8:	bf9d      	ittte	ls
    92ea:	ea4f 4c95 	movls.w	ip, r5, lsr #18
    92ee:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
    92f2:	ea4f 014c 	movls.w	r1, ip, lsl #1
    92f6:	21fc      	movhi	r1, #252	; 0xfc
    92f8:	bf88      	it	hi
    92fa:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
    92fe:	e5b9      	b.n	8e74 <_malloc_r+0x84>
    9300:	f3c2 010b 	ubfx	r1, r2, #0, #12
    9304:	2900      	cmp	r1, #0
    9306:	f47f ae9c 	bne.w	9042 <_malloc_r+0x252>
    930a:	eb0c 0109 	add.w	r1, ip, r9
    930e:	68b2      	ldr	r2, [r6, #8]
    9310:	f041 0101 	orr.w	r1, r1, #1
    9314:	6051      	str	r1, [r2, #4]
    9316:	e6ee      	b.n	90f6 <_malloc_r+0x306>
    9318:	f104 0108 	add.w	r1, r4, #8
    931c:	4638      	mov	r0, r7
    931e:	9200      	str	r2, [sp, #0]
    9320:	f000 f95c 	bl	95dc <_free_r>
    9324:	9a00      	ldr	r2, [sp, #0]
    9326:	6813      	ldr	r3, [r2, #0]
    9328:	e6e5      	b.n	90f6 <_malloc_r+0x306>
    932a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    932e:	d803      	bhi.n	9338 <_malloc_r+0x548>
    9330:	0bca      	lsrs	r2, r1, #15
    9332:	3277      	adds	r2, #119	; 0x77
    9334:	0050      	lsls	r0, r2, #1
    9336:	e741      	b.n	91bc <_malloc_r+0x3cc>
    9338:	f240 5254 	movw	r2, #1364	; 0x554
    933c:	4293      	cmp	r3, r2
    933e:	bf9d      	ittte	ls
    9340:	0c8a      	lsrls	r2, r1, #18
    9342:	327c      	addls	r2, #124	; 0x7c
    9344:	0050      	lslls	r0, r2, #1
    9346:	20fc      	movhi	r0, #252	; 0xfc
    9348:	bf88      	it	hi
    934a:	227e      	movhi	r2, #126	; 0x7e
    934c:	e736      	b.n	91bc <_malloc_r+0x3cc>
    934e:	6873      	ldr	r3, [r6, #4]
    9350:	e79c      	b.n	928c <_malloc_r+0x49c>
    9352:	bf00      	nop

00009354 <memcmp>:
    9354:	2a03      	cmp	r2, #3
    9356:	b470      	push	{r4, r5, r6}
    9358:	d914      	bls.n	9384 <memcmp+0x30>
    935a:	ea40 0301 	orr.w	r3, r0, r1
    935e:	079b      	lsls	r3, r3, #30
    9360:	d111      	bne.n	9386 <memcmp+0x32>
    9362:	460c      	mov	r4, r1
    9364:	4603      	mov	r3, r0
    9366:	6825      	ldr	r5, [r4, #0]
    9368:	681e      	ldr	r6, [r3, #0]
    936a:	4621      	mov	r1, r4
    936c:	42ae      	cmp	r6, r5
    936e:	4618      	mov	r0, r3
    9370:	f104 0404 	add.w	r4, r4, #4
    9374:	f103 0304 	add.w	r3, r3, #4
    9378:	d104      	bne.n	9384 <memcmp+0x30>
    937a:	3a04      	subs	r2, #4
    937c:	2a03      	cmp	r2, #3
    937e:	4618      	mov	r0, r3
    9380:	4621      	mov	r1, r4
    9382:	d8f0      	bhi.n	9366 <memcmp+0x12>
    9384:	b1c2      	cbz	r2, 93b8 <memcmp+0x64>
    9386:	7805      	ldrb	r5, [r0, #0]
    9388:	780c      	ldrb	r4, [r1, #0]
    938a:	42a5      	cmp	r5, r4
    938c:	bf04      	itt	eq
    938e:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
    9392:	2300      	moveq	r3, #0
    9394:	d006      	beq.n	93a4 <memcmp+0x50>
    9396:	e00c      	b.n	93b2 <memcmp+0x5e>
    9398:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    939c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    93a0:	42a5      	cmp	r5, r4
    93a2:	d106      	bne.n	93b2 <memcmp+0x5e>
    93a4:	4293      	cmp	r3, r2
    93a6:	f103 0301 	add.w	r3, r3, #1
    93aa:	d1f5      	bne.n	9398 <memcmp+0x44>
    93ac:	2000      	movs	r0, #0
    93ae:	bc70      	pop	{r4, r5, r6}
    93b0:	4770      	bx	lr
    93b2:	1b28      	subs	r0, r5, r4
    93b4:	bc70      	pop	{r4, r5, r6}
    93b6:	4770      	bx	lr
    93b8:	4610      	mov	r0, r2
    93ba:	e7f8      	b.n	93ae <memcmp+0x5a>

000093bc <memcpy>:
    93bc:	4684      	mov	ip, r0
    93be:	ea41 0300 	orr.w	r3, r1, r0
    93c2:	f013 0303 	ands.w	r3, r3, #3
    93c6:	d149      	bne.n	945c <memcpy+0xa0>
    93c8:	3a40      	subs	r2, #64	; 0x40
    93ca:	d323      	bcc.n	9414 <memcpy+0x58>
    93cc:	680b      	ldr	r3, [r1, #0]
    93ce:	6003      	str	r3, [r0, #0]
    93d0:	684b      	ldr	r3, [r1, #4]
    93d2:	6043      	str	r3, [r0, #4]
    93d4:	688b      	ldr	r3, [r1, #8]
    93d6:	6083      	str	r3, [r0, #8]
    93d8:	68cb      	ldr	r3, [r1, #12]
    93da:	60c3      	str	r3, [r0, #12]
    93dc:	690b      	ldr	r3, [r1, #16]
    93de:	6103      	str	r3, [r0, #16]
    93e0:	694b      	ldr	r3, [r1, #20]
    93e2:	6143      	str	r3, [r0, #20]
    93e4:	698b      	ldr	r3, [r1, #24]
    93e6:	6183      	str	r3, [r0, #24]
    93e8:	69cb      	ldr	r3, [r1, #28]
    93ea:	61c3      	str	r3, [r0, #28]
    93ec:	6a0b      	ldr	r3, [r1, #32]
    93ee:	6203      	str	r3, [r0, #32]
    93f0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    93f2:	6243      	str	r3, [r0, #36]	; 0x24
    93f4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    93f6:	6283      	str	r3, [r0, #40]	; 0x28
    93f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    93fa:	62c3      	str	r3, [r0, #44]	; 0x2c
    93fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    93fe:	6303      	str	r3, [r0, #48]	; 0x30
    9400:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9402:	6343      	str	r3, [r0, #52]	; 0x34
    9404:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    9406:	6383      	str	r3, [r0, #56]	; 0x38
    9408:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    940a:	63c3      	str	r3, [r0, #60]	; 0x3c
    940c:	3040      	adds	r0, #64	; 0x40
    940e:	3140      	adds	r1, #64	; 0x40
    9410:	3a40      	subs	r2, #64	; 0x40
    9412:	d2db      	bcs.n	93cc <memcpy+0x10>
    9414:	3230      	adds	r2, #48	; 0x30
    9416:	d30b      	bcc.n	9430 <memcpy+0x74>
    9418:	680b      	ldr	r3, [r1, #0]
    941a:	6003      	str	r3, [r0, #0]
    941c:	684b      	ldr	r3, [r1, #4]
    941e:	6043      	str	r3, [r0, #4]
    9420:	688b      	ldr	r3, [r1, #8]
    9422:	6083      	str	r3, [r0, #8]
    9424:	68cb      	ldr	r3, [r1, #12]
    9426:	60c3      	str	r3, [r0, #12]
    9428:	3010      	adds	r0, #16
    942a:	3110      	adds	r1, #16
    942c:	3a10      	subs	r2, #16
    942e:	d2f3      	bcs.n	9418 <memcpy+0x5c>
    9430:	320c      	adds	r2, #12
    9432:	d305      	bcc.n	9440 <memcpy+0x84>
    9434:	f851 3b04 	ldr.w	r3, [r1], #4
    9438:	f840 3b04 	str.w	r3, [r0], #4
    943c:	3a04      	subs	r2, #4
    943e:	d2f9      	bcs.n	9434 <memcpy+0x78>
    9440:	3204      	adds	r2, #4
    9442:	d008      	beq.n	9456 <memcpy+0x9a>
    9444:	07d2      	lsls	r2, r2, #31
    9446:	bf1c      	itt	ne
    9448:	f811 3b01 	ldrbne.w	r3, [r1], #1
    944c:	f800 3b01 	strbne.w	r3, [r0], #1
    9450:	d301      	bcc.n	9456 <memcpy+0x9a>
    9452:	880b      	ldrh	r3, [r1, #0]
    9454:	8003      	strh	r3, [r0, #0]
    9456:	4660      	mov	r0, ip
    9458:	4770      	bx	lr
    945a:	bf00      	nop
    945c:	2a08      	cmp	r2, #8
    945e:	d313      	bcc.n	9488 <memcpy+0xcc>
    9460:	078b      	lsls	r3, r1, #30
    9462:	d0b1      	beq.n	93c8 <memcpy+0xc>
    9464:	f010 0303 	ands.w	r3, r0, #3
    9468:	d0ae      	beq.n	93c8 <memcpy+0xc>
    946a:	f1c3 0304 	rsb	r3, r3, #4
    946e:	1ad2      	subs	r2, r2, r3
    9470:	07db      	lsls	r3, r3, #31
    9472:	bf1c      	itt	ne
    9474:	f811 3b01 	ldrbne.w	r3, [r1], #1
    9478:	f800 3b01 	strbne.w	r3, [r0], #1
    947c:	d3a4      	bcc.n	93c8 <memcpy+0xc>
    947e:	f831 3b02 	ldrh.w	r3, [r1], #2
    9482:	f820 3b02 	strh.w	r3, [r0], #2
    9486:	e79f      	b.n	93c8 <memcpy+0xc>
    9488:	3a04      	subs	r2, #4
    948a:	d3d9      	bcc.n	9440 <memcpy+0x84>
    948c:	3a01      	subs	r2, #1
    948e:	f811 3b01 	ldrb.w	r3, [r1], #1
    9492:	f800 3b01 	strb.w	r3, [r0], #1
    9496:	d2f9      	bcs.n	948c <memcpy+0xd0>
    9498:	780b      	ldrb	r3, [r1, #0]
    949a:	7003      	strb	r3, [r0, #0]
    949c:	784b      	ldrb	r3, [r1, #1]
    949e:	7043      	strb	r3, [r0, #1]
    94a0:	788b      	ldrb	r3, [r1, #2]
    94a2:	7083      	strb	r3, [r0, #2]
    94a4:	4660      	mov	r0, ip
    94a6:	4770      	bx	lr

000094a8 <__malloc_lock>:
    94a8:	4770      	bx	lr
    94aa:	bf00      	nop

000094ac <__malloc_unlock>:
    94ac:	4770      	bx	lr
    94ae:	bf00      	nop

000094b0 <_sbrk_r>:
    94b0:	b538      	push	{r3, r4, r5, lr}
    94b2:	f243 74ac 	movw	r4, #14252	; 0x37ac
    94b6:	2300      	movs	r3, #0
    94b8:	4605      	mov	r5, r0
    94ba:	f2c1 0400 	movt	r4, #4096	; 0x1000
    94be:	4608      	mov	r0, r1
    94c0:	6023      	str	r3, [r4, #0]
    94c2:	f000 f957 	bl	9774 <_sbrk>
    94c6:	1c43      	adds	r3, r0, #1
    94c8:	d000      	beq.n	94cc <_sbrk_r+0x1c>
    94ca:	bd38      	pop	{r3, r4, r5, pc}
    94cc:	6823      	ldr	r3, [r4, #0]
    94ce:	2b00      	cmp	r3, #0
    94d0:	d0fb      	beq.n	94ca <_sbrk_r+0x1a>
    94d2:	602b      	str	r3, [r5, #0]
    94d4:	bd38      	pop	{r3, r4, r5, pc}
    94d6:	bf00      	nop

000094d8 <strlen>:
    94d8:	f020 0103 	bic.w	r1, r0, #3
    94dc:	f010 0003 	ands.w	r0, r0, #3
    94e0:	f1c0 0000 	rsb	r0, r0, #0
    94e4:	f851 3b04 	ldr.w	r3, [r1], #4
    94e8:	f100 0c04 	add.w	ip, r0, #4
    94ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    94f0:	f06f 0200 	mvn.w	r2, #0
    94f4:	bf1c      	itt	ne
    94f6:	fa22 f20c 	lsrne.w	r2, r2, ip
    94fa:	4313      	orrne	r3, r2
    94fc:	f04f 0c01 	mov.w	ip, #1
    9500:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    9504:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    9508:	eba3 020c 	sub.w	r2, r3, ip
    950c:	ea22 0203 	bic.w	r2, r2, r3
    9510:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    9514:	bf04      	itt	eq
    9516:	f851 3b04 	ldreq.w	r3, [r1], #4
    951a:	3004      	addeq	r0, #4
    951c:	d0f4      	beq.n	9508 <strlen+0x30>
    951e:	f013 0fff 	tst.w	r3, #255	; 0xff
    9522:	bf1f      	itttt	ne
    9524:	3001      	addne	r0, #1
    9526:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    952a:	3001      	addne	r0, #1
    952c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    9530:	bf18      	it	ne
    9532:	3001      	addne	r0, #1
    9534:	4770      	bx	lr
    9536:	bf00      	nop

00009538 <_malloc_trim_r>:
    9538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    953a:	f640 2404 	movw	r4, #2564	; 0xa04
    953e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    9542:	460f      	mov	r7, r1
    9544:	4605      	mov	r5, r0
    9546:	f7ff ffaf 	bl	94a8 <__malloc_lock>
    954a:	68a3      	ldr	r3, [r4, #8]
    954c:	685e      	ldr	r6, [r3, #4]
    954e:	f026 0603 	bic.w	r6, r6, #3
    9552:	1bf7      	subs	r7, r6, r7
    9554:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
    9558:	0b3f      	lsrs	r7, r7, #12
    955a:	3f01      	subs	r7, #1
    955c:	033f      	lsls	r7, r7, #12
    955e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    9562:	db07      	blt.n	9574 <_malloc_trim_r+0x3c>
    9564:	4628      	mov	r0, r5
    9566:	2100      	movs	r1, #0
    9568:	f7ff ffa2 	bl	94b0 <_sbrk_r>
    956c:	68a3      	ldr	r3, [r4, #8]
    956e:	4433      	add	r3, r6
    9570:	4298      	cmp	r0, r3
    9572:	d004      	beq.n	957e <_malloc_trim_r+0x46>
    9574:	4628      	mov	r0, r5
    9576:	f7ff ff99 	bl	94ac <__malloc_unlock>
    957a:	2000      	movs	r0, #0
    957c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    957e:	4628      	mov	r0, r5
    9580:	4279      	negs	r1, r7
    9582:	f7ff ff95 	bl	94b0 <_sbrk_r>
    9586:	3001      	adds	r0, #1
    9588:	d010      	beq.n	95ac <_malloc_trim_r+0x74>
    958a:	f640 73c4 	movw	r3, #4036	; 0xfc4
    958e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9592:	681a      	ldr	r2, [r3, #0]
    9594:	68a1      	ldr	r1, [r4, #8]
    9596:	1bf6      	subs	r6, r6, r7
    9598:	f046 0601 	orr.w	r6, r6, #1
    959c:	4628      	mov	r0, r5
    959e:	1bd7      	subs	r7, r2, r7
    95a0:	604e      	str	r6, [r1, #4]
    95a2:	601f      	str	r7, [r3, #0]
    95a4:	f7ff ff82 	bl	94ac <__malloc_unlock>
    95a8:	2001      	movs	r0, #1
    95aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    95ac:	4628      	mov	r0, r5
    95ae:	2100      	movs	r1, #0
    95b0:	f7ff ff7e 	bl	94b0 <_sbrk_r>
    95b4:	68a3      	ldr	r3, [r4, #8]
    95b6:	1ac2      	subs	r2, r0, r3
    95b8:	2a0f      	cmp	r2, #15
    95ba:	dddb      	ble.n	9574 <_malloc_trim_r+0x3c>
    95bc:	f640 6110 	movw	r1, #3600	; 0xe10
    95c0:	f2c1 0100 	movt	r1, #4096	; 0x1000
    95c4:	680c      	ldr	r4, [r1, #0]
    95c6:	f640 71c4 	movw	r1, #4036	; 0xfc4
    95ca:	f042 0201 	orr.w	r2, r2, #1
    95ce:	1b00      	subs	r0, r0, r4
    95d0:	f2c1 0100 	movt	r1, #4096	; 0x1000
    95d4:	605a      	str	r2, [r3, #4]
    95d6:	6008      	str	r0, [r1, #0]
    95d8:	e7cc      	b.n	9574 <_malloc_trim_r+0x3c>
    95da:	bf00      	nop

000095dc <_free_r>:
    95dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    95e0:	460e      	mov	r6, r1
    95e2:	4681      	mov	r9, r0
    95e4:	2900      	cmp	r1, #0
    95e6:	d060      	beq.n	96aa <_free_r+0xce>
    95e8:	f7ff ff5e 	bl	94a8 <__malloc_lock>
    95ec:	f856 1c04 	ldr.w	r1, [r6, #-4]
    95f0:	f1a6 0408 	sub.w	r4, r6, #8
    95f4:	f021 0301 	bic.w	r3, r1, #1
    95f8:	18e2      	adds	r2, r4, r3
    95fa:	6857      	ldr	r7, [r2, #4]
    95fc:	f640 2504 	movw	r5, #2564	; 0xa04
    9600:	f2c1 0500 	movt	r5, #4096	; 0x1000
    9604:	f027 0003 	bic.w	r0, r7, #3
    9608:	68af      	ldr	r7, [r5, #8]
    960a:	4297      	cmp	r7, r2
    960c:	d062      	beq.n	96d4 <_free_r+0xf8>
    960e:	f011 0c01 	ands.w	ip, r1, #1
    9612:	6050      	str	r0, [r2, #4]
    9614:	bf18      	it	ne
    9616:	2100      	movne	r1, #0
    9618:	d111      	bne.n	963e <_free_r+0x62>
    961a:	f856 1c08 	ldr.w	r1, [r6, #-8]
    961e:	f105 0808 	add.w	r8, r5, #8
    9622:	1a64      	subs	r4, r4, r1
    9624:	68a6      	ldr	r6, [r4, #8]
    9626:	440b      	add	r3, r1
    9628:	4546      	cmp	r6, r8
    962a:	bf1d      	ittte	ne
    962c:	f8d4 800c 	ldrne.w	r8, [r4, #12]
    9630:	4661      	movne	r1, ip
    9632:	f8c6 800c 	strne.w	r8, [r6, #12]
    9636:	2101      	moveq	r1, #1
    9638:	bf18      	it	ne
    963a:	f8c8 6008 	strne.w	r6, [r8, #8]
    963e:	1816      	adds	r6, r2, r0
    9640:	6876      	ldr	r6, [r6, #4]
    9642:	07f6      	lsls	r6, r6, #31
    9644:	d408      	bmi.n	9658 <_free_r+0x7c>
    9646:	4403      	add	r3, r0
    9648:	6890      	ldr	r0, [r2, #8]
    964a:	b911      	cbnz	r1, 9652 <_free_r+0x76>
    964c:	4e48      	ldr	r6, [pc, #288]	; (9770 <_free_r+0x194>)
    964e:	42b0      	cmp	r0, r6
    9650:	d05f      	beq.n	9712 <_free_r+0x136>
    9652:	68d2      	ldr	r2, [r2, #12]
    9654:	60c2      	str	r2, [r0, #12]
    9656:	6090      	str	r0, [r2, #8]
    9658:	f043 0201 	orr.w	r2, r3, #1
    965c:	6062      	str	r2, [r4, #4]
    965e:	50e3      	str	r3, [r4, r3]
    9660:	b9f1      	cbnz	r1, 96a0 <_free_r+0xc4>
    9662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9666:	d322      	bcc.n	96ae <_free_r+0xd2>
    9668:	0a5a      	lsrs	r2, r3, #9
    966a:	2a04      	cmp	r2, #4
    966c:	d85a      	bhi.n	9724 <_free_r+0x148>
    966e:	0998      	lsrs	r0, r3, #6
    9670:	3038      	adds	r0, #56	; 0x38
    9672:	0041      	lsls	r1, r0, #1
    9674:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    9678:	68aa      	ldr	r2, [r5, #8]
    967a:	f640 2104 	movw	r1, #2564	; 0xa04
    967e:	42aa      	cmp	r2, r5
    9680:	f2c1 0100 	movt	r1, #4096	; 0x1000
    9684:	d05a      	beq.n	973c <_free_r+0x160>
    9686:	6851      	ldr	r1, [r2, #4]
    9688:	f021 0103 	bic.w	r1, r1, #3
    968c:	428b      	cmp	r3, r1
    968e:	d202      	bcs.n	9696 <_free_r+0xba>
    9690:	6892      	ldr	r2, [r2, #8]
    9692:	4295      	cmp	r5, r2
    9694:	d1f7      	bne.n	9686 <_free_r+0xaa>
    9696:	68d3      	ldr	r3, [r2, #12]
    9698:	60e3      	str	r3, [r4, #12]
    969a:	60a2      	str	r2, [r4, #8]
    969c:	609c      	str	r4, [r3, #8]
    969e:	60d4      	str	r4, [r2, #12]
    96a0:	4648      	mov	r0, r9
    96a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96a6:	f7ff bf01 	b.w	94ac <__malloc_unlock>
    96aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    96ae:	08db      	lsrs	r3, r3, #3
    96b0:	109a      	asrs	r2, r3, #2
    96b2:	2001      	movs	r0, #1
    96b4:	4090      	lsls	r0, r2
    96b6:	6869      	ldr	r1, [r5, #4]
    96b8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    96bc:	689a      	ldr	r2, [r3, #8]
    96be:	4301      	orrs	r1, r0
    96c0:	6069      	str	r1, [r5, #4]
    96c2:	60a2      	str	r2, [r4, #8]
    96c4:	60e3      	str	r3, [r4, #12]
    96c6:	4648      	mov	r0, r9
    96c8:	609c      	str	r4, [r3, #8]
    96ca:	60d4      	str	r4, [r2, #12]
    96cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96d0:	f7ff beec 	b.w	94ac <__malloc_unlock>
    96d4:	07cf      	lsls	r7, r1, #31
    96d6:	4418      	add	r0, r3
    96d8:	d407      	bmi.n	96ea <_free_r+0x10e>
    96da:	f856 1c08 	ldr.w	r1, [r6, #-8]
    96de:	1a64      	subs	r4, r4, r1
    96e0:	68e3      	ldr	r3, [r4, #12]
    96e2:	68a2      	ldr	r2, [r4, #8]
    96e4:	4408      	add	r0, r1
    96e6:	60d3      	str	r3, [r2, #12]
    96e8:	609a      	str	r2, [r3, #8]
    96ea:	f640 620c 	movw	r2, #3596	; 0xe0c
    96ee:	f2c1 0200 	movt	r2, #4096	; 0x1000
    96f2:	6813      	ldr	r3, [r2, #0]
    96f4:	f040 0201 	orr.w	r2, r0, #1
    96f8:	4298      	cmp	r0, r3
    96fa:	6062      	str	r2, [r4, #4]
    96fc:	60ac      	str	r4, [r5, #8]
    96fe:	d3cf      	bcc.n	96a0 <_free_r+0xc4>
    9700:	f640 73c0 	movw	r3, #4032	; 0xfc0
    9704:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9708:	6819      	ldr	r1, [r3, #0]
    970a:	4648      	mov	r0, r9
    970c:	f7ff ff14 	bl	9538 <_malloc_trim_r>
    9710:	e7c6      	b.n	96a0 <_free_r+0xc4>
    9712:	f043 0201 	orr.w	r2, r3, #1
    9716:	616c      	str	r4, [r5, #20]
    9718:	612c      	str	r4, [r5, #16]
    971a:	60e0      	str	r0, [r4, #12]
    971c:	60a0      	str	r0, [r4, #8]
    971e:	6062      	str	r2, [r4, #4]
    9720:	50e3      	str	r3, [r4, r3]
    9722:	e7bd      	b.n	96a0 <_free_r+0xc4>
    9724:	2a14      	cmp	r2, #20
    9726:	bf9c      	itt	ls
    9728:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
    972c:	0041      	lslls	r1, r0, #1
    972e:	d9a1      	bls.n	9674 <_free_r+0x98>
    9730:	2a54      	cmp	r2, #84	; 0x54
    9732:	d80b      	bhi.n	974c <_free_r+0x170>
    9734:	0b18      	lsrs	r0, r3, #12
    9736:	306e      	adds	r0, #110	; 0x6e
    9738:	0041      	lsls	r1, r0, #1
    973a:	e79b      	b.n	9674 <_free_r+0x98>
    973c:	1080      	asrs	r0, r0, #2
    973e:	2501      	movs	r5, #1
    9740:	4085      	lsls	r5, r0
    9742:	6848      	ldr	r0, [r1, #4]
    9744:	4613      	mov	r3, r2
    9746:	4328      	orrs	r0, r5
    9748:	6048      	str	r0, [r1, #4]
    974a:	e7a5      	b.n	9698 <_free_r+0xbc>
    974c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    9750:	d803      	bhi.n	975a <_free_r+0x17e>
    9752:	0bd8      	lsrs	r0, r3, #15
    9754:	3077      	adds	r0, #119	; 0x77
    9756:	0041      	lsls	r1, r0, #1
    9758:	e78c      	b.n	9674 <_free_r+0x98>
    975a:	f240 5154 	movw	r1, #1364	; 0x554
    975e:	428a      	cmp	r2, r1
    9760:	bf9d      	ittte	ls
    9762:	0c98      	lsrls	r0, r3, #18
    9764:	307c      	addls	r0, #124	; 0x7c
    9766:	0041      	lslls	r1, r0, #1
    9768:	21fc      	movhi	r1, #252	; 0xfc
    976a:	bf88      	it	hi
    976c:	207e      	movhi	r0, #126	; 0x7e
    976e:	e781      	b.n	9674 <_free_r+0x98>
    9770:	10000a0c 	.word	0x10000a0c

00009774 <_sbrk>:
    9774:	f640 73ec 	movw	r3, #4076	; 0xfec
    9778:	f2c1 0300 	movt	r3, #4096	; 0x1000
    977c:	6819      	ldr	r1, [r3, #0]
    977e:	f243 72b0 	movw	r2, #14256	; 0x37b0
    9782:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9786:	2900      	cmp	r1, #0
    9788:	bf18      	it	ne
    978a:	460a      	movne	r2, r1
    978c:	4410      	add	r0, r2
    978e:	6018      	str	r0, [r3, #0]
    9790:	4610      	mov	r0, r2
    9792:	4770      	bx	lr
    9794:	00000043 	.word	0x00000043

00009798 <_global_impure_ptr>:
    9798:	10000020                                 ...

0000979c <whitening_index>:
    979c:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    97ac:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    97bc:	5a541b28 662f703f                       (.TZ?p/f

000097c4 <whitening>:
    97c4:	01010101 01000100 00000100 00010000     ................
    97d4:	01000101 00010101 01010100 00010000     ................
    97e4:	01010001 01010000 00000000 00010100     ................
    97f4:	01000101 01010100 00000100 00010100     ................
    9804:	00000100 00000100 00000000 01000001     ................
    9814:	01010000 00000100 01010101 01010100     ................
    9824:	00000000 01010101 00010101 01010000     ................
    9834:	01010001 01000000 00000100 75010001              ...............

00009843 <compile_info>:
    9843:	72656275 746f6f74 30322068 302d3731     ubertooth 2017-0
    9853:	32522d33 776d2820 6d406c6e 2d6c6e77     3-R2 (mwnl@mwnl-
    9863:	6f6e656c 20296f76 38313032 3630202e     lenovo) 2018. 06
    9873:	3632202e ed28202e 20299499 343a3331     . 26. (...) 13:4
    9883:	34303a34 54534b20 bcb24000                       4:04 KST.

0000988c <whitening_word>:
    988c:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    989c:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    98ac:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    98bc:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    98cc:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    98dc:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    98ec:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    98fc:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    990c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    991c:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    992c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    993c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    994c:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    995c:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    996c:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    997c:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    998c:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    999c:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    99ac:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    99bc:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    99cc:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    99dc:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    99ec:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    99fc:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    9a0c:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    9a1c:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    9a2c:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    9a3c:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    9a4c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    9a5c:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    9a6c:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    9a7c:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    9a8c:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    9a9c:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    9aac:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    9abc:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    9acc:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    9adc:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    9aec:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    9afc:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    9b0c:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    9b1c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    9b2c:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    9b3c:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    9b4c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    9b5c:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    9b6c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    9b7c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    9b8c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    9b9c:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    9bac:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    9bbc:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    9bcc:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    9bdc:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    9bec:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    9bfc:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    9c0c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    9c1c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    9c2c:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    9c3c:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    9c4c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    9c5c:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    9c6c:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    9c7c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    9c8c:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    9c9c:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    9cac:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    9cbc:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    9ccc:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    9cdc:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    9cec:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    9cfc:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    9d0c:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    9d1c:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    9d2c:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    9d3c:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    9d4c:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    9d5c:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    9d6c:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    9d7c:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    9d8c:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    9d9c:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    9dac:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    9dbc:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    9dcc:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    9ddc:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    9dec:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    9dfc:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    9e0c:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    9e1c:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    9e2c:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    9e3c:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    9e4c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    9e5c:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    9e6c:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    9e7c:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    9e8c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    9e9c:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    9eac:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    9ebc:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    9ecc:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    9edc:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    9eec:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    9efc:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    9f0c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    9f1c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    9f2c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    9f3c:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    9f4c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    9f5c:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    9f6c:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    9f7c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    9f8c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    9f9c:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    9fac:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    9fbc:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    9fcc:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    9fdc:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    9fec:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    9ffc:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000a00c <hop_interval_lut>:
    a00c:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    a01c:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    a02c:	120c0916 00000024 00000001 00000001     ....$...........
    a03c:	00000001 00000001 097a0962 1d4209b0     ........b.z...B.
    a04c:	ffffffff 0303ffff 1612feaa 0010feaa     ................
    a05c:	096caa02 099e0985 37313032 2d33302d     ..l.....2017-03-
    a06c:	00003252                                         R2.

0000a06f <index1.3911>:
    a06f:	03010200 03000100 01020001 03010100              ..............

0000a07d <index2.3912>:
    a07d:	04020301 04020304 03040304 387b0203     ..............{8
    a08d:	37346361 2d383861 36326363 6161342d     ac47a88-cc26-4aa
    a09d:	38382d39 342d6237 38616332 37306663     9-887b-42ca8cf07
    a0ad:	7d333661 68000000                                a63}...

0000a0b4 <channels>:
    a0b4:	09720968 09a50977                       h.r.w...

0000a0bc <follow_handler.4002>:
    a0bc:	00007c0d 00007c2d 00007f31 00007d89     .|..-|..1....}..
    a0cc:	00007c09 00007c09 00007c09              .|...|...|..

0000a0d8 <continuous_rx_handler.4003>:
    a0d8:	00007c25 00007c2d 00007e51 00007c09     %|..-|..Q~...|..
    a0e8:	00007c09 00007c09                       .|...|..

0000a0f0 <jam_handler.4004>:
    a0f0:	00007c0d 00007c2d 00007ecd 00007dd1     .|..-|...~...}..
    a100:	00007ce5 00007df1                       .|...}..

0000a108 <iap_entry>:
    a108:	1fff1ff1                                ....

0000a10c <abExtendedOsFeatureDescriptor>:
    a10c:	00000028 00040100 00000001 00000000     (...............
    a11c:	49570100 4253554e 00000000 00000000     ..WINUSB........
    a12c:	00000000 00000000                       ........

0000a134 <_init>:
    a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a136:	bf00      	nop
    a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a13a:	bc08      	pop	{r3}
    a13c:	469e      	mov	lr, r3
    a13e:	4770      	bx	lr

0000a140 <__init_array_start>:
    a140:	00004371 	.word	0x00004371

0000a144 <__frame_dummy_init_array_entry>:
    a144:	00004155                                UA..

0000a148 <_fini>:
    a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a14a:	bf00      	nop
    a14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a14e:	bc08      	pop	{r3}
    a150:	469e      	mov	lr, r3
    a152:	4770      	bx	lr

0000a154 <__fini_array_start>:
    a154:	00004125 	.word	0x00004125

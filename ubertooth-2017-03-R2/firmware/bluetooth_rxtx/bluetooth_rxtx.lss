
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057b0  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000009dd  10000020  000097b0  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002954  10000a00  0000a18d  00010a00  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000109fd  2**0
                  CONTENTS, READONLY
  5 .comment      0000001f  00000000  00000000  00010a26  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000b986  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ef0  00000000  00000000  0001c3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005a13  00000000  00000000  0001f2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000858  00000000  00000000  00024cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008b0  00000000  00000000  00025528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000033ee  00000000  00000000  00025dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002ee0  00000000  00000000  000291c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001468  00000000  00000000  0002c0a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 91 7e 00 00 e5 7e 00 00 e5 7e 00 00     .?...~...~...~..
    4010:	e5 7e 00 00 e5 7e 00 00 e5 7e 00 00 00 00 00 00     .~...~...~......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 e5 7e 00 00     .............~..
    4030:	e5 7e 00 00 00 00 00 00 e5 7e 00 00 e5 7e 00 00     .~.......~...~..
    4040:	e5 7e 00 00 25 50 00 00 e5 7e 00 00 e5 7e 00 00     .~..%P...~...~..
    4050:	e5 7e 00 00 e5 7e 00 00 e5 7e 00 00 e5 7e 00 00     .~...~...~...~..
    4060:	e5 7e 00 00 e5 7e 00 00 e5 7e 00 00 e5 7e 00 00     .~...~...~...~..
    4070:	e5 7e 00 00 e5 7e 00 00 e5 7e 00 00 e5 7e 00 00     .~...~...~...~..
    4080:	e5 7e 00 00 e5 7e 00 00 e5 7e 00 00 e5 7e 00 00     .~...~...~...~..
    4090:	e5 7e 00 00 65 51 00 00 e5 7e 00 00 e5 7e 00 00     .~..eQ...~...~..
    40a0:	8d 7e 00 00 e5 7e 00 00 99 51 00 00 e5 7e 00 00     .~...~...Q...~..
    40b0:	e5 7e 00 00 e5 7e 00 00 e5 7e 00 00 e5 7e 00 00     .~...~...~...~..
    40c0:	e5 7e 00 00 e5 7e 00 00 e5 7e 00 00                 .~...~...~..

000040cc <deregister_tm_clones>:
    40cc:	b508      	push	{r3, lr}
    40ce:	f640 2000 	movw	r0, #2560	; 0xa00
    40d2:	4b07      	ldr	r3, [pc, #28]	; (40f0 <deregister_tm_clones+0x24>)
    40d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    40d8:	1a1b      	subs	r3, r3, r0
    40da:	2b06      	cmp	r3, #6
    40dc:	d800      	bhi.n	40e0 <deregister_tm_clones+0x14>
    40de:	bd08      	pop	{r3, pc}
    40e0:	f240 0300 	movw	r3, #0
    40e4:	f2c0 0300 	movt	r3, #0
    40e8:	2b00      	cmp	r3, #0
    40ea:	d0f8      	beq.n	40de <deregister_tm_clones+0x12>
    40ec:	4798      	blx	r3
    40ee:	e7f6      	b.n	40de <deregister_tm_clones+0x12>
    40f0:	10000a03 	.word	0x10000a03

000040f4 <register_tm_clones>:
    40f4:	b508      	push	{r3, lr}
    40f6:	f640 2000 	movw	r0, #2560	; 0xa00
    40fa:	f640 2300 	movw	r3, #2560	; 0xa00
    40fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4102:	f2c1 0000 	movt	r0, #4096	; 0x1000
    4106:	1a1b      	subs	r3, r3, r0
    4108:	109b      	asrs	r3, r3, #2
    410a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    410e:	1059      	asrs	r1, r3, #1
    4110:	d100      	bne.n	4114 <register_tm_clones+0x20>
    4112:	bd08      	pop	{r3, pc}
    4114:	f240 0200 	movw	r2, #0
    4118:	f2c0 0200 	movt	r2, #0
    411c:	2a00      	cmp	r2, #0
    411e:	d0f8      	beq.n	4112 <register_tm_clones+0x1e>
    4120:	4790      	blx	r2
    4122:	e7f6      	b.n	4112 <register_tm_clones+0x1e>

00004124 <__do_global_dtors_aux>:
    4124:	b510      	push	{r4, lr}
    4126:	f640 2400 	movw	r4, #2560	; 0xa00
    412a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    412e:	7823      	ldrb	r3, [r4, #0]
    4130:	b973      	cbnz	r3, 4150 <__do_global_dtors_aux+0x2c>
    4132:	f7ff ffcb 	bl	40cc <deregister_tm_clones>
    4136:	f240 0300 	movw	r3, #0
    413a:	f2c0 0300 	movt	r3, #0
    413e:	b12b      	cbz	r3, 414c <__do_global_dtors_aux+0x28>
    4140:	f249 708c 	movw	r0, #38796	; 0x978c
    4144:	f2c0 0000 	movt	r0, #0
    4148:	f3af 8000 	nop.w
    414c:	2301      	movs	r3, #1
    414e:	7023      	strb	r3, [r4, #0]
    4150:	bd10      	pop	{r4, pc}
    4152:	bf00      	nop

00004154 <frame_dummy>:
    4154:	b508      	push	{r3, lr}
    4156:	f240 0300 	movw	r3, #0
    415a:	f2c0 0300 	movt	r3, #0
    415e:	b14b      	cbz	r3, 4174 <frame_dummy+0x20>
    4160:	f249 708c 	movw	r0, #38796	; 0x978c
    4164:	f640 2104 	movw	r1, #2564	; 0xa04
    4168:	f2c0 0000 	movt	r0, #0
    416c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4170:	f3af 8000 	nop.w
    4174:	f640 2000 	movw	r0, #2560	; 0xa00
    4178:	f2c1 0000 	movt	r0, #4096	; 0x1000
    417c:	6803      	ldr	r3, [r0, #0]
    417e:	b12b      	cbz	r3, 418c <frame_dummy+0x38>
    4180:	f240 0300 	movw	r3, #0
    4184:	f2c0 0300 	movt	r3, #0
    4188:	b103      	cbz	r3, 418c <frame_dummy+0x38>
    418a:	4798      	blx	r3
    418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4190:	e7b0      	b.n	40f4 <register_tm_clones>
    4192:	bf00      	nop

00004194 <atexit>:
    4194:	4601      	mov	r1, r0
    4196:	2000      	movs	r0, #0
    4198:	4602      	mov	r2, r0
    419a:	4603      	mov	r3, r0
    419c:	f000 b892 	b.w	42c4 <__register_exitproc>

000041a0 <__libc_fini_array>:
    41a0:	b538      	push	{r3, r4, r5, lr}
    41a2:	f249 74b0 	movw	r4, #38832	; 0x97b0
    41a6:	f249 75ac 	movw	r5, #38828	; 0x97ac
    41aa:	f2c0 0500 	movt	r5, #0
    41ae:	f2c0 0400 	movt	r4, #0
    41b2:	1b64      	subs	r4, r4, r5
    41b4:	10a4      	asrs	r4, r4, #2
    41b6:	bf18      	it	ne
    41b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    41bc:	d005      	beq.n	41ca <__libc_fini_array+0x2a>
    41be:	3c01      	subs	r4, #1
    41c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    41c4:	4798      	blx	r3
    41c6:	2c00      	cmp	r4, #0
    41c8:	d1f9      	bne.n	41be <__libc_fini_array+0x1e>
    41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41ce:	f005 bae7 	b.w	97a0 <_fini>
    41d2:	bf00      	nop

000041d4 <__libc_init_array>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	f249 7698 	movw	r6, #38808	; 0x9798
    41da:	f249 7598 	movw	r5, #38808	; 0x9798
    41de:	f2c0 0500 	movt	r5, #0
    41e2:	f2c0 0600 	movt	r6, #0
    41e6:	1b76      	subs	r6, r6, r5
    41e8:	10b6      	asrs	r6, r6, #2
    41ea:	bf1c      	itt	ne
    41ec:	3d04      	subne	r5, #4
    41ee:	2400      	movne	r4, #0
    41f0:	d005      	beq.n	41fe <__libc_init_array+0x2a>
    41f2:	3401      	adds	r4, #1
    41f4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    41f8:	4798      	blx	r3
    41fa:	42a6      	cmp	r6, r4
    41fc:	d1f9      	bne.n	41f2 <__libc_init_array+0x1e>
    41fe:	f249 76a0 	movw	r6, #38816	; 0x97a0
    4202:	f249 7598 	movw	r5, #38808	; 0x9798
    4206:	f2c0 0500 	movt	r5, #0
    420a:	f2c0 0600 	movt	r6, #0
    420e:	1b76      	subs	r6, r6, r5
    4210:	f005 fabc 	bl	978c <_init>
    4214:	10b6      	asrs	r6, r6, #2
    4216:	bf1c      	itt	ne
    4218:	3d04      	subne	r5, #4
    421a:	2400      	movne	r4, #0
    421c:	d006      	beq.n	422c <__libc_init_array+0x58>
    421e:	3401      	adds	r4, #1
    4220:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4224:	4798      	blx	r3
    4226:	42a6      	cmp	r6, r4
    4228:	d1f9      	bne.n	421e <__libc_init_array+0x4a>
    422a:	bd70      	pop	{r4, r5, r6, pc}
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	bf00      	nop

00004230 <memset>:
    4230:	b4f0      	push	{r4, r5, r6, r7}
    4232:	0784      	lsls	r4, r0, #30
    4234:	d043      	beq.n	42be <memset+0x8e>
    4236:	1e54      	subs	r4, r2, #1
    4238:	2a00      	cmp	r2, #0
    423a:	d03e      	beq.n	42ba <memset+0x8a>
    423c:	b2cd      	uxtb	r5, r1
    423e:	4603      	mov	r3, r0
    4240:	e003      	b.n	424a <memset+0x1a>
    4242:	1e62      	subs	r2, r4, #1
    4244:	2c00      	cmp	r4, #0
    4246:	d038      	beq.n	42ba <memset+0x8a>
    4248:	4614      	mov	r4, r2
    424a:	f803 5b01 	strb.w	r5, [r3], #1
    424e:	079a      	lsls	r2, r3, #30
    4250:	d1f7      	bne.n	4242 <memset+0x12>
    4252:	2c03      	cmp	r4, #3
    4254:	d92a      	bls.n	42ac <memset+0x7c>
    4256:	b2cd      	uxtb	r5, r1
    4258:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    425c:	2c0f      	cmp	r4, #15
    425e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4262:	d915      	bls.n	4290 <memset+0x60>
    4264:	f1a4 0710 	sub.w	r7, r4, #16
    4268:	093f      	lsrs	r7, r7, #4
    426a:	f103 0610 	add.w	r6, r3, #16
    426e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    4272:	461a      	mov	r2, r3
    4274:	6015      	str	r5, [r2, #0]
    4276:	6055      	str	r5, [r2, #4]
    4278:	6095      	str	r5, [r2, #8]
    427a:	60d5      	str	r5, [r2, #12]
    427c:	3210      	adds	r2, #16
    427e:	42b2      	cmp	r2, r6
    4280:	d1f8      	bne.n	4274 <memset+0x44>
    4282:	f004 040f 	and.w	r4, r4, #15
    4286:	3701      	adds	r7, #1
    4288:	2c03      	cmp	r4, #3
    428a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    428e:	d90d      	bls.n	42ac <memset+0x7c>
    4290:	461e      	mov	r6, r3
    4292:	4622      	mov	r2, r4
    4294:	3a04      	subs	r2, #4
    4296:	2a03      	cmp	r2, #3
    4298:	f846 5b04 	str.w	r5, [r6], #4
    429c:	d8fa      	bhi.n	4294 <memset+0x64>
    429e:	1f22      	subs	r2, r4, #4
    42a0:	f022 0203 	bic.w	r2, r2, #3
    42a4:	3204      	adds	r2, #4
    42a6:	4413      	add	r3, r2
    42a8:	f004 0403 	and.w	r4, r4, #3
    42ac:	b12c      	cbz	r4, 42ba <memset+0x8a>
    42ae:	b2c9      	uxtb	r1, r1
    42b0:	441c      	add	r4, r3
    42b2:	f803 1b01 	strb.w	r1, [r3], #1
    42b6:	42a3      	cmp	r3, r4
    42b8:	d1fb      	bne.n	42b2 <memset+0x82>
    42ba:	bcf0      	pop	{r4, r5, r6, r7}
    42bc:	4770      	bx	lr
    42be:	4614      	mov	r4, r2
    42c0:	4603      	mov	r3, r0
    42c2:	e7c6      	b.n	4252 <memset+0x22>

000042c4 <__register_exitproc>:
    42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c6:	f648 54e8 	movw	r4, #36328	; 0x8de8
    42ca:	f2c0 0400 	movt	r4, #0
    42ce:	6826      	ldr	r6, [r4, #0]
    42d0:	b085      	sub	sp, #20
    42d2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    42d6:	4607      	mov	r7, r0
    42d8:	2c00      	cmp	r4, #0
    42da:	d043      	beq.n	4364 <__register_exitproc+0xa0>
    42dc:	6865      	ldr	r5, [r4, #4]
    42de:	2d1f      	cmp	r5, #31
    42e0:	dd21      	ble.n	4326 <__register_exitproc+0x62>
    42e2:	f240 0400 	movw	r4, #0
    42e6:	f2c0 0400 	movt	r4, #0
    42ea:	b91c      	cbnz	r4, 42f4 <__register_exitproc+0x30>
    42ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f0:	b005      	add	sp, #20
    42f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42f8:	9103      	str	r1, [sp, #12]
    42fa:	9202      	str	r2, [sp, #8]
    42fc:	9301      	str	r3, [sp, #4]
    42fe:	f3af 8000 	nop.w
    4302:	9903      	ldr	r1, [sp, #12]
    4304:	4604      	mov	r4, r0
    4306:	9a02      	ldr	r2, [sp, #8]
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	2800      	cmp	r0, #0
    430c:	d0ee      	beq.n	42ec <__register_exitproc+0x28>
    430e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    4312:	2000      	movs	r0, #0
    4314:	6025      	str	r5, [r4, #0]
    4316:	6060      	str	r0, [r4, #4]
    4318:	4605      	mov	r5, r0
    431a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    431e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    4322:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    4326:	b93f      	cbnz	r7, 4338 <__register_exitproc+0x74>
    4328:	1c6b      	adds	r3, r5, #1
    432a:	2000      	movs	r0, #0
    432c:	3502      	adds	r5, #2
    432e:	6063      	str	r3, [r4, #4]
    4330:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    4334:	b005      	add	sp, #20
    4336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4338:	2601      	movs	r6, #1
    433a:	40ae      	lsls	r6, r5
    433c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    4340:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    4344:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    4348:	2f02      	cmp	r7, #2
    434a:	ea42 0206 	orr.w	r2, r2, r6
    434e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    4352:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4356:	bf02      	ittt	eq
    4358:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
    435c:	431e      	orreq	r6, r3
    435e:	f8c4 618c 	streq.w	r6, [r4, #396]	; 0x18c
    4362:	e7e1      	b.n	4328 <__register_exitproc+0x64>
    4364:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    4368:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    436c:	e7b6      	b.n	42dc <__register_exitproc+0x18>
    436e:	bf00      	nop

00004370 <register_fini>:
    4370:	f240 0300 	movw	r3, #0
    4374:	f2c0 0300 	movt	r3, #0
    4378:	b12b      	cbz	r3, 4386 <register_fini+0x16>
    437a:	f244 10a1 	movw	r0, #16801	; 0x41a1
    437e:	f2c0 0000 	movt	r0, #0
    4382:	f7ff bf07 	b.w	4194 <atexit>
    4386:	4770      	bx	lr

00004388 <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    4388:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    438a:	2300      	movs	r3, #0
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;
    438c:	461a      	mov	r2, r3

	for(size_t i=0; i<8; i++)
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    438e:	fa40 f103 	asr.w	r1, r0, r3
    4392:	f1c3 0407 	rsb	r4, r3, #7
    4396:	f001 0101 	and.w	r1, r1, #1
    439a:	40a1      	lsls	r1, r4

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    439c:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    439e:	430a      	orrs	r2, r1

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43a0:	2b08      	cmp	r3, #8
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    43a2:	b2d2      	uxtb	r2, r2

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    43a4:	d1f3      	bne.n	438e <reverse8+0x6>
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
	}

	return reversed;
}
    43a6:	4610      	mov	r0, r2
    43a8:	bd10      	pop	{r4, pc}
    43aa:	0000      	movs	r0, r0

000043ac <cc2400_rx>:
	target.syncword = 0;
}

/* start un-buffered rx */
static void cc2400_rx()
{
    43ac:	b538      	push	{r3, r4, r5, lr}
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    43ae:	4b25      	ldr	r3, [pc, #148]	; (4444 <cc2400_rx+0x98>)
    43b0:	4c25      	ldr	r4, [pc, #148]	; (4448 <cc2400_rx+0x9c>)
    43b2:	781a      	ldrb	r2, [r3, #0]
    43b4:	b112      	cbz	r2, 43bc <cc2400_rx+0x10>
    43b6:	781a      	ldrb	r2, [r3, #0]
    43b8:	2a01      	cmp	r2, #1
    43ba:	d128      	bne.n	440e <cc2400_rx+0x62>
		if (modulation == MOD_BT_BASIC_RATE) {
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	b133      	cbz	r3, 43ce <cc2400_rx+0x22>
			mdmctrl = 0x0029; // 160 kHz frequency deviation
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    43c0:	4b20      	ldr	r3, [pc, #128]	; (4444 <cc2400_rx+0x98>)
    43c2:	781d      	ldrb	r5, [r3, #0]
}

/* start un-buffered rx */
static void cc2400_rx()
{
	u16 mdmctrl = 0;
    43c4:	2d01      	cmp	r5, #1
    43c6:	bf0c      	ite	eq
    43c8:	2540      	moveq	r5, #64	; 0x40
    43ca:	2500      	movne	r5, #0
    43cc:	e000      	b.n	43d0 <cc2400_rx+0x24>

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
		if (modulation == MOD_BT_BASIC_RATE) {
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    43ce:	2529      	movs	r5, #41	; 0x29
		} else if (modulation == MOD_BT_LOW_ENERGY) {
			mdmctrl = 0x0040; // 250 kHz frequency deviation
		}
		cc2400_set(MANAND,  0x7fff);
    43d0:	200d      	movs	r0, #13
    43d2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    43d6:	f003 fe88 	bl	80ea <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    43da:	2012      	movs	r0, #18
    43dc:	f642 3122 	movw	r1, #11042	; 0x2b22
    43e0:	f003 fe83 	bl	80ea <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
    43e4:	2014      	movs	r0, #20
    43e6:	f241 314b 	movw	r1, #4939	; 0x134b
    43ea:	f003 fe7e 	bl	80ea <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    43ee:	2020      	movs	r0, #32
    43f0:	f240 1101 	movw	r1, #257	; 0x101
    43f4:	f003 fe79 	bl	80ea <cc2400_set>
		//      |  | |   |  +--------> CRC off
		//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
		//      |  | +---------------> 2 preamble bytes of 01010101
		//      |  +-----------------> not packet mode
			//      +--------------------> un-buffered mode
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    43f8:	8821      	ldrh	r1, [r4, #0]
    43fa:	2002      	movs	r0, #2
    43fc:	b289      	uxth	r1, r1
    43fe:	3901      	subs	r1, #1
    4400:	b289      	uxth	r1, r1
    4402:	f003 fe72 	bl	80ea <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    4406:	2003      	movs	r0, #3
    4408:	4629      	mov	r1, r5
    440a:	f003 fe6e 	bl	80ea <cc2400_set>
	}

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    440e:	8820      	ldrh	r0, [r4, #0]
    4410:	b280      	uxth	r0, r0
    4412:	f002 fee7 	bl	71e4 <cs_threshold_calc_and_set>

	clkn_start();
    4416:	f002 ff7d 	bl	7314 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    441a:	f003 ff09 	bl	8230 <cc2400_status>
    441e:	0642      	lsls	r2, r0, #25
    4420:	d5fb      	bpl.n	441a <cc2400_rx+0x6e>
	cc2400_strobe(SFSON);
    4422:	2061      	movs	r0, #97	; 0x61
    4424:	f003 ff0b 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4428:	f003 ff02 	bl	8230 <cc2400_status>
    442c:	0743      	lsls	r3, r0, #29
    442e:	d5fb      	bpl.n	4428 <cc2400_rx+0x7c>
	cc2400_strobe(SRX);
    4430:	2062      	movs	r0, #98	; 0x62
    4432:	f003 ff04 	bl	823e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    4436:	4b05      	ldr	r3, [pc, #20]	; (444c <cc2400_rx+0xa0>)
    4438:	2280      	movs	r2, #128	; 0x80
    443a:	601a      	str	r2, [r3, #0]
	HGM_SET;
    443c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4440:	601a      	str	r2, [r3, #0]
    4442:	bd38      	pop	{r3, r4, r5, pc}
    4444:	10000a1c 	.word	0x10000a1c
    4448:	10000448 	.word	0x10000448
    444c:	2009c058 	.word	0x2009c058

00004450 <cc2400_rx_sync>:
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4450:	b570      	push	{r4, r5, r6, lr}
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4452:	4b28      	ldr	r3, [pc, #160]	; (44f4 <cc2400_rx_sync+0xa4>)
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4454:	4604      	mov	r4, r0
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4456:	781a      	ldrb	r2, [r3, #0]
    4458:	b132      	cbz	r2, 4468 <cc2400_rx_sync+0x18>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	2b01      	cmp	r3, #1
    445e:	d147      	bne.n	44f0 <cc2400_rx_sync+0xa0>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    4460:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    4462:	f240 5661 	movw	r6, #1377	; 0x561
    4466:	e002      	b.n	446e <cc2400_rx_sync+0x1e>
static void cc2400_rx_sync(u32 sync)
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    4468:	2529      	movs	r5, #41	; 0x29
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    446a:	f240 4661 	movw	r6, #1121	; 0x461
	} else {
		/* oops */
		return;
	}

	cc2400_set(MANAND,  0x7fff);
    446e:	200d      	movs	r0, #13
    4470:	f647 71ff 	movw	r1, #32767	; 0x7fff
    4474:	f003 fe39 	bl	80ea <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    4478:	2012      	movs	r0, #18
    447a:	f642 3122 	movw	r1, #11042	; 0x2b22
    447e:	f003 fe34 	bl	80ea <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    4482:	2014      	movs	r0, #20
    4484:	f241 214b 	movw	r1, #4683	; 0x124b
    4488:	f003 fe2f 	bl	80ea <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    448c:	2020      	movs	r0, #32
    448e:	4631      	mov	r1, r6
    4490:	f003 fe2b 	bl	80ea <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    4494:	b2a1      	uxth	r1, r4
    4496:	202c      	movs	r0, #44	; 0x2c
    4498:	f003 fe27 	bl	80ea <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    449c:	0c21      	lsrs	r1, r4, #16

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    449e:	4c16      	ldr	r4, [pc, #88]	; (44f8 <cc2400_rx_sync+0xa8>)
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    44a0:	202d      	movs	r0, #45	; 0x2d
    44a2:	f003 fe22 	bl	80ea <cc2400_set>

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    44a6:	8821      	ldrh	r1, [r4, #0]
    44a8:	2002      	movs	r0, #2
    44aa:	b289      	uxth	r1, r1
    44ac:	3901      	subs	r1, #1
    44ae:	b289      	uxth	r1, r1
    44b0:	f003 fe1b 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    44b4:	2003      	movs	r0, #3
    44b6:	4629      	mov	r1, r5
    44b8:	f003 fe17 	bl	80ea <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    44bc:	8820      	ldrh	r0, [r4, #0]
    44be:	b280      	uxth	r0, r0
    44c0:	f002 fe90 	bl	71e4 <cs_threshold_calc_and_set>

	clkn_start();
    44c4:	f002 ff26 	bl	7314 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    44c8:	f003 feb2 	bl	8230 <cc2400_status>
    44cc:	0640      	lsls	r0, r0, #25
    44ce:	d5fb      	bpl.n	44c8 <cc2400_rx_sync+0x78>
	cc2400_strobe(SFSON);
    44d0:	2061      	movs	r0, #97	; 0x61
    44d2:	f003 feb4 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    44d6:	f003 feab 	bl	8230 <cc2400_status>
    44da:	0741      	lsls	r1, r0, #29
    44dc:	d5fb      	bpl.n	44d6 <cc2400_rx_sync+0x86>
	cc2400_strobe(SRX);
    44de:	2062      	movs	r0, #98	; 0x62
    44e0:	f003 fead 	bl	823e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    44e4:	4b05      	ldr	r3, [pc, #20]	; (44fc <cc2400_rx_sync+0xac>)
    44e6:	2280      	movs	r2, #128	; 0x80
    44e8:	601a      	str	r2, [r3, #0]
	HGM_SET;
    44ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    44ee:	601a      	str	r2, [r3, #0]
    44f0:	bd70      	pop	{r4, r5, r6, pc}
    44f2:	bf00      	nop
    44f4:	10000a1c 	.word	0x10000a1c
    44f8:	10000448 	.word	0x10000448
    44fc:	2009c058 	.word	0x2009c058

00004500 <enqueue>:

/* Unpacked symbol buffers (two rxbufs) */
char unpacked[DMA_SIZE*8*2];

static int enqueue(uint8_t type, uint8_t* buf)
{
    4500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4502:	4606      	mov	r6, r0
    4504:	460f      	mov	r7, r1
	usb_pkt_rx* f = usb_enqueue();
    4506:	f002 fd8d 	bl	7024 <usb_enqueue>
    450a:	4d1e      	ldr	r5, [pc, #120]	; (4584 <enqueue+0x84>)

	/* fail if queue is full */
	if (f == NULL) {
    450c:	4604      	mov	r4, r0
    450e:	b920      	cbnz	r0, 451a <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    4510:	786b      	ldrb	r3, [r5, #1]
    4512:	f043 0304 	orr.w	r3, r3, #4
    4516:	706b      	strb	r3, [r5, #1]
		return 0;
    4518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	f->pkt_type = type;
	if(type == SPECAN) {
    451a:	2e04      	cmp	r6, #4
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    451c:	7006      	strb	r6, [r0, #0]
	if(type == SPECAN) {
    451e:	d10e      	bne.n	453e <enqueue+0x3e>
		f->clkn_high = (clkn >> 20) & 0xff;
    4520:	4b19      	ldr	r3, [pc, #100]	; (4588 <enqueue+0x88>)
		f->clk100ns = CLK100NS;
    4522:	f640 4135 	movw	r1, #3125	; 0xc35
		return 0;
	}

	f->pkt_type = type;
	if(type == SPECAN) {
		f->clkn_high = (clkn >> 20) & 0xff;
    4526:	681a      	ldr	r2, [r3, #0]
    4528:	0d12      	lsrs	r2, r2, #20
    452a:	70c2      	strb	r2, [r0, #3]
		f->clk100ns = CLK100NS;
    452c:	4a17      	ldr	r2, [pc, #92]	; (458c <enqueue+0x8c>)
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	6812      	ldr	r2, [r2, #0]
    4532:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4536:	fb01 2303 	mla	r3, r1, r3, r2
    453a:	6043      	str	r3, [r0, #4]
    453c:	e015      	b.n	456a <enqueue+0x6a>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    453e:	78ab      	ldrb	r3, [r5, #2]
    4540:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    4542:	686b      	ldr	r3, [r5, #4]
    4544:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    4546:	892b      	ldrh	r3, [r5, #8]
    4548:	b29b      	uxth	r3, r3
    454a:	3b62      	subs	r3, #98	; 0x62
    454c:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    454e:	4b10      	ldr	r3, [pc, #64]	; (4590 <enqueue+0x90>)
    4550:	781b      	ldrb	r3, [r3, #0]
    4552:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    4554:	4b0f      	ldr	r3, [pc, #60]	; (4594 <enqueue+0x94>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    455a:	8928      	ldrh	r0, [r5, #8]
    455c:	b280      	uxth	r0, r0
    455e:	f002 fe2d 	bl	71bc <rssi_get_avg>
		f->rssi_count = rssi_count;
    4562:	4b0d      	ldr	r3, [pc, #52]	; (4598 <enqueue+0x98>)
		f->clkn_high = idle_buf_clkn_high;
		f->clk100ns = idle_buf_clk100ns;
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
		f->rssi_min = rssi_min;
		f->rssi_max = rssi_max;
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4564:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    4566:	781b      	ldrb	r3, [r3, #0]
    4568:	72e3      	strb	r3, [r4, #11]
	}

	memcpy(f->data, buf, DMA_SIZE);
    456a:	f104 000e 	add.w	r0, r4, #14
    456e:	4639      	mov	r1, r7
    4570:	2232      	movs	r2, #50	; 0x32
    4572:	f004 fb91 	bl	8c98 <memcpy>

	f->status = status;
    4576:	786b      	ldrb	r3, [r5, #1]
	status = 0;

	return 1;
    4578:	2001      	movs	r0, #1
		f->rssi_count = rssi_count;
	}

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    457a:	7063      	strb	r3, [r4, #1]
	status = 0;
    457c:	2300      	movs	r3, #0
    457e:	706b      	strb	r3, [r5, #1]

	return 1;
}
    4580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4582:	bf00      	nop
    4584:	10000a1c 	.word	0x10000a1c
    4588:	10000bc4 	.word	0x10000bc4
    458c:	40004008 	.word	0x40004008
    4590:	10000baa 	.word	0x10000baa
    4594:	10000ba8 	.word	0x10000ba8
    4598:	10001046 	.word	0x10001046

0000459c <le_set_access_address>:
	// reset GIO
	cc2400_set(IOCFG, gio_save);
}

/* set LE access address */
static void le_set_access_address(u32 aa) {
    459c:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    459e:	4c04      	ldr	r4, [pc, #16]	; (45b0 <le_set_access_address+0x14>)
    45a0:	6060      	str	r0, [r4, #4]
	aa_rev = rbit(aa);
    45a2:	f003 fcad 	bl	7f00 <rbit>
	le.syncl = aa_rev & 0xffff;
    45a6:	8160      	strh	r0, [r4, #10]
	le.synch = aa_rev >> 16;
    45a8:	0c00      	lsrs	r0, r0, #16
    45aa:	8120      	strh	r0, [r4, #8]
    45ac:	bd10      	pop	{r4, pc}
    45ae:	bf00      	nop
    45b0:	10000448 	.word	0x10000448

000045b4 <cc2400_idle>:
		}
	}
}

static void cc2400_idle()
{
    45b4:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    45b6:	2064      	movs	r0, #100	; 0x64
    45b8:	f003 fe41 	bl	823e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    45bc:	f003 fe38 	bl	8230 <cc2400_status>
    45c0:	f000 0004 	and.w	r0, r0, #4
    45c4:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    45c8:	2800      	cmp	r0, #0
    45ca:	d1f7      	bne.n	45bc <cc2400_idle+0x8>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    45cc:	4b20      	ldr	r3, [pc, #128]	; (4650 <cc2400_idle+0x9c>)
    45ce:	2280      	movs	r2, #128	; 0x80
    45d0:	601a      	str	r2, [r3, #0]
	HGM_CLR;
#endif

	RXLED_CLR;
    45d2:	2110      	movs	r1, #16
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
	HGM_CLR;
    45d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    45d8:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    45da:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    45de:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    45e2:	2202      	movs	r2, #2
    45e4:	f843 2c20 	str.w	r2, [r3, #-32]

	clkn_stop();
    45e8:	f002 fe6c 	bl	72c4 <clkn_stop>
	dio_ssp_stop();
    45ec:	f002 ff96 	bl	751c <dio_ssp_stop>
	cs_reset();
    45f0:	f002 fe56 	bl	72a0 <cs_reset>
	rssi_reset();
    45f4:	f002 fd7e 	bl	70f4 <rssi_reset>

	/* hopping stuff */
	hop_mode = HOP_NONE;
    45f8:	4b16      	ldr	r3, [pc, #88]	; (4654 <cc2400_idle+0xa0>)
	do_hop = 0;
	channel = 2441;
    45fa:	4a17      	ldr	r2, [pc, #92]	; (4658 <cc2400_idle+0xa4>)
    45fc:	f640 1189 	movw	r1, #2441	; 0x989
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    4600:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    4602:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    4604:	8011      	strh	r1, [r2, #0]
	hop_direct_channel = 0;
	hop_timeout = 158;
    4606:	219e      	movs	r1, #158	; 0x9e

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
    4608:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    460a:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	requested_channel = 0;
	le_adv_channel = 2402;
    460e:	f640 1162 	movw	r1, #2402	; 0x962
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
	hop_timeout = 158;
	requested_channel = 0;
    4612:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    4614:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a


	/* bulk USB stuff */
	idle_buf_clkn_high = 0;
    4618:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    461a:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    461c:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    461e:	741c      	strb	r4, [r3, #16]
	status = 0;
    4620:	705c      	strb	r4, [r3, #1]

	/* operation mode */
	mode = MODE_IDLE;
    4622:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    4624:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    4626:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    4628:	751c      	strb	r4, [r3, #20]

	modulation = MOD_BT_BASIC_RATE;
    462a:	701c      	strb	r4, [r3, #0]

	/* specan stuff */
	low_freq = 2400;
    462c:	f44f 6316 	mov.w	r3, #2400	; 0x960
    4630:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	high_freq = 2483;
    4634:	3353      	adds	r3, #83	; 0x53
    4636:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
	rssi_threshold = -30;

	target.address = 0;
    463a:	4908      	ldr	r1, [pc, #32]	; (465c <cc2400_idle+0xa8>)
	modulation = MOD_BT_BASIC_RATE;

	/* specan stuff */
	low_freq = 2400;
	high_freq = 2483;
	rssi_threshold = -30;
    463c:	23e2      	movs	r3, #226	; 0xe2
    463e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

	target.address = 0;
    4642:	2200      	movs	r2, #0
    4644:	2300      	movs	r3, #0
    4646:	e9c1 2300 	strd	r2, r3, [r1]
	target.syncword = 0;
    464a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    464e:	bd10      	pop	{r4, pc}
    4650:	2009c05c 	.word	0x2009c05c
    4654:	10000a1c 	.word	0x10000a1c
    4658:	10000448 	.word	0x10000448
    465c:	100010c0 	.word	0x100010c0

00004660 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    4660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    4664:	4c39      	ldr	r4, [pc, #228]	; (474c <cb_follow_le+0xec>)
    4666:	8820      	ldrh	r0, [r4, #0]
    4668:	4626      	mov	r6, r4
    466a:	b280      	uxth	r0, r0
    466c:	3862      	subs	r0, #98	; 0x62
    466e:	b2c0      	uxtb	r0, r0
    4670:	f002 fbd0 	bl	6e14 <btle_channel_index>
    4674:	4936      	ldr	r1, [pc, #216]	; (4750 <cb_follow_le+0xf0>)

	u32 access_address = 0;
    4676:	2200      	movs	r2, #0

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    4678:	5c0d      	ldrb	r5, [r1, r0]

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    467a:	4613      	mov	r3, r2
    467c:	468c      	mov	ip, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    467e:	4f35      	ldr	r7, [pc, #212]	; (4754 <cb_follow_le+0xf4>)
    4680:	5dd9      	ldrb	r1, [r3, r7]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4682:	3301      	adds	r3, #1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4684:	07c9      	lsls	r1, r1, #31
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4686:	2b1f      	cmp	r3, #31
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4688:	ea41 0252 	orr.w	r2, r1, r2, lsr #1
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    468c:	d1f7      	bne.n	467e <cb_follow_le+0x1e>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    468e:	6871      	ldr	r1, [r6, #4]
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4690:	5cf8      	ldrb	r0, [r7, r3]
    4692:	07c0      	lsls	r0, r0, #31
    4694:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
		if (access_address == le.access_address) {
    4698:	428a      	cmp	r2, r1
    469a:	d14f      	bne.n	473c <cb_follow_le+0xdc>
    469c:	2200      	movs	r2, #0
    469e:	eb07 0803 	add.w	r8, r7, r3
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    46a2:	2000      	movs	r0, #0
    46a4:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    46a8:	4601      	mov	r1, r0
    46aa:	eb08 0401 	add.w	r4, r8, r1
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
    46ae:	2a03      	cmp	r2, #3
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
    46b0:	f814 4c1f 	ldrb.w	r4, [r4, #-31]
					if (j >= 4) { // unwhiten data bytes
    46b4:	dd0c      	ble.n	46d0 <cb_follow_le+0x70>
						bit ^= whitening[idx];
    46b6:	eb0c 0e05 	add.w	lr, ip, r5
    46ba:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    46be:	3501      	adds	r5, #1
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
    46c0:	ea84 040e 	eor.w	r4, r4, lr
						idx = (idx + 1) % sizeof(whitening);
    46c4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    46c8:	fbb5 f9fe 	udiv	r9, r5, lr
    46cc:	fb0e 5519 	mls	r5, lr, r9, r5
					}
					byte |= bit << k;
    46d0:	408c      	lsls	r4, r1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46d2:	3101      	adds	r1, #1
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    46d4:	4320      	orrs	r0, r4
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46d6:	2908      	cmp	r1, #8
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    46d8:	b2c0      	uxtb	r0, r0
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    46da:	d1e6      	bne.n	46aa <cb_follow_le+0x4a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    46dc:	4c1e      	ldr	r4, [pc, #120]	; (4758 <cb_follow_le+0xf8>)
    46de:	6821      	ldr	r1, [r4, #0]
    46e0:	5488      	strb	r0, [r1, r2]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    46e2:	3201      	adds	r2, #1
    46e4:	2a2e      	cmp	r2, #46	; 0x2e
    46e6:	d1da      	bne.n	469e <cb_follow_le+0x3e>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    46e8:	6973      	ldr	r3, [r6, #20]
    46ea:	b95b      	cbnz	r3, 4704 <cb_follow_le+0xa4>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    46ec:	6821      	ldr	r1, [r4, #0]
    46ee:	2001      	movs	r0, #1
    46f0:	f7ff ff06 	bl	4500 <enqueue>
			RXLED_SET;
    46f4:	4b19      	ldr	r3, [pc, #100]	; (475c <cb_follow_le+0xfc>)
    46f6:	2210      	movs	r2, #16
    46f8:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    46fa:	4b19      	ldr	r3, [pc, #100]	; (4760 <cb_follow_le+0x100>)
    46fc:	6820      	ldr	r0, [r4, #0]
    46fe:	699b      	ldr	r3, [r3, #24]
    4700:	4798      	blx	r3

			break;
    4702:	e01f      	b.n	4744 <cb_follow_le+0xe4>
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    4704:	6823      	ldr	r3, [r4, #0]
    4706:	795d      	ldrb	r5, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4708:	4b10      	ldr	r3, [pc, #64]	; (474c <cb_follow_le+0xec>)
    470a:	6821      	ldr	r1, [r4, #0]
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    470c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4710:	1caa      	adds	r2, r5, #2
    4712:	6918      	ldr	r0, [r3, #16]
    4714:	3104      	adds	r1, #4
    4716:	f002 fbfd 	bl	6f14 <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    471a:	6822      	ldr	r2, [r4, #0]
    471c:	f105 0308 	add.w	r3, r5, #8
    4720:	5cd1      	ldrb	r1, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    4722:	6822      	ldr	r2, [r4, #0]
    4724:	1deb      	adds	r3, r5, #7
    4726:	5cd3      	ldrb	r3, [r2, r3]
							 |  idle_rxbuf[4+len+0];
    4728:	6822      	ldr	r2, [r4, #0]
    472a:	3506      	adds	r5, #6
    472c:	5d52      	ldrb	r2, [r2, r5]
			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
							 | (idle_rxbuf[4+len+1] << 8)
    472e:	021b      	lsls	r3, r3, #8
    4730:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
							 |  idle_rxbuf[4+len+0];
    4734:	4313      	orrs	r3, r2
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    4736:	4298      	cmp	r0, r3
    4738:	d104      	bne.n	4744 <cb_follow_le+0xe4>
    473a:	e7d7      	b.n	46ec <cb_follow_le+0x8c>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    473c:	3301      	adds	r3, #1
    473e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    4742:	d1a5      	bne.n	4690 <cb_follow_le+0x30>
			break;
		}
	}

	return 1;
}
    4744:	2001      	movs	r0, #1
    4746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    474a:	bf00      	nop
    474c:	10000448 	.word	0x10000448
    4750:	00008dec 	.word	0x00008dec
    4754:	10000d24 	.word	0x10000d24
    4758:	10000d20 	.word	0x10000d20
    475c:	2009c038 	.word	0x2009c038
    4760:	10000a1c 	.word	0x10000a1c

00004764 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4764:	b538      	push	{r3, r4, r5, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4766:	4b58      	ldr	r3, [pc, #352]	; (48c8 <connection_follow_cb+0x164>)
}

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4768:	4605      	mov	r5, r0
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    476a:	7e1a      	ldrb	r2, [r3, #24]
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	// u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
	u8 header = packet[HEADER_IDX];
    476c:	7901      	ldrb	r1, [r0, #4]
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    476e:	2a02      	cmp	r2, #2
    4770:	461c      	mov	r4, r3
    4772:	d113      	bne.n	479c <connection_follow_cb+0x38>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    4774:	2203      	movs	r2, #3
    4776:	761a      	strb	r2, [r3, #24]
		le.conn_epoch = clkn;
    4778:	4a54      	ldr	r2, [pc, #336]	; (48cc <connection_follow_cb+0x168>)
    477a:	6812      	ldr	r2, [r2, #0]
    477c:	61da      	str	r2, [r3, #28]
		le.interval_timer = le.conn_interval - 1;
    477e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    4780:	3a01      	subs	r2, #1
    4782:	b292      	uxth	r2, r2
    4784:	841a      	strh	r2, [r3, #32]
		le.conn_count = 0;
    4786:	2200      	movs	r2, #0
    4788:	849a      	strh	r2, [r3, #36]	; 0x24
		le.update_pending = 0;
    478a:	62da      	str	r2, [r3, #44]	; 0x2c

		// hue hue hue
		if (jam_mode != JAM_NONE)
    478c:	4b50      	ldr	r3, [pc, #320]	; (48d0 <connection_follow_cb+0x16c>)
    478e:	7cda      	ldrb	r2, [r3, #19]
    4790:	2a00      	cmp	r2, #0
    4792:	f000 8098 	beq.w	48c6 <connection_follow_cb+0x162>
			le_jam_count = JAM_COUNT_DEFAULT;
    4796:	2228      	movs	r2, #40	; 0x28
    4798:	61da      	str	r2, [r3, #28]
    479a:	bd38      	pop	{r3, r4, r5, pc}

	} else if (le.link_state == LINK_CONNECTED) {
    479c:	2a03      	cmp	r2, #3
    479e:	d13b      	bne.n	4818 <connection_follow_cb+0xb4>
		u8 llid =  header & 0x03;

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		// hue hue hue
		if (jam_mode != JAM_NONE)
			le_jam_count = JAM_COUNT_DEFAULT;

	} else if (le.link_state == LINK_CONNECTED) {
		u8 llid =  header & 0x03;
    47a2:	f001 0103 	and.w	r1, r1, #3

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    47a6:	b1a3      	cbz	r3, 47d2 <connection_follow_cb+0x6e>
    47a8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    47aa:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    47ac:	b29b      	uxth	r3, r3
    47ae:	429a      	cmp	r2, r3
    47b0:	d10f      	bne.n	47d2 <connection_follow_cb+0x6e>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    47b2:	4b46      	ldr	r3, [pc, #280]	; (48cc <connection_follow_cb+0x168>)
    47b4:	681b      	ldr	r3, [r3, #0]
    47b6:	61e3      	str	r3, [r4, #28]
			le.conn_interval = le.interval_update;
    47b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    47ba:	8463      	strh	r3, [r4, #34]	; 0x22
			le.interval_timer = le.interval_update - 1;
    47bc:	3b01      	subs	r3, #1
    47be:	b29b      	uxth	r3, r3
    47c0:	8423      	strh	r3, [r4, #32]
			le.win_size = le.win_size_update;
    47c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    47c6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			le.win_offset = le.win_offset_update;
    47ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    47cc:	8523      	strh	r3, [r4, #40]	; 0x28
			le.update_pending = 0;
    47ce:	2300      	movs	r3, #0
    47d0:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		if (llid == 0x03 && data[0] == 0x00) {
    47d2:	2903      	cmp	r1, #3
    47d4:	d177      	bne.n	48c6 <connection_follow_cb+0x162>
    47d6:	79ab      	ldrb	r3, [r5, #6]
    47d8:	2b00      	cmp	r3, #0
    47da:	d174      	bne.n	48c6 <connection_follow_cb+0x162>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    47dc:	79eb      	ldrb	r3, [r5, #7]
    47de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    47e2:	7a6a      	ldrb	r2, [r5, #9]
    47e4:	7a2b      	ldrb	r3, [r5, #8]
    47e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47ea:	86e3      	strh	r3, [r4, #54]	; 0x36
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    47ec:	7aea      	ldrb	r2, [r5, #11]
    47ee:	7aab      	ldrb	r3, [r5, #10]
    47f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47f4:	8663      	strh	r3, [r4, #50]	; 0x32
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    47f6:	7c6a      	ldrb	r2, [r5, #17]
    47f8:	7c2b      	ldrb	r3, [r5, #16]
    47fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    47fe:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4800:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    4802:	b292      	uxth	r2, r2
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4804:	8623      	strh	r3, [r4, #48]	; 0x30
			if (le.update_instant - le.conn_count < 32767)
    4806:	1a9b      	subs	r3, r3, r2
    4808:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    480c:	4293      	cmp	r3, r2
    480e:	dc5a      	bgt.n	48c6 <connection_follow_cb+0x162>
				le.update_pending = 1;
    4810:	4b2d      	ldr	r3, [pc, #180]	; (48c8 <connection_follow_cb+0x164>)
    4812:	2201      	movs	r2, #1
    4814:	62da      	str	r2, [r3, #44]	; 0x2c
    4816:	bd38      	pop	{r3, r4, r5, pc}
		}

	} else if (le.link_state == LINK_LISTENING) {
    4818:	2a01      	cmp	r2, #1
    481a:	d154      	bne.n	48c6 <connection_follow_cb+0x162>
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
    481c:	f001 010f 	and.w	r1, r1, #15
    4820:	2905      	cmp	r1, #5
    4822:	d150      	bne.n	48c6 <connection_follow_cb+0x162>
			uint16_t conn_interval;

			// ignore packets with incorrect length
			if (*data_len != 34)
    4824:	7943      	ldrb	r3, [r0, #5]
    4826:	2b22      	cmp	r3, #34	; 0x22
    4828:	d14d      	bne.n	48c6 <connection_follow_cb+0x162>
				return;

			// conn interval must be [7.5 ms, 4.0s] in units of 1.25 ms
			conn_interval = (packet[29] << 8) | packet[28];
    482a:	7f03      	ldrb	r3, [r0, #28]
    482c:	7f42      	ldrb	r2, [r0, #29]
    482e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    4832:	3a06      	subs	r2, #6
    4834:	b292      	uxth	r2, r2
    4836:	f640 437a 	movw	r3, #3194	; 0xc7a
    483a:	429a      	cmp	r2, r3
    483c:	d843      	bhi.n	48c6 <connection_follow_cb+0x162>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    483e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4840:	b92b      	cbnz	r3, 484e <connection_follow_cb+0xea>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4842:	2302      	movs	r3, #2
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4844:	2000      	movs	r0, #0
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4846:	7623      	strb	r3, [r4, #24]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4848:	6160      	str	r0, [r4, #20]

			for (i = 0; i < 4; ++i)
    484a:	4603      	mov	r3, r0
    484c:	e011      	b.n	4872 <connection_follow_cb+0x10e>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    484e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4852:	1da9      	adds	r1, r5, #6
    4854:	2206      	movs	r2, #6
    4856:	f004 f9eb 	bl	8c30 <memcmp>
			if (conn_interval < 6 || conn_interval > 3200)
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    485a:	2800      	cmp	r0, #0
    485c:	d0f1      	beq.n	4842 <connection_follow_cb+0xde>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    485e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4862:	f105 010c 	add.w	r1, r5, #12
    4866:	2206      	movs	r2, #6
    4868:	f004 f9e2 	bl	8c30 <memcmp>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    486c:	2800      	cmp	r0, #0
    486e:	d0e8      	beq.n	4842 <connection_follow_cb+0xde>
    4870:	bd38      	pop	{r3, r4, r5, pc}
    4872:	18ea      	adds	r2, r5, r3

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
    4874:	7c91      	ldrb	r1, [r2, #18]
    4876:	00da      	lsls	r2, r3, #3
    4878:	fa01 f202 	lsl.w	r2, r1, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    487c:	3301      	adds	r3, #1
    487e:	2b04      	cmp	r3, #4
				aa |= packet[18+i] << (i*8);
    4880:	ea40 0002 	orr.w	r0, r0, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    4884:	d1f5      	bne.n	4872 <connection_follow_cb+0x10e>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    4886:	f7ff fe89 	bl	459c <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
    488a:	7de8      	ldrb	r0, [r5, #23]
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    488c:	7e2b      	ldrb	r3, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    488e:	0200      	lsls	r0, r0, #8
    4890:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
						|  packet[CRC_INIT+0];
    4894:	7dab      	ldrb	r3, [r5, #22]
    4896:	4318      	orrs	r0, r3
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    4898:	60e0      	str	r0, [r4, #12]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    489a:	f003 fb31 	bl	7f00 <rbit>

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    489e:	7e6b      	ldrb	r3, [r5, #25]

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    48a0:	6120      	str	r0, [r4, #16]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    48a2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    48a6:	7eab      	ldrb	r3, [r5, #26]
    48a8:	8523      	strh	r3, [r4, #40]	; 0x28

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    48aa:	7f6a      	ldrb	r2, [r5, #29]
    48ac:	7f2b      	ldrb	r3, [r5, #28]
    48ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    48b2:	8463      	strh	r3, [r4, #34]	; 0x22
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48b4:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
			le.channel_idx = le.channel_increment;

			// Hop to the initial channel immediately
			do_hop = 1;
    48b8:	2201      	movs	r2, #1
#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    48ba:	f003 031f 	and.w	r3, r3, #31
    48be:	76a3      	strb	r3, [r4, #26]
			le.channel_idx = le.channel_increment;
    48c0:	7663      	strb	r3, [r4, #25]

			// Hop to the initial channel immediately
			do_hop = 1;
    48c2:	4b03      	ldr	r3, [pc, #12]	; (48d0 <connection_follow_cb+0x16c>)
    48c4:	72da      	strb	r2, [r3, #11]
    48c6:	bd38      	pop	{r3, r4, r5, pc}
    48c8:	10000448 	.word	0x10000448
    48cc:	10000bc4 	.word	0x10000bc4
    48d0:	10000a1c 	.word	0x10000a1c

000048d4 <vendor_request_handler>:

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    48d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48d8:	460d      	mov	r5, r1
    48da:	4616      	mov	r6, r2
    48dc:	461c      	mov	r4, r3
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    48de:	284d      	cmp	r0, #77	; 0x4d
    48e0:	f200 836d 	bhi.w	4fbe <vendor_request_handler+0x6ea>
    48e4:	e8df f010 	tbh	[pc, r0, lsl #1]
    48e8:	00500108 	.word	0x00500108
    48ec:	00590055 	.word	0x00590055
    48f0:	0061005e 	.word	0x0061005e
    48f4:	00690066 	.word	0x00690066
    48f8:	006f006b 	.word	0x006f006b
    48fc:	00c90074 	.word	0x00c90074
    4900:	010d00d0 	.word	0x010d00d0
    4904:	007d0082 	.word	0x007d0082
    4908:	008c0087 	.word	0x008c0087
    490c:	0094008f 	.word	0x0094008f
    4910:	00c1009c 	.word	0x00c1009c
    4914:	00c500c3 	.word	0x00c500c3
    4918:	010a0106 	.word	0x010a0106
    491c:	010f036b 	.word	0x010f036b
    4920:	00a700a0 	.word	0x00a700a0
    4924:	00af00b1 	.word	0x00af00b1
    4928:	013c00b3 	.word	0x013c00b3
    492c:	0159012d 	.word	0x0159012d
    4930:	0160015c 	.word	0x0160015c
    4934:	01b60164 	.word	0x01b60164
    4938:	021201ee 	.word	0x021201ee
    493c:	025a0252 	.word	0x025a0252
    4940:	03680265 	.word	0x03680265
    4944:	02790274 	.word	0x02790274
    4948:	0286027f 	.word	0x0286027f
    494c:	01fb0295 	.word	0x01fb0295
    4950:	02a30208 	.word	0x02a30208
    4954:	014b02da 	.word	0x014b02da
    4958:	036b0348 	.word	0x036b0348
    495c:	035f02ab 	.word	0x035f02ab
    4960:	01d60363 	.word	0x01d60363
    4964:	021d01e9 	.word	0x021d01e9
    4968:	004e036b 	.word	0x004e036b
    496c:	012b02c1 	.word	0x012b02c1
    4970:	022402d1 	.word	0x022402d1
    4974:	02ec02e3 	.word	0x02ec02e3
    4978:	02fe02f5 	.word	0x02fe02f5
    497c:	032c0307 	.word	0x032c0307
    4980:	033e0335 	.word	0x033e0335
    4984:	2400      	movs	r4, #0
    4986:	e25f      	b.n	4e48 <vendor_request_handler+0x574>
	case UBERTOOTH_PING:
		*data_len = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4988:	4ba3      	ldr	r3, [pc, #652]	; (4c18 <vendor_request_handler+0x344>)
    498a:	2001      	movs	r0, #1
    498c:	7498      	strb	r0, [r3, #18]
		*data_len = 0;
    498e:	2300      	movs	r3, #0
    4990:	e1af      	b.n	4cf2 <vendor_request_handler+0x41e>
		break;

	case UBERTOOTH_TX_SYMBOLS:
		hop_mode = HOP_BLUETOOTH;
    4992:	4ba1      	ldr	r3, [pc, #644]	; (4c18 <vendor_request_handler+0x344>)
    4994:	2202      	movs	r2, #2
    4996:	729a      	strb	r2, [r3, #10]
    4998:	e0e0      	b.n	4b5c <vendor_request_handler+0x288>
		requested_mode = MODE_TX_SYMBOLS;
		*data_len = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    499a:	4ba0      	ldr	r3, [pc, #640]	; (4c1c <vendor_request_handler+0x348>)
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    49a2:	e103      	b.n	4bac <vendor_request_handler+0x2d8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    49a4:	880a      	ldrh	r2, [r1, #0]
    49a6:	2302      	movs	r3, #2
    49a8:	e015      	b.n	49d6 <vendor_request_handler+0x102>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    49aa:	4b9c      	ldr	r3, [pc, #624]	; (4c1c <vendor_request_handler+0x348>)
    49ac:	681b      	ldr	r3, [r3, #0]
    49ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
    49b2:	e0fb      	b.n	4bac <vendor_request_handler+0x2d8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    49b4:	880a      	ldrh	r2, [r1, #0]
    49b6:	2310      	movs	r3, #16
    49b8:	e00d      	b.n	49d6 <vendor_request_handler+0x102>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    49ba:	4b98      	ldr	r3, [pc, #608]	; (4c1c <vendor_request_handler+0x348>)
    49bc:	e024      	b.n	4a08 <vendor_request_handler+0x134>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    49be:	880a      	ldrh	r2, [r1, #0]
    49c0:	f44f 7380 	mov.w	r3, #256	; 0x100
    49c4:	e007      	b.n	49d6 <vendor_request_handler+0x102>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    49c6:	4b95      	ldr	r3, [pc, #596]	; (4c1c <vendor_request_handler+0x348>)
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	f3c3 2340 	ubfx	r3, r3, #9, #1
    49ce:	e0ed      	b.n	4bac <vendor_request_handler+0x2d8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    49d0:	880a      	ldrh	r2, [r1, #0]
    49d2:	f44f 7300 	mov.w	r3, #512	; 0x200
    49d6:	b912      	cbnz	r2, 49de <vendor_request_handler+0x10a>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    49d8:	4a91      	ldr	r2, [pc, #580]	; (4c20 <vendor_request_handler+0x34c>)
    49da:	6013      	str	r3, [r2, #0]
    49dc:	e2ec      	b.n	4fb8 <vendor_request_handler+0x6e4>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
    49de:	4a91      	ldr	r2, [pc, #580]	; (4c24 <vendor_request_handler+0x350>)
    49e0:	e7fb      	b.n	49da <vendor_request_handler+0x106>
		else
			CC1V8_CLR;
		break;

	case UBERTOOTH_GET_PARTNUM:
		get_part_num(data, data_len);
    49e2:	4610      	mov	r0, r2
    49e4:	4621      	mov	r1, r4
    49e6:	f003 fd11 	bl	840c <get_part_num>
    49ea:	e2e5      	b.n	4fb8 <vendor_request_handler+0x6e4>
	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_GET_SERIAL:
		get_device_serial(data, data_len);
    49ec:	4610      	mov	r0, r2
    49ee:	4621      	mov	r1, r4
    49f0:	f003 fd28 	bl	8444 <get_device_serial>
    49f4:	e2e0      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    49f6:	4b8c      	ldr	r3, [pc, #560]	; (4c28 <vendor_request_handler+0x354>)
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    49fe:	e0d5      	b.n	4bac <vendor_request_handler+0x2d8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4a00:	880a      	ldrh	r2, [r1, #0]
    4a02:	2380      	movs	r3, #128	; 0x80
    4a04:	e007      	b.n	4a16 <vendor_request_handler+0x142>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4a06:	4b88      	ldr	r3, [pc, #544]	; (4c28 <vendor_request_handler+0x354>)
    4a08:	681b      	ldr	r3, [r3, #0]
    4a0a:	f3c3 2300 	ubfx	r3, r3, #8, #1
    4a0e:	e0cd      	b.n	4bac <vendor_request_handler+0x2d8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4a10:	880a      	ldrh	r2, [r1, #0]
    4a12:	f44f 7380 	mov.w	r3, #256	; 0x100
    4a16:	b10a      	cbz	r2, 4a1c <vendor_request_handler+0x148>
			HGM_SET;
    4a18:	4a84      	ldr	r2, [pc, #528]	; (4c2c <vendor_request_handler+0x358>)
    4a1a:	e7de      	b.n	49da <vendor_request_handler+0x106>
		else
			HGM_CLR;
    4a1c:	4a84      	ldr	r2, [pc, #528]	; (4c30 <vendor_request_handler+0x35c>)
    4a1e:	e7dc      	b.n	49da <vendor_request_handler+0x106>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4a20:	2203      	movs	r2, #3
    4a22:	4b7d      	ldr	r3, [pc, #500]	; (4c18 <vendor_request_handler+0x344>)
    4a24:	749a      	strb	r2, [r3, #18]
    4a26:	e2c7      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4a28:	2005      	movs	r0, #5
    4a2a:	f003 fb55 	bl	80d8 <cc2400_get>
    4a2e:	f000 0007 	and.w	r0, r0, #7
    4a32:	7030      	strb	r0, [r6, #0]
    4a34:	e1e9      	b.n	4e0a <vendor_request_handler+0x536>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4a36:	8809      	ldrh	r1, [r1, #0]
    4a38:	2907      	cmp	r1, #7
    4a3a:	f200 82c0 	bhi.w	4fbe <vendor_request_handler+0x6ea>
			cc2400_set(FREND, 8 | request_params[0]);
    4a3e:	2005      	movs	r0, #5
    4a40:	f041 0108 	orr.w	r1, r1, #8
    4a44:	e1fd      	b.n	4e42 <vendor_request_handler+0x56e>
			return 0;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4a46:	2205      	movs	r2, #5
    4a48:	e7eb      	b.n	4a22 <vendor_request_handler+0x14e>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4a4a:	2206      	movs	r2, #6
    4a4c:	e7e9      	b.n	4a22 <vendor_request_handler+0x14e>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4a4e:	4b79      	ldr	r3, [pc, #484]	; (4c34 <vendor_request_handler+0x360>)
    4a50:	781a      	ldrb	r2, [r3, #0]
    4a52:	7032      	strb	r2, [r6, #0]
		data[1] = rr.request_pa;
    4a54:	785a      	ldrb	r2, [r3, #1]
    4a56:	7072      	strb	r2, [r6, #1]
		data[2] = rr.request_num;
    4a58:	789a      	ldrb	r2, [r3, #2]
    4a5a:	70b2      	strb	r2, [r6, #2]
		data[3] = rr.reply_pa;
    4a5c:	78da      	ldrb	r2, [r3, #3]
    4a5e:	70f2      	strb	r2, [r6, #3]
		data[4] = rr.reply_num;
    4a60:	791b      	ldrb	r3, [r3, #4]
    4a62:	7133      	strb	r3, [r6, #4]
		*data_len = 5;
    4a64:	2305      	movs	r3, #5
    4a66:	6023      	str	r3, [r4, #0]
    4a68:	e2a6      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4a6a:	2200      	movs	r2, #0
    4a6c:	e7d9      	b.n	4a22 <vendor_request_handler+0x14e>
		break;

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4a6e:	4b6a      	ldr	r3, [pc, #424]	; (4c18 <vendor_request_handler+0x344>)
    4a70:	e09b      	b.n	4baa <vendor_request_handler+0x2d6>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4a72:	780a      	ldrb	r2, [r1, #0]
    4a74:	4b68      	ldr	r3, [pc, #416]	; (4c18 <vendor_request_handler+0x344>)
    4a76:	701a      	strb	r2, [r3, #0]
    4a78:	e29e      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4a7a:	4b6f      	ldr	r3, [pc, #444]	; (4c38 <vendor_request_handler+0x364>)
    4a7c:	881a      	ldrh	r2, [r3, #0]
    4a7e:	7032      	strb	r2, [r6, #0]
		data[1] = (channel >> 8) & 0xFF;
    4a80:	881b      	ldrh	r3, [r3, #0]
    4a82:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a86:	e1a6      	b.n	4dd6 <vendor_request_handler+0x502>
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4a88:	880a      	ldrh	r2, [r1, #0]
    4a8a:	4b63      	ldr	r3, [pc, #396]	; (4c18 <vendor_request_handler+0x344>)
    4a8c:	81da      	strh	r2, [r3, #14]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4a8e:	89d9      	ldrh	r1, [r3, #14]
    4a90:	f640 22ea 	movw	r2, #2794	; 0xaea
    4a94:	b289      	uxth	r1, r1
    4a96:	4291      	cmp	r1, r2
    4a98:	d904      	bls.n	4aa4 <vendor_request_handler+0x1d0>
			hop_mode = HOP_SWEEP;
    4a9a:	2201      	movs	r2, #1
    4a9c:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4a9e:	f640 1262 	movw	r2, #2402	; 0x962
    4aa2:	e015      	b.n	4ad0 <vendor_request_handler+0x1fc>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4aa4:	2200      	movs	r2, #0
    4aa6:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4aa8:	89d9      	ldrh	r1, [r3, #14]
    4aaa:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4aae:	b289      	uxth	r1, r1
    4ab0:	4291      	cmp	r1, r2
    4ab2:	bf84      	itt	hi
    4ab4:	89da      	ldrhhi	r2, [r3, #14]
    4ab6:	b292      	uxthhi	r2, r2
    4ab8:	81da      	strh	r2, [r3, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4aba:	89d9      	ldrh	r1, [r3, #14]
    4abc:	f640 22e9 	movw	r2, #2793	; 0xae9
    4ac0:	b289      	uxth	r1, r1
    4ac2:	4291      	cmp	r1, r2
    4ac4:	bf97      	itett	ls
    4ac6:	4a54      	ldrls	r2, [pc, #336]	; (4c18 <vendor_request_handler+0x344>)
    4ac8:	f640 22ea 	movwhi	r2, #2794	; 0xaea
    4acc:	89d2      	ldrhls	r2, [r2, #14]
    4ace:	b292      	uxthls	r2, r2
    4ad0:	81da      	strh	r2, [r3, #14]
		}

		le_adv_channel = requested_channel;
    4ad2:	89d8      	ldrh	r0, [r3, #14]
    4ad4:	4a58      	ldr	r2, [pc, #352]	; (4c38 <vendor_request_handler+0x364>)
    4ad6:	b280      	uxth	r0, r0
    4ad8:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
		if (mode != MODE_BT_FOLLOW_LE) {
    4adc:	7c5b      	ldrb	r3, [r3, #17]
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
			requested_channel = MIN(requested_channel, MAX_FREQ);
		}

		le_adv_channel = requested_channel;
    4ade:	494e      	ldr	r1, [pc, #312]	; (4c18 <vendor_request_handler+0x344>)
		if (mode != MODE_BT_FOLLOW_LE) {
    4ae0:	2b09      	cmp	r3, #9
    4ae2:	f000 8269 	beq.w	4fb8 <vendor_request_handler+0x6e4>
			channel = requested_channel;
    4ae6:	89cb      	ldrh	r3, [r1, #14]
    4ae8:	b29b      	uxth	r3, r3
    4aea:	8013      	strh	r3, [r2, #0]
			requested_channel = 0;
    4aec:	2300      	movs	r3, #0
    4aee:	81cb      	strh	r3, [r1, #14]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set(channel);
    4af0:	8810      	ldrh	r0, [r2, #0]
    4af2:	e198      	b.n	4e26 <vendor_request_handler+0x552>
		}
		break;

	case UBERTOOTH_SET_ISP:
		set_isp();
    4af4:	f003 fcda 	bl	84ac <set_isp>
		*data_len = 0; /* should never return */
    4af8:	2300      	movs	r3, #0
    4afa:	e7b4      	b.n	4a66 <vendor_request_handler+0x192>
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4afc:	4a4f      	ldr	r2, [pc, #316]	; (4c3c <vendor_request_handler+0x368>)
    4afe:	4b50      	ldr	r3, [pc, #320]	; (4c40 <vendor_request_handler+0x36c>)
    4b00:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    4b02:	220b      	movs	r2, #11
    4b04:	e78d      	b.n	4a22 <vendor_request_handler+0x14e>
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b06:	880a      	ldrh	r2, [r1, #0]
    4b08:	f46f 6600 	mvn.w	r6, #2048	; 0x800
    4b0c:	1993      	adds	r3, r2, r6
    4b0e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4b12:	b29b      	uxth	r3, r3
    4b14:	428b      	cmp	r3, r1
    4b16:	f200 8252 	bhi.w	4fbe <vendor_request_handler+0x6ea>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b1a:	886b      	ldrh	r3, [r5, #2]
		bootloader_ctrl = DFU_MODE;
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4b1c:	f46f 6500 	mvn.w	r5, #2048	; 0x800
    4b20:	1958      	adds	r0, r3, r5
    4b22:	b280      	uxth	r0, r0
    4b24:	4288      	cmp	r0, r1
    4b26:	f200 824a 	bhi.w	4fbe <vendor_request_handler+0x6ea>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4b2a:	4293      	cmp	r3, r2
    4b2c:	f0c0 8247 	bcc.w	4fbe <vendor_request_handler+0x6ea>
				request_params[1] < request_params[0])
			return 0;
		low_freq = request_params[0];
    4b30:	4941      	ldr	r1, [pc, #260]	; (4c38 <vendor_request_handler+0x364>)
    4b32:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		high_freq = request_params[1];
    4b36:	f8a1 304e 	strh.w	r3, [r1, #78]	; 0x4e
		requested_mode = MODE_SPECAN;
    4b3a:	2204      	movs	r2, #4
    4b3c:	e00d      	b.n	4b5a <vendor_request_handler+0x286>
		*data_len = 0;
		break;

	case UBERTOOTH_RX_GENERIC:
		requested_mode = MODE_RX_GENERIC;
    4b3e:	220f      	movs	r2, #15
    4b40:	e00b      	b.n	4b5a <vendor_request_handler+0x286>
		*data_len = 0;
		break;

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4b42:	880b      	ldrh	r3, [r1, #0]
    4b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4b48:	f200 8239 	bhi.w	4fbe <vendor_request_handler+0x6ea>
			return 0;
		rssi_threshold = 54 - request_params[0];
    4b4c:	4a3a      	ldr	r2, [pc, #232]	; (4c38 <vendor_request_handler+0x364>)
    4b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4b52:	b2db      	uxtb	r3, r3
    4b54:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		requested_mode = MODE_LED_SPECAN;
    4b58:	2207      	movs	r2, #7
    4b5a:	4b2f      	ldr	r3, [pc, #188]	; (4c18 <vendor_request_handler+0x344>)
    4b5c:	749a      	strb	r2, [r3, #18]
    4b5e:	e7cb      	b.n	4af8 <vendor_request_handler+0x224>
		*data_len = 0;
		break;

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4b60:	2300      	movs	r3, #0
    4b62:	7013      	strb	r3, [r2, #0]
		data[1] = 0x00;
    4b64:	7053      	strb	r3, [r2, #1]

		length = (u8)strlen(GIT_REVISION);
    4b66:	4837      	ldr	r0, [pc, #220]	; (4c44 <vendor_request_handler+0x370>)
    4b68:	f004 f90c 	bl	8d84 <strlen>
    4b6c:	b2c5      	uxtb	r5, r0
		data[2] = length;
    4b6e:	70b5      	strb	r5, [r6, #2]

		memcpy(&data[3], GIT_REVISION, length);
    4b70:	462a      	mov	r2, r5
    4b72:	1cf0      	adds	r0, r6, #3
    4b74:	4933      	ldr	r1, [pc, #204]	; (4c44 <vendor_request_handler+0x370>)
    4b76:	f004 f88f 	bl	8c98 <memcpy>

		*data_len = 2 + 1 + length;
    4b7a:	3503      	adds	r5, #3
    4b7c:	e00b      	b.n	4b96 <vendor_request_handler+0x2c2>
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4b7e:	4832      	ldr	r0, [pc, #200]	; (4c48 <vendor_request_handler+0x374>)
    4b80:	f004 f900 	bl	8d84 <strlen>
    4b84:	b2c5      	uxtb	r5, r0
		data[0] = length;
    4b86:	4630      	mov	r0, r6
    4b88:	f800 5b01 	strb.w	r5, [r0], #1
		memcpy(&data[1], compile_info, length);
    4b8c:	462a      	mov	r2, r5
    4b8e:	492e      	ldr	r1, [pc, #184]	; (4c48 <vendor_request_handler+0x374>)
    4b90:	f004 f882 	bl	8c98 <memcpy>
		*data_len = 1 + length;
    4b94:	3501      	adds	r5, #1
    4b96:	6025      	str	r5, [r4, #0]
    4b98:	e20e      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4b9a:	2001      	movs	r0, #1
    4b9c:	7010      	strb	r0, [r2, #0]
    4b9e:	e135      	b.n	4e0c <vendor_request_handler+0x538>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4ba0:	880a      	ldrh	r2, [r1, #0]
    4ba2:	4b2a      	ldr	r3, [pc, #168]	; (4c4c <vendor_request_handler+0x378>)
    4ba4:	701a      	strb	r2, [r3, #0]
    4ba6:	e13c      	b.n	4e22 <vendor_request_handler+0x54e>
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4ba8:	4b28      	ldr	r3, [pc, #160]	; (4c4c <vendor_request_handler+0x378>)
    4baa:	781b      	ldrb	r3, [r3, #0]
    4bac:	7033      	strb	r3, [r6, #0]
    4bae:	e12c      	b.n	4e0a <vendor_request_handler+0x536>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4bb0:	4f27      	ldr	r7, [pc, #156]	; (4c50 <vendor_request_handler+0x37c>)
    4bb2:	2400      	movs	r4, #0
    4bb4:	2500      	movs	r5, #0
    4bb6:	e9c7 4500 	strd	r4, r5, [r7]
		target.syncword = 0;
    4bba:	e9c7 4502 	strd	r4, r5, [r7, #8]
		for(int i=0; i < 8; i++) {
    4bbe:	f04f 0800 	mov.w	r8, #0
			target.address |= (uint64_t)data[i] << 8*i;
    4bc2:	f816 0008 	ldrb.w	r0, [r6, r8]
    4bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4bca:	2100      	movs	r1, #0
    4bcc:	f004 f824 	bl	8c18 <__aeabi_llsl>
    4bd0:	e9d7 4500 	ldrd	r4, r5, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4bd4:	f108 0801 	add.w	r8, r8, #1
			target.address |= (uint64_t)data[i] << 8*i;
    4bd8:	4320      	orrs	r0, r4
    4bda:	4329      	orrs	r1, r5
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4bdc:	f1b8 0f08 	cmp.w	r8, #8
			target.address |= (uint64_t)data[i] << 8*i;
    4be0:	e9c7 0100 	strd	r0, r1, [r7]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4be4:	d1ed      	bne.n	4bc2 <vendor_request_handler+0x2ee>
    4be6:	f04f 0800 	mov.w	r8, #0
    4bea:	eb06 0308 	add.w	r3, r6, r8
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4bee:	7a18      	ldrb	r0, [r3, #8]
    4bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
    4bf4:	2100      	movs	r1, #0
    4bf6:	f004 f80f 	bl	8c18 <__aeabi_llsl>
    4bfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4bfe:	f108 0801 	add.w	r8, r8, #1
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c02:	4320      	orrs	r0, r4
    4c04:	4329      	orrs	r1, r5
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c06:	f1b8 0f08 	cmp.w	r8, #8
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4c0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4c0e:	d1ec      	bne.n	4bea <vendor_request_handler+0x316>
			target.syncword |= (uint64_t)data[i+8] << 8*i;
		}
		precalc();
    4c10:	f001 ffc6 	bl	6ba0 <precalc>
    4c14:	e1d0      	b.n	4fb8 <vendor_request_handler+0x6e4>
    4c16:	bf00      	nop
    4c18:	10000a1c 	.word	0x10000a1c
    4c1c:	2009c034 	.word	0x2009c034
    4c20:	2009c03c 	.word	0x2009c03c
    4c24:	2009c038 	.word	0x2009c038
    4c28:	2009c054 	.word	0x2009c054
    4c2c:	2009c058 	.word	0x2009c058
    4c30:	2009c05c 	.word	0x2009c05c
    4c34:	10001080 	.word	0x10001080
    4c38:	10000448 	.word	0x10000448
    4c3c:	4305bb21 	.word	0x4305bb21
    4c40:	1000001c 	.word	0x1000001c
    4c44:	000096bc 	.word	0x000096bc
    4c48:	00008e93 	.word	0x00008e93
    4c4c:	10001048 	.word	0x10001048
    4c50:	100010c0 	.word	0x100010c0
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
    4c54:	4aac      	ldr	r2, [pc, #688]	; (4f08 <vendor_request_handler+0x634>)
    4c56:	2300      	movs	r3, #0
    4c58:	6013      	str	r3, [r2, #0]
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
    4c5a:	6811      	ldr	r1, [r2, #0]
    4c5c:	0209      	lsls	r1, r1, #8
    4c5e:	6011      	str	r1, [r2, #0]
			clkn_offset |= data[i];
    4c60:	5cf0      	ldrb	r0, [r6, r3]
    4c62:	6811      	ldr	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c64:	3301      	adds	r3, #1
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c66:	4301      	orrs	r1, r0
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c68:	2b04      	cmp	r3, #4
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c6a:	6011      	str	r1, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c6c:	d1f5      	bne.n	4c5a <vendor_request_handler+0x386>
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
    4c6e:	4ba7      	ldr	r3, [pc, #668]	; (4f0c <vendor_request_handler+0x638>)
    4c70:	2202      	movs	r2, #2
    4c72:	729a      	strb	r2, [r3, #10]
		dma_discard = 1;
		DIO_SSEL_SET;
    4c74:	4aa6      	ldr	r2, [pc, #664]	; (4f10 <vendor_request_handler+0x63c>)
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c76:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4c78:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c7c:	7418      	strb	r0, [r3, #16]
		DIO_SSEL_SET;
    4c7e:	6011      	str	r1, [r2, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4c80:	7972      	ldrb	r2, [r6, #5]
    4c82:	7931      	ldrb	r1, [r6, #4]
    4c84:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    4c88:	4aa2      	ldr	r2, [pc, #648]	; (4f14 <vendor_request_handler+0x640>)
    4c8a:	8011      	strh	r1, [r2, #0]
		requested_mode = MODE_BT_FOLLOW;
    4c8c:	2208      	movs	r2, #8
    4c8e:	749a      	strb	r2, [r3, #18]
		break;
    4c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
    4c94:	4b9d      	ldr	r3, [pc, #628]	; (4f0c <vendor_request_handler+0x638>)
    4c96:	2205      	movs	r2, #5
    4c98:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_AFH;
    4c9a:	220e      	movs	r2, #14
    4c9c:	749a      	strb	r2, [r3, #18]

		for(int i=0; i < 10; i++) {
    4c9e:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4ca0:	499d      	ldr	r1, [pc, #628]	; (4f18 <vendor_request_handler+0x644>)
    4ca2:	2200      	movs	r2, #0
    4ca4:	545a      	strb	r2, [r3, r1]

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
    4ca6:	3301      	adds	r3, #1
    4ca8:	2b0a      	cmp	r3, #10
    4caa:	d1f9      	bne.n	4ca0 <vendor_request_handler+0x3cc>
			afh_map[i] = 0;
		}
		used_channels = 0;
    4cac:	4b9b      	ldr	r3, [pc, #620]	; (4f1c <vendor_request_handler+0x648>)
		afh_enabled = 1;
    4cae:	2001      	movs	r0, #1
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
		}
		used_channels = 0;
    4cb0:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4cb2:	4b9b      	ldr	r3, [pc, #620]	; (4f20 <vendor_request_handler+0x64c>)
    4cb4:	7018      	strb	r0, [r3, #0]
		break;
    4cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_HOP:
		do_hop = 1;
    4cba:	4b94      	ldr	r3, [pc, #592]	; (4f0c <vendor_request_handler+0x638>)
    4cbc:	2001      	movs	r0, #1
    4cbe:	72d8      	strb	r0, [r3, #11]
		break;
    4cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4cc4:	7853      	ldrb	r3, [r2, #1]
    4cc6:	7892      	ldrb	r2, [r2, #2]
    4cc8:	0412      	lsls	r2, r2, #16
    4cca:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    4cce:	7833      	ldrb	r3, [r6, #0]
    4cd0:	431a      	orrs	r2, r3
    4cd2:	78f3      	ldrb	r3, [r6, #3]
    4cd4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		clkn = clock;
    4cd8:	4b92      	ldr	r3, [pc, #584]	; (4f24 <vendor_request_handler+0x650>)
    4cda:	601a      	str	r2, [r3, #0]
    4cdc:	e0a1      	b.n	4e22 <vendor_request_handler+0x54e>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4cde:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = data[i];
    4ce0:	5cf1      	ldrb	r1, [r6, r3]
    4ce2:	4a8d      	ldr	r2, [pc, #564]	; (4f18 <vendor_request_handler+0x644>)
    4ce4:	5499      	strb	r1, [r3, r2]
		clkn = clock;
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    4ce6:	3301      	adds	r3, #1
    4ce8:	2b0a      	cmp	r3, #10
    4cea:	d1f9      	bne.n	4ce0 <vendor_request_handler+0x40c>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    4cec:	4a8c      	ldr	r2, [pc, #560]	; (4f20 <vendor_request_handler+0x64c>)
    4cee:	2001      	movs	r0, #1
    4cf0:	7010      	strb	r0, [r2, #0]
		*data_len = 10;
    4cf2:	6023      	str	r3, [r4, #0]
		break;
    4cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4cf8:	2300      	movs	r3, #0
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
    4cfa:	4987      	ldr	r1, [pc, #540]	; (4f18 <vendor_request_handler+0x644>)
    4cfc:	2200      	movs	r2, #0
    4cfe:	545a      	strb	r2, [r3, r1]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    4d00:	3301      	adds	r3, #1
    4d02:	2b0a      	cmp	r3, #10
    4d04:	d1f9      	bne.n	4cfa <vendor_request_handler+0x426>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    4d06:	4986      	ldr	r1, [pc, #536]	; (4f20 <vendor_request_handler+0x64c>)
    4d08:	700a      	strb	r2, [r1, #0]
    4d0a:	e6ac      	b.n	4a66 <vendor_request_handler+0x192>
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    4d0c:	4b85      	ldr	r3, [pc, #532]	; (4f24 <vendor_request_handler+0x650>)
    4d0e:	6819      	ldr	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4d10:	2300      	movs	r3, #0
    4d12:	00da      	lsls	r2, r3, #3
			data[i] = (clock >> (8*i)) & 0xff;
    4d14:	fa21 f202 	lsr.w	r2, r1, r2
    4d18:	54f2      	strb	r2, [r6, r3]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(int i=0; i < 4; i++) {
    4d1a:	3301      	adds	r3, #1
    4d1c:	2b04      	cmp	r3, #4
    4d1e:	d1f8      	bne.n	4d12 <vendor_request_handler+0x43e>
    4d20:	e6a1      	b.n	4a66 <vendor_request_handler+0x192>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_TRIM_CLOCK:
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4d22:	7873      	ldrb	r3, [r6, #1]
    4d24:	7812      	ldrb	r2, [r2, #0]
    4d26:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    4d2a:	4b7a      	ldr	r3, [pc, #488]	; (4f14 <vendor_request_handler+0x640>)
    4d2c:	801a      	strh	r2, [r3, #0]
    4d2e:	e143      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_FIX_CLOCK_DRIFT:
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4d30:	4b7d      	ldr	r3, [pc, #500]	; (4f28 <vendor_request_handler+0x654>)
    4d32:	7810      	ldrb	r0, [r2, #0]
    4d34:	8819      	ldrh	r1, [r3, #0]
    4d36:	7852      	ldrb	r2, [r2, #1]
    4d38:	b289      	uxth	r1, r1
    4d3a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4d3e:	440a      	add	r2, r1
    4d40:	b292      	uxth	r2, r2
    4d42:	801a      	strh	r2, [r3, #0]

		// Too slow
		if (clk_drift_ppm < 0) {
    4d44:	881a      	ldrh	r2, [r3, #0]
    4d46:	4979      	ldr	r1, [pc, #484]	; (4f2c <vendor_request_handler+0x658>)
    4d48:	b212      	sxth	r2, r2
    4d4a:	2a00      	cmp	r2, #0
    4d4c:	4a78      	ldr	r2, [pc, #480]	; (4f30 <vendor_request_handler+0x65c>)
    4d4e:	da07      	bge.n	4d60 <vendor_request_handler+0x48c>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4d50:	881b      	ldrh	r3, [r3, #0]
    4d52:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d56:	425b      	negs	r3, r3
    4d58:	b29b      	uxth	r3, r3
    4d5a:	fb90 f3f3 	sdiv	r3, r0, r3
    4d5e:	e00a      	b.n	4d76 <vendor_request_handler+0x4a2>
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
		}
		// Too fast
		else if (clk_drift_ppm > 0) {
    4d60:	8818      	ldrh	r0, [r3, #0]
    4d62:	b200      	sxth	r0, r0
    4d64:	2800      	cmp	r0, #0
    4d66:	dd0d      	ble.n	4d84 <vendor_request_handler+0x4b0>
			clk_drift_correction = 320 / clk_drift_ppm;
    4d68:	881b      	ldrh	r3, [r3, #0]
    4d6a:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4d6e:	b21b      	sxth	r3, r3
    4d70:	fb90 f3f3 	sdiv	r3, r0, r3
    4d74:	b29b      	uxth	r3, r3
    4d76:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4d78:	4b6e      	ldr	r3, [pc, #440]	; (4f34 <vendor_request_handler+0x660>)
    4d7a:	6818      	ldr	r0, [r3, #0]
    4d7c:	8813      	ldrh	r3, [r2, #0]
    4d7e:	b29b      	uxth	r3, r3
    4d80:	4403      	add	r3, r0
    4d82:	e001      	b.n	4d88 <vendor_request_handler+0x4b4>
		}
		// Don't trim
		else {
			clk_drift_correction = 0;
    4d84:	2300      	movs	r3, #0
    4d86:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = 0;
    4d88:	600b      	str	r3, [r1, #0]
    4d8a:	e115      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;

		do_hop = 0;
    4d8c:	4b5f      	ldr	r3, [pc, #380]	; (4f0c <vendor_request_handler+0x638>)
		}

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    4d8e:	2200      	movs	r2, #0
    4d90:	6022      	str	r2, [r4, #0]

		do_hop = 0;
    4d92:	72da      	strb	r2, [r3, #11]
		hop_mode = HOP_BTLE;
    4d94:	2203      	movs	r2, #3
    4d96:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4d98:	2209      	movs	r2, #9
    4d9a:	e03f      	b.n	4e1c <vendor_request_handler+0x548>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4d9c:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4d9e:	4966      	ldr	r1, [pc, #408]	; (4f38 <vendor_request_handler+0x664>)
    4da0:	00da      	lsls	r2, r3, #3
    4da2:	6849      	ldr	r1, [r1, #4]
    4da4:	fa21 f202 	lsr.w	r2, r1, r2
    4da8:	54f2      	strb	r2, [r6, r3]
		queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    4daa:	3301      	adds	r3, #1
    4dac:	2b04      	cmp	r3, #4
    4dae:	d1f6      	bne.n	4d9e <vendor_request_handler+0x4ca>
    4db0:	e659      	b.n	4a66 <vendor_request_handler+0x192>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4db2:	78b3      	ldrb	r3, [r6, #2]
    4db4:	7852      	ldrb	r2, [r2, #1]
    4db6:	041b      	lsls	r3, r3, #16
    4db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4dbc:	7832      	ldrb	r2, [r6, #0]
    4dbe:	78f0      	ldrb	r0, [r6, #3]
    4dc0:	4313      	orrs	r3, r2
    4dc2:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4dc6:	f7ff fbe9 	bl	459c <le_set_access_address>
		le.target_set = 1;
    4dca:	2001      	movs	r0, #1
    4dcc:	4b5a      	ldr	r3, [pc, #360]	; (4f38 <vendor_request_handler+0x664>)
    4dce:	e0e7      	b.n	4fa0 <vendor_request_handler+0x6cc>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    4dd0:	2313      	movs	r3, #19
    4dd2:	7013      	strb	r3, [r2, #0]
		data[1] = 0x37;
    4dd4:	2337      	movs	r3, #55	; 0x37
    4dd6:	7073      	strb	r3, [r6, #1]
    4dd8:	e02f      	b.n	4e3a <vendor_request_handler+0x566>
		*data_len = 2;
		break;

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    4dda:	4b57      	ldr	r3, [pc, #348]	; (4f38 <vendor_request_handler+0x664>)
    4ddc:	695b      	ldr	r3, [r3, #20]
    4dde:	3300      	adds	r3, #0
    4de0:	bf18      	it	ne
    4de2:	2301      	movne	r3, #1
    4de4:	e6e2      	b.n	4bac <vendor_request_handler+0x2d8>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    4de6:	880a      	ldrh	r2, [r1, #0]
    4de8:	4b53      	ldr	r3, [pc, #332]	; (4f38 <vendor_request_handler+0x664>)
    4dea:	3200      	adds	r2, #0
    4dec:	bf18      	it	ne
    4dee:	2201      	movne	r2, #1
    4df0:	615a      	str	r2, [r3, #20]
    4df2:	e0e1      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_POLL:
		p = dequeue();
    4df4:	f002 f930 	bl	7058 <dequeue>
		if (p != NULL) {
    4df8:	4601      	mov	r1, r0
    4dfa:	b128      	cbz	r0, 4e08 <vendor_request_handler+0x534>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4dfc:	4630      	mov	r0, r6
    4dfe:	2240      	movs	r2, #64	; 0x40
    4e00:	f003 ff4a 	bl	8c98 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4e04:	2340      	movs	r3, #64	; 0x40
    4e06:	e62e      	b.n	4a66 <vendor_request_handler+0x192>
		} else {
			data[0] = 0;
    4e08:	7030      	strb	r0, [r6, #0]
			*data_len = 1;
    4e0a:	2001      	movs	r0, #1
    4e0c:	6020      	str	r0, [r4, #0]
    4e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;

		hop_mode = HOP_NONE;
    4e12:	4b3e      	ldr	r3, [pc, #248]	; (4f0c <vendor_request_handler+0x638>)
			*data_len = 1;
		}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    4e14:	2200      	movs	r2, #0
    4e16:	6022      	str	r2, [r4, #0]

		hop_mode = HOP_NONE;
    4e18:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4e1a:	220a      	movs	r2, #10
    4e1c:	749a      	strb	r2, [r3, #18]

		queue_init();
    4e1e:	f002 f8f3 	bl	7008 <queue_init>
		cs_threshold_calc_and_set(channel);
    4e22:	4b45      	ldr	r3, [pc, #276]	; (4f38 <vendor_request_handler+0x664>)
    4e24:	8818      	ldrh	r0, [r3, #0]
    4e26:	b280      	uxth	r0, r0
    4e28:	f002 f9dc 	bl	71e4 <cs_threshold_calc_and_set>
    4e2c:	e0c4      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    4e2e:	7808      	ldrb	r0, [r1, #0]
    4e30:	f003 f952 	bl	80d8 <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4e34:	0a03      	lsrs	r3, r0, #8
    4e36:	7033      	strb	r3, [r6, #0]
		data[1] = reg_val & 0xff;
    4e38:	7070      	strb	r0, [r6, #1]
		*data_len = 2;
    4e3a:	2302      	movs	r3, #2
    4e3c:	e613      	b.n	4a66 <vendor_request_handler+0x192>
		break;

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4e3e:	7808      	ldrb	r0, [r1, #0]
    4e40:	8849      	ldrh	r1, [r1, #2]
    4e42:	f003 f952 	bl	80ea <cc2400_set>
    4e46:	e0b7      	b.n	4fb8 <vendor_request_handler+0x6e4>
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e48:	882b      	ldrh	r3, [r5, #0]
    4e4a:	42a3      	cmp	r3, r4
    4e4c:	f240 80b4 	bls.w	4fb8 <vendor_request_handler+0x6e4>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    4e50:	2303      	movs	r3, #3
    4e52:	4363      	muls	r3, r4
    4e54:	18f2      	adds	r2, r6, r3
    4e56:	7851      	ldrb	r1, [r2, #1]
    4e58:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4e5a:	5cf0      	ldrb	r0, [r6, r3]
    4e5c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e60:	3401      	adds	r4, #1
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
			cc2400_set(data[i*3], reg_val);
    4e62:	f003 f942 	bl	80ea <cc2400_set>
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4e66:	b2e4      	uxtb	r4, r4
    4e68:	e7ee      	b.n	4e48 <vendor_request_handler+0x574>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4e6a:	2500      	movs	r5, #0
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
			reg_val = cc2400_get(i);
    4e6c:	4628      	mov	r0, r5
    4e6e:	f003 f933 	bl	80d8 <cc2400_get>
			data[i*3] = i;
    4e72:	7035      	strb	r5, [r6, #0]
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4e74:	3501      	adds	r5, #1
    4e76:	b2ed      	uxtb	r5, r5
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4e78:	0a03      	lsrs	r3, r0, #8
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4e7a:	2d2e      	cmp	r5, #46	; 0x2e
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4e7c:	7073      	strb	r3, [r6, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4e7e:	70b0      	strb	r0, [r6, #2]
    4e80:	f106 0603 	add.w	r6, r6, #3
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4e84:	d1f2      	bne.n	4e6c <vendor_request_handler+0x598>
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
			data[(i*3)+2] = reg_val & 0xff;
		}
		*data_len = MAX_READ_REG*3;
    4e86:	2387      	movs	r3, #135	; 0x87
    4e88:	e5ed      	b.n	4a66 <vendor_request_handler+0x192>
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4e8a:	7992      	ldrb	r2, [r2, #6]
		memcpy(&tx_pkt, data, i);
    4e8c:	482b      	ldr	r0, [pc, #172]	; (4f3c <vendor_request_handler+0x668>)
		}
		*data_len = MAX_READ_REG*3;
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4e8e:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4e90:	b2d2      	uxtb	r2, r2
    4e92:	4631      	mov	r1, r6
    4e94:	f003 ff00 	bl	8c98 <memcpy>
		//tx_pkt.channel = data[4] << 8 | data[5];
		requested_mode = MODE_TX_GENERIC;
    4e98:	2210      	movs	r2, #16
    4e9a:	e65e      	b.n	4b5a <vendor_request_handler+0x286>
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    4e9c:	4c1b      	ldr	r4, [pc, #108]	; (4f0c <vendor_request_handler+0x638>)
    4e9e:	4611      	mov	r1, r2
    4ea0:	f104 0020 	add.w	r0, r4, #32
    4ea4:	2206      	movs	r2, #6
    4ea6:	f003 fef7 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4eaa:	230c      	movs	r3, #12
    4eac:	e062      	b.n	4f74 <vendor_request_handler+0x6a0>
		break;
	
	// WJHUR Power control
	case UBERTOOTH_BTLE_SLAVE_P0:
		memcpy(slave_mac_address, data, 6);
    4eae:	4c17      	ldr	r4, [pc, #92]	; (4f0c <vendor_request_handler+0x638>)
    4eb0:	4611      	mov	r1, r2
    4eb2:	f104 0020 	add.w	r0, r4, #32
    4eb6:	2206      	movs	r2, #6
    4eb8:	f003 feee 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P0;
    4ebc:	2311      	movs	r3, #17
    4ebe:	e059      	b.n	4f74 <vendor_request_handler+0x6a0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P1:
		memcpy(slave_mac_address, data, 6);
    4ec0:	4c12      	ldr	r4, [pc, #72]	; (4f0c <vendor_request_handler+0x638>)
    4ec2:	4611      	mov	r1, r2
    4ec4:	f104 0020 	add.w	r0, r4, #32
    4ec8:	2206      	movs	r2, #6
    4eca:	f003 fee5 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P1;
    4ece:	2312      	movs	r3, #18
    4ed0:	e050      	b.n	4f74 <vendor_request_handler+0x6a0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P2:
		memcpy(slave_mac_address, data, 6);
    4ed2:	4c0e      	ldr	r4, [pc, #56]	; (4f0c <vendor_request_handler+0x638>)
    4ed4:	4611      	mov	r1, r2
    4ed6:	f104 0020 	add.w	r0, r4, #32
    4eda:	2206      	movs	r2, #6
    4edc:	f003 fedc 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P2;
    4ee0:	2313      	movs	r3, #19
    4ee2:	e047      	b.n	4f74 <vendor_request_handler+0x6a0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P3:
		memcpy(slave_mac_address, data, 6);
    4ee4:	4c09      	ldr	r4, [pc, #36]	; (4f0c <vendor_request_handler+0x638>)
    4ee6:	4611      	mov	r1, r2
    4ee8:	f104 0020 	add.w	r0, r4, #32
    4eec:	2206      	movs	r2, #6
    4eee:	f003 fed3 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P3;
    4ef2:	2314      	movs	r3, #20
    4ef4:	e03e      	b.n	4f74 <vendor_request_handler+0x6a0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P4:
		memcpy(slave_mac_address, data, 6);
    4ef6:	4c05      	ldr	r4, [pc, #20]	; (4f0c <vendor_request_handler+0x638>)
    4ef8:	4611      	mov	r1, r2
    4efa:	f104 0020 	add.w	r0, r4, #32
    4efe:	2206      	movs	r2, #6
    4f00:	f003 feca 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P4;
    4f04:	2315      	movs	r3, #21
    4f06:	e035      	b.n	4f74 <vendor_request_handler+0x6a0>
    4f08:	10000bb8 	.word	0x10000bb8
    4f0c:	10000a1c 	.word	0x10000a1c
    4f10:	2009c098 	.word	0x2009c098
    4f14:	10000d12 	.word	0x10000d12
    4f18:	10000bab 	.word	0x10000bab
    4f1c:	10000ba9 	.word	0x10000ba9
    4f20:	10001047 	.word	0x10001047
    4f24:	10000bc4 	.word	0x10000bc4
    4f28:	10001044 	.word	0x10001044
    4f2c:	1000107c 	.word	0x1000107c
    4f30:	10000bc0 	.word	0x10000bc0
    4f34:	10000bbc 	.word	0x10000bbc
    4f38:	10000448 	.word	0x10000448
    4f3c:	10000bc8 	.word	0x10000bc8
		break;
	case UBERTOOTH_BTLE_SLAVE_P5:
		memcpy(slave_mac_address, data, 6);
    4f40:	4c20      	ldr	r4, [pc, #128]	; (4fc4 <vendor_request_handler+0x6f0>)
    4f42:	4611      	mov	r1, r2
    4f44:	f104 0020 	add.w	r0, r4, #32
    4f48:	2206      	movs	r2, #6
    4f4a:	f003 fea5 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P5;
    4f4e:	2316      	movs	r3, #22
    4f50:	e010      	b.n	4f74 <vendor_request_handler+0x6a0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P6:
		memcpy(slave_mac_address, data, 6);
    4f52:	4c1c      	ldr	r4, [pc, #112]	; (4fc4 <vendor_request_handler+0x6f0>)
    4f54:	4611      	mov	r1, r2
    4f56:	f104 0020 	add.w	r0, r4, #32
    4f5a:	2206      	movs	r2, #6
    4f5c:	f003 fe9c 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P6;
    4f60:	2317      	movs	r3, #23
    4f62:	e007      	b.n	4f74 <vendor_request_handler+0x6a0>
		break;
	case UBERTOOTH_BTLE_SLAVE_P7:
		memcpy(slave_mac_address, data, 6);
    4f64:	4c17      	ldr	r4, [pc, #92]	; (4fc4 <vendor_request_handler+0x6f0>)
    4f66:	4611      	mov	r1, r2
    4f68:	f104 0020 	add.w	r0, r4, #32
    4f6c:	2206      	movs	r2, #6
    4f6e:	f003 fe93 	bl	8c98 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE_P7;
    4f72:	2318      	movs	r3, #24
    4f74:	74a3      	strb	r3, [r4, #18]
    4f76:	e01f      	b.n	4fb8 <vendor_request_handler+0x6e4>


	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4f78:	7952      	ldrb	r2, [r2, #5]
    4f7a:	4b13      	ldr	r3, [pc, #76]	; (4fc8 <vendor_request_handler+0x6f4>)
		le.target[1] = data[4];
		le.target[2] = data[3];
		le.target[3] = data[2];
		le.target[4] = data[1];
		le.target[5] = data[0];
		le.target_set = 1;
    4f7c:	2001      	movs	r0, #1


	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[1] = data[4];
    4f82:	7932      	ldrb	r2, [r6, #4]
    4f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target[2] = data[3];
    4f88:	78f2      	ldrb	r2, [r6, #3]
    4f8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		le.target[3] = data[2];
    4f8e:	78b2      	ldrb	r2, [r6, #2]
    4f90:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		le.target[4] = data[1];
    4f94:	7872      	ldrb	r2, [r6, #1]
    4f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		le.target[5] = data[0];
    4f9a:	7832      	ldrb	r2, [r6, #0]
    4f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		le.target_set = 1;
    4fa0:	6418      	str	r0, [r3, #64]	; 0x40
		break;
    4fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    4fa6:	780a      	ldrb	r2, [r1, #0]
    4fa8:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <vendor_request_handler+0x6f0>)
    4faa:	74da      	strb	r2, [r3, #19]
    4fac:	e004      	b.n	4fb8 <vendor_request_handler+0x6e4>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    4fae:	4b05      	ldr	r3, [pc, #20]	; (4fc4 <vendor_request_handler+0x6f0>)
    4fb0:	220d      	movs	r2, #13
    4fb2:	749a      	strb	r2, [r3, #18]
		ego_mode = request_params[0];
    4fb4:	780a      	ldrb	r2, [r1, #0]
    4fb6:	751a      	strb	r2, [r3, #20]
		break;

	default:
		return 0;
	}
	return 1;
    4fb8:	2001      	movs	r0, #1
    4fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4fbe:	2000      	movs	r0, #0

	default:
		return 0;
	}
	return 1;
}
    4fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fc4:	10000a1c 	.word	0x10000a1c
    4fc8:	10000448 	.word	0x10000448

00004fcc <enqueue_with_ts>:

	return 1;
}

int enqueue_with_ts(uint8_t type, uint8_t* buf, uint32_t ts)
{
    4fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fd0:	4606      	mov	r6, r0
    4fd2:	460f      	mov	r7, r1
    4fd4:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    4fd6:	f002 f825 	bl	7024 <usb_enqueue>
    4fda:	4d10      	ldr	r5, [pc, #64]	; (501c <enqueue_with_ts+0x50>)

	/* fail if queue is full */
	if (f == NULL) {
    4fdc:	4604      	mov	r4, r0
    4fde:	b928      	cbnz	r0, 4fec <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    4fe0:	786b      	ldrb	r3, [r5, #1]
    4fe2:	f043 0304 	orr.w	r3, r3, #4
    4fe6:	706b      	strb	r3, [r5, #1]
		return 0;
    4fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4fec:	4b0c      	ldr	r3, [pc, #48]	; (5020 <enqueue_with_ts+0x54>)
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    4fee:	7006      	strb	r6, [r0, #0]

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4ff0:	881b      	ldrh	r3, [r3, #0]
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    4ff2:	2600      	movs	r6, #0
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4ff4:	b29b      	uxth	r3, r3
    4ff6:	3b62      	subs	r3, #98	; 0x62
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    4ff8:	70c6      	strb	r6, [r0, #3]
	f->clk100ns = ts;
    4ffa:	f8c0 8004 	str.w	r8, [r0, #4]

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4ffe:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    5000:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    5002:	72c6      	strb	r6, [r0, #11]

	memcpy(f->data, buf, DMA_SIZE);
    5004:	4639      	mov	r1, r7
    5006:	2232      	movs	r2, #50	; 0x32
    5008:	300e      	adds	r0, #14
    500a:	f003 fe45 	bl	8c98 <memcpy>

	f->status = status;
    500e:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    5010:	706e      	strb	r6, [r5, #1]
	f->rssi_avg = 0;
	f->rssi_count = 0;

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    5012:	7063      	strb	r3, [r4, #1]
	status = 0;

	return 1;
    5014:	2001      	movs	r0, #1
}
    5016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    501a:	bf00      	nop
    501c:	10000a1c 	.word	0x10000a1c
    5020:	10000448 	.word	0x10000448

00005024 <TIMER0_IRQHandler>:
	return 1;
}

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    5024:	b570      	push	{r4, r5, r6, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    5026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    502a:	681b      	ldr	r3, [r3, #0]
    502c:	07db      	lsls	r3, r3, #31
    502e:	d57f      	bpl.n	5130 <TIMER0_IRQHandler+0x10c>

		clkn += clkn_offset + 1;
    5030:	4940      	ldr	r1, [pc, #256]	; (5134 <TIMER0_IRQHandler+0x110>)
    5032:	4b41      	ldr	r3, [pc, #260]	; (5138 <TIMER0_IRQHandler+0x114>)
    5034:	6808      	ldr	r0, [r1, #0]
    5036:	681a      	ldr	r2, [r3, #0]
    5038:	4402      	add	r2, r0
    503a:	3201      	adds	r2, #1
    503c:	600a      	str	r2, [r1, #0]
		clkn_offset = 0;
    503e:	2200      	movs	r2, #0
    5040:	601a      	str	r2, [r3, #0]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5042:	4a3e      	ldr	r2, [pc, #248]	; (513c <TIMER0_IRQHandler+0x118>)
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    5044:	680c      	ldr	r4, [r1, #0]
    5046:	4b3e      	ldr	r3, [pc, #248]	; (5140 <TIMER0_IRQHandler+0x11c>)

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5048:	7a96      	ldrb	r6, [r2, #10]
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    504a:	69d8      	ldr	r0, [r3, #28]
    504c:	4615      	mov	r5, r2

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    504e:	b116      	cbz	r6, 5056 <TIMER0_IRQHandler+0x32>
    5050:	7a96      	ldrb	r6, [r2, #10]
    5052:	2e01      	cmp	r6, #1
    5054:	d105      	bne.n	5062 <TIMER0_IRQHandler+0x3e>
			if ((clkn & 0x7f) == 0)
    5056:	680b      	ldr	r3, [r1, #0]
    5058:	065e      	lsls	r6, r3, #25
    505a:	d137      	bne.n	50cc <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    505c:	2301      	movs	r3, #1
    505e:	72eb      	strb	r3, [r5, #11]
    5060:	e034      	b.n	50cc <TIMER0_IRQHandler+0xa8>
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    5062:	7a95      	ldrb	r5, [r2, #10]
    5064:	2d02      	cmp	r5, #2
    5066:	d103      	bne.n	5070 <TIMER0_IRQHandler+0x4c>
			if ((clkn & 0x1) == 0)
    5068:	680b      	ldr	r3, [r1, #0]
    506a:	07dc      	lsls	r4, r3, #31
    506c:	d42e      	bmi.n	50cc <TIMER0_IRQHandler+0xa8>
    506e:	e02b      	b.n	50c8 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5070:	7a95      	ldrb	r5, [r2, #10]
    5072:	2d03      	cmp	r5, #3
    5074:	d11c      	bne.n	50b0 <TIMER0_IRQHandler+0x8c>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5076:	7e1d      	ldrb	r5, [r3, #24]
    5078:	2d03      	cmp	r5, #3
    507a:	d127      	bne.n	50cc <TIMER0_IRQHandler+0xa8>
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    507c:	1a20      	subs	r0, r4, r0
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    507e:	0780      	lsls	r0, r0, #30
    5080:	d124      	bne.n	50cc <TIMER0_IRQHandler+0xa8>
				--le.interval_timer;
    5082:	8c18      	ldrh	r0, [r3, #32]
    5084:	b280      	uxth	r0, r0
    5086:	3801      	subs	r0, #1
    5088:	b280      	uxth	r0, r0
    508a:	8418      	strh	r0, [r3, #32]
				if (le.interval_timer == 0) {
    508c:	8c18      	ldrh	r0, [r3, #32]
    508e:	b280      	uxth	r0, r0
    5090:	b948      	cbnz	r0, 50a6 <TIMER0_IRQHandler+0x82>
					do_hop = 1;
    5092:	2001      	movs	r0, #1
    5094:	72d0      	strb	r0, [r2, #11]
					++le.conn_count;
    5096:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    5098:	b292      	uxth	r2, r2
    509a:	4402      	add	r2, r0
    509c:	b292      	uxth	r2, r2
    509e:	849a      	strh	r2, [r3, #36]	; 0x24
					le.interval_timer = le.conn_interval;
    50a0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    50a2:	841a      	strh	r2, [r3, #32]
    50a4:	e012      	b.n	50cc <TIMER0_IRQHandler+0xa8>
				} else {
					TXLED_CLR; // hack!
    50a6:	4b27      	ldr	r3, [pc, #156]	; (5144 <TIMER0_IRQHandler+0x120>)
    50a8:	f44f 7280 	mov.w	r2, #256	; 0x100
    50ac:	601a      	str	r2, [r3, #0]
    50ae:	e00d      	b.n	50cc <TIMER0_IRQHandler+0xa8>
				}
			}
		}
		else if (hop_mode == HOP_AFH) {
    50b0:	7a90      	ldrb	r0, [r2, #10]
    50b2:	2805      	cmp	r0, #5
    50b4:	d10a      	bne.n	50cc <TIMER0_IRQHandler+0xa8>
			if( (last_hop + hop_timeout) == clkn ) {
    50b6:	4824      	ldr	r0, [pc, #144]	; (5148 <TIMER0_IRQHandler+0x124>)
    50b8:	6804      	ldr	r4, [r0, #0]
    50ba:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
    50be:	680b      	ldr	r3, [r1, #0]
    50c0:	b280      	uxth	r0, r0
    50c2:	4420      	add	r0, r4
    50c4:	4298      	cmp	r0, r3
    50c6:	d101      	bne.n	50cc <TIMER0_IRQHandler+0xa8>
				do_hop = 1;
    50c8:	2301      	movs	r3, #1
    50ca:	72d3      	strb	r3, [r2, #11]
			}
		}

		// Fix linear clock drift deviation
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    50cc:	4a1f      	ldr	r2, [pc, #124]	; (514c <TIMER0_IRQHandler+0x128>)
    50ce:	4b20      	ldr	r3, [pc, #128]	; (5150 <TIMER0_IRQHandler+0x12c>)
    50d0:	6810      	ldr	r0, [r2, #0]
    50d2:	b1c0      	cbz	r0, 5106 <TIMER0_IRQHandler+0xe2>
    50d4:	8818      	ldrh	r0, [r3, #0]
    50d6:	b280      	uxth	r0, r0
    50d8:	b9a8      	cbnz	r0, 5106 <TIMER0_IRQHandler+0xe2>
			if(clkn >= clkn_next_drift_fix) {
    50da:	680c      	ldr	r4, [r1, #0]
    50dc:	6810      	ldr	r0, [r2, #0]
    50de:	4284      	cmp	r4, r0
    50e0:	d311      	bcc.n	5106 <TIMER0_IRQHandler+0xe2>

				// Too fast
				if(clk_drift_ppm >= 0) {
    50e2:	481c      	ldr	r0, [pc, #112]	; (5154 <TIMER0_IRQHandler+0x130>)
    50e4:	8800      	ldrh	r0, [r0, #0]
    50e6:	b200      	sxth	r0, r0
    50e8:	2800      	cmp	r0, #0
					clk100ns_offset = 1;
    50ea:	bfac      	ite	ge
    50ec:	2001      	movge	r0, #1
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    50ee:	f641 0069 	movwlt	r0, #6249	; 0x1869
    50f2:	8018      	strh	r0, [r3, #0]
				}
				clkn_last_drift_fix = clkn;
    50f4:	680c      	ldr	r4, [r1, #0]
    50f6:	4818      	ldr	r0, [pc, #96]	; (5158 <TIMER0_IRQHandler+0x134>)
    50f8:	6004      	str	r4, [r0, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    50fa:	6804      	ldr	r4, [r0, #0]
    50fc:	4817      	ldr	r0, [pc, #92]	; (515c <TIMER0_IRQHandler+0x138>)
    50fe:	8800      	ldrh	r0, [r0, #0]
    5100:	b280      	uxth	r0, r0
    5102:	4420      	add	r0, r4
    5104:	6010      	str	r0, [r2, #0]
			}
		}

		// Negative clock correction
		if(clk100ns_offset > 3124)
    5106:	8818      	ldrh	r0, [r3, #0]
    5108:	f640 4234 	movw	r2, #3124	; 0xc34
    510c:	b280      	uxth	r0, r0
    510e:	4290      	cmp	r0, r2
    5110:	d902      	bls.n	5118 <TIMER0_IRQHandler+0xf4>
			clkn += 2;
    5112:	680a      	ldr	r2, [r1, #0]
    5114:	3202      	adds	r2, #2
    5116:	600a      	str	r2, [r1, #0]

		T0MR0 = 3124 + clk100ns_offset;
    5118:	8819      	ldrh	r1, [r3, #0]
    511a:	4a11      	ldr	r2, [pc, #68]	; (5160 <TIMER0_IRQHandler+0x13c>)
    511c:	b289      	uxth	r1, r1
    511e:	f601 4134 	addw	r1, r1, #3124	; 0xc34
    5122:	6011      	str	r1, [r2, #0]
		clk100ns_offset = 0;
    5124:	2200      	movs	r2, #0
    5126:	801a      	strh	r2, [r3, #0]

		/* Ack interrupt */
		T0IR = TIR_MR0_Interrupt;
    5128:	2201      	movs	r2, #1
    512a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    512e:	601a      	str	r2, [r3, #0]
    5130:	bd70      	pop	{r4, r5, r6, pc}
    5132:	bf00      	nop
    5134:	10000bc4 	.word	0x10000bc4
    5138:	10000bb8 	.word	0x10000bb8
    513c:	10000a1c 	.word	0x10000a1c
    5140:	10000448 	.word	0x10000448
    5144:	2009c03c 	.word	0x2009c03c
    5148:	10000ba0 	.word	0x10000ba0
    514c:	1000107c 	.word	0x1000107c
    5150:	10000d12 	.word	0x10000d12
    5154:	10001044 	.word	0x10001044
    5158:	10000bbc 	.word	0x10000bbc
    515c:	10000bc0 	.word	0x10000bc0
    5160:	40004018 	.word	0x40004018

00005164 <EINT3_IRQHandler>:
/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
void EINT3_IRQHandler()
{
	/* TODO - check specific source of shared interrupt */
	IO2IntClr   = PIN_GIO6; // clear interrupt
    5164:	4b08      	ldr	r3, [pc, #32]	; (5188 <EINT3_IRQHandler+0x24>)
    5166:	2204      	movs	r2, #4
    5168:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    516a:	4b08      	ldr	r3, [pc, #32]	; (518c <EINT3_IRQHandler+0x28>)
    516c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5170:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    5172:	4b07      	ldr	r3, [pc, #28]	; (5190 <EINT3_IRQHandler+0x2c>)
    5174:	2201      	movs	r2, #1
    5176:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    5178:	4b06      	ldr	r3, [pc, #24]	; (5194 <EINT3_IRQHandler+0x30>)
    517a:	7a9a      	ldrb	r2, [r3, #10]
    517c:	2a02      	cmp	r2, #2
		dma_discard = 0;
    517e:	bf04      	itt	eq
    5180:	2200      	moveq	r2, #0
    5182:	741a      	strbeq	r2, [r3, #16]
    5184:	4770      	bx	lr
    5186:	bf00      	nop
    5188:	400280ac 	.word	0x400280ac
    518c:	2009c09c 	.word	0x2009c09c
    5190:	100010bd 	.word	0x100010bd
    5194:	10000a1c 	.word	0x10000a1c

00005198 <DMA_IRQHandler>:
		while ((clkn & 0xffffff) < stop_at);
	}
}

void DMA_IRQHandler()
{
    5198:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    519a:	4b34      	ldr	r3, [pc, #208]	; (526c <DMA_IRQHandler+0xd4>)
    519c:	7c5a      	ldrb	r2, [r3, #17]
    519e:	2a01      	cmp	r2, #1
    51a0:	d029      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_FOLLOW
    51a2:	7c5a      	ldrb	r2, [r3, #17]
    51a4:	2a08      	cmp	r2, #8
    51a6:	d026      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_SPECAN
    51a8:	7c5a      	ldrb	r2, [r3, #17]
    51aa:	2a04      	cmp	r2, #4
    51ac:	d023      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_FOLLOW_LE
    51ae:	7c5a      	ldrb	r2, [r3, #17]
    51b0:	2a09      	cmp	r2, #9
    51b2:	d020      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_PROMISC_LE
    51b4:	7c5a      	ldrb	r2, [r3, #17]
    51b6:	2a0a      	cmp	r2, #10
    51b8:	d01d      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE
    51ba:	7c5a      	ldrb	r2, [r3, #17]
    51bc:	2a0c      	cmp	r2, #12
    51be:	d01a      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P0
    51c0:	7c5a      	ldrb	r2, [r3, #17]
    51c2:	2a11      	cmp	r2, #17
    51c4:	d017      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P1
    51c6:	7c5a      	ldrb	r2, [r3, #17]
    51c8:	2a12      	cmp	r2, #18
    51ca:	d014      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P2
    51cc:	7c5a      	ldrb	r2, [r3, #17]
    51ce:	2a13      	cmp	r2, #19
    51d0:	d011      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P3
    51d2:	7c5a      	ldrb	r2, [r3, #17]
    51d4:	2a14      	cmp	r2, #20
    51d6:	d00e      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P4
    51d8:	7c59      	ldrb	r1, [r3, #17]
    51da:	2915      	cmp	r1, #21
    51dc:	d00b      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P5
    51de:	7c59      	ldrb	r1, [r3, #17]
    51e0:	2916      	cmp	r1, #22
    51e2:	d008      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P6
    51e4:	7c59      	ldrb	r1, [r3, #17]
    51e6:	2917      	cmp	r1, #23
    51e8:	d005      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_BT_SLAVE_LE_P7
    51ea:	7c59      	ldrb	r1, [r3, #17]
    51ec:	2918      	cmp	r1, #24
    51ee:	d002      	beq.n	51f6 <DMA_IRQHandler+0x5e>
	   || mode == MODE_RX_GENERIC)
    51f0:	7c5a      	ldrb	r2, [r3, #17]
    51f2:	2a0f      	cmp	r2, #15
    51f4:	d139      	bne.n	526a <DMA_IRQHandler+0xd2>
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
    51f6:	4a1e      	ldr	r2, [pc, #120]	; (5270 <DMA_IRQHandler+0xd8>)
    51f8:	6812      	ldr	r2, [r2, #0]
    51fa:	07d0      	lsls	r0, r2, #31
    51fc:	d535      	bpl.n	526a <DMA_IRQHandler+0xd2>
			if (DMACIntTCStat & (1 << 0)) {
    51fe:	4a1d      	ldr	r2, [pc, #116]	; (5274 <DMA_IRQHandler+0xdc>)
    5200:	6812      	ldr	r2, [r2, #0]
    5202:	07d1      	lsls	r1, r2, #31
    5204:	d526      	bpl.n	5254 <DMA_IRQHandler+0xbc>
				DMACIntTCClear = (1 << 0);
    5206:	4a1c      	ldr	r2, [pc, #112]	; (5278 <DMA_IRQHandler+0xe0>)
    5208:	2101      	movs	r1, #1
    520a:	6011      	str	r1, [r2, #0]

				if (hop_mode == HOP_BLUETOOTH)
    520c:	7a9a      	ldrb	r2, [r3, #10]
    520e:	2a02      	cmp	r2, #2
    5210:	d103      	bne.n	521a <DMA_IRQHandler+0x82>
					DIO_SSEL_SET;
    5212:	4a1a      	ldr	r2, [pc, #104]	; (527c <DMA_IRQHandler+0xe4>)
    5214:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5218:	6011      	str	r1, [r2, #0]

				idle_buf_clk100ns  = CLK100NS;
    521a:	4a19      	ldr	r2, [pc, #100]	; (5280 <DMA_IRQHandler+0xe8>)
    521c:	4819      	ldr	r0, [pc, #100]	; (5284 <DMA_IRQHandler+0xec>)
    521e:	6811      	ldr	r1, [r2, #0]
    5220:	6800      	ldr	r0, [r0, #0]
    5222:	f3c1 0113 	ubfx	r1, r1, #0, #20
    5226:	f640 4435 	movw	r4, #3125	; 0xc35
    522a:	fb04 0101 	mla	r1, r4, r1, r0
    522e:	6059      	str	r1, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    5230:	6812      	ldr	r2, [r2, #0]
    5232:	f3c2 5207 	ubfx	r2, r2, #20, #8
    5236:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    5238:	4a13      	ldr	r2, [pc, #76]	; (5288 <DMA_IRQHandler+0xf0>)
    523a:	8812      	ldrh	r2, [r2, #0]
    523c:	b292      	uxth	r2, r2
    523e:	811a      	strh	r2, [r3, #8]

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    5240:	4a12      	ldr	r2, [pc, #72]	; (528c <DMA_IRQHandler+0xf4>)
				active_rxbuf = idle_rxbuf;
    5242:	4b13      	ldr	r3, [pc, #76]	; (5290 <DMA_IRQHandler+0xf8>)
				idle_buf_clk100ns  = CLK100NS;
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    5244:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    5246:	6818      	ldr	r0, [r3, #0]
    5248:	6010      	str	r0, [r2, #0]
				idle_rxbuf = tmp;
    524a:	6019      	str	r1, [r3, #0]

				++rx_tc;
    524c:	4b11      	ldr	r3, [pc, #68]	; (5294 <DMA_IRQHandler+0xfc>)
    524e:	681a      	ldr	r2, [r3, #0]
    5250:	3201      	adds	r2, #1
    5252:	601a      	str	r2, [r3, #0]
			}
			if (DMACIntErrStat & (1 << 0)) {
    5254:	4b10      	ldr	r3, [pc, #64]	; (5298 <DMA_IRQHandler+0x100>)
    5256:	681b      	ldr	r3, [r3, #0]
    5258:	07da      	lsls	r2, r3, #31
    525a:	d506      	bpl.n	526a <DMA_IRQHandler+0xd2>
				DMACIntErrClr = (1 << 0);
    525c:	4b0f      	ldr	r3, [pc, #60]	; (529c <DMA_IRQHandler+0x104>)
    525e:	2201      	movs	r2, #1
    5260:	601a      	str	r2, [r3, #0]
				++rx_err;
    5262:	4b0f      	ldr	r3, [pc, #60]	; (52a0 <DMA_IRQHandler+0x108>)
    5264:	681a      	ldr	r2, [r3, #0]
    5266:	3201      	adds	r2, #1
    5268:	601a      	str	r2, [r3, #0]
    526a:	bd10      	pop	{r4, pc}
    526c:	10000a1c 	.word	0x10000a1c
    5270:	50004000 	.word	0x50004000
    5274:	50004004 	.word	0x50004004
    5278:	50004008 	.word	0x50004008
    527c:	2009c098 	.word	0x2009c098
    5280:	10000bc4 	.word	0x10000bc4
    5284:	40004008 	.word	0x40004008
    5288:	10000448 	.word	0x10000448
    528c:	10000c04 	.word	0x10000c04
    5290:	10000d20 	.word	0x10000d20
    5294:	10000ba4 	.word	0x10000ba4
    5298:	5000400c 	.word	0x5000400c
    529c:	50004010 	.word	0x50004010
    52a0:	100010b8 	.word	0x100010b8

000052a4 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data, u16 tx_pwr)
{
    52a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52a8:	b091      	sub	sp, #68	; 0x44
    52aa:	4689      	mov	r9, r1
    52ac:	4605      	mov	r5, r0
    52ae:	4692      	mov	sl, r2
	u8 txbuf[64];
	u8 tx_len;
	u8 byte;
	u16 gio_save;
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);
    52b0:	f003 080f 	and.w	r8, r3, #15
    52b4:	f10d 34ff 	add.w	r4, sp, #4294967295	; 0xffffffff
    52b8:	f10d 0103 	add.w	r1, sp, #3

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
    52bc:	2200      	movs	r2, #0
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
    52be:	b2eb      	uxtb	r3, r5
		aa >>= 8;
		txbuf[i] = 0;
    52c0:	7062      	strb	r2, [r4, #1]
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
    52c2:	0a2d      	lsrs	r5, r5, #8
		txbuf[i] = 0;
    52c4:	2607      	movs	r6, #7
		for (j = 0; j < 8; ++j) {
			txbuf[i] |= (byte & 1) << (7 - j);
    52c6:	f003 0001 	and.w	r0, r3, #1
    52ca:	40b0      	lsls	r0, r6
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    52cc:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			txbuf[i] |= (byte & 1) << (7 - j);
    52d0:	ea40 0202 	orr.w	r2, r0, r2
    52d4:	b2d2      	uxtb	r2, r2
			byte >>= 1;
    52d6:	ea4f 0353 	mov.w	r3, r3, lsr #1
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    52da:	d2f4      	bcs.n	52c6 <le_transmit+0x22>
    52dc:	f804 2f01 	strb.w	r2, [r4, #1]!
	u16 gio_save;
	//JWHUR tx power control
	tx_pwr = (tx_pwr & 0x000f);

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    52e0:	428c      	cmp	r4, r1
    52e2:	d1eb      	bne.n	52bc <le_transmit+0x18>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    52e4:	4e54      	ldr	r6, [pc, #336]	; (5438 <le_transmit+0x194>)
	for (i = 0; i < len; ++i) {
    52e6:	2400      	movs	r4, #0
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    52e8:	8830      	ldrh	r0, [r6, #0]
    52ea:	46b3      	mov	fp, r6
    52ec:	b280      	uxth	r0, r0
    52ee:	3862      	subs	r0, #98	; 0x62
    52f0:	b2c0      	uxtb	r0, r0
    52f2:	f001 fd8f 	bl	6e14 <btle_channel_index>
    52f6:	4b51      	ldr	r3, [pc, #324]	; (543c <le_transmit+0x198>)
    52f8:	5c1f      	ldrb	r7, [r3, r0]
	for (i = 0; i < len; ++i) {
    52fa:	454c      	cmp	r4, r9
    52fc:	d21f      	bcs.n	533e <le_transmit+0x9a>
    52fe:	a900      	add	r1, sp, #0
		byte = data[i];
    5300:	f81a e004 	ldrb.w	lr, [sl, r4]
    5304:	4421      	add	r1, r4
    5306:	2607      	movs	r6, #7
    5308:	2300      	movs	r3, #0
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    530a:	4a4c      	ldr	r2, [pc, #304]	; (543c <le_transmit+0x198>)
    530c:	f00e 0001 	and.w	r0, lr, #1
    5310:	443a      	add	r2, r7
    5312:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    5316:	3701      	adds	r7, #1
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    5318:	4050      	eors	r0, r2
			idx = (idx + 1) % sizeof(whitening);
    531a:	227f      	movs	r2, #127	; 0x7f
    531c:	fbb7 fcf2 	udiv	ip, r7, r2
    5320:	fb02 771c 	mls	r7, r2, ip, r7
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    5324:	fa00 f206 	lsl.w	r2, r0, r6
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5328:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    532c:	ea42 0303 	orr.w	r3, r2, r3
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			byte >>= 1;
    5330:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
			txbuf[i+4] |= bit << (7 - j);
    5334:	b2db      	uxtb	r3, r3
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5336:	d2e8      	bcs.n	530a <le_transmit+0x66>
    5338:	710b      	strb	r3, [r1, #4]
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    533a:	3401      	adds	r4, #1
    533c:	e7dd      	b.n	52fa <le_transmit+0x56>
	}

	len += 4; // include the AA in len

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    533e:	200d      	movs	r0, #13
    5340:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5344:	f002 fed1 	bl	80ea <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5348:	2012      	movs	r0, #18
    534a:	f642 3122 	movw	r1, #11042	; 0x2b22
    534e:	f002 fecc 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5352:	2014      	movs	r0, #20
    5354:	f241 314b 	movw	r1, #4939	; 0x134b
    5358:	f002 fec7 	bl	80ea <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    535c:	2020      	movs	r0, #32
    535e:	f640 4101 	movw	r1, #3073	; 0xc01
    5362:	f002 fec2 	bl	80ea <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5366:	f8bb 1000 	ldrh.w	r1, [fp]
    536a:	2002      	movs	r0, #2
    536c:	b289      	uxth	r1, r1
    536e:	f002 febc 	bl	80ea <cc2400_set>
	// 011 : -7
	// 100 : -4.6
	// 101 : -2.8
	// 110 : -1.3
	// 111 : 0
	cc2400_set(FREND, tx_pwr);
    5372:	2005      	movs	r0, #5
    5374:	4641      	mov	r1, r8
    5376:	f002 feb8 	bl	80ea <cc2400_set>
	//cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    537a:	2003      	movs	r0, #3
    537c:	2140      	movs	r1, #64	; 0x40
    537e:	f002 feb4 	bl	80ea <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5382:	2114      	movs	r1, #20
    5384:	2023      	movs	r0, #35	; 0x23
    5386:	f002 feb0 	bl	80ea <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    538a:	07ea      	lsls	r2, r5, #31
		cc2400_set(SYNCH,   0xaaaa);
    538c:	bf4c      	ite	mi
    538e:	f64a 21aa 	movwmi	r1, #43690	; 0xaaaa
	else
		cc2400_set(SYNCH,   0x5555);
    5392:	f245 5155 	movwpl	r1, #21845	; 0x5555
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
		cc2400_set(SYNCH,   0xaaaa);
    5396:	202d      	movs	r0, #45	; 0x2d
	else
		cc2400_set(SYNCH,   0x5555);
    5398:	f002 fea7 	bl	80ea <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    539c:	2008      	movs	r0, #8
    539e:	f002 fe9b 	bl	80d8 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53a2:	f3c0 0108 	ubfx	r1, r0, #0, #9
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    53a6:	f109 0904 	add.w	r9, r9, #4
		cc2400_set(SYNCH,   0xaaaa);
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    53aa:	4604      	mov	r4, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53ac:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    53b0:	2008      	movs	r0, #8
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    53b2:	fa5f f989 	uxtb.w	r9, r9
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53b6:	f002 fe98 	bl	80ea <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    53ba:	f002 ff39 	bl	8230 <cc2400_status>
    53be:	0643      	lsls	r3, r0, #25
    53c0:	d5fb      	bpl.n	53ba <le_transmit+0x116>
	cc2400_strobe(SFSON);
    53c2:	2061      	movs	r0, #97	; 0x61
    53c4:	f002 ff3b 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    53c8:	f002 ff32 	bl	8230 <cc2400_status>
    53cc:	0747      	lsls	r7, r0, #29
    53ce:	d5fb      	bpl.n	53c8 <le_transmit+0x124>
	TXLED_SET;
    53d0:	4b1b      	ldr	r3, [pc, #108]	; (5440 <le_transmit+0x19c>)
    53d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    53d6:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    53d8:	2280      	movs	r2, #128	; 0x80
    53da:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    53dc:	200e      	movs	r0, #14
    53de:	f002 fe7b 	bl	80d8 <cc2400_get>
    53e2:	f000 001f 	and.w	r0, r0, #31
    53e6:	280f      	cmp	r0, #15
    53e8:	d1f8      	bne.n	53dc <le_transmit+0x138>
	cc2400_strobe(STX);
    53ea:	2063      	movs	r0, #99	; 0x63
    53ec:	f002 ff27 	bl	823e <cc2400_strobe>
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
	}*/

	//JWHUR cc2400 fifo write
	while (GIO6) ;
    53f0:	4b14      	ldr	r3, [pc, #80]	; (5444 <le_transmit+0x1a0>)
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	075e      	lsls	r6, r3, #29
    53f6:	d4fb      	bmi.n	53f0 <le_transmit+0x14c>
	cc2400_fifo_write(len, txbuf);
    53f8:	4648      	mov	r0, r9
    53fa:	4669      	mov	r1, sp
    53fc:	f002 fe88 	bl	8110 <cc2400_fifo_write>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5400:	200e      	movs	r0, #14
    5402:	f002 fe69 	bl	80d8 <cc2400_get>
    5406:	f000 001f 	and.w	r0, r0, #31
    540a:	280f      	cmp	r0, #15
    540c:	d1f8      	bne.n	5400 <le_transmit+0x15c>
	TXLED_CLR;
    540e:	4b0e      	ldr	r3, [pc, #56]	; (5448 <le_transmit+0x1a4>)
    5410:	f44f 7280 	mov.w	r2, #256	; 0x100
    5414:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5416:	2064      	movs	r0, #100	; 0x64
    5418:	f002 ff11 	bl	823e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    541c:	f002 ff08 	bl	8230 <cc2400_status>
    5420:	0745      	lsls	r5, r0, #29
    5422:	d4fb      	bmi.n	541c <le_transmit+0x178>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5424:	4b09      	ldr	r3, [pc, #36]	; (544c <le_transmit+0x1a8>)
    5426:	2280      	movs	r2, #128	; 0x80
    5428:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    542a:	2008      	movs	r0, #8
    542c:	4621      	mov	r1, r4
    542e:	f002 fe5c 	bl	80ea <cc2400_set>
}
    5432:	b011      	add	sp, #68	; 0x44
    5434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5438:	10000448 	.word	0x10000448
    543c:	00008dec 	.word	0x00008dec
    5440:	2009c038 	.word	0x2009c038
    5444:	2009c054 	.word	0x2009c054
    5448:	2009c03c 	.word	0x2009c03c
    544c:	2009c05c 	.word	0x2009c05c

00005450 <le_jam>:

void le_jam(void) {
    5450:	b508      	push	{r3, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    5452:	200d      	movs	r0, #13
    5454:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5458:	f002 fe47 	bl	80ea <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    545c:	2012      	movs	r0, #18
    545e:	f642 3122 	movw	r1, #11042	; 0x2b22
    5462:	f002 fe42 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    5466:	2014      	movs	r0, #20
    5468:	f242 314b 	movw	r1, #9035	; 0x234b
    546c:	f002 fe3d 	bl	80ea <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5470:	2020      	movs	r0, #32
    5472:	f640 4101 	movw	r1, #3073	; 0xc01
    5476:	f002 fe38 	bl	80ea <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    547a:	2005      	movs	r0, #5
    547c:	210b      	movs	r1, #11
    547e:	f002 fe34 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5482:	2003      	movs	r0, #3
    5484:	2140      	movs	r1, #64	; 0x40
    5486:	f002 fe30 	bl	80ea <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    548a:	f002 fed1 	bl	8230 <cc2400_status>
    548e:	0640      	lsls	r0, r0, #25
    5490:	d5fb      	bpl.n	548a <le_jam+0x3a>
	cc2400_strobe(SFSON);
    5492:	2061      	movs	r0, #97	; 0x61
    5494:	f002 fed3 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5498:	f002 feca 	bl	8230 <cc2400_status>
    549c:	0741      	lsls	r1, r0, #29
    549e:	d5fb      	bpl.n	5498 <le_jam+0x48>
	TXLED_SET;
    54a0:	4b08      	ldr	r3, [pc, #32]	; (54c4 <le_jam+0x74>)
    54a2:	f44f 7280 	mov.w	r2, #256	; 0x100
    54a6:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    54a8:	2280      	movs	r2, #128	; 0x80
    54aa:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    54ac:	200e      	movs	r0, #14
    54ae:	f002 fe13 	bl	80d8 <cc2400_get>
    54b2:	f000 001f 	and.w	r0, r0, #31
    54b6:	280f      	cmp	r0, #15
    54b8:	d1f8      	bne.n	54ac <le_jam+0x5c>
	cc2400_strobe(STX);
    54ba:	2063      	movs	r0, #99	; 0x63
#endif
}
    54bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);
    54c0:	f002 bebd 	b.w	823e <cc2400_strobe>
    54c4:	2009c038 	.word	0x2009c038

000054c8 <hop>:
}

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    54c8:	b538      	push	{r3, r4, r5, lr}
	do_hop = 0;
    54ca:	4c5f      	ldr	r4, [pc, #380]	; (5648 <hop+0x180>)
    54cc:	2300      	movs	r3, #0
    54ce:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    54d0:	4b5e      	ldr	r3, [pc, #376]	; (564c <hop+0x184>)
    54d2:	4a5f      	ldr	r2, [pc, #380]	; (5650 <hop+0x188>)
    54d4:	6819      	ldr	r1, [r3, #0]
    54d6:	6011      	str	r1, [r2, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    54d8:	7aa2      	ldrb	r2, [r4, #10]
    54da:	b94a      	cbnz	r2, 54f0 <hop+0x28>
		if (cc2400_get(FSDIV) == (channel - 1))
    54dc:	2002      	movs	r0, #2
    54de:	f002 fdfb 	bl	80d8 <cc2400_get>
    54e2:	4b5c      	ldr	r3, [pc, #368]	; (5654 <hop+0x18c>)
    54e4:	881b      	ldrh	r3, [r3, #0]
    54e6:	b29b      	uxth	r3, r3
    54e8:	3b01      	subs	r3, #1
    54ea:	4298      	cmp	r0, r3
    54ec:	d17f      	bne.n	55ee <hop+0x126>
    54ee:	bd38      	pop	{r3, r4, r5, pc}
			return;
	}
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
    54f0:	7aa2      	ldrb	r2, [r4, #10]
    54f2:	2a01      	cmp	r2, #1
    54f4:	d131      	bne.n	555a <hop+0x92>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    54f6:	4b58      	ldr	r3, [pc, #352]	; (5658 <hop+0x190>)
    54f8:	7819      	ldrb	r1, [r3, #0]
    54fa:	4b58      	ldr	r3, [pc, #352]	; (565c <hop+0x194>)
    54fc:	7818      	ldrb	r0, [r3, #0]
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
		do {
			channel += 32;
    54fe:	4b55      	ldr	r3, [pc, #340]	; (5654 <hop+0x18c>)
    5500:	881a      	ldrh	r2, [r3, #0]
    5502:	b292      	uxth	r2, r2
    5504:	3220      	adds	r2, #32
    5506:	b292      	uxth	r2, r2
    5508:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    550a:	881a      	ldrh	r2, [r3, #0]
    550c:	b292      	uxth	r2, r2
    550e:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    5512:	d904      	bls.n	551e <hop+0x56>
				channel -= 79;
    5514:	881a      	ldrh	r2, [r3, #0]
    5516:	b292      	uxth	r2, r2
    5518:	3a4f      	subs	r2, #79	; 0x4f
    551a:	b292      	uxth	r2, r2
    551c:	801a      	strh	r2, [r3, #0]
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    551e:	2900      	cmp	r1, #0
    5520:	d065      	beq.n	55ee <hop+0x126>
    5522:	2800      	cmp	r0, #0
    5524:	d063      	beq.n	55ee <hop+0x126>
    5526:	881a      	ldrh	r2, [r3, #0]
    5528:	881d      	ldrh	r5, [r3, #0]
    552a:	b292      	uxth	r2, r2
    552c:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    5530:	2208      	movs	r2, #8
    5532:	fb93 f3f2 	sdiv	r3, r3, r2
    5536:	4a4a      	ldr	r2, [pc, #296]	; (5660 <hop+0x198>)
    5538:	b2ad      	uxth	r5, r5
    553a:	5cd2      	ldrb	r2, [r2, r3]
    553c:	4b49      	ldr	r3, [pc, #292]	; (5664 <hop+0x19c>)
    553e:	f6a5 1562 	subw	r5, r5, #2402	; 0x962
    5542:	402b      	ands	r3, r5
    5544:	2b00      	cmp	r3, #0
    5546:	da03      	bge.n	5550 <hop+0x88>
    5548:	3b01      	subs	r3, #1
    554a:	f063 0307 	orn	r3, r3, #7
    554e:	3301      	adds	r3, #1
    5550:	fa42 f303 	asr.w	r3, r2, r3
    5554:	07dd      	lsls	r5, r3, #31
    5556:	d5d2      	bpl.n	54fe <hop+0x36>
    5558:	e049      	b.n	55ee <hop+0x126>
	}

	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
    555a:	7aa2      	ldrb	r2, [r4, #10]
    555c:	2a05      	cmp	r2, #5
    555e:	d12d      	bne.n	55bc <hop+0xf4>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5560:	4b3d      	ldr	r3, [pc, #244]	; (5658 <hop+0x190>)
    5562:	7819      	ldrb	r1, [r3, #0]
	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
		do {
			channel += 32;
    5564:	4b3b      	ldr	r3, [pc, #236]	; (5654 <hop+0x18c>)
    5566:	881a      	ldrh	r2, [r3, #0]
    5568:	b292      	uxth	r2, r2
    556a:	3220      	adds	r2, #32
    556c:	b292      	uxth	r2, r2
    556e:	801a      	strh	r2, [r3, #0]
			if (channel > 2480)
    5570:	881a      	ldrh	r2, [r3, #0]
    5572:	b292      	uxth	r2, r2
    5574:	f5b2 6f1b 	cmp.w	r2, #2480	; 0x9b0
    5578:	d904      	bls.n	5584 <hop+0xbc>
				channel -= 79;
    557a:	881a      	ldrh	r2, [r3, #0]
    557c:	b292      	uxth	r2, r2
    557e:	3a4f      	subs	r2, #79	; 0x4f
    5580:	b292      	uxth	r2, r2
    5582:	801a      	strh	r2, [r3, #0]
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5584:	294f      	cmp	r1, #79	; 0x4f
    5586:	d032      	beq.n	55ee <hop+0x126>
    5588:	881a      	ldrh	r2, [r3, #0]
    558a:	8818      	ldrh	r0, [r3, #0]
    558c:	b292      	uxth	r2, r2
    558e:	f6a2 1362 	subw	r3, r2, #2402	; 0x962
    5592:	2208      	movs	r2, #8
    5594:	fb93 f3f2 	sdiv	r3, r3, r2
    5598:	4a31      	ldr	r2, [pc, #196]	; (5660 <hop+0x198>)
    559a:	b280      	uxth	r0, r0
    559c:	5cd2      	ldrb	r2, [r2, r3]
    559e:	4b31      	ldr	r3, [pc, #196]	; (5664 <hop+0x19c>)
    55a0:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    55a4:	4003      	ands	r3, r0
    55a6:	2b00      	cmp	r3, #0
    55a8:	da03      	bge.n	55b2 <hop+0xea>
    55aa:	3b01      	subs	r3, #1
    55ac:	f063 0307 	orn	r3, r3, #7
    55b0:	3301      	adds	r3, #1
    55b2:	fa42 f303 	asr.w	r3, r2, r3
    55b6:	07da      	lsls	r2, r3, #31
    55b8:	d4d4      	bmi.n	5564 <hop+0x9c>
    55ba:	e018      	b.n	55ee <hop+0x126>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    55bc:	7aa2      	ldrb	r2, [r4, #10]
    55be:	2a02      	cmp	r2, #2
    55c0:	d105      	bne.n	55ce <hop+0x106>
		channel = next_hop(clkn);
    55c2:	6818      	ldr	r0, [r3, #0]
    55c4:	f001 fb88 	bl	6cd8 <next_hop>
    55c8:	4b22      	ldr	r3, [pc, #136]	; (5654 <hop+0x18c>)
    55ca:	8018      	strh	r0, [r3, #0]
    55cc:	e00f      	b.n	55ee <hop+0x126>
	}

	else if (hop_mode == HOP_BTLE) {
    55ce:	7aa3      	ldrb	r3, [r4, #10]
    55d0:	2b03      	cmp	r3, #3
    55d2:	d105      	bne.n	55e0 <hop+0x118>
		channel = btle_next_hop(&le);
    55d4:	4d1f      	ldr	r5, [pc, #124]	; (5654 <hop+0x18c>)
    55d6:	1d28      	adds	r0, r5, #4
    55d8:	f001 fc47 	bl	6e6a <btle_next_hop>
    55dc:	8028      	strh	r0, [r5, #0]
    55de:	e006      	b.n	55ee <hop+0x126>
	}

	else if (hop_mode == HOP_DIRECT) {
    55e0:	7aa3      	ldrb	r3, [r4, #10]
    55e2:	2b04      	cmp	r3, #4
    55e4:	d103      	bne.n	55ee <hop+0x126>
		channel = hop_direct_channel;
    55e6:	89a2      	ldrh	r2, [r4, #12]
    55e8:	4b1a      	ldr	r3, [pc, #104]	; (5654 <hop+0x18c>)
    55ea:	b292      	uxth	r2, r2
    55ec:	801a      	strh	r2, [r3, #0]
	}
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    55ee:	2064      	movs	r0, #100	; 0x64
    55f0:	f002 fe25 	bl	823e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    55f4:	f002 fe1c 	bl	8230 <cc2400_status>
    55f8:	0743      	lsls	r3, r0, #29
    55fa:	d4fb      	bmi.n	55f4 <hop+0x12c>
    55fc:	4d15      	ldr	r5, [pc, #84]	; (5654 <hop+0x18c>)

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    55fe:	7c60      	ldrb	r0, [r4, #17]
		cc2400_set(FSDIV, channel);
    5600:	8829      	ldrh	r1, [r5, #0]
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    5602:	b2c0      	uxtb	r0, r0
    5604:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel);
    5606:	b289      	uxth	r1, r1
	else
		cc2400_set(FSDIV, channel - 1);
    5608:	bf1e      	ittt	ne
    560a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    560e:	2002      	movne	r0, #2
    5610:	b289      	uxthne	r1, r1
    5612:	f002 fd6a 	bl	80ea <cc2400_set>

	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    5616:	7aa3      	ldrb	r3, [r4, #10]
    5618:	b11b      	cbz	r3, 5622 <hop+0x15a>
		cs_threshold_calc_and_set(channel);
    561a:	8828      	ldrh	r0, [r5, #0]
    561c:	b280      	uxth	r0, r0
    561e:	f001 fde1 	bl	71e4 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    5622:	2061      	movs	r0, #97	; 0x61
    5624:	f002 fe0b 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5628:	f002 fe02 	bl	8230 <cc2400_status>
    562c:	0745      	lsls	r5, r0, #29
    562e:	d5fb      	bpl.n	5628 <hop+0x160>

	dma_discard = 1;
    5630:	2301      	movs	r3, #1
    5632:	7423      	strb	r3, [r4, #16]

	if(mode == MODE_TX_SYMBOLS)
    5634:	7c63      	ldrb	r3, [r4, #17]
    5636:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    5638:	bf0c      	ite	eq
    563a:	2063      	moveq	r0, #99	; 0x63
	else
		cc2400_strobe(SRX);
    563c:	2062      	movne	r0, #98	; 0x62
}
    563e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	dma_discard = 1;

	if(mode == MODE_TX_SYMBOLS)
		cc2400_strobe(STX);
	else
		cc2400_strobe(SRX);
    5642:	f002 bdfc 	b.w	823e <cc2400_strobe>
    5646:	bf00      	nop
    5648:	10000a1c 	.word	0x10000a1c
    564c:	10000bc4 	.word	0x10000bc4
    5650:	10000ba0 	.word	0x10000ba0
    5654:	10000448 	.word	0x10000448
    5658:	10000ba9 	.word	0x10000ba9
    565c:	10001047 	.word	0x10001047
    5660:	10000bab 	.word	0x10000bab
    5664:	80000007 	.word	0x80000007

00005668 <bt_stream_rx>:
}

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    5668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int8_t rssi;
	int8_t rssi_at_trigger;

	RXLED_CLR;
    566c:	4b49      	ldr	r3, [pc, #292]	; (5794 <bt_stream_rx+0x12c>)
    566e:	2210      	movs	r2, #16
    5670:	601a      	str	r2, [r3, #0]

	queue_init();
    5672:	f001 fcc9 	bl	7008 <queue_init>
	dio_ssp_init();
    5676:	f002 fca7 	bl	7fc8 <dio_ssp_init>
	dma_init();
    567a:	f001 fea3 	bl	73c4 <dma_init>
	dio_ssp_start();
    567e:	f001 ff27 	bl	74d0 <dio_ssp_start>

	cc2400_rx();
    5682:	f7fe fe93 	bl	43ac <cc2400_rx>

	cs_trigger_enable();
    5686:	f001 fddf 	bl	7248 <cs_trigger_enable>

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    568a:	4c43      	ldr	r4, [pc, #268]	; (5798 <bt_stream_rx+0x130>)
    568c:	7ca3      	ldrb	r3, [r4, #18]
    568e:	46a1      	mov	r9, r4
    5690:	2b01      	cmp	r3, #1
    5692:	d175      	bne.n	5780 <bt_stream_rx+0x118>
	{

		RXLED_CLR;
    5694:	4b3f      	ldr	r3, [pc, #252]	; (5794 <bt_stream_rx+0x12c>)
    5696:	2210      	movs	r2, #16
    5698:	601a      	str	r2, [r3, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    569a:	f001 fd2b 	bl	70f4 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    569e:	2580      	movs	r5, #128	; 0x80
		while (!rx_tc) {
    56a0:	4f3e      	ldr	r7, [pc, #248]	; (579c <bt_stream_rx+0x134>)
    56a2:	4e3f      	ldr	r6, [pc, #252]	; (57a0 <bt_stream_rx+0x138>)
    56a4:	683b      	ldr	r3, [r7, #0]
    56a6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 57c0 <bt_stream_rx+0x158>
    56aa:	bb2b      	cbnz	r3, 56f8 <bt_stream_rx+0x90>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    56ac:	2006      	movs	r0, #6
    56ae:	f002 fd13 	bl	80d8 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    56b2:	7833      	ldrb	r3, [r6, #0]
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while (!rx_tc) {
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    56b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    56b8:	b163      	cbz	r3, 56d4 <bt_stream_rx+0x6c>
    56ba:	b26b      	sxtb	r3, r5
    56bc:	3380      	adds	r3, #128	; 0x80
    56be:	d109      	bne.n	56d4 <bt_stream_rx+0x6c>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    56c0:	4b38      	ldr	r3, [pc, #224]	; (57a4 <bt_stream_rx+0x13c>)
    56c2:	b240      	sxtb	r0, r0
    56c4:	f993 5000 	ldrsb.w	r5, [r3]
    56c8:	3536      	adds	r5, #54	; 0x36
    56ca:	42a8      	cmp	r0, r5
    56cc:	bfa8      	it	ge
    56ce:	4605      	movge	r5, r0
    56d0:	b2ed      	uxtb	r5, r5
				rssi_at_trigger = rssi;
    56d2:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    56d4:	b240      	sxtb	r0, r0
    56d6:	f001 fd29 	bl	712c <rssi_add>

			handle_usb(clkn);
    56da:	f8d8 0000 	ldr.w	r0, [r8]
    56de:	f001 fcf5 	bl	70cc <handle_usb>

			/* If timer says time to hop, do it. */
			if (do_hop) {
    56e2:	f899 300b 	ldrb.w	r3, [r9, #11]
    56e6:	b113      	cbz	r3, 56ee <bt_stream_rx+0x86>
				hop();
    56e8:	f7ff feee 	bl	54c8 <hop>
    56ec:	e7d8      	b.n	56a0 <bt_stream_rx+0x38>
			} else {
				TXLED_CLR;
    56ee:	4b29      	ldr	r3, [pc, #164]	; (5794 <bt_stream_rx+0x12c>)
    56f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    56f4:	601a      	str	r2, [r3, #0]
    56f6:	e7d3      	b.n	56a0 <bt_stream_rx+0x38>
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    56f8:	4b2b      	ldr	r3, [pc, #172]	; (57a8 <bt_stream_rx+0x140>)
    56fa:	2210      	movs	r2, #16

		if (rx_err) {
    56fc:	4d2b      	ldr	r5, [pc, #172]	; (57ac <bt_stream_rx+0x144>)
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    56fe:	601a      	str	r2, [r3, #0]

		if (rx_err) {
    5700:	682b      	ldr	r3, [r5, #0]
    5702:	b11b      	cbz	r3, 570c <bt_stream_rx+0xa4>
			status |= DMA_ERROR;
    5704:	7863      	ldrb	r3, [r4, #1]
    5706:	f043 0302 	orr.w	r3, r3, #2
    570a:	7063      	strb	r3, [r4, #1]
		}

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    570c:	683b      	ldr	r3, [r7, #0]
    570e:	2b01      	cmp	r3, #1
    5710:	d903      	bls.n	571a <bt_stream_rx+0xb2>
			status |= DMA_OVERFLOW;
    5712:	7863      	ldrb	r3, [r4, #1]
    5714:	f043 0301 	orr.w	r3, r3, #1
    5718:	7063      	strb	r3, [r4, #1]

		if (dma_discard) {
    571a:	7c22      	ldrb	r2, [r4, #16]
    571c:	4b1e      	ldr	r3, [pc, #120]	; (5798 <bt_stream_rx+0x130>)
    571e:	b12a      	cbz	r2, 572c <bt_stream_rx+0xc4>
			status |= DISCARD;
    5720:	785a      	ldrb	r2, [r3, #1]
    5722:	f042 0220 	orr.w	r2, r2, #32
    5726:	705a      	strb	r2, [r3, #1]
			dma_discard = 0;
    5728:	2200      	movs	r2, #0
    572a:	741a      	strb	r2, [r3, #16]
		}

		rssi_iir_update(channel);
    572c:	4b20      	ldr	r3, [pc, #128]	; (57b0 <bt_stream_rx+0x148>)
    572e:	8818      	ldrh	r0, [r3, #0]
    5730:	b280      	uxth	r0, r0
    5732:	f001 fd1b 	bl	716c <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5736:	7833      	ldrb	r3, [r6, #0]
    5738:	b913      	cbnz	r3, 5740 <bt_stream_rx+0xd8>
    573a:	4b1e      	ldr	r3, [pc, #120]	; (57b4 <bt_stream_rx+0x14c>)
    573c:	781b      	ldrb	r3, [r3, #0]
    573e:	b12b      	cbz	r3, 574c <bt_stream_rx+0xe4>
			status |= CS_TRIGGER;
    5740:	7863      	ldrb	r3, [r4, #1]
    5742:	f043 0308 	orr.w	r3, r3, #8
    5746:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5748:	2300      	movs	r3, #0
    574a:	7033      	strb	r3, [r6, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    574c:	4b15      	ldr	r3, [pc, #84]	; (57a4 <bt_stream_rx+0x13c>)
    574e:	f993 2000 	ldrsb.w	r2, [r3]
    5752:	4b19      	ldr	r3, [pc, #100]	; (57b8 <bt_stream_rx+0x150>)
    5754:	3235      	adds	r2, #53	; 0x35
    5756:	f993 3000 	ldrsb.w	r3, [r3]
    575a:	429a      	cmp	r2, r3
    575c:	da03      	bge.n	5766 <bt_stream_rx+0xfe>
			status |= RSSI_TRIGGER;
    575e:	7863      	ldrb	r3, [r4, #1]
    5760:	f043 0310 	orr.w	r3, r3, #16
    5764:	7063      	strb	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    5766:	4b15      	ldr	r3, [pc, #84]	; (57bc <bt_stream_rx+0x154>)
    5768:	2000      	movs	r0, #0
    576a:	6819      	ldr	r1, [r3, #0]
    576c:	f7fe fec8 	bl	4500 <enqueue>

		handle_usb(clkn);
    5770:	f8d8 0000 	ldr.w	r0, [r8]
    5774:	f001 fcaa 	bl	70cc <handle_usb>
		rx_tc = 0;
    5778:	2300      	movs	r3, #0
    577a:	603b      	str	r3, [r7, #0]
		rx_err = 0;
    577c:	602b      	str	r3, [r5, #0]
    577e:	e784      	b.n	568a <bt_stream_rx+0x22>

	cc2400_rx();

	cs_trigger_enable();

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    5780:	7ca3      	ldrb	r3, [r4, #18]
    5782:	2b08      	cmp	r3, #8
    5784:	d086      	beq.n	5694 <bt_stream_rx+0x2c>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    5786:	f001 fec9 	bl	751c <dio_ssp_stop>
	cs_trigger_disable();
}
    578a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
	cs_trigger_disable();
    578e:	f001 bd71 	b.w	7274 <cs_trigger_disable>
    5792:	bf00      	nop
    5794:	2009c03c 	.word	0x2009c03c
    5798:	10000a1c 	.word	0x10000a1c
    579c:	10000ba4 	.word	0x10000ba4
    57a0:	100010bd 	.word	0x100010bd
    57a4:	100010bc 	.word	0x100010bc
    57a8:	2009c038 	.word	0x2009c038
    57ac:	100010b8 	.word	0x100010b8
    57b0:	10000448 	.word	0x10000448
    57b4:	10000d10 	.word	0x10000d10
    57b8:	10000ba8 	.word	0x10000ba8
    57bc:	10000d20 	.word	0x10000d20
    57c0:	10000bc4 	.word	0x10000bc4

000057c4 <br_transmit>:
 * Transmit a BTBR packet with the specified access code.
 *
 * All modulation parameters are set within this function.
 */
void br_transmit()
{
    57c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    57c8:	4b95      	ldr	r3, [pc, #596]	; (5a20 <br_transmit+0x25c>)
    57ca:	2201      	movs	r2, #1
    57cc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    57d0:	2300      	movs	r3, #0
    57d2:	4022      	ands	r2, r4
    57d4:	402b      	ands	r3, r5
    57d6:	ea52 0103 	orrs.w	r1, r2, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57da:	f04f 0700 	mov.w	r7, #0
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    57de:	f245 5355 	movw	r3, #21845	; 0x5555
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57e2:	ea4f 76d5 	mov.w	r6, r5, lsr #31
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    57e6:	f64a 28aa 	movw	r8, #43690	; 0xaaaa
    57ea:	bf18      	it	ne
    57ec:	4698      	movne	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    57ee:	b2e0      	uxtb	r0, r4
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57f0:	2f00      	cmp	r7, #0
    57f2:	bf08      	it	eq
    57f4:	2e01      	cmpeq	r6, #1
    57f6:	bf14      	ite	ne
    57f8:	2655      	movne	r6, #85	; 0x55
    57fa:	26aa      	moveq	r6, #170	; 0xaa

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    57fc:	f7fe fdc4 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5800:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
    5804:	f3c4 2007 	ubfx	r0, r4, #8, #8
    5808:	f7fe fdbe 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    580c:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
    5810:	f3c4 4007 	ubfx	r0, r4, #16, #8
    5814:	f7fe fdb8 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5818:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
    581c:	0e20      	lsrs	r0, r4, #24
    581e:	f7fe fdb3 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5822:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
    5826:	b2e8      	uxtb	r0, r5
    5828:	f7fe fdae 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    582c:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
    5830:	f3c5 2007 	ubfx	r0, r5, #8, #8
    5834:	f7fe fda8 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5838:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
    583c:	f3c5 4007 	ubfx	r0, r5, #16, #8
    5840:	f7fe fda2 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5844:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
    5848:	0e28      	lsrs	r0, r5, #24
    584a:	f7fe fd9d 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    584e:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
    5852:	4630      	mov	r0, r6
    5854:	f7fe fd98 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5858:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
    585c:	2077      	movs	r0, #119	; 0x77
    585e:	f7fe fd93 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5862:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
    5866:	2066      	movs	r0, #102	; 0x66
    5868:	f7fe fd8e 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    586c:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
    5870:	2055      	movs	r0, #85	; 0x55
    5872:	f7fe fd89 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5876:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
    587a:	2044      	movs	r0, #68	; 0x44
    587c:	f7fe fd84 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5880:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
    5884:	2033      	movs	r0, #51	; 0x33
    5886:	f7fe fd7f 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    588a:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
    588e:	2022      	movs	r0, #34	; 0x22
    5890:	f7fe fd7a 	bl	4388 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5894:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
		reverse8(0x11)
    5898:	2011      	movs	r0, #17
    589a:	f7fe fd75 	bl	4388 <reverse8>
	return reversed;
}

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;
    589e:	463c      	mov	r4, r7
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58a0:	f88d 000f 	strb.w	r0, [sp, #15]

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58a4:	463b      	mov	r3, r7
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58a6:	fa48 f203 	asr.w	r2, r8, r3
    58aa:	f1c3 010f 	rsb	r1, r3, #15
    58ae:	f002 0201 	and.w	r2, r2, #1
    58b2:	408a      	lsls	r2, r1

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58b4:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58b6:	4314      	orrs	r4, r2

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58b8:	2b10      	cmp	r3, #16
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58ba:	b2a4      	uxth	r4, r4

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    58bc:	d1f3      	bne.n	58a6 <br_transmit+0xe2>
/* start buffered tx */
static void cc2400_tx_sync(uint32_t sync)
{
#ifdef TX_ENABLE
	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    58be:	200d      	movs	r0, #13
    58c0:	f647 71ff 	movw	r1, #32767	; 0x7fff
    58c4:	f002 fc11 	bl	80ea <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    58c8:	2012      	movs	r0, #18
    58ca:	f642 3122 	movw	r1, #11042	; 0x2b22
    58ce:	f002 fc0c 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    58d2:	2014      	movs	r0, #20
    58d4:	f241 314b 	movw	r1, #4939	; 0x134b
    58d8:	f002 fc07 	bl	80ea <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    58dc:	2020      	movs	r0, #32
    58de:	f640 4101 	movw	r1, #3073	; 0xc01
    58e2:	f002 fc02 	bl	80ea <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
    58e6:	4621      	mov	r1, r4
    58e8:	202c      	movs	r0, #44	; 0x2c
    58ea:	f002 fbfe 	bl	80ea <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    58ee:	202d      	movs	r0, #45	; 0x2d
    58f0:	2100      	movs	r1, #0
    58f2:	f002 fbfa 	bl	80ea <cc2400_set>

	cc2400_set(FSDIV,   channel);
    58f6:	4b4b      	ldr	r3, [pc, #300]	; (5a24 <br_transmit+0x260>)
    58f8:	2002      	movs	r0, #2
    58fa:	8819      	ldrh	r1, [r3, #0]
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)

	if (modulation == MOD_BT_BASIC_RATE) {
    58fc:	4c4a      	ldr	r4, [pc, #296]	; (5a28 <br_transmit+0x264>)
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);

	cc2400_set(FSDIV,   channel);
    58fe:	b289      	uxth	r1, r1
    5900:	f002 fbf3 	bl	80ea <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5904:	2005      	movs	r0, #5
    5906:	210b      	movs	r1, #11
    5908:	f002 fbef 	bl	80ea <cc2400_set>

	if (modulation == MOD_BT_BASIC_RATE) {
    590c:	7823      	ldrb	r3, [r4, #0]
    590e:	b913      	cbnz	r3, 5916 <br_transmit+0x152>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    5910:	2003      	movs	r0, #3
    5912:	2129      	movs	r1, #41	; 0x29
    5914:	e004      	b.n	5920 <br_transmit+0x15c>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5916:	7823      	ldrb	r3, [r4, #0]
    5918:	2b01      	cmp	r3, #1
    591a:	d11d      	bne.n	5958 <br_transmit+0x194>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    591c:	2003      	movs	r0, #3
    591e:	2140      	movs	r1, #64	; 0x40
    5920:	f002 fbe3 	bl	80ea <cc2400_set>
	} else {
		/* oops */
		return;
	}

	clkn_start();
    5924:	f001 fcf6 	bl	7314 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5928:	f002 fc82 	bl	8230 <cc2400_status>
    592c:	0645      	lsls	r5, r0, #25
    592e:	d5fb      	bpl.n	5928 <br_transmit+0x164>
	cc2400_strobe(SFSON);
    5930:	2061      	movs	r0, #97	; 0x61
    5932:	f002 fc84 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5936:	f002 fc7b 	bl	8230 <cc2400_status>
    593a:	0740      	lsls	r0, r0, #29
    593c:	d5fb      	bpl.n	5936 <br_transmit+0x172>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    593e:	4b3b      	ldr	r3, [pc, #236]	; (5a2c <br_transmit+0x268>)
    5940:	2280      	movs	r2, #128	; 0x80
    5942:	601a      	str	r2, [r3, #0]
#endif

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5944:	200e      	movs	r0, #14
    5946:	f002 fbc7 	bl	80d8 <cc2400_get>
    594a:	f000 001f 	and.w	r0, r0, #31
    594e:	280f      	cmp	r0, #15
    5950:	d1f8      	bne.n	5944 <br_transmit+0x180>
	cc2400_strobe(STX);
    5952:	2063      	movs	r0, #99	; 0x63
    5954:	f002 fc73 	bl	823e <cc2400_strobe>
		reverse8(0x11)
	};

	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5958:	2114      	movs	r1, #20
    595a:	2023      	movs	r0, #35	; 0x23
    595c:	f002 fbc5 	bl	80ea <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5960:	2008      	movs	r0, #8
    5962:	f002 fbb9 	bl	80d8 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5966:	f3c0 0108 	ubfx	r1, r0, #0, #9
	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    596a:	4605      	mov	r5, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    596c:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    5970:	2008      	movs	r0, #8
    5972:	f002 fbba 	bl	80ea <cc2400_set>
 */
void br_transmit()
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;
    5976:	2600      	movs	r6, #0

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
    5978:	7ca3      	ldrb	r3, [r4, #18]
    597a:	2b02      	cmp	r3, #2
    597c:	d145      	bne.n	5a0a <br_transmit+0x246>
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    597e:	0876      	lsrs	r6, r6, #1
    5980:	4f2b      	ldr	r7, [pc, #172]	; (5a30 <br_transmit+0x26c>)
    5982:	683b      	ldr	r3, [r7, #0]
    5984:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
    5988:	d105      	bne.n	5996 <br_transmit+0x1d2>

			// If timer says time to hop, do it.
			if (do_hop) {
    598a:	7ae3      	ldrb	r3, [r4, #11]
    598c:	2b00      	cmp	r3, #0
    598e:	d0f7      	beq.n	5980 <br_transmit+0x1bc>
				hop();
    5990:	f7ff fd9a 	bl	54c8 <hop>
    5994:	e7f4      	b.n	5980 <br_transmit+0x1bc>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5996:	4b27      	ldr	r3, [pc, #156]	; (5a34 <br_transmit+0x270>)
    5998:	681a      	ldr	r2, [r3, #0]
    599a:	f640 03c9 	movw	r3, #2249	; 0x8c9
    599e:	429a      	cmp	r2, r3
    59a0:	d9f3      	bls.n	598a <br_transmit+0x1c6>
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    59a2:	4b25      	ldr	r3, [pc, #148]	; (5a38 <br_transmit+0x274>)
    59a4:	f44f 7280 	mov.w	r2, #256	; 0x100
			if (do_hop) {
				hop();
			}
		}

		clkn_saved = clkn;
    59a8:	683e      	ldr	r6, [r7, #0]

		TXLED_SET;

		cc2400_fifo_write(16, data);
    59aa:	2010      	movs	r0, #16
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    59ac:	601a      	str	r2, [r3, #0]

		cc2400_fifo_write(16, data);
    59ae:	4669      	mov	r1, sp
    59b0:	f002 fbae 	bl	8110 <cc2400_fifo_write>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    59b4:	200e      	movs	r0, #14
    59b6:	f002 fb8f 	bl	80d8 <cc2400_get>
    59ba:	f000 001f 	and.w	r0, r0, #31
    59be:	280f      	cmp	r0, #15
    59c0:	d1f8      	bne.n	59b4 <br_transmit+0x1f0>
		TXLED_CLR;
    59c2:	4b1e      	ldr	r3, [pc, #120]	; (5a3c <br_transmit+0x278>)
    59c4:	f44f 7280 	mov.w	r2, #256	; 0x100
    59c8:	601a      	str	r2, [r3, #0]

		cc2400_strobe(SRFOFF);
    59ca:	2064      	movs	r0, #100	; 0x64
    59cc:	f002 fc37 	bl	823e <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    59d0:	f002 fc2e 	bl	8230 <cc2400_status>
    59d4:	0741      	lsls	r1, r0, #29
    59d6:	d4fb      	bmi.n	59d0 <br_transmit+0x20c>

		while (!(cc2400_status() & XOSC16M_STABLE));
    59d8:	f002 fc2a 	bl	8230 <cc2400_status>
    59dc:	0642      	lsls	r2, r0, #25
    59de:	d5fb      	bpl.n	59d8 <br_transmit+0x214>
		cc2400_strobe(SFSON);
    59e0:	2061      	movs	r0, #97	; 0x61
    59e2:	f002 fc2c 	bl	823e <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    59e6:	f002 fc23 	bl	8230 <cc2400_status>
    59ea:	0743      	lsls	r3, r0, #29
    59ec:	d5fb      	bpl.n	59e6 <br_transmit+0x222>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    59ee:	200e      	movs	r0, #14
    59f0:	f002 fb72 	bl	80d8 <cc2400_get>
    59f4:	f000 001f 	and.w	r0, r0, #31
    59f8:	280f      	cmp	r0, #15
    59fa:	d1f8      	bne.n	59ee <br_transmit+0x22a>
		cc2400_strobe(STX);
    59fc:	2063      	movs	r0, #99	; 0x63
    59fe:	f002 fc1e 	bl	823e <cc2400_strobe>

		handle_usb(clkn);
    5a02:	6838      	ldr	r0, [r7, #0]
    5a04:	f001 fb62 	bl	70cc <handle_usb>
    5a08:	e7b6      	b.n	5978 <br_transmit+0x1b4>
	}

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5a0a:	4b0d      	ldr	r3, [pc, #52]	; (5a40 <br_transmit+0x27c>)
    5a0c:	2280      	movs	r2, #128	; 0x80
    5a0e:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5a10:	2008      	movs	r0, #8
    5a12:	4629      	mov	r1, r5
    5a14:	f002 fb69 	bl	80ea <cc2400_set>
}
    5a18:	b004      	add	sp, #16
    5a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a1e:	bf00      	nop
    5a20:	100010c0 	.word	0x100010c0
    5a24:	10000448 	.word	0x10000448
    5a28:	10000a1c 	.word	0x10000a1c
    5a2c:	2009c058 	.word	0x2009c058
    5a30:	10000bc4 	.word	0x10000bc4
    5a34:	40004008 	.word	0x40004008
    5a38:	2009c038 	.word	0x2009c038
    5a3c:	2009c03c 	.word	0x2009c03c
    5a40:	2009c05c 	.word	0x2009c05c

00005a44 <reset_le>:
	le.syncl = aa_rev & 0xffff;
	le.synch = aa_rev >> 16;
}

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    5a44:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    5a46:	480f      	ldr	r0, [pc, #60]	; (5a84 <reset_le+0x40>)
    5a48:	f7fe fda8 	bl	459c <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    5a4c:	4b0e      	ldr	r3, [pc, #56]	; (5a88 <reset_le+0x44>)
    5a4e:	4a0f      	ldr	r2, [pc, #60]	; (5a8c <reset_le+0x48>)
    5a50:	60da      	str	r2, [r3, #12]
	le.crc_init_reversed = 0xAAAAAA;
    5a52:	4a0f      	ldr	r2, [pc, #60]	; (5a90 <reset_le+0x4c>)
    5a54:	611a      	str	r2, [r3, #16]
	le.crc_verify = 0;
    5a56:	2200      	movs	r2, #0

	le.channel_idx = 0;
	le.channel_increment = 0;

	le.conn_epoch = 0;
	le.interval_timer = 0;
    5a58:	841a      	strh	r2, [r3, #32]
/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
    5a5a:	615a      	str	r2, [r3, #20]

	le.conn_epoch = 0;
	le.interval_timer = 0;
	le.conn_interval = 0;
	le.conn_interval = 0;
	le.conn_count = 0;
    5a5c:	849a      	strh	r2, [r3, #36]	; 0x24
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
	le.last_packet = 0;
    5a5e:	645a      	str	r2, [r3, #68]	; 0x44

	le.link_state = LINK_INACTIVE;
    5a60:	761a      	strb	r2, [r3, #24]

	le.channel_idx = 0;
    5a62:	765a      	strb	r2, [r3, #25]
	le.channel_increment = 0;
    5a64:	769a      	strb	r2, [r3, #26]

	le.conn_epoch = 0;
    5a66:	61da      	str	r2, [r3, #28]
	le.interval_timer = 0;
	le.conn_interval = 0;
    5a68:	845a      	strh	r2, [r3, #34]	; 0x22
	le.conn_interval = 0;
	le.conn_count = 0;

	le.win_size = 0;
    5a6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	le.win_offset = 0;
    5a6e:	851a      	strh	r2, [r3, #40]	; 0x28

	le.update_pending = 0;
    5a70:	62da      	str	r2, [r3, #44]	; 0x2c
	le.update_instant = 0;
    5a72:	861a      	strh	r2, [r3, #48]	; 0x30
	le.interval_update = 0;
    5a74:	865a      	strh	r2, [r3, #50]	; 0x32
	le.win_size_update = 0;
    5a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	le.win_offset_update = 0;
    5a7a:	86da      	strh	r2, [r3, #54]	; 0x36

	do_hop = 0;
    5a7c:	4b05      	ldr	r3, [pc, #20]	; (5a94 <reset_le+0x50>)
    5a7e:	72da      	strb	r2, [r3, #11]
    5a80:	bd08      	pop	{r3, pc}
    5a82:	bf00      	nop
    5a84:	8e89bed6 	.word	0x8e89bed6
    5a88:	10000448 	.word	0x10000448
    5a8c:	00555555 	.word	0x00555555
    5a90:	00aaaaaa 	.word	0x00aaaaaa
    5a94:	10000a1c 	.word	0x10000a1c

00005a98 <reset_le_promisc>:
}

// reset LE Promisc state
void reset_le_promisc(void) {
    5a98:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    5a9a:	4c06      	ldr	r4, [pc, #24]	; (5ab4 <reset_le_promisc+0x1c>)
    5a9c:	2100      	movs	r1, #0
    5a9e:	4620      	mov	r0, r4
    5aa0:	f44f 7284 	mov.w	r2, #264	; 0x108
    5aa4:	f7fe fbc4 	bl	4230 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    5aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5aac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    5ab0:	bd10      	pop	{r4, pc}
    5ab2:	bf00      	nop
    5ab4:	10000c08 	.word	0x10000c08

00005ab8 <bt_generic_le>:
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5abc:	4c69      	ldr	r4, [pc, #420]	; (5c64 <bt_generic_le+0x1ac>)
    5abe:	2301      	movs	r3, #1
	le_promisc.smallest_hop_interval = 0xffffffff;
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5ac0:	4680      	mov	r8, r0
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5ac2:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    5ac4:	7460      	strb	r0, [r4, #17]

	reset_le();
    5ac6:	f7ff ffbd 	bl	5a44 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5aca:	4b67      	ldr	r3, [pc, #412]	; (5c68 <bt_generic_le+0x1b0>)
    5acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5ad0:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5ad2:	4b66      	ldr	r3, [pc, #408]	; (5c6c <bt_generic_le+0x1b4>)
    5ad4:	2210      	movs	r2, #16
    5ad6:	601a      	str	r2, [r3, #0]

	queue_init();
    5ad8:	f001 fa96 	bl	7008 <queue_init>
	dio_ssp_init();
    5adc:	f002 fa74 	bl	7fc8 <dio_ssp_init>
	dma_init();
    5ae0:	f001 fc70 	bl	73c4 <dma_init>
	dio_ssp_start();
    5ae4:	f001 fcf4 	bl	74d0 <dio_ssp_start>
	cc2400_rx();
    5ae8:	f7fe fc60 	bl	43ac <cc2400_rx>

	cs_trigger_enable();
    5aec:	f001 fbac 	bl	7248 <cs_trigger_enable>

	hold = 0;
    5af0:	2500      	movs	r5, #0

	while (requested_mode == active_mode) {
    5af2:	7ca3      	ldrb	r3, [r4, #18]
    5af4:	4543      	cmp	r3, r8
    5af6:	f040 80a3 	bne.w	5c40 <bt_generic_le+0x188>
		if (requested_channel != 0) {
    5afa:	4b5a      	ldr	r3, [pc, #360]	; (5c64 <bt_generic_le+0x1ac>)
    5afc:	89db      	ldrh	r3, [r3, #14]
    5afe:	b29b      	uxth	r3, r3
    5b00:	b1d3      	cbz	r3, 5b38 <bt_generic_le+0x80>
			cc2400_strobe(SRFOFF);
    5b02:	2064      	movs	r0, #100	; 0x64
    5b04:	f002 fb9b 	bl	823e <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b08:	f002 fb92 	bl	8230 <cc2400_status>
    5b0c:	0747      	lsls	r7, r0, #29
    5b0e:	d4fb      	bmi.n	5b08 <bt_generic_le+0x50>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5b10:	4b57      	ldr	r3, [pc, #348]	; (5c70 <bt_generic_le+0x1b8>)
    5b12:	2002      	movs	r0, #2
    5b14:	8819      	ldrh	r1, [r3, #0]
    5b16:	b289      	uxth	r1, r1
    5b18:	3901      	subs	r1, #1
    5b1a:	b289      	uxth	r1, r1
    5b1c:	f002 fae5 	bl	80ea <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5b20:	2061      	movs	r0, #97	; 0x61
    5b22:	f002 fb8c 	bl	823e <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5b26:	f002 fb83 	bl	8230 <cc2400_status>
    5b2a:	0746      	lsls	r6, r0, #29
    5b2c:	d5fb      	bpl.n	5b26 <bt_generic_le+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5b2e:	2062      	movs	r0, #98	; 0x62
    5b30:	f002 fb85 	bl	823e <cc2400_strobe>

			requested_channel = 0;
    5b34:	2300      	movs	r3, #0
    5b36:	81e3      	strh	r3, [r4, #14]
		}

		if (do_hop) {
    5b38:	7ae3      	ldrb	r3, [r4, #11]
    5b3a:	4e4c      	ldr	r6, [pc, #304]	; (5c6c <bt_generic_le+0x1b4>)
    5b3c:	b113      	cbz	r3, 5b44 <bt_generic_le+0x8c>
			hop();
    5b3e:	f7ff fcc3 	bl	54c8 <hop>
    5b42:	e002      	b.n	5b4a <bt_generic_le+0x92>
		} else {
			TXLED_CLR;
    5b44:	f44f 7380 	mov.w	r3, #256	; 0x100
    5b48:	6033      	str	r3, [r6, #0]
		}

		RXLED_CLR;
    5b4a:	2310      	movs	r3, #16
    5b4c:	6033      	str	r3, [r6, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5b4e:	f001 fad1 	bl	70f4 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5b52:	2780      	movs	r7, #128	; 0x80
		while ((rx_tc == 0) && (rx_err == 0))
    5b54:	4b47      	ldr	r3, [pc, #284]	; (5c74 <bt_generic_le+0x1bc>)
    5b56:	4e48      	ldr	r6, [pc, #288]	; (5c78 <bt_generic_le+0x1c0>)
    5b58:	681a      	ldr	r2, [r3, #0]
    5b5a:	4699      	mov	r9, r3
    5b5c:	b9d2      	cbnz	r2, 5b94 <bt_generic_le+0xdc>
    5b5e:	6833      	ldr	r3, [r6, #0]
    5b60:	b9c3      	cbnz	r3, 5b94 <bt_generic_le+0xdc>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b62:	2006      	movs	r0, #6
    5b64:	f002 fab8 	bl	80d8 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b68:	4b44      	ldr	r3, [pc, #272]	; (5c7c <bt_generic_le+0x1c4>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b6e:	781b      	ldrb	r3, [r3, #0]
    5b70:	b163      	cbz	r3, 5b8c <bt_generic_le+0xd4>
    5b72:	b27b      	sxtb	r3, r7
    5b74:	3380      	adds	r3, #128	; 0x80
    5b76:	d109      	bne.n	5b8c <bt_generic_le+0xd4>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5b78:	4b41      	ldr	r3, [pc, #260]	; (5c80 <bt_generic_le+0x1c8>)
    5b7a:	b240      	sxtb	r0, r0
    5b7c:	f993 7000 	ldrsb.w	r7, [r3]
    5b80:	3736      	adds	r7, #54	; 0x36
    5b82:	42b8      	cmp	r0, r7
    5b84:	bfa8      	it	ge
    5b86:	4607      	movge	r7, r0
    5b88:	b2ff      	uxtb	r7, r7
				rssi_at_trigger = rssi;
    5b8a:	4638      	mov	r0, r7
			}
			rssi_add(rssi);
    5b8c:	b240      	sxtb	r0, r0
    5b8e:	f001 facd 	bl	712c <rssi_add>
    5b92:	e7df      	b.n	5b54 <bt_generic_le+0x9c>
		}

		if (rx_err) {
    5b94:	6833      	ldr	r3, [r6, #0]
    5b96:	b11b      	cbz	r3, 5ba0 <bt_generic_le+0xe8>
			status |= DMA_ERROR;
    5b98:	7863      	ldrb	r3, [r4, #1]
    5b9a:	f043 0302 	orr.w	r3, r3, #2
    5b9e:	7063      	strb	r3, [r4, #1]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    5ba0:	f8d9 3000 	ldr.w	r3, [r9]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d057      	beq.n	5c58 <bt_generic_le+0x1a0>
			goto rx_continue;

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5ba8:	4b32      	ldr	r3, [pc, #200]	; (5c74 <bt_generic_le+0x1bc>)
    5baa:	681b      	ldr	r3, [r3, #0]
    5bac:	2b01      	cmp	r3, #1
    5bae:	d903      	bls.n	5bb8 <bt_generic_le+0x100>
			status |= DMA_OVERFLOW;
    5bb0:	7863      	ldrb	r3, [r4, #1]
    5bb2:	f043 0301 	orr.w	r3, r3, #1
    5bb6:	7063      	strb	r3, [r4, #1]

		rssi_iir_update(channel);
    5bb8:	4b2d      	ldr	r3, [pc, #180]	; (5c70 <bt_generic_le+0x1b8>)
    5bba:	8818      	ldrh	r0, [r3, #0]
    5bbc:	b280      	uxth	r0, r0
    5bbe:	f001 fad5 	bl	716c <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5bc2:	4b2e      	ldr	r3, [pc, #184]	; (5c7c <bt_generic_le+0x1c4>)
    5bc4:	781a      	ldrb	r2, [r3, #0]
    5bc6:	b912      	cbnz	r2, 5bce <bt_generic_le+0x116>
    5bc8:	4a2e      	ldr	r2, [pc, #184]	; (5c84 <bt_generic_le+0x1cc>)
    5bca:	7812      	ldrb	r2, [r2, #0]
    5bcc:	b132      	cbz	r2, 5bdc <bt_generic_le+0x124>
			status |= CS_TRIGGER;
    5bce:	7862      	ldrb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
    5bd0:	2502      	movs	r5, #2
		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
			status |= CS_TRIGGER;
    5bd2:	f042 0208 	orr.w	r2, r2, #8
    5bd6:	7062      	strb	r2, [r4, #1]
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
    5bd8:	2200      	movs	r2, #0
    5bda:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5bdc:	4b28      	ldr	r3, [pc, #160]	; (5c80 <bt_generic_le+0x1c8>)
    5bde:	f993 2000 	ldrsb.w	r2, [r3]
    5be2:	4b29      	ldr	r3, [pc, #164]	; (5c88 <bt_generic_le+0x1d0>)
    5be4:	3235      	adds	r2, #53	; 0x35
    5be6:	f993 3000 	ldrsb.w	r3, [r3]
    5bea:	429a      	cmp	r2, r3
    5bec:	da05      	bge.n	5bfa <bt_generic_le+0x142>
			status |= RSSI_TRIGGER;
    5bee:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5bf0:	2502      	movs	r5, #2
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    5bf2:	f043 0310 	orr.w	r3, r3, #16
    5bf6:	7063      	strb	r3, [r4, #1]
    5bf8:	e000      	b.n	5bfc <bt_generic_le+0x144>
			hold = CS_HOLD_TIME;
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    5bfa:	b36d      	cbz	r5, 5c58 <bt_generic_le+0x1a0>
			goto rx_continue;
		}
		hold--;

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5bfc:	4823      	ldr	r0, [pc, #140]	; (5c8c <bt_generic_le+0x1d4>)

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5bfe:	3d01      	subs	r5, #1

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5c00:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    5c04:	f44f 72c8 	mov.w	r2, #400	; 0x190
    5c08:	f003 f846 	bl	8c98 <memcpy>

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5c0c:	b2ed      	uxtb	r5, r5

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5c0e:	2300      	movs	r3, #0
    5c10:	481f      	ldr	r0, [pc, #124]	; (5c90 <bt_generic_le+0x1d8>)
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
			hold = CS_HOLD_TIME;
    5c12:	2200      	movs	r2, #0
    5c14:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c18:	491e      	ldr	r1, [pc, #120]	; (5c94 <bt_generic_le+0x1dc>)
    5c1a:	680f      	ldr	r7, [r1, #0]
    5c1c:	5cff      	ldrb	r7, [r7, r3]
				idle_rxbuf[i] <<= 1;
    5c1e:	6809      	ldr	r1, [r1, #0]

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c20:	09ff      	lsrs	r7, r7, #7
    5c22:	5487      	strb	r7, [r0, r2]
				idle_rxbuf[i] <<= 1;
    5c24:	5ccf      	ldrb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c26:	3201      	adds	r2, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5c28:	007f      	lsls	r7, r7, #1
    5c2a:	b2ff      	uxtb	r7, r7
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c2c:	2a08      	cmp	r2, #8
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5c2e:	54cf      	strb	r7, [r1, r3]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c30:	d1f2      	bne.n	5c18 <bt_generic_le+0x160>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5c32:	3301      	adds	r3, #1
    5c34:	2b32      	cmp	r3, #50	; 0x32
    5c36:	d1eb      	bne.n	5c10 <bt_generic_le+0x158>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    5c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5c3a:	4814      	ldr	r0, [pc, #80]	; (5c8c <bt_generic_le+0x1d4>)
    5c3c:	4798      	blx	r3
		if (!ret) break;
    5c3e:	b958      	cbnz	r0, 5c58 <bt_generic_le+0x1a0>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5c40:	4b15      	ldr	r3, [pc, #84]	; (5c98 <bt_generic_le+0x1e0>)
    5c42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c46:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5c48:	f7fe fcb4 	bl	45b4 <cc2400_idle>
	dio_ssp_stop();
    5c4c:	f001 fc66 	bl	751c <dio_ssp_stop>
	cs_trigger_disable();
}
    5c50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ICER0 = ICER0_ICE_USB;

	// reset the radio completely
	cc2400_idle();
	dio_ssp_stop();
	cs_trigger_disable();
    5c54:	f001 bb0e 	b.w	7274 <cs_trigger_disable>

		int ret = data_cb(unpacked);
		if (!ret) break;

	rx_continue:
		rx_tc = 0;
    5c58:	2300      	movs	r3, #0
    5c5a:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    5c5e:	6033      	str	r3, [r6, #0]
    5c60:	e747      	b.n	5af2 <bt_generic_le+0x3a>
    5c62:	bf00      	nop
    5c64:	10000a1c 	.word	0x10000a1c
    5c68:	e000e100 	.word	0xe000e100
    5c6c:	2009c03c 	.word	0x2009c03c
    5c70:	10000448 	.word	0x10000448
    5c74:	10000ba4 	.word	0x10000ba4
    5c78:	100010b8 	.word	0x100010b8
    5c7c:	100010bd 	.word	0x100010bd
    5c80:	100010bc 	.word	0x100010bc
    5c84:	10000d10 	.word	0x10000d10
    5c88:	10000ba8 	.word	0x10000ba8
    5c8c:	10000d24 	.word	0x10000d24
    5c90:	10000eb4 	.word	0x10000eb4
    5c94:	10000d20 	.word	0x10000d20
    5c98:	e000e180 	.word	0xe000e180

00005c9c <bt_le_sync>:
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ca0:	b091      	sub	sp, #68	; 0x44
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5ca2:	4daf      	ldr	r5, [pc, #700]	; (5f60 <bt_le_sync+0x2c4>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5ca4:	4caf      	ldr	r4, [pc, #700]	; (5f64 <bt_le_sync+0x2c8>)
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5ca6:	2301      	movs	r3, #1
    5ca8:	702b      	strb	r3, [r5, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5caa:	7623      	strb	r3, [r4, #24]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5cac:	4bae      	ldr	r3, [pc, #696]	; (5f68 <bt_le_sync+0x2cc>)
    5cae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    5cb2:	7468      	strb	r0, [r5, #17]

	le.link_state = LINK_LISTENING;

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5cb4:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5cb6:	4bad      	ldr	r3, [pc, #692]	; (5f6c <bt_le_sync+0x2d0>)
    5cb8:	2210      	movs	r2, #16
    5cba:	601a      	str	r2, [r3, #0]
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5cbc:	4606      	mov	r6, r0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;

	RXLED_CLR;

	queue_init();
    5cbe:	f001 f9a3 	bl	7008 <queue_init>
	dio_ssp_init();
    5cc2:	f002 f981 	bl	7fc8 <dio_ssp_init>
	dma_init_le();
    5cc6:	f001 fbbb 	bl	7440 <dma_init_le>
	dio_ssp_start();
    5cca:	f001 fc01 	bl	74d0 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5cce:	6860      	ldr	r0, [r4, #4]
    5cd0:	f002 f916 	bl	7f00 <rbit>
    5cd4:	f7fe fbbc 	bl	4450 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    5cd8:	7cab      	ldrb	r3, [r5, #18]
    5cda:	42b3      	cmp	r3, r6
    5cdc:	f040 81b6 	bne.w	604c <bt_le_sync+0x3b0>
		if (requested_channel != 0) {
    5ce0:	4b9f      	ldr	r3, [pc, #636]	; (5f60 <bt_le_sync+0x2c4>)
    5ce2:	89db      	ldrh	r3, [r3, #14]
    5ce4:	b29b      	uxth	r3, r3
    5ce6:	b1cb      	cbz	r3, 5d1c <bt_le_sync+0x80>
			cc2400_strobe(SRFOFF);
    5ce8:	2064      	movs	r0, #100	; 0x64
    5cea:	f002 faa8 	bl	823e <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5cee:	f002 fa9f 	bl	8230 <cc2400_status>
    5cf2:	0743      	lsls	r3, r0, #29
    5cf4:	d4fb      	bmi.n	5cee <bt_le_sync+0x52>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5cf6:	8821      	ldrh	r1, [r4, #0]
    5cf8:	2002      	movs	r0, #2
    5cfa:	b289      	uxth	r1, r1
    5cfc:	3901      	subs	r1, #1
    5cfe:	b289      	uxth	r1, r1
    5d00:	f002 f9f3 	bl	80ea <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5d04:	2061      	movs	r0, #97	; 0x61
    5d06:	f002 fa9a 	bl	823e <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5d0a:	f002 fa91 	bl	8230 <cc2400_status>
    5d0e:	0747      	lsls	r7, r0, #29
    5d10:	d5fb      	bpl.n	5d0a <bt_le_sync+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5d12:	2062      	movs	r0, #98	; 0x62
    5d14:	f002 fa93 	bl	823e <cc2400_strobe>

			requested_channel = 0;
    5d18:	2300      	movs	r3, #0
    5d1a:	81eb      	strh	r3, [r5, #14]
		}

		RXLED_CLR;
    5d1c:	4b93      	ldr	r3, [pc, #588]	; (5f6c <bt_le_sync+0x2d0>)
    5d1e:	2210      	movs	r2, #16
    5d20:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5d22:	f001 f9e7 	bl	70f4 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5d26:	4b92      	ldr	r3, [pc, #584]	; (5f70 <bt_le_sync+0x2d4>)
    5d28:	681a      	ldr	r2, [r3, #0]
    5d2a:	4699      	mov	r9, r3
    5d2c:	b942      	cbnz	r2, 5d40 <bt_le_sync+0xa4>
    5d2e:	4b91      	ldr	r3, [pc, #580]	; (5f74 <bt_le_sync+0x2d8>)
    5d30:	681b      	ldr	r3, [r3, #0]
    5d32:	b92b      	cbnz	r3, 5d40 <bt_le_sync+0xa4>
    5d34:	7aeb      	ldrb	r3, [r5, #11]
    5d36:	b91b      	cbnz	r3, 5d40 <bt_le_sync+0xa4>
    5d38:	4b89      	ldr	r3, [pc, #548]	; (5f60 <bt_le_sync+0x2c4>)
    5d3a:	7c9b      	ldrb	r3, [r3, #18]
    5d3c:	42b3      	cmp	r3, r6
    5d3e:	d0f2      	beq.n	5d26 <bt_le_sync+0x8a>
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d40:	2006      	movs	r0, #6
    5d42:	f002 f9c9 	bl	80d8 <cc2400_get>
		rssi_min = rssi_max = rssi;
    5d46:	4b8c      	ldr	r3, [pc, #560]	; (5f78 <bt_le_sync+0x2dc>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d48:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;

		if (requested_mode != active_mode) {
    5d4c:	7caa      	ldrb	r2, [r5, #18]
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5d4e:	7018      	strb	r0, [r3, #0]
    5d50:	4b8a      	ldr	r3, [pc, #552]	; (5f7c <bt_le_sync+0x2e0>)

		if (requested_mode != active_mode) {
    5d52:	42b2      	cmp	r2, r6
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5d54:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    5d56:	4b82      	ldr	r3, [pc, #520]	; (5f60 <bt_le_sync+0x2c4>)
    5d58:	f040 8178 	bne.w	604c <bt_le_sync+0x3b0>
			goto cleanup;
		}

		if (rx_err) {
    5d5c:	4f85      	ldr	r7, [pc, #532]	; (5f74 <bt_le_sync+0x2d8>)
    5d5e:	683a      	ldr	r2, [r7, #0]
    5d60:	46bb      	mov	fp, r7
    5d62:	b11a      	cbz	r2, 5d6c <bt_le_sync+0xd0>
			status |= DMA_ERROR;
    5d64:	785a      	ldrb	r2, [r3, #1]
    5d66:	f042 0202 	orr.w	r2, r2, #2
    5d6a:	705a      	strb	r2, [r3, #1]
		}

		if (do_hop)
    5d6c:	7aeb      	ldrb	r3, [r5, #11]
    5d6e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5d72:	2b00      	cmp	r3, #0
    5d74:	f040 80b7 	bne.w	5ee6 <bt_le_sync+0x24a>
			goto rx_flush;

		/* No DMA transfer? */
		if (!rx_tc)
    5d78:	f8d9 3000 	ldr.w	r3, [r9]
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d0ab      	beq.n	5cd8 <bt_le_sync+0x3c>
			continue;

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
    5d80:	2234      	movs	r2, #52	; 0x34
    5d82:	a803      	add	r0, sp, #12
    5d84:	f7fe fa54 	bl	4230 <memset>
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5d88:	8820      	ldrh	r0, [r4, #0]
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5d8a:	6863      	ldr	r3, [r4, #4]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5d8c:	b280      	uxth	r0, r0
    5d8e:	3862      	subs	r0, #98	; 0x62
    5d90:	b2c0      	uxtb	r0, r0
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5d92:	9303      	str	r3, [sp, #12]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5d94:	f001 f83e 	bl	6e14 <btle_channel_index>
    5d98:	f04f 0830 	mov.w	r8, #48	; 0x30
    5d9c:	fb08 f800 	mul.w	r8, r8, r0
    5da0:	f8df a208 	ldr.w	sl, [pc, #520]	; 5fac <bt_le_sync+0x310>
    5da4:	eb0a 0308 	add.w	r3, sl, r8
    5da8:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5daa:	4b75      	ldr	r3, [pc, #468]	; (5f80 <bt_le_sync+0x2e4>)
    5dac:	f893 e000 	ldrb.w	lr, [r3]
					   | rxbuf1[i+1] << 16
    5db0:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5db2:	7898      	ldrb	r0, [r3, #2]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5db4:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5db6:	78d9      	ldrb	r1, [r3, #3]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5db8:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
					   | rxbuf1[i+2] << 8
    5dbc:	430a      	orrs	r2, r1
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5dbe:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    5dc2:	9300      	str	r3, [sp, #0]
    5dc4:	f002 f89c 	bl	7f00 <rbit>
    5dc8:	f85a 2008 	ldr.w	r2, [sl, r8]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5dcc:	9b00      	ldr	r3, [sp, #0]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5dce:	4050      	eors	r0, r2
		}

		unsigned len = (p[5] & 0x3f) + 2;
    5dd0:	f3c0 2a05 	ubfx	sl, r0, #8, #6
    5dd4:	f10a 0802 	add.w	r8, sl, #2
		if (len > 39)
    5dd8:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5ddc:	9004      	str	r0, [sp, #16]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5dde:	f200 8082 	bhi.w	5ee6 <bt_le_sync+0x24a>
			goto rx_flush;

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5de2:	f10a 0a08 	add.w	sl, sl, #8
    5de6:	ea4f 029a 	mov.w	r2, sl, lsr #2
		if (total_transfers < 11) {
    5dea:	2a0b      	cmp	r2, #11
    5dec:	d00d      	beq.n	5e0a <bt_le_sync+0x16e>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5dee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5df2:	4a64      	ldr	r2, [pc, #400]	; (5f84 <bt_le_sync+0x2e8>)
    5df4:	6812      	ldr	r2, [r2, #0]
    5df6:	429a      	cmp	r2, r3
    5df8:	d20b      	bcs.n	5e12 <bt_le_sync+0x176>
    5dfa:	f8db 1000 	ldr.w	r1, [fp]
    5dfe:	2900      	cmp	r1, #0
    5e00:	d0f7      	beq.n	5df2 <bt_le_sync+0x156>
    5e02:	e006      	b.n	5e12 <bt_le_sync+0x176>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5e04:	f8db 3000 	ldr.w	r3, [fp]
    5e08:	b91b      	cbnz	r3, 5e12 <bt_le_sync+0x176>
    5e0a:	4b5f      	ldr	r3, [pc, #380]	; (5f88 <bt_le_sync+0x2ec>)
    5e0c:	681b      	ldr	r3, [r3, #0]
    5e0e:	07d8      	lsls	r0, r3, #31
    5e10:	d4f8      	bmi.n	5e04 <bt_le_sync+0x168>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e12:	4b5e      	ldr	r3, [pc, #376]	; (5f8c <bt_le_sync+0x2f0>)

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5e14:	2061      	movs	r0, #97	; 0x61
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e16:	681a      	ldr	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e18:	f04f 0b04 	mov.w	fp, #4
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e1c:	f022 0201 	bic.w	r2, r2, #1
    5e20:	601a      	str	r2, [r3, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5e22:	f002 fa0c 	bl	823e <cc2400_strobe>

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5e26:	4a56      	ldr	r2, [pc, #344]	; (5f80 <bt_le_sync+0x2e4>)
    5e28:	f10b 0001 	add.w	r0, fp, #1
    5e2c:	f812 100b 	ldrb.w	r1, [r2, fp]
    5e30:	f10b 0c03 	add.w	ip, fp, #3
					   | rxbuf1[i+1] << 16
    5e34:	f812 e000 	ldrb.w	lr, [r2, r0]
    5e38:	f10b 0002 	add.w	r0, fp, #2
					   | rxbuf1[i+2] << 8
    5e3c:	5c10      	ldrb	r0, [r2, r0]
					   | rxbuf1[i+3] << 0;
    5e3e:	f812 c00c 	ldrb.w	ip, [r2, ip]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e42:	ea4f 02ab 	mov.w	r2, fp, asr #2
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5e46:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
					   | rxbuf1[i+2] << 8
    5e4a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e4e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    5e52:	9200      	str	r2, [sp, #0]
    5e54:	f002 f854 	bl	7f00 <rbit>
    5e58:	9a00      	ldr	r2, [sp, #0]
    5e5a:	ab10      	add	r3, sp, #64	; 0x40
    5e5c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5e60:	9b01      	ldr	r3, [sp, #4]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e62:	f10b 0b04 	add.w	fp, fp, #4
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e6a:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e6e:	ea82 0000 	eor.w	r0, r2, r0
    5e72:	f841 0c30 	str.w	r0, [r1, #-48]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e76:	d1d6      	bne.n	5e26 <bt_le_sync+0x18a>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    5e78:	6963      	ldr	r3, [r4, #20]
    5e7a:	b9eb      	cbnz	r3, 5eb8 <bt_le_sync+0x21c>
			if (calc_crc != wire_crc) // skip packets with a bad CRC
				goto rx_flush;
		}


		RXLED_SET;
    5e7c:	4b44      	ldr	r3, [pc, #272]	; (5f90 <bt_le_sync+0x2f4>)
    5e7e:	2210      	movs	r2, #16
    5e80:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5e82:	a803      	add	r0, sp, #12
    5e84:	69ab      	ldr	r3, [r5, #24]
    5e86:	4798      	blx	r3

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
    5e88:	4b42      	ldr	r3, [pc, #264]	; (5f94 <bt_le_sync+0x2f8>)
    5e8a:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
    5e8e:	f8c3 8000 	str.w	r8, [r3]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5e92:	a903      	add	r1, sp, #12
    5e94:	2001      	movs	r0, #1
    5e96:	f7fe fb33 	bl	4500 <enqueue>
		ISER0 = ISER0_ISE_USB;
    5e9a:	4b33      	ldr	r3, [pc, #204]	; (5f68 <bt_le_sync+0x2cc>)

		le.last_packet = CLK100NS;
    5e9c:	4a3e      	ldr	r2, [pc, #248]	; (5f98 <bt_le_sync+0x2fc>)
		packet_cb((uint8_t *)packet);

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
		enqueue(LE_PACKET, (uint8_t *)packet);
		ISER0 = ISER0_ISE_USB;
    5e9e:	f8c3 8000 	str.w	r8, [r3]

		le.last_packet = CLK100NS;
    5ea2:	4b3e      	ldr	r3, [pc, #248]	; (5f9c <bt_le_sync+0x300>)
    5ea4:	f640 4135 	movw	r1, #3125	; 0xc35
    5ea8:	681b      	ldr	r3, [r3, #0]
    5eaa:	6812      	ldr	r2, [r2, #0]
    5eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5eb0:	fb01 2303 	mla	r3, r1, r3, r2
    5eb4:	6463      	str	r3, [r4, #68]	; 0x44
    5eb6:	e016      	b.n	5ee6 <bt_le_sync+0x24a>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5eb8:	4b2a      	ldr	r3, [pc, #168]	; (5f64 <bt_le_sync+0x2c8>)
    5eba:	a904      	add	r1, sp, #16
    5ebc:	6918      	ldr	r0, [r3, #16]
    5ebe:	4642      	mov	r2, r8
    5ec0:	f001 f828 	bl	6f14 <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    5ec4:	ab10      	add	r3, sp, #64	; 0x40
    5ec6:	4453      	add	r3, sl
    5ec8:	f813 2c34 	ldrb.w	r2, [r3, #-52]
						 | (p[4+len+1] << 8)
    5ecc:	ab10      	add	r3, sp, #64	; 0x40
    5ece:	4443      	add	r3, r8
    5ed0:	f813 1c2f 	ldrb.w	r1, [r3, #-47]
    5ed4:	0209      	lsls	r1, r1, #8
    5ed6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
						 | (p[4+len+0] << 0);
    5eda:	f813 2c30 	ldrb.w	r2, [r3, #-48]
    5ede:	ea41 0302 	orr.w	r3, r1, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5ee2:	4298      	cmp	r0, r3
    5ee4:	d0ca      	beq.n	5e7c <bt_le_sync+0x1e0>

		le.last_packet = CLK100NS;

	rx_flush:
		// this might happen twice, but it's safe to do so
		cc2400_strobe(SFSON);
    5ee6:	2061      	movs	r0, #97	; 0x61
    5ee8:	f002 f9a9 	bl	823e <cc2400_strobe>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5eec:	4b27      	ldr	r3, [pc, #156]	; (5f8c <bt_le_sync+0x2f0>)
    5eee:	681a      	ldr	r2, [r3, #0]
    5ef0:	f022 0201 	bic.w	r2, r2, #1
    5ef4:	601a      	str	r2, [r3, #0]
		while (SSP1SR & SSPSR_RNE) {
    5ef6:	4b2a      	ldr	r3, [pc, #168]	; (5fa0 <bt_le_sync+0x304>)
    5ef8:	681b      	ldr	r3, [r3, #0]
    5efa:	0759      	lsls	r1, r3, #29
    5efc:	d502      	bpl.n	5f04 <bt_le_sync+0x268>
			u8 tmp = (u8)DIO_SSP_DR;
    5efe:	4b29      	ldr	r3, [pc, #164]	; (5fa4 <bt_le_sync+0x308>)
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	e7f8      	b.n	5ef6 <bt_le_sync+0x25a>
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    5f04:	4b25      	ldr	r3, [pc, #148]	; (5f9c <bt_le_sync+0x300>)
    5f06:	4a24      	ldr	r2, [pc, #144]	; (5f98 <bt_le_sync+0x2fc>)
    5f08:	681b      	ldr	r3, [r3, #0]
    5f0a:	6812      	ldr	r2, [r2, #0]
    5f0c:	f640 4135 	movw	r1, #3125	; 0xc35
    5f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5f14:	fb01 2303 	mla	r3, r1, r3, r2
		if (now < le.last_packet)
    5f18:	6c62      	ldr	r2, [r4, #68]	; 0x44
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f1a:	7e21      	ldrb	r1, [r4, #24]
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
    5f1c:	4293      	cmp	r3, r2
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f1e:	f1a1 0102 	sub.w	r1, r1, #2
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5f22:	bf38      	it	cc
    5f24:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5f28:	b2c9      	uxtb	r1, r1
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5f2a:	bf38      	it	cc
    5f2c:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5f30:	2901      	cmp	r1, #1
    5f32:	d803      	bhi.n	5f3c <bt_le_sync+0x2a0>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
			&& (now - le.last_packet > 50000000))
    5f34:	491c      	ldr	r1, [pc, #112]	; (5fa8 <bt_le_sync+0x30c>)
    5f36:	1a9b      	subs	r3, r3, r2
    5f38:	428b      	cmp	r3, r1
    5f3a:	d802      	bhi.n	5f42 <bt_le_sync+0x2a6>
			// jam finished
			|| (le_jam_count == 1)
    5f3c:	69eb      	ldr	r3, [r5, #28]
    5f3e:	2b01      	cmp	r3, #1
    5f40:	d14f      	bne.n	5fe2 <bt_le_sync+0x346>
			)
		{
			reset_le();
    5f42:	f7ff fd7f 	bl	5a44 <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    5f46:	4909      	ldr	r1, [pc, #36]	; (5f6c <bt_le_sync+0x2d0>)
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f48:	2300      	movs	r3, #0
			TXLED_CLR;
    5f4a:	f44f 7080 	mov.w	r0, #256	; 0x100
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f4e:	61eb      	str	r3, [r5, #28]
			TXLED_CLR;
    5f50:	6008      	str	r0, [r1, #0]

			if (jam_mode == JAM_ONCE) {
    5f52:	7ce9      	ldrb	r1, [r5, #19]
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f54:	4a02      	ldr	r2, [pc, #8]	; (5f60 <bt_le_sync+0x2c4>)
			TXLED_CLR;

			if (jam_mode == JAM_ONCE) {
    5f56:	2901      	cmp	r1, #1
    5f58:	d12a      	bne.n	5fb0 <bt_le_sync+0x314>
				jam_mode = JAM_NONE;
    5f5a:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    5f5c:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    5f5e:	e075      	b.n	604c <bt_le_sync+0x3b0>
    5f60:	10000a1c 	.word	0x10000a1c
    5f64:	10000448 	.word	0x10000448
    5f68:	e000e100 	.word	0xe000e100
    5f6c:	2009c03c 	.word	0x2009c03c
    5f70:	10000ba4 	.word	0x10000ba4
    5f74:	100010b8 	.word	0x100010b8
    5f78:	10000ba8 	.word	0x10000ba8
    5f7c:	10000baa 	.word	0x10000baa
    5f80:	10001085 	.word	0x10001085
    5f84:	50004104 	.word	0x50004104
    5f88:	50004110 	.word	0x50004110
    5f8c:	40030024 	.word	0x40030024
    5f90:	2009c038 	.word	0x2009c038
    5f94:	e000e180 	.word	0xe000e180
    5f98:	40004008 	.word	0x40004008
    5f9c:	10000bc4 	.word	0x10000bc4
    5fa0:	4003000c 	.word	0x4003000c
    5fa4:	40030008 	.word	0x40030008
    5fa8:	02faf080 	.word	0x02faf080
    5fac:	00008edc 	.word	0x00008edc
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    5fb0:	2e0a      	cmp	r6, #10
    5fb2:	d04b      	beq.n	604c <bt_le_sync+0x3b0>
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5fb4:	2301      	movs	r3, #1

			cc2400_strobe(SRFOFF);
    5fb6:	2064      	movs	r0, #100	; 0x64

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5fb8:	7623      	strb	r3, [r4, #24]

			cc2400_strobe(SRFOFF);
    5fba:	f002 f940 	bl	823e <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5fbe:	f002 f937 	bl	8230 <cc2400_status>
    5fc2:	0742      	lsls	r2, r0, #29
    5fc4:	d4fb      	bmi.n	5fbe <bt_le_sync+0x322>

			/* Retune */
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5fc6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    5fca:	b29b      	uxth	r3, r3
    5fcc:	b123      	cbz	r3, 5fd8 <bt_le_sync+0x33c>
    5fce:	4b26      	ldr	r3, [pc, #152]	; (6068 <bt_le_sync+0x3cc>)
    5fd0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    5fd4:	b29b      	uxth	r3, r3
    5fd6:	e001      	b.n	5fdc <bt_le_sync+0x340>
    5fd8:	f640 1362 	movw	r3, #2402	; 0x962
    5fdc:	8023      	strh	r3, [r4, #0]
			restart_jamming = 1;
    5fde:	2301      	movs	r3, #1
    5fe0:	62eb      	str	r3, [r5, #44]	; 0x2c
		}

		cc2400_set(SYNCL, le.syncl);
    5fe2:	202c      	movs	r0, #44	; 0x2c
    5fe4:	8961      	ldrh	r1, [r4, #10]
    5fe6:	f002 f880 	bl	80ea <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    5fea:	202d      	movs	r0, #45	; 0x2d
    5fec:	8921      	ldrh	r1, [r4, #8]
    5fee:	f002 f87c 	bl	80ea <cc2400_set>

		if (do_hop)
    5ff2:	7aeb      	ldrb	r3, [r5, #11]
    5ff4:	b10b      	cbz	r3, 5ffa <bt_le_sync+0x35e>
			hop();
    5ff6:	f7ff fa67 	bl	54c8 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    5ffa:	69eb      	ldr	r3, [r5, #28]
    5ffc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 6070 <bt_le_sync+0x3d4>
    6000:	2b00      	cmp	r3, #0
    6002:	dd07      	ble.n	6014 <bt_le_sync+0x378>
			le_jam();
    6004:	f7ff fa24 	bl	5450 <le_jam>
			--le_jam_count;
    6008:	f8d8 301c 	ldr.w	r3, [r8, #28]
    600c:	3b01      	subs	r3, #1
    600e:	f8c8 301c 	str.w	r3, [r8, #28]
    6012:	e016      	b.n	6042 <bt_le_sync+0x3a6>
		} else {
			/* RX mode */
			dma_init_le();
    6014:	f001 fa14 	bl	7440 <dma_init_le>
			dio_ssp_start();
    6018:	f001 fa5a 	bl	74d0 <dio_ssp_start>

			if (restart_jamming) {
    601c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    6020:	b143      	cbz	r3, 6034 <bt_le_sync+0x398>
				cc2400_rx_sync(rbit(le.access_address));
    6022:	6860      	ldr	r0, [r4, #4]
    6024:	f001 ff6c 	bl	7f00 <rbit>
    6028:	f7fe fa12 	bl	4450 <cc2400_rx_sync>
				restart_jamming = 0;
    602c:	2300      	movs	r3, #0
    602e:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
    6032:	e006      	b.n	6042 <bt_le_sync+0x3a6>
			} else {
				// wait till we're in FSLOCK before strobing RX
				while (!(cc2400_status() & FS_LOCK));
    6034:	f002 f8fc 	bl	8230 <cc2400_status>
    6038:	0743      	lsls	r3, r0, #29
    603a:	d5fb      	bpl.n	6034 <bt_le_sync+0x398>
				cc2400_strobe(SRX);
    603c:	2062      	movs	r0, #98	; 0x62
    603e:	f002 f8fe 	bl	823e <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6042:	2300      	movs	r3, #0
    6044:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    6048:	603b      	str	r3, [r7, #0]
    604a:	e645      	b.n	5cd8 <bt_le_sync+0x3c>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    604c:	4b07      	ldr	r3, [pc, #28]	; (606c <bt_le_sync+0x3d0>)
    604e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6052:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6054:	f7fe faae 	bl	45b4 <cc2400_idle>
	dio_ssp_stop();
    6058:	f001 fa60 	bl	751c <dio_ssp_stop>
	cs_trigger_disable();
    605c:	f001 f90a 	bl	7274 <cs_trigger_disable>
}
    6060:	b011      	add	sp, #68	; 0x44
    6062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6066:	bf00      	nop
    6068:	10000448 	.word	0x10000448
    606c:	e000e180 	.word	0xe000e180
    6070:	10000a1c 	.word	0x10000a1c

00006074 <bt_follow_le>:
			do_hop = 1;
		}
	}
}

void bt_follow_le() {
    6074:	b510      	push	{r4, lr}
	reset_le();
    6076:	f7ff fce5 	bl	5a44 <reset_le>
	packet_cb = connection_follow_cb;
    607a:	4c04      	ldr	r4, [pc, #16]	; (608c <bt_follow_le+0x18>)
    607c:	4b04      	ldr	r3, [pc, #16]	; (6090 <bt_follow_le+0x1c>)
	bt_le_sync(MODE_BT_FOLLOW_LE);
    607e:	2009      	movs	r0, #9
	}
}

void bt_follow_le() {
	reset_le();
	packet_cb = connection_follow_cb;
    6080:	61a3      	str	r3, [r4, #24]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    6082:	f7ff fe0b 	bl	5c9c <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    6086:	2300      	movs	r3, #0
    6088:	7463      	strb	r3, [r4, #17]
    608a:	bd10      	pop	{r4, pc}
    608c:	10000a1c 	.word	0x10000a1c
    6090:	00004765 	.word	0x00004765

00006094 <le_promisc_state>:
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    6094:	b570      	push	{r4, r5, r6, lr}
    6096:	b08e      	sub	sp, #56	; 0x38
    6098:	4606      	mov	r6, r0
    609a:	460d      	mov	r5, r1
    609c:	4614      	mov	r4, r2
	u8 buf[50] = { 0, };
    609e:	a801      	add	r0, sp, #4
    60a0:	2100      	movs	r1, #0
    60a2:	2232      	movs	r2, #50	; 0x32
    60a4:	f7fe f8c4 	bl	4230 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    60a8:	4629      	mov	r1, r5
    60aa:	2c31      	cmp	r4, #49	; 0x31
    60ac:	bf34      	ite	cc
    60ae:	4622      	movcc	r2, r4
    60b0:	2231      	movcs	r2, #49	; 0x31
    60b2:	f10d 0005 	add.w	r0, sp, #5
void le_promisc_state(u8 type, void *data, unsigned len) {
	u8 buf[50] = { 0, };
	if (len > 49)
		len = 49;

	buf[0] = type;
    60b6:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    60ba:	f002 fded 	bl	8c98 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    60be:	a901      	add	r1, sp, #4
    60c0:	2005      	movs	r0, #5
    60c2:	f7fe fa1d 	bl	4500 <enqueue>
}
    60c6:	b00e      	add	sp, #56	; 0x38
    60c8:	bd70      	pop	{r4, r5, r6, pc}
    60ca:	0000      	movs	r0, r0

000060cc <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    60cc:	b538      	push	{r3, r4, r5, lr}
	static u32 first_ts = 0;
	if (channel == 2404) {
    60ce:	4a31      	ldr	r2, [pc, #196]	; (6194 <promisc_recover_hop_increment+0xc8>)
    60d0:	f640 1364 	movw	r3, #2404	; 0x964
    60d4:	8811      	ldrh	r1, [r2, #0]
    60d6:	4c30      	ldr	r4, [pc, #192]	; (6198 <promisc_recover_hop_increment+0xcc>)
    60d8:	b289      	uxth	r1, r1
    60da:	4299      	cmp	r1, r3
    60dc:	d10d      	bne.n	60fa <promisc_recover_hop_increment+0x2e>
		first_ts = CLK100NS;
    60de:	4b2f      	ldr	r3, [pc, #188]	; (619c <promisc_recover_hop_increment+0xd0>)
    60e0:	4a2f      	ldr	r2, [pc, #188]	; (61a0 <promisc_recover_hop_increment+0xd4>)
    60e2:	681b      	ldr	r3, [r3, #0]
    60e4:	6812      	ldr	r2, [r2, #0]
    60e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    60ea:	f640 4135 	movw	r1, #3125	; 0xc35
    60ee:	fb01 2303 	mla	r3, r1, r3, r2
    60f2:	6323      	str	r3, [r4, #48]	; 0x30
		hop_direct_channel = 2406;
    60f4:	f640 1366 	movw	r3, #2406	; 0x966
    60f8:	e048      	b.n	618c <promisc_recover_hop_increment+0xc0>
		do_hop = 1;
	} else if (channel == 2406) {
    60fa:	8810      	ldrh	r0, [r2, #0]
    60fc:	f640 1166 	movw	r1, #2406	; 0x966
    6100:	b280      	uxth	r0, r0
    6102:	4288      	cmp	r0, r1
    6104:	d142      	bne.n	618c <promisc_recover_hop_increment+0xc0>
		u32 second_ts = CLK100NS;
    6106:	4b25      	ldr	r3, [pc, #148]	; (619c <promisc_recover_hop_increment+0xd0>)
    6108:	4925      	ldr	r1, [pc, #148]	; (61a0 <promisc_recover_hop_increment+0xd4>)
    610a:	681b      	ldr	r3, [r3, #0]
    610c:	6809      	ldr	r1, [r1, #0]
    610e:	f640 4035 	movw	r0, #3125	; 0xc35
    6112:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6116:	fb00 1303 	mla	r3, r0, r3, r1
		if (second_ts < first_ts)
    611a:	6b20      	ldr	r0, [r4, #48]	; 0x30
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    611c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
    611e:	4283      	cmp	r3, r0
			second_ts += 3276800000; // handle rollover
    6120:	bf3c      	itt	cc
    6122:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    6126:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    612a:	1a1b      	subs	r3, r3, r0
    612c:	f243 05d4 	movw	r5, #12500	; 0x30d4
    6130:	f641 006a 	movw	r0, #6250	; 0x186a
    6134:	fb00 3302 	mla	r3, r0, r2, r3
    6138:	4355      	muls	r5, r2
    613a:	fbb3 f3f5 	udiv	r3, r3, r5
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    613e:	2b24      	cmp	r3, #36	; 0x24
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6140:	4914      	ldr	r1, [pc, #80]	; (6194 <promisc_recover_hop_increment+0xc8>)
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    6142:	d821      	bhi.n	6188 <promisc_recover_hop_increment+0xbc>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6144:	4817      	ldr	r0, [pc, #92]	; (61a4 <promisc_recover_hop_increment+0xd8>)
			le.interval_timer = le.conn_interval / 2;
    6146:	0852      	lsrs	r2, r2, #1
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6148:	4403      	add	r3, r0
    614a:	f893 0870 	ldrb.w	r0, [r3, #2160]	; 0x870
			le.interval_timer = le.conn_interval / 2;
    614e:	840a      	strh	r2, [r1, #32]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6150:	7688      	strb	r0, [r1, #26]
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    6152:	2225      	movs	r2, #37	; 0x25
    6154:	3001      	adds	r0, #1
    6156:	fb90 f5f2 	sdiv	r5, r0, r2
    615a:	fb02 0215 	mls	r2, r2, r5, r0
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    615e:	2300      	movs	r3, #0
    6160:	848b      	strh	r3, [r1, #36]	; 0x24
			le.conn_epoch = 0;
    6162:	61cb      	str	r3, [r1, #28]
			do_hop = 0;
    6164:	72e3      	strb	r3, [r4, #11]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
    6166:	2003      	movs	r0, #3
			le.crc_verify = 0;
    6168:	614b      	str	r3, [r1, #20]
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    616a:	4b0f      	ldr	r3, [pc, #60]	; (61a8 <promisc_recover_hop_increment+0xdc>)
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    616c:	764a      	strb	r2, [r1, #25]
			le.link_state = LINK_CONNECTED;
    616e:	7608      	strb	r0, [r1, #24]
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    6170:	2201      	movs	r2, #1
    6172:	311a      	adds	r1, #26
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    6174:	61a3      	str	r3, [r4, #24]
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
    6176:	72a0      	strb	r0, [r4, #10]
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    6178:	f7ff ff8c 	bl	6094 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    617c:	7ce3      	ldrb	r3, [r4, #19]
    617e:	b143      	cbz	r3, 6192 <promisc_recover_hop_increment+0xc6>
				le_jam_count = JAM_COUNT_DEFAULT;
    6180:	4b05      	ldr	r3, [pc, #20]	; (6198 <promisc_recover_hop_increment+0xcc>)
    6182:	2228      	movs	r2, #40	; 0x28
    6184:	61da      	str	r2, [r3, #28]
    6186:	bd38      	pop	{r3, r4, r5, pc}

			return;
		}
		hop_direct_channel = 2404;
    6188:	f640 1364 	movw	r3, #2404	; 0x964
		do_hop = 1;
	}
	else {
		hop_direct_channel = 2404;
    618c:	81a3      	strh	r3, [r4, #12]
		do_hop = 1;
    618e:	2301      	movs	r3, #1
    6190:	72e3      	strb	r3, [r4, #11]
    6192:	bd38      	pop	{r3, r4, r5, pc}
    6194:	10000448 	.word	0x10000448
    6198:	10000a1c 	.word	0x10000a1c
    619c:	10000bc4 	.word	0x10000bc4
    61a0:	40004008 	.word	0x40004008
    61a4:	00008dec 	.word	0x00008dec
    61a8:	00004765 	.word	0x00004765

000061ac <promisc_recover_hop_interval>:
	}
}

void promisc_recover_hop_interval(u8 *packet) {
    61ac:	b538      	push	{r3, r4, r5, lr}
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    61ae:	4b25      	ldr	r3, [pc, #148]	; (6244 <promisc_recover_hop_interval+0x98>)
    61b0:	f640 4235 	movw	r2, #3125	; 0xc35
    61b4:	681c      	ldr	r4, [r3, #0]
    61b6:	4b24      	ldr	r3, [pc, #144]	; (6248 <promisc_recover_hop_interval+0x9c>)
    61b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
    61bc:	681b      	ldr	r3, [r3, #0]
	if (cur_clk < prev_clk)
    61be:	4d23      	ldr	r5, [pc, #140]	; (624c <promisc_recover_hop_interval+0xa0>)
}

void promisc_recover_hop_interval(u8 *packet) {
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    61c0:	fb02 3404 	mla	r4, r2, r4, r3
	if (cur_clk < prev_clk)
    61c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    61c6:	429c      	cmp	r4, r3
    61c8:	d205      	bcs.n	61d6 <promisc_recover_hop_interval+0x2a>
		cur_clk += 3267800000; // handle rollover
    61ca:	f104 4443 	add.w	r4, r4, #3271557120	; 0xc3000000
    61ce:	f5a4 1465 	sub.w	r4, r4, #3751936	; 0x394000
    61d2:	f5a4 54a2 	sub.w	r4, r4, #5184	; 0x1440
	u32 clk_diff = cur_clk - prev_clk;
    61d6:	1ae3      	subs	r3, r4, r3
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    61d8:	f246 12a7 	movw	r2, #24999	; 0x61a7
    61dc:	4293      	cmp	r3, r2
    61de:	d930      	bls.n	6242 <promisc_recover_hop_interval+0x96>
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    61e0:	4a1b      	ldr	r2, [pc, #108]	; (6250 <promisc_recover_hop_interval+0xa4>)
    61e2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    61e6:	428b      	cmp	r3, r1
		le_promisc.smallest_hop_interval = clk_diff;
    61e8:	bf38      	it	cc
    61ea:	f8c2 3100 	strcc.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    61ee:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    61f2:	4918      	ldr	r1, [pc, #96]	; (6254 <promisc_recover_hop_interval+0xa8>)
    61f4:	f502 3261 	add.w	r2, r2, #230400	; 0x38400
    61f8:	f202 3252 	addw	r2, r2, #850	; 0x352
    61fc:	fbb2 f2f1 	udiv	r2, r2, r1

	if (le.conn_interval == obsv_hop_interval) {
    6200:	4915      	ldr	r1, [pc, #84]	; (6258 <promisc_recover_hop_interval+0xac>)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6202:	b292      	uxth	r2, r2

	if (le.conn_interval == obsv_hop_interval) {
    6204:	8c48      	ldrh	r0, [r1, #34]	; 0x22
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6206:	4b12      	ldr	r3, [pc, #72]	; (6250 <promisc_recover_hop_interval+0xa4>)

	if (le.conn_interval == obsv_hop_interval) {
    6208:	4290      	cmp	r0, r2
    620a:	d115      	bne.n	6238 <promisc_recover_hop_interval+0x8c>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    620c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    6210:	3201      	adds	r2, #1
		if (le_promisc.consec_intervals == 5) {
    6212:	2a05      	cmp	r2, #5

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    6214:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    6218:	d112      	bne.n	6240 <promisc_recover_hop_interval+0x94>
			packet_cb = promisc_recover_hop_increment;
    621a:	4b10      	ldr	r3, [pc, #64]	; (625c <promisc_recover_hop_interval+0xb0>)
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    621c:	2002      	movs	r0, #2

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
    621e:	61ab      	str	r3, [r5, #24]
			hop_direct_channel = 2404;
    6220:	f640 1364 	movw	r3, #2404	; 0x964
    6224:	81ab      	strh	r3, [r5, #12]
			hop_mode = HOP_DIRECT;
    6226:	2304      	movs	r3, #4
    6228:	72ab      	strb	r3, [r5, #10]
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    622a:	3122      	adds	r1, #34	; 0x22
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    622c:	2301      	movs	r3, #1
			le_promisc_state(2, &le.conn_interval, 2);
    622e:	4602      	mov	r2, r0
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    6230:	72eb      	strb	r3, [r5, #11]
			le_promisc_state(2, &le.conn_interval, 2);
    6232:	f7ff ff2f 	bl	6094 <le_promisc_state>
    6236:	e003      	b.n	6240 <promisc_recover_hop_interval+0x94>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    6238:	844a      	strh	r2, [r1, #34]	; 0x22
		le_promisc.consec_intervals = 0;
    623a:	2200      	movs	r2, #0
    623c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    6240:	636c      	str	r4, [r5, #52]	; 0x34
    6242:	bd38      	pop	{r3, r4, r5, pc}
    6244:	10000bc4 	.word	0x10000bc4
    6248:	40004008 	.word	0x40004008
    624c:	10000a1c 	.word	0x10000a1c
    6250:	10000c08 	.word	0x10000c08
    6254:	00070ea4 	.word	0x00070ea4
    6258:	10000448 	.word	0x10000448
    625c:	000060cd 	.word	0x000060cd

00006260 <promisc_follow_cb>:
}

void promisc_follow_cb(u8 *packet) {
    6260:	b538      	push	{r3, r4, r5, lr}
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6262:	4c18      	ldr	r4, [pc, #96]	; (62c4 <promisc_follow_cb+0x64>)
	}

	prev_clk = cur_clk;
}

void promisc_follow_cb(u8 *packet) {
    6264:	4601      	mov	r1, r0
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6266:	6963      	ldr	r3, [r4, #20]
    6268:	bb53      	cbnz	r3, 62c0 <promisc_follow_cb+0x60>
    626a:	7903      	ldrb	r3, [r0, #4]
    626c:	2b01      	cmp	r3, #1
    626e:	d127      	bne.n	62c0 <promisc_follow_cb+0x60>
    6270:	7945      	ldrb	r5, [r0, #5]
    6272:	bb2d      	cbnz	r5, 62c0 <promisc_follow_cb+0x60>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    6274:	7a03      	ldrb	r3, [r0, #8]
    6276:	79c0      	ldrb	r0, [r0, #7]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6278:	2202      	movs	r2, #2
void promisc_follow_cb(u8 *packet) {
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    627a:	0200      	lsls	r0, r0, #8
    627c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    6280:	798b      	ldrb	r3, [r1, #6]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6282:	3104      	adds	r1, #4
    6284:	4318      	orrs	r0, r3
    6286:	f000 fe1b 	bl	6ec0 <btle_reverse_crc>
    628a:	462a      	mov	r2, r5
    628c:	60e0      	str	r0, [r4, #12]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    628e:	462b      	mov	r3, r5
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6290:	fa20 f103 	lsr.w	r1, r0, r3
    6294:	f1c3 0517 	rsb	r5, r3, #23
    6298:	f001 0101 	and.w	r1, r1, #1
    629c:	40a9      	lsls	r1, r5
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    629e:	3301      	adds	r3, #1
    62a0:	2b18      	cmp	r3, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    62a2:	ea42 0201 	orr.w	r2, r2, r1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    62a6:	d1f3      	bne.n	6290 <promisc_follow_cb+0x30>
    62a8:	6122      	str	r2, [r4, #16]
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
    62aa:	4b07      	ldr	r3, [pc, #28]	; (62c8 <promisc_follow_cb+0x68>)
    62ac:	4a07      	ldr	r2, [pc, #28]	; (62cc <promisc_follow_cb+0x6c>)
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    62ae:	2001      	movs	r0, #1
		packet_cb = promisc_recover_hop_interval;
    62b0:	619a      	str	r2, [r3, #24]
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    62b2:	6160      	str	r0, [r4, #20]
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    62b4:	4906      	ldr	r1, [pc, #24]	; (62d0 <promisc_follow_cb+0x70>)
    62b6:	2203      	movs	r2, #3
	}
}
    62b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    62bc:	f7ff beea 	b.w	6094 <le_promisc_state>
    62c0:	bd38      	pop	{r3, r4, r5, pc}
    62c2:	bf00      	nop
    62c4:	10000448 	.word	0x10000448
    62c8:	10000a1c 	.word	0x10000a1c
    62cc:	000061ad 	.word	0x000061ad
    62d0:	10000454 	.word	0x10000454

000062d4 <see_aa>:
	}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    62d4:	b530      	push	{r4, r5, lr}
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    62d6:	2200      	movs	r2, #0
		if (le_promisc.active_aa[i].aa == aa) {
    62d8:	4d14      	ldr	r5, [pc, #80]	; (632c <see_aa+0x58>)
    62da:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
    62de:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    62e2:	4281      	cmp	r1, r0
    62e4:	d102      	bne.n	62ec <see_aa+0x18>
			++le_promisc.active_aa[i].count;
    62e6:	685a      	ldr	r2, [r3, #4]
    62e8:	3201      	adds	r2, #1
    62ea:	e01c      	b.n	6326 <see_aa+0x52>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    62ec:	3201      	adds	r2, #1
    62ee:	2a20      	cmp	r2, #32
    62f0:	d1f2      	bne.n	62d8 <see_aa+0x4>
    62f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62f6:	4619      	mov	r1, r3
    62f8:	2200      	movs	r2, #0
    62fa:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    62fe:	6864      	ldr	r4, [r4, #4]
    6300:	428c      	cmp	r4, r1
    6302:	db05      	blt.n	6310 <see_aa+0x3c>
    6304:	2900      	cmp	r1, #0
    6306:	bfa8      	it	ge
    6308:	460c      	movge	r4, r1
    630a:	bfb8      	it	lt
    630c:	4613      	movlt	r3, r2
    630e:	e000      	b.n	6312 <see_aa+0x3e>
    6310:	4613      	mov	r3, r2
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    6312:	3201      	adds	r2, #1
    6314:	2a20      	cmp	r2, #32
    6316:	d001      	beq.n	631c <see_aa+0x48>
    6318:	4621      	mov	r1, r4
    631a:	e7ee      	b.n	62fa <see_aa+0x26>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    631c:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    6320:	2201      	movs	r2, #1
    6322:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    6326:	605a      	str	r2, [r3, #4]
    6328:	bd30      	pop	{r4, r5, pc}
    632a:	bf00      	nop
    632c:	10000c08 	.word	0x10000c08

00006330 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6334:	b095      	sub	sp, #84	; 0x54
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    6336:	2100      	movs	r1, #0
	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6338:	4680      	mov	r8, r0
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    633a:	2240      	movs	r2, #64	; 0x40
    633c:	a804      	add	r0, sp, #16
    633e:	f7fd ff77 	bl	4230 <memset>
    6342:	2301      	movs	r3, #1
    6344:	f88d 3010 	strb.w	r3, [sp, #16]
    6348:	f88d 3020 	strb.w	r3, [sp, #32]
    634c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    6350:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    6354:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6358:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    635c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    6360:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    6364:	ad14      	add	r5, sp, #80	; 0x50
    6366:	ac04      	add	r4, sp, #16
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];
    6368:	4e50      	ldr	r6, [pc, #320]	; (64ac <cb_le_promisc+0x17c>)
    636a:	4f51      	ldr	r7, [pc, #324]	; (64b0 <cb_le_promisc+0x180>)
    636c:	8830      	ldrh	r0, [r6, #0]
    636e:	b280      	uxth	r0, r0
    6370:	3862      	subs	r0, #98	; 0x62
    6372:	b2c0      	uxtb	r0, r0
    6374:	f000 fd4e 	bl	6e14 <btle_channel_index>
    6378:	5c3a      	ldrb	r2, [r7, r0]

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    637a:	2300      	movs	r3, #0
			desired[i][j] ^= whitening[idx];
    637c:	18b9      	adds	r1, r7, r2
    637e:	5ce0      	ldrb	r0, [r4, r3]
    6380:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    6384:	3201      	adds	r2, #1
	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
			desired[i][j] ^= whitening[idx];
    6386:	4041      	eors	r1, r0
    6388:	54e1      	strb	r1, [r4, r3]
			idx = (idx + 1) % sizeof(whitening);
    638a:	217f      	movs	r1, #127	; 0x7f

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    638c:	3301      	adds	r3, #1
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    638e:	fbb2 f0f1 	udiv	r0, r2, r1

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6392:	2b10      	cmp	r3, #16
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    6394:	fb01 2210 	mls	r2, r1, r0, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6398:	d1f0      	bne.n	637c <cb_le_promisc+0x4c>
    639a:	3410      	adds	r4, #16
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    639c:	42ac      	cmp	r4, r5
    639e:	d1e3      	bne.n	6368 <cb_le_promisc+0x38>
    63a0:	f108 0520 	add.w	r5, r8, #32
    63a4:	f508 783c 	add.w	r8, r8, #752	; 0x2f0
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
    63a8:	4b42      	ldr	r3, [pc, #264]	; (64b4 <cb_le_promisc+0x184>)
    63aa:	466c      	mov	r4, sp
    63ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    63ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    63b2:	2200      	movs	r2, #0
    63b4:	ab04      	add	r3, sp, #16
    63b6:	eb03 0182 	add.w	r1, r3, r2, lsl #2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    63ba:	2300      	movs	r3, #0
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
				if (unpacked[i+k] != desired[j][k]) {
    63bc:	f815 c003 	ldrb.w	ip, [r5, r3]
    63c0:	5cc8      	ldrb	r0, [r1, r3]
    63c2:	4584      	cmp	ip, r0
    63c4:	d002      	beq.n	63cc <cb_le_promisc+0x9c>
					ok[j] = 0;
    63c6:	2300      	movs	r3, #0
    63c8:	50a3      	str	r3, [r4, r2]
					break;
    63ca:	e002      	b.n	63d2 <cb_le_promisc+0xa2>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    63cc:	3301      	adds	r3, #1
    63ce:	2b10      	cmp	r3, #16
    63d0:	d1f4      	bne.n	63bc <cb_le_promisc+0x8c>
    63d2:	3204      	adds	r2, #4
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    63d4:	2a10      	cmp	r2, #16
    63d6:	d1ed      	bne.n	63b4 <cb_le_promisc+0x84>
    63d8:	2300      	movs	r3, #0
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
			if (ok[j]) {
    63da:	58e2      	ldr	r2, [r4, r3]
    63dc:	b91a      	cbnz	r2, 63e6 <cb_le_promisc+0xb6>
    63de:	3304      	adds	r3, #4
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    63e0:	2b10      	cmp	r3, #16
    63e2:	d1fa      	bne.n	63da <cb_le_promisc+0xaa>
    63e4:	e03e      	b.n	6464 <cb_le_promisc+0x134>
		// skip if no match
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    63e6:	8830      	ldrh	r0, [r6, #0]
    63e8:	b280      	uxth	r0, r0
    63ea:	3862      	subs	r0, #98	; 0x62
    63ec:	b2c0      	uxtb	r0, r0
    63ee:	f000 fd11 	bl	6e14 <btle_channel_index>
    63f2:	5c38      	ldrb	r0, [r7, r0]
		for (j = 0; j < 4+3+3; ++j) {
    63f4:	2300      	movs	r3, #0
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    63f6:	2100      	movs	r1, #0
    63f8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
    63fc:	460a      	mov	r2, r1
    63fe:	eb0c 0402 	add.w	r4, ip, r2
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
    6402:	2b03      	cmp	r3, #3
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
    6404:	f814 4c20 	ldrb.w	r4, [r4, #-32]
				if (j >= 4) { // unwhiten data bytes
    6408:	dd0c      	ble.n	6424 <cb_le_promisc+0xf4>
					bit ^= whitening[idx];
    640a:	eb07 0e00 	add.w	lr, r7, r0
    640e:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    6412:	3001      	adds	r0, #1
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
    6414:	ea84 040e 	eor.w	r4, r4, lr
					idx = (idx + 1) % sizeof(whitening);
    6418:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    641c:	fbb0 f9fe 	udiv	r9, r0, lr
    6420:	fb0e 0019 	mls	r0, lr, r9, r0
				}
				byte |= bit << k;
    6424:	4094      	lsls	r4, r2

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6426:	3201      	adds	r2, #1
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6428:	4321      	orrs	r1, r4

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    642a:	2a08      	cmp	r2, #8
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    642c:	b2c9      	uxtb	r1, r1

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    642e:	d1e6      	bne.n	63fe <cb_le_promisc+0xce>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    6430:	4c21      	ldr	r4, [pc, #132]	; (64b8 <cb_le_promisc+0x188>)
    6432:	6822      	ldr	r2, [r4, #0]
    6434:	54d1      	strb	r1, [r2, r3]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    6436:	3301      	adds	r3, #1
    6438:	2b0a      	cmp	r3, #10
    643a:	d1dc      	bne.n	63f6 <cb_le_promisc+0xc6>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    643c:	6823      	ldr	r3, [r4, #0]
    643e:	78d9      	ldrb	r1, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    6440:	6823      	ldr	r3, [r4, #0]
    6442:	789b      	ldrb	r3, [r3, #2]
				 (idle_rxbuf[1] <<  8) |
    6444:	6822      	ldr	r2, [r4, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    6446:	041b      	lsls	r3, r3, #16
				 (idle_rxbuf[1] <<  8) |
    6448:	7850      	ldrb	r0, [r2, #1]
				 (idle_rxbuf[0]);
    644a:	6822      	ldr	r2, [r4, #0]
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    644c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    6450:	7812      	ldrb	r2, [r2, #0]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    6452:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    6454:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    6458:	f7ff ff3c 	bl	62d4 <see_aa>

		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    645c:	6821      	ldr	r1, [r4, #0]
    645e:	2001      	movs	r0, #1
    6460:	f7fe f84e 	bl	4500 <enqueue>
    6464:	3501      	adds	r5, #1
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    6466:	4545      	cmp	r5, r8
    6468:	d19e      	bne.n	63a8 <cb_le_promisc+0x78>
    646a:	2300      	movs	r3, #0
    646c:	4a13      	ldr	r2, [pc, #76]	; (64bc <cb_le_promisc+0x18c>)
    646e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    6472:	6849      	ldr	r1, [r1, #4]
    6474:	2903      	cmp	r1, #3
    6476:	dd11      	ble.n	649c <cb_le_promisc+0x16c>
			le_set_access_address(le_promisc.active_aa[i].aa);
    6478:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    647c:	f7fe f88e 	bl	459c <le_set_access_address>
			data_cb = cb_follow_le;
    6480:	4b0f      	ldr	r3, [pc, #60]	; (64c0 <cb_le_promisc+0x190>)
    6482:	4a10      	ldr	r2, [pc, #64]	; (64c4 <cb_le_promisc+0x194>)
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    6484:	2400      	movs	r4, #0

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    6486:	629a      	str	r2, [r3, #40]	; 0x28
			packet_cb = promisc_follow_cb;
    6488:	4a0f      	ldr	r2, [pc, #60]	; (64c8 <cb_le_promisc+0x198>)
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    648a:	4620      	mov	r0, r4
	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
    648c:	619a      	str	r2, [r3, #24]
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    648e:	490f      	ldr	r1, [pc, #60]	; (64cc <cb_le_promisc+0x19c>)
    6490:	2204      	movs	r2, #4
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    6492:	6174      	str	r4, [r6, #20]
			le_promisc_state(0, &le.access_address, 4);
    6494:	f7ff fdfe 	bl	6094 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    6498:	4620      	mov	r0, r4
    649a:	e003      	b.n	64a4 <cb_le_promisc+0x174>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    649c:	3301      	adds	r3, #1
    649e:	2b20      	cmp	r3, #32
    64a0:	d1e4      	bne.n	646c <cb_le_promisc+0x13c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    64a2:	2001      	movs	r0, #1
}
    64a4:	b015      	add	sp, #84	; 0x54
    64a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    64aa:	bf00      	nop
    64ac:	10000448 	.word	0x10000448
    64b0:	00008dec 	.word	0x00008dec
    64b4:	00009684 	.word	0x00009684
    64b8:	10000d20 	.word	0x10000d20
    64bc:	10000c08 	.word	0x10000c08
    64c0:	10000a1c 	.word	0x10000a1c
    64c4:	00004661 	.word	0x00004661
    64c8:	00006261 	.word	0x00006261
    64cc:	1000044c 	.word	0x1000044c

000064d0 <bt_promisc_le>:

void bt_promisc_le() {
    64d0:	b538      	push	{r3, r4, r5, lr}
	while (requested_mode == MODE_BT_PROMISC_LE) {
    64d2:	4d16      	ldr	r5, [pc, #88]	; (652c <bt_promisc_le+0x5c>)
    64d4:	7cab      	ldrb	r3, [r5, #18]
    64d6:	2b0a      	cmp	r3, #10
    64d8:	d126      	bne.n	6528 <bt_promisc_le+0x58>
		reset_le_promisc();

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    64da:	4c15      	ldr	r4, [pc, #84]	; (6530 <bt_promisc_le+0x60>)
	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
		reset_le_promisc();
    64dc:	f7ff fadc 	bl	5a98 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    64e0:	8823      	ldrh	r3, [r4, #0]
    64e2:	07da      	lsls	r2, r3, #31
			channel = 2440;
    64e4:	bf44      	itt	mi
    64e6:	f640 1388 	movwmi	r3, #2440	; 0x988
    64ea:	8023      	strhmi	r3, [r4, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    64ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
    64ee:	b94b      	cbnz	r3, 6504 <bt_promisc_le+0x34>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
    64f0:	4b0f      	ldr	r3, [pc, #60]	; (6530 <bt_promisc_le+0x60>)
    64f2:	8818      	ldrh	r0, [r3, #0]
    64f4:	b280      	uxth	r0, r0
    64f6:	f000 fe75 	bl	71e4 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    64fa:	4b0e      	ldr	r3, [pc, #56]	; (6534 <bt_promisc_le+0x64>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    64fc:	200a      	movs	r0, #10

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
			data_cb = cb_le_promisc;
    64fe:	62ab      	str	r3, [r5, #40]	; 0x28
			bt_generic_le(MODE_BT_PROMISC_LE);
    6500:	f7ff fada 	bl	5ab8 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    6504:	7cad      	ldrb	r5, [r5, #18]
    6506:	b2ed      	uxtb	r5, r5
    6508:	2d0a      	cmp	r5, #10
    650a:	d10d      	bne.n	6528 <bt_promisc_le+0x58>
			break;

		le_promisc_state(0, &le.access_address, 4);
    650c:	2000      	movs	r0, #0
    650e:	490a      	ldr	r1, [pc, #40]	; (6538 <bt_promisc_le+0x68>)
    6510:	2204      	movs	r2, #4
    6512:	f7ff fdbf 	bl	6094 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    6516:	4a09      	ldr	r2, [pc, #36]	; (653c <bt_promisc_le+0x6c>)
    6518:	4b04      	ldr	r3, [pc, #16]	; (652c <bt_promisc_le+0x5c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    651a:	4628      	mov	r0, r5
		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
			break;

		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
    651c:	619a      	str	r2, [r3, #24]
		le.crc_verify = 0;
    651e:	2300      	movs	r3, #0
    6520:	6163      	str	r3, [r4, #20]
		bt_le_sync(MODE_BT_PROMISC_LE);
    6522:	f7ff fbbb 	bl	5c9c <bt_le_sync>
    6526:	e7d4      	b.n	64d2 <bt_promisc_le+0x2>
    6528:	bd38      	pop	{r3, r4, r5, pc}
    652a:	bf00      	nop
    652c:	10000a1c 	.word	0x10000a1c
    6530:	10000448 	.word	0x10000448
    6534:	00006331 	.word	0x00006331
    6538:	1000044c 	.word	0x1000044c
    653c:	00006261 	.word	0x00006261

00006540 <bt_slave_le>:
	}
}

void bt_slave_le(u16 tx_pwr) {
    6540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6544:	b088      	sub	sp, #32
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    6546:	4c32      	ldr	r4, [pc, #200]	; (6610 <bt_slave_le+0xd0>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}

void bt_slave_le(u16 tx_pwr) {
    6548:	4680      	mov	r8, r0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    654a:	466d      	mov	r5, sp
    654c:	f104 0320 	add.w	r3, r4, #32
    6550:	466f      	mov	r7, sp
    6552:	6820      	ldr	r0, [r4, #0]
    6554:	6861      	ldr	r1, [r4, #4]
    6556:	462e      	mov	r6, r5
    6558:	c603      	stmia	r6!, {r0, r1}
    655a:	3408      	adds	r4, #8
    655c:	429c      	cmp	r4, r3
    655e:	4635      	mov	r5, r6
    6560:	d1f7      	bne.n	6552 <bt_slave_le+0x12>
    6562:	2405      	movs	r4, #5

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];
    6564:	4a2b      	ldr	r2, [pc, #172]	; (6614 <bt_slave_le+0xd4>)
    6566:	1b3b      	subs	r3, r7, r4
    6568:	5ca2      	ldrb	r2, [r4, r2]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    656a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
		adv_ind[i+2] = slave_mac_address[5-i];
    656e:	71da      	strb	r2, [r3, #7]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    6570:	d2f8      	bcs.n	6564 <bt_slave_le+0x24>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    6572:	4b29      	ldr	r3, [pc, #164]	; (6618 <bt_slave_le+0xd8>)
    6574:	4669      	mov	r1, sp
    6576:	6918      	ldr	r0, [r3, #16]
    6578:	221d      	movs	r2, #29
    657a:	f000 fc85 	bl	6e88 <btle_calc_crc>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    657e:	0a03      	lsrs	r3, r0, #8
	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    6580:	f88d 001d 	strb.w	r0, [sp, #29]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6584:	0c00      	lsrs	r0, r0, #16
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    6586:	f88d 301e 	strb.w	r3, [sp, #30]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    658a:	f88d 001f 	strb.w	r0, [sp, #31]

	clkn_start();
    658e:	f000 fec1 	bl	7314 <clkn_start>

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE 
    6592:	4c22      	ldr	r4, [pc, #136]	; (661c <bt_slave_le+0xdc>)
    6594:	7ca3      	ldrb	r3, [r4, #18]
    6596:	2b0c      	cmp	r3, #12
    6598:	d11f      	bne.n	65da <bt_slave_le+0x9a>
			|| requested_mode == MODE_BT_SLAVE_LE_P3
			|| requested_mode == MODE_BT_SLAVE_LE_P4
			|| requested_mode == MODE_BT_SLAVE_LE_P5
			|| requested_mode == MODE_BT_SLAVE_LE_P6
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
    659a:	7ca2      	ldrb	r2, [r4, #18]
    659c:	7c63      	ldrb	r3, [r4, #17]
    659e:	429a      	cmp	r2, r3
    65a0:	d133      	bne.n	660a <bt_slave_le+0xca>
		ICER0 = ICER0_ICE_USB;
    65a2:	4b1f      	ldr	r3, [pc, #124]	; (6620 <bt_slave_le+0xe0>)
    65a4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
		ICER0 = ICER0_ICE_DMA;
    65a8:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
			|| requested_mode == MODE_BT_SLAVE_LE_P4
			|| requested_mode == MODE_BT_SLAVE_LE_P5
			|| requested_mode == MODE_BT_SLAVE_LE_P6
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
    65ac:	601d      	str	r5, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind, tx_pwr);
    65ae:	466a      	mov	r2, sp
			|| requested_mode == MODE_BT_SLAVE_LE_P5
			|| requested_mode == MODE_BT_SLAVE_LE_P6
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
		if (requested_mode != mode) break;
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
    65b0:	601c      	str	r4, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind, tx_pwr);
    65b2:	481c      	ldr	r0, [pc, #112]	; (6624 <bt_slave_le+0xe4>)
    65b4:	4643      	mov	r3, r8
    65b6:	2120      	movs	r1, #32
    65b8:	f7fe fe74 	bl	52a4 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    65bc:	4b1a      	ldr	r3, [pc, #104]	; (6628 <bt_slave_le+0xe8>)
    65be:	601d      	str	r5, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    65c0:	601c      	str	r4, [r3, #0]
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    65c2:	4b1a      	ldr	r3, [pc, #104]	; (662c <bt_slave_le+0xec>)
    65c4:	681a      	ldr	r2, [r3, #0]
    65c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    65ca:	f502 72a0 	add.w	r2, r2, #320	; 0x140
	// handle clkn overflow
	if (stop_at >= ((uint32_t)1<<28)) {
		stop_at -= ((uint32_t)1<<28);
		while ((clkn & 0xffffff) >= now || (clkn & 0xffffff) < stop_at);
	} else {
		while ((clkn & 0xffffff) < stop_at);
    65ce:	6819      	ldr	r1, [r3, #0]
    65d0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    65d4:	4291      	cmp	r1, r2
    65d6:	d3fa      	bcc.n	65ce <bt_slave_le+0x8e>
    65d8:	e7db      	b.n	6592 <bt_slave_le+0x52>

	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE 
			|| requested_mode == MODE_BT_SLAVE_LE_P0
    65da:	7ca3      	ldrb	r3, [r4, #18]
    65dc:	2b11      	cmp	r3, #17
    65de:	d0dc      	beq.n	659a <bt_slave_le+0x5a>
			|| requested_mode == MODE_BT_SLAVE_LE_P1
    65e0:	7ca3      	ldrb	r3, [r4, #18]
    65e2:	2b12      	cmp	r3, #18
    65e4:	d0d9      	beq.n	659a <bt_slave_le+0x5a>
			|| requested_mode == MODE_BT_SLAVE_LE_P2
    65e6:	7ca3      	ldrb	r3, [r4, #18]
    65e8:	2b13      	cmp	r3, #19
    65ea:	d0d6      	beq.n	659a <bt_slave_le+0x5a>
			|| requested_mode == MODE_BT_SLAVE_LE_P3
    65ec:	7ca3      	ldrb	r3, [r4, #18]
    65ee:	2b14      	cmp	r3, #20
    65f0:	d0d3      	beq.n	659a <bt_slave_le+0x5a>
			|| requested_mode == MODE_BT_SLAVE_LE_P4
    65f2:	7ca3      	ldrb	r3, [r4, #18]
    65f4:	2b15      	cmp	r3, #21
    65f6:	d0d0      	beq.n	659a <bt_slave_le+0x5a>
			|| requested_mode == MODE_BT_SLAVE_LE_P5
    65f8:	7ca3      	ldrb	r3, [r4, #18]
    65fa:	2b16      	cmp	r3, #22
    65fc:	d0cd      	beq.n	659a <bt_slave_le+0x5a>
			|| requested_mode == MODE_BT_SLAVE_LE_P6
    65fe:	7ca3      	ldrb	r3, [r4, #18]
    6600:	2b17      	cmp	r3, #23
    6602:	d0ca      	beq.n	659a <bt_slave_le+0x5a>
			|| requested_mode == MODE_BT_SLAVE_LE_P7) {
    6604:	7ca3      	ldrb	r3, [r4, #18]
    6606:	2b18      	cmp	r3, #24
    6608:	d0c7      	beq.n	659a <bt_slave_le+0x5a>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind, tx_pwr);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    660a:	b008      	add	sp, #32
    660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6610:	00009694 	.word	0x00009694
    6614:	10000a3c 	.word	0x10000a3c
    6618:	10000448 	.word	0x10000448
    661c:	10000a1c 	.word	0x10000a1c
    6620:	e000e180 	.word	0xe000e180
    6624:	8e89bed6 	.word	0x8e89bed6
    6628:	e000e100 	.word	0xe000e100
    662c:	10000bc4 	.word	0x10000bc4

00006630 <rx_generic_sync>:

void rx_generic_sync(void) {
    6630:	b500      	push	{lr}
    6632:	b08b      	sub	sp, #44	; 0x2c
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6634:	202d      	movs	r0, #45	; 0x2d
    6636:	f001 fd4f 	bl	80d8 <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    663a:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    663c:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    6640:	202c      	movs	r0, #44	; 0x2c

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
	buf[0] = (reg_val >> 8) & 0xFF;
    6642:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = reg_val & 0xFF;
	reg_val = cc2400_get(SYNCL);
    6646:	f001 fd47 	bl	80d8 <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    664a:	0a03      	lsrs	r3, r0, #8
    664c:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    6650:	f88d 0007 	strb.w	r0, [sp, #7]

	queue_init();
    6654:	f000 fcd8 	bl	7008 <queue_init>
	clkn_start();
    6658:	f000 fe5c 	bl	7314 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    665c:	f001 fde8 	bl	8230 <cc2400_status>
    6660:	0643      	lsls	r3, r0, #25
    6662:	d5fb      	bpl.n	665c <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6664:	2061      	movs	r0, #97	; 0x61
    6666:	f001 fdea 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    666a:	f001 fde1 	bl	8230 <cc2400_status>
    666e:	0740      	lsls	r0, r0, #29
    6670:	d5fb      	bpl.n	666a <rx_generic_sync+0x3a>
	RXLED_SET;
    6672:	4b14      	ldr	r3, [pc, #80]	; (66c4 <rx_generic_sync+0x94>)
    6674:	2210      	movs	r2, #16
    6676:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6678:	2280      	movs	r2, #128	; 0x80
    667a:	621a      	str	r2, [r3, #32]
		HGM_SET;
    667c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6680:	621a      	str	r2, [r3, #32]
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6682:	200e      	movs	r0, #14
    6684:	f001 fd28 	bl	80d8 <cc2400_get>
    6688:	f000 001f 	and.w	r0, r0, #31
    668c:	280f      	cmp	r0, #15
    668e:	d1f8      	bne.n	6682 <rx_generic_sync+0x52>
		cc2400_strobe(SRX);
    6690:	2062      	movs	r0, #98	; 0x62
    6692:	f001 fdd4 	bl	823e <cc2400_strobe>
		USRLED_CLR;
    6696:	4b0c      	ldr	r3, [pc, #48]	; (66c8 <rx_generic_sync+0x98>)
    6698:	2202      	movs	r2, #2
    669a:	601a      	str	r2, [r3, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    669c:	f001 fdc8 	bl	8230 <cc2400_status>
    66a0:	06c1      	lsls	r1, r0, #27
    66a2:	d5fb      	bpl.n	669c <rx_generic_sync+0x6c>
		USRLED_SET;
    66a4:	4b07      	ldr	r3, [pc, #28]	; (66c4 <rx_generic_sync+0x94>)
    66a6:	2202      	movs	r2, #2
    66a8:	601a      	str	r2, [r3, #0]

		cc2400_fifo_read(len, buf+4);
    66aa:	a902      	add	r1, sp, #8
    66ac:	2020      	movs	r0, #32
    66ae:	f001 fd77 	bl	81a0 <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    66b2:	a901      	add	r1, sp, #4
    66b4:	2000      	movs	r0, #0
    66b6:	f7fd ff23 	bl	4500 <enqueue>
		handle_usb(clkn);
    66ba:	4b04      	ldr	r3, [pc, #16]	; (66cc <rx_generic_sync+0x9c>)
    66bc:	6818      	ldr	r0, [r3, #0]
    66be:	f000 fd05 	bl	70cc <handle_usb>
	}
    66c2:	e7de      	b.n	6682 <rx_generic_sync+0x52>
    66c4:	2009c038 	.word	0x2009c038
    66c8:	2009c03c 	.word	0x2009c03c
    66cc:	10000bc4 	.word	0x10000bc4

000066d0 <rx_generic>:
}

void rx_generic(void) {
    66d0:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    66d2:	2020      	movs	r0, #32
    66d4:	f001 fd00 	bl	80d8 <cc2400_get>
    66d8:	b108      	cbz	r0, 66de <rx_generic+0xe>
		rx_generic_sync();
    66da:	f7ff ffa9 	bl	6630 <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    66de:	4b03      	ldr	r3, [pc, #12]	; (66ec <rx_generic+0x1c>)
    66e0:	2203      	movs	r2, #3
    66e2:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    66e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
		rx_generic_sync();
	} else {
		modulation = MOD_NONE;
		bt_stream_rx();
    66e8:	f7fe bfbe 	b.w	5668 <bt_stream_rx>
    66ec:	10000a1c 	.word	0x10000a1c

000066f0 <tx_generic>:
	}
}

void tx_generic(void) {
    66f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;
    66f4:	4d35      	ldr	r5, [pc, #212]	; (67cc <tx_generic+0xdc>)

	mode = MODE_TX_GENERIC;
    66f6:	2310      	movs	r3, #16

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    66f8:	202d      	movs	r0, #45	; 0x2d
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    66fa:	7c6e      	ldrb	r6, [r5, #17]

	mode = MODE_TX_GENERIC;
    66fc:	746b      	strb	r3, [r5, #17]

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    66fe:	f001 fceb 	bl	80d8 <cc2400_get>
    6702:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    6704:	202c      	movs	r0, #44	; 0x2c
    6706:	f001 fce7 	bl	80d8 <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    670a:	4c31      	ldr	r4, [pc, #196]	; (67d0 <tx_generic+0xe0>)

	mode = MODE_TX_GENERIC;

	// Save existing syncword
	synch = cc2400_get(SYNCH);
	syncl = cc2400_get(SYNCL);
    670c:	4607      	mov	r7, r0

	cc2400_set(SYNCH, tx_pkt.synch);
    670e:	8821      	ldrh	r1, [r4, #0]
    6710:	202d      	movs	r0, #45	; 0x2d
    6712:	f001 fcea 	bl	80ea <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    6716:	202c      	movs	r0, #44	; 0x2c
    6718:	8861      	ldrh	r1, [r4, #2]
    671a:	f001 fce6 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    671e:	2003      	movs	r0, #3
    6720:	2157      	movs	r1, #87	; 0x57
    6722:	f001 fce2 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    6726:	2014      	movs	r0, #20
    6728:	f241 314b 	movw	r1, #4939	; 0x134b
    672c:	f001 fcdd 	bl	80ea <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    6730:	2020      	movs	r0, #32
    6732:	f640 7161 	movw	r1, #3937	; 0xf61
    6736:	f001 fcd8 	bl	80ea <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    673a:	2002      	movs	r0, #2
    673c:	88a1      	ldrh	r1, [r4, #4]
    673e:	f001 fcd4 	bl	80ea <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    6742:	2005      	movs	r0, #5
    6744:	79e1      	ldrb	r1, [r4, #7]
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    6746:	b2f6      	uxtb	r6, r6
	cc2400_set(SYNCL, tx_pkt.syncl);
	cc2400_set(MDMCTRL, 0x0057);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(GRMDM, 0x0f61);
	cc2400_set(FSDIV, tx_pkt.channel);
	cc2400_set(FREND, tx_pkt.pa_level);
    6748:	f001 fccf 	bl	80ea <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    674c:	f001 fd70 	bl	8230 <cc2400_status>
    6750:	0640      	lsls	r0, r0, #25
    6752:	d5fb      	bpl.n	674c <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6754:	2061      	movs	r0, #97	; 0x61
    6756:	f001 fd72 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    675a:	f001 fd69 	bl	8230 <cc2400_status>
    675e:	0741      	lsls	r1, r0, #29
    6760:	d5fb      	bpl.n	675a <tx_generic+0x6a>
	TXLED_SET;
    6762:	4b1c      	ldr	r3, [pc, #112]	; (67d4 <tx_generic+0xe4>)
    6764:	f44f 7280 	mov.w	r2, #256	; 0x100
    6768:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    676a:	2280      	movs	r2, #128	; 0x80
    676c:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    676e:	200e      	movs	r0, #14
    6770:	f001 fcb2 	bl	80d8 <cc2400_get>
    6774:	f000 001f 	and.w	r0, r0, #31
    6778:	280f      	cmp	r0, #15
    677a:	d1f8      	bne.n	676e <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    677c:	79a0      	ldrb	r0, [r4, #6]
    677e:	4916      	ldr	r1, [pc, #88]	; (67d8 <tx_generic+0xe8>)
    6780:	f001 fcc6 	bl	8110 <cc2400_fifo_write>
	cc2400_strobe(STX);
    6784:	2063      	movs	r0, #99	; 0x63
    6786:	f001 fd5a 	bl	823e <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    678a:	200e      	movs	r0, #14
    678c:	f001 fca4 	bl	80d8 <cc2400_get>
    6790:	f000 001f 	and.w	r0, r0, #31
    6794:	280f      	cmp	r0, #15
    6796:	d1f8      	bne.n	678a <tx_generic+0x9a>
	TXLED_CLR;
    6798:	4b10      	ldr	r3, [pc, #64]	; (67dc <tx_generic+0xec>)
    679a:	f44f 7280 	mov.w	r2, #256	; 0x100
    679e:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    67a0:	2064      	movs	r0, #100	; 0x64
    67a2:	f001 fd4c 	bl	823e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    67a6:	f001 fd43 	bl	8230 <cc2400_status>
    67aa:	0742      	lsls	r2, r0, #29
    67ac:	d4fb      	bmi.n	67a6 <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    67ae:	4b0c      	ldr	r3, [pc, #48]	; (67e0 <tx_generic+0xf0>)
    67b0:	2280      	movs	r2, #128	; 0x80
    67b2:	601a      	str	r2, [r3, #0]
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    67b4:	202d      	movs	r0, #45	; 0x2d
    67b6:	4641      	mov	r1, r8
    67b8:	f001 fc97 	bl	80ea <cc2400_set>
	cc2400_set(SYNCL, syncl);
    67bc:	202c      	movs	r0, #44	; 0x2c
    67be:	4639      	mov	r1, r7
    67c0:	f001 fc93 	bl	80ea <cc2400_set>
	requested_mode = prev_mode;
    67c4:	74ae      	strb	r6, [r5, #18]
    67c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67ca:	bf00      	nop
    67cc:	10000a1c 	.word	0x10000a1c
    67d0:	10000bc8 	.word	0x10000bc8
    67d4:	2009c038 	.word	0x2009c038
    67d8:	10000bd0 	.word	0x10000bd0
    67dc:	2009c03c 	.word	0x2009c03c
    67e0:	2009c05c 	.word	0x2009c05c

000067e4 <specan>:
}

/* spectrum analysis */
void specan()
{
    67e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67e8:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    67ea:	4b3d      	ldr	r3, [pc, #244]	; (68e0 <specan+0xfc>)
    67ec:	2210      	movs	r2, #16
    67ee:	601a      	str	r2, [r3, #0]

	queue_init();
    67f0:	f000 fc0a 	bl	7008 <queue_init>
	clkn_start();
    67f4:	f000 fd8e 	bl	7314 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    67f8:	4b3a      	ldr	r3, [pc, #232]	; (68e4 <specan+0x100>)
    67fa:	2280      	movs	r2, #128	; 0x80
    67fc:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    67fe:	2012      	movs	r0, #18
    6800:	f642 3122 	movw	r1, #11042	; 0x2b22
    6804:	f001 fc71 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6808:	2014      	movs	r0, #20
    680a:	f241 314b 	movw	r1, #4939	; 0x134b
    680e:	f001 fc6c 	bl	80ea <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6812:	2020      	movs	r0, #32
    6814:	f240 1101 	movw	r1, #257	; 0x101
    6818:	f001 fc67 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    681c:	2003      	movs	r0, #3
    681e:	2129      	movs	r1, #41	; 0x29
    6820:	f001 fc63 	bl	80ea <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    6824:	f001 fd04 	bl	8230 <cc2400_status>
    6828:	0643      	lsls	r3, r0, #25
    682a:	d5fb      	bpl.n	6824 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    682c:	f001 fd00 	bl	8230 <cc2400_status>
    6830:	f000 0004 	and.w	r0, r0, #4
    6834:	f000 05ff 	and.w	r5, r0, #255	; 0xff
    6838:	2800      	cmp	r0, #0
    683a:	d1f7      	bne.n	682c <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    683c:	4b2a      	ldr	r3, [pc, #168]	; (68e8 <specan+0x104>)
    683e:	7c9b      	ldrb	r3, [r3, #18]
    6840:	2b04      	cmp	r3, #4
    6842:	d147      	bne.n	68d4 <specan+0xf0>
		for (f = low_freq; f < high_freq + 1; f++) {
    6844:	4b29      	ldr	r3, [pc, #164]	; (68ec <specan+0x108>)
    6846:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
    684a:	4698      	mov	r8, r3
    684c:	b2a4      	uxth	r4, r4
    684e:	f8b8 304e 	ldrh.w	r3, [r8, #78]	; 0x4e
    6852:	b29b      	uxth	r3, r3
    6854:	42a3      	cmp	r3, r4
    6856:	dbf1      	blt.n	683c <specan+0x58>
    6858:	1e61      	subs	r1, r4, #1
			cc2400_set(FSDIV, f - 1);
    685a:	2002      	movs	r0, #2
    685c:	b289      	uxth	r1, r1
    685e:	f001 fc44 	bl	80ea <cc2400_set>
			cc2400_strobe(SFSON);
    6862:	2061      	movs	r0, #97	; 0x61
    6864:	f001 fceb 	bl	823e <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6868:	f001 fce2 	bl	8230 <cc2400_status>
    686c:	0747      	lsls	r7, r0, #29
    686e:	d5fb      	bpl.n	6868 <specan+0x84>
			cc2400_strobe(SRX);
    6870:	2062      	movs	r0, #98	; 0x62
    6872:	f001 fce4 	bl	823e <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    6876:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    687a:	9300      	str	r3, [sp, #0]
    687c:	9e00      	ldr	r6, [sp, #0]
    687e:	3e01      	subs	r6, #1
    6880:	9600      	str	r6, [sp, #0]
    6882:	2e00      	cmp	r6, #0
    6884:	d1fa      	bne.n	687c <specan+0x98>
			buf[3 * i] = (f >> 8) & 0xFF;
    6886:	ab0e      	add	r3, sp, #56	; 0x38
    6888:	2703      	movs	r7, #3
    688a:	fb07 3705 	mla	r7, r7, r5, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    688e:	2006      	movs	r0, #6
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
    6890:	0a23      	lsrs	r3, r4, #8
    6892:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    6896:	f807 4c33 	strb.w	r4, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    689a:	f001 fc1d 	bl	80d8 <cc2400_get>
			i++;
    689e:	3501      	adds	r5, #1
    68a0:	b2ed      	uxtb	r5, r5

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    68a2:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
    68a4:	2d10      	cmp	r5, #16

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    68a6:	f807 0c32 	strb.w	r0, [r7, #-50]
			i++;
			if (i == 16) {
    68aa:	d109      	bne.n	68c0 <specan+0xdc>
				enqueue(SPECAN, buf);
    68ac:	2004      	movs	r0, #4
    68ae:	eb0d 0100 	add.w	r1, sp, r0
    68b2:	f7fd fe25 	bl	4500 <enqueue>
				i = 0;

				handle_usb(clkn);
    68b6:	4b0e      	ldr	r3, [pc, #56]	; (68f0 <specan+0x10c>)
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				enqueue(SPECAN, buf);
				i = 0;
    68b8:	4635      	mov	r5, r6

				handle_usb(clkn);
    68ba:	6818      	ldr	r0, [r3, #0]
    68bc:	f000 fc06 	bl	70cc <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    68c0:	2064      	movs	r0, #100	; 0x64
    68c2:	f001 fcbc 	bl	823e <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    68c6:	f001 fcb3 	bl	8230 <cc2400_status>
    68ca:	0746      	lsls	r6, r0, #29
    68cc:	d4fb      	bmi.n	68c6 <specan+0xe2>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    68ce:	3401      	adds	r4, #1
    68d0:	b2a4      	uxth	r4, r4
    68d2:	e7bc      	b.n	684e <specan+0x6a>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    68d4:	4b07      	ldr	r3, [pc, #28]	; (68f4 <specan+0x110>)
    68d6:	2210      	movs	r2, #16
    68d8:	601a      	str	r2, [r3, #0]
}
    68da:	b00e      	add	sp, #56	; 0x38
    68dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68e0:	2009c038 	.word	0x2009c038
    68e4:	2009c058 	.word	0x2009c058
    68e8:	10000a1c 	.word	0x10000a1c
    68ec:	10000448 	.word	0x10000448
    68f0:	10000bc4 	.word	0x10000bc4
    68f4:	2009c03c 	.word	0x2009c03c

000068f8 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    68f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    68fa:	4b44      	ldr	r3, [pc, #272]	; (6a0c <led_specan+0x114>)
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    68fc:	2280      	movs	r2, #128	; 0x80
/* LED based spectrum analysis */
void led_specan()
{
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    68fe:	6818      	ldr	r0, [r3, #0]
    6900:	889b      	ldrh	r3, [r3, #4]
    6902:	9002      	str	r0, [sp, #8]
    6904:	f8ad 300c 	strh.w	r3, [sp, #12]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6908:	4b41      	ldr	r3, [pc, #260]	; (6a10 <led_specan+0x118>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    690a:	2012      	movs	r0, #18
	u16 channels[3] = {2412, 2437, 2462};
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    690c:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    690e:	f642 3122 	movw	r1, #11042	; 0x2b22
    6912:	f001 fbea 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6916:	2014      	movs	r0, #20
    6918:	f241 314b 	movw	r1, #4939	; 0x134b
    691c:	f001 fbe5 	bl	80ea <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6920:	2020      	movs	r0, #32
    6922:	f240 1101 	movw	r1, #257	; 0x101
    6926:	f001 fbe0 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    692a:	2003      	movs	r0, #3
    692c:	2129      	movs	r1, #41	; 0x29
    692e:	f001 fbdc 	bl	80ea <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    6932:	2006      	movs	r0, #6
    6934:	21f1      	movs	r1, #241	; 0xf1
    6936:	f001 fbd8 	bl	80ea <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    693a:	f001 fc79 	bl	8230 <cc2400_status>
    693e:	0640      	lsls	r0, r0, #25
    6940:	d5fb      	bpl.n	693a <led_specan+0x42>
	while ((cc2400_status() & FS_LOCK));
    6942:	f001 fc75 	bl	8230 <cc2400_status>
    6946:	f000 0004 	and.w	r0, r0, #4
    694a:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    694e:	2800      	cmp	r0, #0
    6950:	d1f7      	bne.n	6942 <led_specan+0x4a>

	while (requested_mode == MODE_LED_SPECAN) {
    6952:	4b30      	ldr	r3, [pc, #192]	; (6a14 <led_specan+0x11c>)
    6954:	7c9b      	ldrb	r3, [r3, #18]
    6956:	2b07      	cmp	r3, #7
    6958:	d155      	bne.n	6a06 <led_specan+0x10e>
		cc2400_set(FSDIV, channels[i] - 1);
    695a:	aa04      	add	r2, sp, #16
    695c:	eb02 0344 	add.w	r3, r2, r4, lsl #1
    6960:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    6964:	2002      	movs	r0, #2
    6966:	3901      	subs	r1, #1
    6968:	b289      	uxth	r1, r1
    696a:	f001 fbbe 	bl	80ea <cc2400_set>
		cc2400_strobe(SFSON);
    696e:	2061      	movs	r0, #97	; 0x61
    6970:	f001 fc65 	bl	823e <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6974:	f001 fc5c 	bl	8230 <cc2400_status>
    6978:	0741      	lsls	r1, r0, #29
    697a:	d5fb      	bpl.n	6974 <led_specan+0x7c>
		cc2400_strobe(SRX);
    697c:	2062      	movs	r0, #98	; 0x62
    697e:	f001 fc5e 	bl	823e <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    6982:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6986:	9301      	str	r3, [sp, #4]
    6988:	9b01      	ldr	r3, [sp, #4]
    698a:	3b01      	subs	r3, #1
    698c:	9301      	str	r3, [sp, #4]
    698e:	2b00      	cmp	r3, #0
    6990:	d1fa      	bne.n	6988 <led_specan+0x90>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    6992:	2006      	movs	r0, #6
    6994:	f001 fba0 	bl	80d8 <cc2400_get>
		if (lvl > rssi_threshold) {
    6998:	4b1f      	ldr	r3, [pc, #124]	; (6a18 <led_specan+0x120>)
    699a:	f340 2007 	sbfx	r0, r0, #8, #8
    699e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    69a2:	b25b      	sxtb	r3, r3
    69a4:	4298      	cmp	r0, r3
    69a6:	dd0c      	ble.n	69c2 <led_specan+0xca>
			switch (i) {
    69a8:	2c01      	cmp	r4, #1
    69aa:	d007      	beq.n	69bc <led_specan+0xc4>
    69ac:	d303      	bcc.n	69b6 <led_specan+0xbe>
    69ae:	2c02      	cmp	r4, #2
    69b0:	d116      	bne.n	69e0 <led_specan+0xe8>
					break;
				case 1:
					RXLED_SET;
					break;
				case 2:
					USRLED_SET;
    69b2:	4b1a      	ldr	r3, [pc, #104]	; (6a1c <led_specan+0x124>)
    69b4:	e013      	b.n	69de <led_specan+0xe6>
		volatile u32 j = 500; while (--j); //FIXME crude delay
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
		if (lvl > rssi_threshold) {
			switch (i) {
				case 0:
					TXLED_SET;
    69b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    69ba:	e000      	b.n	69be <led_specan+0xc6>
					break;
				case 1:
					RXLED_SET;
    69bc:	2210      	movs	r2, #16
    69be:	4b17      	ldr	r3, [pc, #92]	; (6a1c <led_specan+0x124>)
    69c0:	e00b      	b.n	69da <led_specan+0xe2>
					USRLED_SET;
					break;
			}
		}
		else {
			switch (i) {
    69c2:	2c01      	cmp	r4, #1
    69c4:	d007      	beq.n	69d6 <led_specan+0xde>
    69c6:	d303      	bcc.n	69d0 <led_specan+0xd8>
    69c8:	2c02      	cmp	r4, #2
    69ca:	d109      	bne.n	69e0 <led_specan+0xe8>
					break;
				case 1:
					RXLED_CLR;
					break;
				case 2:
					USRLED_CLR;
    69cc:	4b14      	ldr	r3, [pc, #80]	; (6a20 <led_specan+0x128>)
    69ce:	e006      	b.n	69de <led_specan+0xe6>
			}
		}
		else {
			switch (i) {
				case 0:
					TXLED_CLR;
    69d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    69d4:	e000      	b.n	69d8 <led_specan+0xe0>
					break;
				case 1:
					RXLED_CLR;
    69d6:	2210      	movs	r2, #16
    69d8:	4b11      	ldr	r3, [pc, #68]	; (6a20 <led_specan+0x128>)
    69da:	601a      	str	r2, [r3, #0]
					break;
    69dc:	e000      	b.n	69e0 <led_specan+0xe8>
				case 2:
					USRLED_CLR;
    69de:	601c      	str	r4, [r3, #0]
					break;
			}
		}

		i = (i+1) % 3;
    69e0:	2303      	movs	r3, #3
    69e2:	3401      	adds	r4, #1
    69e4:	fb94 f2f3 	sdiv	r2, r4, r3
    69e8:	fb03 4412 	mls	r4, r3, r2, r4

		handle_usb(clkn);
    69ec:	4b0d      	ldr	r3, [pc, #52]	; (6a24 <led_specan+0x12c>)
					USRLED_CLR;
					break;
			}
		}

		i = (i+1) % 3;
    69ee:	b2e4      	uxtb	r4, r4

		handle_usb(clkn);
    69f0:	6818      	ldr	r0, [r3, #0]
    69f2:	f000 fb6b 	bl	70cc <handle_usb>

		cc2400_strobe(SRFOFF);
    69f6:	2064      	movs	r0, #100	; 0x64
    69f8:	f001 fc21 	bl	823e <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    69fc:	f001 fc18 	bl	8230 <cc2400_status>
    6a00:	0742      	lsls	r2, r0, #29
    6a02:	d4fb      	bmi.n	69fc <led_specan+0x104>
    6a04:	e7a5      	b.n	6952 <led_specan+0x5a>
	}
}
    6a06:	b004      	add	sp, #16
    6a08:	bd10      	pop	{r4, pc}
    6a0a:	bf00      	nop
    6a0c:	000096b4 	.word	0x000096b4
    6a10:	2009c058 	.word	0x2009c058
    6a14:	10000a1c 	.word	0x10000a1c
    6a18:	10000448 	.word	0x10000448
    6a1c:	2009c038 	.word	0x2009c038
    6a20:	2009c03c 	.word	0x2009c03c
    6a24:	10000bc4 	.word	0x10000bc4

00006a28 <main>:

int main()
{
    6a28:	b510      	push	{r4, lr}
	ubertooth_init();
    6a2a:	f001 fccb 	bl	83c4 <ubertooth_init>
	clkn_init();
    6a2e:	f000 fc77 	bl	7320 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    6a32:	4857      	ldr	r0, [pc, #348]	; (6b90 <main+0x168>)
    6a34:	f000 fac2 	bl	6fbc <ubertooth_usb_init>
	cc2400_idle();
    6a38:	f7fd fdbc 	bl	45b4 <cc2400_idle>

	while (1) {
		handle_usb(clkn);
    6a3c:	4b55      	ldr	r3, [pc, #340]	; (6b94 <main+0x16c>)
		if(requested_mode != mode) {
    6a3e:	4c56      	ldr	r4, [pc, #344]	; (6b98 <main+0x170>)
	clkn_init();
	ubertooth_usb_init(vendor_request_handler);
	cc2400_idle();

	while (1) {
		handle_usb(clkn);
    6a40:	6818      	ldr	r0, [r3, #0]
    6a42:	f000 fb43 	bl	70cc <handle_usb>
		if(requested_mode != mode) {
    6a46:	7ca2      	ldrb	r2, [r4, #18]
    6a48:	7c63      	ldrb	r3, [r4, #17]
    6a4a:	429a      	cmp	r2, r3
    6a4c:	d0f6      	beq.n	6a3c <main+0x14>
			switch (requested_mode) {
    6a4e:	7ca3      	ldrb	r3, [r4, #18]
    6a50:	2b18      	cmp	r3, #24
    6a52:	d8f3      	bhi.n	6a3c <main+0x14>
    6a54:	a201      	add	r2, pc, #4	; (adr r2, 6a5c <main+0x34>)
    6a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6a5a:	bf00      	nop
    6a5c:	00006a39 	.word	0x00006a39
    6a60:	00006ad1 	.word	0x00006ad1
    6a64:	00006adb 	.word	0x00006adb
    6a68:	00006af9 	.word	0x00006af9
    6a6c:	00006b23 	.word	0x00006b23
    6a70:	00006b07 	.word	0x00006b07
    6a74:	00006b17 	.word	0x00006b17
    6a78:	00006b29 	.word	0x00006b29
    6a7c:	00006ae5 	.word	0x00006ae5
    6a80:	00006ae9 	.word	0x00006ae9
    6a84:	00006aef 	.word	0x00006aef
    6a88:	00006ac1 	.word	0x00006ac1
    6a8c:	00006af5 	.word	0x00006af5
    6a90:	00006b2f 	.word	0x00006b2f
    6a94:	00006acd 	.word	0x00006acd
    6a98:	00006b3b 	.word	0x00006b3b
    6a9c:	00006b45 	.word	0x00006b45
    6aa0:	00006b4b 	.word	0x00006b4b
    6aa4:	00006b53 	.word	0x00006b53
    6aa8:	00006b5b 	.word	0x00006b5b
    6aac:	00006b63 	.word	0x00006b63
    6ab0:	00006b6b 	.word	0x00006b6b
    6ab4:	00006b73 	.word	0x00006b73
    6ab8:	00006b7b 	.word	0x00006b7b
    6abc:	00006b83 	.word	0x00006b83
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    6ac0:	2001      	movs	r0, #1
    6ac2:	f001 fa37 	bl	7f34 <wait>
					reset();
    6ac6:	f001 fc87 	bl	83d8 <reset>
					break;
    6aca:	e7b7      	b.n	6a3c <main+0x14>
				case MODE_AFH:
					mode = MODE_AFH;
    6acc:	230e      	movs	r3, #14
    6ace:	e000      	b.n	6ad2 <main+0xaa>
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    6ad0:	2301      	movs	r3, #1
    6ad2:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    6ad4:	f7fe fdc8 	bl	5668 <bt_stream_rx>
					break;
    6ad8:	e7b0      	b.n	6a3c <main+0x14>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    6ada:	2302      	movs	r3, #2
    6adc:	7463      	strb	r3, [r4, #17]
					br_transmit();
    6ade:	f7fe fe71 	bl	57c4 <br_transmit>
					break;
    6ae2:	e7ab      	b.n	6a3c <main+0x14>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    6ae4:	2308      	movs	r3, #8
    6ae6:	e7f4      	b.n	6ad2 <main+0xaa>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    6ae8:	f7ff fac4 	bl	6074 <bt_follow_le>
					break;
    6aec:	e7a6      	b.n	6a3c <main+0x14>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    6aee:	f7ff fcef 	bl	64d0 <bt_promisc_le>
					break;
    6af2:	e7a3      	b.n	6a3c <main+0x14>
				case MODE_BT_SLAVE_LE:
					mode = MODE_BT_SLAVE_LE;
    6af4:	230c      	movs	r3, #12
    6af6:	e045      	b.n	6b84 <main+0x15c>
					bt_slave_le(0x000f);
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6af8:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    6afa:	4827      	ldr	r0, [pc, #156]	; (6b98 <main+0x170>)
    6afc:	4927      	ldr	r1, [pc, #156]	; (6b9c <main+0x174>)
				case MODE_BT_SLAVE_LE:
					mode = MODE_BT_SLAVE_LE;
					bt_slave_le(0x000f);
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6afe:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    6b00:	f000 ff1e 	bl	7940 <cc2400_txtest>
					break;
    6b04:	e79a      	b.n	6a3c <main+0x14>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6b06:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    6b08:	4824      	ldr	r0, [pc, #144]	; (6b9c <main+0x174>)
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
					cc2400_txtest(&modulation, &channel);
					break;
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6b0a:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    6b0c:	f000 fd1c 	bl	7548 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    6b10:	2300      	movs	r3, #0
    6b12:	74a3      	strb	r3, [r4, #18]
					break;
    6b14:	e792      	b.n	6a3c <main+0x14>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6b16:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    6b18:	4820      	ldr	r0, [pc, #128]	; (6b9c <main+0x174>)
					mode = MODE_RANGE_TEST;
					cc2400_rangetest(&channel);
					requested_mode = MODE_IDLE;
					break;
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6b1a:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    6b1c:	f000 fe58 	bl	77d0 <cc2400_repeater>
					break;
    6b20:	e78c      	b.n	6a3c <main+0x14>
				case MODE_SPECAN:
					specan();
    6b22:	f7ff fe5f 	bl	67e4 <specan>
					break;
    6b26:	e789      	b.n	6a3c <main+0x14>
				case MODE_LED_SPECAN:
					led_specan();
    6b28:	f7ff fee6 	bl	68f8 <led_specan>
					break;
    6b2c:	e786      	b.n	6a3c <main+0x14>
				case MODE_EGO:
					mode = MODE_EGO;
    6b2e:	230d      	movs	r3, #13
    6b30:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    6b32:	7d20      	ldrb	r0, [r4, #20]
    6b34:	f001 f96c 	bl	7e10 <ego_main>
					break;
    6b38:	e780      	b.n	6a3c <main+0x14>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    6b3a:	230f      	movs	r3, #15
    6b3c:	7463      	strb	r3, [r4, #17]
					rx_generic();
    6b3e:	f7ff fdc7 	bl	66d0 <rx_generic>
					break;
    6b42:	e77b      	b.n	6a3c <main+0x14>
				case MODE_TX_GENERIC:
					tx_generic();
    6b44:	f7ff fdd4 	bl	66f0 <tx_generic>
					break;
    6b48:	e778      	b.n	6a3c <main+0x14>
				case MODE_IDLE:
					cc2400_idle();
					break;
				// JWHUR POWER CONTROL
				case MODE_BT_SLAVE_LE_P0:
					mode = MODE_BT_SLAVE_LE_P0;
    6b4a:	2311      	movs	r3, #17
    6b4c:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x0008);
    6b4e:	2008      	movs	r0, #8
    6b50:	e01a      	b.n	6b88 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P1:
					mode = MODE_BT_SLAVE_LE_P1;
    6b52:	2312      	movs	r3, #18
    6b54:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x0009);
    6b56:	2009      	movs	r0, #9
    6b58:	e016      	b.n	6b88 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P2:
					mode = MODE_BT_SLAVE_LE_P2;
    6b5a:	2313      	movs	r3, #19
    6b5c:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000a);
    6b5e:	200a      	movs	r0, #10
    6b60:	e012      	b.n	6b88 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P3:
					mode = MODE_BT_SLAVE_LE_P3;
    6b62:	2314      	movs	r3, #20
    6b64:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000b);
    6b66:	200b      	movs	r0, #11
    6b68:	e00e      	b.n	6b88 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P4:
					mode = MODE_BT_SLAVE_LE_P4;
    6b6a:	2315      	movs	r3, #21
    6b6c:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000c);
    6b6e:	200c      	movs	r0, #12
    6b70:	e00a      	b.n	6b88 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P5:
					mode = MODE_BT_SLAVE_LE_P5;
    6b72:	2316      	movs	r3, #22
    6b74:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000d);
    6b76:	200d      	movs	r0, #13
    6b78:	e006      	b.n	6b88 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P6:
					mode = MODE_BT_SLAVE_LE_P6;
    6b7a:	2317      	movs	r3, #23
    6b7c:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000e);
    6b7e:	200e      	movs	r0, #14
    6b80:	e002      	b.n	6b88 <main+0x160>
					break;
				case MODE_BT_SLAVE_LE_P7:
					mode = MODE_BT_SLAVE_LE_P7;
    6b82:	2318      	movs	r3, #24
    6b84:	7463      	strb	r3, [r4, #17]
					bt_slave_le(0x000f);
    6b86:	200f      	movs	r0, #15
    6b88:	f7ff fcda 	bl	6540 <bt_slave_le>
					break;
    6b8c:	e756      	b.n	6a3c <main+0x14>
    6b8e:	bf00      	nop
    6b90:	000048d5 	.word	0x000048d5
    6b94:	10000bc4 	.word	0x10000bc4
    6b98:	10000a1c 	.word	0x10000a1c
    6b9c:	10000448 	.word	0x10000448

00006ba0 <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    6ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6ba2:	4b42      	ldr	r3, [pc, #264]	; (6cac <precalc+0x10c>)
	syncword = 0;
    6ba4:	4842      	ldr	r0, [pc, #264]	; (6cb0 <precalc+0x110>)
/* do all of the one time precalculation */
void precalc(void)
{
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6ba6:	6819      	ldr	r1, [r3, #0]
	syncword = 0;
    6ba8:	2200      	movs	r2, #0
    6baa:	2300      	movs	r3, #0
    6bac:	e9c0 2300 	strd	r2, r3, [r0]
    6bb0:	2300      	movs	r3, #0
    6bb2:	0058      	lsls	r0, r3, #1

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    6bb4:	224f      	movs	r2, #79	; 0x4f
    6bb6:	fb90 f4f2 	sdiv	r4, r0, r2
    6bba:	fb02 0214 	mls	r2, r2, r4, r0
    6bbe:	4e3d      	ldr	r6, [pc, #244]	; (6cb4 <precalc+0x114>)
    6bc0:	559a      	strb	r2, [r3, r6]
    6bc2:	3301      	adds	r3, #1
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    6bc4:	2b4f      	cmp	r3, #79	; 0x4f
    6bc6:	d1f4      	bne.n	6bb2 <precalc+0x12>
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    6bc8:	4b3b      	ldr	r3, [pc, #236]	; (6cb8 <precalc+0x118>)
    6bca:	f3c1 52c4 	ubfx	r2, r1, #23, #5
    6bce:	701a      	strb	r2, [r3, #0]
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    6bd0:	f3c1 1407 	ubfx	r4, r1, #4, #8
    6bd4:	f3c1 00c7 	ubfx	r0, r1, #3, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    6bd8:	4b38      	ldr	r3, [pc, #224]	; (6cbc <precalc+0x11c>)
    6bda:	f3c1 42c3 	ubfx	r2, r1, #19, #4
	c1 = ((address >> 4) & 0x10) +
    6bde:	f000 0508 	and.w	r5, r0, #8
    6be2:	f004 0710 	and.w	r7, r4, #16
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    6be6:	701a      	strb	r2, [r3, #0]
	c1 = ((address >> 4) & 0x10) +
    6be8:	442f      	add	r7, r5
    6bea:	f3c1 0287 	ubfx	r2, r1, #2, #8
    6bee:	f001 0501 	and.w	r5, r1, #1
    6bf2:	f3c1 0347 	ubfx	r3, r1, #1, #8
    6bf6:	442f      	add	r7, r5
    6bf8:	f002 0504 	and.w	r5, r2, #4
    6bfc:	442f      	add	r7, r5
    6bfe:	f003 0502 	and.w	r5, r3, #2
    6c02:	442f      	add	r7, r5
    6c04:	4d2e      	ldr	r5, [pc, #184]	; (6cc0 <precalc+0x120>)
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6c06:	f004 0408 	and.w	r4, r4, #8


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    6c0a:	702f      	strb	r7, [r5, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    6c0c:	4d2d      	ldr	r5, [pc, #180]	; (6cc4 <precalc+0x124>)
    6c0e:	f3c1 2788 	ubfx	r7, r1, #10, #9
    6c12:	802f      	strh	r7, [r5, #0]
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
    6c14:	098f      	lsrs	r7, r1, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6c16:	09cd      	lsrs	r5, r1, #7
    6c18:	f007 0720 	and.w	r7, r7, #32
    6c1c:	f005 0540 	and.w	r5, r5, #64	; 0x40
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    6c20:	0949      	lsrs	r1, r1, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6c22:	443d      	add	r5, r7
    6c24:	f001 0110 	and.w	r1, r1, #16
    6c28:	4429      	add	r1, r5
    6c2a:	440c      	add	r4, r1
    6c2c:	f000 0004 	and.w	r0, r0, #4
    6c30:	4420      	add	r0, r4
    6c32:	f002 0202 	and.w	r2, r2, #2
    6c36:	4402      	add	r2, r0
    6c38:	f003 0301 	and.w	r3, r3, #1
    6c3c:	4922      	ldr	r1, [pc, #136]	; (6cc8 <precalc+0x128>)
    6c3e:	4413      	add	r3, r2
    6c40:	700b      	strb	r3, [r1, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    6c42:	4b22      	ldr	r3, [pc, #136]	; (6ccc <precalc+0x12c>)
    6c44:	781b      	ldrb	r3, [r3, #0]
    6c46:	b383      	cbz	r3, 6caa <precalc+0x10a>
    6c48:	2400      	movs	r4, #0
    6c4a:	46a4      	mov	ip, r4
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    6c4c:	4f20      	ldr	r7, [pc, #128]	; (6cd0 <precalc+0x130>)
    6c4e:	2300      	movs	r3, #0
    6c50:	5de2      	ldrb	r2, [r4, r7]

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6c52:	2500      	movs	r5, #0
    6c54:	ea52 0103 	orrs.w	r1, r2, r3
    6c58:	d008      	beq.n	6c6c <precalc+0xcc>
		n &= n - 1;
    6c5a:	f112 30ff 	adds.w	r0, r2, #4294967295	; 0xffffffff
    6c5e:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6c62:	3501      	adds	r5, #1
		n &= n - 1;
    6c64:	4002      	ands	r2, r0
    6c66:	400b      	ands	r3, r1

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6c68:	b2ed      	uxtb	r5, r5
    6c6a:	e7f3      	b.n	6c54 <precalc+0xb4>
    6c6c:	3401      	adds	r4, #1
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    6c6e:	4465      	add	r5, ip
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6c70:	2c0a      	cmp	r4, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    6c72:	b2ed      	uxtb	r5, r5
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6c74:	d001      	beq.n	6c7a <precalc+0xda>
			used_channels += count_bits((uint64_t) afh_map[i]);
    6c76:	46ac      	mov	ip, r5
    6c78:	e7e8      	b.n	6c4c <precalc+0xac>
    6c7a:	4b16      	ldr	r3, [pc, #88]	; (6cd4 <precalc+0x134>)
    6c7c:	701d      	strb	r5, [r3, #0]
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6c7e:	2300      	movs	r3, #0
    6c80:	461a      	mov	r2, r3
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    6c82:	214f      	movs	r1, #79	; 0x4f
    6c84:	fb93 f0f1 	sdiv	r0, r3, r1
    6c88:	fb01 3010 	mls	r0, r1, r0, r3
    6c8c:	b2c1      	uxtb	r1, r0
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    6c8e:	08cc      	lsrs	r4, r1, #3
    6c90:	5d3c      	ldrb	r4, [r7, r4]
    6c92:	f000 0007 	and.w	r0, r0, #7
    6c96:	fa44 f000 	asr.w	r0, r4, r0
    6c9a:	07c0      	lsls	r0, r0, #31
    6c9c:	d502      	bpl.n	6ca4 <precalc+0x104>
				bank[j++] = chan;
    6c9e:	1c50      	adds	r0, r2, #1
    6ca0:	54b1      	strb	r1, [r6, r2]
    6ca2:	b2c2      	uxtb	r2, r0
    6ca4:	3302      	adds	r3, #2
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    6ca6:	2b9e      	cmp	r3, #158	; 0x9e
    6ca8:	d1eb      	bne.n	6c82 <precalc+0xe2>
    6caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cac:	100010c0 	.word	0x100010c0
    6cb0:	10000d18 	.word	0x10000d18
    6cb4:	10001125 	.word	0x10001125
    6cb8:	10001123 	.word	0x10001123
    6cbc:	100010d0 	.word	0x100010d0
    6cc0:	10001124 	.word	0x10001124
    6cc4:	100010d2 	.word	0x100010d2
    6cc8:	10001174 	.word	0x10001174
    6ccc:	10001047 	.word	0x10001047
    6cd0:	10000bab 	.word	0x10000bab
    6cd4:	10000ba9 	.word	0x10000ba9

00006cd8 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    6cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cda:	b087      	sub	sp, #28
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6cdc:	f3c0 02d8 	ubfx	r2, r0, #3, #25
	f = base_f % 79;
    6ce0:	214f      	movs	r1, #79	; 0x4f
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6ce2:	f022 020f 	bic.w	r2, r2, #15
	f = base_f % 79;
    6ce6:	fbb2 f7f1 	udiv	r7, r2, r1
    6cea:	fb01 2717 	mls	r7, r1, r7, r2
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6cee:	493f      	ldr	r1, [pc, #252]	; (6dec <next_hop+0x114>)
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
    6cf0:	f3c0 0340 	ubfx	r3, r0, #1, #1
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6cf4:	f891 c000 	ldrb.w	ip, [r1]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6cf8:	211f      	movs	r1, #31

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    6cfa:	015e      	lsls	r6, r3, #5
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6cfc:	434b      	muls	r3, r1
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6cfe:	ea8c 4c10 	eor.w	ip, ip, r0, lsr #16
    6d02:	f00c 0c1f 	and.w	ip, ip, #31
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6d06:	ea8c 0c03 	eor.w	ip, ip, r3
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6d0a:	4b39      	ldr	r3, [pc, #228]	; (6df0 <next_hop+0x118>)

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    6d0c:	b2b6      	uxth	r6, r6
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6d0e:	781c      	ldrb	r4, [r3, #0]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6d10:	4b38      	ldr	r3, [pc, #224]	; (6df4 <next_hop+0x11c>)
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6d12:	ea84 5450 	eor.w	r4, r4, r0, lsr #21
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6d16:	781b      	ldrb	r3, [r3, #0]
    6d18:	eb04 0490 	add.w	r4, r4, r0, lsr #2
    6d1c:	405c      	eors	r4, r3
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6d1e:	4b36      	ldr	r3, [pc, #216]	; (6df8 <next_hop+0x120>)

/* 5 bit permutation */
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    6d20:	400c      	ands	r4, r1
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6d22:	881b      	ldrh	r3, [r3, #0]
    6d24:	ea83 10d0 	eor.w	r0, r3, r0, lsr #7
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
	p_high &= 0x1f;
	p_low &= 0x1ff;
    6d28:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6d2c:	b280      	uxth	r0, r0
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    6d2e:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
    6d30:	fa40 f103 	asr.w	r1, r0, r3
    6d34:	ad02      	add	r5, sp, #8
    6d36:	f001 0101 	and.w	r1, r1, #1
    6d3a:	5559      	strb	r1, [r3, r5]
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    6d3c:	3301      	adds	r3, #1
    6d3e:	2b09      	cmp	r3, #9
    6d40:	d1f6      	bne.n	6d30 <next_hop+0x58>
    6d42:	2300      	movs	r3, #0
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;
    6d44:	fa4c f003 	asr.w	r0, ip, r3
    6d48:	18e9      	adds	r1, r5, r3
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6d4a:	3301      	adds	r3, #1
		p[i+9] = (p_high >> i) & 0x01;
    6d4c:	f000 0001 	and.w	r0, r0, #1
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6d50:	2b05      	cmp	r3, #5
		p[i+9] = (p_high >> i) & 0x01;
    6d52:	7248      	strb	r0, [r1, #9]
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6d54:	d1f6      	bne.n	6d44 <next_hop+0x6c>
    6d56:	2300      	movs	r3, #0
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;
    6d58:	fa44 f103 	asr.w	r1, r4, r3
    6d5c:	f001 0101 	and.w	r1, r1, #1
    6d60:	f80d 1003 	strb.w	r1, [sp, r3]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    6d64:	3301      	adds	r3, #1
    6d66:	2b05      	cmp	r3, #5
    6d68:	d1f6      	bne.n	6d58 <next_hop+0x80>
    6d6a:	230d      	movs	r3, #13
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    6d6c:	5ce9      	ldrb	r1, [r5, r3]
    6d6e:	b179      	cbz	r1, 6d90 <next_hop+0xb8>
			tmp = z_bit[index1[i]];
    6d70:	4922      	ldr	r1, [pc, #136]	; (6dfc <next_hop+0x124>)
    6d72:	a806      	add	r0, sp, #24
    6d74:	5c5c      	ldrb	r4, [r3, r1]
			z_bit[index1[i]] = z_bit[index2[i]];
    6d76:	310e      	adds	r1, #14

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    6d78:	4404      	add	r4, r0
			z_bit[index1[i]] = z_bit[index2[i]];
    6d7a:	5c58      	ldrb	r0, [r3, r1]
    6d7c:	a906      	add	r1, sp, #24
    6d7e:	4408      	add	r0, r1

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    6d80:	f814 cc18 	ldrb.w	ip, [r4, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    6d84:	f810 1c18 	ldrb.w	r1, [r0, #-24]
    6d88:	f804 1c18 	strb.w	r1, [r4, #-24]
			z_bit[index2[i]] = tmp;
    6d8c:	f800 cc18 	strb.w	ip, [r0, #-24]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    6d90:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    6d94:	d2ea      	bcs.n	6d6c <next_hop+0x94>
    6d96:	2100      	movs	r1, #0
    6d98:	460b      	mov	r3, r1
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
		output += z_bit[i] << i;
    6d9a:	f81d 0003 	ldrb.w	r0, [sp, r3]
    6d9e:	4098      	lsls	r0, r3
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6da0:	3301      	adds	r3, #1
		output += z_bit[i] << i;
    6da2:	4401      	add	r1, r0
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6da4:	2b05      	cmp	r3, #5
		output += z_bit[i] << i;
    6da6:	b2c9      	uxtb	r1, r1
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6da8:	d1f7      	bne.n	6d9a <next_hop+0xc2>
	perm = perm5(
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    6daa:	4b15      	ldr	r3, [pc, #84]	; (6e00 <next_hop+0x128>)
    6dac:	4437      	add	r7, r6
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	4419      	add	r1, r3
    6db2:	440f      	add	r7, r1
    6db4:	234f      	movs	r3, #79	; 0x4f
    6db6:	fbb7 f0f3 	udiv	r0, r7, r3
    6dba:	fb03 7710 	mls	r7, r3, r0, r7
    6dbe:	4b11      	ldr	r3, [pc, #68]	; (6e04 <next_hop+0x12c>)
    6dc0:	5dd8      	ldrb	r0, [r3, r7]
	if(afh_enabled) {
    6dc2:	4b11      	ldr	r3, [pc, #68]	; (6e08 <next_hop+0x130>)
    6dc4:	781b      	ldrb	r3, [r3, #0]
    6dc6:	b16b      	cbz	r3, 6de4 <next_hop+0x10c>
		f_dash = base_f % used_channels;
    6dc8:	4b10      	ldr	r3, [pc, #64]	; (6e0c <next_hop+0x134>)
    6dca:	781b      	ldrb	r3, [r3, #0]
    6dcc:	fbb2 f0f3 	udiv	r0, r2, r3
    6dd0:	fb03 2210 	mls	r2, r3, r0, r2
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    6dd4:	4416      	add	r6, r2
    6dd6:	440e      	add	r6, r1
    6dd8:	fbb6 f1f3 	udiv	r1, r6, r3
    6ddc:	fb03 6611 	mls	r6, r3, r1, r6
    6de0:	4b0b      	ldr	r3, [pc, #44]	; (6e10 <next_hop+0x138>)
    6de2:	5d98      	ldrb	r0, [r3, r6]
	}
	return (2402 + next_channel);

}
    6de4:	f600 1062 	addw	r0, r0, #2402	; 0x962
    6de8:	b007      	add	sp, #28
    6dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6dec:	10001124 	.word	0x10001124
    6df0:	10001123 	.word	0x10001123
    6df4:	100010d0 	.word	0x100010d0
    6df8:	100010d2 	.word	0x100010d2
    6dfc:	000096c7 	.word	0x000096c7
    6e00:	10001174 	.word	0x10001174
    6e04:	10001125 	.word	0x10001125
    6e08:	10001047 	.word	0x10001047
    6e0c:	10000ba9 	.word	0x10000ba9
    6e10:	100010d4 	.word	0x100010d4

00006e14 <btle_channel_index>:
}

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
    6e14:	0840      	lsrs	r0, r0, #1
    6e16:	d00a      	beq.n	6e2e <btle_channel_index+0x1a>
		idx = 37;
	else if (channel < 12)
    6e18:	280b      	cmp	r0, #11
    6e1a:	d801      	bhi.n	6e20 <btle_channel_index+0xc>
		idx = channel - 1;
    6e1c:	3801      	subs	r0, #1
    6e1e:	e004      	b.n	6e2a <btle_channel_index+0x16>
	else if (channel == 12)
    6e20:	280c      	cmp	r0, #12
    6e22:	d006      	beq.n	6e32 <btle_channel_index+0x1e>
		idx = 38;
	else if (channel < 39)
    6e24:	2826      	cmp	r0, #38	; 0x26
    6e26:	d806      	bhi.n	6e36 <btle_channel_index+0x22>
		idx = channel - 2;
    6e28:	3802      	subs	r0, #2
    6e2a:	b2c0      	uxtb	r0, r0
    6e2c:	4770      	bx	lr

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
		idx = 37;
    6e2e:	2025      	movs	r0, #37	; 0x25
    6e30:	4770      	bx	lr
	else if (channel < 12)
		idx = channel - 1;
	else if (channel == 12)
		idx = 38;
    6e32:	2026      	movs	r0, #38	; 0x26
    6e34:	4770      	bx	lr
	else if (channel < 39)
		idx = channel - 2;
	else
		idx = 39;
    6e36:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    6e38:	4770      	bx	lr

00006e3a <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    6e3a:	280a      	cmp	r0, #10
    6e3c:	d802      	bhi.n	6e44 <btle_channel_index_to_phys+0xa>
		phys = 2404 + 2 * idx;
    6e3e:	f200 40b2 	addw	r0, r0, #1202	; 0x4b2
    6e42:	e003      	b.n	6e4c <btle_channel_index_to_phys+0x12>
	else if (idx < 37)
    6e44:	2824      	cmp	r0, #36	; 0x24
    6e46:	d803      	bhi.n	6e50 <btle_channel_index_to_phys+0x16>
		phys = 2428 + 2 * (idx - 11);
    6e48:	f200 40b3 	addw	r0, r0, #1203	; 0x4b3
    6e4c:	0040      	lsls	r0, r0, #1
    6e4e:	4770      	bx	lr
	else if (idx == 37)
    6e50:	2825      	cmp	r0, #37	; 0x25
    6e52:	d007      	beq.n	6e64 <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
		phys = 2426;
    6e54:	f640 137a 	movw	r3, #2426	; 0x97a
    6e58:	2826      	cmp	r0, #38	; 0x26
    6e5a:	bf0c      	ite	eq
    6e5c:	4618      	moveq	r0, r3
    6e5e:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    6e62:	4770      	bx	lr
	if (idx < 11)
		phys = 2404 + 2 * idx;
	else if (idx < 37)
		phys = 2428 + 2 * (idx - 11);
	else if (idx == 37)
		phys = 2402;
    6e64:	f640 1062 	movw	r0, #2402	; 0x962
	else if (idx == 38)
		phys = 2426;
	else
		phys = 2480;
	return phys;
}
    6e68:	4770      	bx	lr

00006e6a <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    6e6a:	b538      	push	{r3, r4, r5, lr}
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    6e6c:	7d45      	ldrb	r5, [r0, #21]

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    6e6e:	4604      	mov	r4, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    6e70:	4628      	mov	r0, r5
    6e72:	f7ff ffe2 	bl	6e3a <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    6e76:	7da2      	ldrb	r2, [r4, #22]
    6e78:	2325      	movs	r3, #37	; 0x25
    6e7a:	442a      	add	r2, r5
    6e7c:	fb92 f1f3 	sdiv	r1, r2, r3
    6e80:	fb03 2311 	mls	r3, r3, r1, r2
    6e84:	7563      	strb	r3, [r4, #21]
	return phys;
}
    6e86:	bd38      	pop	{r3, r4, r5, pc}

00006e88 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    6e88:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6e8a:	2300      	movs	r3, #0
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
    6e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6e90:	4293      	cmp	r3, r2
    6e92:	da14      	bge.n	6ebe <btle_calc_crc+0x36>
		u8 cur = data[i];
    6e94:	5ccd      	ldrb	r5, [r1, r3]
    6e96:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			int next_bit = (state ^ cur) & 1;
    6e98:	ea85 0600 	eor.w	r6, r5, r0
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    6e9c:	f016 0f01 	tst.w	r6, #1
    6ea0:	ea4f 0555 	mov.w	r5, r5, lsr #1
    6ea4:	ea4f 0050 	mov.w	r0, r0, lsr #1
    6ea8:	d005      	beq.n	6eb6 <btle_calc_crc+0x2e>
				state |= 1 << 23;
    6eaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
				state ^= lfsr_mask;
    6eae:	f480 00b4 	eor.w	r0, r0, #5898240	; 0x5a0000
    6eb2:	f480 40c0 	eor.w	r0, r0, #24576	; 0x6000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    6eb6:	3c01      	subs	r4, #1
    6eb8:	d1ee      	bne.n	6e98 <btle_calc_crc+0x10>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6eba:	3301      	adds	r3, #1
    6ebc:	e7e8      	b.n	6e90 <btle_calc_crc+0x8>
			}
		}
	}

	return state;
}
    6ebe:	bd70      	pop	{r4, r5, r6, pc}

00006ec0 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    6ec0:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    6ec2:	3a01      	subs	r2, #1
    6ec4:	2a00      	cmp	r2, #0
    6ec6:	db14      	blt.n	6ef2 <btle_reverse_crc+0x32>
		u8 cur = data[i];
    6ec8:	5c8d      	ldrb	r5, [r1, r2]
    6eca:	2307      	movs	r3, #7
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
    6ecc:	0dc4      	lsrs	r4, r0, #23
			state = (state << 1) & 0xffffff;
    6ece:	0040      	lsls	r0, r0, #1
    6ed0:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    6ed4:	fa45 f003 	asr.w	r0, r5, r3
    6ed8:	f000 0001 	and.w	r0, r0, #1
    6edc:	4060      	eors	r0, r4
    6ede:	4330      	orrs	r0, r6
			if (top_bit)
    6ee0:	b11c      	cbz	r4, 6eea <btle_reverse_crc+0x2a>
				state ^= lfsr_mask;
    6ee2:	f480 0034 	eor.w	r0, r0, #11796480	; 0xb40000
    6ee6:	f480 4040 	eor.w	r0, r0, #49152	; 0xc000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    6eea:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    6eee:	d2ed      	bcs.n	6ecc <btle_reverse_crc+0xc>
    6ef0:	e7e7      	b.n	6ec2 <btle_reverse_crc+0x2>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    6ef2:	2300      	movs	r3, #0
    6ef4:	461a      	mov	r2, r3
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    6ef6:	fa20 f103 	lsr.w	r1, r0, r3
    6efa:	f1c3 0417 	rsb	r4, r3, #23
    6efe:	f001 0101 	and.w	r1, r1, #1
    6f02:	40a1      	lsls	r1, r4
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    6f04:	3301      	adds	r3, #1
    6f06:	2b18      	cmp	r3, #24
		ret |= ((state >> i) & 1) << (23 - i);
    6f08:	ea42 0201 	orr.w	r2, r2, r1
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    6f0c:	d1f3      	bne.n	6ef6 <btle_reverse_crc+0x36>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
}
    6f0e:	4610      	mov	r0, r2
    6f10:	bd70      	pop	{r4, r5, r6, pc}
    6f12:	0000      	movs	r0, r0

00006f14 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    6f14:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    6f16:	2300      	movs	r3, #0
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    6f18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    6f1c:	4293      	cmp	r3, r2
    6f1e:	da09      	bge.n	6f34 <btle_crcgen_lut+0x20>
		key = data[i] ^ (state & 0xff);
    6f20:	5ccd      	ldrb	r5, [r1, r3]
		state = (state >> 8) ^ btle_crc_lut[key];
    6f22:	4c05      	ldr	r4, [pc, #20]	; (6f38 <btle_crcgen_lut+0x24>)
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
		key = data[i] ^ (state & 0xff);
    6f24:	4045      	eors	r5, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    6f26:	b2ed      	uxtb	r5, r5
    6f28:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    6f2c:	3301      	adds	r3, #1
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
    6f2e:	ea84 2010 	eor.w	r0, r4, r0, lsr #8
    6f32:	e7f3      	b.n	6f1c <btle_crcgen_lut+0x8>
	}
	return state;
}
    6f34:	bd30      	pop	{r4, r5, pc}
    6f36:	bf00      	nop
    6f38:	1000049c 	.word	0x1000049c

00006f3c <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    6f3c:	b513      	push	{r0, r1, r4, lr}
    6f3e:	460b      	mov	r3, r1
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6f40:	8841      	ldrh	r1, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6f42:	6812      	ldr	r2, [r2, #0]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6f44:	f8ad 1004 	strh.w	r1, [sp, #4]
    6f48:	8881      	ldrh	r1, [r0, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6f4a:	7840      	ldrb	r0, [r0, #1]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6f4c:	f8ad 1006 	strh.w	r1, [sp, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6f50:	4904      	ldr	r1, [pc, #16]	; (6f64 <usb_vendor_request_handler+0x28>)
    6f52:	680c      	ldr	r4, [r1, #0]
    6f54:	a901      	add	r1, sp, #4
    6f56:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    6f58:	1e43      	subs	r3, r0, #1
    6f5a:	4258      	negs	r0, r3
    6f5c:	4158      	adcs	r0, r3
    6f5e:	b002      	add	sp, #8
    6f60:	bd10      	pop	{r4, pc}
    6f62:	bf00      	nop
    6f64:	1000327c 	.word	0x1000327c

00006f68 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    6f68:	b530      	push	{r4, r5, lr}
    6f6a:	b087      	sub	sp, #28
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    6f6c:	ad01      	add	r5, sp, #4
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
	return (BOOL) (rv==1);
}


void set_serial_descriptor(u8 *descriptors) {
    6f6e:	4604      	mov	r4, r0
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    6f70:	4669      	mov	r1, sp
    6f72:	4628      	mov	r0, r5
    6f74:	f001 fa66 	bl	8444 <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    6f78:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6f7c:	b9e2      	cbnz	r2, 6fb8 <set_serial_descriptor+0x50>
    6f7e:	4623      	mov	r3, r4
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    6f80:	3201      	adds	r2, #1
    6f82:	5ca9      	ldrb	r1, [r5, r2]
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    6f84:	2000      	movs	r0, #0
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    6f86:	090c      	lsrs	r4, r1, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f88:	2c09      	cmp	r4, #9
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
    6f8a:	f001 010f 	and.w	r1, r1, #15
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f8e:	bf86      	itte	hi
    6f90:	3457      	addhi	r4, #87	; 0x57
    6f92:	b2e4      	uxtbhi	r4, r4
    6f94:	3430      	addls	r4, #48	; 0x30
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f96:	2909      	cmp	r1, #9
    6f98:	bf86      	itte	hi
    6f9a:	3157      	addhi	r1, #87	; 0x57
    6f9c:	b2c9      	uxtbhi	r1, r1
    6f9e:	3130      	addls	r1, #48	; 0x30
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    6fa0:	2a10      	cmp	r2, #16
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6fa2:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
			desc[1+ i * 4] = 0;
    6fa6:	f883 007d 	strb.w	r0, [r3, #125]	; 0x7d
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6faa:	f883 107e 	strb.w	r1, [r3, #126]	; 0x7e
			desc[3 + i * 4] = 0;
    6fae:	f883 007f 	strb.w	r0, [r3, #127]	; 0x7f
    6fb2:	f103 0304 	add.w	r3, r3, #4
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    6fb6:	d1e3      	bne.n	6f80 <set_serial_descriptor+0x18>
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[3 + i * 4] = 0;
		}
	}
}
    6fb8:	b007      	add	sp, #28
    6fba:	bd30      	pop	{r4, r5, pc}

00006fbc <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    6fbc:	b538      	push	{r3, r4, r5, lr}
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    6fbe:	4c0d      	ldr	r4, [pc, #52]	; (6ff4 <ubertooth_usb_init+0x38>)
		}
	}
}

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    6fc0:	4605      	mov	r5, r0
	// initialise stack
	USBInit();
    6fc2:	f001 fb1d 	bl	8600 <USBInit>

	set_serial_descriptor(abDescriptors);
    6fc6:	4620      	mov	r0, r4
    6fc8:	f7ff ffce 	bl	6f68 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    6fcc:	4620      	mov	r0, r4
    6fce:	f001 fd55 	bl	8a7c <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    6fd2:	4b09      	ldr	r3, [pc, #36]	; (6ff8 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    6fd4:	4a09      	ldr	r2, [pc, #36]	; (6ffc <ubertooth_usb_init+0x40>)
    6fd6:	2002      	movs	r0, #2
    6fd8:	4909      	ldr	r1, [pc, #36]	; (7000 <ubertooth_usb_init+0x44>)
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);

	// Request handler
	v_req_handler = vendor_req_handler;
    6fda:	601d      	str	r5, [r3, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    6fdc:	f001 fb06 	bl	85ec <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    6fe0:	4908      	ldr	r1, [pc, #32]	; (7004 <ubertooth_usb_init+0x48>)
    6fe2:	20ff      	movs	r0, #255	; 0xff
    6fe4:	f001 fd30 	bl	8a48 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    6fe8:	2001      	movs	r0, #1
    6fea:	f001 fb9e 	bl	872a <USBHwConnect>

	return 0;
}
    6fee:	2000      	movs	r0, #0
    6ff0:	bd38      	pop	{r3, r4, r5, pc}
    6ff2:	bf00      	nop
    6ff4:	1000089c 	.word	0x1000089c
    6ff8:	1000327c 	.word	0x1000327c
    6ffc:	10003178 	.word	0x10003178
    7000:	00006f3d 	.word	0x00006f3d
    7004:	000096e3 	.word	0x000096e3

00007008 <queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    7008:	4b04      	ldr	r3, [pc, #16]	; (701c <queue_init+0x14>)
    700a:	2100      	movs	r1, #0
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    700c:	4804      	ldr	r0, [pc, #16]	; (7020 <queue_init+0x18>)
    700e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    7012:	6019      	str	r1, [r3, #0]
	tail = 0;
    7014:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    7016:	f7fd b90b 	b.w	4230 <memset>
    701a:	bf00      	nop
    701c:	10000a54 	.word	0x10000a54
    7020:	10001178 	.word	0x10001178

00007024 <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
    7024:	4b0a      	ldr	r3, [pc, #40]	; (7050 <usb_enqueue+0x2c>)
    7026:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    7028:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    702a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    702e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    7032:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    7034:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7038:	4291      	cmp	r1, r2
    703a:	d006      	beq.n	704a <usb_enqueue+0x26>
		return NULL;
	}

	++tail;
    703c:	685a      	ldr	r2, [r3, #4]
    703e:	3201      	adds	r2, #1
    7040:	605a      	str	r2, [r3, #4]
	return &fifo[t];
    7042:	4b04      	ldr	r3, [pc, #16]	; (7054 <usb_enqueue+0x30>)
    7044:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    7048:	4770      	bx	lr
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    704a:	2000      	movs	r0, #0
	}

	++tail;
	return &fifo[t];

}
    704c:	4770      	bx	lr
    704e:	bf00      	nop
    7050:	10000a54 	.word	0x10000a54
    7054:	10001178 	.word	0x10001178

00007058 <dequeue>:

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    7058:	4b08      	ldr	r3, [pc, #32]	; (707c <dequeue+0x24>)
    705a:	6818      	ldr	r0, [r3, #0]
	u8 t = tail & 0x7F;
    705c:	685a      	ldr	r2, [r3, #4]

}

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    705e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
    7062:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7066:	4290      	cmp	r0, r2
    7068:	d006      	beq.n	7078 <dequeue+0x20>
		return NULL;
	}

	++head;
    706a:	681a      	ldr	r2, [r3, #0]
    706c:	3201      	adds	r2, #1
    706e:	601a      	str	r2, [r3, #0]
	return &fifo[h];
    7070:	4b03      	ldr	r3, [pc, #12]	; (7080 <dequeue+0x28>)
    7072:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    7076:	4770      	bx	lr
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
		return NULL;
    7078:	2000      	movs	r0, #0
	}

	++head;
	return &fifo[h];
}
    707a:	4770      	bx	lr
    707c:	10000a54 	.word	0x10000a54
    7080:	10001178 	.word	0x10001178

00007084 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    7084:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7086:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    7088:	f7ff ffe6 	bl	7058 <dequeue>
    708c:	4b0d      	ldr	r3, [pc, #52]	; (70c4 <dequeue_send+0x40>)
	if (pkt != NULL) {
    708e:	4604      	mov	r4, r0
    7090:	b138      	cbz	r0, 70a2 <dequeue_send+0x1e>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    7092:	2082      	movs	r0, #130	; 0x82
    7094:	4621      	mov	r1, r4
    7096:	2240      	movs	r2, #64	; 0x40

int dequeue_send(u32 clkn)
{
	usb_pkt_rx *pkt = dequeue();
	if (pkt != NULL) {
		last_usb_pkt = clkn;
    7098:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    709a:	f001 fb77 	bl	878c <USBHwEPWrite>
		return 1;
    709e:	2001      	movs	r0, #1
    70a0:	e00e      	b.n	70c0 <dequeue_send+0x3c>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    70a2:	689a      	ldr	r2, [r3, #8]
    70a4:	4908      	ldr	r1, [pc, #32]	; (70c8 <dequeue_send+0x44>)
    70a6:	1aaa      	subs	r2, r5, r2
    70a8:	428a      	cmp	r2, r1
    70aa:	d908      	bls.n	70be <dequeue_send+0x3a>
			u8 pkt_type = KEEP_ALIVE;
    70ac:	2203      	movs	r2, #3
    70ae:	a902      	add	r1, sp, #8
    70b0:	f801 2d01 	strb.w	r2, [r1, #-1]!
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    70b4:	2082      	movs	r0, #130	; 0x82
    70b6:	2201      	movs	r2, #1
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
		return 1;
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
			u8 pkt_type = KEEP_ALIVE;
			last_usb_pkt = clkn;
    70b8:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    70ba:	f001 fb67 	bl	878c <USBHwEPWrite>
		}
		return 0;
    70be:	4620      	mov	r0, r4
	}
}
    70c0:	b003      	add	sp, #12
    70c2:	bd30      	pop	{r4, r5, pc}
    70c4:	10000a54 	.word	0x10000a54
    70c8:	00061a80 	.word	0x00061a80

000070cc <handle_usb>:

void handle_usb(u32 clkn)
{
    70cc:	b538      	push	{r3, r4, r5, lr}
    70ce:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    70d0:	2082      	movs	r0, #130	; 0x82
    70d2:	f001 fb35 	bl	8740 <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    70d6:	0681      	lsls	r1, r0, #26
void handle_usb(u32 clkn)
{
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    70d8:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    70da:	d402      	bmi.n	70e2 <handle_usb+0x16>
		dequeue_send(clkn);
    70dc:	4620      	mov	r0, r4
    70de:	f7ff ffd1 	bl	7084 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    70e2:	066a      	lsls	r2, r5, #25
    70e4:	d402      	bmi.n	70ec <handle_usb+0x20>
		dequeue_send(clkn);
    70e6:	4620      	mov	r0, r4
    70e8:	f7ff ffcc 	bl	7084 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    70ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!(epstat & EPSTAT_B2FULL)) {
		dequeue_send(clkn);
	}

	/* polled "interrupt" */
	USBHwISR();
    70f0:	f001 bbb8 	b.w	8864 <USBHwISR>

000070f4 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    70f4:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    70f6:	229e      	movs	r2, #158	; 0x9e
    70f8:	4807      	ldr	r0, [pc, #28]	; (7118 <rssi_reset+0x24>)
    70fa:	2100      	movs	r1, #0
    70fc:	f7fd f898 	bl	4230 <memset>

	rssi_count = 0;
    7100:	4a06      	ldr	r2, [pc, #24]	; (711c <rssi_reset+0x28>)
    7102:	2300      	movs	r3, #0
    7104:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    7106:	4a06      	ldr	r2, [pc, #24]	; (7120 <rssi_reset+0x2c>)
    7108:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    710a:	4b06      	ldr	r3, [pc, #24]	; (7124 <rssi_reset+0x30>)
    710c:	2280      	movs	r2, #128	; 0x80
    710e:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    7110:	4b05      	ldr	r3, [pc, #20]	; (7128 <rssi_reset+0x34>)
    7112:	227f      	movs	r2, #127	; 0x7f
    7114:	701a      	strb	r2, [r3, #0]
    7116:	bd08      	pop	{r3, pc}
    7118:	10000a60 	.word	0x10000a60
    711c:	10001046 	.word	0x10001046
    7120:	10003280 	.word	0x10003280
    7124:	10000ba8 	.word	0x10000ba8
    7128:	10000baa 	.word	0x10000baa

0000712c <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    712c:	4b0b      	ldr	r3, [pc, #44]	; (715c <rssi_add+0x30>)
    712e:	f993 2000 	ldrsb.w	r2, [r3]
    7132:	4290      	cmp	r0, r2
    7134:	bfa8      	it	ge
    7136:	4602      	movge	r2, r0
    7138:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    713a:	4b09      	ldr	r3, [pc, #36]	; (7160 <rssi_add+0x34>)
    713c:	f993 2000 	ldrsb.w	r2, [r3]
    7140:	4290      	cmp	r0, r2
    7142:	bfb8      	it	lt
    7144:	4602      	movlt	r2, r0
    7146:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    7148:	4b06      	ldr	r3, [pc, #24]	; (7164 <rssi_add+0x38>)
    714a:	681a      	ldr	r2, [r3, #0]
    714c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    7150:	6018      	str	r0, [r3, #0]
	rssi_count += 1;
    7152:	4b05      	ldr	r3, [pc, #20]	; (7168 <rssi_add+0x3c>)
    7154:	781a      	ldrb	r2, [r3, #0]
    7156:	3201      	adds	r2, #1
    7158:	701a      	strb	r2, [r3, #0]
    715a:	4770      	bx	lr
    715c:	10000ba8 	.word	0x10000ba8
    7160:	10000baa 	.word	0x10000baa
    7164:	10003280 	.word	0x10003280
    7168:	10001046 	.word	0x10001046

0000716c <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    716c:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    716e:	f640 1362 	movw	r3, #2402	; 0x962
    7172:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7176:	bf38      	it	cc
    7178:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    717a:	4b0d      	ldr	r3, [pc, #52]	; (71b0 <rssi_iir_update+0x44>)
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;

	int i = channel - 2402;
    717c:	f6a0 1062 	subw	r0, r0, #2402	; 0x962

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    7180:	781b      	ldrb	r3, [r3, #0]
    7182:	b123      	cbz	r3, 718e <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    7184:	4a0b      	ldr	r2, [pc, #44]	; (71b4 <rssi_iir_update+0x48>)
    7186:	6812      	ldr	r2, [r2, #0]
    7188:	3280      	adds	r2, #128	; 0x80
    718a:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    718e:	2403      	movs	r4, #3
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7190:	4a09      	ldr	r2, [pc, #36]	; (71b8 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7192:	4363      	muls	r3, r4
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7194:	f932 1010 	ldrsh.w	r1, [r2, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7198:	24fd      	movs	r4, #253	; 0xfd
    719a:	fb04 3301 	mla	r3, r4, r1, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    719e:	f44f 7180 	mov.w	r1, #256	; 0x100
    71a2:	3380      	adds	r3, #128	; 0x80
    71a4:	fb93 f3f1 	sdiv	r3, r3, r1
    71a8:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    71ac:	bd10      	pop	{r4, pc}
    71ae:	bf00      	nop
    71b0:	10001046 	.word	0x10001046
    71b4:	10003280 	.word	0x10003280
    71b8:	10000a60 	.word	0x10000a60

000071bc <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    71bc:	f640 1362 	movw	r3, #2402	; 0x962
    71c0:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    71c4:	bf38      	it	cc
    71c6:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    71c8:	4a05      	ldr	r2, [pc, #20]	; (71e0 <rssi_get_avg+0x24>)
    71ca:	f6a0 1362 	subw	r3, r0, #2402	; 0x962
    71ce:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
    71d2:	f44f 7380 	mov.w	r3, #256	; 0x100
    71d6:	3080      	adds	r0, #128	; 0x80
    71d8:	fb90 f0f3 	sdiv	r0, r0, r3
}
    71dc:	b240      	sxtb	r0, r0
    71de:	4770      	bx	lr
    71e0:	10000a60 	.word	0x10000a60

000071e4 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    71e4:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    71e6:	4d15      	ldr	r5, [pc, #84]	; (723c <cs_threshold_calc_and_set+0x58>)
    71e8:	782c      	ldrb	r4, [r5, #0]
    71ea:	b263      	sxtb	r3, r4
    71ec:	2b00      	cmp	r3, #0
    71ee:	dd05      	ble.n	71fc <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    71f0:	f7ff ffe4 	bl	71bc <rssi_get_avg>
		level = rssi - 54 + cs_threshold_req;
    71f4:	782c      	ldrb	r4, [r5, #0]
    71f6:	3c36      	subs	r4, #54	; 0x36
    71f8:	4420      	add	r0, r4
    71fa:	b2c4      	uxtb	r4, r0
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
	level = level > -20 ? -20 : level;
    71fc:	f06f 0377 	mvn.w	r3, #119	; 0x77
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
    7200:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    7202:	429c      	cmp	r4, r3
    7204:	bfb8      	it	lt
    7206:	461c      	movlt	r4, r3
    7208:	f06f 0313 	mvn.w	r3, #19
    720c:	429c      	cmp	r4, r3
    720e:	bfa8      	it	ge
    7210:	461c      	movge	r4, r3
    7212:	b2e4      	uxtb	r4, r4
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    7214:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7218:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    721c:	2006      	movs	r0, #6
    721e:	f041 0103 	orr.w	r1, r1, #3
    7222:	f000 ff62 	bl	80ea <cc2400_set>
	cs_threshold_cur = level;
    7226:	4b06      	ldr	r3, [pc, #24]	; (7240 <cs_threshold_calc_and_set+0x5c>)
    7228:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    722a:	b264      	sxtb	r4, r4
    722c:	f114 0f77 	cmn.w	r4, #119	; 0x77
    7230:	4b04      	ldr	r3, [pc, #16]	; (7244 <cs_threshold_calc_and_set+0x60>)
    7232:	bfac      	ite	ge
    7234:	2400      	movge	r4, #0
    7236:	2401      	movlt	r4, #1
    7238:	701c      	strb	r4, [r3, #0]
    723a:	bd38      	pop	{r3, r4, r5, pc}
    723c:	10001048 	.word	0x10001048
    7240:	100010bc 	.word	0x100010bc
    7244:	10000d10 	.word	0x10000d10

00007248 <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    7248:	4b07      	ldr	r3, [pc, #28]	; (7268 <cs_trigger_enable+0x20>)
    724a:	2200      	movs	r2, #0
    724c:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    724e:	4b07      	ldr	r3, [pc, #28]	; (726c <cs_trigger_enable+0x24>)
    7250:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7254:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7256:	4b06      	ldr	r3, [pc, #24]	; (7270 <cs_trigger_enable+0x28>)
    7258:	2204      	movs	r2, #4
    725a:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    725c:	689a      	ldr	r2, [r3, #8]
    725e:	f042 0204 	orr.w	r2, r2, #4
    7262:	609a      	str	r2, [r3, #8]
    7264:	4770      	bx	lr
    7266:	bf00      	nop
    7268:	100010bd 	.word	0x100010bd
    726c:	e000e100 	.word	0xe000e100
    7270:	400280ac 	.word	0x400280ac

00007274 <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    7274:	4b07      	ldr	r3, [pc, #28]	; (7294 <cs_trigger_disable+0x20>)
    7276:	681a      	ldr	r2, [r3, #0]
    7278:	f022 0204 	bic.w	r2, r2, #4
    727c:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    727e:	2204      	movs	r2, #4
    7280:	f843 2c08 	str.w	r2, [r3, #-8]
	ICER0 = ICER0_ICE_EINT3;
    7284:	4b04      	ldr	r3, [pc, #16]	; (7298 <cs_trigger_disable+0x24>)
    7286:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    728a:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    728c:	4b03      	ldr	r3, [pc, #12]	; (729c <cs_trigger_disable+0x28>)
    728e:	2200      	movs	r2, #0
    7290:	701a      	strb	r2, [r3, #0]
    7292:	4770      	bx	lr
    7294:	400280b4 	.word	0x400280b4
    7298:	e000e180 	.word	0xe000e180
    729c:	100010bd 	.word	0x100010bd

000072a0 <cs_reset>:
}

void cs_reset(void)
{
    72a0:	b508      	push	{r3, lr}
	cs_trigger_disable();
    72a2:	f7ff ffe7 	bl	7274 <cs_trigger_disable>

	cs_no_squelch = 0;
    72a6:	4b04      	ldr	r3, [pc, #16]	; (72b8 <cs_reset+0x18>)
    72a8:	2200      	movs	r2, #0
    72aa:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    72ac:	4a03      	ldr	r2, [pc, #12]	; (72bc <cs_reset+0x1c>)
    72ae:	2388      	movs	r3, #136	; 0x88
    72b0:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    72b2:	4a03      	ldr	r2, [pc, #12]	; (72c0 <cs_reset+0x20>)
    72b4:	7013      	strb	r3, [r2, #0]
    72b6:	bd08      	pop	{r3, pc}
    72b8:	10000d10 	.word	0x10000d10
    72bc:	10001048 	.word	0x10001048
    72c0:	100010bc 	.word	0x100010bc

000072c4 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    72c4:	4b0a      	ldr	r3, [pc, #40]	; (72f0 <clkn_stop+0x2c>)
    72c6:	2202      	movs	r2, #2
    72c8:	601a      	str	r2, [r3, #0]

	clkn = 0;
    72ca:	4a0a      	ldr	r2, [pc, #40]	; (72f4 <clkn_stop+0x30>)
    72cc:	2300      	movs	r3, #0
    72ce:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    72d0:	4a09      	ldr	r2, [pc, #36]	; (72f8 <clkn_stop+0x34>)
    72d2:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    72d4:	4a09      	ldr	r2, [pc, #36]	; (72fc <clkn_stop+0x38>)
    72d6:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    72d8:	4a09      	ldr	r2, [pc, #36]	; (7300 <clkn_stop+0x3c>)
    72da:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    72dc:	4a09      	ldr	r2, [pc, #36]	; (7304 <clkn_stop+0x40>)
    72de:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    72e0:	4a09      	ldr	r2, [pc, #36]	; (7308 <clkn_stop+0x44>)
    72e2:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    72e4:	4a09      	ldr	r2, [pc, #36]	; (730c <clkn_stop+0x48>)
    72e6:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    72e8:	4a09      	ldr	r2, [pc, #36]	; (7310 <clkn_stop+0x4c>)
    72ea:	6013      	str	r3, [r2, #0]
    72ec:	4770      	bx	lr
    72ee:	bf00      	nop
    72f0:	40004004 	.word	0x40004004
    72f4:	10000bc4 	.word	0x10000bc4
    72f8:	10000ba0 	.word	0x10000ba0
    72fc:	10000bb8 	.word	0x10000bb8
    7300:	10000d12 	.word	0x10000d12
    7304:	10001044 	.word	0x10001044
    7308:	10000bc0 	.word	0x10000bc0
    730c:	10000bbc 	.word	0x10000bbc
    7310:	1000107c 	.word	0x1000107c

00007314 <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    7314:	4b01      	ldr	r3, [pc, #4]	; (731c <clkn_start+0x8>)
    7316:	2201      	movs	r2, #1
    7318:	601a      	str	r2, [r3, #0]
    731a:	4770      	bx	lr
    731c:	40004004 	.word	0x40004004

00007320 <clkn_init>:
}

void clkn_init()
{
    7320:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    7322:	f7ff ffcf 	bl	72c4 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    7326:	4b06      	ldr	r3, [pc, #24]	; (7340 <clkn_init+0x20>)
    7328:	2204      	movs	r2, #4
    732a:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    732c:	f502 6243 	add.w	r2, r2, #3120	; 0xc30
    7330:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    7332:	2203      	movs	r2, #3
    7334:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    7336:	4b03      	ldr	r3, [pc, #12]	; (7344 <clkn_init+0x24>)
    7338:	2202      	movs	r2, #2
    733a:	601a      	str	r2, [r3, #0]
    733c:	bd08      	pop	{r3, pc}
    733e:	bf00      	nop
    7340:	4000400c 	.word	0x4000400c
    7344:	e000e100 	.word	0xe000e100

00007348 <dma_disable>:
{
	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    7348:	4b15      	ldr	r3, [pc, #84]	; (73a0 <dma_disable+0x58>)
    734a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    734e:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    7350:	4a14      	ldr	r2, [pc, #80]	; (73a4 <dma_disable+0x5c>)
    7352:	2300      	movs	r3, #0
    7354:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    7356:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    7358:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    735a:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    735c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    7360:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    7364:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    7368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    736c:	23ff      	movs	r3, #255	; 0xff
    736e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    7372:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    7374:	6093      	str	r3, [r2, #8]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    7376:	4b0c      	ldr	r3, [pc, #48]	; (73a8 <dma_disable+0x60>)
    7378:	681a      	ldr	r2, [r3, #0]
    737a:	f022 0201 	bic.w	r2, r2, #1
    737e:	601a      	str	r2, [r3, #0]
	while (DMACConfig & DMACConfig_E);
    7380:	681a      	ldr	r2, [r3, #0]
    7382:	f012 0201 	ands.w	r2, r2, #1
    7386:	d1fb      	bne.n	7380 <dma_disable+0x38>

	/* reset interrupt counters */
	rx_tc = 0;
    7388:	4b08      	ldr	r3, [pc, #32]	; (73ac <dma_disable+0x64>)
    738a:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    738c:	4b08      	ldr	r3, [pc, #32]	; (73b0 <dma_disable+0x68>)
    738e:	601a      	str	r2, [r3, #0]

	active_rxbuf = &rxbuf1[0];
    7390:	4a08      	ldr	r2, [pc, #32]	; (73b4 <dma_disable+0x6c>)
    7392:	4b09      	ldr	r3, [pc, #36]	; (73b8 <dma_disable+0x70>)
    7394:	601a      	str	r2, [r3, #0]
	idle_rxbuf = &rxbuf2[0];
    7396:	4a09      	ldr	r2, [pc, #36]	; (73bc <dma_disable+0x74>)
    7398:	4b09      	ldr	r3, [pc, #36]	; (73c0 <dma_disable+0x78>)
    739a:	601a      	str	r2, [r3, #0]
    739c:	4770      	bx	lr
    739e:	bf00      	nop
    73a0:	e000e180 	.word	0xe000e180
    73a4:	50004110 	.word	0x50004110
    73a8:	50004030 	.word	0x50004030
    73ac:	10000ba4 	.word	0x10000ba4
    73b0:	100010b8 	.word	0x100010b8
    73b4:	10001085 	.word	0x10001085
    73b8:	10000c04 	.word	0x10000c04
    73bc:	10001049 	.word	0x10001049
    73c0:	10000d20 	.word	0x10000d20

000073c4 <dma_init>:
}

void dma_init()
{
    73c4:	b508      	push	{r3, lr}
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    73c6:	4b14      	ldr	r3, [pc, #80]	; (7418 <dma_init+0x54>)
    73c8:	681a      	ldr	r2, [r3, #0]
    73ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    73ce:	601a      	str	r2, [r3, #0]

	dma_disable();
    73d0:	f7ff ffba 	bl	7348 <dma_disable>

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    73d4:	4b11      	ldr	r3, [pc, #68]	; (741c <dma_init+0x58>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    73d6:	4a12      	ldr	r2, [pc, #72]	; (7420 <dma_init+0x5c>)
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    73d8:	4812      	ldr	r0, [pc, #72]	; (7424 <dma_init+0x60>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    73da:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    73dc:	4a12      	ldr	r2, [pc, #72]	; (7428 <dma_init+0x64>)
	rx_dma_lli1.control = (DMA_SIZE) |
    73de:	4913      	ldr	r1, [pc, #76]	; (742c <dma_init+0x68>)
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    73e0:	6010      	str	r0, [r2, #0]
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    73e2:	6018      	str	r0, [r3, #0]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    73e4:	4812      	ldr	r0, [pc, #72]	; (7430 <dma_init+0x6c>)
	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    73e6:	609a      	str	r2, [r3, #8]
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
    73e8:	60d1      	str	r1, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    73ea:	6050      	str	r0, [r2, #4]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    73ec:	6093      	str	r3, [r2, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    73ee:	4a11      	ldr	r2, [pc, #68]	; (7434 <dma_init+0x70>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    73f0:	60d9      	str	r1, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    73f2:	2101      	movs	r1, #1
    73f4:	6011      	str	r1, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
    73f6:	6811      	ldr	r1, [r2, #0]
    73f8:	07c9      	lsls	r1, r1, #31
    73fa:	d5fc      	bpl.n	73f6 <dma_init+0x32>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    73fc:	681a      	ldr	r2, [r3, #0]
    73fe:	490e      	ldr	r1, [pc, #56]	; (7438 <dma_init+0x74>)
    7400:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    7402:	685a      	ldr	r2, [r3, #4]
    7404:	604a      	str	r2, [r1, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    7406:	689a      	ldr	r2, [r3, #8]
    7408:	608a      	str	r2, [r1, #8]
	DMACC0Control = rx_dma_lli1.control;
    740a:	68da      	ldr	r2, [r3, #12]
    740c:	4b0b      	ldr	r3, [pc, #44]	; (743c <dma_init+0x78>)
    740e:	601a      	str	r2, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    7410:	f24d 0206 	movw	r2, #53254	; 0xd006
    7414:	605a      	str	r2, [r3, #4]
    7416:	bd08      	pop	{r3, pc}
    7418:	400fc0c4 	.word	0x400fc0c4
    741c:	10003344 	.word	0x10003344
    7420:	10001085 	.word	0x10001085
    7424:	40030008 	.word	0x40030008
    7428:	10003334 	.word	0x10003334
    742c:	88009032 	.word	0x88009032
    7430:	10001049 	.word	0x10001049
    7434:	50004030 	.word	0x50004030
    7438:	50004100 	.word	0x50004100
    743c:	5000410c 	.word	0x5000410c

00007440 <dma_init_le>:
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */
}

void dma_init_le()
{
    7440:	b508      	push	{r3, lr}
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    7442:	4b1a      	ldr	r3, [pc, #104]	; (74ac <dma_init_le+0x6c>)
    7444:	681a      	ldr	r2, [r3, #0]
    7446:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    744a:	601a      	str	r2, [r3, #0]

	dma_disable();
    744c:	f7ff ff7c 	bl	7348 <dma_disable>

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7450:	4b17      	ldr	r3, [pc, #92]	; (74b0 <dma_init_le+0x70>)
    7452:	2201      	movs	r2, #1
    7454:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    7456:	681a      	ldr	r2, [r3, #0]
    7458:	07d0      	lsls	r0, r2, #31
    745a:	d5fc      	bpl.n	7456 <dma_init_le+0x16>
    745c:	4b15      	ldr	r3, [pc, #84]	; (74b4 <dma_init_le+0x74>)
    745e:	2200      	movs	r2, #0

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7460:	4915      	ldr	r1, [pc, #84]	; (74b8 <dma_init_le+0x78>)
    7462:	f843 1c10 	str.w	r1, [r3, #-16]
    7466:	4915      	ldr	r1, [pc, #84]	; (74bc <dma_init_le+0x7c>)
    7468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    746c:	f843 1c0c 	str.w	r1, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7470:	2a0a      	cmp	r2, #10
    7472:	bf14      	ite	ne
    7474:	4619      	movne	r1, r3
    7476:	2100      	moveq	r1, #0
    7478:	f843 1c08 	str.w	r1, [r3, #-8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    747c:	3201      	adds	r2, #1
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    747e:	4910      	ldr	r1, [pc, #64]	; (74c0 <dma_init_le+0x80>)

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    7480:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    7482:	f843 1c04 	str.w	r1, [r3, #-4]
    7486:	f103 0310 	add.w	r3, r3, #16

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    748a:	d1e9      	bne.n	7460 <dma_init_le+0x20>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    748c:	4b0d      	ldr	r3, [pc, #52]	; (74c4 <dma_init_le+0x84>)
    748e:	490e      	ldr	r1, [pc, #56]	; (74c8 <dma_init_le+0x88>)
    7490:	681a      	ldr	r2, [r3, #0]
    7492:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7494:	685a      	ldr	r2, [r3, #4]
    7496:	604a      	str	r2, [r1, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7498:	689a      	ldr	r2, [r3, #8]
    749a:	608a      	str	r2, [r1, #8]
	DMACC0Control = le_dma_lli[0].control;
    749c:	68da      	ldr	r2, [r3, #12]
    749e:	4b0b      	ldr	r3, [pc, #44]	; (74cc <dma_init_le+0x8c>)
    74a0:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    74a2:	f24d 0206 	movw	r2, #53254	; 0xd006
    74a6:	605a      	str	r2, [r3, #4]
    74a8:	bd08      	pop	{r3, pc}
    74aa:	bf00      	nop
    74ac:	400fc0c4 	.word	0x400fc0c4
    74b0:	50004030 	.word	0x50004030
    74b4:	10003294 	.word	0x10003294
    74b8:	40030008 	.word	0x40030008
    74bc:	10001085 	.word	0x10001085
    74c0:	88001004 	.word	0x88001004
    74c4:	10003284 	.word	0x10003284
    74c8:	50004100 	.word	0x50004100
    74cc:	5000410c 	.word	0x5000410c

000074d0 <dio_ssp_start>:


void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    74d0:	4a0d      	ldr	r2, [pc, #52]	; (7508 <dio_ssp_start+0x38>)
    74d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    74d6:	6013      	str	r3, [r2, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    74d8:	4a0c      	ldr	r2, [pc, #48]	; (750c <dio_ssp_start+0x3c>)
    74da:	6811      	ldr	r1, [r2, #0]
    74dc:	f041 0101 	orr.w	r1, r1, #1
    74e0:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    74e2:	f852 1c20 	ldr.w	r1, [r2, #-32]
    74e6:	f041 0102 	orr.w	r1, r1, #2
    74ea:	f842 1c20 	str.w	r1, [r2, #-32]


static void dma_enable(void)
{
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    74ee:	4a08      	ldr	r2, [pc, #32]	; (7510 <dio_ssp_start+0x40>)
    74f0:	6811      	ldr	r1, [r2, #0]
    74f2:	f041 0101 	orr.w	r1, r1, #1
    74f6:	6011      	str	r1, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    74f8:	4a06      	ldr	r2, [pc, #24]	; (7514 <dio_ssp_start+0x44>)
    74fa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    74fe:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;

	dma_enable();

	/* activate slave select pin */
	DIO_SSEL_CLR;
    7500:	4a05      	ldr	r2, [pc, #20]	; (7518 <dio_ssp_start+0x48>)
    7502:	6013      	str	r3, [r2, #0]
    7504:	4770      	bx	lr
    7506:	bf00      	nop
    7508:	2009c098 	.word	0x2009c098
    750c:	40030024 	.word	0x40030024
    7510:	50004110 	.word	0x50004110
    7514:	e000e100 	.word	0xe000e100
    7518:	2009c09c 	.word	0x2009c09c

0000751c <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    751c:	4b08      	ldr	r3, [pc, #32]	; (7540 <dio_ssp_stop+0x24>)
    751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7522:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7524:	4b07      	ldr	r3, [pc, #28]	; (7544 <dio_ssp_stop+0x28>)
    7526:	681a      	ldr	r2, [r3, #0]
    7528:	f022 0201 	bic.w	r2, r2, #1
    752c:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    752e:	f853 2c20 	ldr.w	r2, [r3, #-32]
    7532:	f022 0202 	bic.w	r2, r2, #2
    7536:	f843 2c20 	str.w	r2, [r3, #-32]

	dma_disable();
    753a:	f7ff bf05 	b.w	7348 <dma_disable>
    753e:	bf00      	nop
    7540:	2009c098 	.word	0x2009c098
    7544:	40030024 	.word	0x40030024

00007548 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    7548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    754c:	b096      	sub	sp, #88	; 0x58
    754e:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    7550:	2315      	movs	r3, #21
    7552:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	txbuf[1] = 0; // request
    7556:	2300      	movs	r3, #0
    7558:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    755c:	4681      	mov	r9, r0

	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
    755e:	233a      	movs	r3, #58	; 0x3a
    7560:	f107 0058 	add.w	r0, r7, #88	; 0x58
    7564:	f840 3d58 	str.w	r3, [r0, #-88]!
	iap_entry(command, result);
    7568:	4b94      	ldr	r3, [pc, #592]	; (77bc <cc2400_rangetest+0x274>)
    756a:	4638      	mov	r0, r7
    756c:	f107 0114 	add.w	r1, r7, #20
    7570:	681b      	ldr	r3, [r3, #0]
    7572:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    7574:	7d3a      	ldrb	r2, [r7, #20]
    7576:	46ea      	mov	sl, sp
    7578:	2a00      	cmp	r2, #0
    757a:	f040 811b 	bne.w	77b4 <cc2400_rangetest+0x26c>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    757e:	69bb      	ldr	r3, [r7, #24]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7580:	2012      	movs	r0, #18
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    7582:	0e19      	lsrs	r1, r3, #24
    7584:	f887 1042 	strb.w	r1, [r7, #66]	; 0x42
	txbuf[3] = (result[1] >> 16) & 0xFF;
    7588:	0c19      	lsrs	r1, r3, #16
    758a:	f887 1043 	strb.w	r1, [r7, #67]	; 0x43
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
    758e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    7592:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    7594:	69fb      	ldr	r3, [r7, #28]
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    7596:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    759a:	0e19      	lsrs	r1, r3, #24
    759c:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	txbuf[7] = (result[2] >> 16) & 0xFF;
    75a0:	0c19      	lsrs	r1, r3, #16
    75a2:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
    75a6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    75aa:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    75ac:	6a3b      	ldr	r3, [r7, #32]
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    75ae:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    75b2:	0e19      	lsrs	r1, r3, #24
    75b4:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[11] = (result[3] >> 16) & 0xFF;
    75b8:	0c19      	lsrs	r1, r3, #16
    75ba:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
    75be:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    75c2:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    75c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    75c6:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    75ca:	0e19      	lsrs	r1, r3, #24
    75cc:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[15] = (result[4] >> 16) & 0xFF;
    75d0:	0c19      	lsrs	r1, r3, #16
    75d2:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[16] = (result[4] >> 8) & 0xFF;
    75d6:	0a19      	lsrs	r1, r3, #8
    75d8:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[17] = result[4] & 0xFF;
    75dc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    75e0:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
    75e4:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
    75e6:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
	txbuf[19] = 0; // request number
    75ea:	f887 2053 	strb.w	r2, [r7, #83]	; 0x53
	txbuf[20] = 0xff; // reply pa
    75ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	txbuf[21] = 0xff; // reply number
    75f2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    75f6:	f000 fd78 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    75fa:	2014      	movs	r0, #20
    75fc:	f241 314b 	movw	r1, #4939	; 0x134b
    7600:	f000 fd73 	bl	80ea <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    7604:	2020      	movs	r0, #32
    7606:	f640 51f1 	movw	r1, #3569	; 0xdf1
    760a:	f000 fd6e 	bl	80ea <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    760e:	f8b9 1000 	ldrh.w	r1, [r9]
    7612:	2002      	movs	r0, #2
    7614:	b289      	uxth	r1, r1
    7616:	f000 fd68 	bl	80ea <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    761a:	202d      	movs	r0, #45	; 0x2d
    761c:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    7620:	f000 fd63 	bl	80ea <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    7624:	202c      	movs	r0, #44	; 0x2c
    7626:	f241 5184 	movw	r1, #5508	; 0x1584
    762a:	f000 fd5e 	bl	80ea <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    762e:	2005      	movs	r0, #5
    7630:	2108      	movs	r1, #8
    7632:	f000 fd5a 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    7636:	2003      	movs	r0, #3
    7638:	2129      	movs	r1, #41	; 0x29
    763a:	f000 fd56 	bl	80ea <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    763e:	f000 fdf7 	bl	8230 <cc2400_status>
    7642:	0646      	lsls	r6, r0, #25
    7644:	d5fb      	bpl.n	763e <cc2400_rangetest+0xf6>
	cc2400_strobe(SFSON);
    7646:	2061      	movs	r0, #97	; 0x61
    7648:	f000 fdf9 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    764c:	f000 fdf0 	bl	8230 <cc2400_status>
    7650:	0745      	lsls	r5, r0, #29
    7652:	d5fb      	bpl.n	764c <cc2400_rangetest+0x104>
	TXLED_SET;
    7654:	4b5a      	ldr	r3, [pc, #360]	; (77c0 <cc2400_rangetest+0x278>)
    7656:	f44f 7280 	mov.w	r2, #256	; 0x100
    765a:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    765c:	2280      	movs	r2, #128	; 0x80
    765e:	621a      	str	r2, [r3, #32]
#endif
	for (pa = 0; pa < 8; pa++) {
    7660:	2400      	movs	r4, #0
		cc2400_set(FREND, 8 | pa);
    7662:	2005      	movs	r0, #5
    7664:	f044 0108 	orr.w	r1, r4, #8
    7668:	f000 fd3f 	bl	80ea <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    766c:	2500      	movs	r5, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
    766e:	f887 4052 	strb.w	r4, [r7, #82]	; 0x52
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
    7672:	f887 5053 	strb.w	r5, [r7, #83]	; 0x53
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7676:	200e      	movs	r0, #14
    7678:	f000 fd2e 	bl	80d8 <cc2400_get>
    767c:	f000 001f 	and.w	r0, r0, #31
    7680:	280f      	cmp	r0, #15
    7682:	d1f8      	bne.n	7676 <cc2400_rangetest+0x12e>
    7684:	2600      	movs	r6, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    7686:	f107 0840 	add.w	r8, r7, #64	; 0x40
    768a:	f818 1006 	ldrb.w	r1, [r8, r6]
    768e:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7690:	3601      	adds	r6, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    7692:	f000 fd38 	bl	8106 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7696:	2e16      	cmp	r6, #22
    7698:	d1f5      	bne.n	7686 <cc2400_rangetest+0x13e>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    769a:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    769c:	3501      	adds	r5, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    769e:	f000 fdce 	bl	823e <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    76a2:	2d10      	cmp	r5, #16
    76a4:	d1e5      	bne.n	7672 <cc2400_rangetest+0x12a>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    76a6:	3401      	adds	r4, #1
    76a8:	b2e4      	uxtb	r4, r4
    76aa:	2c08      	cmp	r4, #8
    76ac:	d1d9      	bne.n	7662 <cc2400_rangetest+0x11a>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    76ae:	200e      	movs	r0, #14
    76b0:	f000 fd12 	bl	80d8 <cc2400_get>
    76b4:	f000 001f 	and.w	r0, r0, #31
    76b8:	280f      	cmp	r0, #15
    76ba:	d1f8      	bne.n	76ae <cc2400_rangetest+0x166>
	TXLED_CLR;
    76bc:	4b41      	ldr	r3, [pc, #260]	; (77c4 <cc2400_rangetest+0x27c>)
    76be:	f44f 7280 	mov.w	r2, #256	; 0x100
    76c2:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    76c4:	2064      	movs	r0, #100	; 0x64
    76c6:	f000 fdba 	bl	823e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    76ca:	f000 fdb1 	bl	8230 <cc2400_status>
    76ce:	0744      	lsls	r4, r0, #29
    76d0:	d4fb      	bmi.n	76ca <cc2400_rangetest+0x182>
	cc2400_set(FSDIV, *chan_ptr - 1);
    76d2:	f8b9 1000 	ldrh.w	r1, [r9]
    76d6:	2002      	movs	r0, #2
    76d8:	b289      	uxth	r1, r1
    76da:	3901      	subs	r1, #1
    76dc:	b289      	uxth	r1, r1
    76de:	f000 fd04 	bl	80ea <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    76e2:	f000 fda5 	bl	8230 <cc2400_status>
    76e6:	0640      	lsls	r0, r0, #25
    76e8:	d5fb      	bpl.n	76e2 <cc2400_rangetest+0x19a>
	cc2400_strobe(SFSON);
    76ea:	2061      	movs	r0, #97	; 0x61
    76ec:	f000 fda7 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    76f0:	f000 fd9e 	bl	8230 <cc2400_status>
    76f4:	0741      	lsls	r1, r0, #29
    76f6:	d5fb      	bpl.n	76f0 <cc2400_rangetest+0x1a8>
	RXLED_SET;
    76f8:	4b31      	ldr	r3, [pc, #196]	; (77c0 <cc2400_rangetest+0x278>)
    76fa:	2210      	movs	r2, #16
    76fc:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    76fe:	200e      	movs	r0, #14
    7700:	f000 fcea 	bl	80d8 <cc2400_get>
    7704:	f000 001f 	and.w	r0, r0, #31
    7708:	280f      	cmp	r0, #15
    770a:	d1f8      	bne.n	76fe <cc2400_rangetest+0x1b6>
		cc2400_strobe(SRX);
    770c:	2062      	movs	r0, #98	; 0x62
    770e:	f000 fd96 	bl	823e <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    7712:	f000 fd8d 	bl	8230 <cc2400_status>
    7716:	06c2      	lsls	r2, r0, #27
    7718:	d5fb      	bpl.n	7712 <cc2400_rangetest+0x1ca>
		USRLED_SET;
    771a:	4b29      	ldr	r3, [pc, #164]	; (77c0 <cc2400_rangetest+0x278>)
    771c:	2202      	movs	r2, #2
    771e:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    7720:	2400      	movs	r4, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
    7722:	2070      	movs	r0, #112	; 0x70
    7724:	f000 fce6 	bl	80f4 <cc2400_get8>
    7728:	f107 0528 	add.w	r5, r7, #40	; 0x28
    772c:	5528      	strb	r0, [r5, r4]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    772e:	3401      	adds	r4, #1
    7730:	2c16      	cmp	r4, #22
    7732:	d1f6      	bne.n	7722 <cc2400_rangetest+0x1da>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    7734:	f000 fd7c 	bl	8230 <cc2400_status>
    7738:	0703      	lsls	r3, r0, #28
    773a:	d402      	bmi.n	7742 <cc2400_rangetest+0x1fa>
			break;
		USRLED_CLR;
    773c:	2202      	movs	r2, #2
    773e:	4b21      	ldr	r3, [pc, #132]	; (77c4 <cc2400_rangetest+0x27c>)
    7740:	e7dc      	b.n	76fc <cc2400_rangetest+0x1b4>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7742:	200e      	movs	r0, #14
    7744:	f000 fcc8 	bl	80d8 <cc2400_get>
    7748:	f000 001f 	and.w	r0, r0, #31
    774c:	280f      	cmp	r0, #15
    774e:	d1f8      	bne.n	7742 <cc2400_rangetest+0x1fa>
	cc2400_strobe(SRFOFF);
    7750:	2064      	movs	r0, #100	; 0x64
    7752:	f000 fd74 	bl	823e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7756:	f000 fd6b 	bl	8230 <cc2400_status>
    775a:	f000 0004 	and.w	r0, r0, #4
    775e:	f000 03ff 	and.w	r3, r0, #255	; 0xff
    7762:	2800      	cmp	r0, #0
    7764:	d1f7      	bne.n	7756 <cc2400_rangetest+0x20e>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    7766:	4a18      	ldr	r2, [pc, #96]	; (77c8 <cc2400_rangetest+0x280>)
    7768:	2180      	movs	r1, #128	; 0x80
    776a:	6011      	str	r1, [r2, #0]
#endif
	RXLED_CLR;
    776c:	2110      	movs	r1, #16
    776e:	f842 1c20 	str.w	r1, [r2, #-32]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    7772:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
    7776:	4a15      	ldr	r2, [pc, #84]	; (77cc <cc2400_rangetest+0x284>)
    7778:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
    777a:	7050      	strb	r0, [r2, #1]
	rr.request_num = rxbuf[19];
    777c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    7780:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
    7784:	7090      	strb	r0, [r2, #2]
	rr.reply_pa    = rxbuf[20];
    7786:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
    778a:	70d0      	strb	r0, [r2, #3]
	rr.reply_num   = rxbuf[21];
    778c:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    7790:	7110      	strb	r0, [r2, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
    7792:	5cec      	ldrb	r4, [r5, r3]
    7794:	f818 0003 	ldrb.w	r0, [r8, r3]
    7798:	4284      	cmp	r4, r0
    779a:	bf18      	it	ne
    779c:	1c99      	addne	r1, r3, #2
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    779e:	f103 0301 	add.w	r3, r3, #1
    77a2:	bf18      	it	ne
    77a4:	b2c9      	uxtbne	r1, r1
    77a6:	2b12      	cmp	r3, #18
    77a8:	d1f3      	bne.n	7792 <cc2400_rangetest+0x24a>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    77aa:	4b06      	ldr	r3, [pc, #24]	; (77c4 <cc2400_rangetest+0x27c>)
    77ac:	7011      	strb	r1, [r2, #0]
    77ae:	2202      	movs	r2, #2
    77b0:	601a      	str	r2, [r3, #0]
    77b2:	46d5      	mov	sp, sl
#endif
}
    77b4:	3758      	adds	r7, #88	; 0x58
    77b6:	46bd      	mov	sp, r7
    77b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77bc:	00009760 	.word	0x00009760
    77c0:	2009c038 	.word	0x2009c038
    77c4:	2009c03c 	.word	0x2009c03c
    77c8:	2009c05c 	.word	0x2009c05c
    77cc:	10001080 	.word	0x10001080

000077d0 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    77d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77d2:	b087      	sub	sp, #28
    77d4:	4607      	mov	r7, r0
	u8 pa = 0;
	u8 buf[len];

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    77d6:	2012      	movs	r0, #18
    77d8:	f642 3122 	movw	r1, #11042	; 0x2b22
    77dc:	f000 fc85 	bl	80ea <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    77e0:	2014      	movs	r0, #20
    77e2:	f241 314b 	movw	r1, #4939	; 0x134b
    77e6:	f000 fc80 	bl	80ea <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    77ea:	8839      	ldrh	r1, [r7, #0]
    77ec:	2002      	movs	r0, #2
    77ee:	b289      	uxth	r1, r1
    77f0:	3901      	subs	r1, #1
    77f2:	b289      	uxth	r1, r1
    77f4:	f000 fc79 	bl	80ea <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    77f8:	202d      	movs	r0, #45	; 0x2d
    77fa:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    77fe:	f000 fc74 	bl	80ea <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    7802:	202c      	movs	r0, #44	; 0x2c
    7804:	f241 5184 	movw	r1, #5508	; 0x1584
    7808:	f000 fc6f 	bl	80ea <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    780c:	2005      	movs	r0, #5
    780e:	2108      	movs	r1, #8
    7810:	f000 fc6b 	bl	80ea <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7814:	2003      	movs	r0, #3
    7816:	2129      	movs	r1, #41	; 0x29
    7818:	f000 fc67 	bl	80ea <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    781c:	f000 fd08 	bl	8230 <cc2400_status>
    7820:	0643      	lsls	r3, r0, #25
    7822:	d5fb      	bpl.n	781c <cc2400_repeater+0x4c>
		cc2400_strobe(SFSON);
    7824:	2061      	movs	r0, #97	; 0x61
    7826:	f000 fd0a 	bl	823e <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    782a:	f000 fd01 	bl	8230 <cc2400_status>
    782e:	0746      	lsls	r6, r0, #29
    7830:	d5fb      	bpl.n	782a <cc2400_repeater+0x5a>
		RXLED_SET;
    7832:	4b41      	ldr	r3, [pc, #260]	; (7938 <cc2400_repeater+0x168>)
    7834:	2210      	movs	r2, #16
    7836:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    7838:	f44f 7280 	mov.w	r2, #256	; 0x100
    783c:	605a      	str	r2, [r3, #4]
		USRLED_CLR;
    783e:	2202      	movs	r2, #2
    7840:	605a      	str	r2, [r3, #4]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    7842:	2280      	movs	r2, #128	; 0x80
    7844:	621a      	str	r2, [r3, #32]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7846:	200e      	movs	r0, #14
    7848:	f000 fc46 	bl	80d8 <cc2400_get>
    784c:	f000 001f 	and.w	r0, r0, #31
    7850:	280f      	cmp	r0, #15
    7852:	d1f8      	bne.n	7846 <cc2400_repeater+0x76>
			USRLED_CLR;
    7854:	4b39      	ldr	r3, [pc, #228]	; (793c <cc2400_repeater+0x16c>)
    7856:	2202      	movs	r2, #2
    7858:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    785a:	2062      	movs	r0, #98	; 0x62
    785c:	f000 fcef 	bl	823e <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    7860:	f000 fce6 	bl	8230 <cc2400_status>
    7864:	06c5      	lsls	r5, r0, #27
    7866:	d5fb      	bpl.n	7860 <cc2400_repeater+0x90>
			USRLED_SET;
    7868:	4b33      	ldr	r3, [pc, #204]	; (7938 <cc2400_repeater+0x168>)
    786a:	2202      	movs	r2, #2
    786c:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    786e:	2400      	movs	r4, #0
				buf[i] = cc2400_get8(FIFOREG);
    7870:	2070      	movs	r0, #112	; 0x70
    7872:	f000 fc3f 	bl	80f4 <cc2400_get8>
    7876:	f80d 0004 	strb.w	r0, [sp, r4]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    787a:	3401      	adds	r4, #1
    787c:	2c16      	cmp	r4, #22
    787e:	d1f7      	bne.n	7870 <cc2400_repeater+0xa0>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    7880:	f000 fcd6 	bl	8230 <cc2400_status>
    7884:	0704      	lsls	r4, r0, #28
    7886:	d5de      	bpl.n	7846 <cc2400_repeater+0x76>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
    7888:	4b2c      	ldr	r3, [pc, #176]	; (793c <cc2400_repeater+0x16c>)
    788a:	2202      	movs	r2, #2
    788c:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    788e:	2210      	movs	r2, #16
    7890:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    7892:	2064      	movs	r0, #100	; 0x64
    7894:	f000 fcd3 	bl	823e <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7898:	f000 fcca 	bl	8230 <cc2400_status>
    789c:	0740      	lsls	r0, r0, #29
    789e:	d4fb      	bmi.n	7898 <cc2400_repeater+0xc8>
		while (!(cc2400_status() & XOSC16M_STABLE));
    78a0:	f000 fcc6 	bl	8230 <cc2400_status>
    78a4:	0641      	lsls	r1, r0, #25
    78a6:	d5fb      	bpl.n	78a0 <cc2400_repeater+0xd0>
		cc2400_set(FSDIV, *chan_ptr);
    78a8:	8839      	ldrh	r1, [r7, #0]
    78aa:	2002      	movs	r0, #2
    78ac:	b289      	uxth	r1, r1
    78ae:	f000 fc1c 	bl	80ea <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    78b2:	f000 fcbd 	bl	8230 <cc2400_status>
    78b6:	0642      	lsls	r2, r0, #25
    78b8:	d5fb      	bpl.n	78b2 <cc2400_repeater+0xe2>
		cc2400_strobe(SFSON);
    78ba:	2061      	movs	r0, #97	; 0x61
    78bc:	f000 fcbf 	bl	823e <cc2400_strobe>
		TXLED_SET;
    78c0:	4b1d      	ldr	r3, [pc, #116]	; (7938 <cc2400_repeater+0x168>)
    78c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    78c6:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    78c8:	2315      	movs	r3, #21
    78ca:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    78ce:	2301      	movs	r3, #1
    78d0:	f88d 3001 	strb.w	r3, [sp, #1]
		for (pa = 0; pa < 8; pa++) {
    78d4:	2400      	movs	r4, #0
			cc2400_set(FREND, 8 | pa);
    78d6:	2005      	movs	r0, #5
    78d8:	f044 0108 	orr.w	r1, r4, #8
    78dc:	f000 fc05 	bl	80ea <cc2400_set>
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    78e0:	2500      	movs	r5, #0
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
    78e2:	f88d 4014 	strb.w	r4, [sp, #20]
			for (i = 0; i < 16; i++) {
				buf[21] = i;
    78e6:	f88d 5015 	strb.w	r5, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    78ea:	200e      	movs	r0, #14
    78ec:	f000 fbf4 	bl	80d8 <cc2400_get>
    78f0:	f000 001f 	and.w	r0, r0, #31
    78f4:	280f      	cmp	r0, #15
    78f6:	d1f8      	bne.n	78ea <cc2400_repeater+0x11a>
    78f8:	2600      	movs	r6, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    78fa:	f81d 1006 	ldrb.w	r1, [sp, r6]
    78fe:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7900:	3601      	adds	r6, #1
					cc2400_set8(FIFOREG, buf[j]);
    7902:	f000 fc00 	bl	8106 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7906:	2e16      	cmp	r6, #22
    7908:	d1f7      	bne.n	78fa <cc2400_repeater+0x12a>
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    790a:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    790c:	3501      	adds	r5, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    790e:	f000 fc96 	bl	823e <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7912:	2d10      	cmp	r5, #16
    7914:	d1e7      	bne.n	78e6 <cc2400_repeater+0x116>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    7916:	3401      	adds	r4, #1
    7918:	b2e4      	uxtb	r4, r4
    791a:	2c08      	cmp	r4, #8
    791c:	d1db      	bne.n	78d6 <cc2400_repeater+0x106>
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    791e:	4b07      	ldr	r3, [pc, #28]	; (793c <cc2400_repeater+0x16c>)
    7920:	f44f 7280 	mov.w	r2, #256	; 0x100
    7924:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    7926:	2064      	movs	r0, #100	; 0x64
    7928:	f000 fc89 	bl	823e <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    792c:	f000 fc80 	bl	8230 <cc2400_status>
    7930:	0743      	lsls	r3, r0, #29
    7932:	d4fb      	bmi.n	792c <cc2400_repeater+0x15c>
    7934:	e74f      	b.n	77d6 <cc2400_repeater+0x6>
    7936:	bf00      	nop
    7938:	2009c038 	.word	0x2009c038
    793c:	2009c03c 	.word	0x2009c03c

00007940 <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    7940:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    7942:	7803      	ldrb	r3, [r0, #0]
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    7944:	460d      	mov	r5, r1
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    7946:	b123      	cbz	r3, 7952 <cc2400_txtest+0x12>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    7948:	7803      	ldrb	r3, [r0, #0]
    794a:	2b01      	cmp	r3, #1
    794c:	d12f      	bne.n	79ae <cc2400_txtest+0x6e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    794e:	2440      	movs	r4, #64	; 0x40
    7950:	e000      	b.n	7954 <cc2400_txtest+0x14>
void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    7952:	2429      	movs	r4, #41	; 0x29
		mdmctrl = 0x0040; // 250 kHz frequency deviation
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    7954:	2012      	movs	r0, #18
    7956:	f642 3122 	movw	r1, #11042	; 0x2b22
    795a:	f000 fbc6 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    795e:	2014      	movs	r0, #20
    7960:	f243 314b 	movw	r1, #13131	; 0x334b
    7964:	f000 fbc1 	bl	80ea <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    7968:	2020      	movs	r0, #32
    796a:	f640 51f1 	movw	r1, #3569	; 0xdf1
    796e:	f000 fbbc 	bl	80ea <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    7972:	8829      	ldrh	r1, [r5, #0]
    7974:	2002      	movs	r0, #2
    7976:	b289      	uxth	r1, r1
    7978:	f000 fbb7 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    797c:	2003      	movs	r0, #3
    797e:	4621      	mov	r1, r4
    7980:	f000 fbb3 	bl	80ea <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7984:	f000 fc54 	bl	8230 <cc2400_status>
    7988:	0641      	lsls	r1, r0, #25
    798a:	d5fb      	bpl.n	7984 <cc2400_txtest+0x44>
	cc2400_strobe(SFSON);
    798c:	2061      	movs	r0, #97	; 0x61
    798e:	f000 fc56 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7992:	f000 fc4d 	bl	8230 <cc2400_status>
    7996:	0742      	lsls	r2, r0, #29
    7998:	d5fb      	bpl.n	7992 <cc2400_txtest+0x52>
	TXLED_SET;
    799a:	4b05      	ldr	r3, [pc, #20]	; (79b0 <cc2400_txtest+0x70>)
    799c:	f44f 7280 	mov.w	r2, #256	; 0x100
    79a0:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    79a2:	2063      	movs	r0, #99	; 0x63
    79a4:	f000 fc4b 	bl	823e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    79a8:	4b02      	ldr	r3, [pc, #8]	; (79b4 <cc2400_txtest+0x74>)
    79aa:	2280      	movs	r2, #128	; 0x80
    79ac:	601a      	str	r2, [r3, #0]
    79ae:	bd38      	pop	{r3, r4, r5, pc}
    79b0:	2009c038 	.word	0x2009c038
    79b4:	2009c058 	.word	0x2009c058

000079b8 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    79b8:	4b04      	ldr	r3, [pc, #16]	; (79cc <ssp_stop+0x14>)
    79ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    79be:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    79c0:	4b03      	ldr	r3, [pc, #12]	; (79d0 <ssp_stop+0x18>)
    79c2:	681a      	ldr	r2, [r3, #0]
    79c4:	f022 0202 	bic.w	r2, r2, #2
    79c8:	601a      	str	r2, [r3, #0]
    79ca:	4770      	bx	lr
    79cc:	2009c098 	.word	0x2009c098
    79d0:	40030004 	.word	0x40030004

000079d4 <do_rx>:
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    79d4:	2300      	movs	r3, #0
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    79d6:	4a05      	ldr	r2, [pc, #20]	; (79ec <do_rx+0x18>)
    79d8:	6812      	ldr	r2, [r2, #0]
    79da:	0752      	lsls	r2, r2, #29
    79dc:	d5fb      	bpl.n	79d6 <do_rx+0x2>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    79de:	4a04      	ldr	r2, [pc, #16]	; (79f0 <do_rx+0x1c>)
    79e0:	6812      	ldr	r2, [r2, #0]
    79e2:	54c2      	strb	r2, [r0, r3]
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    79e4:	3301      	adds	r3, #1
    79e6:	2b24      	cmp	r3, #36	; 0x24
    79e8:	d1f5      	bne.n	79d6 <do_rx+0x2>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    79ea:	4770      	bx	lr
    79ec:	4003000c 	.word	0x4003000c
    79f0:	40030008 	.word	0x40030008

000079f4 <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    79f4:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    79f6:	4b08      	ldr	r3, [pc, #32]	; (7a18 <sleep_ms+0x24>)
    79f8:	4a08      	ldr	r2, [pc, #32]	; (7a1c <sleep_ms+0x28>)
    79fa:	681b      	ldr	r3, [r3, #0]
    79fc:	6812      	ldr	r2, [r2, #0]
    79fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7a02:	f640 4435 	movw	r4, #3125	; 0xc35
    7a06:	fb04 2303 	mla	r3, r4, r3, r2
    7a0a:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    7a0c:	f242 7310 	movw	r3, #10000	; 0x2710
    7a10:	4359      	muls	r1, r3
    7a12:	60c1      	str	r1, [r0, #12]
    7a14:	bd10      	pop	{r4, pc}
    7a16:	bf00      	nop
    7a18:	10000bc4 	.word	0x10000bc4
    7a1c:	40004008 	.word	0x40004008

00007a20 <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    7a20:	4b0b      	ldr	r3, [pc, #44]	; (7a50 <sleep_elapsed+0x30>)
    7a22:	4a0c      	ldr	r2, [pc, #48]	; (7a54 <sleep_elapsed+0x34>)
    7a24:	681b      	ldr	r3, [r3, #0]
    7a26:	6812      	ldr	r2, [r2, #0]
    7a28:	f640 4135 	movw	r1, #3125	; 0xc35
    7a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7a30:	fb01 2303 	mla	r3, r1, r3, r2
	if (now < state->sleep_start)
    7a34:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    7a36:	68c0      	ldr	r0, [r0, #12]
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
	if (now < state->sleep_start)
    7a38:	4293      	cmp	r3, r2
		now += 3276800000;
    7a3a:	bf3c      	itt	cc
    7a3c:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    7a40:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    7a44:	1a9b      	subs	r3, r3, r2
}
    7a46:	4283      	cmp	r3, r0
    7a48:	bf34      	ite	cc
    7a4a:	2000      	movcc	r0, #0
    7a4c:	2001      	movcs	r0, #1
    7a4e:	4770      	bx	lr
    7a50:	10000bc4 	.word	0x10000bc4
    7a54:	40004008 	.word	0x40004008

00007a58 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    7a58:	4770      	bx	lr
    7a5a:	0000      	movs	r0, r0

00007a5c <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    7a5c:	2300      	movs	r3, #0
    7a5e:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    7a60:	4b03      	ldr	r3, [pc, #12]	; (7a70 <init_state+0x14>)
    7a62:	f640 1268 	movw	r2, #2408	; 0x968
    7a66:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    7a68:	2301      	movs	r3, #1
    7a6a:	7003      	strb	r3, [r0, #0]
    7a6c:	4770      	bx	lr
    7a6e:	bf00      	nop
    7a70:	10000448 	.word	0x10000448

00007a74 <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    7a74:	2301      	movs	r3, #1
    7a76:	7003      	strb	r3, [r0, #0]
    7a78:	4770      	bx	lr
    7a7a:	0000      	movs	r0, r0

00007a7c <start_rf_state>:
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    7a7c:	b510      	push	{r4, lr}
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    7a7e:	f647 71ff 	movw	r1, #32767	; 0x7fff
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    7a82:	4604      	mov	r4, r0
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    7a84:	200d      	movs	r0, #13
    7a86:	f000 fb30 	bl	80ea <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7a8a:	2012      	movs	r0, #18
    7a8c:	f642 3122 	movw	r1, #11042	; 0x2b22
    7a90:	f000 fb2b 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7a94:	2014      	movs	r0, #20
    7a96:	f241 314b 	movw	r1, #4939	; 0x134b
    7a9a:	f000 fb26 	bl	80ea <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    7a9e:	2020      	movs	r0, #32
    7aa0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    7aa4:	f000 fb21 	bl	80ea <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    7aa8:	4b1e      	ldr	r3, [pc, #120]	; (7b24 <start_rf_state+0xa8>)
    7aaa:	2002      	movs	r0, #2
    7aac:	8819      	ldrh	r1, [r3, #0]
    7aae:	b289      	uxth	r1, r1
    7ab0:	3901      	subs	r1, #1
    7ab2:	b289      	uxth	r1, r1
    7ab4:	f000 fb19 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    7ab8:	2003      	movs	r0, #3
    7aba:	2126      	movs	r1, #38	; 0x26
    7abc:	f000 fb15 	bl	80ea <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    7ac0:	2021      	movs	r0, #33	; 0x21
    7ac2:	2103      	movs	r1, #3
    7ac4:	f000 fb11 	bl	80ea <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    7ac8:	202d      	movs	r0, #45	; 0x2d
    7aca:	f246 310f 	movw	r1, #25359	; 0x630f
    7ace:	f000 fb0c 	bl	80ea <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    7ad2:	202c      	movs	r0, #44	; 0x2c
    7ad4:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    7ad8:	f000 fb07 	bl	80ea <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7adc:	f000 fba8 	bl	8230 <cc2400_status>
    7ae0:	0640      	lsls	r0, r0, #25
    7ae2:	d5fb      	bpl.n	7adc <start_rf_state+0x60>
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    7ae4:	4a10      	ldr	r2, [pc, #64]	; (7b28 <start_rf_state+0xac>)
    7ae6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7aea:	6013      	str	r3, [r2, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7aec:	4a0f      	ldr	r2, [pc, #60]	; (7b2c <start_rf_state+0xb0>)

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    7aee:	2061      	movs	r0, #97	; 0x61
static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7af0:	6811      	ldr	r1, [r2, #0]
    7af2:	f041 0102 	orr.w	r1, r1, #2
    7af6:	6011      	str	r1, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    7af8:	4a0d      	ldr	r2, [pc, #52]	; (7b30 <start_rf_state+0xb4>)
    7afa:	6013      	str	r3, [r2, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    7afc:	f000 fb9f 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7b00:	f000 fb96 	bl	8230 <cc2400_status>
    7b04:	0741      	lsls	r1, r0, #29
    7b06:	d5fb      	bpl.n	7b00 <start_rf_state+0x84>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7b08:	200e      	movs	r0, #14
    7b0a:	f000 fae5 	bl	80d8 <cc2400_get>
    7b0e:	f000 001f 	and.w	r0, r0, #31
    7b12:	280f      	cmp	r0, #15
    7b14:	d1f8      	bne.n	7b08 <start_rf_state+0x8c>

	cc2400_strobe(SRX);
    7b16:	2062      	movs	r0, #98	; 0x62
    7b18:	f000 fb91 	bl	823e <cc2400_strobe>
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
    7b1c:	2302      	movs	r3, #2
    7b1e:	7023      	strb	r3, [r4, #0]
    7b20:	bd10      	pop	{r4, pc}
    7b22:	bf00      	nop
    7b24:	10000448 	.word	0x10000448
    7b28:	2009c098 	.word	0x2009c098
    7b2c:	40030004 	.word	0x40030004
    7b30:	2009c09c 	.word	0x2009c09c

00007b34 <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    7b34:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    7b36:	f647 71ff 	movw	r1, #32767	; 0x7fff
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    7b3a:	4604      	mov	r4, r0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    7b3c:	200d      	movs	r0, #13
    7b3e:	f000 fad4 	bl	80ea <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7b42:	2012      	movs	r0, #18
    7b44:	f642 3122 	movw	r1, #11042	; 0x2b22
    7b48:	f000 facf 	bl	80ea <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    7b4c:	2014      	movs	r0, #20
    7b4e:	f243 314b 	movw	r1, #13131	; 0x334b
    7b52:	f000 faca 	bl	80ea <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    7b56:	2020      	movs	r0, #32
    7b58:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    7b5c:	f000 fac5 	bl	80ea <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    7b60:	4b1a      	ldr	r3, [pc, #104]	; (7bcc <start_jamming_state+0x98>)
    7b62:	2002      	movs	r0, #2
    7b64:	8819      	ldrh	r1, [r3, #0]
    7b66:	b289      	uxth	r1, r1
    7b68:	f000 fabf 	bl	80ea <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    7b6c:	2003      	movs	r0, #3
    7b6e:	2126      	movs	r1, #38	; 0x26
    7b70:	f000 fabb 	bl	80ea <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    7b74:	2021      	movs	r0, #33	; 0x21
    7b76:	2103      	movs	r1, #3
    7b78:	f000 fab7 	bl	80ea <cc2400_set>
	cc2400_set(FREND, 0xf);
    7b7c:	2005      	movs	r0, #5
    7b7e:	210f      	movs	r1, #15
    7b80:	f000 fab3 	bl	80ea <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7b84:	f000 fb54 	bl	8230 <cc2400_status>
    7b88:	0642      	lsls	r2, r0, #25
    7b8a:	d5fb      	bpl.n	7b84 <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    7b8c:	2061      	movs	r0, #97	; 0x61
    7b8e:	f000 fb56 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7b92:	f000 fb4d 	bl	8230 <cc2400_status>
    7b96:	0743      	lsls	r3, r0, #29
    7b98:	d5fb      	bpl.n	7b92 <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7b9a:	200e      	movs	r0, #14
    7b9c:	f000 fa9c 	bl	80d8 <cc2400_get>
    7ba0:	f000 001f 	and.w	r0, r0, #31
    7ba4:	280f      	cmp	r0, #15
    7ba6:	d1f8      	bne.n	7b9a <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7ba8:	4b09      	ldr	r3, [pc, #36]	; (7bd0 <start_jamming_state+0x9c>)
    7baa:	2280      	movs	r2, #128	; 0x80
    7bac:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    7bae:	2063      	movs	r0, #99	; 0x63
    7bb0:	f000 fb45 	bl	823e <cc2400_strobe>
	TXLED_SET;
    7bb4:	4b07      	ldr	r3, [pc, #28]	; (7bd4 <start_jamming_state+0xa0>)
    7bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
    7bba:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    7bbc:	2305      	movs	r3, #5
    7bbe:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7bc0:	69a3      	ldr	r3, [r4, #24]
    7bc2:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7bc4:	f644 6320 	movw	r3, #20000	; 0x4e20
    7bc8:	60e3      	str	r3, [r4, #12]
    7bca:	bd10      	pop	{r4, pc}
    7bcc:	10000448 	.word	0x10000448
    7bd0:	2009c058 	.word	0x2009c058
    7bd4:	2009c038 	.word	0x2009c038

00007bd8 <sleep_state>:
		ssp_stop();
		state->timer_active = 1;
	}
}

static void sleep_state(ego_fsm_state_t *state) {
    7bd8:	b510      	push	{r4, lr}
    7bda:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7bdc:	f7ff ff20 	bl	7a20 <sleep_elapsed>
    7be0:	b1b0      	cbz	r0, 7c10 <sleep_state+0x38>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7be2:	6863      	ldr	r3, [r4, #4]
    7be4:	1c5a      	adds	r2, r3, #1
    7be6:	4b0b      	ldr	r3, [pc, #44]	; (7c14 <sleep_state+0x3c>)
    7be8:	4013      	ands	r3, r2
    7bea:	2b00      	cmp	r3, #0
    7bec:	da03      	bge.n	7bf6 <sleep_state+0x1e>
    7bee:	3b01      	subs	r3, #1
    7bf0:	f063 0303 	orn	r3, r3, #3
    7bf4:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    7bf6:	4a08      	ldr	r2, [pc, #32]	; (7c18 <sleep_state+0x40>)
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7bf8:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    7bfa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    7bfe:	4b07      	ldr	r3, [pc, #28]	; (7c1c <sleep_state+0x44>)

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    7c00:	4620      	mov	r0, r4
    7c02:	2107      	movs	r1, #7

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
		channel = channels[state->channel_index];
    7c04:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    7c06:	f7ff fef5 	bl	79f4 <sleep_ms>
		state->timer_active = 1;
    7c0a:	2301      	movs	r3, #1
    7c0c:	6123      	str	r3, [r4, #16]

		state->state = EGO_ST_START_RX;
    7c0e:	7023      	strb	r3, [r4, #0]
    7c10:	bd10      	pop	{r4, pc}
    7c12:	bf00      	nop
    7c14:	80000003 	.word	0x80000003
    7c18:	0000970c 	.word	0x0000970c
    7c1c:	10000448 	.word	0x10000448

00007c20 <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    7c20:	b510      	push	{r4, lr}
    7c22:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7c24:	f7ff fefc 	bl	7a20 <sleep_elapsed>
    7c28:	b130      	cbz	r0, 7c38 <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    7c2a:	2301      	movs	r3, #1
    7c2c:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    7c2e:	6123      	str	r3, [r4, #16]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7c30:	69a3      	ldr	r3, [r4, #24]
    7c32:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7c34:	4b01      	ldr	r3, [pc, #4]	; (7c3c <jam_sleep_state+0x1c>)
    7c36:	60e3      	str	r3, [r4, #12]
    7c38:	bd10      	pop	{r4, pc}
    7c3a:	bf00      	nop
    7c3c:	0001adb0 	.word	0x0001adb0

00007c40 <jamming_state>:

	state->state = EGO_ST_JAMMING;
	sleep_ms_anchor(state, 2);
}

void jamming_state(ego_fsm_state_t *state) {
    7c40:	b510      	push	{r4, lr}
    7c42:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    7c44:	f7ff feec 	bl	7a20 <sleep_elapsed>
    7c48:	b300      	cbz	r0, 7c8c <jamming_state+0x4c>
		cc2400_strobe(SRFOFF);
    7c4a:	2064      	movs	r0, #100	; 0x64
    7c4c:	f000 faf7 	bl	823e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    7c50:	4b0f      	ldr	r3, [pc, #60]	; (7c90 <jamming_state+0x50>)
    7c52:	2280      	movs	r2, #128	; 0x80
    7c54:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    7c56:	f44f 7280 	mov.w	r2, #256	; 0x100
    7c5a:	f843 2c20 	str.w	r2, [r3, #-32]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7c5e:	6863      	ldr	r3, [r4, #4]
    7c60:	1c5a      	adds	r2, r3, #1
    7c62:	4b0c      	ldr	r3, [pc, #48]	; (7c94 <jamming_state+0x54>)
    7c64:	4013      	ands	r3, r2
    7c66:	2b00      	cmp	r3, #0
    7c68:	da03      	bge.n	7c72 <jamming_state+0x32>
    7c6a:	3b01      	subs	r3, #1
    7c6c:	f063 0303 	orn	r3, r3, #3
    7c70:	3301      	adds	r3, #1
		channel = channels[state->channel_index];
    7c72:	4a09      	ldr	r2, [pc, #36]	; (7c98 <jamming_state+0x58>)
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    7c74:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    7c76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    7c7a:	4b08      	ldr	r3, [pc, #32]	; (7c9c <jamming_state+0x5c>)
    7c7c:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    7c7e:	2303      	movs	r3, #3
    7c80:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    7c82:	69a3      	ldr	r3, [r4, #24]
    7c84:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    7c86:	f64e 2360 	movw	r3, #60000	; 0xea60
    7c8a:	60e3      	str	r3, [r4, #12]
    7c8c:	bd10      	pop	{r4, pc}
    7c8e:	bf00      	nop
    7c90:	2009c05c 	.word	0x2009c05c
    7c94:	80000003 	.word	0x80000003
    7c98:	0000970c 	.word	0x0000970c
    7c9c:	10000448 	.word	0x10000448

00007ca0 <continuous_cap_state>:
// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
    7ca0:	b510      	push	{r4, lr}
    7ca2:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    7ca4:	2100      	movs	r1, #0
    7ca6:	2228      	movs	r2, #40	; 0x28
    7ca8:	4668      	mov	r0, sp
    7caa:	f7fc fac1 	bl	4230 <memset>
		.rxtime = CLK100NS,
    7cae:	4b17      	ldr	r3, [pc, #92]	; (7d0c <continuous_cap_state+0x6c>)
    7cb0:	4a17      	ldr	r2, [pc, #92]	; (7d10 <continuous_cap_state+0x70>)
    7cb2:	681b      	ldr	r3, [r3, #0]
    7cb4:	6812      	ldr	r2, [r2, #0]
    7cb6:	f640 4135 	movw	r1, #3125	; 0xc35
    7cba:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7cbe:	fb01 2303 	mla	r3, r1, r3, r2
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    7cc2:	9309      	str	r3, [sp, #36]	; 0x24
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7cc4:	f000 fab4 	bl	8230 <cc2400_status>
static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    7cc8:	06c0      	lsls	r0, r0, #27
    7cca:	d51d      	bpl.n	7d08 <continuous_cap_state+0x68>
		RXLED_SET;
    7ccc:	4b11      	ldr	r3, [pc, #68]	; (7d14 <continuous_cap_state+0x74>)
    7cce:	2410      	movs	r4, #16
    7cd0:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    7cd2:	4668      	mov	r0, sp
    7cd4:	f7ff fe7e 	bl	79d4 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    7cd8:	2006      	movs	r0, #6
    7cda:	4669      	mov	r1, sp
    7cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7cde:	f7fd f975 	bl	4fcc <enqueue_with_ts>
		RXLED_CLR;
    7ce2:	4b0d      	ldr	r3, [pc, #52]	; (7d18 <continuous_cap_state+0x78>)

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    7ce4:	2061      	movs	r0, #97	; 0x61

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    7ce6:	601c      	str	r4, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    7ce8:	f000 faa9 	bl	823e <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7cec:	f000 faa0 	bl	8230 <cc2400_status>
    7cf0:	0741      	lsls	r1, r0, #29
    7cf2:	d5fb      	bpl.n	7cec <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7cf4:	200e      	movs	r0, #14
    7cf6:	f000 f9ef 	bl	80d8 <cc2400_get>
    7cfa:	f000 001f 	and.w	r0, r0, #31
    7cfe:	280f      	cmp	r0, #15
    7d00:	d1f8      	bne.n	7cf4 <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    7d02:	2062      	movs	r0, #98	; 0x62
    7d04:	f000 fa9b 	bl	823e <cc2400_strobe>
	}
}
    7d08:	b00a      	add	sp, #40	; 0x28
    7d0a:	bd10      	pop	{r4, pc}
    7d0c:	10000bc4 	.word	0x10000bc4
    7d10:	40004008 	.word	0x40004008
    7d14:	2009c038 	.word	0x2009c038
    7d18:	2009c03c 	.word	0x2009c03c

00007d1c <jam_cap_state>:

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
    7d1c:	b510      	push	{r4, lr}
    7d1e:	4604      	mov	r4, r0
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7d20:	f000 fa86 	bl	8230 <cc2400_status>
	}
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
    7d24:	06c3      	lsls	r3, r0, #27
    7d26:	d50e      	bpl.n	7d46 <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
    7d28:	2304      	movs	r3, #4
    7d2a:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    7d2c:	2301      	movs	r3, #1
    7d2e:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    7d30:	4b11      	ldr	r3, [pc, #68]	; (7d78 <jam_cap_state+0x5c>)
    7d32:	4a12      	ldr	r2, [pc, #72]	; (7d7c <jam_cap_state+0x60>)
    7d34:	681b      	ldr	r3, [r3, #0]
    7d36:	6812      	ldr	r2, [r2, #0]
    7d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7d3c:	f640 4135 	movw	r1, #3125	; 0xc35
    7d40:	fb01 2303 	mla	r3, r1, r3, r2
    7d44:	61a3      	str	r3, [r4, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    7d46:	6923      	ldr	r3, [r4, #16]
    7d48:	b15b      	cbz	r3, 7d62 <jam_cap_state+0x46>
    7d4a:	4620      	mov	r0, r4
    7d4c:	f7ff fe68 	bl	7a20 <sleep_elapsed>
    7d50:	b138      	cbz	r0, 7d62 <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    7d52:	2304      	movs	r3, #4
    7d54:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    7d56:	2300      	movs	r3, #0
    7d58:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    7d5a:	4620      	mov	r0, r4
    7d5c:	210b      	movs	r1, #11
    7d5e:	f7ff fe49 	bl	79f4 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    7d62:	7823      	ldrb	r3, [r4, #0]
    7d64:	2b02      	cmp	r3, #2
    7d66:	d006      	beq.n	7d76 <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    7d68:	2064      	movs	r0, #100	; 0x64
    7d6a:	f000 fa68 	bl	823e <cc2400_strobe>
		ssp_stop();
	}
}
    7d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
		cc2400_strobe(SRFOFF);
		ssp_stop();
    7d72:	f7ff be21 	b.w	79b8 <ssp_stop>
    7d76:	bd10      	pop	{r4, pc}
    7d78:	10000bc4 	.word	0x10000bc4
    7d7c:	40004008 	.word	0x40004008

00007d80 <cap_state>:
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    7d80:	b530      	push	{r4, r5, lr}
    7d82:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    7d84:	2100      	movs	r1, #0
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    7d86:	4604      	mov	r4, r0
	ego_packet_t packet = {
    7d88:	2228      	movs	r2, #40	; 0x28
    7d8a:	4668      	mov	r0, sp
    7d8c:	f7fc fa50 	bl	4230 <memset>
		.rxtime = CLK100NS,
    7d90:	4b1b      	ldr	r3, [pc, #108]	; (7e00 <cap_state+0x80>)
    7d92:	4a1c      	ldr	r2, [pc, #112]	; (7e04 <cap_state+0x84>)
    7d94:	681b      	ldr	r3, [r3, #0]
    7d96:	6812      	ldr	r2, [r2, #0]
    7d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7d9c:	f640 4135 	movw	r1, #3125	; 0xc35
    7da0:	fb01 2303 	mla	r3, r1, r3, r2
	};

	if (sleep_elapsed(state)) {
    7da4:	4620      	mov	r0, r4
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    7da6:	9309      	str	r3, [sp, #36]	; 0x24
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    7da8:	f7ff fe3a 	bl	7a20 <sleep_elapsed>
    7dac:	b128      	cbz	r0, 7dba <cap_state+0x3a>
		sleep_ms(state, 4);
    7dae:	4620      	mov	r0, r4
    7db0:	2104      	movs	r1, #4
    7db2:	f7ff fe1f 	bl	79f4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    7db6:	2303      	movs	r3, #3
    7db8:	7023      	strb	r3, [r4, #0]
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    7dba:	f000 fa39 	bl	8230 <cc2400_status>
	if (sleep_elapsed(state)) {
		sleep_ms(state, 4);
		state->state = EGO_ST_SLEEP;
	}

	if (sync_received()) {
    7dbe:	06c2      	lsls	r2, r0, #27
    7dc0:	d512      	bpl.n	7de8 <cap_state+0x68>
		RXLED_SET;
    7dc2:	4b11      	ldr	r3, [pc, #68]	; (7e08 <cap_state+0x88>)
    7dc4:	2510      	movs	r5, #16
    7dc6:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    7dc8:	4668      	mov	r0, sp
    7dca:	f7ff fe03 	bl	79d4 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    7dce:	4669      	mov	r1, sp
    7dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7dd2:	2006      	movs	r0, #6
    7dd4:	f7fd f8fa 	bl	4fcc <enqueue_with_ts>
		RXLED_CLR;
    7dd8:	4b0c      	ldr	r3, [pc, #48]	; (7e0c <cap_state+0x8c>)

		sleep_ms(state, 6);
    7dda:	4620      	mov	r0, r4

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    7ddc:	601d      	str	r5, [r3, #0]

		sleep_ms(state, 6);
    7dde:	2106      	movs	r1, #6
    7de0:	f7ff fe08 	bl	79f4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    7de4:	2303      	movs	r3, #3
    7de6:	7023      	strb	r3, [r4, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    7de8:	7823      	ldrb	r3, [r4, #0]
    7dea:	2b02      	cmp	r3, #2
    7dec:	d006      	beq.n	7dfc <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    7dee:	2064      	movs	r0, #100	; 0x64
    7df0:	f000 fa25 	bl	823e <cc2400_strobe>
		ssp_stop();
    7df4:	f7ff fde0 	bl	79b8 <ssp_stop>
		state->timer_active = 1;
    7df8:	2301      	movs	r3, #1
    7dfa:	6123      	str	r3, [r4, #16]
	}
}
    7dfc:	b00b      	add	sp, #44	; 0x2c
    7dfe:	bd30      	pop	{r4, r5, pc}
    7e00:	10000bc4 	.word	0x10000bc4
    7e04:	40004008 	.word	0x40004008
    7e08:	2009c038 	.word	0x2009c038
    7e0c:	2009c03c 	.word	0x2009c03c

00007e10 <ego_main>:
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    7e10:	b530      	push	{r4, r5, lr}
    7e12:	b089      	sub	sp, #36	; 0x24
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    7e14:	2100      	movs	r1, #0
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    7e16:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    7e18:	221c      	movs	r2, #28
    7e1a:	a801      	add	r0, sp, #4
    7e1c:	f7fc fa08 	bl	4230 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    7e20:	2c01      	cmp	r4, #1
    7e22:	4d14      	ldr	r5, [pc, #80]	; (7e74 <ego_main+0x64>)
    7e24:	d009      	beq.n	7e3a <ego_main+0x2a>
    7e26:	d306      	bcc.n	7e36 <ego_main+0x26>
    7e28:	2c02      	cmp	r4, #2
    7e2a:	d101      	bne.n	7e30 <ego_main+0x20>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
			break;
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    7e2c:	4c12      	ldr	r4, [pc, #72]	; (7e78 <ego_main+0x68>)
			break;
    7e2e:	e005      	b.n	7e3c <ego_main+0x2c>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    7e30:	2300      	movs	r3, #0
    7e32:	702b      	strb	r3, [r5, #0]
    7e34:	e01b      	b.n	7e6e <ego_main+0x5e>
		jamming_state,
	};

	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
    7e36:	4c11      	ldr	r4, [pc, #68]	; (7e7c <ego_main+0x6c>)
    7e38:	e000      	b.n	7e3c <ego_main+0x2c>
			break;
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    7e3a:	4c11      	ldr	r4, [pc, #68]	; (7e80 <ego_main+0x70>)
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
}

static void ego_init(void) {
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    7e3c:	4b11      	ldr	r3, [pc, #68]	; (7e84 <ego_main+0x74>)
    7e3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7e42:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    7e44:	f000 f8c0 	bl	7fc8 <dio_ssp_init>
	}

	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
    7e48:	782b      	ldrb	r3, [r5, #0]
    7e4a:	2b0d      	cmp	r3, #13
    7e4c:	d106      	bne.n	7e5c <ego_main+0x4c>
			break;
		handler[state.state](&state);
    7e4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7e52:	a801      	add	r0, sp, #4
    7e54:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7e58:	4798      	blx	r3
	}
    7e5a:	e7f5      	b.n	7e48 <ego_main+0x38>

	dio_ssp_init();
}

static void ego_deinit(void) {
	cc2400_strobe(SRFOFF);
    7e5c:	2064      	movs	r0, #100	; 0x64
    7e5e:	f000 f9ee 	bl	823e <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    7e62:	f7ff fda9 	bl	79b8 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    7e66:	4b08      	ldr	r3, [pc, #32]	; (7e88 <ego_main+0x78>)
    7e68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7e6c:	601a      	str	r2, [r3, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    7e6e:	b009      	add	sp, #36	; 0x24
    7e70:	bd30      	pop	{r4, r5, pc}
    7e72:	bf00      	nop
    7e74:	10000a2e 	.word	0x10000a2e
    7e78:	00009748 	.word	0x00009748
    7e7c:	00009714 	.word	0x00009714
    7e80:	00009730 	.word	0x00009730
    7e84:	e000e100 	.word	0xe000e100
    7e88:	e000e180 	.word	0xe000e180

00007e8c <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    7e8c:	f000 bcea 	b.w	8864 <USBHwISR>

00007e90 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    7e90:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    7e92:	2300      	movs	r3, #0
    7e94:	4a0c      	ldr	r2, [pc, #48]	; (7ec8 <Reset_Handler+0x38>)
    7e96:	490d      	ldr	r1, [pc, #52]	; (7ecc <Reset_Handler+0x3c>)
    7e98:	1898      	adds	r0, r3, r2
    7e9a:	4288      	cmp	r0, r1
    7e9c:	d204      	bcs.n	7ea8 <Reset_Handler+0x18>
	{
		*dest++ = *src++;
    7e9e:	490c      	ldr	r1, [pc, #48]	; (7ed0 <Reset_Handler+0x40>)
    7ea0:	5859      	ldr	r1, [r3, r1]
    7ea2:	5099      	str	r1, [r3, r2]
    7ea4:	3304      	adds	r3, #4
    7ea6:	e7f5      	b.n	7e94 <Reset_Handler+0x4>
{
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    7ea8:	4b0a      	ldr	r3, [pc, #40]	; (7ed4 <Reset_Handler+0x44>)
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    7eaa:	4a0b      	ldr	r2, [pc, #44]	; (7ed8 <Reset_Handler+0x48>)
    7eac:	4293      	cmp	r3, r2
    7eae:	d203      	bcs.n	7eb8 <Reset_Handler+0x28>
	{
		*src++ = 0;
    7eb0:	2200      	movs	r2, #0
    7eb2:	f843 2b04 	str.w	r2, [r3], #4
    7eb6:	e7f8      	b.n	7eaa <Reset_Handler+0x1a>
	}

	__libc_init_array();
    7eb8:	f7fc f98c 	bl	41d4 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    7ebc:	4b07      	ldr	r3, [pc, #28]	; (7edc <Reset_Handler+0x4c>)
    7ebe:	4a08      	ldr	r2, [pc, #32]	; (7ee0 <Reset_Handler+0x50>)
    7ec0:	601a      	str	r2, [r3, #0]

	main();
    7ec2:	f7fe fdb1 	bl	6a28 <main>
    7ec6:	e7fe      	b.n	7ec6 <Reset_Handler+0x36>
    7ec8:	10000020 	.word	0x10000020
    7ecc:	100009fd 	.word	0x100009fd
    7ed0:	000097b0 	.word	0x000097b0
    7ed4:	10000a00 	.word	0x10000a00
    7ed8:	10003354 	.word	0x10003354
    7edc:	e000ed08 	.word	0xe000ed08
    7ee0:	00004000 	.word	0x00004000

00007ee4 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    7ee4:	e7fe      	b.n	7ee4 <ADC_IRQHandler>
    7ee6:	0000      	movs	r0, r0

00007ee8 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    7ee8:	4a04      	ldr	r2, [pc, #16]	; (7efc <spi_delay+0x14>)
    7eea:	230a      	movs	r3, #10
    7eec:	6013      	str	r3, [r2, #0]
       while (--delay_counter);
    7eee:	6813      	ldr	r3, [r2, #0]
    7ef0:	3b01      	subs	r3, #1
    7ef2:	6013      	str	r3, [r2, #0]
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	d1fa      	bne.n	7eee <spi_delay+0x6>
}
    7ef8:	4770      	bx	lr
    7efa:	bf00      	nop
    7efc:	10000b00 	.word	0x10000b00

00007f00 <rbit>:
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
  u32 result = 0;
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    7f00:	fa90 f0a0 	rbit	r0, r0
  return result;
}
    7f04:	4770      	bx	lr
    7f06:	0000      	movs	r0, r0

00007f08 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    7f08:	0883      	lsrs	r3, r0, #2
    7f0a:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    7f0e:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    7f12:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    7f16:	eb03 2390 	add.w	r3, r3, r0, lsr #10
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    7f1a:	4a05      	ldr	r2, [pc, #20]	; (7f30 <wait_us+0x28>)
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    7f1c:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    7f20:	6050      	str	r0, [r2, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    7f22:	6853      	ldr	r3, [r2, #4]
    7f24:	3b01      	subs	r3, #1
    7f26:	6053      	str	r3, [r2, #4]
    7f28:	2b00      	cmp	r3, #0
    7f2a:	d1fa      	bne.n	7f22 <wait_us+0x1a>
}
    7f2c:	4770      	bx	lr
    7f2e:	bf00      	nop
    7f30:	10000b00 	.word	0x10000b00

00007f34 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    7f34:	4b01      	ldr	r3, [pc, #4]	; (7f3c <wait+0x8>)
    7f36:	4358      	muls	r0, r3
    7f38:	f7ff bfe6 	b.w	7f08 <wait_us>
    7f3c:	000f4240 	.word	0x000f4240

00007f40 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    7f40:	4a10      	ldr	r2, [pc, #64]	; (7f84 <all_pins_off+0x44>)
    7f42:	2300      	movs	r3, #0
    7f44:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    7f46:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    7f48:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    7f4a:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    7f4c:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    7f4e:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    7f50:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    7f52:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    7f54:	4a0c      	ldr	r2, [pc, #48]	; (7f88 <all_pins_off+0x48>)
    7f56:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    7f58:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    7f5a:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    7f5c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    7f5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    7f62:	4a0a      	ldr	r2, [pc, #40]	; (7f8c <all_pins_off+0x4c>)
    7f64:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    7f66:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    7f68:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    7f6a:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    7f6c:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    7f6e:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    7f70:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    7f72:	4a07      	ldr	r2, [pc, #28]	; (7f90 <all_pins_off+0x50>)
    7f74:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    7f76:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    7f78:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    7f7a:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    7f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    7f80:	4770      	bx	lr
    7f82:	bf00      	nop
    7f84:	4002c000 	.word	0x4002c000
    7f88:	2009c000 	.word	0x2009c000
    7f8c:	4002c040 	.word	0x4002c040
    7f90:	2009c014 	.word	0x2009c014

00007f94 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    7f94:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    7f96:	f7ff ffd3 	bl	7f40 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    7f9a:	4a0a      	ldr	r2, [pc, #40]	; (7fc4 <gpio_init+0x30>)
    7f9c:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    7f9e:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    7fa2:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    7fa4:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    7fa6:	f240 11b1 	movw	r1, #433	; 0x1b1
    7faa:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    7fac:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    7fb0:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    7fb2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    7fb6:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    7fb8:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    7fba:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    7fbc:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    7fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    7fc2:	bd08      	pop	{r3, pc}
    7fc4:	2009c000 	.word	0x2009c000

00007fc8 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    7fc8:	4b11      	ldr	r3, [pc, #68]	; (8010 <dio_ssp_init+0x48>)
    7fca:	681a      	ldr	r2, [r3, #0]
    7fcc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    7fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    7fd4:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    7fd6:	681a      	ldr	r2, [r3, #0]
    7fd8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    7fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    7fe0:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    7fe2:	681a      	ldr	r2, [r3, #0]
    7fe4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    7fe8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    7fec:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    7fee:	681a      	ldr	r2, [r3, #0]
    7ff0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    7ff4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7ff8:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    7ffa:	4b06      	ldr	r3, [pc, #24]	; (8014 <dio_ssp_init+0x4c>)
    7ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8000:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    8002:	4b05      	ldr	r3, [pc, #20]	; (8018 <dio_ssp_init+0x50>)
    8004:	22c7      	movs	r2, #199	; 0xc7
    8006:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    8008:	220c      	movs	r2, #12
    800a:	605a      	str	r2, [r3, #4]
    800c:	4770      	bx	lr
    800e:	bf00      	nop
    8010:	4002c000 	.word	0x4002c000
    8014:	2009c098 	.word	0x2009c098
    8018:	40030000 	.word	0x40030000

0000801c <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    801c:	4b09      	ldr	r3, [pc, #36]	; (8044 <atest_init+0x28>)
    801e:	681a      	ldr	r2, [r3, #0]
    8020:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
    8024:	601a      	str	r2, [r3, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    8026:	4b08      	ldr	r3, [pc, #32]	; (8048 <atest_init+0x2c>)
    8028:	681a      	ldr	r2, [r3, #0]
    802a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
    802e:	601a      	str	r2, [r3, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    8030:	4b06      	ldr	r3, [pc, #24]	; (804c <atest_init+0x30>)
    8032:	681a      	ldr	r2, [r3, #0]
    8034:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    8038:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    803a:	681a      	ldr	r2, [r3, #0]
    803c:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    8040:	601a      	str	r2, [r3, #0]
    8042:	4770      	bx	lr
    8044:	4002c004 	.word	0x4002c004
    8048:	2009c000 	.word	0x2009c000
    804c:	4002c044 	.word	0x4002c044

00008050 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    8050:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    8052:	2401      	movs	r4, #1
    8054:	1e43      	subs	r3, r0, #1
    8056:	409c      	lsls	r4, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    8058:	2220      	movs	r2, #32

	while (len--) {
    805a:	3801      	subs	r0, #1

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    805c:	4b0d      	ldr	r3, [pc, #52]	; (8094 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    805e:	b2c0      	uxtb	r0, r0
    8060:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    8062:	601a      	str	r2, [r3, #0]
    8064:	4b0c      	ldr	r3, [pc, #48]	; (8098 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    8066:	d011      	beq.n	808c <cc2400_spi+0x3c>
		if (data & msb)
    8068:	4221      	tst	r1, r4
			MOSI_SET;
		else
			MOSI_CLR;
    806a:	bf08      	it	eq
    806c:	4d09      	ldreq	r5, [pc, #36]	; (8094 <cc2400_spi+0x44>)
    806e:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
		if (data & msb)
			MOSI_SET;
    8072:	bf14      	ite	ne
    8074:	601a      	strne	r2, [r3, #0]
		else
			MOSI_CLR;
    8076:	602a      	streq	r2, [r5, #0]
		data <<= 1;

		SCLK_SET;
    8078:	2210      	movs	r2, #16
    807a:	601a      	str	r2, [r3, #0]
		if (MISO)
    807c:	4b07      	ldr	r3, [pc, #28]	; (809c <cc2400_spi+0x4c>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    807e:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    8080:	681b      	ldr	r3, [r3, #0]
    8082:	079b      	lsls	r3, r3, #30
			data |= 1;
    8084:	bf48      	it	mi
    8086:	f041 0101 	orrmi.w	r1, r1, #1
    808a:	e7e6      	b.n	805a <cc2400_spi+0xa>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    808c:	2220      	movs	r2, #32
    808e:	601a      	str	r2, [r3, #0]

	return data;
}
    8090:	4608      	mov	r0, r1
    8092:	bd30      	pop	{r4, r5, pc}
    8094:	2009c05c 	.word	0x2009c05c
    8098:	2009c058 	.word	0x2009c058
    809c:	2009c054 	.word	0x2009c054

000080a0 <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    80a0:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    80a2:	4c0a      	ldr	r4, [pc, #40]	; (80cc <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    80a4:	f7ff ffba 	bl	801c <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    80a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    80ac:	6023      	str	r3, [r4, #0]
	wait_us(50);
    80ae:	2032      	movs	r0, #50	; 0x32
    80b0:	f7ff ff2a 	bl	7f08 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    80b4:	4b06      	ldr	r3, [pc, #24]	; (80d0 <cc2400_init+0x30>)
    80b6:	2220      	movs	r2, #32
    80b8:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    80ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    80be:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    80c0:	2018      	movs	r0, #24
    80c2:	4904      	ldr	r1, [pc, #16]	; (80d4 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    80c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    80c8:	f7ff bfc2 	b.w	8050 <cc2400_spi>
    80cc:	2009c038 	.word	0x2009c038
    80d0:	2009c058 	.word	0x2009c058
    80d4:	000d7fff 	.word	0x000d7fff

000080d8 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    80d8:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    80da:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    80de:	0409      	lsls	r1, r1, #16
    80e0:	2018      	movs	r0, #24
    80e2:	f7ff ffb5 	bl	8050 <cc2400_spi>
	return in & 0xFFFF;
}
    80e6:	b280      	uxth	r0, r0
    80e8:	bd08      	pop	{r3, pc}

000080ea <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    80ea:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    80ee:	2018      	movs	r0, #24
    80f0:	f7ff bfae 	b.w	8050 <cc2400_spi>

000080f4 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    80f4:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    80f6:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    80fa:	0209      	lsls	r1, r1, #8
    80fc:	2010      	movs	r0, #16
    80fe:	f7ff ffa7 	bl	8050 <cc2400_spi>
	return in & 0xFF;
}
    8102:	b2c0      	uxtb	r0, r0
    8104:	bd08      	pop	{r3, pc}

00008106 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    8106:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    810a:	2010      	movs	r0, #16
    810c:	f7ff bfa0 	b.w	8050 <cc2400_spi>

00008110 <cc2400_fifo_write>:
       while (--delay_counter);
}


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    8110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    8112:	4b21      	ldr	r3, [pc, #132]	; (8198 <cc2400_fifo_write+0x88>)
    8114:	2220      	movs	r2, #32
    8116:	601a      	str	r2, [r3, #0]
    8118:	2308      	movs	r3, #8


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
    811a:	2270      	movs	r2, #112	; 0x70

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    811c:	f012 0f80 	tst.w	r2, #128	; 0x80
    8120:	4d1e      	ldr	r5, [pc, #120]	; (819c <cc2400_fifo_write+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    8122:	bf08      	it	eq
    8124:	4e1c      	ldreq	r6, [pc, #112]	; (8198 <cc2400_fifo_write+0x88>)
    8126:	f04f 0401 	mov.w	r4, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    812a:	bf14      	ite	ne
    812c:	602c      	strne	r4, [r5, #0]
		else
			MOSI_CLR;
    812e:	6034      	streq	r4, [r6, #0]
		reg <<= 1;
		SCLK_SET;
    8130:	2410      	movs	r4, #16
    8132:	602c      	str	r4, [r5, #0]
    8134:	3b01      	subs	r3, #1
		SCLK_CLR;
    8136:	4d18      	ldr	r5, [pc, #96]	; (8198 <cc2400_fifo_write+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    8138:	0052      	lsls	r2, r2, #1
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    813a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    813e:	b2d2      	uxtb	r2, r2
		SCLK_SET;
		SCLK_CLR;
    8140:	602c      	str	r4, [r5, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    8142:	d1eb      	bne.n	811c <cc2400_fifo_write+0xc>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    8144:	b2da      	uxtb	r2, r3
    8146:	4282      	cmp	r2, r0
    8148:	d217      	bcs.n	817a <cc2400_fifo_write+0x6a>
		temp = data[i];
    814a:	5cca      	ldrb	r2, [r1, r3]
    814c:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
    814e:	f012 0f80 	tst.w	r2, #128	; 0x80
    8152:	4e12      	ldr	r6, [pc, #72]	; (819c <cc2400_fifo_write+0x8c>)
				MOSI_SET;
			else
				MOSI_CLR;
    8154:	bf08      	it	eq
    8156:	4f10      	ldreq	r7, [pc, #64]	; (8198 <cc2400_fifo_write+0x88>)
    8158:	f04f 0501 	mov.w	r5, #1

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
    815c:	bf14      	ite	ne
    815e:	6035      	strne	r5, [r6, #0]
			else
				MOSI_CLR;
    8160:	603d      	streq	r5, [r7, #0]
			temp <<= 1;
			SCLK_SET;
    8162:	2510      	movs	r5, #16
    8164:	6035      	str	r5, [r6, #0]
    8166:	3c01      	subs	r4, #1
			SCLK_CLR;
    8168:	4e0b      	ldr	r6, [pc, #44]	; (8198 <cc2400_fifo_write+0x88>)
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    816a:	0052      	lsls	r2, r2, #1
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    816c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    8170:	b2d2      	uxtb	r2, r2
			SCLK_SET;
			SCLK_CLR;
    8172:	6035      	str	r5, [r6, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    8174:	d1eb      	bne.n	814e <cc2400_fifo_write+0x3e>
    8176:	3301      	adds	r3, #1
    8178:	e7e4      	b.n	8144 <cc2400_fifo_write+0x34>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    817a:	2308      	movs	r3, #8
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    817c:	4c07      	ldr	r4, [pc, #28]	; (819c <cc2400_fifo_write+0x8c>)
		SCLK_CLR;
    817e:	4906      	ldr	r1, [pc, #24]	; (8198 <cc2400_fifo_write+0x88>)
    8180:	3b01      	subs	r3, #1
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    8182:	2210      	movs	r2, #16
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    8184:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		SCLK_SET;
    8188:	6022      	str	r2, [r4, #0]
		SCLK_CLR;
    818a:	600a      	str	r2, [r1, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    818c:	d1f6      	bne.n	817c <cc2400_fifo_write+0x6c>
		SCLK_SET;
		SCLK_CLR;
	}
	
	spi_delay();
    818e:	f7ff feab 	bl	7ee8 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    8192:	2320      	movs	r3, #32
    8194:	6023      	str	r3, [r4, #0]
    8196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8198:	2009c05c 	.word	0x2009c05c
    819c:	2009c058 	.word	0x2009c058

000081a0 <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    81a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    81a4:	4b20      	ldr	r3, [pc, #128]	; (8228 <cc2400_fifo_read+0x88>)
    81a6:	2220      	movs	r2, #32
    81a8:	601a      	str	r2, [r3, #0]
	/* end transaction by raising CSN */
	CSN_SET;
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    81aa:	4607      	mov	r7, r0
    81ac:	4688      	mov	r8, r1
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    81ae:	2508      	movs	r5, #8
/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
	u8 msb = 1 << 7;
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;
    81b0:	23f0      	movs	r3, #240	; 0xf0

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    81b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    81b6:	491d      	ldr	r1, [pc, #116]	; (822c <cc2400_fifo_read+0x8c>)
			MOSI_SET;
		else
			MOSI_CLR;
    81b8:	bf08      	it	eq
    81ba:	481b      	ldreq	r0, [pc, #108]	; (8228 <cc2400_fifo_read+0x88>)
    81bc:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
    81c0:	bf14      	ite	ne
    81c2:	600a      	strne	r2, [r1, #0]
		else
			MOSI_CLR;
    81c4:	6002      	streq	r2, [r0, #0]
		reg <<= 1;
		SCLK_SET;
    81c6:	2210      	movs	r2, #16
    81c8:	600a      	str	r2, [r1, #0]
    81ca:	3d01      	subs	r5, #1
		SCLK_CLR;
    81cc:	4916      	ldr	r1, [pc, #88]	; (8228 <cc2400_fifo_read+0x88>)
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    81ce:	005b      	lsls	r3, r3, #1
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    81d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    81d4:	b2db      	uxtb	r3, r3
		SCLK_SET;
		SCLK_CLR;
    81d6:	600a      	str	r2, [r1, #0]
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    81d8:	d1eb      	bne.n	81b2 <cc2400_fifo_read+0x12>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    81da:	b2eb      	uxtb	r3, r5
    81dc:	42bb      	cmp	r3, r7
    81de:	d21b      	bcs.n	8218 <cc2400_fifo_read+0x78>
    81e0:	2608      	movs	r6, #8
    81e2:	2400      	movs	r4, #0
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
    81e4:	f7ff fe80 	bl	7ee8 <spi_delay>
			SCLK_SET;
    81e8:	4b10      	ldr	r3, [pc, #64]	; (822c <cc2400_fifo_read+0x8c>)
    81ea:	2210      	movs	r2, #16
    81ec:	601a      	str	r2, [r3, #0]
			temp <<= 1;
			if (MISO)
    81ee:	3b04      	subs	r3, #4
    81f0:	681b      	ldr	r3, [r3, #0]
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    81f2:	0064      	lsls	r4, r4, #1
			if (MISO)
    81f4:	079a      	lsls	r2, r3, #30
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    81f6:	b2e4      	uxtb	r4, r4
			if (MISO)
				temp |= 1;
    81f8:	bf48      	it	mi
    81fa:	f044 0401 	orrmi.w	r4, r4, #1
    81fe:	3e01      	subs	r6, #1
			spi_delay();
    8200:	f7ff fe72 	bl	7ee8 <spi_delay>
			SCLK_CLR;
    8204:	4b08      	ldr	r3, [pc, #32]	; (8228 <cc2400_fifo_read+0x88>)
    8206:	2210      	movs	r2, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8208:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
			SCLK_SET;
			temp <<= 1;
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
    820c:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    820e:	d1e9      	bne.n	81e4 <cc2400_fifo_read+0x44>
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
		}
		buf[i] = temp;
    8210:	f808 4005 	strb.w	r4, [r8, r5]
    8214:	3501      	adds	r5, #1
    8216:	e7e0      	b.n	81da <cc2400_fifo_read+0x3a>
	}

	/* end transaction by raising CSN */
	spi_delay();
    8218:	f7ff fe66 	bl	7ee8 <spi_delay>
	CSN_SET;
    821c:	4b03      	ldr	r3, [pc, #12]	; (822c <cc2400_fifo_read+0x8c>)
    821e:	2220      	movs	r2, #32
    8220:	601a      	str	r2, [r3, #0]
    8222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8226:	bf00      	nop
    8228:	2009c05c 	.word	0x2009c05c
    822c:	2009c058 	.word	0x2009c058

00008230 <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    8230:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    8232:	2100      	movs	r1, #0
    8234:	2008      	movs	r0, #8
    8236:	f7ff ff0b 	bl	8050 <cc2400_spi>
}
    823a:	b2c0      	uxtb	r0, r0
    823c:	bd08      	pop	{r3, pc}

0000823e <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    823e:	b508      	push	{r3, lr}
    8240:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    8242:	2008      	movs	r0, #8
    8244:	f7ff ff04 	bl	8050 <cc2400_spi>
}
    8248:	b2c0      	uxtb	r0, r0
    824a:	bd08      	pop	{r3, pc}

0000824c <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    824c:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    824e:	2018      	movs	r0, #24
    8250:	2100      	movs	r1, #0
    8252:	f7ff fefd 	bl	8050 <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    8256:	2000      	movs	r0, #0
    8258:	f7ff ff3e 	bl	80d8 <cc2400_get>
    825c:	2800      	cmp	r0, #0
    825e:	d1fa      	bne.n	8256 <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8260:	2018      	movs	r0, #24
    8262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8266:	f7ff fef3 	bl	8050 <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    826a:	2000      	movs	r0, #0
    826c:	f7ff ff34 	bl	80d8 <cc2400_get>
    8270:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    8274:	d1f9      	bne.n	826a <cc2400_reset+0x1e>
}
    8276:	bd08      	pop	{r3, pc}

00008278 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    8278:	b510      	push	{r4, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    827a:	4b46      	ldr	r3, [pc, #280]	; (8394 <clock_start+0x11c>)
    827c:	f244 023a 	movw	r2, #16442	; 0x403a
    8280:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    8282:	2200      	movs	r2, #0
    8284:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    8288:	3380      	adds	r3, #128	; 0x80
    828a:	681a      	ldr	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    828c:	21aa      	movs	r1, #170	; 0xaa

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    828e:	f022 0202 	bic.w	r2, r2, #2
    8292:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    8294:	4a40      	ldr	r2, [pc, #256]	; (8398 <clock_start+0x120>)
    8296:	6011      	str	r1, [r2, #0]
    8298:	2155      	movs	r1, #85	; 0x55
    829a:	6011      	str	r1, [r2, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    829c:	4a3f      	ldr	r2, [pc, #252]	; (839c <clock_start+0x124>)
    829e:	6812      	ldr	r2, [r2, #0]
    82a0:	0194      	lsls	r4, r2, #6
    82a2:	d4fb      	bmi.n	829c <clock_start+0x24>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    82a4:	681a      	ldr	r2, [r3, #0]
    82a6:	f022 0201 	bic.w	r2, r2, #1
    82aa:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    82ac:	4b3a      	ldr	r3, [pc, #232]	; (8398 <clock_start+0x120>)
    82ae:	22aa      	movs	r2, #170	; 0xaa
    82b0:	601a      	str	r2, [r3, #0]
    82b2:	2255      	movs	r2, #85	; 0x55
    82b4:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    82b6:	4b39      	ldr	r3, [pc, #228]	; (839c <clock_start+0x124>)
    82b8:	681b      	ldr	r3, [r3, #0]
    82ba:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    82be:	d1fa      	bne.n	82b6 <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    82c0:	4a37      	ldr	r2, [pc, #220]	; (83a0 <clock_start+0x128>)
    82c2:	6013      	str	r3, [r2, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    82c4:	f7ff ffc2 	bl	824c <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    82c8:	2018      	movs	r0, #24
    82ca:	4936      	ldr	r1, [pc, #216]	; (83a4 <clock_start+0x12c>)
    82cc:	f7ff fec0 	bl	8050 <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    82d0:	2060      	movs	r0, #96	; 0x60
    82d2:	f7ff ffb4 	bl	823e <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    82d6:	f7ff ffab 	bl	8230 <cc2400_status>
    82da:	0640      	lsls	r0, r0, #25
    82dc:	d5fb      	bpl.n	82d6 <clock_start+0x5e>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    82de:	4b32      	ldr	r3, [pc, #200]	; (83a8 <clock_start+0x130>)
    82e0:	2220      	movs	r2, #32
    82e2:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    82e4:	681a      	ldr	r2, [r3, #0]
    82e6:	0651      	lsls	r1, r2, #25
    82e8:	d5fc      	bpl.n	82e4 <clock_start+0x6c>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    82ea:	4b30      	ldr	r3, [pc, #192]	; (83ac <clock_start+0x134>)
    82ec:	2208      	movs	r2, #8
    82ee:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    82f0:	2200      	movs	r2, #0
    82f2:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    82f4:	2201      	movs	r2, #1
    82f6:	f843 2c9c 	str.w	r2, [r3, #-156]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    82fa:	4a2d      	ldr	r2, [pc, #180]	; (83b0 <clock_start+0x138>)
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
#endif
	PCLKSEL1  = 0;

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    82fc:	3b9c      	subs	r3, #156	; 0x9c

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    82fe:	f843 2c88 	str.w	r2, [r3, #-136]
	PLL0FEED_SEQUENCE;
    8302:	21aa      	movs	r1, #170	; 0xaa
    8304:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    8306:	482b      	ldr	r0, [pc, #172]	; (83b4 <clock_start+0x13c>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    8308:	f843 1c80 	str.w	r1, [r3, #-128]
    830c:	f843 2c80 	str.w	r2, [r3, #-128]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    8310:	6804      	ldr	r4, [r0, #0]
    8312:	f044 0401 	orr.w	r4, r4, #1
    8316:	6004      	str	r4, [r0, #0]
	PLL0FEED_SEQUENCE;
    8318:	f843 1c80 	str.w	r1, [r3, #-128]
    831c:	f843 2c80 	str.w	r2, [r3, #-128]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    8320:	4b1e      	ldr	r3, [pc, #120]	; (839c <clock_start+0x124>)
    8322:	681b      	ldr	r3, [r3, #0]
    8324:	01da      	lsls	r2, r3, #7
    8326:	d5fb      	bpl.n	8320 <clock_start+0xa8>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    8328:	4b1d      	ldr	r3, [pc, #116]	; (83a0 <clock_start+0x128>)
    832a:	2203      	movs	r2, #3
    832c:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    832e:	f853 2c84 	ldr.w	r2, [r3, #-132]
    8332:	f042 0202 	orr.w	r2, r2, #2
    8336:	f843 2c84 	str.w	r2, [r3, #-132]
	PLL0FEED_SEQUENCE;
    833a:	22aa      	movs	r2, #170	; 0xaa
    833c:	f843 2c78 	str.w	r2, [r3, #-120]
    8340:	2255      	movs	r2, #85	; 0x55
    8342:	f843 2c78 	str.w	r2, [r3, #-120]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    8346:	4b15      	ldr	r3, [pc, #84]	; (839c <clock_start+0x124>)
    8348:	681b      	ldr	r3, [r3, #0]
    834a:	019b      	lsls	r3, r3, #6
    834c:	d5fb      	bpl.n	8346 <clock_start+0xce>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    834e:	4b1a      	ldr	r3, [pc, #104]	; (83b8 <clock_start+0x140>)
    8350:	2222      	movs	r2, #34	; 0x22
    8352:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    8354:	21aa      	movs	r1, #170	; 0xaa
    8356:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    8358:	4818      	ldr	r0, [pc, #96]	; (83bc <clock_start+0x144>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    835a:	6099      	str	r1, [r3, #8]
    835c:	609a      	str	r2, [r3, #8]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    835e:	6804      	ldr	r4, [r0, #0]
    8360:	f044 0401 	orr.w	r4, r4, #1
    8364:	6004      	str	r4, [r0, #0]
	PLL1FEED_SEQUENCE;
    8366:	6099      	str	r1, [r3, #8]
    8368:	609a      	str	r2, [r3, #8]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    836a:	4b15      	ldr	r3, [pc, #84]	; (83c0 <clock_start+0x148>)
    836c:	681a      	ldr	r2, [r3, #0]
    836e:	05d4      	lsls	r4, r2, #23
    8370:	d5fb      	bpl.n	836a <clock_start+0xf2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    8372:	681a      	ldr	r2, [r3, #0]
    8374:	0550      	lsls	r0, r2, #21
    8376:	d5fc      	bpl.n	8372 <clock_start+0xfa>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    8378:	4b10      	ldr	r3, [pc, #64]	; (83bc <clock_start+0x144>)
    837a:	681a      	ldr	r2, [r3, #0]
    837c:	f042 0202 	orr.w	r2, r2, #2
    8380:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    8382:	22aa      	movs	r2, #170	; 0xaa
    8384:	60da      	str	r2, [r3, #12]
    8386:	2255      	movs	r2, #85	; 0x55
    8388:	60da      	str	r2, [r3, #12]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    838a:	4b0d      	ldr	r3, [pc, #52]	; (83c0 <clock_start+0x148>)
    838c:	681b      	ldr	r3, [r3, #0]
    838e:	0599      	lsls	r1, r3, #22
    8390:	d5fb      	bpl.n	838a <clock_start+0x112>
}
    8392:	bd10      	pop	{r4, pc}
    8394:	400fc000 	.word	0x400fc000
    8398:	400fc08c 	.word	0x400fc08c
    839c:	400fc088 	.word	0x400fc088
    83a0:	400fc104 	.word	0x400fc104
    83a4:	00081570 	.word	0x00081570
    83a8:	400fc1a0 	.word	0x400fc1a0
    83ac:	400fc1a8 	.word	0x400fc1a8
    83b0:	00010018 	.word	0x00010018
    83b4:	400fc080 	.word	0x400fc080
    83b8:	400fc0a4 	.word	0x400fc0a4
    83bc:	400fc0a0 	.word	0x400fc0a0
    83c0:	400fc0a8 	.word	0x400fc0a8

000083c4 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    83c4:	b508      	push	{r3, lr}
	gpio_init();
    83c6:	f7ff fde5 	bl	7f94 <gpio_init>
	cc2400_init();
    83ca:	f7ff fe69 	bl	80a0 <cc2400_init>
	clock_start();
}
    83ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ubertooth_init()
{
	gpio_init();
	cc2400_init();
	clock_start();
    83d2:	f7ff bf51 	b.w	8278 <clock_start>
    83d6:	0000      	movs	r0, r0

000083d8 <reset>:
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
}

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    83d8:	b508      	push	{r3, lr}
	all_pins_off();
    83da:	f7ff fdb1 	bl	7f40 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    83de:	4b09      	ldr	r3, [pc, #36]	; (8404 <reset+0x2c>)
    83e0:	2202      	movs	r2, #2
    83e2:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    83e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    83e8:	681a      	ldr	r2, [r3, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    83ea:	4807      	ldr	r0, [pc, #28]	; (8408 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    83ec:	f042 0203 	orr.w	r2, r2, #3
    83f0:	601a      	str	r2, [r3, #0]
	WDFEED_SEQUENCE;
    83f2:	22aa      	movs	r2, #170	; 0xaa
    83f4:	609a      	str	r2, [r3, #8]
    83f6:	2255      	movs	r2, #85	; 0x55
    83f8:	609a      	str	r2, [r3, #8]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    83fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    83fe:	f7ff bd83 	b.w	7f08 <wait_us>
    8402:	bf00      	nop
    8404:	2009c03c 	.word	0x2009c03c
    8408:	000f4240 	.word	0x000f4240

0000840c <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    840c:	b530      	push	{r4, r5, lr}
    840e:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8410:	2336      	movs	r3, #54	; 0x36
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8412:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8414:	a80a      	add	r0, sp, #40	; 0x28
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8416:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8418:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    841c:	a905      	add	r1, sp, #20
    841e:	4668      	mov	r0, sp
    8420:	4b07      	ldr	r3, [pc, #28]	; (8440 <get_part_num+0x34>)
    8422:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    8424:	9b05      	ldr	r3, [sp, #20]
    8426:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    8428:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    842a:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    842c:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    842e:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    8430:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    8432:	0e1b      	lsrs	r3, r3, #24
    8434:	7123      	strb	r3, [r4, #4]
	*len = 5;
    8436:	2305      	movs	r3, #5
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    8438:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	*len = 5;
    843a:	602b      	str	r3, [r5, #0]
	
}
    843c:	b00b      	add	sp, #44	; 0x2c
    843e:	bd30      	pop	{r4, r5, pc}
    8440:	1fff1ff1 	.word	0x1fff1ff1

00008444 <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    8444:	b530      	push	{r4, r5, lr}
    8446:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8448:	233a      	movs	r3, #58	; 0x3a
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    844a:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    844c:	a80a      	add	r0, sp, #40	; 0x28
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    844e:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    8450:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8454:	a905      	add	r1, sp, #20
    8456:	4668      	mov	r0, sp
    8458:	4b13      	ldr	r3, [pc, #76]	; (84a8 <get_device_serial+0x64>)
    845a:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    845c:	9b05      	ldr	r3, [sp, #20]
    845e:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    8460:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8462:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    8464:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8466:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    8468:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    846a:	0e1b      	lsrs	r3, r3, #24
    846c:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    846e:	9b07      	ldr	r3, [sp, #28]
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    8470:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
    8472:	0a1a      	lsrs	r2, r3, #8
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
    8474:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    8476:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    8478:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    847a:	0e1b      	lsrs	r3, r3, #24
    847c:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    847e:	9b08      	ldr	r3, [sp, #32]
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
    8480:	71e2      	strb	r2, [r4, #7]
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
    8482:	0a1a      	lsrs	r2, r3, #8
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
    8484:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    8486:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    8488:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    848a:	0e1b      	lsrs	r3, r3, #24
    848c:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
    8490:	72e2      	strb	r2, [r4, #11]
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
    8492:	0a1a      	lsrs	r2, r3, #8
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
    8494:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    8496:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    8498:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    849a:	0e1b      	lsrs	r3, r3, #24
    849c:	7423      	strb	r3, [r4, #16]
	*len = 17;
    849e:	2311      	movs	r3, #17
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
	buffer[15] = (result[4] >> 16) & 0xFF;
    84a0:	73e2      	strb	r2, [r4, #15]
	buffer[16] = (result[4] >> 24) & 0xFF;
	*len = 17;
    84a2:	602b      	str	r3, [r5, #0]
}
    84a4:	b00b      	add	sp, #44	; 0x2c
    84a6:	bd30      	pop	{r4, r5, pc}
    84a8:	1fff1ff1 	.word	0x1fff1ff1

000084ac <set_isp>:

void set_isp(void)
{
    84ac:	b500      	push	{lr}
    84ae:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    84b0:	2339      	movs	r3, #57	; 0x39
    84b2:	a80a      	add	r0, sp, #40	; 0x28
    84b4:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    84b8:	a905      	add	r1, sp, #20
    84ba:	4668      	mov	r0, sp
    84bc:	4b02      	ldr	r3, [pc, #8]	; (84c8 <set_isp+0x1c>)
    84be:	4798      	blx	r3
}
    84c0:	b00b      	add	sp, #44	; 0x2c
    84c2:	f85d fb04 	ldr.w	pc, [sp], #4
    84c6:	bf00      	nop
    84c8:	1fff1ff1 	.word	0x1fff1ff1

000084cc <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    84cc:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    84ce:	4c08      	ldr	r4, [pc, #32]	; (84f0 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    84d0:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    84d2:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    84d4:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    84d6:	2d40      	cmp	r5, #64	; 0x40
    84d8:	bfa8      	it	ge
    84da:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    84dc:	462a      	mov	r2, r5
    84de:	f000 f955 	bl	878c <USBHwEPWrite>
	pbData += iChunk;
    84e2:	6863      	ldr	r3, [r4, #4]
    84e4:	442b      	add	r3, r5
    84e6:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    84e8:	6823      	ldr	r3, [r4, #0]
    84ea:	1b5d      	subs	r5, r3, r5
    84ec:	6025      	str	r5, [r4, #0]
    84ee:	bd38      	pop	{r3, r4, r5, pc}
    84f0:	10000b08 	.word	0x10000b08

000084f4 <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    84f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    84f6:	4b11      	ldr	r3, [pc, #68]	; (853c <_HandleRequest.constprop.1+0x48>)
    84f8:	7a1c      	ldrb	r4, [r3, #8]
    84fa:	461d      	mov	r5, r3
    84fc:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    8500:	2c02      	cmp	r4, #2
    8502:	d10d      	bne.n	8520 <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    8504:	2200      	movs	r2, #0
    8506:	a902      	add	r1, sp, #8
    8508:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    850c:	f103 0008 	add.w	r0, r3, #8
    8510:	f103 0210 	add.w	r2, r3, #16
    8514:	3304      	adds	r3, #4
    8516:	f000 fa63 	bl	89e0 <USBFilterOsVendorMessage>
    851a:	b108      	cbz	r0, 8520 <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    851c:	9801      	ldr	r0, [sp, #4]
    851e:	e00a      	b.n	8536 <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    8520:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    8524:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    8526:	b12b      	cbz	r3, 8534 <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    8528:	4805      	ldr	r0, [pc, #20]	; (8540 <_HandleRequest.constprop.1+0x4c>)
    852a:	f100 0108 	add.w	r1, r0, #8
    852e:	1f02      	subs	r2, r0, #4
    8530:	4798      	blx	r3
    8532:	e000      	b.n	8536 <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    8534:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    8536:	b003      	add	sp, #12
    8538:	bd30      	pop	{r4, r5, pc}
    853a:	bf00      	nop
    853c:	10000b08 	.word	0x10000b08
    8540:	10000b10 	.word	0x10000b10

00008544 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    8544:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    8546:	2800      	cmp	r0, #0
    8548:	d14a      	bne.n	85e0 <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    854a:	f001 0304 	and.w	r3, r1, #4
    854e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    8552:	4c25      	ldr	r4, [pc, #148]	; (85e8 <USBHandleControlTransfer+0xa4>)
    8554:	b30b      	cbz	r3, 859a <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    8556:	2208      	movs	r2, #8
    8558:	f104 0108 	add.w	r1, r4, #8
    855c:	f000 f946 	bl	87ec <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8560:	7a22      	ldrb	r2, [r4, #8]
    8562:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    8566:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    856c:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    856e:	89e3      	ldrh	r3, [r4, #14]
    8570:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    8572:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    8574:	b10b      	cbz	r3, 857a <USBHandleControlTransfer+0x36>
    8576:	09d2      	lsrs	r2, r2, #7
    8578:	d034      	beq.n	85e4 <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    857a:	f7ff ffbb 	bl	84f4 <_HandleRequest.constprop.1>
    857e:	b928      	cbnz	r0, 858c <USBHandleControlTransfer+0x48>
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8580:	2080      	movs	r0, #128	; 0x80
    8582:	2101      	movs	r1, #1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    8588:	f000 b8f4 	b.w	8774 <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    858c:	89e2      	ldrh	r2, [r4, #14]
    858e:	6923      	ldr	r3, [r4, #16]
    8590:	429a      	cmp	r2, r3
    8592:	bfd4      	ite	le
    8594:	6022      	strle	r2, [r4, #0]
    8596:	6023      	strgt	r3, [r4, #0]
    8598:	e019      	b.n	85ce <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    859a:	6822      	ldr	r2, [r4, #0]
    859c:	2a00      	cmp	r2, #0
    859e:	dd1a      	ble.n	85d6 <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    85a0:	6861      	ldr	r1, [r4, #4]
    85a2:	f000 f923 	bl	87ec <USBHwEPRead>
				if (iChunk < 0) {
    85a6:	2800      	cmp	r0, #0
    85a8:	dbea      	blt.n	8580 <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    85aa:	6863      	ldr	r3, [r4, #4]
    85ac:	4403      	add	r3, r0
    85ae:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    85b0:	6823      	ldr	r3, [r4, #0]
    85b2:	1a18      	subs	r0, r3, r0
    85b4:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    85b6:	b9a8      	cbnz	r0, 85e4 <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    85b8:	7a23      	ldrb	r3, [r4, #8]
    85ba:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    85be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    85c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    85c4:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    85c6:	f7ff ff95 	bl	84f4 <_HandleRequest.constprop.1>
    85ca:	2800      	cmp	r0, #0
    85cc:	d0d8      	beq.n	8580 <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    85ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    85d2:	f7ff bf7b 	b.w	84cc <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    85d6:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    85d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    85dc:	f000 b906 	b.w	87ec <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    85e0:	2880      	cmp	r0, #128	; 0x80
    85e2:	d0f4      	beq.n	85ce <USBHandleControlTransfer+0x8a>
    85e4:	bd10      	pop	{r4, pc}
    85e6:	bf00      	nop
    85e8:	10000b08 	.word	0x10000b08

000085ec <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    85ec:	4b02      	ldr	r3, [pc, #8]	; (85f8 <USBRegisterRequestHandler+0xc>)
    85ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    85f2:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    85f4:	6242      	str	r2, [r0, #36]	; 0x24
    85f6:	4770      	bx	lr
    85f8:	10000b08 	.word	0x10000b08

000085fc <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    85fc:	4770      	bx	lr
    85fe:	0000      	movs	r0, r0

00008600 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    8600:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    8602:	4c0e      	ldr	r4, [pc, #56]	; (863c <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    8604:	f000 f994 	bl	8930 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    8608:	480d      	ldr	r0, [pc, #52]	; (8640 <USBInit+0x40>)
    860a:	f000 f87d 	bl	8708 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    860e:	4621      	mov	r1, r4
    8610:	2000      	movs	r0, #0
    8612:	f000 f85f 	bl	86d4 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    8616:	4621      	mov	r1, r4
    8618:	2080      	movs	r0, #128	; 0x80
    861a:	f000 f85b 	bl	86d4 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    861e:	2000      	movs	r0, #0
    8620:	2140      	movs	r1, #64	; 0x40
    8622:	f000 f83b 	bl	869c <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    8626:	2080      	movs	r0, #128	; 0x80
    8628:	2140      	movs	r1, #64	; 0x40
    862a:	f000 f837 	bl	869c <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    862e:	2000      	movs	r0, #0
    8630:	4904      	ldr	r1, [pc, #16]	; (8644 <USBInit+0x44>)
    8632:	4a05      	ldr	r2, [pc, #20]	; (8648 <USBInit+0x48>)
    8634:	f7ff ffda 	bl	85ec <USBRegisterRequestHandler>

	return TRUE;
}
    8638:	2001      	movs	r0, #1
    863a:	bd10      	pop	{r4, pc}
    863c:	00008545 	.word	0x00008545
    8640:	000085fd 	.word	0x000085fd
    8644:	00008ae1 	.word	0x00008ae1
    8648:	10000b3c 	.word	0x10000b3c

0000864c <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    864c:	4b03      	ldr	r3, [pc, #12]	; (865c <Wait4DevInt+0x10>)
    864e:	681b      	ldr	r3, [r3, #0]
    8650:	4003      	ands	r3, r0
    8652:	4283      	cmp	r3, r0
    8654:	d1fa      	bne.n	864c <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    8656:	4b02      	ldr	r3, [pc, #8]	; (8660 <Wait4DevInt+0x14>)
    8658:	6018      	str	r0, [r3, #0]
    865a:	4770      	bx	lr
    865c:	5000c200 	.word	0x5000c200
    8660:	5000c208 	.word	0x5000c208

00008664 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    8664:	4b04      	ldr	r3, [pc, #16]	; (8678 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8666:	0400      	lsls	r0, r0, #16
    8668:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    866c:	2230      	movs	r2, #48	; 0x30
    866e:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8670:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    8672:	2010      	movs	r0, #16
    8674:	f7ff bfea 	b.w	864c <Wait4DevInt>
    8678:	5000c208 	.word	0x5000c208

0000867c <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    867c:	b510      	push	{r4, lr}
    867e:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8680:	0424      	lsls	r4, r4, #16
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    // write command code
    USBHwCmd(bCmd);
    8682:	f7ff ffef 	bl	8664 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8686:	4b04      	ldr	r3, [pc, #16]	; (8698 <USBHwCmdWrite+0x1c>)
    8688:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    868c:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    868e:	2010      	movs	r0, #16
}
    8690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    8694:	f7ff bfda 	b.w	864c <Wait4DevInt>
    8698:	5000c210 	.word	0x5000c210

0000869c <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    869c:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    869e:	f000 040f 	and.w	r4, r0, #15
    86a2:	09c0      	lsrs	r0, r0, #7
    86a4:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    86a8:	2201      	movs	r2, #1
    86aa:	40a2      	lsls	r2, r4
    86ac:	4b08      	ldr	r3, [pc, #32]	; (86d0 <USBHwEPConfig+0x34>)
    86ae:	6818      	ldr	r0, [r3, #0]
    86b0:	4302      	orrs	r2, r0
    86b2:	601a      	str	r2, [r3, #0]
    USBEpIn = idx;
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    86b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    86b8:	605c      	str	r4, [r3, #4]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    86ba:	6099      	str	r1, [r3, #8]
    Wait4DevInt(EP_RLZED);
    86bc:	f7ff ffc6 	bl	864c <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    86c0:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    86c4:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    86c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    86ca:	f7ff bfd7 	b.w	867c <USBHwCmdWrite>
    86ce:	bf00      	nop
    86d0:	5000c244 	.word	0x5000c244

000086d4 <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    86d4:	4a0a      	ldr	r2, [pc, #40]	; (8700 <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    86d6:	f000 030f 	and.w	r3, r0, #15
    86da:	09c0      	lsrs	r0, r0, #7

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    86dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    86e0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    86e4:	2101      	movs	r1, #1
    86e6:	fa01 f000 	lsl.w	r0, r1, r0
    86ea:	4b06      	ldr	r3, [pc, #24]	; (8704 <USBHwRegisterEPIntHandler+0x30>)
    86ec:	681a      	ldr	r2, [r3, #0]
    86ee:	4310      	orrs	r0, r2
    86f0:	6018      	str	r0, [r3, #0]
    USBDevIntEn |= EP_SLOW;
    86f2:	f853 2c30 	ldr.w	r2, [r3, #-48]
    86f6:	f042 0204 	orr.w	r2, r2, #4
    86fa:	f843 2c30 	str.w	r2, [r3, #-48]
    86fe:	4770      	bx	lr
    8700:	10000b44 	.word	0x10000b44
    8704:	5000c234 	.word	0x5000c234

00008708 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    8708:	4b03      	ldr	r3, [pc, #12]	; (8718 <USBHwRegisterDevIntHandler+0x10>)
    870a:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    870c:	4b03      	ldr	r3, [pc, #12]	; (871c <USBHwRegisterDevIntHandler+0x14>)
    870e:	681a      	ldr	r2, [r3, #0]
    8710:	f042 0208 	orr.w	r2, r2, #8
    8714:	601a      	str	r2, [r3, #0]
    8716:	4770      	bx	lr
    8718:	10000b44 	.word	0x10000b44
    871c:	5000c204 	.word	0x5000c204

00008720 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    8720:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    8724:	20d0      	movs	r0, #208	; 0xd0
    8726:	f7ff bfa9 	b.w	867c <USBHwCmdWrite>

0000872a <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    872a:	1c01      	adds	r1, r0, #0
    872c:	bf18      	it	ne
    872e:	2101      	movne	r1, #1
    8730:	20fe      	movs	r0, #254	; 0xfe
    8732:	f7ff bfa3 	b.w	867c <USBHwCmdWrite>

00008736 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    8736:	4601      	mov	r1, r0
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    8738:	20f3      	movs	r0, #243	; 0xf3
    873a:	f7ff bf9f 	b.w	867c <USBHwCmdWrite>
    873e:	0000      	movs	r0, r0

00008740 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    8740:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    8742:	f000 040f 	and.w	r4, r0, #15
    8746:	09c0      	lsrs	r0, r0, #7
    8748:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    874c:	4620      	mov	r0, r4
    874e:	f7ff ff89 	bl	8664 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8752:	0424      	lsls	r4, r4, #16
    8754:	4b05      	ldr	r3, [pc, #20]	; (876c <USBHwEPGetStatus+0x2c>)
    8756:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    875a:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    875c:	2020      	movs	r0, #32
    875e:	f7ff ff75 	bl	864c <Wait4DevInt>
    return USBCmdData;
    8762:	4b03      	ldr	r3, [pc, #12]	; (8770 <USBHwEPGetStatus+0x30>)
    8764:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    8766:	b2c0      	uxtb	r0, r0
    8768:	bd10      	pop	{r4, pc}
    876a:	bf00      	nop
    876c:	5000c210 	.word	0x5000c210
    8770:	5000c214 	.word	0x5000c214

00008774 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    8774:	f000 030f 	and.w	r3, r0, #15
    8778:	09c0      	lsrs	r0, r0, #7
    877a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    877e:	3100      	adds	r1, #0
    8780:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8784:	bf18      	it	ne
    8786:	2101      	movne	r1, #1
    8788:	f7ff bf78 	b.w	867c <USBHwCmdWrite>

0000878c <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    878c:	b510      	push	{r4, lr}
    U32 idx;
    
    idx = EP2IDX(bEP);
    878e:	f000 030f 	and.w	r3, r0, #15
    8792:	09c0      	lsrs	r0, r0, #7
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    8794:	4614      	mov	r4, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    8796:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    879a:	4a11      	ldr	r2, [pc, #68]	; (87e0 <USBHwEPWrite+0x54>)
    879c:	009b      	lsls	r3, r3, #2
    879e:	f043 0302 	orr.w	r3, r3, #2
    87a2:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    87a4:	4b0f      	ldr	r3, [pc, #60]	; (87e4 <USBHwEPWrite+0x58>)
    87a6:	601c      	str	r4, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    87a8:	4b0d      	ldr	r3, [pc, #52]	; (87e0 <USBHwEPWrite+0x54>)
    87aa:	681a      	ldr	r2, [r3, #0]
    87ac:	f012 0202 	ands.w	r2, r2, #2
    87b0:	d00e      	beq.n	87d0 <USBHwEPWrite+0x44>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    87b2:	788a      	ldrb	r2, [r1, #2]
    87b4:	78cb      	ldrb	r3, [r1, #3]
    87b6:	0412      	lsls	r2, r2, #16
    87b8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    87bc:	780b      	ldrb	r3, [r1, #0]
        pbBuf += 4;
    87be:	3104      	adds	r1, #4
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    87c0:	431a      	orrs	r2, r3
    87c2:	f811 3c03 	ldrb.w	r3, [r1, #-3]
    87c6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    87ca:	4b07      	ldr	r3, [pc, #28]	; (87e8 <USBHwEPWrite+0x5c>)
    87cc:	601a      	str	r2, [r3, #0]
    87ce:	e7eb      	b.n	87a8 <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    87d0:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    87d2:	f7ff ff47 	bl	8664 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    87d6:	20fa      	movs	r0, #250	; 0xfa
    87d8:	f7ff ff44 	bl	8664 <USBHwCmd>
    
    return iLen;
}
    87dc:	4620      	mov	r0, r4
    87de:	bd10      	pop	{r4, pc}
    87e0:	5000c228 	.word	0x5000c228
    87e4:	5000c224 	.word	0x5000c224
    87e8:	5000c21c 	.word	0x5000c21c

000087ec <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    87ec:	b538      	push	{r3, r4, r5, lr}
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    87ee:	f000 030f 	and.w	r3, r0, #15
    87f2:	09c0      	lsrs	r0, r0, #7
    87f4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    87f8:	4c14      	ldr	r4, [pc, #80]	; (884c <USBHwEPRead+0x60>)
    87fa:	009b      	lsls	r3, r3, #2
    87fc:	f043 0301 	orr.w	r3, r3, #1
    8800:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    8802:	4b13      	ldr	r3, [pc, #76]	; (8850 <USBHwEPRead+0x64>)
    8804:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    8806:	051d      	lsls	r5, r3, #20
    8808:	d5fb      	bpl.n	8802 <USBHwEPRead+0x16>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    880a:	055c      	lsls	r4, r3, #21
    880c:	d51b      	bpl.n	8846 <USBHwEPRead+0x5a>
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    880e:	f3c3 0509 	ubfx	r5, r3, #0, #10
    
    // get data
    dwData = 0;
    8812:	2300      	movs	r3, #0
    for (i = 0; i < dwLen; i++) {
    8814:	461c      	mov	r4, r3
    8816:	42ac      	cmp	r4, r5
    8818:	d00b      	beq.n	8832 <USBHwEPRead+0x46>
        if ((i % 4) == 0) {
    881a:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    881e:	bf04      	itt	eq
    8820:	4b0c      	ldreq	r3, [pc, #48]	; (8854 <USBHwEPRead+0x68>)
    8822:	681b      	ldreq	r3, [r3, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    8824:	b111      	cbz	r1, 882c <USBHwEPRead+0x40>
    8826:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    8828:	bf38      	it	cc
    882a:	550b      	strbcc	r3, [r1, r4]
        }
        dwData >>= 8;
    882c:	0a1b      	lsrs	r3, r3, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    882e:	3401      	adds	r4, #1
    8830:	e7f1      	b.n	8816 <USBHwEPRead+0x2a>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    8832:	4b06      	ldr	r3, [pc, #24]	; (884c <USBHwEPRead+0x60>)
    8834:	2200      	movs	r2, #0
    8836:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    8838:	f7ff ff14 	bl	8664 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    883c:	20f2      	movs	r0, #242	; 0xf2
    883e:	f7ff ff11 	bl	8664 <USBHwCmd>
    
    return dwLen;
    8842:	4620      	mov	r0, r4
    8844:	bd38      	pop	{r3, r4, r5, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    8846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    884a:	bd38      	pop	{r3, r4, r5, pc}
    884c:	5000c228 	.word	0x5000c228
    8850:	5000c220 	.word	0x5000c220
    8854:	5000c218 	.word	0x5000c218

00008858 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    8858:	1c01      	adds	r1, r0, #0
    885a:	bf18      	it	ne
    885c:	2101      	movne	r1, #1
    885e:	20d8      	movs	r0, #216	; 0xd8
    8860:	f7ff bf0c 	b.w	867c <USBHwCmdWrite>

00008864 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    8864:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    8866:	4b29      	ldr	r3, [pc, #164]	; (890c <USBHwISR+0xa8>)
    8868:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    886a:	07e1      	lsls	r1, r4, #31
    886c:	d511      	bpl.n	8892 <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    886e:	2201      	movs	r2, #1
    8870:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    8872:	4b27      	ldr	r3, [pc, #156]	; (8910 <USBHwISR+0xac>)
    8874:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    8876:	b165      	cbz	r5, 8892 <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8878:	20f5      	movs	r0, #245	; 0xf5
    887a:	f7ff fef3 	bl	8664 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    887e:	4b25      	ldr	r3, [pc, #148]	; (8914 <USBHwISR+0xb0>)
    8880:	4a25      	ldr	r2, [pc, #148]	; (8918 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    8882:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8884:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    8886:	f7ff fee1 	bl	864c <Wait4DevInt>
    return USBCmdData;
    888a:	4b24      	ldr	r3, [pc, #144]	; (891c <USBHwISR+0xb8>)
    888c:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    888e:	b2c0      	uxtb	r0, r0
    8890:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    8892:	0722      	lsls	r2, r4, #28
    8894:	d517      	bpl.n	88c6 <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    8896:	4b22      	ldr	r3, [pc, #136]	; (8920 <USBHwISR+0xbc>)
    8898:	2208      	movs	r2, #8
    889a:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    889c:	20fe      	movs	r0, #254	; 0xfe
    889e:	f7ff fee1 	bl	8664 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    88a2:	4b1c      	ldr	r3, [pc, #112]	; (8914 <USBHwISR+0xb0>)
    88a4:	4a1f      	ldr	r2, [pc, #124]	; (8924 <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    88a6:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    88a8:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    88aa:	f7ff fecf 	bl	864c <Wait4DevInt>
    return USBCmdData;
    88ae:	4b1b      	ldr	r3, [pc, #108]	; (891c <USBHwISR+0xb8>)
    88b0:	6818      	ldr	r0, [r3, #0]
    88b2:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    88b4:	f010 0f1a 	tst.w	r0, #26
    88b8:	d005      	beq.n	88c6 <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    88ba:	4b15      	ldr	r3, [pc, #84]	; (8910 <USBHwISR+0xac>)
    88bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    88be:	b113      	cbz	r3, 88c6 <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    88c0:	f000 0015 	and.w	r0, r0, #21
    88c4:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    88c6:	0763      	lsls	r3, r4, #29
    88c8:	d51e      	bpl.n	8908 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    88ca:	4b15      	ldr	r3, [pc, #84]	; (8920 <USBHwISR+0xbc>)
    88cc:	2204      	movs	r2, #4
    88ce:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    88d0:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
    88d2:	2301      	movs	r3, #1
    88d4:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    88d6:	4a14      	ldr	r2, [pc, #80]	; (8928 <USBHwISR+0xc4>)
    88d8:	6812      	ldr	r2, [r2, #0]
    88da:	4213      	tst	r3, r2
    88dc:	d011      	beq.n	8902 <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    88de:	4a13      	ldr	r2, [pc, #76]	; (892c <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    88e0:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    88e2:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    88e4:	f7ff feb2 	bl	864c <Wait4DevInt>
                bEPStat = USBCmdData;
    88e8:	4b0c      	ldr	r3, [pc, #48]	; (891c <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    88ea:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    88ec:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    88ee:	4b08      	ldr	r3, [pc, #32]	; (8910 <USBHwISR+0xac>)
    88f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    88f4:	b12b      	cbz	r3, 8902 <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    88f6:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    88fa:	b2c0      	uxtb	r0, r0
    88fc:	f001 011f 	and.w	r1, r1, #31
    8900:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    8902:	3401      	adds	r4, #1
    8904:	2c20      	cmp	r4, #32
    8906:	d1e4      	bne.n	88d2 <USBHwISR+0x6e>
    8908:	bd38      	pop	{r3, r4, r5, pc}
    890a:	bf00      	nop
    890c:	5000c200 	.word	0x5000c200
    8910:	10000b44 	.word	0x10000b44
    8914:	5000c210 	.word	0x5000c210
    8918:	00f50200 	.word	0x00f50200
    891c:	5000c214 	.word	0x5000c214
    8920:	5000c208 	.word	0x5000c208
    8924:	00fe0200 	.word	0x00fe0200
    8928:	5000c230 	.word	0x5000c230
    892c:	5000c238 	.word	0x5000c238

00008930 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    8930:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    8932:	4b24      	ldr	r3, [pc, #144]	; (89c4 <USBHwInit+0x94>)
    8934:	681a      	ldr	r2, [r3, #0]
    8936:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    893a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    893e:	601a      	str	r2, [r3, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    8940:	f853 2c04 	ldr.w	r2, [r3, #-4]
    8944:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    8948:	f042 0210 	orr.w	r2, r2, #16
    894c:	f843 2c04 	str.w	r2, [r3, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    8950:	f853 2c04 	ldr.w	r2, [r3, #-4]
    8954:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    8958:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    895c:	f843 2c04 	str.w	r2, [r3, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    8960:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    8964:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
    8968:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    896c:	f843 2c0c 	str.w	r2, [r3, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    8970:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    8974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    8978:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    897c:	f843 2c0c 	str.w	r2, [r3, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    8980:	4b11      	ldr	r3, [pc, #68]	; (89c8 <USBHwInit+0x98>)
    8982:	681a      	ldr	r2, [r3, #0]
    8984:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    8988:	601a      	str	r2, [r3, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    898a:	4b10      	ldr	r3, [pc, #64]	; (89cc <USBHwInit+0x9c>)
    898c:	681a      	ldr	r2, [r3, #0]
    898e:	f042 0212 	orr.w	r2, r2, #18
    8992:	601a      	str	r2, [r3, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    8994:	4b0e      	ldr	r3, [pc, #56]	; (89d0 <USBHwInit+0xa0>)
    8996:	681a      	ldr	r2, [r3, #0]
    8998:	0792      	lsls	r2, r2, #30
    899a:	d5fb      	bpl.n	8994 <USBHwInit+0x64>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    899c:	681a      	ldr	r2, [r3, #0]
    899e:	06d0      	lsls	r0, r2, #27
    89a0:	d5fc      	bpl.n	899c <USBHwInit+0x6c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    89a2:	4b0c      	ldr	r3, [pc, #48]	; (89d4 <USBHwInit+0xa4>)
    89a4:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    89a6:	4a0c      	ldr	r2, [pc, #48]	; (89d8 <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    89a8:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    89aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    89ae:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    89b0:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    89b2:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    89b4:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    89b6:	4b09      	ldr	r3, [pc, #36]	; (89dc <USBHwInit+0xac>)
    89b8:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    89ba:	f7ff febc 	bl	8736 <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    89be:	2001      	movs	r0, #1
    89c0:	bd08      	pop	{r3, pc}
    89c2:	bf00      	nop
    89c4:	4002c010 	.word	0x4002c010
    89c8:	400fc0c4 	.word	0x400fc0c4
    89cc:	5000cff4 	.word	0x5000cff4
    89d0:	5000cff8 	.word	0x5000cff8
    89d4:	5000c204 	.word	0x5000c204
    89d8:	5000c208 	.word	0x5000c208
    89dc:	5000c240 	.word	0x5000c240

000089e0 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    89e0:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    89e2:	4c16      	ldr	r4, [pc, #88]	; (8a3c <USBFilterOsVendorMessage+0x5c>)
    89e4:	2500      	movs	r5, #0
    89e6:	7824      	ldrb	r4, [r4, #0]
    89e8:	b314      	cbz	r4, 8a30 <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    89ea:	7846      	ldrb	r6, [r0, #1]
    89ec:	42a6      	cmp	r6, r4
    89ee:	d121      	bne.n	8a34 <USBFilterOsVendorMessage+0x54>
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    89f0:	8884      	ldrh	r4, [r0, #4]
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    89f2:	600d      	str	r5, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    89f4:	2c04      	cmp	r4, #4
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
	
		int iRequestLength = pSetup->wLength;
    89f6:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    89f8:	8845      	ldrh	r5, [r0, #2]
	
		switch (pSetup->wIndex) {
    89fa:	d005      	beq.n	8a08 <USBFilterOsVendorMessage+0x28>
    89fc:	2c05      	cmp	r4, #5
    89fe:	d11b      	bne.n	8a38 <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    8a00:	480f      	ldr	r0, [pc, #60]	; (8a40 <USBFilterOsVendorMessage+0x60>)
    8a02:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    8a04:	2092      	movs	r0, #146	; 0x92
    8a06:	e002      	b.n	8a0e <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    8a08:	480e      	ldr	r0, [pc, #56]	; (8a44 <USBFilterOsVendorMessage+0x64>)
    8a0a:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    8a0c:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    8a0e:	6010      	str	r0, [r2, #0]
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
    8a10:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    8a12:	0a28      	lsrs	r0, r5, #8
    8a14:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    8a16:	4284      	cmp	r4, r0
    8a18:	db0e      	blt.n	8a38 <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    8a1a:	681d      	ldr	r5, [r3, #0]
    8a1c:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    8a1e:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    8a20:	601d      	str	r5, [r3, #0]
    8a22:	42b0      	cmp	r0, r6
    8a24:	bfd4      	ite	le
    8a26:	6010      	strle	r0, [r2, #0]
    8a28:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    8a2a:	2001      	movs	r0, #1
    8a2c:	6008      	str	r0, [r1, #0]
		return TRUE;
    8a2e:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    8a30:	4620      	mov	r0, r4
    8a32:	bd70      	pop	{r4, r5, r6, pc}
    8a34:	4628      	mov	r0, r5
    8a36:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    8a38:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    8a3a:	bd70      	pop	{r4, r5, r6, pc}
    8a3c:	10000b8c 	.word	0x10000b8c
    8a40:	10000959 	.word	0x10000959
    8a44:	00009764 	.word	0x00009764

00008a48 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    8a48:	b510      	push	{r4, lr}
	bMsVendorIndex = bVendorRequestIndex;
    8a4a:	4b0a      	ldr	r3, [pc, #40]	; (8a74 <USBRegisterWinusbInterface+0x2c>)
    8a4c:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    8a4e:	b179      	cbz	r1, 8a70 <USBRegisterWinusbInterface+0x28>
    8a50:	4b09      	ldr	r3, [pc, #36]	; (8a78 <USBRegisterWinusbInterface+0x30>)
    8a52:	2200      	movs	r2, #0
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    8a54:	5c8c      	ldrb	r4, [r1, r2]
    8a56:	1e98      	subs	r0, r3, #2
    8a58:	b13c      	cbz	r4, 8a6a <USBRegisterWinusbInterface+0x22>
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    8a5a:	3201      	adds	r2, #1
    8a5c:	2a26      	cmp	r2, #38	; 0x26
    8a5e:	4618      	mov	r0, r3
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    8a60:	f803 4c02 	strb.w	r4, [r3, #-2]
    8a64:	f103 0302 	add.w	r3, r3, #2
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    8a68:	d1f4      	bne.n	8a54 <USBRegisterWinusbInterface+0xc>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    8a6a:	2300      	movs	r3, #0
    8a6c:	7003      	strb	r3, [r0, #0]
	pbWriteCursor[2] = 0;
    8a6e:	7083      	strb	r3, [r0, #2]
    8a70:	bd10      	pop	{r4, pc}
    8a72:	bf00      	nop
    8a74:	10000b8c 	.word	0x10000b8c
    8a78:	1000099d 	.word	0x1000099d

00008a7c <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    8a7c:	4b01      	ldr	r3, [pc, #4]	; (8a84 <USBRegisterDescriptors+0x8>)
    8a7e:	6058      	str	r0, [r3, #4]
    8a80:	4770      	bx	lr
    8a82:	bf00      	nop
    8a84:	10000b8c 	.word	0x10000b8c

00008a88 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    8a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    8a8a:	0a05      	lsrs	r5, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    8a8c:	2d03      	cmp	r5, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    8a8e:	b2c6      	uxtb	r6, r0
    8a90:	4911      	ldr	r1, [pc, #68]	; (8ad8 <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    8a92:	d108      	bne.n	8aa6 <USBGetDescriptor+0x1e>
    8a94:	2eee      	cmp	r6, #238	; 0xee
    8a96:	d106      	bne.n	8aa6 <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    8a98:	4810      	ldr	r0, [pc, #64]	; (8adc <USBGetDescriptor+0x54>)
    8a9a:	7809      	ldrb	r1, [r1, #0]
	
	*ppbData = abOsStringDescriptor;
    8a9c:	3092      	adds	r0, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    8a9e:	7401      	strb	r1, [r0, #16]
	
	*ppbData = abOsStringDescriptor;
    8aa0:	6018      	str	r0, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    8aa2:	2312      	movs	r3, #18
    8aa4:	e012      	b.n	8acc <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    8aa6:	6849      	ldr	r1, [r1, #4]
	iCurIndex = 0;
    8aa8:	2400      	movs	r4, #0
	
	while (pab[DESC_bLength] != 0) {
    8aaa:	e001      	b.n	8ab0 <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    8aac:	3401      	adds	r4, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    8aae:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    8ab0:	7808      	ldrb	r0, [r1, #0]
    8ab2:	b180      	cbz	r0, 8ad6 <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    8ab4:	784f      	ldrb	r7, [r1, #1]
    8ab6:	42af      	cmp	r7, r5
    8ab8:	d1f9      	bne.n	8aae <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    8aba:	42b4      	cmp	r4, r6
    8abc:	d1f6      	bne.n	8aac <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    8abe:	2d02      	cmp	r5, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    8ac0:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    8ac2:	d106      	bne.n	8ad2 <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    8ac4:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    8ac6:	788b      	ldrb	r3, [r1, #2]
    8ac8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    8acc:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    8ace:	2001      	movs	r0, #1
    8ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    8ad2:	780b      	ldrb	r3, [r1, #0]
    8ad4:	e7fa      	b.n	8acc <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    8ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ad8:	10000b8c 	.word	0x10000b8c
    8adc:	10000959 	.word	0x10000959

00008ae0 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8ae4:	4e4b      	ldr	r6, [pc, #300]	; (8c14 <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8ae6:	4604      	mov	r4, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8ae8:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8aea:	460d      	mov	r5, r1
    8aec:	4617      	mov	r7, r2
    8aee:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8af0:	b943      	cbnz	r3, 8b04 <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    8af2:	7826      	ldrb	r6, [r4, #0]
    8af4:	f006 061f 	and.w	r6, r6, #31
    8af8:	2e01      	cmp	r6, #1
    8afa:	d053      	beq.n	8ba4 <USBHandleStandardRequest+0xc4>
    8afc:	d306      	bcc.n	8b0c <USBHandleStandardRequest+0x2c>
    8afe:	2e02      	cmp	r6, #2
    8b00:	d062      	beq.n	8bc8 <USBHandleStandardRequest+0xe8>
    8b02:	e081      	b.n	8c08 <USBHandleStandardRequest+0x128>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8b04:	4798      	blx	r3
    8b06:	2800      	cmp	r0, #0
    8b08:	d0f3      	beq.n	8af2 <USBHandleStandardRequest+0x12>
    8b0a:	e080      	b.n	8c0e <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8b0c:	7862      	ldrb	r2, [r4, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    8b0e:	683b      	ldr	r3, [r7, #0]

	switch (pSetup->bRequest) {
    8b10:	2a09      	cmp	r2, #9
    8b12:	d879      	bhi.n	8c08 <USBHandleStandardRequest+0x128>
    8b14:	e8df f002 	tbb	[pc, r2]
    8b18:	78787805 	.word	0x78787805
    8b1c:	780d0978 	.word	0x780d0978
    8b20:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    8b22:	2200      	movs	r2, #0
    8b24:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    8b26:	705a      	strb	r2, [r3, #1]
    8b28:	e045      	b.n	8bb6 <USBHandleStandardRequest+0xd6>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    8b2a:	78a0      	ldrb	r0, [r4, #2]
    8b2c:	f7ff fdf8 	bl	8720 <USBHwSetAddress>
    8b30:	e06d      	b.n	8c0e <USBHandleStandardRequest+0x12e>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    8b32:	8860      	ldrh	r0, [r4, #2]
    8b34:	88a1      	ldrh	r1, [r4, #4]
    8b36:	462a      	mov	r2, r5
    8b38:	463b      	mov	r3, r7
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    8b3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    8b3e:	f7ff bfa3 	b.w	8a88 <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    8b42:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    8b46:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    8b48:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    8b4a:	6028      	str	r0, [r5, #0]
    8b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    8b50:	78a6      	ldrb	r6, [r4, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    8b52:	b90e      	cbnz	r6, 8b58 <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    8b54:	4630      	mov	r0, r6
    8b56:	e01f      	b.n	8b98 <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    8b58:	27ff      	movs	r7, #255	; 0xff
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    8b5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
		bCurConfig = 0xFF;
    8b5e:	46b9      	mov	r9, r7
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    8b60:	782b      	ldrb	r3, [r5, #0]
    8b62:	b1c3      	cbz	r3, 8b96 <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    8b64:	786b      	ldrb	r3, [r5, #1]
    8b66:	2b04      	cmp	r3, #4
    8b68:	d006      	beq.n	8b78 <USBHandleStandardRequest+0x98>
    8b6a:	2b05      	cmp	r3, #5
    8b6c:	d006      	beq.n	8b7c <USBHandleStandardRequest+0x9c>
    8b6e:	2b02      	cmp	r3, #2
    8b70:	d10e      	bne.n	8b90 <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    8b72:	f895 9005 	ldrb.w	r9, [r5, #5]
    8b76:	e00b      	b.n	8b90 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    8b78:	78ef      	ldrb	r7, [r5, #3]
    8b7a:	e009      	b.n	8b90 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    8b7c:	45b1      	cmp	r9, r6
    8b7e:	d107      	bne.n	8b90 <USBHandleStandardRequest+0xb0>
    8b80:	b937      	cbnz	r7, 8b90 <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    8b82:	7969      	ldrb	r1, [r5, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    8b84:	792b      	ldrb	r3, [r5, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    8b86:	78a8      	ldrb	r0, [r5, #2]
    8b88:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    8b8c:	f7ff fd86 	bl	869c <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    8b90:	782b      	ldrb	r3, [r5, #0]
    8b92:	441d      	add	r5, r3
    8b94:	e7e4      	b.n	8b60 <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    8b96:	2001      	movs	r0, #1
    8b98:	f7ff fe5e 	bl	8858 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    8b9c:	8863      	ldrh	r3, [r4, #2]
    8b9e:	f888 300c 	strb.w	r3, [r8, #12]
    8ba2:	e034      	b.n	8c0e <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8ba4:	7863      	ldrb	r3, [r4, #1]
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    8ba6:	683a      	ldr	r2, [r7, #0]
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8ba8:	2b0a      	cmp	r3, #10
    8baa:	d006      	beq.n	8bba <USBHandleStandardRequest+0xda>
    8bac:	2b0b      	cmp	r3, #11
    8bae:	d007      	beq.n	8bc0 <USBHandleStandardRequest+0xe0>
    8bb0:	bb53      	cbnz	r3, 8c08 <USBHandleStandardRequest+0x128>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    8bb2:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    8bb4:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    8bb6:	2302      	movs	r3, #2
    8bb8:	e004      	b.n	8bc4 <USBHandleStandardRequest+0xe4>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    8bba:	2300      	movs	r3, #0
    8bbc:	7013      	strb	r3, [r2, #0]
    8bbe:	e016      	b.n	8bee <USBHandleStandardRequest+0x10e>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    8bc0:	8863      	ldrh	r3, [r4, #2]
    8bc2:	bb0b      	cbnz	r3, 8c08 <USBHandleStandardRequest+0x128>
			return FALSE;
		}
		*piLen = 0;
    8bc4:	602b      	str	r3, [r5, #0]
    8bc6:	e022      	b.n	8c0e <USBHandleStandardRequest+0x12e>
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    8bc8:	f8d7 8000 	ldr.w	r8, [r7]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8bcc:	7867      	ldrb	r7, [r4, #1]
    8bce:	2f01      	cmp	r7, #1
    8bd0:	d00f      	beq.n	8bf2 <USBHandleStandardRequest+0x112>
    8bd2:	d302      	bcc.n	8bda <USBHandleStandardRequest+0xfa>
    8bd4:	2f03      	cmp	r7, #3
    8bd6:	d010      	beq.n	8bfa <USBHandleStandardRequest+0x11a>
    8bd8:	e016      	b.n	8c08 <USBHandleStandardRequest+0x128>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    8bda:	7920      	ldrb	r0, [r4, #4]
    8bdc:	f7ff fdb0 	bl	8740 <USBHwEPGetStatus>
		pbData[1] = 0;
    8be0:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    8be2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8be6:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    8bea:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    8bee:	602e      	str	r6, [r5, #0]
    8bf0:	e00d      	b.n	8c0e <USBHandleStandardRequest+0x12e>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    8bf2:	8861      	ldrh	r1, [r4, #2]
    8bf4:	b941      	cbnz	r1, 8c08 <USBHandleStandardRequest+0x128>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    8bf6:	7920      	ldrb	r0, [r4, #4]
    8bf8:	e003      	b.n	8c02 <USBHandleStandardRequest+0x122>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    8bfa:	8863      	ldrh	r3, [r4, #2]
    8bfc:	b923      	cbnz	r3, 8c08 <USBHandleStandardRequest+0x128>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    8bfe:	7920      	ldrb	r0, [r4, #4]
    8c00:	2101      	movs	r1, #1
    8c02:	f7ff fdb7 	bl	8774 <USBHwEPStall>
    8c06:	e002      	b.n	8c0e <USBHandleStandardRequest+0x12e>
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
    8c08:	2000      	movs	r0, #0
    8c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
		return TRUE;
    8c0e:	2001      	movs	r0, #1
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    8c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c14:	10000b8c 	.word	0x10000b8c

00008c18 <__aeabi_llsl>:
    8c18:	4091      	lsls	r1, r2
    8c1a:	1c03      	adds	r3, r0, #0
    8c1c:	4090      	lsls	r0, r2
    8c1e:	469c      	mov	ip, r3
    8c20:	3a20      	subs	r2, #32
    8c22:	4093      	lsls	r3, r2
    8c24:	4319      	orrs	r1, r3
    8c26:	4252      	negs	r2, r2
    8c28:	4663      	mov	r3, ip
    8c2a:	40d3      	lsrs	r3, r2
    8c2c:	4319      	orrs	r1, r3
    8c2e:	4770      	bx	lr

00008c30 <memcmp>:
    8c30:	2a03      	cmp	r2, #3
    8c32:	b470      	push	{r4, r5, r6}
    8c34:	d914      	bls.n	8c60 <memcmp+0x30>
    8c36:	ea40 0301 	orr.w	r3, r0, r1
    8c3a:	079b      	lsls	r3, r3, #30
    8c3c:	d111      	bne.n	8c62 <memcmp+0x32>
    8c3e:	460c      	mov	r4, r1
    8c40:	4603      	mov	r3, r0
    8c42:	6825      	ldr	r5, [r4, #0]
    8c44:	681e      	ldr	r6, [r3, #0]
    8c46:	4621      	mov	r1, r4
    8c48:	42ae      	cmp	r6, r5
    8c4a:	4618      	mov	r0, r3
    8c4c:	f104 0404 	add.w	r4, r4, #4
    8c50:	f103 0304 	add.w	r3, r3, #4
    8c54:	d104      	bne.n	8c60 <memcmp+0x30>
    8c56:	3a04      	subs	r2, #4
    8c58:	2a03      	cmp	r2, #3
    8c5a:	4618      	mov	r0, r3
    8c5c:	4621      	mov	r1, r4
    8c5e:	d8f0      	bhi.n	8c42 <memcmp+0x12>
    8c60:	b1c2      	cbz	r2, 8c94 <memcmp+0x64>
    8c62:	7805      	ldrb	r5, [r0, #0]
    8c64:	780c      	ldrb	r4, [r1, #0]
    8c66:	42a5      	cmp	r5, r4
    8c68:	bf04      	itt	eq
    8c6a:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
    8c6e:	2300      	moveq	r3, #0
    8c70:	d006      	beq.n	8c80 <memcmp+0x50>
    8c72:	e00c      	b.n	8c8e <memcmp+0x5e>
    8c74:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    8c78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8c7c:	42a5      	cmp	r5, r4
    8c7e:	d106      	bne.n	8c8e <memcmp+0x5e>
    8c80:	4293      	cmp	r3, r2
    8c82:	f103 0301 	add.w	r3, r3, #1
    8c86:	d1f5      	bne.n	8c74 <memcmp+0x44>
    8c88:	2000      	movs	r0, #0
    8c8a:	bc70      	pop	{r4, r5, r6}
    8c8c:	4770      	bx	lr
    8c8e:	1b28      	subs	r0, r5, r4
    8c90:	bc70      	pop	{r4, r5, r6}
    8c92:	4770      	bx	lr
    8c94:	4610      	mov	r0, r2
    8c96:	e7f8      	b.n	8c8a <memcmp+0x5a>

00008c98 <memcpy>:
    8c98:	4684      	mov	ip, r0
    8c9a:	ea41 0300 	orr.w	r3, r1, r0
    8c9e:	f013 0303 	ands.w	r3, r3, #3
    8ca2:	d149      	bne.n	8d38 <memcpy+0xa0>
    8ca4:	3a40      	subs	r2, #64	; 0x40
    8ca6:	d323      	bcc.n	8cf0 <memcpy+0x58>
    8ca8:	680b      	ldr	r3, [r1, #0]
    8caa:	6003      	str	r3, [r0, #0]
    8cac:	684b      	ldr	r3, [r1, #4]
    8cae:	6043      	str	r3, [r0, #4]
    8cb0:	688b      	ldr	r3, [r1, #8]
    8cb2:	6083      	str	r3, [r0, #8]
    8cb4:	68cb      	ldr	r3, [r1, #12]
    8cb6:	60c3      	str	r3, [r0, #12]
    8cb8:	690b      	ldr	r3, [r1, #16]
    8cba:	6103      	str	r3, [r0, #16]
    8cbc:	694b      	ldr	r3, [r1, #20]
    8cbe:	6143      	str	r3, [r0, #20]
    8cc0:	698b      	ldr	r3, [r1, #24]
    8cc2:	6183      	str	r3, [r0, #24]
    8cc4:	69cb      	ldr	r3, [r1, #28]
    8cc6:	61c3      	str	r3, [r0, #28]
    8cc8:	6a0b      	ldr	r3, [r1, #32]
    8cca:	6203      	str	r3, [r0, #32]
    8ccc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    8cce:	6243      	str	r3, [r0, #36]	; 0x24
    8cd0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8cd2:	6283      	str	r3, [r0, #40]	; 0x28
    8cd4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    8cd6:	62c3      	str	r3, [r0, #44]	; 0x2c
    8cd8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    8cda:	6303      	str	r3, [r0, #48]	; 0x30
    8cdc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    8cde:	6343      	str	r3, [r0, #52]	; 0x34
    8ce0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    8ce2:	6383      	str	r3, [r0, #56]	; 0x38
    8ce4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    8ce6:	63c3      	str	r3, [r0, #60]	; 0x3c
    8ce8:	3040      	adds	r0, #64	; 0x40
    8cea:	3140      	adds	r1, #64	; 0x40
    8cec:	3a40      	subs	r2, #64	; 0x40
    8cee:	d2db      	bcs.n	8ca8 <memcpy+0x10>
    8cf0:	3230      	adds	r2, #48	; 0x30
    8cf2:	d30b      	bcc.n	8d0c <memcpy+0x74>
    8cf4:	680b      	ldr	r3, [r1, #0]
    8cf6:	6003      	str	r3, [r0, #0]
    8cf8:	684b      	ldr	r3, [r1, #4]
    8cfa:	6043      	str	r3, [r0, #4]
    8cfc:	688b      	ldr	r3, [r1, #8]
    8cfe:	6083      	str	r3, [r0, #8]
    8d00:	68cb      	ldr	r3, [r1, #12]
    8d02:	60c3      	str	r3, [r0, #12]
    8d04:	3010      	adds	r0, #16
    8d06:	3110      	adds	r1, #16
    8d08:	3a10      	subs	r2, #16
    8d0a:	d2f3      	bcs.n	8cf4 <memcpy+0x5c>
    8d0c:	320c      	adds	r2, #12
    8d0e:	d305      	bcc.n	8d1c <memcpy+0x84>
    8d10:	f851 3b04 	ldr.w	r3, [r1], #4
    8d14:	f840 3b04 	str.w	r3, [r0], #4
    8d18:	3a04      	subs	r2, #4
    8d1a:	d2f9      	bcs.n	8d10 <memcpy+0x78>
    8d1c:	3204      	adds	r2, #4
    8d1e:	d008      	beq.n	8d32 <memcpy+0x9a>
    8d20:	07d2      	lsls	r2, r2, #31
    8d22:	bf1c      	itt	ne
    8d24:	f811 3b01 	ldrbne.w	r3, [r1], #1
    8d28:	f800 3b01 	strbne.w	r3, [r0], #1
    8d2c:	d301      	bcc.n	8d32 <memcpy+0x9a>
    8d2e:	880b      	ldrh	r3, [r1, #0]
    8d30:	8003      	strh	r3, [r0, #0]
    8d32:	4660      	mov	r0, ip
    8d34:	4770      	bx	lr
    8d36:	bf00      	nop
    8d38:	2a08      	cmp	r2, #8
    8d3a:	d313      	bcc.n	8d64 <memcpy+0xcc>
    8d3c:	078b      	lsls	r3, r1, #30
    8d3e:	d0b1      	beq.n	8ca4 <memcpy+0xc>
    8d40:	f010 0303 	ands.w	r3, r0, #3
    8d44:	d0ae      	beq.n	8ca4 <memcpy+0xc>
    8d46:	f1c3 0304 	rsb	r3, r3, #4
    8d4a:	1ad2      	subs	r2, r2, r3
    8d4c:	07db      	lsls	r3, r3, #31
    8d4e:	bf1c      	itt	ne
    8d50:	f811 3b01 	ldrbne.w	r3, [r1], #1
    8d54:	f800 3b01 	strbne.w	r3, [r0], #1
    8d58:	d3a4      	bcc.n	8ca4 <memcpy+0xc>
    8d5a:	f831 3b02 	ldrh.w	r3, [r1], #2
    8d5e:	f820 3b02 	strh.w	r3, [r0], #2
    8d62:	e79f      	b.n	8ca4 <memcpy+0xc>
    8d64:	3a04      	subs	r2, #4
    8d66:	d3d9      	bcc.n	8d1c <memcpy+0x84>
    8d68:	3a01      	subs	r2, #1
    8d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
    8d6e:	f800 3b01 	strb.w	r3, [r0], #1
    8d72:	d2f9      	bcs.n	8d68 <memcpy+0xd0>
    8d74:	780b      	ldrb	r3, [r1, #0]
    8d76:	7003      	strb	r3, [r0, #0]
    8d78:	784b      	ldrb	r3, [r1, #1]
    8d7a:	7043      	strb	r3, [r0, #1]
    8d7c:	788b      	ldrb	r3, [r1, #2]
    8d7e:	7083      	strb	r3, [r0, #2]
    8d80:	4660      	mov	r0, ip
    8d82:	4770      	bx	lr

00008d84 <strlen>:
    8d84:	f020 0103 	bic.w	r1, r0, #3
    8d88:	f010 0003 	ands.w	r0, r0, #3
    8d8c:	f1c0 0000 	rsb	r0, r0, #0
    8d90:	f851 3b04 	ldr.w	r3, [r1], #4
    8d94:	f100 0c04 	add.w	ip, r0, #4
    8d98:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    8d9c:	f06f 0200 	mvn.w	r2, #0
    8da0:	bf1c      	itt	ne
    8da2:	fa22 f20c 	lsrne.w	r2, r2, ip
    8da6:	4313      	orrne	r3, r2
    8da8:	f04f 0c01 	mov.w	ip, #1
    8dac:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    8db0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    8db4:	eba3 020c 	sub.w	r2, r3, ip
    8db8:	ea22 0203 	bic.w	r2, r2, r3
    8dbc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    8dc0:	bf04      	itt	eq
    8dc2:	f851 3b04 	ldreq.w	r3, [r1], #4
    8dc6:	3004      	addeq	r0, #4
    8dc8:	d0f4      	beq.n	8db4 <strlen+0x30>
    8dca:	f013 0fff 	tst.w	r3, #255	; 0xff
    8dce:	bf1f      	itttt	ne
    8dd0:	3001      	addne	r0, #1
    8dd2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    8dd6:	3001      	addne	r0, #1
    8dd8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    8ddc:	bf18      	it	ne
    8dde:	3001      	addne	r0, #1
    8de0:	4770      	bx	lr
    8de2:	bf00      	nop
    8de4:	00000043 	.word	0x00000043

00008de8 <_global_impure_ptr>:
    8de8:	10000020                                 ...

00008dec <whitening_index>:
    8dec:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    8dfc:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    8e0c:	5a541b28 662f703f                       (.TZ?p/f

00008e14 <whitening>:
    8e14:	01010101 01000100 00000100 00010000     ................
    8e24:	01000101 00010101 01010100 00010000     ................
    8e34:	01010001 01010000 00000000 00010100     ................
    8e44:	01000101 01010100 00000100 00010100     ................
    8e54:	00000100 00000100 00000000 01000001     ................
    8e64:	01010000 00000100 01010101 01010100     ................
    8e74:	00000000 01010101 00010101 01010000     ................
    8e84:	01010001 01000000 00000100 75010001              ...............

00008e93 <compile_info>:
    8e93:	72656275 746f6f74 30322068 302d3731     ubertooth 2017-0
    8ea3:	32522d33 776d2820 6d406c6e 2d6c6e77     3-R2 (mwnl@mwnl-
    8eb3:	6f6e656c 20296f76 38313032 3630202e     lenovo) 2018. 06
    8ec3:	3132202e eb28202e 2029a9aa 323a3431     . 21. (...) 14:2
    8ed3:	37343a35 54534b20 bcb24000                       5:47 KST.

00008edc <whitening_word>:
    8edc:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    8eec:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    8efc:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    8f0c:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    8f1c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    8f2c:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    8f3c:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    8f4c:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    8f5c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    8f6c:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    8f7c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    8f8c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    8f9c:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    8fac:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    8fbc:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    8fcc:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    8fdc:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    8fec:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    8ffc:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    900c:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    901c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    902c:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    903c:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    904c:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    905c:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    906c:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    907c:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    908c:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    909c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    90ac:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    90bc:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    90cc:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    90dc:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    90ec:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    90fc:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    910c:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    911c:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    912c:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    913c:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    914c:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    915c:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    916c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    917c:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    918c:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    919c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    91ac:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    91bc:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    91cc:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    91dc:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    91ec:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    91fc:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    920c:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    921c:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    922c:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    923c:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    924c:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    925c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    926c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    927c:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    928c:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    929c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    92ac:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    92bc:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    92cc:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    92dc:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    92ec:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    92fc:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    930c:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    931c:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    932c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    933c:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    934c:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    935c:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    936c:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    937c:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    938c:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    939c:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    93ac:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    93bc:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    93cc:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    93dc:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    93ec:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    93fc:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    940c:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    941c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    942c:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    943c:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    944c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    945c:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    946c:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    947c:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    948c:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    949c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    94ac:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    94bc:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    94cc:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    94dc:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    94ec:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    94fc:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    950c:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    951c:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    952c:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    953c:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    954c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    955c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    956c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    957c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    958c:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    959c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    95ac:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    95bc:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    95cc:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    95dc:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    95ec:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    95fc:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    960c:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    961c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    962c:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    963c:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    964c:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000965c <hop_interval_lut>:
    965c:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    966c:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    967c:	120c0916 00000024 00000001 00000001     ....$...........
    968c:	00000001 00000001 ffff1b42 ffffffff     ........B.......
    969c:	feaa0303 feaa1610 aa020010 4c4e574e     ............NWNL
    96ac:	53454d5f ffffff48 0985096c 0000099e     _MESH...l.......
    96bc:	37313032 2d33302d 00003252                       2017-03-R2.

000096c7 <index1.3911>:
    96c7:	03010200 03000100 01020001 03010100              ..............

000096d5 <index2.3912>:
    96d5:	04020301 04020304 03040304 387b0203     ..............{8
    96e5:	37346361 2d383861 36326363 6161342d     ac47a88-cc26-4aa
    96f5:	38382d39 342d6237 38616332 37306663     9-887b-42ca8cf07
    9705:	7d333661 68000000                                a63}...

0000970c <channels>:
    970c:	09720968 09a50977                       h.r.w...

00009714 <follow_handler.4002>:
    9714:	00007a5d 00007a7d 00007d81 00007bd9     ]z..}z...}...{..
    9724:	00007a59 00007a59 00007a59              Yz..Yz..Yz..

00009730 <continuous_rx_handler.4003>:
    9730:	00007a75 00007a7d 00007ca1 00007a59     uz..}z...|..Yz..
    9740:	00007a59 00007a59                       Yz..Yz..

00009748 <jam_handler.4004>:
    9748:	00007a5d 00007a7d 00007d1d 00007c21     ]z..}z...}..!|..
    9758:	00007b35 00007c41                       5{..A|..

00009760 <iap_entry>:
    9760:	1fff1ff1                                ....

00009764 <abExtendedOsFeatureDescriptor>:
    9764:	00000028 00040100 00000001 00000000     (...............
    9774:	49570100 4253554e 00000000 00000000     ..WINUSB........
    9784:	00000000 00000000                       ........

0000978c <_init>:
    978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    978e:	bf00      	nop
    9790:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9792:	bc08      	pop	{r3}
    9794:	469e      	mov	lr, r3
    9796:	4770      	bx	lr

00009798 <__init_array_start>:
    9798:	00004371 	.word	0x00004371

0000979c <__frame_dummy_init_array_entry>:
    979c:	00004155                                UA..

000097a0 <_fini>:
    97a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97a2:	bf00      	nop
    97a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    97a6:	bc08      	pop	{r3}
    97a8:	469e      	mov	lr, r3
    97aa:	4770      	bx	lr

000097ac <__fini_array_start>:
    97ac:	00004125 	.word	0x00004125

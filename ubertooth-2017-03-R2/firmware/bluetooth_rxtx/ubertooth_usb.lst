ARM GAS  /tmp/cc7b4Eov.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ubertooth_usb.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.usb_vendor_request_handler,"ax",%progbits
  19              		.align	1
  20              		.global	usb_vendor_request_handler
  21              		.thumb
  22              		.thumb_func
  24              	usb_vendor_request_handler:
  25              	.LFB0:
  26              		.file 1 "ubertooth_usb.c"
   1:ubertooth_usb.c **** /*
   2:ubertooth_usb.c ****  * Copyright 2010 Michael Ossmann
   3:ubertooth_usb.c ****  * Copyright 2013 Dominic Spill
   4:ubertooth_usb.c ****  *
   5:ubertooth_usb.c ****  * This file is part of Project Ubertooth.
   6:ubertooth_usb.c ****  *
   7:ubertooth_usb.c ****  * This program is free software; you can redistribute it and/or modify
   8:ubertooth_usb.c ****  * it under the terms of the GNU General Public License as published by
   9:ubertooth_usb.c ****  * the Free Software Foundation; either version 2, or (at your option)
  10:ubertooth_usb.c ****  * any later version.
  11:ubertooth_usb.c ****  *
  12:ubertooth_usb.c ****  * This program is distributed in the hope that it will be useful,
  13:ubertooth_usb.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:ubertooth_usb.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:ubertooth_usb.c ****  * GNU General Public License for more details.
  16:ubertooth_usb.c ****  *
  17:ubertooth_usb.c ****  * You should have received a copy of the GNU General Public License
  18:ubertooth_usb.c ****  * along with this program; see the file COPYING.  If not, write to
  19:ubertooth_usb.c ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  20:ubertooth_usb.c ****  * Boston, MA 02110-1301, USA.
  21:ubertooth_usb.c ****  */
  22:ubertooth_usb.c **** 
  23:ubertooth_usb.c **** /*
  24:ubertooth_usb.c **** 	LPCUSB, an USB device driver for LPC microcontrollers
  25:ubertooth_usb.c **** 	Copyright (C) 2006 Bertrik Sikken (bertrik@sikken.nl)
  26:ubertooth_usb.c **** 
  27:ubertooth_usb.c **** 	Redistribution and use in source and binary forms, with or without
  28:ubertooth_usb.c **** 	modification, are permitted provided that the following conditions are met:
  29:ubertooth_usb.c **** 
  30:ubertooth_usb.c **** 	1. Redistributions of source code must retain the above copyright
  31:ubertooth_usb.c **** 	   notice, this list of conditions and the following disclaimer.
  32:ubertooth_usb.c **** 	2. Redistributions in binary form must reproduce the above copyright
ARM GAS  /tmp/cc7b4Eov.s 			page 2


  33:ubertooth_usb.c **** 	   notice, this list of conditions and the following disclaimer in the
  34:ubertooth_usb.c **** 	   documentation and/or other materials provided with the distribution.
  35:ubertooth_usb.c **** 	3. The name of the author may not be used to endorse or promote products
  36:ubertooth_usb.c **** 	   derived from this software without specific prior written permission.
  37:ubertooth_usb.c **** 
  38:ubertooth_usb.c **** 	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  39:ubertooth_usb.c **** 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  40:ubertooth_usb.c **** 	OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  41:ubertooth_usb.c **** 	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  42:ubertooth_usb.c **** 	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  43:ubertooth_usb.c **** 	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  44:ubertooth_usb.c **** 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  45:ubertooth_usb.c **** 	THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  46:ubertooth_usb.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  47:ubertooth_usb.c **** 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  48:ubertooth_usb.c **** */
  49:ubertooth_usb.c **** 
  50:ubertooth_usb.c **** #include "usbapi.h"
  51:ubertooth_usb.c **** #include "usbhw_lpc.h"
  52:ubertooth_usb.c **** #include "ubertooth.h"
  53:ubertooth_usb.c **** #include "ubertooth_usb.h"
  54:ubertooth_usb.c **** #include <string.h>
  55:ubertooth_usb.c **** 
  56:ubertooth_usb.c **** #ifdef UBERTOOTH_ZERO
  57:ubertooth_usb.c **** #define ID_VENDOR 0x1D50
  58:ubertooth_usb.c **** #define ID_PRODUCT 0x6000
  59:ubertooth_usb.c **** #elif defined UBERTOOTH_ONE
  60:ubertooth_usb.c **** #define ID_VENDOR 0x1D50
  61:ubertooth_usb.c **** #define ID_PRODUCT 0x6002
  62:ubertooth_usb.c **** #elif defined TC13BADGE
  63:ubertooth_usb.c **** #define ID_VENDOR 0xFFFF
  64:ubertooth_usb.c **** #define ID_PRODUCT 0x0004
  65:ubertooth_usb.c **** #else
  66:ubertooth_usb.c **** #define ID_VENDOR 0xFFFF
  67:ubertooth_usb.c **** #define ID_PRODUCT 0x0004
  68:ubertooth_usb.c **** #endif
  69:ubertooth_usb.c **** 
  70:ubertooth_usb.c **** #define BULK_IN_EP		0x82
  71:ubertooth_usb.c **** #define BULK_OUT_EP		0x05
  72:ubertooth_usb.c **** 
  73:ubertooth_usb.c **** #define MAX_PACKET_SIZE	64
  74:ubertooth_usb.c **** 
  75:ubertooth_usb.c **** #define LE_WORD(x)		((x)&0xFF),((x)>>8)
  76:ubertooth_usb.c **** 
  77:ubertooth_usb.c **** /*
  78:ubertooth_usb.c ****  * This is supposed to be a lock-free ring buffer, but I haven't verified
  79:ubertooth_usb.c ****  * atomicity of the operations on head and tail.
  80:ubertooth_usb.c ****  */
  81:ubertooth_usb.c **** 
  82:ubertooth_usb.c **** static u8 abDescriptors[] = {
  83:ubertooth_usb.c **** 
  84:ubertooth_usb.c **** /* Device descriptor */
  85:ubertooth_usb.c **** 	0x12,
  86:ubertooth_usb.c **** 	DESC_DEVICE,
  87:ubertooth_usb.c **** 	LE_WORD(0x0200),		// bcdUSB
  88:ubertooth_usb.c **** 	0xFF,              		// bDeviceClass
  89:ubertooth_usb.c **** 	0x00,              		// bDeviceSubClass
ARM GAS  /tmp/cc7b4Eov.s 			page 3


  90:ubertooth_usb.c **** 	0x00,              		// bDeviceProtocol
  91:ubertooth_usb.c **** 	MAX_PACKET_SIZE0,  		// bMaxPacketSize
  92:ubertooth_usb.c **** 	LE_WORD(ID_VENDOR),		// idVendor
  93:ubertooth_usb.c **** 	LE_WORD(ID_PRODUCT),		// idProduct
  94:ubertooth_usb.c **** 	LE_WORD(0x0102),		// bcdDevice
  95:ubertooth_usb.c **** 	0x01,              		// iManufacturer
  96:ubertooth_usb.c **** 	0x02,              		// iProduct
  97:ubertooth_usb.c **** 	0x03,              		// iSerialNumber
  98:ubertooth_usb.c **** 	0x01,              		// bNumConfigurations
  99:ubertooth_usb.c **** 
 100:ubertooth_usb.c **** // configuration
 101:ubertooth_usb.c **** 	0x09,
 102:ubertooth_usb.c **** 	DESC_CONFIGURATION,
 103:ubertooth_usb.c **** 	LE_WORD(0x20),  		// wTotalLength
 104:ubertooth_usb.c **** 	0x01,  					// bNumInterfaces
 105:ubertooth_usb.c **** 	0x01,  					// bConfigurationValue
 106:ubertooth_usb.c **** 	0x00,  					// iConfiguration
 107:ubertooth_usb.c **** 	0x80,  					// bmAttributes
 108:ubertooth_usb.c **** 	0x6e,  					// bMaxPower (220mA)
 109:ubertooth_usb.c **** 
 110:ubertooth_usb.c **** // interface
 111:ubertooth_usb.c **** 	0x09,
 112:ubertooth_usb.c **** 	DESC_INTERFACE,
 113:ubertooth_usb.c **** 	0x00,  		 			// bInterfaceNumber
 114:ubertooth_usb.c **** 	0x00,   				// bAlternateSetting
 115:ubertooth_usb.c **** 	0x02,   				// bNumEndPoints
 116:ubertooth_usb.c **** 	0xFF,   				// bInterfaceClass
 117:ubertooth_usb.c **** 	0x00,   				// bInterfaceSubClass
 118:ubertooth_usb.c **** 	0x00,   				// bInterfaceProtocol
 119:ubertooth_usb.c **** 	0x00,   				// iInterface
 120:ubertooth_usb.c **** 
 121:ubertooth_usb.c **** // bulk in
 122:ubertooth_usb.c **** 	0x07,
 123:ubertooth_usb.c **** 	DESC_ENDPOINT,
 124:ubertooth_usb.c **** 	BULK_IN_EP,				// bEndpointAddress
 125:ubertooth_usb.c **** 	0x02,   				// bmAttributes = BULK
 126:ubertooth_usb.c **** 	LE_WORD(MAX_PACKET_SIZE),// wMaxPacketSize
 127:ubertooth_usb.c **** 	0,						// bInterval
 128:ubertooth_usb.c **** 
 129:ubertooth_usb.c **** // bulk out
 130:ubertooth_usb.c **** 	0x07,
 131:ubertooth_usb.c **** 	DESC_ENDPOINT,
 132:ubertooth_usb.c **** 	BULK_OUT_EP,			// bEndpointAddress
 133:ubertooth_usb.c **** 	0x02,   				// bmAttributes = BULK
 134:ubertooth_usb.c **** 	LE_WORD(MAX_PACKET_SIZE),// wMaxPacketSize
 135:ubertooth_usb.c **** 	0,						// bInterval
 136:ubertooth_usb.c **** 
 137:ubertooth_usb.c **** // string descriptors
 138:ubertooth_usb.c **** 	0x04,
 139:ubertooth_usb.c **** 	DESC_STRING,
 140:ubertooth_usb.c **** 	LE_WORD(0x0409),
 141:ubertooth_usb.c **** 
 142:ubertooth_usb.c **** 	// manufacturer string
 143:ubertooth_usb.c **** 	40,
 144:ubertooth_usb.c **** 	DESC_STRING,
 145:ubertooth_usb.c **** 	'G', 0x00,
 146:ubertooth_usb.c **** 	'r', 0x00,
ARM GAS  /tmp/cc7b4Eov.s 			page 4


 147:ubertooth_usb.c **** 	'e', 0x00,
 148:ubertooth_usb.c **** 	'a', 0x00,
 149:ubertooth_usb.c **** 	't', 0x00,
 150:ubertooth_usb.c **** 	' ', 0x00,
 151:ubertooth_usb.c **** 	'S', 0x00,
 152:ubertooth_usb.c **** 	'c', 0x00,
 153:ubertooth_usb.c **** 	'o', 0x00,
 154:ubertooth_usb.c **** 	't', 0x00,
 155:ubertooth_usb.c **** 	't', 0x00,
 156:ubertooth_usb.c **** 	' ', 0x00,
 157:ubertooth_usb.c **** 	'G', 0x00,
 158:ubertooth_usb.c **** 	'a', 0x00,
 159:ubertooth_usb.c **** 	'd', 0x00,
 160:ubertooth_usb.c **** 	'g', 0x00,
 161:ubertooth_usb.c **** 	'e', 0x00,
 162:ubertooth_usb.c **** 	't', 0x00,
 163:ubertooth_usb.c **** 	's', 0x00,
 164:ubertooth_usb.c **** 
 165:ubertooth_usb.c **** 	// product string
 166:ubertooth_usb.c **** 	28,
 167:ubertooth_usb.c **** 	DESC_STRING,
 168:ubertooth_usb.c **** 	'U', 0x00,
 169:ubertooth_usb.c **** 	'b', 0x00,
 170:ubertooth_usb.c **** 	'e', 0x00,
 171:ubertooth_usb.c **** 	'r', 0x00,
 172:ubertooth_usb.c **** 	't', 0x00,
 173:ubertooth_usb.c **** 	'o', 0x00,
 174:ubertooth_usb.c **** 	'o', 0x00,
 175:ubertooth_usb.c **** 	't', 0x00,
 176:ubertooth_usb.c **** 	'h', 0x00,
 177:ubertooth_usb.c **** 	' ', 0x00,
 178:ubertooth_usb.c **** 	'O', 0x00,
 179:ubertooth_usb.c **** 	'n', 0x00,
 180:ubertooth_usb.c **** 	'e', 0x00,
 181:ubertooth_usb.c **** 
 182:ubertooth_usb.c **** 	// serial number string
 183:ubertooth_usb.c **** 	0x42,
 184:ubertooth_usb.c **** 	DESC_STRING,
 185:ubertooth_usb.c **** 	'0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0,
 186:ubertooth_usb.c **** 	'0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0,
 187:ubertooth_usb.c **** 	'0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0,
 188:ubertooth_usb.c **** 	'0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '0', 0, '1', 0,
 189:ubertooth_usb.c **** 
 190:ubertooth_usb.c **** 	// terminator
 191:ubertooth_usb.c **** 	0
 192:ubertooth_usb.c **** };
 193:ubertooth_usb.c **** 
 194:ubertooth_usb.c **** #define USB_SERIAL_OFFSET 124
 195:ubertooth_usb.c **** 
 196:ubertooth_usb.c **** u8 abVendorReqData[258];
 197:ubertooth_usb.c **** 
 198:ubertooth_usb.c **** /* Unused functions
 199:ubertooth_usb.c **** void usb_bulk_in_handler(u8 bEP, u8 bEPStatus)
 200:ubertooth_usb.c **** {
 201:ubertooth_usb.c **** 	if (!(bEPStatus & EP_STATUS_DATA))
 202:ubertooth_usb.c **** 		dequeue_send();
 203:ubertooth_usb.c **** }
ARM GAS  /tmp/cc7b4Eov.s 			page 5


 204:ubertooth_usb.c **** 
 205:ubertooth_usb.c **** void usb_bulk_out_handler(u8 bEP, u8 bEPStatus)
 206:ubertooth_usb.c **** {
 207:ubertooth_usb.c **** }
 208:ubertooth_usb.c **** */
 209:ubertooth_usb.c **** 
 210:ubertooth_usb.c **** VendorRequestHandler *v_req_handler;
 211:ubertooth_usb.c **** 
 212:ubertooth_usb.c **** BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
 213:ubertooth_usb.c **** {
  27              		.loc 1 213 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 13B5     		push	{r0, r1, r4, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 0, -16
  35              		.cfi_offset 1, -12
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 213 0
  39 0002 0B46     		mov	r3, r1
 214:ubertooth_usb.c **** 	int rv;
 215:ubertooth_usb.c **** 	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
  40              		.loc 1 215 0
  41 0004 4188     		ldrh	r1, [r0, #2]
  42              	.LVL1:
 216:ubertooth_usb.c **** 	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
  43              		.loc 1 216 0
  44 0006 1268     		ldr	r2, [r2]
  45              	.LVL2:
 215:ubertooth_usb.c **** 	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
  46              		.loc 1 215 0
  47 0008 ADF80410 		strh	r1, [sp, #4]	@ movhi
  48 000c 8188     		ldrh	r1, [r0, #4]
  49              		.loc 1 216 0
  50 000e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
  51              	.LVL3:
 215:ubertooth_usb.c **** 	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
  52              		.loc 1 215 0
  53 0010 ADF80610 		strh	r1, [sp, #6]	@ movhi
  54              		.loc 1 216 0
  55 0014 0449     		ldr	r1, .L2
  56 0016 0C68     		ldr	r4, [r1]
  57 0018 01A9     		add	r1, sp, #4
  58 001a A047     		blx	r4
  59              	.LVL4:
 217:ubertooth_usb.c **** 	return (BOOL) (rv==1);
 218:ubertooth_usb.c **** }
  60              		.loc 1 218 0
  61 001c 431E     		subs	r3, r0, #1
  62 001e 5842     		rsbs	r0, r3, #0
  63              	.LVL5:
  64 0020 5841     		adcs	r0, r0, r3
  65 0022 02B0     		add	sp, sp, #8
  66              		@ sp needed
ARM GAS  /tmp/cc7b4Eov.s 			page 6


  67 0024 10BD     		pop	{r4, pc}
  68              	.L3:
  69 0026 00BF     		.align	2
  70              	.L2:
  71 0028 00000000 		.word	v_req_handler
  72              		.cfi_endproc
  73              	.LFE0:
  75              		.section	.text.set_serial_descriptor,"ax",%progbits
  76              		.align	1
  77              		.global	set_serial_descriptor
  78              		.thumb
  79              		.thumb_func
  81              	set_serial_descriptor:
  82              	.LFB1:
 219:ubertooth_usb.c **** 
 220:ubertooth_usb.c **** 
 221:ubertooth_usb.c **** void set_serial_descriptor(u8 *descriptors) {
  83              		.loc 1 221 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 24
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              	.LVL6:
  88 0000 30B5     		push	{r4, r5, lr}
  89              		.cfi_def_cfa_offset 12
  90              		.cfi_offset 4, -12
  91              		.cfi_offset 5, -8
  92              		.cfi_offset 14, -4
  93 0002 87B0     		sub	sp, sp, #28
  94              		.cfi_def_cfa_offset 40
 222:ubertooth_usb.c **** 	u8 buf[17], *desc, nibble;
 223:ubertooth_usb.c **** 	int len, i;
 224:ubertooth_usb.c **** 	get_device_serial(buf, &len);
  95              		.loc 1 224 0
  96 0004 01AD     		add	r5, sp, #4
 221:ubertooth_usb.c **** 	u8 buf[17], *desc, nibble;
  97              		.loc 1 221 0
  98 0006 0446     		mov	r4, r0
  99              		.loc 1 224 0
 100 0008 6946     		mov	r1, sp
 101 000a 2846     		mov	r0, r5
 102              	.LVL7:
 103 000c FFF7FEFF 		bl	get_device_serial
 104              	.LVL8:
 225:ubertooth_usb.c **** 	if(buf[0] == 0) { /* IAP success */
 105              		.loc 1 225 0
 106 0010 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 107 0014 E2B9     		cbnz	r2, .L4
 108              	.LVL9:
 109 0016 2346     		mov	r3, r4
 110              	.LVL10:
 111              	.L11:
 226:ubertooth_usb.c **** 		desc = descriptors + USB_SERIAL_OFFSET;
 227:ubertooth_usb.c **** 		for(i=0; i<16; i++) {
 228:ubertooth_usb.c **** 			nibble  = (buf[i+1]>>4) & 0xF;
 112              		.loc 1 228 0
 113 0018 0132     		adds	r2, r2, #1
 114              	.LVL11:
ARM GAS  /tmp/cc7b4Eov.s 			page 7


 115 001a A95C     		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 229:ubertooth_usb.c **** 			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
 230:ubertooth_usb.c **** 			desc[1+ i * 4] = 0;
 116              		.loc 1 230 0
 117 001c 0020     		movs	r0, #0
 228:ubertooth_usb.c **** 			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
 118              		.loc 1 228 0
 119 001e 0C09     		lsrs	r4, r1, #4
 120              	.LVL12:
 229:ubertooth_usb.c **** 			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
 121              		.loc 1 229 0
 122 0020 092C     		cmp	r4, #9
 231:ubertooth_usb.c **** 			nibble = buf[i+1]&0xF;
 123              		.loc 1 231 0
 124 0022 01F00F01 		and	r1, r1, #15
 125              	.LVL13:
 229:ubertooth_usb.c **** 			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
 126              		.loc 1 229 0
 127 0026 86BF     		itte	hi
 128 0028 5734     		addhi	r4, r4, #87
 129 002a E4B2     		uxtbhi	r4, r4
 130 002c 3034     		addls	r4, r4, #48
 232:ubertooth_usb.c **** 			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
 131              		.loc 1 232 0
 132 002e 0929     		cmp	r1, #9
 133 0030 86BF     		itte	hi
 134 0032 5731     		addhi	r1, r1, #87
 135              	.LVL14:
 136 0034 C9B2     		uxtbhi	r1, r1
 137 0036 3031     		addls	r1, r1, #48
 227:ubertooth_usb.c **** 			nibble  = (buf[i+1]>>4) & 0xF;
 138              		.loc 1 227 0
 139 0038 102A     		cmp	r2, #16
 229:ubertooth_usb.c **** 			desc[1+ i * 4] = 0;
 140              		.loc 1 229 0
 141 003a 83F87C40 		strb	r4, [r3, #124]
 230:ubertooth_usb.c **** 			nibble = buf[i+1]&0xF;
 142              		.loc 1 230 0
 143 003e 83F87D00 		strb	r0, [r3, #125]
 144              		.loc 1 232 0
 145 0042 83F87E10 		strb	r1, [r3, #126]
 233:ubertooth_usb.c **** 			desc[3 + i * 4] = 0;
 146              		.loc 1 233 0
 147 0046 83F87F00 		strb	r0, [r3, #127]
 148              	.LVL15:
 149 004a 03F10403 		add	r3, r3, #4
 227:ubertooth_usb.c **** 			nibble  = (buf[i+1]>>4) & 0xF;
 150              		.loc 1 227 0
 151 004e E3D1     		bne	.L11
 152              	.LVL16:
 153              	.L4:
 234:ubertooth_usb.c **** 		}
 235:ubertooth_usb.c **** 	}
 236:ubertooth_usb.c **** }
 154              		.loc 1 236 0
 155 0050 07B0     		add	sp, sp, #28
 156              		@ sp needed
ARM GAS  /tmp/cc7b4Eov.s 			page 8


 157 0052 30BD     		pop	{r4, r5, pc}
 158              		.cfi_endproc
 159              	.LFE1:
 161              		.section	.text.ubertooth_usb_init,"ax",%progbits
 162              		.align	1
 163              		.global	ubertooth_usb_init
 164              		.thumb
 165              		.thumb_func
 167              	ubertooth_usb_init:
 168              	.LFB2:
 237:ubertooth_usb.c **** 
 238:ubertooth_usb.c **** int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
 239:ubertooth_usb.c **** {
 169              		.loc 1 239 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              	.LVL17:
 174 0000 38B5     		push	{r3, r4, r5, lr}
 175              		.cfi_def_cfa_offset 16
 176              		.cfi_offset 3, -16
 177              		.cfi_offset 4, -12
 178              		.cfi_offset 5, -8
 179              		.cfi_offset 14, -4
 240:ubertooth_usb.c **** 	// initialise stack
 241:ubertooth_usb.c **** 	USBInit();
 242:ubertooth_usb.c **** 
 243:ubertooth_usb.c **** 	set_serial_descriptor(abDescriptors);
 180              		.loc 1 243 0
 181 0002 0D4C     		ldr	r4, .L18
 239:ubertooth_usb.c **** 	// initialise stack
 182              		.loc 1 239 0
 183 0004 0546     		mov	r5, r0
 241:ubertooth_usb.c **** 
 184              		.loc 1 241 0
 185 0006 FFF7FEFF 		bl	USBInit
 186              	.LVL18:
 187              		.loc 1 243 0
 188 000a 2046     		mov	r0, r4
 189 000c FFF7FEFF 		bl	set_serial_descriptor
 190              	.LVL19:
 244:ubertooth_usb.c **** 	
 245:ubertooth_usb.c **** 	// register device descriptors
 246:ubertooth_usb.c **** 	USBRegisterDescriptors(abDescriptors);
 191              		.loc 1 246 0
 192 0010 2046     		mov	r0, r4
 193 0012 FFF7FEFF 		bl	USBRegisterDescriptors
 194              	.LVL20:
 247:ubertooth_usb.c **** 
 248:ubertooth_usb.c **** 	// Request handler
 249:ubertooth_usb.c **** 	v_req_handler = vendor_req_handler;
 195              		.loc 1 249 0
 196 0016 094B     		ldr	r3, .L18+4
 250:ubertooth_usb.c **** 
 251:ubertooth_usb.c **** 	// override standard request handler
 252:ubertooth_usb.c **** 	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
 197              		.loc 1 252 0
ARM GAS  /tmp/cc7b4Eov.s 			page 9


 198 0018 094A     		ldr	r2, .L18+8
 199 001a 0220     		movs	r0, #2
 200 001c 0949     		ldr	r1, .L18+12
 249:ubertooth_usb.c **** 
 201              		.loc 1 249 0
 202 001e 1D60     		str	r5, [r3]
 203              		.loc 1 252 0
 204 0020 FFF7FEFF 		bl	USBRegisterRequestHandler
 205              	.LVL21:
 253:ubertooth_usb.c **** 
 254:ubertooth_usb.c **** 	// register endpoints
 255:ubertooth_usb.c **** 	//USBHwRegisterEPIntHandler(BULK_IN_EP, usb_bulk_in_handler);
 256:ubertooth_usb.c **** 	//USBHwRegisterEPIntHandler(BULK_OUT_EP, usb_bulk_out_handler);
 257:ubertooth_usb.c **** 
 258:ubertooth_usb.c **** 	// enable USB interrupts
 259:ubertooth_usb.c **** 	//ISER0 = ISER0_ISE_USB;
 260:ubertooth_usb.c **** 
 261:ubertooth_usb.c **** 	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
 262:ubertooth_usb.c **** 	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
 206              		.loc 1 262 0
 207 0024 0849     		ldr	r1, .L18+16
 208 0026 FF20     		movs	r0, #255
 209 0028 FFF7FEFF 		bl	USBRegisterWinusbInterface
 210              	.LVL22:
 263:ubertooth_usb.c **** 
 264:ubertooth_usb.c **** 	// connect to bus
 265:ubertooth_usb.c **** 	USBHwConnect(TRUE);
 211              		.loc 1 265 0
 212 002c 0120     		movs	r0, #1
 213 002e FFF7FEFF 		bl	USBHwConnect
 214              	.LVL23:
 266:ubertooth_usb.c **** 
 267:ubertooth_usb.c **** 	return 0;
 268:ubertooth_usb.c **** }
 215              		.loc 1 268 0
 216 0032 0020     		movs	r0, #0
 217 0034 38BD     		pop	{r3, r4, r5, pc}
 218              	.LVL24:
 219              	.L19:
 220 0036 00BF     		.align	2
 221              	.L18:
 222 0038 00000000 		.word	.LANCHOR0
 223 003c 00000000 		.word	v_req_handler
 224 0040 00000000 		.word	abVendorReqData
 225 0044 00000000 		.word	usb_vendor_request_handler
 226 0048 00000000 		.word	.LC0
 227              		.cfi_endproc
 228              	.LFE2:
 230              		.section	.text.queue_init,"ax",%progbits
 231              		.align	1
 232              		.global	queue_init
 233              		.thumb
 234              		.thumb_func
 236              	queue_init:
 237              	.LFB3:
 269:ubertooth_usb.c **** 
 270:ubertooth_usb.c **** usb_pkt_rx fifo[128];
ARM GAS  /tmp/cc7b4Eov.s 			page 10


 271:ubertooth_usb.c **** 
 272:ubertooth_usb.c **** volatile u32 head = 0;
 273:ubertooth_usb.c **** volatile u32 tail = 0;
 274:ubertooth_usb.c **** 
 275:ubertooth_usb.c **** void queue_init(void)
 276:ubertooth_usb.c **** {
 238              		.loc 1 276 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 277:ubertooth_usb.c **** 	head = 0;
 243              		.loc 1 277 0
 244 0000 044B     		ldr	r3, .L21
 245 0002 0021     		movs	r1, #0
 278:ubertooth_usb.c **** 	tail = 0;
 279:ubertooth_usb.c **** 	memset(fifo, 0, sizeof(fifo));
 246              		.loc 1 279 0
 247 0004 0448     		ldr	r0, .L21+4
 248 0006 4FF40052 		mov	r2, #8192
 277:ubertooth_usb.c **** 	head = 0;
 249              		.loc 1 277 0
 250 000a 1960     		str	r1, [r3]
 278:ubertooth_usb.c **** 	tail = 0;
 251              		.loc 1 278 0
 252 000c 5960     		str	r1, [r3, #4]
 253              		.loc 1 279 0
 254 000e FFF7FEBF 		b	memset
 255              	.LVL25:
 256              	.L22:
 257 0012 00BF     		.align	2
 258              	.L21:
 259 0014 00000000 		.word	.LANCHOR1
 260 0018 00000000 		.word	fifo
 261              		.cfi_endproc
 262              	.LFE3:
 264              		.section	.text.usb_enqueue,"ax",%progbits
 265              		.align	1
 266              		.global	usb_enqueue
 267              		.thumb
 268              		.thumb_func
 270              	usb_enqueue:
 271              	.LFB4:
 280:ubertooth_usb.c **** }
 281:ubertooth_usb.c **** 
 282:ubertooth_usb.c **** usb_pkt_rx *usb_enqueue(void)
 283:ubertooth_usb.c **** {
 272              		.loc 1 283 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 284:ubertooth_usb.c **** 	u8 h = head & 0x7F;
 277              		.loc 1 284 0
 278 0000 0A4B     		ldr	r3, .L26
 279 0002 1968     		ldr	r1, [r3]
 280              	.LVL26:
ARM GAS  /tmp/cc7b4Eov.s 			page 11


 285:ubertooth_usb.c **** 	u8 t = tail & 0x7F;
 281              		.loc 1 285 0
 282 0004 5868     		ldr	r0, [r3, #4]
 286:ubertooth_usb.c **** 	u8 n = (t + 1) & 0x7F;
 287:ubertooth_usb.c **** 
 288:ubertooth_usb.c **** 	/* fail if queue is full */
 289:ubertooth_usb.c **** 	if (h == n) {
 283              		.loc 1 289 0
 284 0006 01F07F01 		and	r1, r1, #127
 285              	.LVL27:
 285:ubertooth_usb.c **** 	u8 t = tail & 0x7F;
 286              		.loc 1 285 0
 287 000a 00F07F00 		and	r0, r0, #127
 288              	.LVL28:
 286:ubertooth_usb.c **** 	u8 n = (t + 1) & 0x7F;
 289              		.loc 1 286 0
 290 000e 421C     		adds	r2, r0, #1
 291              		.loc 1 289 0
 292 0010 02F07F02 		and	r2, r2, #127
 293 0014 9142     		cmp	r1, r2
 294 0016 06D0     		beq	.L25
 290:ubertooth_usb.c **** 		return NULL;
 291:ubertooth_usb.c **** 	}
 292:ubertooth_usb.c **** 
 293:ubertooth_usb.c **** 	++tail;
 295              		.loc 1 293 0
 296 0018 5A68     		ldr	r2, [r3, #4]
 297 001a 0132     		adds	r2, r2, #1
 298 001c 5A60     		str	r2, [r3, #4]
 294:ubertooth_usb.c **** 	return &fifo[t];
 299              		.loc 1 294 0
 300 001e 044B     		ldr	r3, .L26+4
 301 0020 03EB8010 		add	r0, r3, r0, lsl #6
 302              	.LVL29:
 303 0024 7047     		bx	lr
 304              	.LVL30:
 305              	.L25:
 290:ubertooth_usb.c **** 		return NULL;
 306              		.loc 1 290 0
 307 0026 0020     		movs	r0, #0
 308              	.LVL31:
 295:ubertooth_usb.c **** 
 296:ubertooth_usb.c **** }
 309              		.loc 1 296 0
 310 0028 7047     		bx	lr
 311              	.L27:
 312 002a 00BF     		.align	2
 313              	.L26:
 314 002c 00000000 		.word	.LANCHOR1
 315 0030 00000000 		.word	fifo
 316              		.cfi_endproc
 317              	.LFE4:
 319              		.section	.text.dequeue,"ax",%progbits
 320              		.align	1
 321              		.global	dequeue
 322              		.thumb
 323              		.thumb_func
ARM GAS  /tmp/cc7b4Eov.s 			page 12


 325              	dequeue:
 326              	.LFB5:
 297:ubertooth_usb.c **** 
 298:ubertooth_usb.c **** usb_pkt_rx *dequeue(void)
 299:ubertooth_usb.c **** {
 327              		.loc 1 299 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 300:ubertooth_usb.c **** 	u8 h = head & 0x7F;
 332              		.loc 1 300 0
 333 0000 084B     		ldr	r3, .L31
 334 0002 1868     		ldr	r0, [r3]
 301:ubertooth_usb.c **** 	u8 t = tail & 0x7F;
 335              		.loc 1 301 0
 336 0004 5A68     		ldr	r2, [r3, #4]
 300:ubertooth_usb.c **** 	u8 h = head & 0x7F;
 337              		.loc 1 300 0
 338 0006 00F07F00 		and	r0, r0, #127
 339              	.LVL32:
 302:ubertooth_usb.c **** 
 303:ubertooth_usb.c **** 	/* fail if queue is empty */
 304:ubertooth_usb.c **** 	if (h == t) {
 340              		.loc 1 304 0
 341 000a 02F07F02 		and	r2, r2, #127
 342              	.LVL33:
 343 000e 9042     		cmp	r0, r2
 344 0010 06D0     		beq	.L30
 305:ubertooth_usb.c **** 		return NULL;
 306:ubertooth_usb.c **** 	}
 307:ubertooth_usb.c **** 
 308:ubertooth_usb.c **** 	++head;
 345              		.loc 1 308 0
 346 0012 1A68     		ldr	r2, [r3]
 347 0014 0132     		adds	r2, r2, #1
 348 0016 1A60     		str	r2, [r3]
 309:ubertooth_usb.c **** 	return &fifo[h];
 349              		.loc 1 309 0
 350 0018 034B     		ldr	r3, .L31+4
 351 001a 03EB8010 		add	r0, r3, r0, lsl #6
 352              	.LVL34:
 353 001e 7047     		bx	lr
 354              	.LVL35:
 355              	.L30:
 305:ubertooth_usb.c **** 		return NULL;
 356              		.loc 1 305 0
 357 0020 0020     		movs	r0, #0
 358              	.LVL36:
 310:ubertooth_usb.c **** }
 359              		.loc 1 310 0
 360 0022 7047     		bx	lr
 361              	.L32:
 362              		.align	2
 363              	.L31:
 364 0024 00000000 		.word	.LANCHOR1
 365 0028 00000000 		.word	fifo
ARM GAS  /tmp/cc7b4Eov.s 			page 13


 366              		.cfi_endproc
 367              	.LFE5:
 369              		.section	.text.dequeue_send,"ax",%progbits
 370              		.align	1
 371              		.global	dequeue_send
 372              		.thumb
 373              		.thumb_func
 375              	dequeue_send:
 376              	.LFB6:
 311:ubertooth_usb.c **** 
 312:ubertooth_usb.c **** #define USB_KEEP_ALIVE 400000
 313:ubertooth_usb.c **** u32 last_usb_pkt = 0;  // for keep alive packets
 314:ubertooth_usb.c **** 
 315:ubertooth_usb.c **** int dequeue_send(u32 clkn)
 316:ubertooth_usb.c **** {
 377              		.loc 1 316 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 8
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              	.LVL37:
 382 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 383              		.cfi_def_cfa_offset 24
 384              		.cfi_offset 0, -24
 385              		.cfi_offset 1, -20
 386              		.cfi_offset 2, -16
 387              		.cfi_offset 4, -12
 388              		.cfi_offset 5, -8
 389              		.cfi_offset 14, -4
 390              		.loc 1 316 0
 391 0002 0546     		mov	r5, r0
 317:ubertooth_usb.c **** 	usb_pkt_rx *pkt = dequeue();
 392              		.loc 1 317 0
 393 0004 FFF7FEFF 		bl	dequeue
 394              	.LVL38:
 395 0008 0D4B     		ldr	r3, .L37
 318:ubertooth_usb.c **** 	if (pkt != NULL) {
 396              		.loc 1 318 0
 397 000a 0446     		mov	r4, r0
 398 000c 38B1     		cbz	r0, .L34
 319:ubertooth_usb.c **** 		last_usb_pkt = clkn;
 320:ubertooth_usb.c **** 		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
 399              		.loc 1 320 0
 400 000e 8220     		movs	r0, #130
 401              	.LVL39:
 402 0010 2146     		mov	r1, r4
 403 0012 4022     		movs	r2, #64
 319:ubertooth_usb.c **** 		last_usb_pkt = clkn;
 404              		.loc 1 319 0
 405 0014 9D60     		str	r5, [r3, #8]
 406              		.loc 1 320 0
 407 0016 FFF7FEFF 		bl	USBHwEPWrite
 408              	.LVL40:
 321:ubertooth_usb.c **** 		return 1;
 409              		.loc 1 321 0
 410 001a 0120     		movs	r0, #1
 411 001c 0EE0     		b	.L35
 412              	.LVL41:
ARM GAS  /tmp/cc7b4Eov.s 			page 14


 413              	.L34:
 322:ubertooth_usb.c **** 	} else {
 323:ubertooth_usb.c **** 		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
 414              		.loc 1 323 0
 415 001e 9A68     		ldr	r2, [r3, #8]
 416 0020 0849     		ldr	r1, .L37+4
 417 0022 AA1A     		subs	r2, r5, r2
 418 0024 8A42     		cmp	r2, r1
 419 0026 08D9     		bls	.L36
 420              	.LVL42:
 421              	.LBB6:
 422              	.LBB7:
 423              	.LBB8:
 324:ubertooth_usb.c **** 			u8 pkt_type = KEEP_ALIVE;
 424              		.loc 1 324 0
 425 0028 0322     		movs	r2, #3
 426 002a 02A9     		add	r1, sp, #8
 427 002c 01F8012D 		strb	r2, [r1, #-1]!
 325:ubertooth_usb.c **** 			last_usb_pkt = clkn;
 326:ubertooth_usb.c **** 			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
 428              		.loc 1 326 0
 429 0030 8220     		movs	r0, #130
 430              	.LVL43:
 431 0032 0122     		movs	r2, #1
 325:ubertooth_usb.c **** 			last_usb_pkt = clkn;
 432              		.loc 1 325 0
 433 0034 9D60     		str	r5, [r3, #8]
 434              		.loc 1 326 0
 435 0036 FFF7FEFF 		bl	USBHwEPWrite
 436              	.LVL44:
 437              	.L36:
 438              	.LBE8:
 439              	.LBE7:
 440              	.LBE6:
 327:ubertooth_usb.c **** 		}
 328:ubertooth_usb.c **** 		return 0;
 441              		.loc 1 328 0
 442 003a 2046     		mov	r0, r4
 443              	.L35:
 329:ubertooth_usb.c **** 	}
 330:ubertooth_usb.c **** }
 444              		.loc 1 330 0
 445 003c 03B0     		add	sp, sp, #12
 446              		@ sp needed
 447 003e 30BD     		pop	{r4, r5, pc}
 448              	.LVL45:
 449              	.L38:
 450              		.align	2
 451              	.L37:
 452 0040 00000000 		.word	.LANCHOR1
 453 0044 801A0600 		.word	400000
 454              		.cfi_endproc
 455              	.LFE6:
 457              		.section	.text.handle_usb,"ax",%progbits
 458              		.align	1
 459              		.global	handle_usb
 460              		.thumb
ARM GAS  /tmp/cc7b4Eov.s 			page 15


 461              		.thumb_func
 463              	handle_usb:
 464              	.LFB7:
 331:ubertooth_usb.c **** 
 332:ubertooth_usb.c **** void handle_usb(u32 clkn)
 333:ubertooth_usb.c **** {
 465              		.loc 1 333 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              	.LVL46:
 470 0000 38B5     		push	{r3, r4, r5, lr}
 471              		.cfi_def_cfa_offset 16
 472              		.cfi_offset 3, -16
 473              		.cfi_offset 4, -12
 474              		.cfi_offset 5, -8
 475              		.cfi_offset 14, -4
 476              		.loc 1 333 0
 477 0002 0446     		mov	r4, r0
 334:ubertooth_usb.c **** 	u8 epstat;
 335:ubertooth_usb.c **** 
 336:ubertooth_usb.c **** 	/* write queued packets to USB if possible */
 337:ubertooth_usb.c **** 	epstat = USBHwEPGetStatus(BULK_IN_EP);
 478              		.loc 1 337 0
 479 0004 8220     		movs	r0, #130
 480              	.LVL47:
 481 0006 FFF7FEFF 		bl	USBHwEPGetStatus
 482              	.LVL48:
 338:ubertooth_usb.c **** 	if (!(epstat & EPSTAT_B1FULL)) {
 483              		.loc 1 338 0
 484 000a 8106     		lsls	r1, r0, #26
 337:ubertooth_usb.c **** 	if (!(epstat & EPSTAT_B1FULL)) {
 485              		.loc 1 337 0
 486 000c 0546     		mov	r5, r0
 487              	.LVL49:
 488              		.loc 1 338 0
 489 000e 02D4     		bmi	.L40
 339:ubertooth_usb.c **** 		dequeue_send(clkn);
 490              		.loc 1 339 0
 491 0010 2046     		mov	r0, r4
 492              	.LVL50:
 493 0012 FFF7FEFF 		bl	dequeue_send
 494              	.LVL51:
 495              	.L40:
 340:ubertooth_usb.c **** 	}
 341:ubertooth_usb.c **** 	if (!(epstat & EPSTAT_B2FULL)) {
 496              		.loc 1 341 0
 497 0016 6A06     		lsls	r2, r5, #25
 498 0018 02D4     		bmi	.L41
 342:ubertooth_usb.c **** 		dequeue_send(clkn);
 499              		.loc 1 342 0
 500 001a 2046     		mov	r0, r4
 501 001c FFF7FEFF 		bl	dequeue_send
 502              	.LVL52:
 503              	.L41:
 343:ubertooth_usb.c **** 	}
 344:ubertooth_usb.c **** 
ARM GAS  /tmp/cc7b4Eov.s 			page 16


 345:ubertooth_usb.c **** 	/* polled "interrupt" */
 346:ubertooth_usb.c **** 	USBHwISR();
 347:ubertooth_usb.c **** }
 504              		.loc 1 347 0
 505 0020 BDE83840 		pop	{r3, r4, r5, lr}
 506              	.LVL53:
 346:ubertooth_usb.c **** }
 507              		.loc 1 346 0
 508 0024 FFF7FEBF 		b	USBHwISR
 509              	.LVL54:
 510              		.cfi_endproc
 511              	.LFE7:
 513              		.global	last_usb_pkt
 514              		.global	tail
 515              		.global	head
 516              		.comm	fifo,8192,4
 517              		.comm	v_req_handler,4,4
 518              		.comm	abVendorReqData,258,1
 519              		.section	.rodata.str1.1,"aMS",%progbits,1
 520              	.LC0:
 521 0000 7B386163 		.ascii	"{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}\000"
 521      34376138 
 521      382D6363 
 521      32362D34 
 521      6161392D 
 522              		.data
 523              		.set	.LANCHOR0,. + 0
 526              	abDescriptors:
 527 0000 12       		.byte	18
 528 0001 01       		.byte	1
 529 0002 00       		.byte	0
 530 0003 02       		.byte	2
 531 0004 FF       		.byte	-1
 532 0005 00       		.byte	0
 533 0006 00       		.byte	0
 534 0007 40       		.byte	64
 535 0008 50       		.byte	80
 536 0009 1D       		.byte	29
 537 000a 02       		.byte	2
 538 000b 60       		.byte	96
 539 000c 02       		.byte	2
 540 000d 01       		.byte	1
 541 000e 01       		.byte	1
 542 000f 02       		.byte	2
 543 0010 03       		.byte	3
 544 0011 01       		.byte	1
 545 0012 09       		.byte	9
 546 0013 02       		.byte	2
 547 0014 20       		.byte	32
 548 0015 00       		.byte	0
 549 0016 01       		.byte	1
 550 0017 01       		.byte	1
 551 0018 00       		.byte	0
 552 0019 80       		.byte	-128
 553 001a 6E       		.byte	110
 554 001b 09       		.byte	9
 555 001c 04       		.byte	4
ARM GAS  /tmp/cc7b4Eov.s 			page 17


 556 001d 00       		.byte	0
 557 001e 00       		.byte	0
 558 001f 02       		.byte	2
 559 0020 FF       		.byte	-1
 560 0021 00       		.byte	0
 561 0022 00       		.byte	0
 562 0023 00       		.byte	0
 563 0024 07       		.byte	7
 564 0025 05       		.byte	5
 565 0026 82       		.byte	-126
 566 0027 02       		.byte	2
 567 0028 40       		.byte	64
 568 0029 00       		.byte	0
 569 002a 00       		.byte	0
 570 002b 07       		.byte	7
 571 002c 05       		.byte	5
 572 002d 05       		.byte	5
 573 002e 02       		.byte	2
 574 002f 40       		.byte	64
 575 0030 00       		.byte	0
 576 0031 00       		.byte	0
 577 0032 04       		.byte	4
 578 0033 03       		.byte	3
 579 0034 09       		.byte	9
 580 0035 04       		.byte	4
 581 0036 28       		.byte	40
 582 0037 03       		.byte	3
 583 0038 47       		.byte	71
 584 0039 00       		.byte	0
 585 003a 72       		.byte	114
 586 003b 00       		.byte	0
 587 003c 65       		.byte	101
 588 003d 00       		.byte	0
 589 003e 61       		.byte	97
 590 003f 00       		.byte	0
 591 0040 74       		.byte	116
 592 0041 00       		.byte	0
 593 0042 20       		.byte	32
 594 0043 00       		.byte	0
 595 0044 53       		.byte	83
 596 0045 00       		.byte	0
 597 0046 63       		.byte	99
 598 0047 00       		.byte	0
 599 0048 6F       		.byte	111
 600 0049 00       		.byte	0
 601 004a 74       		.byte	116
 602 004b 00       		.byte	0
 603 004c 74       		.byte	116
 604 004d 00       		.byte	0
 605 004e 20       		.byte	32
 606 004f 00       		.byte	0
 607 0050 47       		.byte	71
 608 0051 00       		.byte	0
 609 0052 61       		.byte	97
 610 0053 00       		.byte	0
 611 0054 64       		.byte	100
 612 0055 00       		.byte	0
ARM GAS  /tmp/cc7b4Eov.s 			page 18


 613 0056 67       		.byte	103
 614 0057 00       		.byte	0
 615 0058 65       		.byte	101
 616 0059 00       		.byte	0
 617 005a 74       		.byte	116
 618 005b 00       		.byte	0
 619 005c 73       		.byte	115
 620 005d 00       		.byte	0
 621 005e 1C       		.byte	28
 622 005f 03       		.byte	3
 623 0060 55       		.byte	85
 624 0061 00       		.byte	0
 625 0062 62       		.byte	98
 626 0063 00       		.byte	0
 627 0064 65       		.byte	101
 628 0065 00       		.byte	0
 629 0066 72       		.byte	114
 630 0067 00       		.byte	0
 631 0068 74       		.byte	116
 632 0069 00       		.byte	0
 633 006a 6F       		.byte	111
 634 006b 00       		.byte	0
 635 006c 6F       		.byte	111
 636 006d 00       		.byte	0
 637 006e 74       		.byte	116
 638 006f 00       		.byte	0
 639 0070 68       		.byte	104
 640 0071 00       		.byte	0
 641 0072 20       		.byte	32
 642 0073 00       		.byte	0
 643 0074 4F       		.byte	79
 644 0075 00       		.byte	0
 645 0076 6E       		.byte	110
 646 0077 00       		.byte	0
 647 0078 65       		.byte	101
 648 0079 00       		.byte	0
 649 007a 42       		.byte	66
 650 007b 03       		.byte	3
 651 007c 30       		.byte	48
 652 007d 00       		.byte	0
 653 007e 30       		.byte	48
 654 007f 00       		.byte	0
 655 0080 30       		.byte	48
 656 0081 00       		.byte	0
 657 0082 30       		.byte	48
 658 0083 00       		.byte	0
 659 0084 30       		.byte	48
 660 0085 00       		.byte	0
 661 0086 30       		.byte	48
 662 0087 00       		.byte	0
 663 0088 30       		.byte	48
 664 0089 00       		.byte	0
 665 008a 30       		.byte	48
 666 008b 00       		.byte	0
 667 008c 30       		.byte	48
 668 008d 00       		.byte	0
 669 008e 30       		.byte	48
ARM GAS  /tmp/cc7b4Eov.s 			page 19


 670 008f 00       		.byte	0
 671 0090 30       		.byte	48
 672 0091 00       		.byte	0
 673 0092 30       		.byte	48
 674 0093 00       		.byte	0
 675 0094 30       		.byte	48
 676 0095 00       		.byte	0
 677 0096 30       		.byte	48
 678 0097 00       		.byte	0
 679 0098 30       		.byte	48
 680 0099 00       		.byte	0
 681 009a 30       		.byte	48
 682 009b 00       		.byte	0
 683 009c 30       		.byte	48
 684 009d 00       		.byte	0
 685 009e 30       		.byte	48
 686 009f 00       		.byte	0
 687 00a0 30       		.byte	48
 688 00a1 00       		.byte	0
 689 00a2 30       		.byte	48
 690 00a3 00       		.byte	0
 691 00a4 30       		.byte	48
 692 00a5 00       		.byte	0
 693 00a6 30       		.byte	48
 694 00a7 00       		.byte	0
 695 00a8 30       		.byte	48
 696 00a9 00       		.byte	0
 697 00aa 30       		.byte	48
 698 00ab 00       		.byte	0
 699 00ac 30       		.byte	48
 700 00ad 00       		.byte	0
 701 00ae 30       		.byte	48
 702 00af 00       		.byte	0
 703 00b0 30       		.byte	48
 704 00b1 00       		.byte	0
 705 00b2 30       		.byte	48
 706 00b3 00       		.byte	0
 707 00b4 30       		.byte	48
 708 00b5 00       		.byte	0
 709 00b6 30       		.byte	48
 710 00b7 00       		.byte	0
 711 00b8 30       		.byte	48
 712 00b9 00       		.byte	0
 713 00ba 31       		.byte	49
 714 00bb 00       		.byte	0
 715 00bc 00       		.byte	0
 716              		.bss
 717              		.align	2
 718              		.set	.LANCHOR1,. + 0
 721              	head:
 722 0000 00000000 		.space	4
 725              	tail:
 726 0004 00000000 		.space	4
 729              	last_usb_pkt:
 730 0008 00000000 		.space	4
 731              		.text
 732              	.Letext0:
ARM GAS  /tmp/cc7b4Eov.s 			page 20


 733              		.file 2 "../common/lpcusb/target/type.h"
 734              		.file 3 "../common/lpcusb/target/usbstruct.h"
 735              		.file 4 "../common/lpcusb/target/usbapi.h"
 736              		.file 5 "/usr/lib/gcc/arm-none-eabi/4.8.2/include/stdint-gcc.h"
 737              		.file 6 "../../host/libubertooth/src/ubertooth_interface.h"
 738              		.file 7 "ubertooth_usb.h"
 739              		.file 8 "/usr/lib/gcc/arm-none-eabi/4.8.2/include/stddef.h"
 740              		.file 9 "../common/ubertooth.h"
 741              		.file 10 "/usr/include/newlib/string.h"
 742              		.file 11 "../common/lpcusb/target/usbhw_lpc.h"
ARM GAS  /tmp/cc7b4Eov.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ubertooth_usb.c
     /tmp/cc7b4Eov.s:19     .text.usb_vendor_request_handler:0000000000000000 $t
     /tmp/cc7b4Eov.s:24     .text.usb_vendor_request_handler:0000000000000000 usb_vendor_request_handler
     /tmp/cc7b4Eov.s:71     .text.usb_vendor_request_handler:0000000000000028 $d
                            *COM*:0000000000000004 v_req_handler
     /tmp/cc7b4Eov.s:76     .text.set_serial_descriptor:0000000000000000 $t
     /tmp/cc7b4Eov.s:81     .text.set_serial_descriptor:0000000000000000 set_serial_descriptor
     /tmp/cc7b4Eov.s:162    .text.ubertooth_usb_init:0000000000000000 $t
     /tmp/cc7b4Eov.s:167    .text.ubertooth_usb_init:0000000000000000 ubertooth_usb_init
     /tmp/cc7b4Eov.s:222    .text.ubertooth_usb_init:0000000000000038 $d
                            *COM*:0000000000000102 abVendorReqData
     /tmp/cc7b4Eov.s:231    .text.queue_init:0000000000000000 $t
     /tmp/cc7b4Eov.s:236    .text.queue_init:0000000000000000 queue_init
     /tmp/cc7b4Eov.s:259    .text.queue_init:0000000000000014 $d
                            *COM*:0000000000002000 fifo
     /tmp/cc7b4Eov.s:265    .text.usb_enqueue:0000000000000000 $t
     /tmp/cc7b4Eov.s:270    .text.usb_enqueue:0000000000000000 usb_enqueue
     /tmp/cc7b4Eov.s:314    .text.usb_enqueue:000000000000002c $d
     /tmp/cc7b4Eov.s:320    .text.dequeue:0000000000000000 $t
     /tmp/cc7b4Eov.s:325    .text.dequeue:0000000000000000 dequeue
     /tmp/cc7b4Eov.s:364    .text.dequeue:0000000000000024 $d
     /tmp/cc7b4Eov.s:370    .text.dequeue_send:0000000000000000 $t
     /tmp/cc7b4Eov.s:375    .text.dequeue_send:0000000000000000 dequeue_send
     /tmp/cc7b4Eov.s:452    .text.dequeue_send:0000000000000040 $d
     /tmp/cc7b4Eov.s:458    .text.handle_usb:0000000000000000 $t
     /tmp/cc7b4Eov.s:463    .text.handle_usb:0000000000000000 handle_usb
     /tmp/cc7b4Eov.s:729    .bss:0000000000000008 last_usb_pkt
     /tmp/cc7b4Eov.s:725    .bss:0000000000000004 tail
     /tmp/cc7b4Eov.s:721    .bss:0000000000000000 head
     /tmp/cc7b4Eov.s:526    .data:0000000000000000 abDescriptors
     /tmp/cc7b4Eov.s:717    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
get_device_serial
USBInit
USBRegisterDescriptors
USBRegisterRequestHandler
USBRegisterWinusbInterface
USBHwConnect
memset
USBHwEPWrite
USBHwEPGetStatus
USBHwISR

ARM GAS  /tmp/cccN1Mi0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usbcontrol.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.DataIn,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	DataIn:
  24              	.LFB2:
  25              		.file 1 "../common/lpcusb/target/usbcontrol.c"
   1:../common/lpcusb/target/usbcontrol.c **** /*
   2:../common/lpcusb/target/usbcontrol.c **** 	LPCUSB, an USB device driver for LPC microcontrollers	
   3:../common/lpcusb/target/usbcontrol.c **** 	Copyright (C) 2006 Bertrik Sikken (bertrik@sikken.nl)
   4:../common/lpcusb/target/usbcontrol.c **** 
   5:../common/lpcusb/target/usbcontrol.c **** 	Redistribution and use in source and binary forms, with or without
   6:../common/lpcusb/target/usbcontrol.c **** 	modification, are permitted provided that the following conditions are met:
   7:../common/lpcusb/target/usbcontrol.c **** 
   8:../common/lpcusb/target/usbcontrol.c **** 	1. Redistributions of source code must retain the above copyright
   9:../common/lpcusb/target/usbcontrol.c **** 	   notice, this list of conditions and the following disclaimer.
  10:../common/lpcusb/target/usbcontrol.c **** 	2. Redistributions in binary form must reproduce the above copyright
  11:../common/lpcusb/target/usbcontrol.c **** 	   notice, this list of conditions and the following disclaimer in the
  12:../common/lpcusb/target/usbcontrol.c **** 	   documentation and/or other materials provided with the distribution.
  13:../common/lpcusb/target/usbcontrol.c **** 	3. The name of the author may not be used to endorse or promote products
  14:../common/lpcusb/target/usbcontrol.c **** 	   derived from this software without specific prior written permission.
  15:../common/lpcusb/target/usbcontrol.c **** 
  16:../common/lpcusb/target/usbcontrol.c **** 	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  17:../common/lpcusb/target/usbcontrol.c **** 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  18:../common/lpcusb/target/usbcontrol.c **** 	OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  19:../common/lpcusb/target/usbcontrol.c **** 	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, 
  20:../common/lpcusb/target/usbcontrol.c **** 	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  21:../common/lpcusb/target/usbcontrol.c **** 	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  22:../common/lpcusb/target/usbcontrol.c **** 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  23:../common/lpcusb/target/usbcontrol.c **** 	THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  24:../common/lpcusb/target/usbcontrol.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  25:../common/lpcusb/target/usbcontrol.c **** 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  26:../common/lpcusb/target/usbcontrol.c **** */
  27:../common/lpcusb/target/usbcontrol.c **** 
  28:../common/lpcusb/target/usbcontrol.c **** 
  29:../common/lpcusb/target/usbcontrol.c **** /** @file
  30:../common/lpcusb/target/usbcontrol.c **** 	Control transfer handler.
  31:../common/lpcusb/target/usbcontrol.c **** 	
  32:../common/lpcusb/target/usbcontrol.c **** 	This module handles control transfers and is normally installed on the
  33:../common/lpcusb/target/usbcontrol.c **** 	endpoint 0 callback.
ARM GAS  /tmp/cccN1Mi0.s 			page 2


  34:../common/lpcusb/target/usbcontrol.c **** 	
  35:../common/lpcusb/target/usbcontrol.c **** 	Control transfers can be of the following type:
  36:../common/lpcusb/target/usbcontrol.c **** 	0 Standard;
  37:../common/lpcusb/target/usbcontrol.c **** 	1 Class;
  38:../common/lpcusb/target/usbcontrol.c **** 	2 Vendor;
  39:../common/lpcusb/target/usbcontrol.c **** 	3 Reserved.
  40:../common/lpcusb/target/usbcontrol.c **** 
  41:../common/lpcusb/target/usbcontrol.c **** 	A callback can be installed for each of these control transfers using
  42:../common/lpcusb/target/usbcontrol.c **** 	USBRegisterRequestHandler.
  43:../common/lpcusb/target/usbcontrol.c **** 	When an OUT request arrives, data is collected in the data store provided
  44:../common/lpcusb/target/usbcontrol.c **** 	with the USBRegisterRequestHandler call. When the transfer is done, the
  45:../common/lpcusb/target/usbcontrol.c **** 	callback is called.
  46:../common/lpcusb/target/usbcontrol.c **** 	When an IN request arrives, the callback is called immediately to either
  47:../common/lpcusb/target/usbcontrol.c **** 	put the control transfer data in the data store, or to get a pointer to
  48:../common/lpcusb/target/usbcontrol.c **** 	control transfer data. The data is then packetised and sent to the host.
  49:../common/lpcusb/target/usbcontrol.c **** */
  50:../common/lpcusb/target/usbcontrol.c **** 
  51:../common/lpcusb/target/usbcontrol.c **** #include "type.h"
  52:../common/lpcusb/target/usbcontrol.c **** #include "debug.h"
  53:../common/lpcusb/target/usbcontrol.c **** 
  54:../common/lpcusb/target/usbcontrol.c **** #include "usbstruct.h"
  55:../common/lpcusb/target/usbcontrol.c **** #include "usbapi.h"
  56:../common/lpcusb/target/usbcontrol.c **** 
  57:../common/lpcusb/target/usbcontrol.c **** 
  58:../common/lpcusb/target/usbcontrol.c **** 
  59:../common/lpcusb/target/usbcontrol.c **** #define	MAX_CONTROL_SIZE	128	/**< maximum total size of control transfer data */
  60:../common/lpcusb/target/usbcontrol.c **** #define	MAX_REQ_HANDLERS	4	/**< standard, class, vendor, reserved */
  61:../common/lpcusb/target/usbcontrol.c **** 
  62:../common/lpcusb/target/usbcontrol.c **** static TSetupPacket		Setup;	/**< setup packet */
  63:../common/lpcusb/target/usbcontrol.c **** 
  64:../common/lpcusb/target/usbcontrol.c **** static U8				*pbData;	/**< pointer to data buffer */
  65:../common/lpcusb/target/usbcontrol.c **** static int				iResidue;	/**< remaining bytes in buffer */
  66:../common/lpcusb/target/usbcontrol.c **** static int				iLen;		/**< total length of control transfer */
  67:../common/lpcusb/target/usbcontrol.c **** 
  68:../common/lpcusb/target/usbcontrol.c **** /** Array of installed request handler callbacks */
  69:../common/lpcusb/target/usbcontrol.c **** static TFnHandleRequest *apfnReqHandlers[4] = {NULL, NULL, NULL, NULL};
  70:../common/lpcusb/target/usbcontrol.c **** /** Array of installed request data pointers */
  71:../common/lpcusb/target/usbcontrol.c **** static U8				*apbDataStore[4] = {NULL, NULL, NULL, NULL};
  72:../common/lpcusb/target/usbcontrol.c **** 
  73:../common/lpcusb/target/usbcontrol.c **** 
  74:../common/lpcusb/target/usbcontrol.c **** /** Internal function filtering Vendor requests to handle OS Descriptors */
  75:../common/lpcusb/target/usbcontrol.c **** BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData);
  76:../common/lpcusb/target/usbcontrol.c **** 
  77:../common/lpcusb/target/usbcontrol.c **** 
  78:../common/lpcusb/target/usbcontrol.c **** 
  79:../common/lpcusb/target/usbcontrol.c **** /**
  80:../common/lpcusb/target/usbcontrol.c **** 	Local function to handle a request by calling one of the installed
  81:../common/lpcusb/target/usbcontrol.c **** 	request handlers.
  82:../common/lpcusb/target/usbcontrol.c **** 		
  83:../common/lpcusb/target/usbcontrol.c **** 	In case of data going from host to device, the data is at *ppbData.
  84:../common/lpcusb/target/usbcontrol.c **** 	In case of data going from device to host, the handler can either
  85:../common/lpcusb/target/usbcontrol.c **** 	choose to write its data at *ppbData or update the data pointer.
  86:../common/lpcusb/target/usbcontrol.c **** 		
  87:../common/lpcusb/target/usbcontrol.c **** 	@param [in]		pSetup		The setup packet
  88:../common/lpcusb/target/usbcontrol.c **** 	@param [in,out]	*piLen		Pointer to data length
  89:../common/lpcusb/target/usbcontrol.c **** 	@param [in,out]	ppbData		Data buffer.
  90:../common/lpcusb/target/usbcontrol.c **** 
ARM GAS  /tmp/cccN1Mi0.s 			page 3


  91:../common/lpcusb/target/usbcontrol.c **** 	@return TRUE if the request was handles successfully
  92:../common/lpcusb/target/usbcontrol.c ****  */
  93:../common/lpcusb/target/usbcontrol.c **** static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
  94:../common/lpcusb/target/usbcontrol.c **** {
  95:../common/lpcusb/target/usbcontrol.c **** 	TFnHandleRequest *pfnHandler;
  96:../common/lpcusb/target/usbcontrol.c **** 	int iType;
  97:../common/lpcusb/target/usbcontrol.c **** 	
  98:../common/lpcusb/target/usbcontrol.c **** 	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
  99:../common/lpcusb/target/usbcontrol.c **** 	
 100:../common/lpcusb/target/usbcontrol.c **** 	if(iType == REQTYPE_TYPE_VENDOR) {
 101:../common/lpcusb/target/usbcontrol.c **** 		BOOL fFilterStatus = FALSE;
 102:../common/lpcusb/target/usbcontrol.c **** 		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
 103:../common/lpcusb/target/usbcontrol.c **** 			return fFilterStatus;
 104:../common/lpcusb/target/usbcontrol.c **** 		}
 105:../common/lpcusb/target/usbcontrol.c **** 	}
 106:../common/lpcusb/target/usbcontrol.c **** 	
 107:../common/lpcusb/target/usbcontrol.c **** 	pfnHandler = apfnReqHandlers[iType];
 108:../common/lpcusb/target/usbcontrol.c **** 	if (pfnHandler == NULL) {
 109:../common/lpcusb/target/usbcontrol.c **** 		DBG("No handler for reqtype %d\n", iType);
 110:../common/lpcusb/target/usbcontrol.c **** 		return FALSE;
 111:../common/lpcusb/target/usbcontrol.c **** 	}
 112:../common/lpcusb/target/usbcontrol.c **** 
 113:../common/lpcusb/target/usbcontrol.c **** 	return pfnHandler(pSetup, piLen, ppbData);
 114:../common/lpcusb/target/usbcontrol.c **** }
 115:../common/lpcusb/target/usbcontrol.c **** 
 116:../common/lpcusb/target/usbcontrol.c **** 
 117:../common/lpcusb/target/usbcontrol.c **** /**
 118:../common/lpcusb/target/usbcontrol.c **** 	Local function to stall the control endpoint
 119:../common/lpcusb/target/usbcontrol.c **** 	
 120:../common/lpcusb/target/usbcontrol.c **** 	@param [in]	bEPStat	Endpoint status
 121:../common/lpcusb/target/usbcontrol.c ****  */
 122:../common/lpcusb/target/usbcontrol.c **** static void StallControlPipe(U8 bEPStat)
 123:../common/lpcusb/target/usbcontrol.c **** {
 124:../common/lpcusb/target/usbcontrol.c **** 	U8	*pb;
 125:../common/lpcusb/target/usbcontrol.c **** 	int	i;
 126:../common/lpcusb/target/usbcontrol.c **** 
 127:../common/lpcusb/target/usbcontrol.c **** 	USBHwEPStall(0x80, TRUE);
 128:../common/lpcusb/target/usbcontrol.c **** 
 129:../common/lpcusb/target/usbcontrol.c **** // dump setup packet
 130:../common/lpcusb/target/usbcontrol.c **** 	DBG("STALL on [");
 131:../common/lpcusb/target/usbcontrol.c **** 	pb = (U8 *)&Setup;
 132:../common/lpcusb/target/usbcontrol.c **** 	for (i = 0; i < 8; i++) {
 133:../common/lpcusb/target/usbcontrol.c **** 		DBG(" %02x", *pb++);
 134:../common/lpcusb/target/usbcontrol.c **** 	}
 135:../common/lpcusb/target/usbcontrol.c **** 	DBG("] stat=%x\n", bEPStat);
 136:../common/lpcusb/target/usbcontrol.c **** }
 137:../common/lpcusb/target/usbcontrol.c **** 
 138:../common/lpcusb/target/usbcontrol.c **** 
 139:../common/lpcusb/target/usbcontrol.c **** /**
 140:../common/lpcusb/target/usbcontrol.c **** 	Sends next chunk of data (possibly 0 bytes) to host
 141:../common/lpcusb/target/usbcontrol.c ****  */
 142:../common/lpcusb/target/usbcontrol.c **** static void DataIn(void)
 143:../common/lpcusb/target/usbcontrol.c **** {
  26              		.loc 1 143 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccN1Mi0.s 			page 4


  30 0000 38B5     		push	{r3, r4, r5, lr}
  31              		.cfi_def_cfa_offset 16
  32              		.cfi_offset 3, -16
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
 144:../common/lpcusb/target/usbcontrol.c **** 	int iChunk;
 145:../common/lpcusb/target/usbcontrol.c **** 
 146:../common/lpcusb/target/usbcontrol.c **** 	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
  36              		.loc 1 146 0
  37 0002 084C     		ldr	r4, .L2
 147:../common/lpcusb/target/usbcontrol.c **** 	USBHwEPWrite(0x80, pbData, iChunk);
  38              		.loc 1 147 0
  39 0004 8020     		movs	r0, #128
 146:../common/lpcusb/target/usbcontrol.c **** 	USBHwEPWrite(0x80, pbData, iChunk);
  40              		.loc 1 146 0
  41 0006 2568     		ldr	r5, [r4]
  42              		.loc 1 147 0
  43 0008 6168     		ldr	r1, [r4, #4]
 146:../common/lpcusb/target/usbcontrol.c **** 	USBHwEPWrite(0x80, pbData, iChunk);
  44              		.loc 1 146 0
  45 000a 402D     		cmp	r5, #64
  46 000c A8BF     		it	ge
  47 000e 4025     		movge	r5, #64
  48              	.LVL0:
  49              		.loc 1 147 0
  50 0010 2A46     		mov	r2, r5
  51 0012 FFF7FEFF 		bl	USBHwEPWrite
  52              	.LVL1:
 148:../common/lpcusb/target/usbcontrol.c **** 	pbData += iChunk;
  53              		.loc 1 148 0
  54 0016 6368     		ldr	r3, [r4, #4]
  55 0018 2B44     		add	r3, r3, r5
  56 001a 6360     		str	r3, [r4, #4]
 149:../common/lpcusb/target/usbcontrol.c **** 	iResidue -= iChunk;
  57              		.loc 1 149 0
  58 001c 2368     		ldr	r3, [r4]
  59 001e 5D1B     		subs	r5, r3, r5
  60              	.LVL2:
  61 0020 2560     		str	r5, [r4]
  62 0022 38BD     		pop	{r3, r4, r5, pc}
  63              	.L3:
  64              		.align	2
  65              	.L2:
  66 0024 00000000 		.word	.LANCHOR0
  67              		.cfi_endproc
  68              	.LFE2:
  70              		.section	.text._HandleRequest.constprop.1,"ax",%progbits
  71              		.align	1
  72              		.thumb
  73              		.thumb_func
  75              	_HandleRequest.constprop.1:
  76              	.LFB6:
  93:../common/lpcusb/target/usbcontrol.c **** {
  77              		.loc 1 93 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cccN1Mi0.s 			page 5


  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
  82              		.cfi_def_cfa_offset 24
  83              		.cfi_offset 0, -24
  84              		.cfi_offset 1, -20
  85              		.cfi_offset 2, -16
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 5, -8
  88              		.cfi_offset 14, -4
  89              	.LVL3:
  98:../common/lpcusb/target/usbcontrol.c **** 	
  90              		.loc 1 98 0
  91 0002 114B     		ldr	r3, .L13
  92 0004 1C7A     		ldrb	r4, [r3, #8]	@ zero_extendqisi2
  93 0006 1D46     		mov	r5, r3
  94 0008 C4F34114 		ubfx	r4, r4, #5, #2
  95              	.LVL4:
 100:../common/lpcusb/target/usbcontrol.c **** 		BOOL fFilterStatus = FALSE;
  96              		.loc 1 100 0
  97 000c 022C     		cmp	r4, #2
  98 000e 0DD1     		bne	.L5
  99              	.LBB3:
 101:../common/lpcusb/target/usbcontrol.c **** 		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
 100              		.loc 1 101 0
 101 0010 0022     		movs	r2, #0
 102 0012 02A9     		add	r1, sp, #8
 103 0014 41F8042D 		str	r2, [r1, #-4]!
 102:../common/lpcusb/target/usbcontrol.c **** 			return fFilterStatus;
 104              		.loc 1 102 0
 105 0018 03F10800 		add	r0, r3, #8
 106 001c 03F11002 		add	r2, r3, #16
 107 0020 0433     		adds	r3, r3, #4
 108 0022 FFF7FEFF 		bl	USBFilterOsVendorMessage
 109              	.LVL5:
 110 0026 08B1     		cbz	r0, .L5
 103:../common/lpcusb/target/usbcontrol.c **** 		}
 111              		.loc 1 103 0
 112 0028 0198     		ldr	r0, [sp, #4]
 113 002a 0AE0     		b	.L7
 114              	.L5:
 115              	.LBE3:
 107:../common/lpcusb/target/usbcontrol.c **** 	if (pfnHandler == NULL) {
 116              		.loc 1 107 0
 117 002c 05EB8404 		add	r4, r5, r4, lsl #2
 118              	.LVL6:
 119 0030 6369     		ldr	r3, [r4, #20]
 120              	.LVL7:
 108:../common/lpcusb/target/usbcontrol.c **** 		DBG("No handler for reqtype %d\n", iType);
 121              		.loc 1 108 0
 122 0032 2BB1     		cbz	r3, .L8
 113:../common/lpcusb/target/usbcontrol.c **** }
 123              		.loc 1 113 0
 124 0034 0548     		ldr	r0, .L13+4
 125 0036 00F10801 		add	r1, r0, #8
 126 003a 021F     		subs	r2, r0, #4
 127 003c 9847     		blx	r3
 128              	.LVL8:
ARM GAS  /tmp/cccN1Mi0.s 			page 6


 129 003e 00E0     		b	.L7
 130              	.LVL9:
 131              	.L8:
 110:../common/lpcusb/target/usbcontrol.c **** 	}
 132              		.loc 1 110 0
 133 0040 1846     		mov	r0, r3
 134              	.LVL10:
 135              	.L7:
 114:../common/lpcusb/target/usbcontrol.c **** 
 136              		.loc 1 114 0
 137 0042 03B0     		add	sp, sp, #12
 138              		@ sp needed
 139 0044 30BD     		pop	{r4, r5, pc}
 140              	.L14:
 141 0046 00BF     		.align	2
 142              	.L13:
 143 0048 00000000 		.word	.LANCHOR0
 144 004c 08000000 		.word	.LANCHOR0+8
 145              		.cfi_endproc
 146              	.LFE6:
 148              		.section	.text.USBHandleControlTransfer,"ax",%progbits
 149              		.align	1
 150              		.global	USBHandleControlTransfer
 151              		.thumb
 152              		.thumb_func
 154              	USBHandleControlTransfer:
 155              	.LFB3:
 150:../common/lpcusb/target/usbcontrol.c **** }
 151:../common/lpcusb/target/usbcontrol.c **** 
 152:../common/lpcusb/target/usbcontrol.c **** 
 153:../common/lpcusb/target/usbcontrol.c **** /**
 154:../common/lpcusb/target/usbcontrol.c ****  *	Handles IN/OUT transfers on EP0
 155:../common/lpcusb/target/usbcontrol.c ****  *
 156:../common/lpcusb/target/usbcontrol.c ****  *	@param [in]	bEP		Endpoint address
 157:../common/lpcusb/target/usbcontrol.c ****  *	@param [in]	bEPStat	Endpoint status
 158:../common/lpcusb/target/usbcontrol.c ****  */
 159:../common/lpcusb/target/usbcontrol.c **** void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
 160:../common/lpcusb/target/usbcontrol.c **** {
 156              		.loc 1 160 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              	.LVL11:
 161 0000 10B5     		push	{r4, lr}
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 4, -8
 164              		.cfi_offset 14, -4
 161:../common/lpcusb/target/usbcontrol.c **** 	int iChunk, iType;
 162:../common/lpcusb/target/usbcontrol.c **** 
 163:../common/lpcusb/target/usbcontrol.c **** 	if (bEP == 0x00) {
 165              		.loc 1 163 0
 166 0002 0028     		cmp	r0, #0
 167 0004 4AD1     		bne	.L16
 164:../common/lpcusb/target/usbcontrol.c **** 		// OUT transfer
 165:../common/lpcusb/target/usbcontrol.c **** 		if (bEPStat & EP_STATUS_SETUP) {
 168              		.loc 1 165 0
 169 0006 01F00403 		and	r3, r1, #4
ARM GAS  /tmp/cccN1Mi0.s 			page 7


 170 000a 03F0FF01 		and	r1, r3, #255
 171              	.LVL12:
 172 000e 254C     		ldr	r4, .L34
 173 0010 0BB3     		cbz	r3, .L17
 166:../common/lpcusb/target/usbcontrol.c **** 			// setup packet, reset request message state machine
 167:../common/lpcusb/target/usbcontrol.c **** 			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
 174              		.loc 1 167 0
 175 0012 0822     		movs	r2, #8
 176 0014 04F10801 		add	r1, r4, #8
 177 0018 FFF7FEFF 		bl	USBHwEPRead
 178              	.LVL13:
 168:../common/lpcusb/target/usbcontrol.c **** 			DBG("S%x", Setup.bRequest);
 169:../common/lpcusb/target/usbcontrol.c **** 
 170:../common/lpcusb/target/usbcontrol.c **** 			// defaults for data pointer and residue
 171:../common/lpcusb/target/usbcontrol.c **** 			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
 179              		.loc 1 171 0
 180 001c 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 181              	.LVL14:
 182 001e C2F34113 		ubfx	r3, r2, #5, #2
 172:../common/lpcusb/target/usbcontrol.c **** 			pbData = apbDataStore[iType];
 183              		.loc 1 172 0
 184 0022 04EB8303 		add	r3, r4, r3, lsl #2
 185 0026 5B6A     		ldr	r3, [r3, #36]
 186 0028 6360     		str	r3, [r4, #4]
 173:../common/lpcusb/target/usbcontrol.c **** 			iResidue = Setup.wLength;
 187              		.loc 1 173 0
 188 002a E389     		ldrh	r3, [r4, #14]
 189 002c 2360     		str	r3, [r4]
 174:../common/lpcusb/target/usbcontrol.c **** 			iLen = Setup.wLength;
 190              		.loc 1 174 0
 191 002e 2361     		str	r3, [r4, #16]
 175:../common/lpcusb/target/usbcontrol.c **** 
 176:../common/lpcusb/target/usbcontrol.c **** 			if ((Setup.wLength == 0) ||
 192              		.loc 1 176 0
 193 0030 0BB1     		cbz	r3, .L18
 194              		.loc 1 176 0 is_stmt 0 discriminator 1
 195 0032 D209     		lsrs	r2, r2, #7
 196              	.LVL15:
 197 0034 34D0     		beq	.L15
 198              	.L18:
 177:../common/lpcusb/target/usbcontrol.c **** 				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
 178:../common/lpcusb/target/usbcontrol.c **** 				// ask installed handler to process request
 179:../common/lpcusb/target/usbcontrol.c **** 				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
 199              		.loc 1 179 0 is_stmt 1
 200 0036 FFF7FEFF 		bl	_HandleRequest.constprop.1
 201              	.LVL16:
 202 003a 28B9     		cbnz	r0, .L20
 203              	.L22:
 204              	.LVL17:
 205              	.LBB10:
 206              	.LBB11:
 127:../common/lpcusb/target/usbcontrol.c **** 
 207              		.loc 1 127 0
 208 003c 8020     		movs	r0, #128
 209 003e 0121     		movs	r1, #1
 210              	.LBE11:
 211              	.LBE10:
ARM GAS  /tmp/cccN1Mi0.s 			page 8


 180:../common/lpcusb/target/usbcontrol.c **** 					DBG("_HandleRequest1 failed\n");
 181:../common/lpcusb/target/usbcontrol.c **** 					StallControlPipe(bEPStat);
 182:../common/lpcusb/target/usbcontrol.c **** 					return;
 183:../common/lpcusb/target/usbcontrol.c **** 				}
 184:../common/lpcusb/target/usbcontrol.c **** 				// send smallest of requested and offered length
 185:../common/lpcusb/target/usbcontrol.c **** 				iResidue = MIN(iLen, Setup.wLength);
 186:../common/lpcusb/target/usbcontrol.c **** 				// send first part (possibly a zero-length status message)
 187:../common/lpcusb/target/usbcontrol.c **** 				DataIn();
 188:../common/lpcusb/target/usbcontrol.c **** 			}
 189:../common/lpcusb/target/usbcontrol.c **** 		}
 190:../common/lpcusb/target/usbcontrol.c **** 		else {		
 191:../common/lpcusb/target/usbcontrol.c **** 			if (iResidue > 0) {
 192:../common/lpcusb/target/usbcontrol.c **** 				// store data
 193:../common/lpcusb/target/usbcontrol.c **** 				iChunk = USBHwEPRead(0x00, pbData, iResidue);
 194:../common/lpcusb/target/usbcontrol.c **** 				if (iChunk < 0) {
 195:../common/lpcusb/target/usbcontrol.c **** 					StallControlPipe(bEPStat);
 196:../common/lpcusb/target/usbcontrol.c **** 					return;
 197:../common/lpcusb/target/usbcontrol.c **** 				}
 198:../common/lpcusb/target/usbcontrol.c **** 				pbData += iChunk;
 199:../common/lpcusb/target/usbcontrol.c **** 				iResidue -= iChunk;
 200:../common/lpcusb/target/usbcontrol.c **** 				if (iResidue == 0) {
 201:../common/lpcusb/target/usbcontrol.c **** 					// received all, send data to handler
 202:../common/lpcusb/target/usbcontrol.c **** 					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
 203:../common/lpcusb/target/usbcontrol.c **** 					pbData = apbDataStore[iType];
 204:../common/lpcusb/target/usbcontrol.c **** 					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
 205:../common/lpcusb/target/usbcontrol.c **** 						DBG("_HandleRequest2 failed\n");
 206:../common/lpcusb/target/usbcontrol.c **** 						StallControlPipe(bEPStat);
 207:../common/lpcusb/target/usbcontrol.c **** 						return;
 208:../common/lpcusb/target/usbcontrol.c **** 					}
 209:../common/lpcusb/target/usbcontrol.c **** 					// send status to host
 210:../common/lpcusb/target/usbcontrol.c **** 					DataIn();
 211:../common/lpcusb/target/usbcontrol.c **** 				}
 212:../common/lpcusb/target/usbcontrol.c **** 			}
 213:../common/lpcusb/target/usbcontrol.c **** 			else {
 214:../common/lpcusb/target/usbcontrol.c **** 				// absorb zero-length status message
 215:../common/lpcusb/target/usbcontrol.c **** 				iChunk = USBHwEPRead(0x00, NULL, 0);
 216:../common/lpcusb/target/usbcontrol.c **** 				DBG(iChunk > 0 ? "?" : "");
 217:../common/lpcusb/target/usbcontrol.c **** 			}
 218:../common/lpcusb/target/usbcontrol.c **** 		}
 219:../common/lpcusb/target/usbcontrol.c **** 	}
 220:../common/lpcusb/target/usbcontrol.c **** 	else if (bEP == 0x80) {
 221:../common/lpcusb/target/usbcontrol.c **** 		// IN transfer
 222:../common/lpcusb/target/usbcontrol.c **** 		// send more data if available (possibly a 0-length packet)
 223:../common/lpcusb/target/usbcontrol.c **** 		DataIn();
 224:../common/lpcusb/target/usbcontrol.c **** 	}
 225:../common/lpcusb/target/usbcontrol.c **** 	else {
 226:../common/lpcusb/target/usbcontrol.c **** 		ASSERT(FALSE);
 227:../common/lpcusb/target/usbcontrol.c **** 	}
 228:../common/lpcusb/target/usbcontrol.c **** }
 212              		.loc 1 228 0
 213 0040 BDE81040 		pop	{r4, lr}
 214              	.LBB13:
 215              	.LBB12:
 127:../common/lpcusb/target/usbcontrol.c **** 
 216              		.loc 1 127 0
 217 0044 FFF7FEBF 		b	USBHwEPStall
 218              	.LVL18:
ARM GAS  /tmp/cccN1Mi0.s 			page 9


 219              	.L20:
 220              	.LBE12:
 221              	.LBE13:
 185:../common/lpcusb/target/usbcontrol.c **** 				// send first part (possibly a zero-length status message)
 222              		.loc 1 185 0
 223 0048 E289     		ldrh	r2, [r4, #14]
 224 004a 2369     		ldr	r3, [r4, #16]
 225 004c 9A42     		cmp	r2, r3
 226 004e D4BF     		ite	le
 227 0050 2260     		strle	r2, [r4]
 228 0052 2360     		strgt	r3, [r4]
 229 0054 19E0     		b	.L24
 230              	.LVL19:
 231              	.L17:
 191:../common/lpcusb/target/usbcontrol.c **** 				// store data
 232              		.loc 1 191 0
 233 0056 2268     		ldr	r2, [r4]
 234 0058 002A     		cmp	r2, #0
 235 005a 1ADD     		ble	.L21
 193:../common/lpcusb/target/usbcontrol.c **** 				if (iChunk < 0) {
 236              		.loc 1 193 0
 237 005c 6168     		ldr	r1, [r4, #4]
 238 005e FFF7FEFF 		bl	USBHwEPRead
 239              	.LVL20:
 194:../common/lpcusb/target/usbcontrol.c **** 					StallControlPipe(bEPStat);
 240              		.loc 1 194 0
 241 0062 0028     		cmp	r0, #0
 242 0064 EADB     		blt	.L22
 198:../common/lpcusb/target/usbcontrol.c **** 				iResidue -= iChunk;
 243              		.loc 1 198 0
 244 0066 6368     		ldr	r3, [r4, #4]
 245 0068 0344     		add	r3, r3, r0
 246 006a 6360     		str	r3, [r4, #4]
 199:../common/lpcusb/target/usbcontrol.c **** 				if (iResidue == 0) {
 247              		.loc 1 199 0
 248 006c 2368     		ldr	r3, [r4]
 249 006e 181A     		subs	r0, r3, r0
 250              	.LVL21:
 251 0070 2060     		str	r0, [r4]
 200:../common/lpcusb/target/usbcontrol.c **** 					// received all, send data to handler
 252              		.loc 1 200 0
 253 0072 A8B9     		cbnz	r0, .L15
 254              	.LVL22:
 202:../common/lpcusb/target/usbcontrol.c **** 					pbData = apbDataStore[iType];
 255              		.loc 1 202 0
 256 0074 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 257 0076 C3F34113 		ubfx	r3, r3, #5, #2
 203:../common/lpcusb/target/usbcontrol.c **** 					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
 258              		.loc 1 203 0
 259 007a 04EB8303 		add	r3, r4, r3, lsl #2
 260 007e 5B6A     		ldr	r3, [r3, #36]
 261 0080 6360     		str	r3, [r4, #4]
 204:../common/lpcusb/target/usbcontrol.c **** 						DBG("_HandleRequest2 failed\n");
 262              		.loc 1 204 0
 263 0082 FFF7FEFF 		bl	_HandleRequest.constprop.1
 264              	.LVL23:
 265 0086 0028     		cmp	r0, #0
ARM GAS  /tmp/cccN1Mi0.s 			page 10


 266 0088 D8D0     		beq	.L22
 267              	.L24:
 268              		.loc 1 228 0
 269 008a BDE81040 		pop	{r4, lr}
 210:../common/lpcusb/target/usbcontrol.c **** 				}
 270              		.loc 1 210 0
 271 008e FFF7FEBF 		b	DataIn
 272              	.LVL24:
 273              	.L21:
 215:../common/lpcusb/target/usbcontrol.c **** 				DBG(iChunk > 0 ? "?" : "");
 274              		.loc 1 215 0
 275 0092 0A46     		mov	r2, r1
 276              		.loc 1 228 0
 277 0094 BDE81040 		pop	{r4, lr}
 215:../common/lpcusb/target/usbcontrol.c **** 				DBG(iChunk > 0 ? "?" : "");
 278              		.loc 1 215 0
 279 0098 FFF7FEBF 		b	USBHwEPRead
 280              	.LVL25:
 281              	.L16:
 220:../common/lpcusb/target/usbcontrol.c **** 		// IN transfer
 282              		.loc 1 220 0
 283 009c 8028     		cmp	r0, #128
 284 009e F4D0     		beq	.L24
 285              	.LVL26:
 286              	.L15:
 287 00a0 10BD     		pop	{r4, pc}
 288              	.L35:
 289 00a2 00BF     		.align	2
 290              	.L34:
 291 00a4 00000000 		.word	.LANCHOR0
 292              		.cfi_endproc
 293              	.LFE3:
 295              		.section	.text.USBRegisterRequestHandler,"ax",%progbits
 296              		.align	1
 297              		.global	USBRegisterRequestHandler
 298              		.thumb
 299              		.thumb_func
 301              	USBRegisterRequestHandler:
 302              	.LFB4:
 229:../common/lpcusb/target/usbcontrol.c **** 
 230:../common/lpcusb/target/usbcontrol.c **** 
 231:../common/lpcusb/target/usbcontrol.c **** /**
 232:../common/lpcusb/target/usbcontrol.c **** 	Registers a callback for handling requests
 233:../common/lpcusb/target/usbcontrol.c **** 		
 234:../common/lpcusb/target/usbcontrol.c **** 	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
 235:../common/lpcusb/target/usbcontrol.c **** 	@param [in]	*pfnHandler		Callback function pointer
 236:../common/lpcusb/target/usbcontrol.c **** 	@param [in]	*pbDataStore	Data storage area for this type of request
 237:../common/lpcusb/target/usbcontrol.c ****  */
 238:../common/lpcusb/target/usbcontrol.c **** void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
 239:../common/lpcusb/target/usbcontrol.c **** {
 303              		.loc 1 239 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL27:
 240:../common/lpcusb/target/usbcontrol.c **** 	ASSERT(iType >= 0);
ARM GAS  /tmp/cccN1Mi0.s 			page 11


 241:../common/lpcusb/target/usbcontrol.c **** 	ASSERT(iType < 4);
 242:../common/lpcusb/target/usbcontrol.c **** 	apfnReqHandlers[iType] = pfnHandler;
 309              		.loc 1 242 0
 310 0000 024B     		ldr	r3, .L37
 311 0002 03EB8000 		add	r0, r3, r0, lsl #2
 312              	.LVL28:
 313 0006 4161     		str	r1, [r0, #20]
 243:../common/lpcusb/target/usbcontrol.c **** 	apbDataStore[iType] = pbDataStore;
 314              		.loc 1 243 0
 315 0008 4262     		str	r2, [r0, #36]
 316 000a 7047     		bx	lr
 317              	.L38:
 318              		.align	2
 319              	.L37:
 320 000c 00000000 		.word	.LANCHOR0
 321              		.cfi_endproc
 322              	.LFE4:
 324              		.bss
 325              		.align	2
 326              		.set	.LANCHOR0,. + 0
 329              	iResidue:
 330 0000 00000000 		.space	4
 333              	pbData:
 334 0004 00000000 		.space	4
 337              	Setup:
 338 0008 00000000 		.space	8
 338      00000000 
 341              	iLen:
 342 0010 00000000 		.space	4
 345              	apfnReqHandlers:
 346 0014 00000000 		.space	16
 346      00000000 
 346      00000000 
 346      00000000 
 349              	apbDataStore:
 350 0024 00000000 		.space	16
 350      00000000 
 350      00000000 
 350      00000000 
 351              		.text
 352              	.Letext0:
 353              		.file 2 "../common/lpcusb/target/type.h"
 354              		.file 3 "../common/lpcusb/target/usbstruct.h"
 355              		.file 4 "../common/lpcusb/target/usbapi.h"
ARM GAS  /tmp/cccN1Mi0.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbcontrol.c
     /tmp/cccN1Mi0.s:19     .text.DataIn:0000000000000000 $t
     /tmp/cccN1Mi0.s:23     .text.DataIn:0000000000000000 DataIn
     /tmp/cccN1Mi0.s:66     .text.DataIn:0000000000000024 $d
     /tmp/cccN1Mi0.s:71     .text._HandleRequest.constprop.1:0000000000000000 $t
     /tmp/cccN1Mi0.s:75     .text._HandleRequest.constprop.1:0000000000000000 _HandleRequest.constprop.1
     /tmp/cccN1Mi0.s:143    .text._HandleRequest.constprop.1:0000000000000048 $d
     /tmp/cccN1Mi0.s:149    .text.USBHandleControlTransfer:0000000000000000 $t
     /tmp/cccN1Mi0.s:154    .text.USBHandleControlTransfer:0000000000000000 USBHandleControlTransfer
     /tmp/cccN1Mi0.s:291    .text.USBHandleControlTransfer:00000000000000a4 $d
     /tmp/cccN1Mi0.s:296    .text.USBRegisterRequestHandler:0000000000000000 $t
     /tmp/cccN1Mi0.s:301    .text.USBRegisterRequestHandler:0000000000000000 USBRegisterRequestHandler
     /tmp/cccN1Mi0.s:320    .text.USBRegisterRequestHandler:000000000000000c $d
     /tmp/cccN1Mi0.s:325    .bss:0000000000000000 $d
     /tmp/cccN1Mi0.s:329    .bss:0000000000000000 iResidue
     /tmp/cccN1Mi0.s:333    .bss:0000000000000004 pbData
     /tmp/cccN1Mi0.s:337    .bss:0000000000000008 Setup
     /tmp/cccN1Mi0.s:341    .bss:0000000000000010 iLen
     /tmp/cccN1Mi0.s:345    .bss:0000000000000014 apfnReqHandlers
     /tmp/cccN1Mi0.s:349    .bss:0000000000000024 apbDataStore
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
USBHwEPWrite
USBFilterOsVendorMessage
USBHwEPRead
USBHwEPStall

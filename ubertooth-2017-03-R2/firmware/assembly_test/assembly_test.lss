
assembly_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fc8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000004dc  10000020  00001fc8  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000217c  100004fc  000024a4  000104fc  2**2
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000104fc  2**0
                  CONTENTS, READONLY
  5 .comment      0000001f  00000000  00000000  00010525  2**0
                  CONTENTS, READONLY
  6 .debug_info   000066ab  00000000  00000000  00010544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cd7  00000000  00000000  00016bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000026a5  00000000  00000000  000188c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004f8  00000000  00000000  0001af70  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004c8  00000000  00000000  0001b468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001b69  00000000  00000000  0001b930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001fac  00000000  00000000  0001d499  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b74  00000000  00000000  0001f448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_NVIC_Handler_Functions>:
       0:	e0 3f 00 10 e5 11 00 00 39 12 00 00 39 12 00 00     .?......9...9...
      10:	39 12 00 00 39 12 00 00 39 12 00 00 00 00 00 00     9...9...9.......
      20:	00 00 00 00 00 00 00 00 00 00 00 00 39 12 00 00     ............9...
      30:	39 12 00 00 00 00 00 00 39 12 00 00 39 12 00 00     9.......9...9...
      40:	39 12 00 00 c9 07 00 00 39 12 00 00 39 12 00 00     9.......9...9...
      50:	39 12 00 00 39 12 00 00 39 12 00 00 39 12 00 00     9...9...9...9...
      60:	39 12 00 00 39 12 00 00 39 12 00 00 39 12 00 00     9...9...9...9...
      70:	39 12 00 00 39 12 00 00 39 12 00 00 39 12 00 00     9...9...9...9...
      80:	39 12 00 00 39 12 00 00 39 12 00 00 39 12 00 00     9...9...9...9...
      90:	39 12 00 00 39 12 00 00 39 12 00 00 39 12 00 00     9...9...9...9...
      a0:	e1 11 00 00 39 12 00 00 ed 07 00 00 39 12 00 00     ....9.......9...
      b0:	39 12 00 00 39 12 00 00 39 12 00 00 39 12 00 00     9...9...9...9...
      c0:	39 12 00 00 39 12 00 00 39 12 00 00                 9...9...9...

000000cc <deregister_tm_clones>:
      cc:	b508      	push	{r3, lr}
      ce:	f240 40fc 	movw	r0, #1276	; 0x4fc
      d2:	4b07      	ldr	r3, [pc, #28]	; (f0 <deregister_tm_clones+0x24>)
      d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
      d8:	1a1b      	subs	r3, r3, r0
      da:	2b06      	cmp	r3, #6
      dc:	d800      	bhi.n	e0 <deregister_tm_clones+0x14>
      de:	bd08      	pop	{r3, pc}
      e0:	f240 0300 	movw	r3, #0
      e4:	f2c0 0300 	movt	r3, #0
      e8:	2b00      	cmp	r3, #0
      ea:	d0f8      	beq.n	de <deregister_tm_clones+0x12>
      ec:	4798      	blx	r3
      ee:	e7f6      	b.n	de <deregister_tm_clones+0x12>
      f0:	100004ff 	.word	0x100004ff

000000f4 <register_tm_clones>:
      f4:	b508      	push	{r3, lr}
      f6:	f240 40fc 	movw	r0, #1276	; 0x4fc
      fa:	f240 43fc 	movw	r3, #1276	; 0x4fc
      fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
     102:	f2c1 0000 	movt	r0, #4096	; 0x1000
     106:	1a1b      	subs	r3, r3, r0
     108:	109b      	asrs	r3, r3, #2
     10a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     10e:	1059      	asrs	r1, r3, #1
     110:	d100      	bne.n	114 <register_tm_clones+0x20>
     112:	bd08      	pop	{r3, pc}
     114:	f240 0200 	movw	r2, #0
     118:	f2c0 0200 	movt	r2, #0
     11c:	2a00      	cmp	r2, #0
     11e:	d0f8      	beq.n	112 <register_tm_clones+0x1e>
     120:	4790      	blx	r2
     122:	e7f6      	b.n	112 <register_tm_clones+0x1e>

00000124 <__do_global_dtors_aux>:
     124:	b510      	push	{r4, lr}
     126:	f240 44fc 	movw	r4, #1276	; 0x4fc
     12a:	f2c1 0400 	movt	r4, #4096	; 0x1000
     12e:	7823      	ldrb	r3, [r4, #0]
     130:	b973      	cbnz	r3, 150 <__do_global_dtors_aux+0x2c>
     132:	f7ff ffcb 	bl	cc <deregister_tm_clones>
     136:	f240 0300 	movw	r3, #0
     13a:	f2c0 0300 	movt	r3, #0
     13e:	b12b      	cbz	r3, 14c <__do_global_dtors_aux+0x28>
     140:	f641 70a4 	movw	r0, #8100	; 0x1fa4
     144:	f2c0 0000 	movt	r0, #0
     148:	f3af 8000 	nop.w
     14c:	2301      	movs	r3, #1
     14e:	7023      	strb	r3, [r4, #0]
     150:	bd10      	pop	{r4, pc}
     152:	bf00      	nop

00000154 <frame_dummy>:
     154:	b508      	push	{r3, lr}
     156:	f240 0300 	movw	r3, #0
     15a:	f2c0 0300 	movt	r3, #0
     15e:	b14b      	cbz	r3, 174 <frame_dummy+0x20>
     160:	f641 70a4 	movw	r0, #8100	; 0x1fa4
     164:	f240 5100 	movw	r1, #1280	; 0x500
     168:	f2c0 0000 	movt	r0, #0
     16c:	f2c1 0100 	movt	r1, #4096	; 0x1000
     170:	f3af 8000 	nop.w
     174:	f240 40fc 	movw	r0, #1276	; 0x4fc
     178:	f2c1 0000 	movt	r0, #4096	; 0x1000
     17c:	6803      	ldr	r3, [r0, #0]
     17e:	b12b      	cbz	r3, 18c <frame_dummy+0x38>
     180:	f240 0300 	movw	r3, #0
     184:	f2c0 0300 	movt	r3, #0
     188:	b103      	cbz	r3, 18c <frame_dummy+0x38>
     18a:	4798      	blx	r3
     18c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     190:	e7b0      	b.n	f4 <register_tm_clones>
     192:	bf00      	nop

00000194 <atexit>:
     194:	4601      	mov	r1, r0
     196:	2000      	movs	r0, #0
     198:	4602      	mov	r2, r0
     19a:	4603      	mov	r3, r0
     19c:	f000 b848 	b.w	230 <__register_exitproc>

000001a0 <__libc_fini_array>:
     1a0:	b538      	push	{r3, r4, r5, lr}
     1a2:	f641 74c8 	movw	r4, #8136	; 0x1fc8
     1a6:	f641 75c4 	movw	r5, #8132	; 0x1fc4
     1aa:	f2c0 0500 	movt	r5, #0
     1ae:	f2c0 0400 	movt	r4, #0
     1b2:	1b64      	subs	r4, r4, r5
     1b4:	10a4      	asrs	r4, r4, #2
     1b6:	bf18      	it	ne
     1b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
     1bc:	d005      	beq.n	1ca <__libc_fini_array+0x2a>
     1be:	3c01      	subs	r4, #1
     1c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
     1c4:	4798      	blx	r3
     1c6:	2c00      	cmp	r4, #0
     1c8:	d1f9      	bne.n	1be <__libc_fini_array+0x1e>
     1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     1ce:	f001 bef3 	b.w	1fb8 <_fini>
     1d2:	bf00      	nop

000001d4 <__libc_init_array>:
     1d4:	b570      	push	{r4, r5, r6, lr}
     1d6:	f641 76b0 	movw	r6, #8112	; 0x1fb0
     1da:	f641 75b0 	movw	r5, #8112	; 0x1fb0
     1de:	f2c0 0500 	movt	r5, #0
     1e2:	f2c0 0600 	movt	r6, #0
     1e6:	1b76      	subs	r6, r6, r5
     1e8:	10b6      	asrs	r6, r6, #2
     1ea:	bf1c      	itt	ne
     1ec:	3d04      	subne	r5, #4
     1ee:	2400      	movne	r4, #0
     1f0:	d005      	beq.n	1fe <__libc_init_array+0x2a>
     1f2:	3401      	adds	r4, #1
     1f4:	f855 3f04 	ldr.w	r3, [r5, #4]!
     1f8:	4798      	blx	r3
     1fa:	42a6      	cmp	r6, r4
     1fc:	d1f9      	bne.n	1f2 <__libc_init_array+0x1e>
     1fe:	f641 76b8 	movw	r6, #8120	; 0x1fb8
     202:	f641 75b0 	movw	r5, #8112	; 0x1fb0
     206:	f2c0 0500 	movt	r5, #0
     20a:	f2c0 0600 	movt	r6, #0
     20e:	1b76      	subs	r6, r6, r5
     210:	f001 fec8 	bl	1fa4 <_init>
     214:	10b6      	asrs	r6, r6, #2
     216:	bf1c      	itt	ne
     218:	3d04      	subne	r5, #4
     21a:	2400      	movne	r4, #0
     21c:	d006      	beq.n	22c <__libc_init_array+0x58>
     21e:	3401      	adds	r4, #1
     220:	f855 3f04 	ldr.w	r3, [r5, #4]!
     224:	4798      	blx	r3
     226:	42a6      	cmp	r6, r4
     228:	d1f9      	bne.n	21e <__libc_init_array+0x4a>
     22a:	bd70      	pop	{r4, r5, r6, pc}
     22c:	bd70      	pop	{r4, r5, r6, pc}
     22e:	bf00      	nop

00000230 <__register_exitproc>:
     230:	b5f0      	push	{r4, r5, r6, r7, lr}
     232:	f641 6474 	movw	r4, #7796	; 0x1e74
     236:	f2c0 0400 	movt	r4, #0
     23a:	6826      	ldr	r6, [r4, #0]
     23c:	b085      	sub	sp, #20
     23e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
     242:	4607      	mov	r7, r0
     244:	2c00      	cmp	r4, #0
     246:	d043      	beq.n	2d0 <__register_exitproc+0xa0>
     248:	6865      	ldr	r5, [r4, #4]
     24a:	2d1f      	cmp	r5, #31
     24c:	dd21      	ble.n	292 <__register_exitproc+0x62>
     24e:	f240 0400 	movw	r4, #0
     252:	f2c0 0400 	movt	r4, #0
     256:	b91c      	cbnz	r4, 260 <__register_exitproc+0x30>
     258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     25c:	b005      	add	sp, #20
     25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     260:	f44f 70c8 	mov.w	r0, #400	; 0x190
     264:	9103      	str	r1, [sp, #12]
     266:	9202      	str	r2, [sp, #8]
     268:	9301      	str	r3, [sp, #4]
     26a:	f3af 8000 	nop.w
     26e:	9903      	ldr	r1, [sp, #12]
     270:	4604      	mov	r4, r0
     272:	9a02      	ldr	r2, [sp, #8]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	2800      	cmp	r0, #0
     278:	d0ee      	beq.n	258 <__register_exitproc+0x28>
     27a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
     27e:	2000      	movs	r0, #0
     280:	6025      	str	r5, [r4, #0]
     282:	6060      	str	r0, [r4, #4]
     284:	4605      	mov	r5, r0
     286:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
     28a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
     28e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
     292:	b93f      	cbnz	r7, 2a4 <__register_exitproc+0x74>
     294:	1c6b      	adds	r3, r5, #1
     296:	2000      	movs	r0, #0
     298:	3502      	adds	r5, #2
     29a:	6063      	str	r3, [r4, #4]
     29c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
     2a0:	b005      	add	sp, #20
     2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a4:	2601      	movs	r6, #1
     2a6:	40ae      	lsls	r6, r5
     2a8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
     2ac:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
     2b0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
     2b4:	2f02      	cmp	r7, #2
     2b6:	ea42 0206 	orr.w	r2, r2, r6
     2ba:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
     2be:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
     2c2:	bf02      	ittt	eq
     2c4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
     2c8:	431e      	orreq	r6, r3
     2ca:	f8c4 618c 	streq.w	r6, [r4, #396]	; 0x18c
     2ce:	e7e1      	b.n	294 <__register_exitproc+0x64>
     2d0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
     2d4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
     2d8:	e7b6      	b.n	248 <__register_exitproc+0x18>
     2da:	bf00      	nop

000002dc <register_fini>:
     2dc:	f240 0300 	movw	r3, #0
     2e0:	f2c0 0300 	movt	r3, #0
     2e4:	b12b      	cbz	r3, 2f2 <register_fini+0x16>
     2e6:	f240 10a1 	movw	r0, #417	; 0x1a1
     2ea:	f2c0 0000 	movt	r0, #0
     2ee:	f7ff bf51 	b.w	194 <atexit>
     2f2:	4770      	bx	lr

000002f4 <dma_init>:
}

static void dma_init()
{
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
     2f4:	4b21      	ldr	r3, [pc, #132]	; (37c <dma_init+0x88>)
	DMACC7Config = 0;
	DMACIntTCClear = 0xFF;
	DMACIntErrClr = 0xFF;

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     2f6:	4822      	ldr	r0, [pc, #136]	; (380 <dma_init+0x8c>)
}

static void dma_init()
{
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
     2f8:	681a      	ldr	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
     2fa:	4922      	ldr	r1, [pc, #136]	; (384 <dma_init+0x90>)
}

static void dma_init()
{
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
     2fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
     300:	601a      	str	r2, [r3, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
     302:	4a21      	ldr	r2, [pc, #132]	; (388 <dma_init+0x94>)
     304:	2300      	movs	r3, #0
     306:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
     308:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
     30a:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
     30c:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
     30e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
     312:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
     316:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
     31a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
     31e:	23ff      	movs	r3, #255	; 0xff
     320:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
     324:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
     326:	6093      	str	r3, [r2, #8]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     328:	4b18      	ldr	r3, [pc, #96]	; (38c <dma_init+0x98>)
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
     32a:	4a19      	ldr	r2, [pc, #100]	; (390 <dma_init+0x9c>)
	DMACC7Config = 0;
	DMACIntTCClear = 0xFF;
	DMACIntErrClr = 0xFF;

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     32c:	6018      	str	r0, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
     32e:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
     330:	4a18      	ldr	r2, [pc, #96]	; (394 <dma_init+0xa0>)
	rx_dma_lli1.control = (DMA_SIZE) |
     332:	60d9      	str	r1, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
     334:	6010      	str	r0, [r2, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
     336:	4818      	ldr	r0, [pc, #96]	; (398 <dma_init+0xa4>)
	DMACIntErrClr = 0xFF;

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
     338:	609a      	str	r2, [r3, #8]
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
     33a:	60d1      	str	r1, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
     33c:	6050      	str	r0, [r2, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
     33e:	6093      	str	r3, [r2, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ISER0 &= ~ISER0_ISE_DMA;
     340:	4a16      	ldr	r2, [pc, #88]	; (39c <dma_init+0xa8>)
     342:	6811      	ldr	r1, [r2, #0]
     344:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
     348:	6011      	str	r1, [r2, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
     34a:	4a15      	ldr	r2, [pc, #84]	; (3a0 <dma_init+0xac>)
     34c:	2101      	movs	r1, #1
     34e:	6011      	str	r1, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
     350:	6811      	ldr	r1, [r2, #0]
     352:	07c9      	lsls	r1, r1, #31
     354:	d5fc      	bpl.n	350 <dma_init+0x5c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
     356:	681a      	ldr	r2, [r3, #0]
     358:	4912      	ldr	r1, [pc, #72]	; (3a4 <dma_init+0xb0>)
     35a:	600a      	str	r2, [r1, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
     35c:	685a      	ldr	r2, [r3, #4]
     35e:	604a      	str	r2, [r1, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
     360:	689a      	ldr	r2, [r3, #8]
     362:	608a      	str	r2, [r1, #8]
	DMACC0Control = rx_dma_lli1.control;
     364:	68da      	ldr	r2, [r3, #12]
     366:	4b10      	ldr	r3, [pc, #64]	; (3a8 <dma_init+0xb4>)
     368:	601a      	str	r2, [r3, #0]
	DMACC0Config =
     36a:	f24d 0206 	movw	r2, #53254	; 0xd006
     36e:	605a      	str	r2, [r3, #4]
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	/* reset interrupt counters */
	rx_tc = 0;
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <dma_init+0xb8>)
     372:	2300      	movs	r3, #0
     374:	6013      	str	r3, [r2, #0]
	rx_err = 0;
     376:	4a0e      	ldr	r2, [pc, #56]	; (3b0 <dma_init+0xbc>)
     378:	6013      	str	r3, [r2, #0]
     37a:	4770      	bx	lr
     37c:	400fc0c4 	.word	0x400fc0c4
     380:	40030008 	.word	0x40030008
     384:	88009032 	.word	0x88009032
     388:	50004110 	.word	0x50004110
     38c:	1000262c 	.word	0x1000262c
     390:	10002641 	.word	0x10002641
     394:	100005e4 	.word	0x100005e4
     398:	100025f8 	.word	0x100025f8
     39c:	e000e100 	.word	0xe000e100
     3a0:	50004030 	.word	0x50004030
     3a4:	50004100 	.word	0x50004100
     3a8:	5000410c 	.word	0x5000410c
     3ac:	100005e0 	.word	0x100005e0
     3b0:	10002674 	.word	0x10002674

000003b4 <dio_ssp_start>:
}

static void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
     3b4:	4a0d      	ldr	r2, [pc, #52]	; (3ec <dio_ssp_start+0x38>)
     3b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     3ba:	6013      	str	r3, [r2, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
     3bc:	4a0c      	ldr	r2, [pc, #48]	; (3f0 <dio_ssp_start+0x3c>)
     3be:	6811      	ldr	r1, [r2, #0]
     3c0:	f041 0101 	orr.w	r1, r1, #1
     3c4:	6011      	str	r1, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
     3c6:	f852 1c20 	ldr.w	r1, [r2, #-32]
     3ca:	f041 0102 	orr.w	r1, r1, #2
     3ce:	f842 1c20 	str.w	r1, [r2, #-32]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
     3d2:	4a08      	ldr	r2, [pc, #32]	; (3f4 <dio_ssp_start+0x40>)
     3d4:	6811      	ldr	r1, [r2, #0]
     3d6:	f041 0101 	orr.w	r1, r1, #1
     3da:	6011      	str	r1, [r2, #0]
	ISER0 |= ISER0_ISE_DMA;
     3dc:	4a06      	ldr	r2, [pc, #24]	; (3f8 <dio_ssp_start+0x44>)
     3de:	6811      	ldr	r1, [r2, #0]
     3e0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
     3e4:	6011      	str	r1, [r2, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
     3e6:	4a05      	ldr	r2, [pc, #20]	; (3fc <dio_ssp_start+0x48>)
     3e8:	6013      	str	r3, [r2, #0]
     3ea:	4770      	bx	lr
     3ec:	2009c098 	.word	0x2009c098
     3f0:	40030024 	.word	0x40030024
     3f4:	50004110 	.word	0x50004110
     3f8:	e000e100 	.word	0xe000e100
     3fc:	2009c09c 	.word	0x2009c09c

00000400 <usb_vendor_request_handler>:
static void usb_bulk_out_handler(u8 bEP, u8 bEPStatus)
{
}

static BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
     400:	b570      	push	{r4, r5, r6, lr}
     402:	b08a      	sub	sp, #40	; 0x28
	u8 *pbData = *ppbData;
	u32 command[5];
	u32 result[5];
	u8 length; // string length

	switch (pSetup->bRequest) {
     404:	7843      	ldrb	r3, [r0, #1]
static void usb_bulk_out_handler(u8 bEP, u8 bEPStatus)
{
}

static BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
     406:	460d      	mov	r5, r1
	u8 *pbData = *ppbData;
     408:	6814      	ldr	r4, [r2, #0]
	u32 command[5];
	u32 result[5];
	u8 length; // string length

	switch (pSetup->bRequest) {
     40a:	2b21      	cmp	r3, #33	; 0x21
     40c:	f200 8149 	bhi.w	6a2 <usb_vendor_request_handler+0x2a2>
     410:	e8df f013 	tbh	[pc, r3, lsl #1]
     414:	00220133 	.word	0x00220133
     418:	002f0147 	.word	0x002f0147
     41c:	00370034 	.word	0x00370034
     420:	003f003c 	.word	0x003f003c
     424:	00450041 	.word	0x00450041
     428:	00e9004a 	.word	0x00e9004a
     42c:	011800f2 	.word	0x011800f2
     430:	00530069 	.word	0x00530069
     434:	00a700a2 	.word	0x00a700a2
     438:	00af00aa 	.word	0x00af00aa
     43c:	00db00b7 	.word	0x00db00b7
     440:	00e500df 	.word	0x00e500df
     444:	0115010b 	.word	0x0115010b
     448:	011b0147 	.word	0x011b0147
     44c:	00c000b9 	.word	0x00c000b9
     450:	00ca00cc 	.word	0x00ca00cc
     454:	013700ce 	.word	0x013700ce
	case UBERTOOTH_PING:
		*piLen = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		rx_pkts += pSetup->wValue;
     458:	4b93      	ldr	r3, [pc, #588]	; (6a8 <usb_vendor_request_handler+0x2a8>)
     45a:	8841      	ldrh	r1, [r0, #2]
     45c:	681a      	ldr	r2, [r3, #0]
     45e:	440a      	add	r2, r1
     460:	601a      	str	r2, [r3, #0]
		if (rx_pkts == 0)
     462:	681a      	ldr	r2, [r3, #0]
     464:	2a00      	cmp	r2, #0
     466:	f040 8108 	bne.w	67a <usb_vendor_request_handler+0x27a>
			rx_pkts = 0xFFFFFFFF;
     46a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     46e:	601a      	str	r2, [r3, #0]
     470:	e103      	b.n	67a <usb_vendor_request_handler+0x27a>
		*piLen = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		pbData[0] = (USRLED) ? 1 : 0;
     472:	4b8e      	ldr	r3, [pc, #568]	; (6ac <usb_vendor_request_handler+0x2ac>)
     474:	681b      	ldr	r3, [r3, #0]
     476:	f3c3 0340 	ubfx	r3, r3, #1, #1
     47a:	e0ac      	b.n	5d6 <usb_vendor_request_handler+0x1d6>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (pSetup->wValue)
     47c:	8842      	ldrh	r2, [r0, #2]
     47e:	2302      	movs	r3, #2
     480:	e015      	b.n	4ae <usb_vendor_request_handler+0xae>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		pbData[0] = (RXLED) ? 1 : 0;
     482:	4b8a      	ldr	r3, [pc, #552]	; (6ac <usb_vendor_request_handler+0x2ac>)
     484:	681b      	ldr	r3, [r3, #0]
     486:	f3c3 1300 	ubfx	r3, r3, #4, #1
     48a:	e0a4      	b.n	5d6 <usb_vendor_request_handler+0x1d6>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (pSetup->wValue)
     48c:	8842      	ldrh	r2, [r0, #2]
     48e:	2310      	movs	r3, #16
     490:	e00d      	b.n	4ae <usb_vendor_request_handler+0xae>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		pbData[0] = (TXLED) ? 1 : 0;
     492:	4b86      	ldr	r3, [pc, #536]	; (6ac <usb_vendor_request_handler+0x2ac>)
     494:	e069      	b.n	56a <usb_vendor_request_handler+0x16a>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (pSetup->wValue)
     496:	8842      	ldrh	r2, [r0, #2]
     498:	f44f 7380 	mov.w	r3, #256	; 0x100
     49c:	e007      	b.n	4ae <usb_vendor_request_handler+0xae>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		pbData[0] = (CC1V8) ? 1 : 0;
     49e:	4b83      	ldr	r3, [pc, #524]	; (6ac <usb_vendor_request_handler+0x2ac>)
     4a0:	681b      	ldr	r3, [r3, #0]
     4a2:	f3c3 2340 	ubfx	r3, r3, #9, #1
     4a6:	e096      	b.n	5d6 <usb_vendor_request_handler+0x1d6>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (pSetup->wValue)
     4a8:	8842      	ldrh	r2, [r0, #2]
     4aa:	f44f 7300 	mov.w	r3, #512	; 0x200
     4ae:	b912      	cbnz	r2, 4b6 <usb_vendor_request_handler+0xb6>

	case UBERTOOTH_SET_RXLED:
		if (pSetup->wValue)
			RXLED_SET;
		else
			RXLED_CLR;
     4b0:	4a7f      	ldr	r2, [pc, #508]	; (6b0 <usb_vendor_request_handler+0x2b0>)
     4b2:	6013      	str	r3, [r2, #0]
     4b4:	e0e3      	b.n	67e <usb_vendor_request_handler+0x27e>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (pSetup->wValue)
			CC1V8_SET;
     4b6:	4a7f      	ldr	r2, [pc, #508]	; (6b4 <usb_vendor_request_handler+0x2b4>)
     4b8:	e7fb      	b.n	4b2 <usb_vendor_request_handler+0xb2>
		else
			CC1V8_CLR;
		break;

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
     4ba:	a80a      	add	r0, sp, #40	; 0x28
     4bc:	2336      	movs	r3, #54	; 0x36
     4be:	f840 3d28 	str.w	r3, [r0, #-40]!
		iap_entry(command, result);
     4c2:	4b7d      	ldr	r3, [pc, #500]	; (6b8 <usb_vendor_request_handler+0x2b8>)
     4c4:	4668      	mov	r0, sp
     4c6:	681b      	ldr	r3, [r3, #0]
     4c8:	a905      	add	r1, sp, #20
     4ca:	4798      	blx	r3
		pbData[0] = result[0] & 0xFF; /* status */
     4cc:	9b05      	ldr	r3, [sp, #20]
     4ce:	7023      	strb	r3, [r4, #0]
		pbData[1] = result[1] & 0xFF;
     4d0:	9b06      	ldr	r3, [sp, #24]
     4d2:	7063      	strb	r3, [r4, #1]
		pbData[2] = (result[1] >> 8) & 0xFF;
     4d4:	9b06      	ldr	r3, [sp, #24]
     4d6:	0a1b      	lsrs	r3, r3, #8
     4d8:	70a3      	strb	r3, [r4, #2]
		pbData[3] = (result[1] >> 16) & 0xFF;
     4da:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     4de:	70e3      	strb	r3, [r4, #3]
		pbData[4] = (result[1] >> 24) & 0xFF;
     4e0:	f89d 301b 	ldrb.w	r3, [sp, #27]
     4e4:	e06e      	b.n	5c4 <usb_vendor_request_handler+0x1c4>
	case UBERTOOTH_RESET:
		reset();
		break;

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
     4e6:	a80a      	add	r0, sp, #40	; 0x28
     4e8:	233a      	movs	r3, #58	; 0x3a
     4ea:	f840 3d28 	str.w	r3, [r0, #-40]!
		iap_entry(command, result);
     4ee:	4b72      	ldr	r3, [pc, #456]	; (6b8 <usb_vendor_request_handler+0x2b8>)
     4f0:	4668      	mov	r0, sp
     4f2:	681b      	ldr	r3, [r3, #0]
     4f4:	a905      	add	r1, sp, #20
     4f6:	4798      	blx	r3
		pbData[0] = result[0] & 0xFF; /* status */
     4f8:	9b05      	ldr	r3, [sp, #20]
     4fa:	7023      	strb	r3, [r4, #0]
		pbData[1] = result[1] & 0xFF;
     4fc:	9b06      	ldr	r3, [sp, #24]
     4fe:	7063      	strb	r3, [r4, #1]
		pbData[2] = (result[1] >> 8) & 0xFF;
     500:	9b06      	ldr	r3, [sp, #24]
     502:	0a1b      	lsrs	r3, r3, #8
     504:	70a3      	strb	r3, [r4, #2]
		pbData[3] = (result[1] >> 16) & 0xFF;
     506:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     50a:	70e3      	strb	r3, [r4, #3]
		pbData[4] = (result[1] >> 24) & 0xFF;
     50c:	f89d 301b 	ldrb.w	r3, [sp, #27]
     510:	7123      	strb	r3, [r4, #4]
		pbData[5] = result[2] & 0xFF;
     512:	9b07      	ldr	r3, [sp, #28]
     514:	7163      	strb	r3, [r4, #5]
		pbData[6] = (result[2] >> 8) & 0xFF;
     516:	9b07      	ldr	r3, [sp, #28]
     518:	0a1b      	lsrs	r3, r3, #8
     51a:	71a3      	strb	r3, [r4, #6]
		pbData[7] = (result[2] >> 16) & 0xFF;
     51c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
     520:	71e3      	strb	r3, [r4, #7]
		pbData[8] = (result[2] >> 24) & 0xFF;
     522:	f89d 301f 	ldrb.w	r3, [sp, #31]
     526:	7223      	strb	r3, [r4, #8]
		pbData[9] = result[3] & 0xFF;
     528:	9b08      	ldr	r3, [sp, #32]
     52a:	7263      	strb	r3, [r4, #9]
		pbData[10] = (result[3] >> 8) & 0xFF;
     52c:	9b08      	ldr	r3, [sp, #32]
     52e:	0a1b      	lsrs	r3, r3, #8
     530:	72a3      	strb	r3, [r4, #10]
		pbData[11] = (result[3] >> 16) & 0xFF;
     532:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     536:	72e3      	strb	r3, [r4, #11]
		pbData[12] = (result[3] >> 24) & 0xFF;
     538:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     53c:	7323      	strb	r3, [r4, #12]
		pbData[13] = result[4] & 0xFF;
     53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     540:	7363      	strb	r3, [r4, #13]
		pbData[14] = (result[4] >> 8) & 0xFF;
     542:	9b09      	ldr	r3, [sp, #36]	; 0x24
     544:	0a1b      	lsrs	r3, r3, #8
     546:	73a3      	strb	r3, [r4, #14]
		pbData[15] = (result[4] >> 16) & 0xFF;
     548:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
     54c:	73e3      	strb	r3, [r4, #15]
		pbData[16] = (result[4] >> 24) & 0xFF;
     54e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
     552:	7423      	strb	r3, [r4, #16]
		*piLen = 17;
     554:	2311      	movs	r3, #17
     556:	e091      	b.n	67c <usb_vendor_request_handler+0x27c>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		pbData[0] = (PAEN) ? 1 : 0;
     558:	4b58      	ldr	r3, [pc, #352]	; (6bc <usb_vendor_request_handler+0x2bc>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
     560:	e039      	b.n	5d6 <usb_vendor_request_handler+0x1d6>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (pSetup->wValue)
     562:	8842      	ldrh	r2, [r0, #2]
     564:	2380      	movs	r3, #128	; 0x80
     566:	e007      	b.n	578 <usb_vendor_request_handler+0x178>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		pbData[0] = (HGM) ? 1 : 0;
     568:	4b54      	ldr	r3, [pc, #336]	; (6bc <usb_vendor_request_handler+0x2bc>)
     56a:	681b      	ldr	r3, [r3, #0]
     56c:	f3c3 2300 	ubfx	r3, r3, #8, #1
     570:	e031      	b.n	5d6 <usb_vendor_request_handler+0x1d6>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (pSetup->wValue)
     572:	8842      	ldrh	r2, [r0, #2]
     574:	f44f 7380 	mov.w	r3, #256	; 0x100
     578:	b10a      	cbz	r2, 57e <usb_vendor_request_handler+0x17e>
			HGM_SET;
     57a:	4a51      	ldr	r2, [pc, #324]	; (6c0 <usb_vendor_request_handler+0x2c0>)
     57c:	e799      	b.n	4b2 <usb_vendor_request_handler+0xb2>
		else
			HGM_CLR;
     57e:	4a51      	ldr	r2, [pc, #324]	; (6c4 <usb_vendor_request_handler+0x2c4>)
     580:	e797      	b.n	4b2 <usb_vendor_request_handler+0xb2>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
     582:	2203      	movs	r2, #3
     584:	e022      	b.n	5cc <usb_vendor_request_handler+0x1cc>
		break;

	case UBERTOOTH_GET_PALEVEL:
		pbData[0] = cc2400_get(FREND) & 0x7;
     586:	2005      	movs	r0, #5
     588:	f000 ff40 	bl	140c <cc2400_get>
     58c:	f000 0007 	and.w	r0, r0, #7
     590:	7020      	strb	r0, [r4, #0]
     592:	e021      	b.n	5d8 <usb_vendor_request_handler+0x1d8>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( pSetup->wValue < 8 ) {
     594:	8841      	ldrh	r1, [r0, #2]
     596:	2907      	cmp	r1, #7
     598:	f200 8083 	bhi.w	6a2 <usb_vendor_request_handler+0x2a2>
			cc2400_set(FREND, 8 | pSetup->wValue);
     59c:	2005      	movs	r0, #5
     59e:	f041 0108 	orr.w	r1, r1, #8
     5a2:	f000 ff3c 	bl	141e <cc2400_set>
     5a6:	e06a      	b.n	67e <usb_vendor_request_handler+0x27e>
			return FALSE;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
     5a8:	2205      	movs	r2, #5
     5aa:	e00f      	b.n	5cc <usb_vendor_request_handler+0x1cc>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
     5ac:	2206      	movs	r2, #6
     5ae:	e00d      	b.n	5cc <usb_vendor_request_handler+0x1cc>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		pbData[0] = rr.valid;
     5b0:	4b45      	ldr	r3, [pc, #276]	; (6c8 <usb_vendor_request_handler+0x2c8>)
     5b2:	781a      	ldrb	r2, [r3, #0]
     5b4:	7022      	strb	r2, [r4, #0]
		pbData[1] = rr.request_pa;
     5b6:	785a      	ldrb	r2, [r3, #1]
     5b8:	7062      	strb	r2, [r4, #1]
		pbData[2] = rr.request_num;
     5ba:	789a      	ldrb	r2, [r3, #2]
     5bc:	70a2      	strb	r2, [r4, #2]
		pbData[3] = rr.reply_pa;
     5be:	78da      	ldrb	r2, [r3, #3]
     5c0:	70e2      	strb	r2, [r4, #3]
		pbData[4] = rr.reply_num;
     5c2:	791b      	ldrb	r3, [r3, #4]
     5c4:	7123      	strb	r3, [r4, #4]
		*piLen = 5;
     5c6:	2305      	movs	r3, #5
     5c8:	e058      	b.n	67c <usb_vendor_request_handler+0x27c>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
     5ca:	2200      	movs	r2, #0
     5cc:	4b36      	ldr	r3, [pc, #216]	; (6a8 <usb_vendor_request_handler+0x2a8>)
     5ce:	605a      	str	r2, [r3, #4]
     5d0:	e055      	b.n	67e <usb_vendor_request_handler+0x27e>
		break;

	case UBERTOOTH_GET_MOD:
		pbData[0] = modulation;
     5d2:	4b35      	ldr	r3, [pc, #212]	; (6a8 <usb_vendor_request_handler+0x2a8>)
     5d4:	689b      	ldr	r3, [r3, #8]
     5d6:	7023      	strb	r3, [r4, #0]
		*piLen = 1;
     5d8:	2001      	movs	r0, #1
     5da:	6028      	str	r0, [r5, #0]
		break;
     5dc:	e062      	b.n	6a4 <usb_vendor_request_handler+0x2a4>

	case UBERTOOTH_SET_MOD:
		modulation = pSetup->wValue;
     5de:	8842      	ldrh	r2, [r0, #2]
     5e0:	4b31      	ldr	r3, [pc, #196]	; (6a8 <usb_vendor_request_handler+0x2a8>)
     5e2:	609a      	str	r2, [r3, #8]
     5e4:	e04b      	b.n	67e <usb_vendor_request_handler+0x27e>
		break;

	case UBERTOOTH_GET_CHANNEL:
		pbData[0] = channel & 0xFF;
     5e6:	4b39      	ldr	r3, [pc, #228]	; (6cc <usb_vendor_request_handler+0x2cc>)
     5e8:	881a      	ldrh	r2, [r3, #0]
     5ea:	7022      	strb	r2, [r4, #0]
		pbData[1] = (channel >> 8) & 0xFF;
     5ec:	881b      	ldrh	r3, [r3, #0]
     5ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
     5f2:	7063      	strb	r3, [r4, #1]
		*piLen = 2;
     5f4:	2302      	movs	r3, #2
     5f6:	e041      	b.n	67c <usb_vendor_request_handler+0x27c>
		break;

    case UBERTOOTH_SET_CHANNEL:
		channel = pSetup->wValue;
     5f8:	4b34      	ldr	r3, [pc, #208]	; (6cc <usb_vendor_request_handler+0x2cc>)
     5fa:	8842      	ldrh	r2, [r0, #2]
     5fc:	801a      	strh	r2, [r3, #0]
		channel = MAX(channel, MIN_FREQ);
     5fe:	8819      	ldrh	r1, [r3, #0]
     600:	f640 02dc 	movw	r2, #2268	; 0x8dc
     604:	b289      	uxth	r1, r1
     606:	4291      	cmp	r1, r2
     608:	bf84      	itt	hi
     60a:	881a      	ldrhhi	r2, [r3, #0]
     60c:	b292      	uxthhi	r2, r2
     60e:	801a      	strh	r2, [r3, #0]
		channel = MIN(channel, MAX_FREQ);
     610:	8819      	ldrh	r1, [r3, #0]
     612:	f640 22e9 	movw	r2, #2793	; 0xae9
     616:	b289      	uxth	r1, r1
     618:	4291      	cmp	r1, r2
     61a:	bf97      	itett	ls
     61c:	4a2b      	ldrls	r2, [pc, #172]	; (6cc <usb_vendor_request_handler+0x2cc>)
     61e:	f640 22ea 	movwhi	r2, #2794	; 0xaea
     622:	8812      	ldrhls	r2, [r2, #0]
     624:	b292      	uxthls	r2, r2
     626:	801a      	strh	r2, [r3, #0]
     628:	e029      	b.n	67e <usb_vendor_request_handler+0x27e>
		break;

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
     62a:	a80a      	add	r0, sp, #40	; 0x28
     62c:	2339      	movs	r3, #57	; 0x39
     62e:	f840 3d28 	str.w	r3, [r0, #-40]!
		iap_entry(command, result);
     632:	4b21      	ldr	r3, [pc, #132]	; (6b8 <usb_vendor_request_handler+0x2b8>)
     634:	4668      	mov	r0, sp
     636:	a905      	add	r1, sp, #20
     638:	681b      	ldr	r3, [r3, #0]
     63a:	4798      	blx	r3
     63c:	e01d      	b.n	67a <usb_vendor_request_handler+0x27a>
		*piLen = 0; /* should never return */
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
     63e:	4a24      	ldr	r2, [pc, #144]	; (6d0 <usb_vendor_request_handler+0x2d0>)
     640:	4b24      	ldr	r3, [pc, #144]	; (6d4 <usb_vendor_request_handler+0x2d4>)
     642:	601a      	str	r2, [r3, #0]
		reset();
     644:	f000 ffc8 	bl	15d8 <reset>
     648:	e019      	b.n	67e <usb_vendor_request_handler+0x27e>
		break;

	case UBERTOOTH_SPECAN:
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
     64a:	8842      	ldrh	r2, [r0, #2]
     64c:	f46f 6400 	mvn.w	r4, #2048	; 0x800
     650:	1913      	adds	r3, r2, r4
     652:	f240 31ff 	movw	r1, #1023	; 0x3ff
     656:	b29b      	uxth	r3, r3
     658:	428b      	cmp	r3, r1
     65a:	d822      	bhi.n	6a2 <usb_vendor_request_handler+0x2a2>
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     65c:	8883      	ldrh	r3, [r0, #4]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
     65e:	f46f 6000 	mvn.w	r0, #2048	; 0x800
     662:	1818      	adds	r0, r3, r0
     664:	b280      	uxth	r0, r0
     666:	4288      	cmp	r0, r1
     668:	d81b      	bhi.n	6a2 <usb_vendor_request_handler+0x2a2>
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     66a:	4293      	cmp	r3, r2
     66c:	d319      	bcc.n	6a2 <usb_vendor_request_handler+0x2a2>
				pSetup->wIndex < pSetup->wValue)
			return FALSE;
		low_freq = pSetup->wValue;
     66e:	4917      	ldr	r1, [pc, #92]	; (6cc <usb_vendor_request_handler+0x2cc>)
     670:	804a      	strh	r2, [r1, #2]
		high_freq = pSetup->wIndex;
     672:	808b      	strh	r3, [r1, #4]
		requested_mode = MODE_SPECAN;
     674:	4b0c      	ldr	r3, [pc, #48]	; (6a8 <usb_vendor_request_handler+0x2a8>)
     676:	2204      	movs	r2, #4
     678:	605a      	str	r2, [r3, #4]
		*piLen = 0;
     67a:	2300      	movs	r3, #0
     67c:	602b      	str	r3, [r5, #0]
		break;

	default:
		return FALSE;
	}
	return TRUE;
     67e:	2001      	movs	r0, #1
			return FALSE;
		low_freq = pSetup->wValue;
		high_freq = pSetup->wIndex;
		requested_mode = MODE_SPECAN;
		*piLen = 0;
		break;
     680:	e010      	b.n	6a4 <usb_vendor_request_handler+0x2a4>

	case UBERTOOTH_GET_REV_NUM:
		pbData[0] = 0x00;
     682:	2300      	movs	r3, #0
     684:	7023      	strb	r3, [r4, #0]
		pbData[1] = 0x00;
     686:	7063      	strb	r3, [r4, #1]

		length = (u8)strlen(GIT_REVISION);
     688:	4813      	ldr	r0, [pc, #76]	; (6d8 <usb_vendor_request_handler+0x2d8>)
     68a:	f001 fbc1 	bl	1e10 <strlen>
		pbData[2] = length;

		memcpy(&pbData[3], GIT_REVISION, length);
     68e:	b2c6      	uxtb	r6, r0

	case UBERTOOTH_GET_REV_NUM:
		pbData[0] = 0x00;
		pbData[1] = 0x00;

		length = (u8)strlen(GIT_REVISION);
     690:	70a0      	strb	r0, [r4, #2]
		pbData[2] = length;

		memcpy(&pbData[3], GIT_REVISION, length);
     692:	4632      	mov	r2, r6
     694:	1ce0      	adds	r0, r4, #3
     696:	4910      	ldr	r1, [pc, #64]	; (6d8 <usb_vendor_request_handler+0x2d8>)

		*piLen = 2 + 1 + length;
     698:	3603      	adds	r6, #3
		pbData[1] = 0x00;

		length = (u8)strlen(GIT_REVISION);
		pbData[2] = length;

		memcpy(&pbData[3], GIT_REVISION, length);
     69a:	f001 fb43 	bl	1d24 <memcpy>

		*piLen = 2 + 1 + length;
     69e:	602e      	str	r6, [r5, #0]
     6a0:	e7ed      	b.n	67e <usb_vendor_request_handler+0x27e>

	case UBERTOOTH_SET_PALEVEL:
		if( pSetup->wValue < 8 ) {
			cc2400_set(FREND, 8 | pSetup->wValue);
		} else {
			return FALSE;
     6a2:	2000      	movs	r0, #0

	default:
		return FALSE;
	}
	return TRUE;
}
     6a4:	b00a      	add	sp, #40	; 0x28
     6a6:	bd70      	pop	{r4, r5, r6, pc}
     6a8:	10000518 	.word	0x10000518
     6ac:	2009c034 	.word	0x2009c034
     6b0:	2009c03c 	.word	0x2009c03c
     6b4:	2009c038 	.word	0x2009c038
     6b8:	00001f78 	.word	0x00001f78
     6bc:	2009c054 	.word	0x2009c054
     6c0:	2009c058 	.word	0x2009c058
     6c4:	2009c05c 	.word	0x2009c05c
     6c8:	1000263c 	.word	0x1000263c
     6cc:	10000448 	.word	0x10000448
     6d0:	4305bb21 	.word	0x4305bb21
     6d4:	1000001c 	.word	0x1000001c
     6d8:	00001f6d 	.word	0x00001f6d

000006dc <queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
	head = 0;
     6dc:	4b02      	ldr	r3, [pc, #8]	; (6e8 <queue_init+0xc>)
     6de:	2200      	movs	r2, #0
     6e0:	60da      	str	r2, [r3, #12]
	tail = 0;
     6e2:	611a      	str	r2, [r3, #16]
     6e4:	4770      	bx	lr
     6e6:	bf00      	nop
     6e8:	10000518 	.word	0x10000518

000006ec <enqueue>:
}

int enqueue(u8 *buf)
{
     6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;
	u8 h = head & 0x7F;
     6ee:	4a15      	ldr	r2, [pc, #84]	; (744 <enqueue+0x58>)
     6f0:	68d1      	ldr	r1, [r2, #12]
	u8 t = tail & 0x7F;
     6f2:	6914      	ldr	r4, [r2, #16]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n)
     6f4:	f001 017f 	and.w	r1, r1, #127	; 0x7f

int enqueue(u8 *buf)
{
	int i;
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
     6f8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
     6fc:	1c63      	adds	r3, r4, #1

	/* fail if queue is full */
	if (h == n)
     6fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     702:	4299      	cmp	r1, r3
     704:	d01c      	beq.n	740 <enqueue+0x54>
		return 0;

	fifo[t].clkn_high = clkn_high;
     706:	4b10      	ldr	r3, [pc, #64]	; (748 <enqueue+0x5c>)
     708:	4d10      	ldr	r5, [pc, #64]	; (74c <enqueue+0x60>)
     70a:	781b      	ldrb	r3, [r3, #0]
     70c:	01a4      	lsls	r4, r4, #6
     70e:	1929      	adds	r1, r5, r4
     710:	70cb      	strb	r3, [r1, #3]
	fifo[t].clk100ns = CLK100NS;
     712:	4b0f      	ldr	r3, [pc, #60]	; (750 <enqueue+0x64>)

	USRLED_SET;
     714:	2602      	movs	r6, #2
	/* fail if queue is full */
	if (h == n)
		return 0;

	fifo[t].clkn_high = clkn_high;
	fifo[t].clk100ns = CLK100NS;
     716:	681b      	ldr	r3, [r3, #0]
     718:	604b      	str	r3, [r1, #4]

	USRLED_SET;
     71a:	4b0e      	ldr	r3, [pc, #56]	; (754 <enqueue+0x68>)
     71c:	601e      	str	r6, [r3, #0]
	for (i = 0; i < DMA_SIZE; i++)
     71e:	2300      	movs	r3, #0
		fifo[t].data[i] = buf[i];
     720:	5cc7      	ldrb	r7, [r0, r3]
     722:	18ce      	adds	r6, r1, r3

	fifo[t].clkn_high = clkn_high;
	fifo[t].clk100ns = CLK100NS;

	USRLED_SET;
	for (i = 0; i < DMA_SIZE; i++)
     724:	3301      	adds	r3, #1
     726:	2b32      	cmp	r3, #50	; 0x32
		fifo[t].data[i] = buf[i];
     728:	73b7      	strb	r7, [r6, #14]

	fifo[t].clkn_high = clkn_high;
	fifo[t].clk100ns = CLK100NS;

	USRLED_SET;
	for (i = 0; i < DMA_SIZE; i++)
     72a:	d1f9      	bne.n	720 <enqueue+0x34>
		fifo[t].data[i] = buf[i];
	fifo[t].status = status;
     72c:	7d13      	ldrb	r3, [r2, #20]
     72e:	442c      	add	r4, r5
     730:	7063      	strb	r3, [r4, #1]
	status = 0;
     732:	2300      	movs	r3, #0
     734:	7513      	strb	r3, [r2, #20]
	++tail;
     736:	6913      	ldr	r3, [r2, #16]

	return 1;
     738:	2001      	movs	r0, #1
	USRLED_SET;
	for (i = 0; i < DMA_SIZE; i++)
		fifo[t].data[i] = buf[i];
	fifo[t].status = status;
	status = 0;
	++tail;
     73a:	3301      	adds	r3, #1
     73c:	6113      	str	r3, [r2, #16]

	return 1;
     73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n)
		return 0;
     740:	2000      	movs	r0, #0
	fifo[t].status = status;
	status = 0;
	++tail;

	return 1;
}
     742:	bdf0      	pop	{r4, r5, r6, r7, pc}
     744:	10000518 	.word	0x10000518
     748:	100005f4 	.word	0x100005f4
     74c:	100005f8 	.word	0x100005f8
     750:	40004008 	.word	0x40004008
     754:	2009c038 	.word	0x2009c038

00000758 <dequeue>:

int dequeue()
{
     758:	b510      	push	{r4, lr}
	u8 h = head & 0x7F;
     75a:	4c0d      	ldr	r4, [pc, #52]	; (790 <dequeue+0x38>)
     75c:	68e3      	ldr	r3, [r4, #12]
	u8 t = tail & 0x7F;
     75e:	6922      	ldr	r2, [r4, #16]
	return 1;
}

int dequeue()
{
	u8 h = head & 0x7F;
     760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
     764:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     768:	4293      	cmp	r3, r2
     76a:	d104      	bne.n	776 <dequeue+0x1e>
		USRLED_CLR;
     76c:	4b09      	ldr	r3, [pc, #36]	; (794 <dequeue+0x3c>)
     76e:	2202      	movs	r2, #2
     770:	601a      	str	r2, [r3, #0]
		return 0;
     772:	2000      	movs	r0, #0
     774:	bd10      	pop	{r4, pc}
	}

	USBHwEPWrite(BULK_IN_EP, (u8 *)&fifo[h], sizeof(usb_pkt_rx));
     776:	4908      	ldr	r1, [pc, #32]	; (798 <dequeue+0x40>)
     778:	2240      	movs	r2, #64	; 0x40
     77a:	eb01 1183 	add.w	r1, r1, r3, lsl #6
     77e:	2082      	movs	r0, #130	; 0x82
     780:	f001 f8a4 	bl	18cc <USBHwEPWrite>
	++head;
     784:	68e3      	ldr	r3, [r4, #12]

	return 1;
     786:	2001      	movs	r0, #1
		USRLED_CLR;
		return 0;
	}

	USBHwEPWrite(BULK_IN_EP, (u8 *)&fifo[h], sizeof(usb_pkt_rx));
	++head;
     788:	3301      	adds	r3, #1
     78a:	60e3      	str	r3, [r4, #12]

	return 1;
}
     78c:	bd10      	pop	{r4, pc}
     78e:	bf00      	nop
     790:	10000518 	.word	0x10000518
     794:	2009c03c 	.word	0x2009c03c
     798:	100005f8 	.word	0x100005f8

0000079c <ubertooth_usb_init>:
	}
	return TRUE;
}

int ubertooth_usb_init()
{
     79c:	b508      	push	{r3, lr}
	// initialise stack
	USBInit();
     79e:	f000 ffcf 	bl	1740 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
     7a2:	4806      	ldr	r0, [pc, #24]	; (7bc <ubertooth_usb_init+0x20>)
     7a4:	f001 f9f0 	bl	1b88 <USBRegisterDescriptors>

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
     7a8:	4905      	ldr	r1, [pc, #20]	; (7c0 <ubertooth_usb_init+0x24>)
     7aa:	4a06      	ldr	r2, [pc, #24]	; (7c4 <ubertooth_usb_init+0x28>)
     7ac:	2002      	movs	r0, #2
     7ae:	f000 ffbd 	bl	172c <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 |= ISER0_ISE_USB;
	
	// connect to bus
	USBHwConnect(TRUE);
     7b2:	2001      	movs	r0, #1
     7b4:	f001 f859 	bl	186a <USBHwConnect>

	return 0;
}
     7b8:	2000      	movs	r0, #0
     7ba:	bd08      	pop	{r3, pc}
     7bc:	00001e78 	.word	0x00001e78
     7c0:	00000401 	.word	0x00000401
     7c4:	1000052d 	.word	0x1000052d

000007c8 <TIMER0_IRQHandler>:
}

/* clkn_high is incremented each time CLK100NS rolls over */
void TIMER0_IRQHandler()
{
	if (T0IR & TIR_MR0_Interrupt) {
     7c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     7cc:	681a      	ldr	r2, [r3, #0]
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d508      	bpl.n	7e4 <TIMER0_IRQHandler+0x1c>
		++clkn_high;
     7d2:	4a05      	ldr	r2, [pc, #20]	; (7e8 <TIMER0_IRQHandler+0x20>)
     7d4:	7811      	ldrb	r1, [r2, #0]
     7d6:	3101      	adds	r1, #1
     7d8:	b2c9      	uxtb	r1, r1
     7da:	7011      	strb	r1, [r2, #0]
		T0IR |= TIR_MR0_Interrupt;
     7dc:	681a      	ldr	r2, [r3, #0]
     7de:	f042 0201 	orr.w	r2, r2, #1
     7e2:	601a      	str	r2, [r3, #0]
     7e4:	4770      	bx	lr
     7e6:	bf00      	nop
     7e8:	100005f4 	.word	0x100005f4

000007ec <DMA_IRQHandler>:
}

void DMA_IRQHandler()
{
	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
     7ec:	4b0f      	ldr	r3, [pc, #60]	; (82c <DMA_IRQHandler+0x40>)
     7ee:	681b      	ldr	r3, [r3, #0]
     7f0:	07db      	lsls	r3, r3, #31
     7f2:	d519      	bpl.n	828 <DMA_IRQHandler+0x3c>
		if (DMACIntTCStat & (1 << 0)) {
     7f4:	4b0e      	ldr	r3, [pc, #56]	; (830 <DMA_IRQHandler+0x44>)
     7f6:	681b      	ldr	r3, [r3, #0]
     7f8:	07d8      	lsls	r0, r3, #31
     7fa:	d508      	bpl.n	80e <DMA_IRQHandler+0x22>
			DMACIntTCClear |= (1 << 0);
     7fc:	4b0d      	ldr	r3, [pc, #52]	; (834 <DMA_IRQHandler+0x48>)
     7fe:	681a      	ldr	r2, [r3, #0]
     800:	f042 0201 	orr.w	r2, r2, #1
     804:	601a      	str	r2, [r3, #0]
			++rx_tc;
     806:	4b0c      	ldr	r3, [pc, #48]	; (838 <DMA_IRQHandler+0x4c>)
     808:	681a      	ldr	r2, [r3, #0]
     80a:	3201      	adds	r2, #1
     80c:	601a      	str	r2, [r3, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
     80e:	4b0b      	ldr	r3, [pc, #44]	; (83c <DMA_IRQHandler+0x50>)
     810:	681b      	ldr	r3, [r3, #0]
     812:	07d9      	lsls	r1, r3, #31
     814:	d508      	bpl.n	828 <DMA_IRQHandler+0x3c>
			DMACIntErrClr |= (1 << 0);
     816:	4b0a      	ldr	r3, [pc, #40]	; (840 <DMA_IRQHandler+0x54>)
     818:	681a      	ldr	r2, [r3, #0]
     81a:	f042 0201 	orr.w	r2, r2, #1
     81e:	601a      	str	r2, [r3, #0]
			++rx_err;
     820:	4b08      	ldr	r3, [pc, #32]	; (844 <DMA_IRQHandler+0x58>)
     822:	681a      	ldr	r2, [r3, #0]
     824:	3201      	adds	r2, #1
     826:	601a      	str	r2, [r3, #0]
     828:	4770      	bx	lr
     82a:	bf00      	nop
     82c:	50004000 	.word	0x50004000
     830:	50004004 	.word	0x50004004
     834:	50004008 	.word	0x50004008
     838:	100005e0 	.word	0x100005e0
     83c:	5000400c 	.word	0x5000400c
     840:	50004010 	.word	0x50004010
     844:	10002674 	.word	0x10002674

00000848 <cc2400_rx>:
	DIO_SSEL_CLR;
}

/* start un-buffered rx */
void cc2400_rx()
{
     848:	b508      	push	{r3, lr}
	if (modulation == MOD_BT_BASIC_RATE) {
     84a:	4b2d      	ldr	r3, [pc, #180]	; (900 <cc2400_rx+0xb8>)
     84c:	689a      	ldr	r2, [r3, #8]
     84e:	b9f2      	cbnz	r2, 88e <cc2400_rx+0x46>
		cc2400_set(MANAND,  0x7fff);
     850:	200d      	movs	r0, #13
     852:	f647 71ff 	movw	r1, #32767	; 0x7fff
     856:	f000 fde2 	bl	141e <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     85a:	2012      	movs	r0, #18
     85c:	f642 3122 	movw	r1, #11042	; 0x2b22
     860:	f000 fddd 	bl	141e <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
     864:	2014      	movs	r0, #20
     866:	f241 314b 	movw	r1, #4939	; 0x134b
     86a:	f000 fdd8 	bl	141e <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     86e:	2020      	movs	r0, #32
     870:	f240 1101 	movw	r1, #257	; 0x101
     874:	f000 fdd3 	bl	141e <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
     878:	4b22      	ldr	r3, [pc, #136]	; (904 <cc2400_rx+0xbc>)
     87a:	2002      	movs	r0, #2
     87c:	8819      	ldrh	r1, [r3, #0]
     87e:	b289      	uxth	r1, r1
     880:	3901      	subs	r1, #1
     882:	b289      	uxth	r1, r1
     884:	f000 fdcb 	bl	141e <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     888:	2003      	movs	r0, #3
     88a:	2129      	movs	r1, #41	; 0x29
     88c:	e020      	b.n	8d0 <cc2400_rx+0x88>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
     88e:	689b      	ldr	r3, [r3, #8]
     890:	2b01      	cmp	r3, #1
     892:	d133      	bne.n	8fc <cc2400_rx+0xb4>
		cc2400_set(MANAND,  0x7fff);
     894:	200d      	movs	r0, #13
     896:	f647 71ff 	movw	r1, #32767	; 0x7fff
     89a:	f000 fdc0 	bl	141e <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     89e:	2012      	movs	r0, #18
     8a0:	f642 3122 	movw	r1, #11042	; 0x2b22
     8a4:	f000 fdbb 	bl	141e <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
     8a8:	2014      	movs	r0, #20
     8aa:	f241 314b 	movw	r1, #4939	; 0x134b
     8ae:	f000 fdb6 	bl	141e <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     8b2:	2020      	movs	r0, #32
     8b4:	f240 1101 	movw	r1, #257	; 0x101
     8b8:	f000 fdb1 	bl	141e <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
     8bc:	4b11      	ldr	r3, [pc, #68]	; (904 <cc2400_rx+0xbc>)
     8be:	2002      	movs	r0, #2
     8c0:	8819      	ldrh	r1, [r3, #0]
     8c2:	b289      	uxth	r1, r1
     8c4:	3901      	subs	r1, #1
     8c6:	b289      	uxth	r1, r1
     8c8:	f000 fda9 	bl	141e <cc2400_set>
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     8cc:	2003      	movs	r0, #3
     8ce:	2140      	movs	r1, #64	; 0x40
     8d0:	f000 fda5 	bl	141e <cc2400_set>
	} else {
		/* oops */
		return;
	}
	while (!(cc2400_status() & XOSC16M_STABLE));
     8d4:	f000 fdb6 	bl	1444 <cc2400_status>
     8d8:	0641      	lsls	r1, r0, #25
     8da:	d5fb      	bpl.n	8d4 <cc2400_rx+0x8c>
	cc2400_strobe(SFSON);
     8dc:	2061      	movs	r0, #97	; 0x61
     8de:	f000 fdb8 	bl	1452 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     8e2:	f000 fdaf 	bl	1444 <cc2400_status>
     8e6:	0742      	lsls	r2, r0, #29
     8e8:	d5fb      	bpl.n	8e2 <cc2400_rx+0x9a>
	cc2400_strobe(SRX);
     8ea:	2062      	movs	r0, #98	; 0x62
     8ec:	f000 fdb1 	bl	1452 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <cc2400_rx+0xc0>)
     8f2:	2280      	movs	r2, #128	; 0x80
     8f4:	601a      	str	r2, [r3, #0]
	HGM_SET;
     8f6:	f44f 7280 	mov.w	r2, #256	; 0x100
     8fa:	601a      	str	r2, [r3, #0]
     8fc:	bd08      	pop	{r3, pc}
     8fe:	bf00      	nop
     900:	10000518 	.word	0x10000518
     904:	10000448 	.word	0x10000448
     908:	2009c058 	.word	0x2009c058

0000090c <cc2400_txtest>:
#endif
}

void cc2400_txtest()
{
     90c:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	if (modulation == MOD_BT_BASIC_RATE) {
     90e:	4c27      	ldr	r4, [pc, #156]	; (9ac <cc2400_txtest+0xa0>)
     910:	68a3      	ldr	r3, [r4, #8]
     912:	b9bb      	cbnz	r3, 944 <cc2400_txtest+0x38>
		cc2400_set(MANAND,  0x7fff);
     914:	200d      	movs	r0, #13
     916:	f647 71ff 	movw	r1, #32767	; 0x7fff
     91a:	f000 fd80 	bl	141e <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     91e:	2012      	movs	r0, #18
     920:	f642 3122 	movw	r1, #11042	; 0x2b22
     924:	f000 fd7b 	bl	141e <cc2400_set>
		cc2400_set(MDMTST0, 0x334b); // with PRNG
     928:	2014      	movs	r0, #20
     92a:	f243 314b 	movw	r1, #13131	; 0x334b
     92e:	f000 fd76 	bl	141e <cc2400_set>
		cc2400_set(FSDIV,   channel);
     932:	4b1f      	ldr	r3, [pc, #124]	; (9b0 <cc2400_txtest+0xa4>)
     934:	2002      	movs	r0, #2
     936:	8819      	ldrh	r1, [r3, #0]
     938:	b289      	uxth	r1, r1
     93a:	f000 fd70 	bl	141e <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     93e:	2003      	movs	r0, #3
     940:	2129      	movs	r1, #41	; 0x29
     942:	e019      	b.n	978 <cc2400_txtest+0x6c>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
     944:	68a3      	ldr	r3, [r4, #8]
     946:	2b01      	cmp	r3, #1
     948:	d12f      	bne.n	9aa <cc2400_txtest+0x9e>
		cc2400_set(MANAND,  0x7fff);
     94a:	200d      	movs	r0, #13
     94c:	f647 71ff 	movw	r1, #32767	; 0x7fff
     950:	f000 fd65 	bl	141e <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     954:	2012      	movs	r0, #18
     956:	f642 3122 	movw	r1, #11042	; 0x2b22
     95a:	f000 fd60 	bl	141e <cc2400_set>
		cc2400_set(MDMTST0, 0x334b); // with PRNG
     95e:	2014      	movs	r0, #20
     960:	f243 314b 	movw	r1, #13131	; 0x334b
     964:	f000 fd5b 	bl	141e <cc2400_set>
		cc2400_set(FSDIV,   channel);
     968:	4b11      	ldr	r3, [pc, #68]	; (9b0 <cc2400_txtest+0xa4>)
     96a:	2002      	movs	r0, #2
     96c:	8819      	ldrh	r1, [r3, #0]
     96e:	b289      	uxth	r1, r1
     970:	f000 fd55 	bl	141e <cc2400_set>
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     974:	2003      	movs	r0, #3
     976:	2140      	movs	r1, #64	; 0x40
     978:	f000 fd51 	bl	141e <cc2400_set>
	} else {
		/* oops */
		return;
	}
	while (!(cc2400_status() & XOSC16M_STABLE));
     97c:	f000 fd62 	bl	1444 <cc2400_status>
     980:	0643      	lsls	r3, r0, #25
     982:	d5fb      	bpl.n	97c <cc2400_txtest+0x70>
	cc2400_strobe(SFSON);
     984:	2061      	movs	r0, #97	; 0x61
     986:	f000 fd64 	bl	1452 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     98a:	f000 fd5b 	bl	1444 <cc2400_status>
     98e:	0740      	lsls	r0, r0, #29
     990:	d5fb      	bpl.n	98a <cc2400_txtest+0x7e>
	TXLED_SET;
     992:	4b08      	ldr	r3, [pc, #32]	; (9b4 <cc2400_txtest+0xa8>)
     994:	f44f 7280 	mov.w	r2, #256	; 0x100
     998:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
     99a:	2063      	movs	r0, #99	; 0x63
     99c:	f000 fd59 	bl	1452 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     9a0:	4b05      	ldr	r3, [pc, #20]	; (9b8 <cc2400_txtest+0xac>)
     9a2:	2280      	movs	r2, #128	; 0x80
     9a4:	601a      	str	r2, [r3, #0]
#endif
	mode = MODE_TX_TEST;
     9a6:	2303      	movs	r3, #3
     9a8:	62a3      	str	r3, [r4, #40]	; 0x28
     9aa:	bd10      	pop	{r4, pc}
     9ac:	10000518 	.word	0x10000518
     9b0:	10000448 	.word	0x10000448
     9b4:	2009c038 	.word	0x2009c038
     9b8:	2009c058 	.word	0x2009c058

000009bc <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest()
{
     9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9c0:	b096      	sub	sp, #88	; 0x58
     9c2:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	mode = MODE_RANGE_TEST;
     9c4:	4b9e      	ldr	r3, [pc, #632]	; (c40 <cc2400_rangetest+0x284>)
     9c6:	2405      	movs	r4, #5
     9c8:	629c      	str	r4, [r3, #40]	; 0x28

	txbuf[0] = len - 1; // length of data (rest of payload)
     9ca:	2315      	movs	r3, #21
     9cc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	txbuf[1] = 0; // request
     9d0:	2300      	movs	r3, #0
     9d2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
     9d6:	4b9b      	ldr	r3, [pc, #620]	; (c44 <cc2400_rangetest+0x288>)

	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
     9d8:	223a      	movs	r2, #58	; 0x3a
     9da:	f107 0058 	add.w	r0, r7, #88	; 0x58
     9de:	f840 2d58 	str.w	r2, [r0, #-88]!
	iap_entry(command, result);
     9e2:	f107 0114 	add.w	r1, r7, #20
     9e6:	4638      	mov	r0, r7
     9e8:	681b      	ldr	r3, [r3, #0]
     9ea:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
     9ec:	7d3a      	ldrb	r2, [r7, #20]
     9ee:	46ea      	mov	sl, sp
     9f0:	2a00      	cmp	r2, #0
     9f2:	f040 8120 	bne.w	c36 <cc2400_rangetest+0x27a>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
     9f6:	69bb      	ldr	r3, [r7, #24]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
     9f8:	200d      	movs	r0, #13
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
     9fa:	0e19      	lsrs	r1, r3, #24
     9fc:	f887 1042 	strb.w	r1, [r7, #66]	; 0x42
	txbuf[3] = (result[1] >> 16) & 0xFF;
     a00:	0c19      	lsrs	r1, r3, #16
     a02:	f887 1043 	strb.w	r1, [r7, #67]	; 0x43
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
     a06:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
     a0a:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
     a0c:	69fb      	ldr	r3, [r7, #28]
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
     a0e:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
     a12:	0e19      	lsrs	r1, r3, #24
     a14:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	txbuf[7] = (result[2] >> 16) & 0xFF;
     a18:	0c19      	lsrs	r1, r3, #16
     a1a:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
     a1e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
     a22:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
     a24:	6a3b      	ldr	r3, [r7, #32]
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
     a26:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
     a2a:	0e19      	lsrs	r1, r3, #24
     a2c:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[11] = (result[3] >> 16) & 0xFF;
     a30:	0c19      	lsrs	r1, r3, #16
     a32:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
     a36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
     a3a:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
     a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
     a3e:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
     a42:	0e19      	lsrs	r1, r3, #24
     a44:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[15] = (result[4] >> 16) & 0xFF;
     a48:	0c19      	lsrs	r1, r3, #16
     a4a:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[16] = (result[4] >> 8) & 0xFF;
     a4e:	0a19      	lsrs	r1, r3, #8
     a50:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[17] = result[4] & 0xFF;
     a54:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
     a58:	f647 71ff 	movw	r1, #32767	; 0x7fff
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
     a5c:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
     a5e:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
	txbuf[19] = 0; // request number
     a62:	f887 2053 	strb.w	r2, [r7, #83]	; 0x53
	txbuf[20] = 0xff; // reply pa
     a66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	txbuf[21] = 0xff; // reply number
     a6a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
	cc2400_set(LMTST,   0x2b22);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(FSDIV,   channel);
     a6e:	4d76      	ldr	r5, [pc, #472]	; (c48 <cc2400_rangetest+0x28c>)
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
     a70:	f000 fcd5 	bl	141e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
     a74:	2012      	movs	r0, #18
     a76:	f642 3122 	movw	r1, #11042	; 0x2b22
     a7a:	f000 fcd0 	bl	141e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
     a7e:	2014      	movs	r0, #20
     a80:	f241 314b 	movw	r1, #4939	; 0x134b
     a84:	f000 fccb 	bl	141e <cc2400_set>
	cc2400_set(FSDIV,   channel);
     a88:	8829      	ldrh	r1, [r5, #0]
     a8a:	2002      	movs	r0, #2
     a8c:	b289      	uxth	r1, r1
     a8e:	f000 fcc6 	bl	141e <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
     a92:	202d      	movs	r0, #45	; 0x2d
     a94:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
     a98:	f000 fcc1 	bl	141e <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
     a9c:	202c      	movs	r0, #44	; 0x2c
     a9e:	f241 5184 	movw	r1, #5508	; 0x1584
     aa2:	f000 fcbc 	bl	141e <cc2400_set>
	cc2400_set(FREND,   8 | pa);
     aa6:	4620      	mov	r0, r4
     aa8:	2108      	movs	r1, #8
     aaa:	f000 fcb8 	bl	141e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
     aae:	2003      	movs	r0, #3
     ab0:	2129      	movs	r1, #41	; 0x29
     ab2:	f000 fcb4 	bl	141e <cc2400_set>
     ab6:	46a9      	mov	r9, r5
	while (!(cc2400_status() & XOSC16M_STABLE));
     ab8:	f000 fcc4 	bl	1444 <cc2400_status>
     abc:	0643      	lsls	r3, r0, #25
     abe:	d5fb      	bpl.n	ab8 <cc2400_rangetest+0xfc>
	cc2400_strobe(SFSON);
     ac0:	2061      	movs	r0, #97	; 0x61
     ac2:	f000 fcc6 	bl	1452 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     ac6:	f000 fcbd 	bl	1444 <cc2400_status>
     aca:	0746      	lsls	r6, r0, #29
     acc:	d5fb      	bpl.n	ac6 <cc2400_rangetest+0x10a>
	TXLED_SET;
     ace:	4b5f      	ldr	r3, [pc, #380]	; (c4c <cc2400_rangetest+0x290>)
     ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
     ad4:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     ad6:	2280      	movs	r2, #128	; 0x80
     ad8:	621a      	str	r2, [r3, #32]
#endif
	for (pa = 0; pa < 8; pa++) {
     ada:	2400      	movs	r4, #0
		cc2400_set(FREND, 8 | pa);
     adc:	2005      	movs	r0, #5
     ade:	f044 0108 	orr.w	r1, r4, #8
     ae2:	f000 fc9c 	bl	141e <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
     ae6:	2500      	movs	r5, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
     ae8:	f887 4052 	strb.w	r4, [r7, #82]	; 0x52
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
     aec:	f887 5053 	strb.w	r5, [r7, #83]	; 0x53
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     af0:	200e      	movs	r0, #14
     af2:	f000 fc8b 	bl	140c <cc2400_get>
     af6:	f000 001f 	and.w	r0, r0, #31
     afa:	280f      	cmp	r0, #15
     afc:	d1f8      	bne.n	af0 <cc2400_rangetest+0x134>
     afe:	2600      	movs	r6, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
     b00:	f107 0840 	add.w	r8, r7, #64	; 0x40
     b04:	f818 1006 	ldrb.w	r1, [r8, r6]
     b08:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
     b0a:	3601      	adds	r6, #1
				cc2400_set8(FIFOREG, txbuf[j]);
     b0c:	f000 fc95 	bl	143a <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
     b10:	2e16      	cmp	r6, #22
     b12:	d1f5      	bne.n	b00 <cc2400_rangetest+0x144>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
     b14:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
     b16:	3501      	adds	r5, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
     b18:	f000 fc9b 	bl	1452 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
     b1c:	2d10      	cmp	r5, #16
     b1e:	d1e5      	bne.n	aec <cc2400_rangetest+0x130>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
     b20:	3401      	adds	r4, #1
     b22:	b2e4      	uxtb	r4, r4
     b24:	2c08      	cmp	r4, #8
     b26:	d1d9      	bne.n	adc <cc2400_rangetest+0x120>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     b28:	200e      	movs	r0, #14
     b2a:	f000 fc6f 	bl	140c <cc2400_get>
     b2e:	f000 001f 	and.w	r0, r0, #31
     b32:	280f      	cmp	r0, #15
     b34:	d1f8      	bne.n	b28 <cc2400_rangetest+0x16c>
	TXLED_CLR;
     b36:	4b46      	ldr	r3, [pc, #280]	; (c50 <cc2400_rangetest+0x294>)
     b38:	f44f 7280 	mov.w	r2, #256	; 0x100
     b3c:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
     b3e:	2064      	movs	r0, #100	; 0x64
     b40:	f000 fc87 	bl	1452 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
     b44:	f000 fc7e 	bl	1444 <cc2400_status>
     b48:	0745      	lsls	r5, r0, #29
     b4a:	d4fb      	bmi.n	b44 <cc2400_rangetest+0x188>
	cc2400_set(FSDIV, channel - 1);
     b4c:	f8b9 1000 	ldrh.w	r1, [r9]
     b50:	2002      	movs	r0, #2
     b52:	b289      	uxth	r1, r1
     b54:	3901      	subs	r1, #1
     b56:	b289      	uxth	r1, r1
     b58:	f000 fc61 	bl	141e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
     b5c:	f000 fc72 	bl	1444 <cc2400_status>
     b60:	0644      	lsls	r4, r0, #25
     b62:	d5fb      	bpl.n	b5c <cc2400_rangetest+0x1a0>
	cc2400_strobe(SFSON);
     b64:	2061      	movs	r0, #97	; 0x61
     b66:	f000 fc74 	bl	1452 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     b6a:	f000 fc6b 	bl	1444 <cc2400_status>
     b6e:	0740      	lsls	r0, r0, #29
     b70:	d5fb      	bpl.n	b6a <cc2400_rangetest+0x1ae>
	RXLED_SET;
     b72:	4b36      	ldr	r3, [pc, #216]	; (c4c <cc2400_rangetest+0x290>)
     b74:	2210      	movs	r2, #16
     b76:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     b78:	200e      	movs	r0, #14
     b7a:	f000 fc47 	bl	140c <cc2400_get>
     b7e:	f000 001f 	and.w	r0, r0, #31
     b82:	280f      	cmp	r0, #15
     b84:	d1f8      	bne.n	b78 <cc2400_rangetest+0x1bc>
		cc2400_strobe(SRX);
     b86:	2062      	movs	r0, #98	; 0x62
     b88:	f000 fc63 	bl	1452 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
     b8c:	f000 fc5a 	bl	1444 <cc2400_status>
     b90:	06c1      	lsls	r1, r0, #27
     b92:	d5fb      	bpl.n	b8c <cc2400_rangetest+0x1d0>
		USRLED_SET;
     b94:	4b2d      	ldr	r3, [pc, #180]	; (c4c <cc2400_rangetest+0x290>)
     b96:	2202      	movs	r2, #2
     b98:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
     b9a:	2400      	movs	r4, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
     b9c:	2070      	movs	r0, #112	; 0x70
     b9e:	f000 fc43 	bl	1428 <cc2400_get8>
     ba2:	f107 0528 	add.w	r5, r7, #40	; 0x28
     ba6:	5528      	strb	r0, [r5, r4]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
     ba8:	3401      	adds	r4, #1
     baa:	2c16      	cmp	r4, #22
     bac:	d1f6      	bne.n	b9c <cc2400_rangetest+0x1e0>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
     bae:	f000 fc49 	bl	1444 <cc2400_status>
     bb2:	0702      	lsls	r2, r0, #28
     bb4:	d402      	bmi.n	bbc <cc2400_rangetest+0x200>
			break;
		USRLED_CLR;
     bb6:	2202      	movs	r2, #2
     bb8:	4b25      	ldr	r3, [pc, #148]	; (c50 <cc2400_rangetest+0x294>)
     bba:	e7dc      	b.n	b76 <cc2400_rangetest+0x1ba>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     bbc:	200e      	movs	r0, #14
     bbe:	f000 fc25 	bl	140c <cc2400_get>
     bc2:	f000 001f 	and.w	r0, r0, #31
     bc6:	280f      	cmp	r0, #15
     bc8:	d1f8      	bne.n	bbc <cc2400_rangetest+0x200>
	cc2400_strobe(SRFOFF);
     bca:	2064      	movs	r0, #100	; 0x64
     bcc:	f000 fc41 	bl	1452 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
     bd0:	f000 fc38 	bl	1444 <cc2400_status>
     bd4:	f000 0004 	and.w	r0, r0, #4
     bd8:	f000 03ff 	and.w	r3, r0, #255	; 0xff
     bdc:	2800      	cmp	r0, #0
     bde:	d1f7      	bne.n	bd0 <cc2400_rangetest+0x214>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
     be0:	4a1c      	ldr	r2, [pc, #112]	; (c54 <cc2400_rangetest+0x298>)
     be2:	2180      	movs	r1, #128	; 0x80
     be4:	6011      	str	r1, [r2, #0]
#endif
	RXLED_CLR;
     be6:	2110      	movs	r1, #16
     be8:	f842 1c20 	str.w	r1, [r2, #-32]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
     bec:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
     bf0:	4a19      	ldr	r2, [pc, #100]	; (c58 <cc2400_rangetest+0x29c>)
     bf2:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
     bf4:	7050      	strb	r0, [r2, #1]
	rr.request_num = rxbuf[19];
     bf6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
     bfa:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
     bfe:	7090      	strb	r0, [r2, #2]
	rr.reply_pa    = rxbuf[20];
     c00:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
     c04:	70d0      	strb	r0, [r2, #3]
	rr.reply_num   = rxbuf[21];
     c06:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
     c0a:	7110      	strb	r0, [r2, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
     c0c:	5cec      	ldrb	r4, [r5, r3]
     c0e:	f818 0003 	ldrb.w	r0, [r8, r3]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
     c12:	3301      	adds	r3, #1
		if (rxbuf[i] != txbuf[i])
			rr.valid = 0;
     c14:	4284      	cmp	r4, r0
     c16:	bf18      	it	ne
     c18:	2100      	movne	r1, #0
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
     c1a:	2b12      	cmp	r3, #18
     c1c:	d1f6      	bne.n	c0c <cc2400_rangetest+0x250>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 0;

	USRLED_CLR;
     c1e:	4b0c      	ldr	r3, [pc, #48]	; (c50 <cc2400_rangetest+0x294>)
     c20:	7011      	strb	r1, [r2, #0]
     c22:	2202      	movs	r2, #2
     c24:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
     c26:	4b06      	ldr	r3, [pc, #24]	; (c40 <cc2400_rangetest+0x284>)
     c28:	2200      	movs	r2, #0
     c2a:	629a      	str	r2, [r3, #40]	; 0x28
	if (requested_mode == MODE_RANGE_TEST)
     c2c:	6859      	ldr	r1, [r3, #4]
     c2e:	2905      	cmp	r1, #5
		requested_mode = MODE_IDLE;
     c30:	bf08      	it	eq
     c32:	605a      	streq	r2, [r3, #4]
     c34:	46d5      	mov	sp, sl
#endif
}
     c36:	3758      	adds	r7, #88	; 0x58
     c38:	46bd      	mov	sp, r7
     c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c3e:	bf00      	nop
     c40:	10000518 	.word	0x10000518
     c44:	00001f78 	.word	0x00001f78
     c48:	10000448 	.word	0x10000448
     c4c:	2009c038 	.word	0x2009c038
     c50:	2009c03c 	.word	0x2009c03c
     c54:	2009c05c 	.word	0x2009c05c
     c58:	1000263c 	.word	0x1000263c

00000c5c <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater()
{
     c5c:	b570      	push	{r4, r5, r6, lr}
     c5e:	b086      	sub	sp, #24
	int j;
	u8 len = 22;
	u8 pa = 0;
	u8 buf[len];

	mode = MODE_REPEATER;
     c60:	4b5c      	ldr	r3, [pc, #368]	; (dd4 <cc2400_repeater+0x178>)
     c62:	2206      	movs	r2, #6
     c64:	629a      	str	r2, [r3, #40]	; 0x28

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(MANAND,  0x7fff);
     c66:	200d      	movs	r0, #13
     c68:	f647 71ff 	movw	r1, #32767	; 0x7fff
     c6c:	f000 fbd7 	bl	141e <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
		cc2400_set(MDMTST0, 0x134b);
		cc2400_set(FSDIV,   channel - 1);
     c70:	4d59      	ldr	r5, [pc, #356]	; (dd8 <cc2400_repeater+0x17c>)
	mode = MODE_REPEATER;

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(MANAND,  0x7fff);
		cc2400_set(LMTST,   0x2b22);
     c72:	2012      	movs	r0, #18
     c74:	f642 3122 	movw	r1, #11042	; 0x2b22
     c78:	f000 fbd1 	bl	141e <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
     c7c:	2014      	movs	r0, #20
     c7e:	f241 314b 	movw	r1, #4939	; 0x134b
     c82:	f000 fbcc 	bl	141e <cc2400_set>
		cc2400_set(FSDIV,   channel - 1);
     c86:	8829      	ldrh	r1, [r5, #0]
     c88:	2002      	movs	r0, #2
     c8a:	b289      	uxth	r1, r1
     c8c:	3901      	subs	r1, #1
     c8e:	b289      	uxth	r1, r1
     c90:	f000 fbc5 	bl	141e <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
     c94:	202d      	movs	r0, #45	; 0x2d
     c96:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
     c9a:	f000 fbc0 	bl	141e <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
     c9e:	202c      	movs	r0, #44	; 0x2c
     ca0:	f241 5184 	movw	r1, #5508	; 0x1584
     ca4:	f000 fbbb 	bl	141e <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
     ca8:	2005      	movs	r0, #5
     caa:	2108      	movs	r1, #8
     cac:	f000 fbb7 	bl	141e <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     cb0:	2003      	movs	r0, #3
     cb2:	2129      	movs	r1, #41	; 0x29
     cb4:	f000 fbb3 	bl	141e <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
     cb8:	f000 fbc4 	bl	1444 <cc2400_status>
     cbc:	0641      	lsls	r1, r0, #25
     cbe:	d5fb      	bpl.n	cb8 <cc2400_repeater+0x5c>
		cc2400_strobe(SFSON);
     cc0:	2061      	movs	r0, #97	; 0x61
     cc2:	f000 fbc6 	bl	1452 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
     cc6:	f000 fbbd 	bl	1444 <cc2400_status>
     cca:	0742      	lsls	r2, r0, #29
     ccc:	d5fb      	bpl.n	cc6 <cc2400_repeater+0x6a>
		RXLED_SET;
     cce:	4b43      	ldr	r3, [pc, #268]	; (ddc <cc2400_repeater+0x180>)
     cd0:	2210      	movs	r2, #16
     cd2:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
     cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
     cd8:	605a      	str	r2, [r3, #4]
		USRLED_CLR;
     cda:	2202      	movs	r2, #2
     cdc:	605a      	str	r2, [r3, #4]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
     cde:	2280      	movs	r2, #128	; 0x80
     ce0:	621a      	str	r2, [r3, #32]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     ce2:	200e      	movs	r0, #14
     ce4:	f000 fb92 	bl	140c <cc2400_get>
     ce8:	f000 001f 	and.w	r0, r0, #31
     cec:	280f      	cmp	r0, #15
     cee:	d1f8      	bne.n	ce2 <cc2400_repeater+0x86>
			USRLED_CLR;
     cf0:	4b3b      	ldr	r3, [pc, #236]	; (de0 <cc2400_repeater+0x184>)
     cf2:	2202      	movs	r2, #2
     cf4:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
     cf6:	2062      	movs	r0, #98	; 0x62
     cf8:	f000 fbab 	bl	1452 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
     cfc:	f000 fba2 	bl	1444 <cc2400_status>
     d00:	06c3      	lsls	r3, r0, #27
     d02:	d5fb      	bpl.n	cfc <cc2400_repeater+0xa0>
			USRLED_SET;
     d04:	4b35      	ldr	r3, [pc, #212]	; (ddc <cc2400_repeater+0x180>)
     d06:	2202      	movs	r2, #2
     d08:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
     d0a:	2400      	movs	r4, #0
				buf[i] = cc2400_get8(FIFOREG);
     d0c:	2070      	movs	r0, #112	; 0x70
     d0e:	f000 fb8b 	bl	1428 <cc2400_get8>
     d12:	f80d 0004 	strb.w	r0, [sp, r4]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
     d16:	3401      	adds	r4, #1
     d18:	2c16      	cmp	r4, #22
     d1a:	d1f7      	bne.n	d0c <cc2400_repeater+0xb0>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
     d1c:	f000 fb92 	bl	1444 <cc2400_status>
     d20:	0706      	lsls	r6, r0, #28
     d22:	d5de      	bpl.n	ce2 <cc2400_repeater+0x86>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
     d24:	4b2e      	ldr	r3, [pc, #184]	; (de0 <cc2400_repeater+0x184>)
     d26:	2202      	movs	r2, #2
     d28:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
     d2a:	2210      	movs	r2, #16
     d2c:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
     d2e:	2064      	movs	r0, #100	; 0x64
     d30:	f000 fb8f 	bl	1452 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
     d34:	f000 fb86 	bl	1444 <cc2400_status>
     d38:	0744      	lsls	r4, r0, #29
     d3a:	d4fb      	bmi.n	d34 <cc2400_repeater+0xd8>
		while (!(cc2400_status() & XOSC16M_STABLE));
     d3c:	f000 fb82 	bl	1444 <cc2400_status>
     d40:	0640      	lsls	r0, r0, #25
     d42:	d5fb      	bpl.n	d3c <cc2400_repeater+0xe0>
		cc2400_set(FSDIV, channel);
     d44:	8829      	ldrh	r1, [r5, #0]
     d46:	2002      	movs	r0, #2
     d48:	b289      	uxth	r1, r1
     d4a:	f000 fb68 	bl	141e <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
     d4e:	f000 fb79 	bl	1444 <cc2400_status>
     d52:	0641      	lsls	r1, r0, #25
     d54:	d5fb      	bpl.n	d4e <cc2400_repeater+0xf2>
		cc2400_strobe(SFSON);
     d56:	2061      	movs	r0, #97	; 0x61
     d58:	f000 fb7b 	bl	1452 <cc2400_strobe>
		TXLED_SET;
     d5c:	4b1f      	ldr	r3, [pc, #124]	; (ddc <cc2400_repeater+0x180>)
     d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
     d62:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
     d64:	2315      	movs	r3, #21
     d66:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
     d6a:	2301      	movs	r3, #1
     d6c:	f88d 3001 	strb.w	r3, [sp, #1]
		for (pa = 0; pa < 8; pa++) {
     d70:	2400      	movs	r4, #0
			cc2400_set(FREND, 8 | pa);
     d72:	2005      	movs	r0, #5
     d74:	f044 0108 	orr.w	r1, r4, #8
     d78:	f000 fb51 	bl	141e <cc2400_set>
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
     d7c:	2500      	movs	r5, #0
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
     d7e:	f88d 4014 	strb.w	r4, [sp, #20]
			for (i = 0; i < 16; i++) {
				buf[21] = i;
     d82:	f88d 5015 	strb.w	r5, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     d86:	200e      	movs	r0, #14
     d88:	f000 fb40 	bl	140c <cc2400_get>
     d8c:	f000 001f 	and.w	r0, r0, #31
     d90:	280f      	cmp	r0, #15
     d92:	d1f8      	bne.n	d86 <cc2400_repeater+0x12a>
     d94:	2600      	movs	r6, #0
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
     d96:	f81d 1006 	ldrb.w	r1, [sp, r6]
     d9a:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
     d9c:	3601      	adds	r6, #1
						cc2400_set8(FIFOREG, buf[j]);
     d9e:	f000 fb4c 	bl	143a <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
     da2:	2e16      	cmp	r6, #22
     da4:	d1f7      	bne.n	d96 <cc2400_repeater+0x13a>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
     da6:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
     da8:	3501      	adds	r5, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
     daa:	f000 fb52 	bl	1452 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
     dae:	2d10      	cmp	r5, #16
     db0:	d1e7      	bne.n	d82 <cc2400_repeater+0x126>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
     db2:	3401      	adds	r4, #1
     db4:	b2e4      	uxtb	r4, r4
     db6:	2c08      	cmp	r4, #8
     db8:	d1db      	bne.n	d72 <cc2400_repeater+0x116>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
     dba:	4b09      	ldr	r3, [pc, #36]	; (de0 <cc2400_repeater+0x184>)
     dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
     dc0:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
     dc2:	2064      	movs	r0, #100	; 0x64
     dc4:	f000 fb45 	bl	1452 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
     dc8:	f000 fb3c 	bl	1444 <cc2400_status>
     dcc:	0742      	lsls	r2, r0, #29
     dce:	d4fb      	bmi.n	dc8 <cc2400_repeater+0x16c>
     dd0:	e749      	b.n	c66 <cc2400_repeater+0xa>
     dd2:	bf00      	nop
     dd4:	10000518 	.word	0x10000518
     dd8:	10000448 	.word	0x10000448
     ddc:	2009c038 	.word	0x2009c038
     de0:	2009c03c 	.word	0x2009c03c

00000de4 <bt_stream_rx>:
	}
#endif
}

void bt_stream_rx()
{
     de4:	b570      	push	{r4, r5, r6, lr}
	u8 *tmp = NULL;
	u8 epstat;
	int i;

	RXLED_SET;
     de6:	4b29      	ldr	r3, [pc, #164]	; (e8c <bt_stream_rx+0xa8>)
     de8:	2210      	movs	r2, #16
     dea:	601a      	str	r2, [r3, #0]

	queue_init();
     dec:	f7ff fc76 	bl	6dc <queue_init>
	dio_ssp_init();
     df0:	f000 fa84 	bl	12fc <dio_ssp_init>
	dma_init();
     df4:	f7ff fa7e 	bl	2f4 <dma_init>
	dio_ssp_start();
     df8:	f7ff fadc 	bl	3b4 <dio_ssp_start>
	cc2400_rx();
     dfc:	f7ff fd24 	bl	848 <cc2400_rx>

	while (rx_pkts) {
     e00:	4c23      	ldr	r4, [pc, #140]	; (e90 <bt_stream_rx+0xac>)
     e02:	6823      	ldr	r3, [r4, #0]
     e04:	2b00      	cmp	r3, #0
     e06:	d03d      	beq.n	e84 <bt_stream_rx+0xa0>
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
     e08:	4e22      	ldr	r6, [pc, #136]	; (e94 <bt_stream_rx+0xb0>)
     e0a:	4d23      	ldr	r5, [pc, #140]	; (e98 <bt_stream_rx+0xb4>)
     e0c:	6833      	ldr	r3, [r6, #0]
     e0e:	b913      	cbnz	r3, e16 <bt_stream_rx+0x32>
     e10:	682b      	ldr	r3, [r5, #0]
     e12:	2b00      	cmp	r3, #0
     e14:	d0f8      	beq.n	e08 <bt_stream_rx+0x24>
		if (rx_tc % 2) {
     e16:	6833      	ldr	r3, [r6, #0]
     e18:	07da      	lsls	r2, r3, #31
     e1a:	d504      	bpl.n	e26 <bt_stream_rx+0x42>
			/* swap buffers */
			tmp = active_rxbuf;
     e1c:	4b1f      	ldr	r3, [pc, #124]	; (e9c <bt_stream_rx+0xb8>)
     e1e:	6899      	ldr	r1, [r3, #8]
			active_rxbuf = idle_rxbuf;
     e20:	68da      	ldr	r2, [r3, #12]
			idle_rxbuf = tmp;
     e22:	60d9      	str	r1, [r3, #12]
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
		if (rx_tc % 2) {
			/* swap buffers */
			tmp = active_rxbuf;
			active_rxbuf = idle_rxbuf;
     e24:	609a      	str	r2, [r3, #8]
			idle_rxbuf = tmp;
		}
		if (rx_err)
     e26:	682b      	ldr	r3, [r5, #0]
     e28:	b11b      	cbz	r3, e32 <bt_stream_rx+0x4e>
			status |= DMA_ERROR;
     e2a:	7d23      	ldrb	r3, [r4, #20]
     e2c:	f043 0302 	orr.w	r3, r3, #2
     e30:	7523      	strb	r3, [r4, #20]
		if (rx_tc) {
     e32:	6833      	ldr	r3, [r6, #0]
     e34:	b1a3      	cbz	r3, e60 <bt_stream_rx+0x7c>
			if (rx_tc > 1)
     e36:	4b17      	ldr	r3, [pc, #92]	; (e94 <bt_stream_rx+0xb0>)
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	2b01      	cmp	r3, #1
     e3c:	d903      	bls.n	e46 <bt_stream_rx+0x62>
				status |= DMA_OVERFLOW;
     e3e:	7d23      	ldrb	r3, [r4, #20]
     e40:	f043 0301 	orr.w	r3, r3, #1
     e44:	7523      	strb	r3, [r4, #20]
			if (enqueue(idle_rxbuf))
     e46:	4b15      	ldr	r3, [pc, #84]	; (e9c <bt_stream_rx+0xb8>)
     e48:	68d8      	ldr	r0, [r3, #12]
     e4a:	f7ff fc4f 	bl	6ec <enqueue>
     e4e:	b118      	cbz	r0, e58 <bt_stream_rx+0x74>
				--rx_pkts;
     e50:	6823      	ldr	r3, [r4, #0]
     e52:	3b01      	subs	r3, #1
     e54:	6023      	str	r3, [r4, #0]
     e56:	e003      	b.n	e60 <bt_stream_rx+0x7c>
			else
				status |= FIFO_OVERFLOW;
     e58:	7d23      	ldrb	r3, [r4, #20]
     e5a:	f043 0304 	orr.w	r3, r3, #4
     e5e:	7523      	strb	r3, [r4, #20]
		}

		/* send via USB */
		epstat = USBHwEPGetStatus(BULK_IN_EP);
     e60:	2082      	movs	r0, #130	; 0x82
     e62:	f000 fd0d 	bl	1880 <USBHwEPGetStatus>
		if (!(epstat & EPSTAT_B1FULL))
     e66:	0683      	lsls	r3, r0, #26
			else
				status |= FIFO_OVERFLOW;
		}

		/* send via USB */
		epstat = USBHwEPGetStatus(BULK_IN_EP);
     e68:	4604      	mov	r4, r0
		if (!(epstat & EPSTAT_B1FULL))
     e6a:	d401      	bmi.n	e70 <bt_stream_rx+0x8c>
			dequeue();
     e6c:	f7ff fc74 	bl	758 <dequeue>
		if (!(epstat & EPSTAT_B2FULL))
     e70:	0660      	lsls	r0, r4, #25
     e72:	d401      	bmi.n	e78 <bt_stream_rx+0x94>
			dequeue();
     e74:	f7ff fc70 	bl	758 <dequeue>
		USBHwISR();
     e78:	f000 fd94 	bl	19a4 <USBHwISR>

		rx_tc = 0;
     e7c:	2300      	movs	r3, #0
     e7e:	6033      	str	r3, [r6, #0]
		rx_err = 0;
     e80:	602b      	str	r3, [r5, #0]
     e82:	e7bd      	b.n	e00 <bt_stream_rx+0x1c>
	}
	//FIXME turn off rx
	RXLED_CLR;
     e84:	4b06      	ldr	r3, [pc, #24]	; (ea0 <bt_stream_rx+0xbc>)
     e86:	2210      	movs	r2, #16
     e88:	601a      	str	r2, [r3, #0]
     e8a:	bd70      	pop	{r4, r5, r6, pc}
     e8c:	2009c038 	.word	0x2009c038
     e90:	10000518 	.word	0x10000518
     e94:	100005e0 	.word	0x100005e0
     e98:	10002674 	.word	0x10002674
     e9c:	10000448 	.word	0x10000448
     ea0:	2009c03c 	.word	0x2009c03c

00000ea4 <specan>:
}

/* spectrum analysis */
void specan()
{
     ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea6:	b08f      	sub	sp, #60	; 0x3c
	u8 epstat;
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
     ea8:	4b3e      	ldr	r3, [pc, #248]	; (fa4 <specan+0x100>)
     eaa:	2210      	movs	r2, #16
     eac:	601a      	str	r2, [r3, #0]

	queue_init();
     eae:	f7ff fc15 	bl	6dc <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
     eb2:	4b3d      	ldr	r3, [pc, #244]	; (fa8 <specan+0x104>)
     eb4:	2280      	movs	r2, #128	; 0x80
     eb6:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(MANAND,  0x7fff);
     eb8:	200d      	movs	r0, #13
     eba:	f647 71ff 	movw	r1, #32767	; 0x7fff
     ebe:	f000 faae 	bl	141e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
     ec2:	2012      	movs	r0, #18
     ec4:	f642 3122 	movw	r1, #11042	; 0x2b22
     ec8:	f000 faa9 	bl	141e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
     ecc:	2014      	movs	r0, #20
     ece:	f241 314b 	movw	r1, #4939	; 0x134b
     ed2:	f000 faa4 	bl	141e <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     ed6:	2020      	movs	r0, #32
     ed8:	f240 1101 	movw	r1, #257	; 0x101
     edc:	f000 fa9f 	bl	141e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     ee0:	2003      	movs	r0, #3
     ee2:	2129      	movs	r1, #41	; 0x29
     ee4:	f000 fa9b 	bl	141e <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
     ee8:	f000 faac 	bl	1444 <cc2400_status>
     eec:	0642      	lsls	r2, r0, #25
     eee:	d5fb      	bpl.n	ee8 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
     ef0:	f000 faa8 	bl	1444 <cc2400_status>
     ef4:	f000 0004 	and.w	r0, r0, #4
     ef8:	f000 05ff 	and.w	r5, r0, #255	; 0xff
     efc:	2800      	cmp	r0, #0
     efe:	d1f7      	bne.n	ef0 <specan+0x4c>

	while (requested_mode == MODE_SPECAN) {
     f00:	4b2a      	ldr	r3, [pc, #168]	; (fac <specan+0x108>)
     f02:	685a      	ldr	r2, [r3, #4]
     f04:	2a04      	cmp	r2, #4
     f06:	d145      	bne.n	f94 <specan+0xf0>
		for (f = low_freq; f < high_freq + 1; f++) {
     f08:	4b29      	ldr	r3, [pc, #164]	; (fb0 <specan+0x10c>)
     f0a:	885c      	ldrh	r4, [r3, #2]
     f0c:	461f      	mov	r7, r3
     f0e:	b2a4      	uxth	r4, r4
     f10:	88bb      	ldrh	r3, [r7, #4]
     f12:	b29b      	uxth	r3, r3
     f14:	42a3      	cmp	r3, r4
     f16:	dbf3      	blt.n	f00 <specan+0x5c>
     f18:	1e61      	subs	r1, r4, #1
			cc2400_set(FSDIV, f - 1);
     f1a:	2002      	movs	r0, #2
     f1c:	b289      	uxth	r1, r1
     f1e:	f000 fa7e 	bl	141e <cc2400_set>
			cc2400_strobe(SFSON);
     f22:	2061      	movs	r0, #97	; 0x61
     f24:	f000 fa95 	bl	1452 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
     f28:	f000 fa8c 	bl	1444 <cc2400_status>
     f2c:	0743      	lsls	r3, r0, #29
     f2e:	d5fb      	bpl.n	f28 <specan+0x84>
			cc2400_strobe(SRX);
     f30:	2062      	movs	r0, #98	; 0x62
     f32:	f000 fa8e 	bl	1452 <cc2400_strobe>

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
     f36:	2603      	movs	r6, #3
     f38:	ab0e      	add	r3, sp, #56	; 0x38
     f3a:	fb06 3605 	mla	r6, r6, r5, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     f3e:	2006      	movs	r0, #6
			cc2400_strobe(SFSON);
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
     f40:	0a23      	lsrs	r3, r4, #8
     f42:	f806 3c34 	strb.w	r3, [r6, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
     f46:	f806 4c33 	strb.w	r4, [r6, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     f4a:	f000 fa5f 	bl	140c <cc2400_get>
			i++;
     f4e:	3501      	adds	r5, #1
     f50:	b2ed      	uxtb	r5, r5
			cc2400_strobe(SRX);

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     f52:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
     f54:	2d10      	cmp	r5, #16
			cc2400_strobe(SRX);

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     f56:	f806 0c32 	strb.w	r0, [r6, #-50]
			i++;
			if (i == 16) {
     f5a:	d111      	bne.n	f80 <specan+0xdc>
				//FIXME ought to use different packet type
				enqueue(buf);
     f5c:	a801      	add	r0, sp, #4
     f5e:	f7ff fbc5 	bl	6ec <enqueue>
				i = 0;
				/* send via USB */
				epstat = USBHwEPGetStatus(BULK_IN_EP);
     f62:	2082      	movs	r0, #130	; 0x82
     f64:	f000 fc8c 	bl	1880 <USBHwEPGetStatus>
				if (!(epstat & EPSTAT_B1FULL))
     f68:	0686      	lsls	r6, r0, #26
			if (i == 16) {
				//FIXME ought to use different packet type
				enqueue(buf);
				i = 0;
				/* send via USB */
				epstat = USBHwEPGetStatus(BULK_IN_EP);
     f6a:	4605      	mov	r5, r0
				if (!(epstat & EPSTAT_B1FULL))
     f6c:	d401      	bmi.n	f72 <specan+0xce>
					dequeue();
     f6e:	f7ff fbf3 	bl	758 <dequeue>
				if (!(epstat & EPSTAT_B2FULL))
     f72:	0668      	lsls	r0, r5, #25
     f74:	d401      	bmi.n	f7a <specan+0xd6>
					dequeue();
     f76:	f7ff fbef 	bl	758 <dequeue>
				USBHwISR();
     f7a:	f000 fd13 	bl	19a4 <USBHwISR>
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				//FIXME ought to use different packet type
				enqueue(buf);
				i = 0;
     f7e:	2500      	movs	r5, #0
				if (!(epstat & EPSTAT_B2FULL))
					dequeue();
				USBHwISR();
			}

			cc2400_strobe(SRFOFF);
     f80:	2064      	movs	r0, #100	; 0x64
     f82:	f000 fa66 	bl	1452 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
     f86:	f000 fa5d 	bl	1444 <cc2400_status>
     f8a:	0741      	lsls	r1, r0, #29
     f8c:	d4fb      	bmi.n	f86 <specan+0xe2>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
     f8e:	3401      	adds	r4, #1
     f90:	b2a4      	uxth	r4, r4
     f92:	e7bd      	b.n	f10 <specan+0x6c>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
     f94:	2200      	movs	r2, #0
     f96:	629a      	str	r2, [r3, #40]	; 0x28
	RXLED_CLR;
     f98:	4b06      	ldr	r3, [pc, #24]	; (fb4 <specan+0x110>)
     f9a:	2210      	movs	r2, #16
     f9c:	601a      	str	r2, [r3, #0]
}
     f9e:	b00f      	add	sp, #60	; 0x3c
     fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa2:	bf00      	nop
     fa4:	2009c038 	.word	0x2009c038
     fa8:	2009c058 	.word	0x2009c058
     fac:	10000518 	.word	0x10000518
     fb0:	10000448 	.word	0x10000448
     fb4:	2009c03c 	.word	0x2009c03c

00000fb8 <find_giac>:

/* an ugly but effective way to identify a GIAC (inquiry packet) */
int find_giac(u8 *buf)
{
     fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fba:	b08f      	sub	sp, #60	; 0x3c
	int i, j;
	const uint8_t giac[8][7] = {
     fbc:	4b1b      	ldr	r3, [pc, #108]	; (102c <find_giac+0x74>)
	RXLED_CLR;
}

/* an ugly but effective way to identify a GIAC (inquiry packet) */
int find_giac(u8 *buf)
{
     fbe:	4605      	mov	r5, r0
	int i, j;
	const uint8_t giac[8][7] = {
     fc0:	466a      	mov	r2, sp
     fc2:	f103 0738 	add.w	r7, r3, #56	; 0x38
     fc6:	6818      	ldr	r0, [r3, #0]
     fc8:	6859      	ldr	r1, [r3, #4]
     fca:	4614      	mov	r4, r2
     fcc:	c403      	stmia	r4!, {r0, r1}
     fce:	3308      	adds	r3, #8
     fd0:	42bb      	cmp	r3, r7
     fd2:	4622      	mov	r2, r4
     fd4:	d1f7      	bne.n	fc6 <find_giac+0xe>
     fd6:	1e6a      	subs	r2, r5, #1
     fd8:	352b      	adds	r5, #43	; 0x2b
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
			for (j = 0; j < 8; j++)
	        	if (buf[i] == giac[j][0]
     fda:	f812 0f01 	ldrb.w	r0, [r2, #1]!
     fde:	466b      	mov	r3, sp
     fe0:	a90e      	add	r1, sp, #56	; 0x38
     fe2:	781c      	ldrb	r4, [r3, #0]
     fe4:	4284      	cmp	r4, r0
     fe6:	d117      	bne.n	1018 <find_giac+0x60>
						&& buf[i + 1] == giac[j][1]
     fe8:	7857      	ldrb	r7, [r2, #1]
     fea:	785c      	ldrb	r4, [r3, #1]
     fec:	42a7      	cmp	r7, r4
     fee:	d113      	bne.n	1018 <find_giac+0x60>
						&& buf[i + 2] == giac[j][2]
     ff0:	7897      	ldrb	r7, [r2, #2]
     ff2:	789c      	ldrb	r4, [r3, #2]
     ff4:	42a7      	cmp	r7, r4
     ff6:	d10f      	bne.n	1018 <find_giac+0x60>
						&& buf[i + 3] == giac[j][3]
     ff8:	78d7      	ldrb	r7, [r2, #3]
     ffa:	78dc      	ldrb	r4, [r3, #3]
     ffc:	42a7      	cmp	r7, r4
     ffe:	d10b      	bne.n	1018 <find_giac+0x60>
						&& buf[i + 4] == giac[j][4]
    1000:	7917      	ldrb	r7, [r2, #4]
    1002:	791c      	ldrb	r4, [r3, #4]
    1004:	42a7      	cmp	r7, r4
    1006:	d107      	bne.n	1018 <find_giac+0x60>
						&& buf[i + 5] == giac[j][5]
    1008:	7957      	ldrb	r7, [r2, #5]
    100a:	795c      	ldrb	r4, [r3, #5]
    100c:	42a7      	cmp	r7, r4
    100e:	d103      	bne.n	1018 <find_giac+0x60>
						&& buf[i + 6] == giac[j][6])
    1010:	7997      	ldrb	r7, [r2, #6]
    1012:	799c      	ldrb	r4, [r3, #6]
    1014:	42a7      	cmp	r7, r4
    1016:	d006      	beq.n	1026 <find_giac+0x6e>
    1018:	3307      	adds	r3, #7
			{0xeb, 0x8b, 0x19, 0x8e, 0x66, 0x8b, 0xce},
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
			for (j = 0; j < 8; j++)
    101a:	428b      	cmp	r3, r1
    101c:	d1e1      	bne.n	fe2 <find_giac+0x2a>
			{0x75, 0xc5, 0x8c, 0xc7, 0x33, 0x45, 0xe7},
			{0xeb, 0x8b, 0x19, 0x8e, 0x66, 0x8b, 0xce},
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
    101e:	42aa      	cmp	r2, r5
    1020:	d1db      	bne.n	fda <find_giac+0x22>
						&& buf[i + 4] == giac[j][4]
						&& buf[i + 5] == giac[j][5]
						&& buf[i + 6] == giac[j][6])
					return 1;

	return 0;
    1022:	2000      	movs	r0, #0
    1024:	e000      	b.n	1028 <find_giac+0x70>
						&& buf[i + 2] == giac[j][2]
						&& buf[i + 3] == giac[j][3]
						&& buf[i + 4] == giac[j][4]
						&& buf[i + 5] == giac[j][5]
						&& buf[i + 6] == giac[j][6])
					return 1;
    1026:	2001      	movs	r0, #1

	return 0;
}
    1028:	b00f      	add	sp, #60	; 0x3c
    102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    102c:	00001f35 	.word	0x00001f35

00001030 <bt_test_rx>:

void bt_test_rx()
{
    1030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 *tmp = NULL;
	int i;
	int countdown = 0;
	int num_giacs = 0;

	dio_ssp_init();
    1032:	f000 f963 	bl	12fc <dio_ssp_init>
	dma_init();
    1036:	f7ff f95d 	bl	2f4 <dma_init>
	dio_ssp_start();
    103a:	f7ff f9bb 	bl	3b4 <dio_ssp_start>
	cc2400_rx();
    103e:	f7ff fc03 	bl	848 <cc2400_rx>
void bt_test_rx()
{
	u8 *tmp = NULL;
	int i;
	int countdown = 0;
	int num_giacs = 0;
    1042:	2400      	movs	r4, #0

void bt_test_rx()
{
	u8 *tmp = NULL;
	int i;
	int countdown = 0;
    1044:	4625      	mov	r5, r4
	dio_ssp_start();
	cc2400_rx();

	while (num_giacs < 20) {
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
    1046:	4e1b      	ldr	r6, [pc, #108]	; (10b4 <bt_test_rx+0x84>)
    1048:	4f1b      	ldr	r7, [pc, #108]	; (10b8 <bt_test_rx+0x88>)
    104a:	6833      	ldr	r3, [r6, #0]
    104c:	b913      	cbnz	r3, 1054 <bt_test_rx+0x24>
    104e:	683b      	ldr	r3, [r7, #0]
    1050:	2b00      	cmp	r3, #0
    1052:	d0f8      	beq.n	1046 <bt_test_rx+0x16>
		if (rx_tc % 2) {
    1054:	6833      	ldr	r3, [r6, #0]
    1056:	07d9      	lsls	r1, r3, #31
    1058:	d504      	bpl.n	1064 <bt_test_rx+0x34>
			/* swap buffers */
			tmp = active_rxbuf;
    105a:	4b18      	ldr	r3, [pc, #96]	; (10bc <bt_test_rx+0x8c>)
    105c:	6899      	ldr	r1, [r3, #8]
			active_rxbuf = idle_rxbuf;
    105e:	68da      	ldr	r2, [r3, #12]
			idle_rxbuf = tmp;
    1060:	60d9      	str	r1, [r3, #12]
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
		if (rx_tc % 2) {
			/* swap buffers */
			tmp = active_rxbuf;
			active_rxbuf = idle_rxbuf;
    1062:	609a      	str	r2, [r3, #8]
			idle_rxbuf = tmp;
		}
		if (rx_err)
    1064:	683b      	ldr	r3, [r7, #0]
    1066:	b113      	cbz	r3, 106e <bt_test_rx+0x3e>
			RXLED_CLR;
    1068:	4b15      	ldr	r3, [pc, #84]	; (10c0 <bt_test_rx+0x90>)
    106a:	2210      	movs	r2, #16
    106c:	601a      	str	r2, [r3, #0]
		if (rx_tc) {
    106e:	6833      	ldr	r3, [r6, #0]
    1070:	b1cb      	cbz	r3, 10a6 <bt_test_rx+0x76>
			if (rx_tc > 1)
    1072:	4b10      	ldr	r3, [pc, #64]	; (10b4 <bt_test_rx+0x84>)
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	2b01      	cmp	r3, #1
    1078:	d903      	bls.n	1082 <bt_test_rx+0x52>
				TXLED_CLR;
    107a:	4b11      	ldr	r3, [pc, #68]	; (10c0 <bt_test_rx+0x90>)
    107c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1080:	601a      	str	r2, [r3, #0]
			if (find_giac(idle_rxbuf)) {
    1082:	4b0e      	ldr	r3, [pc, #56]	; (10bc <bt_test_rx+0x8c>)
    1084:	68d8      	ldr	r0, [r3, #12]
    1086:	f7ff ff97 	bl	fb8 <find_giac>
    108a:	b128      	cbz	r0, 1098 <bt_test_rx+0x68>
				USRLED_SET;
    108c:	4b0d      	ldr	r3, [pc, #52]	; (10c4 <bt_test_rx+0x94>)
    108e:	2202      	movs	r2, #2
    1090:	601a      	str	r2, [r3, #0]
				countdown = 100;
				num_giacs++;
    1092:	3401      	adds	r4, #1
		if (rx_tc) {
			if (rx_tc > 1)
				TXLED_CLR;
			if (find_giac(idle_rxbuf)) {
				USRLED_SET;
				countdown = 100;
    1094:	2564      	movs	r5, #100	; 0x64
    1096:	e006      	b.n	10a6 <bt_test_rx+0x76>
				num_giacs++;
			} else {
				if (countdown == 0) {
    1098:	b925      	cbnz	r5, 10a4 <bt_test_rx+0x74>
					/* win if more than 32 GIACs seen during this countdown */
					//if (num_giacs > 32)
						//break;
					USRLED_CLR;
    109a:	4b09      	ldr	r3, [pc, #36]	; (10c0 <bt_test_rx+0x90>)
    109c:	2202      	movs	r2, #2
    109e:	601a      	str	r2, [r3, #0]
					num_giacs = 0;
    10a0:	462c      	mov	r4, r5
    10a2:	e000      	b.n	10a6 <bt_test_rx+0x76>
				} else {
					--countdown;
    10a4:	3d01      	subs	r5, #1
				}
			}
		}

		rx_tc = 0;
    10a6:	2300      	movs	r3, #0
	dio_ssp_init();
	dma_init();
	dio_ssp_start();
	cc2400_rx();

	while (num_giacs < 20) {
    10a8:	2c13      	cmp	r4, #19
					--countdown;
				}
			}
		}

		rx_tc = 0;
    10aa:	6033      	str	r3, [r6, #0]
		rx_err = 0;
    10ac:	603b      	str	r3, [r7, #0]
	dio_ssp_init();
	dma_init();
	dio_ssp_start();
	cc2400_rx();

	while (num_giacs < 20) {
    10ae:	ddca      	ble.n	1046 <bt_test_rx+0x16>

		rx_tc = 0;
		rx_err = 0;
	}
	//FIXME turn off rx
}
    10b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10b2:	bf00      	nop
    10b4:	100005e0 	.word	0x100005e0
    10b8:	10002674 	.word	0x10002674
    10bc:	10000448 	.word	0x10000448
    10c0:	2009c03c 	.word	0x2009c03c
    10c4:	2009c038 	.word	0x2009c038

000010c8 <main>:
	u32 i = 400 * ms;
	while (--i);
}

int main()
{
    10c8:	b570      	push	{r4, r5, r6, lr}

	gpio_init();

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    10ca:	4c3d      	ldr	r4, [pc, #244]	; (11c0 <main+0xf8>)
		RXLED_SET;
		USRLED_SET;
		waitms(200);
		TXLED_CLR;
    10cc:	4e3d      	ldr	r6, [pc, #244]	; (11c4 <main+0xfc>)

int main()
{
	int i;

	gpio_init();
    10ce:	f000 f8fb 	bl	12c8 <gpio_init>

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    10d2:	f44f 7580 	mov.w	r5, #256	; 0x100
		RXLED_SET;
    10d6:	2210      	movs	r2, #16
		USRLED_SET;
    10d8:	2302      	movs	r3, #2

	gpio_init();

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    10da:	6025      	str	r5, [r4, #0]
		RXLED_SET;
    10dc:	6022      	str	r2, [r4, #0]
		USRLED_SET;
    10de:	6023      	str	r3, [r4, #0]
		waitms(200);
		TXLED_CLR;
    10e0:	6035      	str	r5, [r6, #0]
		RXLED_CLR;
    10e2:	6032      	str	r2, [r6, #0]
		USRLED_CLR;
    10e4:	6033      	str	r3, [r6, #0]

	gpio_init();

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    10e6:	6025      	str	r5, [r4, #0]
		RXLED_SET;
    10e8:	6022      	str	r2, [r4, #0]
		USRLED_SET;
    10ea:	6023      	str	r3, [r4, #0]
		waitms(200);
		TXLED_CLR;
    10ec:	6035      	str	r5, [r6, #0]
		RXLED_CLR;
    10ee:	6032      	str	r2, [r6, #0]
		USRLED_CLR;
    10f0:	6033      	str	r3, [r6, #0]
		waitms(200);
	}

	/* cc2400_test */
	cc2400_init();
    10f2:	f000 f96f 	bl	13d4 <cc2400_init>
	TXLED_SET;
    10f6:	6025      	str	r5, [r4, #0]
	waitms(200);
	TXLED_CLR;
    10f8:	6035      	str	r5, [r6, #0]
	waitms(200);
	cc2400_reset();
    10fa:	f000 f9b1 	bl	1460 <cc2400_reset>
	TXLED_SET;
    10fe:	6025      	str	r5, [r4, #0]
	waitms(200);
	TXLED_CLR;
	waitms(200);
	if (cc2400_get(AGCCTRL) != 0xf700)
    1100:	2004      	movs	r0, #4
	TXLED_CLR;
	waitms(200);
	cc2400_reset();
	TXLED_SET;
	waitms(200);
	TXLED_CLR;
    1102:	6035      	str	r5, [r6, #0]
	waitms(200);
	if (cc2400_get(AGCCTRL) != 0xf700)
    1104:	f000 f982 	bl	140c <cc2400_get>
    1108:	f5b0 4f77 	cmp.w	r0, #63232	; 0xf700
    110c:	d000      	beq.n	1110 <main+0x48>
    110e:	e7fe      	b.n	110e <main+0x46>
		while(1);
	TXLED_SET;
    1110:	6025      	str	r5, [r4, #0]
	waitms(200);

	/* clock_test */
	clock_start();
    1112:	f000 f9bb 	bl	148c <clock_start>
    1116:	2404      	movs	r4, #4
	for (i = 0; i < 4; i++) {
		RXLED_SET;
    1118:	4d29      	ldr	r5, [pc, #164]	; (11c0 <main+0xf8>)
    111a:	2610      	movs	r6, #16
		wait(2);
    111c:	2002      	movs	r0, #2
	waitms(200);

	/* clock_test */
	clock_start();
	for (i = 0; i < 4; i++) {
		RXLED_SET;
    111e:	602e      	str	r6, [r5, #0]
		wait(2);
    1120:	f000 f8a2 	bl	1268 <wait>
		RXLED_CLR;
    1124:	4b27      	ldr	r3, [pc, #156]	; (11c4 <main+0xfc>)
		wait(2);
    1126:	2002      	movs	r0, #2
	/* clock_test */
	clock_start();
	for (i = 0; i < 4; i++) {
		RXLED_SET;
		wait(2);
		RXLED_CLR;
    1128:	601e      	str	r6, [r3, #0]
		wait(2);
    112a:	f000 f89d 	bl	1268 <wait>
	TXLED_SET;
	waitms(200);

	/* clock_test */
	clock_start();
	for (i = 0; i < 4; i++) {
    112e:	3c01      	subs	r4, #1
    1130:	d1f2      	bne.n	1118 <main+0x50>
	 * and in timer mode.  The TIMER0 peripheral clock should have been set to
	 * cclk/2 (50 MHz) by clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    1132:	4b25      	ldr	r3, [pc, #148]	; (11c8 <main+0x100>)
	clkn_high = 0;
    1134:	4a25      	ldr	r2, [pc, #148]	; (11cc <main+0x104>)
		RXLED_SET;
		wait(2);
		RXLED_CLR;
		wait(2);
	}
	RXLED_SET;
    1136:	602e      	str	r6, [r5, #0]
	 * and in timer mode.  The TIMER0 peripheral clock should have been set to
	 * cclk/2 (50 MHz) by clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    1138:	2602      	movs	r6, #2
    113a:	601e      	str	r6, [r3, #0]
	clkn_high = 0;
    113c:	7014      	strb	r4, [r2, #0]
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods makes one
	 * CLK100NS period (100ns).  CLK100NS resets every 2^15 * 10^5 (3276800000)
	 * steps, roughly 5.5 minutes.
	 */
	T0PR = 4;
    113e:	4a24      	ldr	r2, [pc, #144]	; (11d0 <main+0x108>)
    1140:	2104      	movs	r1, #4
    1142:	6011      	str	r1, [r2, #0]
	T0MR0 = 3276799999;
    1144:	4923      	ldr	r1, [pc, #140]	; (11d4 <main+0x10c>)
    1146:	60d1      	str	r1, [r2, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    1148:	2103      	movs	r1, #3
    114a:	6091      	str	r1, [r2, #8]
	ISER0 |= ISER0_ISE_TIMER0;
    114c:	4a22      	ldr	r2, [pc, #136]	; (11d8 <main+0x110>)
    114e:	6811      	ldr	r1, [r2, #0]
    1150:	4331      	orrs	r1, r6
    1152:	6011      	str	r1, [r2, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    1154:	2201      	movs	r2, #1
    1156:	601a      	str	r2, [r3, #0]
		wait(2);
	}
	RXLED_SET;

	clkn_init();
	bt_test_rx();
    1158:	f7ff ff6a 	bl	1030 <bt_test_rx>
	USRLED_SET;
    115c:	602e      	str	r6, [r5, #0]

	/*
	 * Now we function like bluetooth_rxtx so that the USB interface can be
	 * tested.
	 */
	ubertooth_usb_init();
    115e:	f7ff fb1d 	bl	79c <ubertooth_usb_init>

	while (1) {
		USBHwISR();
    1162:	f000 fc1f 	bl	19a4 <USBHwISR>
		if (rx_pkts)
    1166:	4b1d      	ldr	r3, [pc, #116]	; (11dc <main+0x114>)
    1168:	681a      	ldr	r2, [r3, #0]
    116a:	b112      	cbz	r2, 1172 <main+0xaa>
			bt_stream_rx();
    116c:	f7ff fe3a 	bl	de4 <bt_stream_rx>
    1170:	e7f7      	b.n	1162 <main+0x9a>
		else if (requested_mode == MODE_TX_TEST && mode != MODE_TX_TEST)
    1172:	685a      	ldr	r2, [r3, #4]
    1174:	2a03      	cmp	r2, #3
    1176:	d105      	bne.n	1184 <main+0xbc>
    1178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    117a:	2a03      	cmp	r2, #3
    117c:	d002      	beq.n	1184 <main+0xbc>
			cc2400_txtest();
    117e:	f7ff fbc5 	bl	90c <cc2400_txtest>
    1182:	e7ee      	b.n	1162 <main+0x9a>
		else if (requested_mode == MODE_RANGE_TEST && mode != MODE_RANGE_TEST)
    1184:	685a      	ldr	r2, [r3, #4]
    1186:	2a05      	cmp	r2, #5
    1188:	d106      	bne.n	1198 <main+0xd0>
    118a:	4a14      	ldr	r2, [pc, #80]	; (11dc <main+0x114>)
    118c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    118e:	2a05      	cmp	r2, #5
    1190:	d002      	beq.n	1198 <main+0xd0>
			cc2400_rangetest();
    1192:	f7ff fc13 	bl	9bc <cc2400_rangetest>
    1196:	e7e4      	b.n	1162 <main+0x9a>
		else if (requested_mode == MODE_REPEATER && mode != MODE_REPEATER)
    1198:	685a      	ldr	r2, [r3, #4]
    119a:	2a06      	cmp	r2, #6
    119c:	d105      	bne.n	11aa <main+0xe2>
    119e:	4a0f      	ldr	r2, [pc, #60]	; (11dc <main+0x114>)
    11a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    11a2:	2a06      	cmp	r2, #6
    11a4:	d001      	beq.n	11aa <main+0xe2>
			cc2400_repeater();
    11a6:	f7ff fd59 	bl	c5c <cc2400_repeater>
		else if (requested_mode == MODE_SPECAN && mode != MODE_SPECAN)
    11aa:	685b      	ldr	r3, [r3, #4]
    11ac:	2b04      	cmp	r3, #4
    11ae:	d1d8      	bne.n	1162 <main+0x9a>
    11b0:	4b0a      	ldr	r3, [pc, #40]	; (11dc <main+0x114>)
    11b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11b4:	2b04      	cmp	r3, #4
    11b6:	d0d4      	beq.n	1162 <main+0x9a>
			specan();
    11b8:	f7ff fe74 	bl	ea4 <specan>
    11bc:	e7d1      	b.n	1162 <main+0x9a>
    11be:	bf00      	nop
    11c0:	2009c038 	.word	0x2009c038
    11c4:	2009c03c 	.word	0x2009c03c
    11c8:	40004004 	.word	0x40004004
    11cc:	100005f4 	.word	0x100005f4
    11d0:	4000400c 	.word	0x4000400c
    11d4:	c34fffff 	.word	0xc34fffff
    11d8:	e000e100 	.word	0xe000e100
    11dc:	10000518 	.word	0x10000518

000011e0 <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    11e0:	f000 bbe0 	b.w	19a4 <USBHwISR>

000011e4 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    11e4:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    11e6:	2300      	movs	r3, #0
    11e8:	4a0c      	ldr	r2, [pc, #48]	; (121c <Reset_Handler+0x38>)
    11ea:	490d      	ldr	r1, [pc, #52]	; (1220 <Reset_Handler+0x3c>)
    11ec:	1898      	adds	r0, r3, r2
    11ee:	4288      	cmp	r0, r1
    11f0:	d204      	bcs.n	11fc <Reset_Handler+0x18>
	{
		*dest++ = *src++;
    11f2:	490c      	ldr	r1, [pc, #48]	; (1224 <Reset_Handler+0x40>)
    11f4:	5859      	ldr	r1, [r3, r1]
    11f6:	5099      	str	r1, [r3, r2]
    11f8:	3304      	adds	r3, #4
    11fa:	e7f5      	b.n	11e8 <Reset_Handler+0x4>
{
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    11fc:	4b0a      	ldr	r3, [pc, #40]	; (1228 <Reset_Handler+0x44>)
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    11fe:	4a0b      	ldr	r2, [pc, #44]	; (122c <Reset_Handler+0x48>)
    1200:	4293      	cmp	r3, r2
    1202:	d203      	bcs.n	120c <Reset_Handler+0x28>
	{
		*src++ = 0;
    1204:	2200      	movs	r2, #0
    1206:	f843 2b04 	str.w	r2, [r3], #4
    120a:	e7f8      	b.n	11fe <Reset_Handler+0x1a>
	}

	__libc_init_array();
    120c:	f7fe ffe2 	bl	1d4 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <Reset_Handler+0x4c>)
    1212:	4a08      	ldr	r2, [pc, #32]	; (1234 <Reset_Handler+0x50>)
    1214:	601a      	str	r2, [r3, #0]

	main();
    1216:	f7ff ff57 	bl	10c8 <main>
    121a:	e7fe      	b.n	121a <Reset_Handler+0x36>
    121c:	10000020 	.word	0x10000020
    1220:	100004fc 	.word	0x100004fc
    1224:	00001fc8 	.word	0x00001fc8
    1228:	100004fc 	.word	0x100004fc
    122c:	10002678 	.word	0x10002678
    1230:	e000ed08 	.word	0xe000ed08
    1234:	00000000 	.word	0x00000000

00001238 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    1238:	e7fe      	b.n	1238 <ADC_IRQHandler>
    123a:	0000      	movs	r0, r0

0000123c <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    123c:	0883      	lsrs	r3, r0, #2
    123e:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    1242:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    1246:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    124a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    124e:	4a05      	ldr	r2, [pc, #20]	; (1264 <wait_us+0x28>)
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    1250:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    1254:	6050      	str	r0, [r2, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    1256:	6853      	ldr	r3, [r2, #4]
    1258:	3b01      	subs	r3, #1
    125a:	6053      	str	r3, [r2, #4]
    125c:	2b00      	cmp	r3, #0
    125e:	d1fa      	bne.n	1256 <wait_us+0x1a>
}
    1260:	4770      	bx	lr
    1262:	bf00      	nop
    1264:	10000544 	.word	0x10000544

00001268 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    1268:	4b01      	ldr	r3, [pc, #4]	; (1270 <wait+0x8>)
    126a:	4358      	muls	r0, r3
    126c:	f7ff bfe6 	b.w	123c <wait_us>
    1270:	000f4240 	.word	0x000f4240

00001274 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    1274:	4a10      	ldr	r2, [pc, #64]	; (12b8 <all_pins_off+0x44>)
    1276:	2300      	movs	r3, #0
    1278:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    127a:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    127c:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    127e:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    1280:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    1282:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    1284:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    1286:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    1288:	4a0c      	ldr	r2, [pc, #48]	; (12bc <all_pins_off+0x48>)
    128a:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    128c:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    128e:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    1290:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    1292:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    1296:	4a0a      	ldr	r2, [pc, #40]	; (12c0 <all_pins_off+0x4c>)
    1298:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    129a:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    129c:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    129e:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    12a0:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    12a2:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    12a4:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    12a6:	4a07      	ldr	r2, [pc, #28]	; (12c4 <all_pins_off+0x50>)
    12a8:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    12aa:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    12ac:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    12ae:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    12b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    12b4:	4770      	bx	lr
    12b6:	bf00      	nop
    12b8:	4002c000 	.word	0x4002c000
    12bc:	2009c000 	.word	0x2009c000
    12c0:	4002c040 	.word	0x4002c040
    12c4:	2009c014 	.word	0x2009c014

000012c8 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    12c8:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    12ca:	f7ff ffd3 	bl	1274 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    12ce:	4a0a      	ldr	r2, [pc, #40]	; (12f8 <gpio_init+0x30>)
    12d0:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    12d2:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    12d6:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    12d8:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    12da:	f240 11b1 	movw	r1, #433	; 0x1b1
    12de:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    12e0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    12e4:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    12e6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    12ea:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    12ec:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    12ee:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    12f0:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    12f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    12f6:	bd08      	pop	{r3, pc}
    12f8:	2009c000 	.word	0x2009c000

000012fc <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    12fc:	4b11      	ldr	r3, [pc, #68]	; (1344 <dio_ssp_init+0x48>)
    12fe:	681a      	ldr	r2, [r3, #0]
    1300:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    1304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1308:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    130a:	681a      	ldr	r2, [r3, #0]
    130c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    1310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    1314:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    1316:	681a      	ldr	r2, [r3, #0]
    1318:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    131c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    1320:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    1322:	681a      	ldr	r2, [r3, #0]
    1324:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    1328:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    132c:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    132e:	4b06      	ldr	r3, [pc, #24]	; (1348 <dio_ssp_init+0x4c>)
    1330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1334:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    1336:	4b05      	ldr	r3, [pc, #20]	; (134c <dio_ssp_init+0x50>)
    1338:	22c7      	movs	r2, #199	; 0xc7
    133a:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    133c:	220c      	movs	r2, #12
    133e:	605a      	str	r2, [r3, #4]
    1340:	4770      	bx	lr
    1342:	bf00      	nop
    1344:	4002c000 	.word	0x4002c000
    1348:	2009c098 	.word	0x2009c098
    134c:	40030000 	.word	0x40030000

00001350 <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    1350:	4b09      	ldr	r3, [pc, #36]	; (1378 <atest_init+0x28>)
    1352:	681a      	ldr	r2, [r3, #0]
    1354:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
    1358:	601a      	str	r2, [r3, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    135a:	4b08      	ldr	r3, [pc, #32]	; (137c <atest_init+0x2c>)
    135c:	681a      	ldr	r2, [r3, #0]
    135e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
    1362:	601a      	str	r2, [r3, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    1364:	4b06      	ldr	r3, [pc, #24]	; (1380 <atest_init+0x30>)
    1366:	681a      	ldr	r2, [r3, #0]
    1368:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    136c:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    136e:	681a      	ldr	r2, [r3, #0]
    1370:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    1374:	601a      	str	r2, [r3, #0]
    1376:	4770      	bx	lr
    1378:	4002c004 	.word	0x4002c004
    137c:	2009c000 	.word	0x2009c000
    1380:	4002c044 	.word	0x4002c044

00001384 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    1384:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    1386:	2401      	movs	r4, #1
    1388:	1e43      	subs	r3, r0, #1
    138a:	409c      	lsls	r4, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    138c:	2220      	movs	r2, #32

	while (len--) {
    138e:	3801      	subs	r0, #1

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    1390:	4b0d      	ldr	r3, [pc, #52]	; (13c8 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    1392:	b2c0      	uxtb	r0, r0
    1394:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    1396:	601a      	str	r2, [r3, #0]
    1398:	4b0c      	ldr	r3, [pc, #48]	; (13cc <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    139a:	d011      	beq.n	13c0 <cc2400_spi+0x3c>
		if (data & msb)
    139c:	4221      	tst	r1, r4
			MOSI_SET;
		else
			MOSI_CLR;
    139e:	bf08      	it	eq
    13a0:	4d09      	ldreq	r5, [pc, #36]	; (13c8 <cc2400_spi+0x44>)
    13a2:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
		if (data & msb)
			MOSI_SET;
    13a6:	bf14      	ite	ne
    13a8:	601a      	strne	r2, [r3, #0]
		else
			MOSI_CLR;
    13aa:	602a      	streq	r2, [r5, #0]
		data <<= 1;

		SCLK_SET;
    13ac:	2210      	movs	r2, #16
    13ae:	601a      	str	r2, [r3, #0]
		if (MISO)
    13b0:	4b07      	ldr	r3, [pc, #28]	; (13d0 <cc2400_spi+0x4c>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    13b2:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	079b      	lsls	r3, r3, #30
			data |= 1;
    13b8:	bf48      	it	mi
    13ba:	f041 0101 	orrmi.w	r1, r1, #1
    13be:	e7e6      	b.n	138e <cc2400_spi+0xa>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    13c0:	2220      	movs	r2, #32
    13c2:	601a      	str	r2, [r3, #0]

	return data;
}
    13c4:	4608      	mov	r0, r1
    13c6:	bd30      	pop	{r4, r5, pc}
    13c8:	2009c05c 	.word	0x2009c05c
    13cc:	2009c058 	.word	0x2009c058
    13d0:	2009c054 	.word	0x2009c054

000013d4 <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    13d4:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    13d6:	4c0a      	ldr	r4, [pc, #40]	; (1400 <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    13d8:	f7ff ffba 	bl	1350 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    13dc:	f44f 7300 	mov.w	r3, #512	; 0x200
    13e0:	6023      	str	r3, [r4, #0]
	wait_us(50);
    13e2:	2032      	movs	r0, #50	; 0x32
    13e4:	f7ff ff2a 	bl	123c <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    13e8:	4b06      	ldr	r3, [pc, #24]	; (1404 <cc2400_init+0x30>)
    13ea:	2220      	movs	r2, #32
    13ec:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    13ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    13f2:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    13f4:	2018      	movs	r0, #24
    13f6:	4904      	ldr	r1, [pc, #16]	; (1408 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    13f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    13fc:	f7ff bfc2 	b.w	1384 <cc2400_spi>
    1400:	2009c038 	.word	0x2009c038
    1404:	2009c058 	.word	0x2009c058
    1408:	000d7fff 	.word	0x000d7fff

0000140c <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    140c:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    140e:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    1412:	0409      	lsls	r1, r1, #16
    1414:	2018      	movs	r0, #24
    1416:	f7ff ffb5 	bl	1384 <cc2400_spi>
	return in & 0xFFFF;
}
    141a:	b280      	uxth	r0, r0
    141c:	bd08      	pop	{r3, pc}

0000141e <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    141e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    1422:	2018      	movs	r0, #24
    1424:	f7ff bfae 	b.w	1384 <cc2400_spi>

00001428 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    1428:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    142a:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    142e:	0209      	lsls	r1, r1, #8
    1430:	2010      	movs	r0, #16
    1432:	f7ff ffa7 	bl	1384 <cc2400_spi>
	return in & 0xFF;
}
    1436:	b2c0      	uxtb	r0, r0
    1438:	bd08      	pop	{r3, pc}

0000143a <cc2400_set8>:
}

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    143a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    143e:	2010      	movs	r0, #16
    1440:	f7ff bfa0 	b.w	1384 <cc2400_spi>

00001444 <cc2400_status>:
	CSN_SET;
}

/* get the status */
u8 cc2400_status()
{
    1444:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    1446:	2100      	movs	r1, #0
    1448:	2008      	movs	r0, #8
    144a:	f7ff ff9b 	bl	1384 <cc2400_spi>
}
    144e:	b2c0      	uxtb	r0, r0
    1450:	bd08      	pop	{r3, pc}

00001452 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    1452:	b508      	push	{r3, lr}
    1454:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    1456:	2008      	movs	r0, #8
    1458:	f7ff ff94 	bl	1384 <cc2400_spi>
}
    145c:	b2c0      	uxtb	r0, r0
    145e:	bd08      	pop	{r3, pc}

00001460 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    1460:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    1462:	2018      	movs	r0, #24
    1464:	2100      	movs	r1, #0
    1466:	f7ff ff8d 	bl	1384 <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    146a:	2000      	movs	r0, #0
    146c:	f7ff ffce 	bl	140c <cc2400_get>
    1470:	2800      	cmp	r0, #0
    1472:	d1fa      	bne.n	146a <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    1474:	2018      	movs	r0, #24
    1476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    147a:	f7ff ff83 	bl	1384 <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    147e:	2000      	movs	r0, #0
    1480:	f7ff ffc4 	bl	140c <cc2400_get>
    1484:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    1488:	d1f9      	bne.n	147e <cc2400_reset+0x1e>
}
    148a:	bd08      	pop	{r3, pc}

0000148c <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    148c:	b510      	push	{r4, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    148e:	4b46      	ldr	r3, [pc, #280]	; (15a8 <clock_start+0x11c>)
    1490:	f244 023a 	movw	r2, #16442	; 0x403a
    1494:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    1496:	2200      	movs	r2, #0
    1498:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    149c:	3380      	adds	r3, #128	; 0x80
    149e:	681a      	ldr	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    14a0:	21aa      	movs	r1, #170	; 0xaa

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    14a2:	f022 0202 	bic.w	r2, r2, #2
    14a6:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    14a8:	4a40      	ldr	r2, [pc, #256]	; (15ac <clock_start+0x120>)
    14aa:	6011      	str	r1, [r2, #0]
    14ac:	2155      	movs	r1, #85	; 0x55
    14ae:	6011      	str	r1, [r2, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    14b0:	4a3f      	ldr	r2, [pc, #252]	; (15b0 <clock_start+0x124>)
    14b2:	6812      	ldr	r2, [r2, #0]
    14b4:	0190      	lsls	r0, r2, #6
    14b6:	d4fb      	bmi.n	14b0 <clock_start+0x24>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    14b8:	681a      	ldr	r2, [r3, #0]
    14ba:	f022 0201 	bic.w	r2, r2, #1
    14be:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    14c0:	4b3a      	ldr	r3, [pc, #232]	; (15ac <clock_start+0x120>)
    14c2:	22aa      	movs	r2, #170	; 0xaa
    14c4:	601a      	str	r2, [r3, #0]
    14c6:	2255      	movs	r2, #85	; 0x55
    14c8:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    14ca:	4b39      	ldr	r3, [pc, #228]	; (15b0 <clock_start+0x124>)
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    14d2:	d1fa      	bne.n	14ca <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    14d4:	4a37      	ldr	r2, [pc, #220]	; (15b4 <clock_start+0x128>)
    14d6:	6013      	str	r3, [r2, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    14d8:	f7ff ffc2 	bl	1460 <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    14dc:	2018      	movs	r0, #24
    14de:	4936      	ldr	r1, [pc, #216]	; (15b8 <clock_start+0x12c>)
    14e0:	f7ff ff50 	bl	1384 <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    14e4:	2060      	movs	r0, #96	; 0x60
    14e6:	f7ff ffb4 	bl	1452 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    14ea:	f7ff ffab 	bl	1444 <cc2400_status>
    14ee:	0641      	lsls	r1, r0, #25
    14f0:	d5fb      	bpl.n	14ea <clock_start+0x5e>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    14f2:	4b32      	ldr	r3, [pc, #200]	; (15bc <clock_start+0x130>)
    14f4:	2220      	movs	r2, #32
    14f6:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    14f8:	681a      	ldr	r2, [r3, #0]
    14fa:	0652      	lsls	r2, r2, #25
    14fc:	d5fc      	bpl.n	14f8 <clock_start+0x6c>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    14fe:	4b30      	ldr	r3, [pc, #192]	; (15c0 <clock_start+0x134>)
    1500:	2208      	movs	r2, #8
    1502:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    1504:	2200      	movs	r2, #0
    1506:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    1508:	2201      	movs	r2, #1
    150a:	f843 2c9c 	str.w	r2, [r3, #-156]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    150e:	4a2d      	ldr	r2, [pc, #180]	; (15c4 <clock_start+0x138>)
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
#endif
	PCLKSEL1  = 0;

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    1510:	3b9c      	subs	r3, #156	; 0x9c

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    1512:	f843 2c88 	str.w	r2, [r3, #-136]
	PLL0FEED_SEQUENCE;
    1516:	21aa      	movs	r1, #170	; 0xaa
    1518:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    151a:	482b      	ldr	r0, [pc, #172]	; (15c8 <clock_start+0x13c>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    151c:	f843 1c80 	str.w	r1, [r3, #-128]
    1520:	f843 2c80 	str.w	r2, [r3, #-128]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    1524:	6804      	ldr	r4, [r0, #0]
    1526:	f044 0401 	orr.w	r4, r4, #1
    152a:	6004      	str	r4, [r0, #0]
	PLL0FEED_SEQUENCE;
    152c:	f843 1c80 	str.w	r1, [r3, #-128]
    1530:	f843 2c80 	str.w	r2, [r3, #-128]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    1534:	4b1e      	ldr	r3, [pc, #120]	; (15b0 <clock_start+0x124>)
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	01db      	lsls	r3, r3, #7
    153a:	d5fb      	bpl.n	1534 <clock_start+0xa8>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    153c:	4b1d      	ldr	r3, [pc, #116]	; (15b4 <clock_start+0x128>)
    153e:	2203      	movs	r2, #3
    1540:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    1542:	f853 2c84 	ldr.w	r2, [r3, #-132]
    1546:	f042 0202 	orr.w	r2, r2, #2
    154a:	f843 2c84 	str.w	r2, [r3, #-132]
	PLL0FEED_SEQUENCE;
    154e:	22aa      	movs	r2, #170	; 0xaa
    1550:	f843 2c78 	str.w	r2, [r3, #-120]
    1554:	2255      	movs	r2, #85	; 0x55
    1556:	f843 2c78 	str.w	r2, [r3, #-120]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    155a:	4b15      	ldr	r3, [pc, #84]	; (15b0 <clock_start+0x124>)
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	019c      	lsls	r4, r3, #6
    1560:	d5fb      	bpl.n	155a <clock_start+0xce>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    1562:	4b1a      	ldr	r3, [pc, #104]	; (15cc <clock_start+0x140>)
    1564:	2222      	movs	r2, #34	; 0x22
    1566:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    1568:	21aa      	movs	r1, #170	; 0xaa
    156a:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    156c:	4818      	ldr	r0, [pc, #96]	; (15d0 <clock_start+0x144>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    156e:	6099      	str	r1, [r3, #8]
    1570:	609a      	str	r2, [r3, #8]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    1572:	6804      	ldr	r4, [r0, #0]
    1574:	f044 0401 	orr.w	r4, r4, #1
    1578:	6004      	str	r4, [r0, #0]
	PLL1FEED_SEQUENCE;
    157a:	6099      	str	r1, [r3, #8]
    157c:	609a      	str	r2, [r3, #8]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    157e:	4b15      	ldr	r3, [pc, #84]	; (15d4 <clock_start+0x148>)
    1580:	681a      	ldr	r2, [r3, #0]
    1582:	05d0      	lsls	r0, r2, #23
    1584:	d5fb      	bpl.n	157e <clock_start+0xf2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    1586:	681a      	ldr	r2, [r3, #0]
    1588:	0551      	lsls	r1, r2, #21
    158a:	d5fc      	bpl.n	1586 <clock_start+0xfa>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    158c:	4b10      	ldr	r3, [pc, #64]	; (15d0 <clock_start+0x144>)
    158e:	681a      	ldr	r2, [r3, #0]
    1590:	f042 0202 	orr.w	r2, r2, #2
    1594:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    1596:	22aa      	movs	r2, #170	; 0xaa
    1598:	60da      	str	r2, [r3, #12]
    159a:	2255      	movs	r2, #85	; 0x55
    159c:	60da      	str	r2, [r3, #12]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    159e:	4b0d      	ldr	r3, [pc, #52]	; (15d4 <clock_start+0x148>)
    15a0:	681b      	ldr	r3, [r3, #0]
    15a2:	059a      	lsls	r2, r3, #22
    15a4:	d5fb      	bpl.n	159e <clock_start+0x112>
}
    15a6:	bd10      	pop	{r4, pc}
    15a8:	400fc000 	.word	0x400fc000
    15ac:	400fc08c 	.word	0x400fc08c
    15b0:	400fc088 	.word	0x400fc088
    15b4:	400fc104 	.word	0x400fc104
    15b8:	00081570 	.word	0x00081570
    15bc:	400fc1a0 	.word	0x400fc1a0
    15c0:	400fc1a8 	.word	0x400fc1a8
    15c4:	00010018 	.word	0x00010018
    15c8:	400fc080 	.word	0x400fc080
    15cc:	400fc0a4 	.word	0x400fc0a4
    15d0:	400fc0a0 	.word	0x400fc0a0
    15d4:	400fc0a8 	.word	0x400fc0a8

000015d8 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    15d8:	b508      	push	{r3, lr}
	all_pins_off();
    15da:	f7ff fe4b 	bl	1274 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    15de:	4b09      	ldr	r3, [pc, #36]	; (1604 <reset+0x2c>)
    15e0:	2202      	movs	r2, #2
    15e2:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    15e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15e8:	681a      	ldr	r2, [r3, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    15ea:	4807      	ldr	r0, [pc, #28]	; (1608 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    15ec:	f042 0203 	orr.w	r2, r2, #3
    15f0:	601a      	str	r2, [r3, #0]
	WDFEED_SEQUENCE;
    15f2:	22aa      	movs	r2, #170	; 0xaa
    15f4:	609a      	str	r2, [r3, #8]
    15f6:	2255      	movs	r2, #85	; 0x55
    15f8:	609a      	str	r2, [r3, #8]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    15fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    15fe:	f7ff be1d 	b.w	123c <wait_us>
    1602:	bf00      	nop
    1604:	2009c03c 	.word	0x2009c03c
    1608:	000f4240 	.word	0x000f4240

0000160c <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    160c:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    1610:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    1612:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    1614:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    1616:	2d40      	cmp	r5, #64	; 0x40
    1618:	bfa8      	it	ge
    161a:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    161c:	462a      	mov	r2, r5
    161e:	f000 f955 	bl	18cc <USBHwEPWrite>
	pbData += iChunk;
    1622:	6863      	ldr	r3, [r4, #4]
    1624:	442b      	add	r3, r5
    1626:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    1628:	6823      	ldr	r3, [r4, #0]
    162a:	1b5d      	subs	r5, r3, r5
    162c:	6025      	str	r5, [r4, #0]
    162e:	bd38      	pop	{r3, r4, r5, pc}
    1630:	1000054c 	.word	0x1000054c

00001634 <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    1634:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    1636:	4b11      	ldr	r3, [pc, #68]	; (167c <_HandleRequest.constprop.1+0x48>)
    1638:	7a1c      	ldrb	r4, [r3, #8]
    163a:	461d      	mov	r5, r3
    163c:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    1640:	2c02      	cmp	r4, #2
    1642:	d10d      	bne.n	1660 <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    1644:	2200      	movs	r2, #0
    1646:	a902      	add	r1, sp, #8
    1648:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    164c:	f103 0008 	add.w	r0, r3, #8
    1650:	f103 0210 	add.w	r2, r3, #16
    1654:	3304      	adds	r3, #4
    1656:	f000 fa63 	bl	1b20 <USBFilterOsVendorMessage>
    165a:	b108      	cbz	r0, 1660 <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    165c:	9801      	ldr	r0, [sp, #4]
    165e:	e00a      	b.n	1676 <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    1660:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    1664:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    1666:	b12b      	cbz	r3, 1674 <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    1668:	4805      	ldr	r0, [pc, #20]	; (1680 <_HandleRequest.constprop.1+0x4c>)
    166a:	f100 0108 	add.w	r1, r0, #8
    166e:	1f02      	subs	r2, r0, #4
    1670:	4798      	blx	r3
    1672:	e000      	b.n	1676 <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    1674:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    1676:	b003      	add	sp, #12
    1678:	bd30      	pop	{r4, r5, pc}
    167a:	bf00      	nop
    167c:	1000054c 	.word	0x1000054c
    1680:	10000554 	.word	0x10000554

00001684 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    1684:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    1686:	2800      	cmp	r0, #0
    1688:	d14a      	bne.n	1720 <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    168a:	f001 0304 	and.w	r3, r1, #4
    168e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    1692:	4c25      	ldr	r4, [pc, #148]	; (1728 <USBHandleControlTransfer+0xa4>)
    1694:	b30b      	cbz	r3, 16da <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    1696:	2208      	movs	r2, #8
    1698:	f104 0108 	add.w	r1, r4, #8
    169c:	f000 f946 	bl	192c <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    16a0:	7a22      	ldrb	r2, [r4, #8]
    16a2:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    16a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    16aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    16ac:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    16ae:	89e3      	ldrh	r3, [r4, #14]
    16b0:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    16b2:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    16b4:	b10b      	cbz	r3, 16ba <USBHandleControlTransfer+0x36>
    16b6:	09d2      	lsrs	r2, r2, #7
    16b8:	d034      	beq.n	1724 <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    16ba:	f7ff ffbb 	bl	1634 <_HandleRequest.constprop.1>
    16be:	b928      	cbnz	r0, 16cc <USBHandleControlTransfer+0x48>
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    16c0:	2080      	movs	r0, #128	; 0x80
    16c2:	2101      	movs	r1, #1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    16c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    16c8:	f000 b8f4 	b.w	18b4 <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    16cc:	89e2      	ldrh	r2, [r4, #14]
    16ce:	6923      	ldr	r3, [r4, #16]
    16d0:	429a      	cmp	r2, r3
    16d2:	bfd4      	ite	le
    16d4:	6022      	strle	r2, [r4, #0]
    16d6:	6023      	strgt	r3, [r4, #0]
    16d8:	e019      	b.n	170e <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    16da:	6822      	ldr	r2, [r4, #0]
    16dc:	2a00      	cmp	r2, #0
    16de:	dd1a      	ble.n	1716 <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    16e0:	6861      	ldr	r1, [r4, #4]
    16e2:	f000 f923 	bl	192c <USBHwEPRead>
				if (iChunk < 0) {
    16e6:	2800      	cmp	r0, #0
    16e8:	dbea      	blt.n	16c0 <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    16ea:	6863      	ldr	r3, [r4, #4]
    16ec:	4403      	add	r3, r0
    16ee:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    16f0:	6823      	ldr	r3, [r4, #0]
    16f2:	1a18      	subs	r0, r3, r0
    16f4:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    16f6:	b9a8      	cbnz	r0, 1724 <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    16f8:	7a23      	ldrb	r3, [r4, #8]
    16fa:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    16fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1704:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    1706:	f7ff ff95 	bl	1634 <_HandleRequest.constprop.1>
    170a:	2800      	cmp	r0, #0
    170c:	d0d8      	beq.n	16c0 <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    170e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    1712:	f7ff bf7b 	b.w	160c <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    1716:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    1718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    171c:	f000 b906 	b.w	192c <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    1720:	2880      	cmp	r0, #128	; 0x80
    1722:	d0f4      	beq.n	170e <USBHandleControlTransfer+0x8a>
    1724:	bd10      	pop	{r4, pc}
    1726:	bf00      	nop
    1728:	1000054c 	.word	0x1000054c

0000172c <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    172c:	4b02      	ldr	r3, [pc, #8]	; (1738 <USBRegisterRequestHandler+0xc>)
    172e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1732:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    1734:	6242      	str	r2, [r0, #36]	; 0x24
    1736:	4770      	bx	lr
    1738:	1000054c 	.word	0x1000054c

0000173c <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    173c:	4770      	bx	lr
    173e:	0000      	movs	r0, r0

00001740 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    1740:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    1742:	4c0e      	ldr	r4, [pc, #56]	; (177c <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    1744:	f000 f994 	bl	1a70 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    1748:	480d      	ldr	r0, [pc, #52]	; (1780 <USBInit+0x40>)
    174a:	f000 f87d 	bl	1848 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    174e:	4621      	mov	r1, r4
    1750:	2000      	movs	r0, #0
    1752:	f000 f85f 	bl	1814 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    1756:	4621      	mov	r1, r4
    1758:	2080      	movs	r0, #128	; 0x80
    175a:	f000 f85b 	bl	1814 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    175e:	2000      	movs	r0, #0
    1760:	2140      	movs	r1, #64	; 0x40
    1762:	f000 f83b 	bl	17dc <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    1766:	2080      	movs	r0, #128	; 0x80
    1768:	2140      	movs	r1, #64	; 0x40
    176a:	f000 f837 	bl	17dc <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    176e:	2000      	movs	r0, #0
    1770:	4904      	ldr	r1, [pc, #16]	; (1784 <USBInit+0x44>)
    1772:	4a05      	ldr	r2, [pc, #20]	; (1788 <USBInit+0x48>)
    1774:	f7ff ffda 	bl	172c <USBRegisterRequestHandler>

	return TRUE;
}
    1778:	2001      	movs	r0, #1
    177a:	bd10      	pop	{r4, pc}
    177c:	00001685 	.word	0x00001685
    1780:	0000173d 	.word	0x0000173d
    1784:	00001bed 	.word	0x00001bed
    1788:	10000580 	.word	0x10000580

0000178c <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    178c:	4b03      	ldr	r3, [pc, #12]	; (179c <Wait4DevInt+0x10>)
    178e:	681b      	ldr	r3, [r3, #0]
    1790:	4003      	ands	r3, r0
    1792:	4283      	cmp	r3, r0
    1794:	d1fa      	bne.n	178c <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    1796:	4b02      	ldr	r3, [pc, #8]	; (17a0 <Wait4DevInt+0x14>)
    1798:	6018      	str	r0, [r3, #0]
    179a:	4770      	bx	lr
    179c:	5000c200 	.word	0x5000c200
    17a0:	5000c208 	.word	0x5000c208

000017a4 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    17a4:	4b04      	ldr	r3, [pc, #16]	; (17b8 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    17a6:	0400      	lsls	r0, r0, #16
    17a8:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    17ac:	2230      	movs	r2, #48	; 0x30
    17ae:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    17b0:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    17b2:	2010      	movs	r0, #16
    17b4:	f7ff bfea 	b.w	178c <Wait4DevInt>
    17b8:	5000c208 	.word	0x5000c208

000017bc <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    17bc:	b510      	push	{r4, lr}
    17be:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    17c0:	0424      	lsls	r4, r4, #16
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    // write command code
    USBHwCmd(bCmd);
    17c2:	f7ff ffef 	bl	17a4 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    17c6:	4b04      	ldr	r3, [pc, #16]	; (17d8 <USBHwCmdWrite+0x1c>)
    17c8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    17cc:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    17ce:	2010      	movs	r0, #16
}
    17d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    17d4:	f7ff bfda 	b.w	178c <Wait4DevInt>
    17d8:	5000c210 	.word	0x5000c210

000017dc <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    17dc:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    17de:	f000 040f 	and.w	r4, r0, #15
    17e2:	09c0      	lsrs	r0, r0, #7
    17e4:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    17e8:	2201      	movs	r2, #1
    17ea:	40a2      	lsls	r2, r4
    17ec:	4b08      	ldr	r3, [pc, #32]	; (1810 <USBHwEPConfig+0x34>)
    17ee:	6818      	ldr	r0, [r3, #0]
    17f0:	4302      	orrs	r2, r0
    17f2:	601a      	str	r2, [r3, #0]
    USBEpIn = idx;
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    17f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    17f8:	605c      	str	r4, [r3, #4]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    17fa:	6099      	str	r1, [r3, #8]
    Wait4DevInt(EP_RLZED);
    17fc:	f7ff ffc6 	bl	178c <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    1800:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    1804:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    1806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    180a:	f7ff bfd7 	b.w	17bc <USBHwCmdWrite>
    180e:	bf00      	nop
    1810:	5000c244 	.word	0x5000c244

00001814 <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    1814:	4a0a      	ldr	r2, [pc, #40]	; (1840 <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    1816:	f000 030f 	and.w	r3, r0, #15
    181a:	09c0      	lsrs	r0, r0, #7

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    181c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    1820:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    1824:	2101      	movs	r1, #1
    1826:	fa01 f000 	lsl.w	r0, r1, r0
    182a:	4b06      	ldr	r3, [pc, #24]	; (1844 <USBHwRegisterEPIntHandler+0x30>)
    182c:	681a      	ldr	r2, [r3, #0]
    182e:	4310      	orrs	r0, r2
    1830:	6018      	str	r0, [r3, #0]
    USBDevIntEn |= EP_SLOW;
    1832:	f853 2c30 	ldr.w	r2, [r3, #-48]
    1836:	f042 0204 	orr.w	r2, r2, #4
    183a:	f843 2c30 	str.w	r2, [r3, #-48]
    183e:	4770      	bx	lr
    1840:	10000588 	.word	0x10000588
    1844:	5000c234 	.word	0x5000c234

00001848 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    1848:	4b03      	ldr	r3, [pc, #12]	; (1858 <USBHwRegisterDevIntHandler+0x10>)
    184a:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    184c:	4b03      	ldr	r3, [pc, #12]	; (185c <USBHwRegisterDevIntHandler+0x14>)
    184e:	681a      	ldr	r2, [r3, #0]
    1850:	f042 0208 	orr.w	r2, r2, #8
    1854:	601a      	str	r2, [r3, #0]
    1856:	4770      	bx	lr
    1858:	10000588 	.word	0x10000588
    185c:	5000c204 	.word	0x5000c204

00001860 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    1860:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    1864:	20d0      	movs	r0, #208	; 0xd0
    1866:	f7ff bfa9 	b.w	17bc <USBHwCmdWrite>

0000186a <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    186a:	1c01      	adds	r1, r0, #0
    186c:	bf18      	it	ne
    186e:	2101      	movne	r1, #1
    1870:	20fe      	movs	r0, #254	; 0xfe
    1872:	f7ff bfa3 	b.w	17bc <USBHwCmdWrite>

00001876 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    1876:	4601      	mov	r1, r0
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    1878:	20f3      	movs	r0, #243	; 0xf3
    187a:	f7ff bf9f 	b.w	17bc <USBHwCmdWrite>
    187e:	0000      	movs	r0, r0

00001880 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    1880:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    1882:	f000 040f 	and.w	r4, r0, #15
    1886:	09c0      	lsrs	r0, r0, #7
    1888:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    188c:	4620      	mov	r0, r4
    188e:	f7ff ff89 	bl	17a4 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    1892:	0424      	lsls	r4, r4, #16
    1894:	4b05      	ldr	r3, [pc, #20]	; (18ac <USBHwEPGetStatus+0x2c>)
    1896:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    189a:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    189c:	2020      	movs	r0, #32
    189e:	f7ff ff75 	bl	178c <Wait4DevInt>
    return USBCmdData;
    18a2:	4b03      	ldr	r3, [pc, #12]	; (18b0 <USBHwEPGetStatus+0x30>)
    18a4:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    18a6:	b2c0      	uxtb	r0, r0
    18a8:	bd10      	pop	{r4, pc}
    18aa:	bf00      	nop
    18ac:	5000c210 	.word	0x5000c210
    18b0:	5000c214 	.word	0x5000c214

000018b4 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    18b4:	f000 030f 	and.w	r3, r0, #15
    18b8:	09c0      	lsrs	r0, r0, #7
    18ba:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    18be:	3100      	adds	r1, #0
    18c0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    18c4:	bf18      	it	ne
    18c6:	2101      	movne	r1, #1
    18c8:	f7ff bf78 	b.w	17bc <USBHwCmdWrite>

000018cc <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    18cc:	b510      	push	{r4, lr}
    U32 idx;
    
    idx = EP2IDX(bEP);
    18ce:	f000 030f 	and.w	r3, r0, #15
    18d2:	09c0      	lsrs	r0, r0, #7
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    18d4:	4614      	mov	r4, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    18d6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    18da:	4a11      	ldr	r2, [pc, #68]	; (1920 <USBHwEPWrite+0x54>)
    18dc:	009b      	lsls	r3, r3, #2
    18de:	f043 0302 	orr.w	r3, r3, #2
    18e2:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    18e4:	4b0f      	ldr	r3, [pc, #60]	; (1924 <USBHwEPWrite+0x58>)
    18e6:	601c      	str	r4, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    18e8:	4b0d      	ldr	r3, [pc, #52]	; (1920 <USBHwEPWrite+0x54>)
    18ea:	681a      	ldr	r2, [r3, #0]
    18ec:	f012 0202 	ands.w	r2, r2, #2
    18f0:	d00e      	beq.n	1910 <USBHwEPWrite+0x44>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    18f2:	788a      	ldrb	r2, [r1, #2]
    18f4:	78cb      	ldrb	r3, [r1, #3]
    18f6:	0412      	lsls	r2, r2, #16
    18f8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    18fc:	780b      	ldrb	r3, [r1, #0]
        pbBuf += 4;
    18fe:	3104      	adds	r1, #4
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    1900:	431a      	orrs	r2, r3
    1902:	f811 3c03 	ldrb.w	r3, [r1, #-3]
    1906:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    190a:	4b07      	ldr	r3, [pc, #28]	; (1928 <USBHwEPWrite+0x5c>)
    190c:	601a      	str	r2, [r3, #0]
    190e:	e7eb      	b.n	18e8 <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    1910:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    1912:	f7ff ff47 	bl	17a4 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    1916:	20fa      	movs	r0, #250	; 0xfa
    1918:	f7ff ff44 	bl	17a4 <USBHwCmd>
    
    return iLen;
}
    191c:	4620      	mov	r0, r4
    191e:	bd10      	pop	{r4, pc}
    1920:	5000c228 	.word	0x5000c228
    1924:	5000c224 	.word	0x5000c224
    1928:	5000c21c 	.word	0x5000c21c

0000192c <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    192c:	b538      	push	{r3, r4, r5, lr}
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    192e:	f000 030f 	and.w	r3, r0, #15
    1932:	09c0      	lsrs	r0, r0, #7
    1934:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    1938:	4c14      	ldr	r4, [pc, #80]	; (198c <USBHwEPRead+0x60>)
    193a:	009b      	lsls	r3, r3, #2
    193c:	f043 0301 	orr.w	r3, r3, #1
    1940:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    1942:	4b13      	ldr	r3, [pc, #76]	; (1990 <USBHwEPRead+0x64>)
    1944:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    1946:	051d      	lsls	r5, r3, #20
    1948:	d5fb      	bpl.n	1942 <USBHwEPRead+0x16>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    194a:	055c      	lsls	r4, r3, #21
    194c:	d51b      	bpl.n	1986 <USBHwEPRead+0x5a>
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    194e:	f3c3 0509 	ubfx	r5, r3, #0, #10
    
    // get data
    dwData = 0;
    1952:	2300      	movs	r3, #0
    for (i = 0; i < dwLen; i++) {
    1954:	461c      	mov	r4, r3
    1956:	42ac      	cmp	r4, r5
    1958:	d00b      	beq.n	1972 <USBHwEPRead+0x46>
        if ((i % 4) == 0) {
    195a:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    195e:	bf04      	itt	eq
    1960:	4b0c      	ldreq	r3, [pc, #48]	; (1994 <USBHwEPRead+0x68>)
    1962:	681b      	ldreq	r3, [r3, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    1964:	b111      	cbz	r1, 196c <USBHwEPRead+0x40>
    1966:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    1968:	bf38      	it	cc
    196a:	550b      	strbcc	r3, [r1, r4]
        }
        dwData >>= 8;
    196c:	0a1b      	lsrs	r3, r3, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    196e:	3401      	adds	r4, #1
    1970:	e7f1      	b.n	1956 <USBHwEPRead+0x2a>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    1972:	4b06      	ldr	r3, [pc, #24]	; (198c <USBHwEPRead+0x60>)
    1974:	2200      	movs	r2, #0
    1976:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    1978:	f7ff ff14 	bl	17a4 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    197c:	20f2      	movs	r0, #242	; 0xf2
    197e:	f7ff ff11 	bl	17a4 <USBHwCmd>
    
    return dwLen;
    1982:	4620      	mov	r0, r4
    1984:	bd38      	pop	{r3, r4, r5, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    1986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    198a:	bd38      	pop	{r3, r4, r5, pc}
    198c:	5000c228 	.word	0x5000c228
    1990:	5000c220 	.word	0x5000c220
    1994:	5000c218 	.word	0x5000c218

00001998 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    1998:	1c01      	adds	r1, r0, #0
    199a:	bf18      	it	ne
    199c:	2101      	movne	r1, #1
    199e:	20d8      	movs	r0, #216	; 0xd8
    19a0:	f7ff bf0c 	b.w	17bc <USBHwCmdWrite>

000019a4 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    19a4:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    19a6:	4b29      	ldr	r3, [pc, #164]	; (1a4c <USBHwISR+0xa8>)
    19a8:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    19aa:	07e1      	lsls	r1, r4, #31
    19ac:	d511      	bpl.n	19d2 <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    19ae:	2201      	movs	r2, #1
    19b0:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    19b2:	4b27      	ldr	r3, [pc, #156]	; (1a50 <USBHwISR+0xac>)
    19b4:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    19b6:	b165      	cbz	r5, 19d2 <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    19b8:	20f5      	movs	r0, #245	; 0xf5
    19ba:	f7ff fef3 	bl	17a4 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    19be:	4b25      	ldr	r3, [pc, #148]	; (1a54 <USBHwISR+0xb0>)
    19c0:	4a25      	ldr	r2, [pc, #148]	; (1a58 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    19c2:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    19c4:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    19c6:	f7ff fee1 	bl	178c <Wait4DevInt>
    return USBCmdData;
    19ca:	4b24      	ldr	r3, [pc, #144]	; (1a5c <USBHwISR+0xb8>)
    19cc:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    19ce:	b2c0      	uxtb	r0, r0
    19d0:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    19d2:	0722      	lsls	r2, r4, #28
    19d4:	d517      	bpl.n	1a06 <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    19d6:	4b22      	ldr	r3, [pc, #136]	; (1a60 <USBHwISR+0xbc>)
    19d8:	2208      	movs	r2, #8
    19da:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    19dc:	20fe      	movs	r0, #254	; 0xfe
    19de:	f7ff fee1 	bl	17a4 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    19e2:	4b1c      	ldr	r3, [pc, #112]	; (1a54 <USBHwISR+0xb0>)
    19e4:	4a1f      	ldr	r2, [pc, #124]	; (1a64 <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    19e6:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    19e8:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    19ea:	f7ff fecf 	bl	178c <Wait4DevInt>
    return USBCmdData;
    19ee:	4b1b      	ldr	r3, [pc, #108]	; (1a5c <USBHwISR+0xb8>)
    19f0:	6818      	ldr	r0, [r3, #0]
    19f2:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    19f4:	f010 0f1a 	tst.w	r0, #26
    19f8:	d005      	beq.n	1a06 <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    19fa:	4b15      	ldr	r3, [pc, #84]	; (1a50 <USBHwISR+0xac>)
    19fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    19fe:	b113      	cbz	r3, 1a06 <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    1a00:	f000 0015 	and.w	r0, r0, #21
    1a04:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    1a06:	0763      	lsls	r3, r4, #29
    1a08:	d51e      	bpl.n	1a48 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    1a0a:	4b15      	ldr	r3, [pc, #84]	; (1a60 <USBHwISR+0xbc>)
    1a0c:	2204      	movs	r2, #4
    1a0e:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    1a10:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
    1a12:	2301      	movs	r3, #1
    1a14:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    1a16:	4a14      	ldr	r2, [pc, #80]	; (1a68 <USBHwISR+0xc4>)
    1a18:	6812      	ldr	r2, [r2, #0]
    1a1a:	4213      	tst	r3, r2
    1a1c:	d011      	beq.n	1a42 <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    1a1e:	4a13      	ldr	r2, [pc, #76]	; (1a6c <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    1a20:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    1a22:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    1a24:	f7ff feb2 	bl	178c <Wait4DevInt>
                bEPStat = USBCmdData;
    1a28:	4b0c      	ldr	r3, [pc, #48]	; (1a5c <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    1a2a:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    1a2c:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    1a2e:	4b08      	ldr	r3, [pc, #32]	; (1a50 <USBHwISR+0xac>)
    1a30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1a34:	b12b      	cbz	r3, 1a42 <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    1a36:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    1a3a:	b2c0      	uxtb	r0, r0
    1a3c:	f001 011f 	and.w	r1, r1, #31
    1a40:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    1a42:	3401      	adds	r4, #1
    1a44:	2c20      	cmp	r4, #32
    1a46:	d1e4      	bne.n	1a12 <USBHwISR+0x6e>
    1a48:	bd38      	pop	{r3, r4, r5, pc}
    1a4a:	bf00      	nop
    1a4c:	5000c200 	.word	0x5000c200
    1a50:	10000588 	.word	0x10000588
    1a54:	5000c210 	.word	0x5000c210
    1a58:	00f50200 	.word	0x00f50200
    1a5c:	5000c214 	.word	0x5000c214
    1a60:	5000c208 	.word	0x5000c208
    1a64:	00fe0200 	.word	0x00fe0200
    1a68:	5000c230 	.word	0x5000c230
    1a6c:	5000c238 	.word	0x5000c238

00001a70 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    1a70:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    1a72:	4b24      	ldr	r3, [pc, #144]	; (1b04 <USBHwInit+0x94>)
    1a74:	681a      	ldr	r2, [r3, #0]
    1a76:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    1a7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    1a7e:	601a      	str	r2, [r3, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    1a80:	f853 2c04 	ldr.w	r2, [r3, #-4]
    1a84:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    1a88:	f042 0210 	orr.w	r2, r2, #16
    1a8c:	f843 2c04 	str.w	r2, [r3, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    1a90:	f853 2c04 	ldr.w	r2, [r3, #-4]
    1a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    1a98:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    1a9c:	f843 2c04 	str.w	r2, [r3, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    1aa0:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    1aa4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
    1aa8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    1aac:	f843 2c0c 	str.w	r2, [r3, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    1ab0:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    1ab4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    1ab8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1abc:	f843 2c0c 	str.w	r2, [r3, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    1ac0:	4b11      	ldr	r3, [pc, #68]	; (1b08 <USBHwInit+0x98>)
    1ac2:	681a      	ldr	r2, [r3, #0]
    1ac4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1ac8:	601a      	str	r2, [r3, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    1aca:	4b10      	ldr	r3, [pc, #64]	; (1b0c <USBHwInit+0x9c>)
    1acc:	681a      	ldr	r2, [r3, #0]
    1ace:	f042 0212 	orr.w	r2, r2, #18
    1ad2:	601a      	str	r2, [r3, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    1ad4:	4b0e      	ldr	r3, [pc, #56]	; (1b10 <USBHwInit+0xa0>)
    1ad6:	681a      	ldr	r2, [r3, #0]
    1ad8:	0792      	lsls	r2, r2, #30
    1ada:	d5fb      	bpl.n	1ad4 <USBHwInit+0x64>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    1adc:	681a      	ldr	r2, [r3, #0]
    1ade:	06d0      	lsls	r0, r2, #27
    1ae0:	d5fc      	bpl.n	1adc <USBHwInit+0x6c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    1ae2:	4b0c      	ldr	r3, [pc, #48]	; (1b14 <USBHwInit+0xa4>)
    1ae4:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    1ae6:	4a0c      	ldr	r2, [pc, #48]	; (1b18 <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    1ae8:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    1aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1aee:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    1af0:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    1af2:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    1af4:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    1af6:	4b09      	ldr	r3, [pc, #36]	; (1b1c <USBHwInit+0xac>)
    1af8:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    1afa:	f7ff febc 	bl	1876 <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    1afe:	2001      	movs	r0, #1
    1b00:	bd08      	pop	{r3, pc}
    1b02:	bf00      	nop
    1b04:	4002c010 	.word	0x4002c010
    1b08:	400fc0c4 	.word	0x400fc0c4
    1b0c:	5000cff4 	.word	0x5000cff4
    1b10:	5000cff8 	.word	0x5000cff8
    1b14:	5000c204 	.word	0x5000c204
    1b18:	5000c208 	.word	0x5000c208
    1b1c:	5000c240 	.word	0x5000c240

00001b20 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    1b20:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    1b22:	4c16      	ldr	r4, [pc, #88]	; (1b7c <USBFilterOsVendorMessage+0x5c>)
    1b24:	2500      	movs	r5, #0
    1b26:	7824      	ldrb	r4, [r4, #0]
    1b28:	b314      	cbz	r4, 1b70 <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    1b2a:	7846      	ldrb	r6, [r0, #1]
    1b2c:	42a6      	cmp	r6, r4
    1b2e:	d121      	bne.n	1b74 <USBFilterOsVendorMessage+0x54>
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    1b30:	8884      	ldrh	r4, [r0, #4]
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    1b32:	600d      	str	r5, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    1b34:	2c04      	cmp	r4, #4
	
	if(pSetup->bRequest == bMsVendorIndex) {
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
	
		int iRequestLength = pSetup->wLength;
    1b36:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    1b38:	8845      	ldrh	r5, [r0, #2]
	
		switch (pSetup->wIndex) {
    1b3a:	d005      	beq.n	1b48 <USBFilterOsVendorMessage+0x28>
    1b3c:	2c05      	cmp	r4, #5
    1b3e:	d11b      	bne.n	1b78 <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    1b40:	480f      	ldr	r0, [pc, #60]	; (1b80 <USBFilterOsVendorMessage+0x60>)
    1b42:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    1b44:	2092      	movs	r0, #146	; 0x92
    1b46:	e002      	b.n	1b4e <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    1b48:	480e      	ldr	r0, [pc, #56]	; (1b84 <USBFilterOsVendorMessage+0x64>)
    1b4a:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    1b4c:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    1b4e:	6010      	str	r0, [r2, #0]
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
    1b50:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    1b52:	0a28      	lsrs	r0, r5, #8
    1b54:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    1b56:	4284      	cmp	r4, r0
    1b58:	db0e      	blt.n	1b78 <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    1b5a:	681d      	ldr	r5, [r3, #0]
    1b5c:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    1b5e:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    1b60:	601d      	str	r5, [r3, #0]
    1b62:	42b0      	cmp	r0, r6
    1b64:	bfd4      	ite	le
    1b66:	6010      	strle	r0, [r2, #0]
    1b68:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    1b6a:	2001      	movs	r0, #1
    1b6c:	6008      	str	r0, [r1, #0]
		return TRUE;
    1b6e:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    1b70:	4620      	mov	r0, r4
    1b72:	bd70      	pop	{r4, r5, r6, pc}
    1b74:	4628      	mov	r0, r5
    1b76:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    1b78:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    1b7a:	bd70      	pop	{r4, r5, r6, pc}
    1b7c:	100005d0 	.word	0x100005d0
    1b80:	10000458 	.word	0x10000458
    1b84:	00001f7c 	.word	0x00001f7c

00001b88 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    1b88:	4b01      	ldr	r3, [pc, #4]	; (1b90 <USBRegisterDescriptors+0x8>)
    1b8a:	6058      	str	r0, [r3, #4]
    1b8c:	4770      	bx	lr
    1b8e:	bf00      	nop
    1b90:	100005d0 	.word	0x100005d0

00001b94 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    1b94:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    1b96:	0a05      	lsrs	r5, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    1b98:	2d03      	cmp	r5, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    1b9a:	b2c6      	uxtb	r6, r0
    1b9c:	4911      	ldr	r1, [pc, #68]	; (1be4 <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    1b9e:	d108      	bne.n	1bb2 <USBGetDescriptor+0x1e>
    1ba0:	2eee      	cmp	r6, #238	; 0xee
    1ba2:	d106      	bne.n	1bb2 <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    1ba4:	4810      	ldr	r0, [pc, #64]	; (1be8 <USBGetDescriptor+0x54>)
    1ba6:	7809      	ldrb	r1, [r1, #0]
	
	*ppbData = abOsStringDescriptor;
    1ba8:	3092      	adds	r0, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    1baa:	7401      	strb	r1, [r0, #16]
	
	*ppbData = abOsStringDescriptor;
    1bac:	6018      	str	r0, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    1bae:	2312      	movs	r3, #18
    1bb0:	e012      	b.n	1bd8 <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    1bb2:	6849      	ldr	r1, [r1, #4]
	iCurIndex = 0;
    1bb4:	2400      	movs	r4, #0
	
	while (pab[DESC_bLength] != 0) {
    1bb6:	e001      	b.n	1bbc <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    1bb8:	3401      	adds	r4, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    1bba:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    1bbc:	7808      	ldrb	r0, [r1, #0]
    1bbe:	b180      	cbz	r0, 1be2 <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    1bc0:	784f      	ldrb	r7, [r1, #1]
    1bc2:	42af      	cmp	r7, r5
    1bc4:	d1f9      	bne.n	1bba <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    1bc6:	42b4      	cmp	r4, r6
    1bc8:	d1f6      	bne.n	1bb8 <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    1bca:	2d02      	cmp	r5, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    1bcc:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    1bce:	d106      	bne.n	1bde <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    1bd0:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    1bd2:	788b      	ldrb	r3, [r1, #2]
    1bd4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    1bd8:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    1bda:	2001      	movs	r0, #1
    1bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    1bde:	780b      	ldrb	r3, [r1, #0]
    1be0:	e7fa      	b.n	1bd8 <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    1be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be4:	100005d0 	.word	0x100005d0
    1be8:	10000458 	.word	0x10000458

00001bec <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    1bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1bf0:	4e4b      	ldr	r6, [pc, #300]	; (1d20 <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    1bf2:	4604      	mov	r4, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1bf4:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    1bf6:	460d      	mov	r5, r1
    1bf8:	4617      	mov	r7, r2
    1bfa:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1bfc:	b943      	cbnz	r3, 1c10 <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    1bfe:	7826      	ldrb	r6, [r4, #0]
    1c00:	f006 061f 	and.w	r6, r6, #31
    1c04:	2e01      	cmp	r6, #1
    1c06:	d053      	beq.n	1cb0 <USBHandleStandardRequest+0xc4>
    1c08:	d306      	bcc.n	1c18 <USBHandleStandardRequest+0x2c>
    1c0a:	2e02      	cmp	r6, #2
    1c0c:	d062      	beq.n	1cd4 <USBHandleStandardRequest+0xe8>
    1c0e:	e081      	b.n	1d14 <USBHandleStandardRequest+0x128>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1c10:	4798      	blx	r3
    1c12:	2800      	cmp	r0, #0
    1c14:	d0f3      	beq.n	1bfe <USBHandleStandardRequest+0x12>
    1c16:	e080      	b.n	1d1a <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    1c18:	7862      	ldrb	r2, [r4, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    1c1a:	683b      	ldr	r3, [r7, #0]

	switch (pSetup->bRequest) {
    1c1c:	2a09      	cmp	r2, #9
    1c1e:	d879      	bhi.n	1d14 <USBHandleStandardRequest+0x128>
    1c20:	e8df f002 	tbb	[pc, r2]
    1c24:	78787805 	.word	0x78787805
    1c28:	780d0978 	.word	0x780d0978
    1c2c:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    1c2e:	2200      	movs	r2, #0
    1c30:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    1c32:	705a      	strb	r2, [r3, #1]
    1c34:	e045      	b.n	1cc2 <USBHandleStandardRequest+0xd6>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    1c36:	78a0      	ldrb	r0, [r4, #2]
    1c38:	f7ff fe12 	bl	1860 <USBHwSetAddress>
    1c3c:	e06d      	b.n	1d1a <USBHandleStandardRequest+0x12e>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    1c3e:	8860      	ldrh	r0, [r4, #2]
    1c40:	88a1      	ldrh	r1, [r4, #4]
    1c42:	462a      	mov	r2, r5
    1c44:	463b      	mov	r3, r7
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    1c46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    1c4a:	f7ff bfa3 	b.w	1b94 <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    1c4e:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    1c52:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    1c54:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    1c56:	6028      	str	r0, [r5, #0]
    1c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    1c5c:	78a6      	ldrb	r6, [r4, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    1c5e:	b90e      	cbnz	r6, 1c64 <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    1c60:	4630      	mov	r0, r6
    1c62:	e01f      	b.n	1ca4 <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    1c64:	27ff      	movs	r7, #255	; 0xff
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    1c66:	f8d8 5004 	ldr.w	r5, [r8, #4]
		bCurConfig = 0xFF;
    1c6a:	46b9      	mov	r9, r7
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    1c6c:	782b      	ldrb	r3, [r5, #0]
    1c6e:	b1c3      	cbz	r3, 1ca2 <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    1c70:	786b      	ldrb	r3, [r5, #1]
    1c72:	2b04      	cmp	r3, #4
    1c74:	d006      	beq.n	1c84 <USBHandleStandardRequest+0x98>
    1c76:	2b05      	cmp	r3, #5
    1c78:	d006      	beq.n	1c88 <USBHandleStandardRequest+0x9c>
    1c7a:	2b02      	cmp	r3, #2
    1c7c:	d10e      	bne.n	1c9c <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    1c7e:	f895 9005 	ldrb.w	r9, [r5, #5]
    1c82:	e00b      	b.n	1c9c <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    1c84:	78ef      	ldrb	r7, [r5, #3]
    1c86:	e009      	b.n	1c9c <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    1c88:	45b1      	cmp	r9, r6
    1c8a:	d107      	bne.n	1c9c <USBHandleStandardRequest+0xb0>
    1c8c:	b937      	cbnz	r7, 1c9c <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    1c8e:	7969      	ldrb	r1, [r5, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    1c90:	792b      	ldrb	r3, [r5, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    1c92:	78a8      	ldrb	r0, [r5, #2]
    1c94:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    1c98:	f7ff fda0 	bl	17dc <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    1c9c:	782b      	ldrb	r3, [r5, #0]
    1c9e:	441d      	add	r5, r3
    1ca0:	e7e4      	b.n	1c6c <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    1ca2:	2001      	movs	r0, #1
    1ca4:	f7ff fe78 	bl	1998 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    1ca8:	8863      	ldrh	r3, [r4, #2]
    1caa:	f888 300c 	strb.w	r3, [r8, #12]
    1cae:	e034      	b.n	1d1a <USBHandleStandardRequest+0x12e>
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    1cb0:	7863      	ldrb	r3, [r4, #1]
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    1cb2:	683a      	ldr	r2, [r7, #0]
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    1cb4:	2b0a      	cmp	r3, #10
    1cb6:	d006      	beq.n	1cc6 <USBHandleStandardRequest+0xda>
    1cb8:	2b0b      	cmp	r3, #11
    1cba:	d007      	beq.n	1ccc <USBHandleStandardRequest+0xe0>
    1cbc:	bb53      	cbnz	r3, 1d14 <USBHandleStandardRequest+0x128>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    1cbe:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    1cc0:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    1cc2:	2302      	movs	r3, #2
    1cc4:	e004      	b.n	1cd0 <USBHandleStandardRequest+0xe4>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    1cc6:	2300      	movs	r3, #0
    1cc8:	7013      	strb	r3, [r2, #0]
    1cca:	e016      	b.n	1cfa <USBHandleStandardRequest+0x10e>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    1ccc:	8863      	ldrh	r3, [r4, #2]
    1cce:	bb0b      	cbnz	r3, 1d14 <USBHandleStandardRequest+0x128>
			return FALSE;
		}
		*piLen = 0;
    1cd0:	602b      	str	r3, [r5, #0]
    1cd2:	e022      	b.n	1d1a <USBHandleStandardRequest+0x12e>
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
    1cd4:	f8d7 8000 	ldr.w	r8, [r7]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    1cd8:	7867      	ldrb	r7, [r4, #1]
    1cda:	2f01      	cmp	r7, #1
    1cdc:	d00f      	beq.n	1cfe <USBHandleStandardRequest+0x112>
    1cde:	d302      	bcc.n	1ce6 <USBHandleStandardRequest+0xfa>
    1ce0:	2f03      	cmp	r7, #3
    1ce2:	d010      	beq.n	1d06 <USBHandleStandardRequest+0x11a>
    1ce4:	e016      	b.n	1d14 <USBHandleStandardRequest+0x128>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    1ce6:	7920      	ldrb	r0, [r4, #4]
    1ce8:	f7ff fdca 	bl	1880 <USBHwEPGetStatus>
		pbData[1] = 0;
    1cec:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    1cee:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1cf2:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    1cf6:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    1cfa:	602e      	str	r6, [r5, #0]
    1cfc:	e00d      	b.n	1d1a <USBHandleStandardRequest+0x12e>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    1cfe:	8861      	ldrh	r1, [r4, #2]
    1d00:	b941      	cbnz	r1, 1d14 <USBHandleStandardRequest+0x128>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    1d02:	7920      	ldrb	r0, [r4, #4]
    1d04:	e003      	b.n	1d0e <USBHandleStandardRequest+0x122>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    1d06:	8863      	ldrh	r3, [r4, #2]
    1d08:	b923      	cbnz	r3, 1d14 <USBHandleStandardRequest+0x128>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    1d0a:	7920      	ldrb	r0, [r4, #4]
    1d0c:	2101      	movs	r1, #1
    1d0e:	f7ff fdd1 	bl	18b4 <USBHwEPStall>
    1d12:	e002      	b.n	1d1a <USBHandleStandardRequest+0x12e>
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
    1d14:	2000      	movs	r0, #0
    1d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
		return TRUE;
    1d1a:	2001      	movs	r0, #1
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    1d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d20:	100005d0 	.word	0x100005d0

00001d24 <memcpy>:
    1d24:	4684      	mov	ip, r0
    1d26:	ea41 0300 	orr.w	r3, r1, r0
    1d2a:	f013 0303 	ands.w	r3, r3, #3
    1d2e:	d149      	bne.n	1dc4 <memcpy+0xa0>
    1d30:	3a40      	subs	r2, #64	; 0x40
    1d32:	d323      	bcc.n	1d7c <memcpy+0x58>
    1d34:	680b      	ldr	r3, [r1, #0]
    1d36:	6003      	str	r3, [r0, #0]
    1d38:	684b      	ldr	r3, [r1, #4]
    1d3a:	6043      	str	r3, [r0, #4]
    1d3c:	688b      	ldr	r3, [r1, #8]
    1d3e:	6083      	str	r3, [r0, #8]
    1d40:	68cb      	ldr	r3, [r1, #12]
    1d42:	60c3      	str	r3, [r0, #12]
    1d44:	690b      	ldr	r3, [r1, #16]
    1d46:	6103      	str	r3, [r0, #16]
    1d48:	694b      	ldr	r3, [r1, #20]
    1d4a:	6143      	str	r3, [r0, #20]
    1d4c:	698b      	ldr	r3, [r1, #24]
    1d4e:	6183      	str	r3, [r0, #24]
    1d50:	69cb      	ldr	r3, [r1, #28]
    1d52:	61c3      	str	r3, [r0, #28]
    1d54:	6a0b      	ldr	r3, [r1, #32]
    1d56:	6203      	str	r3, [r0, #32]
    1d58:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    1d5a:	6243      	str	r3, [r0, #36]	; 0x24
    1d5c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1d5e:	6283      	str	r3, [r0, #40]	; 0x28
    1d60:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1d62:	62c3      	str	r3, [r0, #44]	; 0x2c
    1d64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1d66:	6303      	str	r3, [r0, #48]	; 0x30
    1d68:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    1d6a:	6343      	str	r3, [r0, #52]	; 0x34
    1d6c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    1d6e:	6383      	str	r3, [r0, #56]	; 0x38
    1d70:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1d72:	63c3      	str	r3, [r0, #60]	; 0x3c
    1d74:	3040      	adds	r0, #64	; 0x40
    1d76:	3140      	adds	r1, #64	; 0x40
    1d78:	3a40      	subs	r2, #64	; 0x40
    1d7a:	d2db      	bcs.n	1d34 <memcpy+0x10>
    1d7c:	3230      	adds	r2, #48	; 0x30
    1d7e:	d30b      	bcc.n	1d98 <memcpy+0x74>
    1d80:	680b      	ldr	r3, [r1, #0]
    1d82:	6003      	str	r3, [r0, #0]
    1d84:	684b      	ldr	r3, [r1, #4]
    1d86:	6043      	str	r3, [r0, #4]
    1d88:	688b      	ldr	r3, [r1, #8]
    1d8a:	6083      	str	r3, [r0, #8]
    1d8c:	68cb      	ldr	r3, [r1, #12]
    1d8e:	60c3      	str	r3, [r0, #12]
    1d90:	3010      	adds	r0, #16
    1d92:	3110      	adds	r1, #16
    1d94:	3a10      	subs	r2, #16
    1d96:	d2f3      	bcs.n	1d80 <memcpy+0x5c>
    1d98:	320c      	adds	r2, #12
    1d9a:	d305      	bcc.n	1da8 <memcpy+0x84>
    1d9c:	f851 3b04 	ldr.w	r3, [r1], #4
    1da0:	f840 3b04 	str.w	r3, [r0], #4
    1da4:	3a04      	subs	r2, #4
    1da6:	d2f9      	bcs.n	1d9c <memcpy+0x78>
    1da8:	3204      	adds	r2, #4
    1daa:	d008      	beq.n	1dbe <memcpy+0x9a>
    1dac:	07d2      	lsls	r2, r2, #31
    1dae:	bf1c      	itt	ne
    1db0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    1db4:	f800 3b01 	strbne.w	r3, [r0], #1
    1db8:	d301      	bcc.n	1dbe <memcpy+0x9a>
    1dba:	880b      	ldrh	r3, [r1, #0]
    1dbc:	8003      	strh	r3, [r0, #0]
    1dbe:	4660      	mov	r0, ip
    1dc0:	4770      	bx	lr
    1dc2:	bf00      	nop
    1dc4:	2a08      	cmp	r2, #8
    1dc6:	d313      	bcc.n	1df0 <memcpy+0xcc>
    1dc8:	078b      	lsls	r3, r1, #30
    1dca:	d0b1      	beq.n	1d30 <memcpy+0xc>
    1dcc:	f010 0303 	ands.w	r3, r0, #3
    1dd0:	d0ae      	beq.n	1d30 <memcpy+0xc>
    1dd2:	f1c3 0304 	rsb	r3, r3, #4
    1dd6:	1ad2      	subs	r2, r2, r3
    1dd8:	07db      	lsls	r3, r3, #31
    1dda:	bf1c      	itt	ne
    1ddc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    1de0:	f800 3b01 	strbne.w	r3, [r0], #1
    1de4:	d3a4      	bcc.n	1d30 <memcpy+0xc>
    1de6:	f831 3b02 	ldrh.w	r3, [r1], #2
    1dea:	f820 3b02 	strh.w	r3, [r0], #2
    1dee:	e79f      	b.n	1d30 <memcpy+0xc>
    1df0:	3a04      	subs	r2, #4
    1df2:	d3d9      	bcc.n	1da8 <memcpy+0x84>
    1df4:	3a01      	subs	r2, #1
    1df6:	f811 3b01 	ldrb.w	r3, [r1], #1
    1dfa:	f800 3b01 	strb.w	r3, [r0], #1
    1dfe:	d2f9      	bcs.n	1df4 <memcpy+0xd0>
    1e00:	780b      	ldrb	r3, [r1, #0]
    1e02:	7003      	strb	r3, [r0, #0]
    1e04:	784b      	ldrb	r3, [r1, #1]
    1e06:	7043      	strb	r3, [r0, #1]
    1e08:	788b      	ldrb	r3, [r1, #2]
    1e0a:	7083      	strb	r3, [r0, #2]
    1e0c:	4660      	mov	r0, ip
    1e0e:	4770      	bx	lr

00001e10 <strlen>:
    1e10:	f020 0103 	bic.w	r1, r0, #3
    1e14:	f010 0003 	ands.w	r0, r0, #3
    1e18:	f1c0 0000 	rsb	r0, r0, #0
    1e1c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e20:	f100 0c04 	add.w	ip, r0, #4
    1e24:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    1e28:	f06f 0200 	mvn.w	r2, #0
    1e2c:	bf1c      	itt	ne
    1e2e:	fa22 f20c 	lsrne.w	r2, r2, ip
    1e32:	4313      	orrne	r3, r2
    1e34:	f04f 0c01 	mov.w	ip, #1
    1e38:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    1e3c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    1e40:	eba3 020c 	sub.w	r2, r3, ip
    1e44:	ea22 0203 	bic.w	r2, r2, r3
    1e48:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    1e4c:	bf04      	itt	eq
    1e4e:	f851 3b04 	ldreq.w	r3, [r1], #4
    1e52:	3004      	addeq	r0, #4
    1e54:	d0f4      	beq.n	1e40 <strlen+0x30>
    1e56:	f013 0fff 	tst.w	r3, #255	; 0xff
    1e5a:	bf1f      	itttt	ne
    1e5c:	3001      	addne	r0, #1
    1e5e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    1e62:	3001      	addne	r0, #1
    1e64:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    1e68:	bf18      	it	ne
    1e6a:	3001      	addne	r0, #1
    1e6c:	4770      	bx	lr
    1e6e:	bf00      	nop
    1e70:	00000043 	.word	0x00000043

00001e74 <_global_impure_ptr>:
    1e74:	10000020                                 ...

00001e78 <abDescriptors>:
    1e78:	02000112 400000ff 0004ffff 02010100     .......@........
    1e88:	02090103 01010020 09328000 02000004     .... .....2.....
    1e98:	000000ff 02820507 07000040 40020505     ........@......@
    1ea8:	03040000 03440409 00740068 00700074     ......D.h.t.t.p.
    1eb8:	002f003a 0075002f 00650062 00740072     :././.u.b.e.r.t.
    1ec8:	006f006f 00680074 0073002e 0075006f     o.o.t.h...s.o.u.
    1ed8:	00630072 00660065 0072006f 00650067     r.c.e.f.o.r.g.e.
    1ee8:	006e002e 00740065 0330002f 00620075     ..n.e.t./.0.u.b.
    1ef8:	00720065 006f0074 0074006f 00200068     e.r.t.o.o.t.h. .
    1f08:	00730061 00650073 0062006d 0079006c     a.s.s.e.m.b.l.y.
    1f18:	0074005f 00730065 03120074 00300030     _.t.e.s.t...0.0.
    1f28:	00300030 00300030 00310030 585c4700     0.0.0.0.0.1..G\X
    1f38:	5e3473cc 98b1b88e 11bc68e6 1c3316d7     .s4^.....h....3.
    1f48:	ae2317cd 9a39662c 8cc5752f e74533c7     ..#.,f9./u...3E.
    1f58:	8e198beb 1dce8b66 cc316371 e23a79d1     ....f...qc1..y:.
    1f68:	a29963c6 313032f3 33302d37 0032522d     .c...2017-03-R2.

00001f78 <iap_entry>:
    1f78:	1fff1ff1                                ....

00001f7c <abExtendedOsFeatureDescriptor>:
    1f7c:	00000028 00040100 00000001 00000000     (...............
    1f8c:	49570100 4253554e 00000000 00000000     ..WINUSB........
    1f9c:	00000000 00000000                       ........

00001fa4 <_init>:
    1fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fa6:	bf00      	nop
    1fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1faa:	bc08      	pop	{r3}
    1fac:	469e      	mov	lr, r3
    1fae:	4770      	bx	lr

00001fb0 <__init_array_start>:
    1fb0:	000002dd 	.word	0x000002dd

00001fb4 <__frame_dummy_init_array_entry>:
    1fb4:	00000155                                U...

00001fb8 <_fini>:
    1fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fba:	bf00      	nop
    1fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fbe:	bc08      	pop	{r3}
    1fc0:	469e      	mov	lr, r3
    1fc2:	4770      	bx	lr

00001fc4 <__fini_array_start>:
    1fc4:	00000125 	.word	0x00000125

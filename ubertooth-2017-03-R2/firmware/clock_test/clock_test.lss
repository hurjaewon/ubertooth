
clock_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d8  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00010000  2**0
                  ALLOC
  2 .data         00000428  10000020  000046d8  00008020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000024  10000448  00004b00  00008448  2**2
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00008448  2**0
                  CONTENTS, READONLY
  5 .comment      0000001f  00000000  00000000  00008471  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002ba2  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d03  00000000  00000000  0000b032  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000b01  00000000  00000000  0000bd35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000228  00000000  00000000  0000c836  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001d0  00000000  00000000  0000ca5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000baa  00000000  00000000  0000cc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000bad  00000000  00000000  0000d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000450  00000000  00000000  0000e388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 31 43 00 00 85 43 00 00 85 43 00 00     .?..1C...C...C..
    4010:	85 43 00 00 85 43 00 00 85 43 00 00 00 00 00 00     .C...C...C......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 85 43 00 00     .............C..
    4030:	85 43 00 00 00 00 00 00 85 43 00 00 85 43 00 00     .C.......C...C..
    4040:	85 43 00 00 85 43 00 00 85 43 00 00 85 43 00 00     .C...C...C...C..
    4050:	85 43 00 00 85 43 00 00 85 43 00 00 85 43 00 00     .C...C...C...C..
    4060:	85 43 00 00 85 43 00 00 85 43 00 00 85 43 00 00     .C...C...C...C..
    4070:	85 43 00 00 85 43 00 00 85 43 00 00 85 43 00 00     .C...C...C...C..
    4080:	85 43 00 00 85 43 00 00 85 43 00 00 85 43 00 00     .C...C...C...C..
    4090:	85 43 00 00 85 43 00 00 85 43 00 00 85 43 00 00     .C...C...C...C..
    40a0:	85 43 00 00 85 43 00 00 85 43 00 00 85 43 00 00     .C...C...C...C..
    40b0:	85 43 00 00 85 43 00 00 85 43 00 00 85 43 00 00     .C...C...C...C..
    40c0:	85 43 00 00 85 43 00 00 85 43 00 00                 .C...C...C..

000040cc <deregister_tm_clones>:
    40cc:	b508      	push	{r3, lr}
    40ce:	f240 4048 	movw	r0, #1096	; 0x448
    40d2:	4b07      	ldr	r3, [pc, #28]	; (40f0 <deregister_tm_clones+0x24>)
    40d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    40d8:	1a1b      	subs	r3, r3, r0
    40da:	2b06      	cmp	r3, #6
    40dc:	d800      	bhi.n	40e0 <deregister_tm_clones+0x14>
    40de:	bd08      	pop	{r3, pc}
    40e0:	f240 0300 	movw	r3, #0
    40e4:	f2c0 0300 	movt	r3, #0
    40e8:	2b00      	cmp	r3, #0
    40ea:	d0f8      	beq.n	40de <deregister_tm_clones+0x12>
    40ec:	4798      	blx	r3
    40ee:	e7f6      	b.n	40de <deregister_tm_clones+0x12>
    40f0:	1000044b 	.word	0x1000044b

000040f4 <register_tm_clones>:
    40f4:	b508      	push	{r3, lr}
    40f6:	f240 4048 	movw	r0, #1096	; 0x448
    40fa:	f240 4348 	movw	r3, #1096	; 0x448
    40fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4102:	f2c1 0000 	movt	r0, #4096	; 0x1000
    4106:	1a1b      	subs	r3, r3, r0
    4108:	109b      	asrs	r3, r3, #2
    410a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    410e:	1059      	asrs	r1, r3, #1
    4110:	d100      	bne.n	4114 <register_tm_clones+0x20>
    4112:	bd08      	pop	{r3, pc}
    4114:	f240 0200 	movw	r2, #0
    4118:	f2c0 0200 	movt	r2, #0
    411c:	2a00      	cmp	r2, #0
    411e:	d0f8      	beq.n	4112 <register_tm_clones+0x1e>
    4120:	4790      	blx	r2
    4122:	e7f6      	b.n	4112 <register_tm_clones+0x1e>

00004124 <__do_global_dtors_aux>:
    4124:	b510      	push	{r4, lr}
    4126:	f240 4448 	movw	r4, #1096	; 0x448
    412a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    412e:	7823      	ldrb	r3, [r4, #0]
    4130:	b973      	cbnz	r3, 4150 <__do_global_dtors_aux+0x2c>
    4132:	f7ff ffcb 	bl	40cc <deregister_tm_clones>
    4136:	f240 0300 	movw	r3, #0
    413a:	f2c0 0300 	movt	r3, #0
    413e:	b12b      	cbz	r3, 414c <__do_global_dtors_aux+0x28>
    4140:	f244 60b4 	movw	r0, #18100	; 0x46b4
    4144:	f2c0 0000 	movt	r0, #0
    4148:	f3af 8000 	nop.w
    414c:	2301      	movs	r3, #1
    414e:	7023      	strb	r3, [r4, #0]
    4150:	bd10      	pop	{r4, pc}
    4152:	bf00      	nop

00004154 <frame_dummy>:
    4154:	b508      	push	{r3, lr}
    4156:	f240 0300 	movw	r3, #0
    415a:	f2c0 0300 	movt	r3, #0
    415e:	b14b      	cbz	r3, 4174 <frame_dummy+0x20>
    4160:	f244 60b4 	movw	r0, #18100	; 0x46b4
    4164:	f240 414c 	movw	r1, #1100	; 0x44c
    4168:	f2c0 0000 	movt	r0, #0
    416c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4170:	f3af 8000 	nop.w
    4174:	f240 4048 	movw	r0, #1096	; 0x448
    4178:	f2c1 0000 	movt	r0, #4096	; 0x1000
    417c:	6803      	ldr	r3, [r0, #0]
    417e:	b12b      	cbz	r3, 418c <frame_dummy+0x38>
    4180:	f240 0300 	movw	r3, #0
    4184:	f2c0 0300 	movt	r3, #0
    4188:	b103      	cbz	r3, 418c <frame_dummy+0x38>
    418a:	4798      	blx	r3
    418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4190:	e7b0      	b.n	40f4 <register_tm_clones>
    4192:	bf00      	nop

00004194 <atexit>:
    4194:	4601      	mov	r1, r0
    4196:	2000      	movs	r0, #0
    4198:	4602      	mov	r2, r0
    419a:	4603      	mov	r3, r0
    419c:	f000 b848 	b.w	4230 <__register_exitproc>

000041a0 <__libc_fini_array>:
    41a0:	b538      	push	{r3, r4, r5, lr}
    41a2:	f244 64d8 	movw	r4, #18136	; 0x46d8
    41a6:	f244 65d4 	movw	r5, #18132	; 0x46d4
    41aa:	f2c0 0500 	movt	r5, #0
    41ae:	f2c0 0400 	movt	r4, #0
    41b2:	1b64      	subs	r4, r4, r5
    41b4:	10a4      	asrs	r4, r4, #2
    41b6:	bf18      	it	ne
    41b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    41bc:	d005      	beq.n	41ca <__libc_fini_array+0x2a>
    41be:	3c01      	subs	r4, #1
    41c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    41c4:	4798      	blx	r3
    41c6:	2c00      	cmp	r4, #0
    41c8:	d1f9      	bne.n	41be <__libc_fini_array+0x1e>
    41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41ce:	f000 ba7b 	b.w	46c8 <_fini>
    41d2:	bf00      	nop

000041d4 <__libc_init_array>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	f244 66c0 	movw	r6, #18112	; 0x46c0
    41da:	f244 65c0 	movw	r5, #18112	; 0x46c0
    41de:	f2c0 0500 	movt	r5, #0
    41e2:	f2c0 0600 	movt	r6, #0
    41e6:	1b76      	subs	r6, r6, r5
    41e8:	10b6      	asrs	r6, r6, #2
    41ea:	bf1c      	itt	ne
    41ec:	3d04      	subne	r5, #4
    41ee:	2400      	movne	r4, #0
    41f0:	d005      	beq.n	41fe <__libc_init_array+0x2a>
    41f2:	3401      	adds	r4, #1
    41f4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    41f8:	4798      	blx	r3
    41fa:	42a6      	cmp	r6, r4
    41fc:	d1f9      	bne.n	41f2 <__libc_init_array+0x1e>
    41fe:	f244 66c8 	movw	r6, #18120	; 0x46c8
    4202:	f244 65c0 	movw	r5, #18112	; 0x46c0
    4206:	f2c0 0500 	movt	r5, #0
    420a:	f2c0 0600 	movt	r6, #0
    420e:	1b76      	subs	r6, r6, r5
    4210:	f000 fa50 	bl	46b4 <_init>
    4214:	10b6      	asrs	r6, r6, #2
    4216:	bf1c      	itt	ne
    4218:	3d04      	subne	r5, #4
    421a:	2400      	movne	r4, #0
    421c:	d006      	beq.n	422c <__libc_init_array+0x58>
    421e:	3401      	adds	r4, #1
    4220:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4224:	4798      	blx	r3
    4226:	42a6      	cmp	r6, r4
    4228:	d1f9      	bne.n	421e <__libc_init_array+0x4a>
    422a:	bd70      	pop	{r4, r5, r6, pc}
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	bf00      	nop

00004230 <__register_exitproc>:
    4230:	b5f0      	push	{r4, r5, r6, r7, lr}
    4232:	f244 64b0 	movw	r4, #18096	; 0x46b0
    4236:	f2c0 0400 	movt	r4, #0
    423a:	6826      	ldr	r6, [r4, #0]
    423c:	b085      	sub	sp, #20
    423e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    4242:	4607      	mov	r7, r0
    4244:	2c00      	cmp	r4, #0
    4246:	d043      	beq.n	42d0 <__register_exitproc+0xa0>
    4248:	6865      	ldr	r5, [r4, #4]
    424a:	2d1f      	cmp	r5, #31
    424c:	dd21      	ble.n	4292 <__register_exitproc+0x62>
    424e:	f240 0400 	movw	r4, #0
    4252:	f2c0 0400 	movt	r4, #0
    4256:	b91c      	cbnz	r4, 4260 <__register_exitproc+0x30>
    4258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    425c:	b005      	add	sp, #20
    425e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4260:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4264:	9103      	str	r1, [sp, #12]
    4266:	9202      	str	r2, [sp, #8]
    4268:	9301      	str	r3, [sp, #4]
    426a:	f3af 8000 	nop.w
    426e:	9903      	ldr	r1, [sp, #12]
    4270:	4604      	mov	r4, r0
    4272:	9a02      	ldr	r2, [sp, #8]
    4274:	9b01      	ldr	r3, [sp, #4]
    4276:	2800      	cmp	r0, #0
    4278:	d0ee      	beq.n	4258 <__register_exitproc+0x28>
    427a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    427e:	2000      	movs	r0, #0
    4280:	6025      	str	r5, [r4, #0]
    4282:	6060      	str	r0, [r4, #4]
    4284:	4605      	mov	r5, r0
    4286:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    428a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    428e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    4292:	b93f      	cbnz	r7, 42a4 <__register_exitproc+0x74>
    4294:	1c6b      	adds	r3, r5, #1
    4296:	2000      	movs	r0, #0
    4298:	3502      	adds	r5, #2
    429a:	6063      	str	r3, [r4, #4]
    429c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    42a0:	b005      	add	sp, #20
    42a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42a4:	2601      	movs	r6, #1
    42a6:	40ae      	lsls	r6, r5
    42a8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    42ac:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    42b0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    42b4:	2f02      	cmp	r7, #2
    42b6:	ea42 0206 	orr.w	r2, r2, r6
    42ba:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    42be:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    42c2:	bf02      	ittt	eq
    42c4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
    42c8:	431e      	orreq	r6, r3
    42ca:	f8c4 618c 	streq.w	r6, [r4, #396]	; 0x18c
    42ce:	e7e1      	b.n	4294 <__register_exitproc+0x64>
    42d0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    42d4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    42d8:	e7b6      	b.n	4248 <__register_exitproc+0x18>
    42da:	bf00      	nop

000042dc <register_fini>:
    42dc:	f240 0300 	movw	r3, #0
    42e0:	f2c0 0300 	movt	r3, #0
    42e4:	b12b      	cbz	r3, 42f2 <register_fini+0x16>
    42e6:	f244 10a1 	movw	r0, #16801	; 0x41a1
    42ea:	f2c0 0000 	movt	r0, #0
    42ee:	f7ff bf51 	b.w	4194 <atexit>
    42f2:	4770      	bx	lr

000042f4 <main>:
 */

#include "ubertooth.h"

int main()
{
    42f4:	b508      	push	{r3, lr}
	gpio_init();
	TXLED_SET;
    42f6:	4c0c      	ldr	r4, [pc, #48]	; (4328 <main+0x34>)

#include "ubertooth.h"

int main()
{
	gpio_init();
    42f8:	f000 f88c 	bl	4414 <gpio_init>
	TXLED_SET;
    42fc:	f44f 7380 	mov.w	r3, #256	; 0x100
    4300:	6023      	str	r3, [r4, #0]

	cc2400_init();
    4302:	f000 f8e3 	bl	44cc <cc2400_init>
	RXLED_SET;
    4306:	2310      	movs	r3, #16
    4308:	6023      	str	r3, [r4, #0]

	clock_start();
    430a:	f000 f929 	bl	4560 <clock_start>
	while (1) {
		USRLED_SET;
    430e:	4b06      	ldr	r3, [pc, #24]	; (4328 <main+0x34>)
    4310:	2402      	movs	r4, #2
    4312:	601c      	str	r4, [r3, #0]
		wait(2);
    4314:	4620      	mov	r0, r4
    4316:	f000 f84d 	bl	43b4 <wait>
		USRLED_CLR;
    431a:	4b04      	ldr	r3, [pc, #16]	; (432c <main+0x38>)
		wait(2);
    431c:	4620      	mov	r0, r4

	clock_start();
	while (1) {
		USRLED_SET;
		wait(2);
		USRLED_CLR;
    431e:	601c      	str	r4, [r3, #0]
		wait(2);
    4320:	f000 f848 	bl	43b4 <wait>
    4324:	e7f3      	b.n	430e <main+0x1a>
    4326:	bf00      	nop
    4328:	2009c038 	.word	0x2009c038
    432c:	2009c03c 	.word	0x2009c03c

00004330 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    4330:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    4332:	2300      	movs	r3, #0
    4334:	4a0c      	ldr	r2, [pc, #48]	; (4368 <Reset_Handler+0x38>)
    4336:	490d      	ldr	r1, [pc, #52]	; (436c <Reset_Handler+0x3c>)
    4338:	1898      	adds	r0, r3, r2
    433a:	4288      	cmp	r0, r1
    433c:	d204      	bcs.n	4348 <Reset_Handler+0x18>
	{
		*dest++ = *src++;
    433e:	490c      	ldr	r1, [pc, #48]	; (4370 <Reset_Handler+0x40>)
    4340:	5859      	ldr	r1, [r3, r1]
    4342:	5099      	str	r1, [r3, r2]
    4344:	3304      	adds	r3, #4
    4346:	e7f5      	b.n	4334 <Reset_Handler+0x4>
{
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    4348:	4b0a      	ldr	r3, [pc, #40]	; (4374 <Reset_Handler+0x44>)
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    434a:	4a0b      	ldr	r2, [pc, #44]	; (4378 <Reset_Handler+0x48>)
    434c:	4293      	cmp	r3, r2
    434e:	d203      	bcs.n	4358 <Reset_Handler+0x28>
	{
		*src++ = 0;
    4350:	2200      	movs	r2, #0
    4352:	f843 2b04 	str.w	r2, [r3], #4
    4356:	e7f8      	b.n	434a <Reset_Handler+0x1a>
	}

	__libc_init_array();
    4358:	f7ff ff3c 	bl	41d4 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    435c:	4b07      	ldr	r3, [pc, #28]	; (437c <Reset_Handler+0x4c>)
    435e:	4a08      	ldr	r2, [pc, #32]	; (4380 <Reset_Handler+0x50>)
    4360:	601a      	str	r2, [r3, #0]

	main();
    4362:	f7ff ffc7 	bl	42f4 <main>
    4366:	e7fe      	b.n	4366 <Reset_Handler+0x36>
    4368:	10000020 	.word	0x10000020
    436c:	10000448 	.word	0x10000448
    4370:	000046d8 	.word	0x000046d8
    4374:	10000448 	.word	0x10000448
    4378:	1000046c 	.word	0x1000046c
    437c:	e000ed08 	.word	0xe000ed08
    4380:	00004000 	.word	0x00004000

00004384 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    4384:	e7fe      	b.n	4384 <ADC_IRQHandler>
    4386:	0000      	movs	r0, r0

00004388 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    4388:	0883      	lsrs	r3, r0, #2
    438a:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    438e:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    4392:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    4396:	eb03 2390 	add.w	r3, r3, r0, lsr #10
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    439a:	4a05      	ldr	r2, [pc, #20]	; (43b0 <wait_us+0x28>)
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    439c:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    43a0:	6050      	str	r0, [r2, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    43a2:	6853      	ldr	r3, [r2, #4]
    43a4:	3b01      	subs	r3, #1
    43a6:	6053      	str	r3, [r2, #4]
    43a8:	2b00      	cmp	r3, #0
    43aa:	d1fa      	bne.n	43a2 <wait_us+0x1a>
}
    43ac:	4770      	bx	lr
    43ae:	bf00      	nop
    43b0:	10000464 	.word	0x10000464

000043b4 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    43b4:	4b01      	ldr	r3, [pc, #4]	; (43bc <wait+0x8>)
    43b6:	4358      	muls	r0, r3
    43b8:	f7ff bfe6 	b.w	4388 <wait_us>
    43bc:	000f4240 	.word	0x000f4240

000043c0 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    43c0:	4a10      	ldr	r2, [pc, #64]	; (4404 <all_pins_off+0x44>)
    43c2:	2300      	movs	r3, #0
    43c4:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    43c6:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    43c8:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    43ca:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    43cc:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    43ce:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    43d0:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    43d2:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    43d4:	4a0c      	ldr	r2, [pc, #48]	; (4408 <all_pins_off+0x48>)
    43d6:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    43d8:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    43da:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    43dc:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    43de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    43e2:	4a0a      	ldr	r2, [pc, #40]	; (440c <all_pins_off+0x4c>)
    43e4:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    43e6:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    43e8:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    43ea:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    43ec:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    43ee:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    43f0:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    43f2:	4a07      	ldr	r2, [pc, #28]	; (4410 <all_pins_off+0x50>)
    43f4:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    43f6:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    43f8:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    43fa:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    43fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    4400:	4770      	bx	lr
    4402:	bf00      	nop
    4404:	4002c000 	.word	0x4002c000
    4408:	2009c000 	.word	0x2009c000
    440c:	4002c040 	.word	0x4002c040
    4410:	2009c014 	.word	0x2009c014

00004414 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    4414:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    4416:	f7ff ffd3 	bl	43c0 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    441a:	4a0a      	ldr	r2, [pc, #40]	; (4444 <gpio_init+0x30>)
    441c:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    441e:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    4422:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    4424:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    4426:	f240 11b1 	movw	r1, #433	; 0x1b1
    442a:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    442c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    4430:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    4432:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    4436:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    4438:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    443a:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    443c:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    443e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    4442:	bd08      	pop	{r3, pc}
    4444:	2009c000 	.word	0x2009c000

00004448 <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    4448:	4b09      	ldr	r3, [pc, #36]	; (4470 <atest_init+0x28>)
    444a:	681a      	ldr	r2, [r3, #0]
    444c:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
    4450:	601a      	str	r2, [r3, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    4452:	4b08      	ldr	r3, [pc, #32]	; (4474 <atest_init+0x2c>)
    4454:	681a      	ldr	r2, [r3, #0]
    4456:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
    445a:	601a      	str	r2, [r3, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    445c:	4b06      	ldr	r3, [pc, #24]	; (4478 <atest_init+0x30>)
    445e:	681a      	ldr	r2, [r3, #0]
    4460:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    4464:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    4466:	681a      	ldr	r2, [r3, #0]
    4468:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    446c:	601a      	str	r2, [r3, #0]
    446e:	4770      	bx	lr
    4470:	4002c004 	.word	0x4002c004
    4474:	2009c000 	.word	0x2009c000
    4478:	4002c044 	.word	0x4002c044

0000447c <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    447c:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    447e:	2401      	movs	r4, #1
    4480:	1e43      	subs	r3, r0, #1
    4482:	409c      	lsls	r4, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    4484:	2220      	movs	r2, #32

	while (len--) {
    4486:	3801      	subs	r0, #1

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    4488:	4b0d      	ldr	r3, [pc, #52]	; (44c0 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    448a:	b2c0      	uxtb	r0, r0
    448c:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    448e:	601a      	str	r2, [r3, #0]
    4490:	4b0c      	ldr	r3, [pc, #48]	; (44c4 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    4492:	d011      	beq.n	44b8 <cc2400_spi+0x3c>
		if (data & msb)
    4494:	4221      	tst	r1, r4
			MOSI_SET;
		else
			MOSI_CLR;
    4496:	bf08      	it	eq
    4498:	4d09      	ldreq	r5, [pc, #36]	; (44c0 <cc2400_spi+0x44>)
    449a:	f04f 0201 	mov.w	r2, #1
	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
		if (data & msb)
			MOSI_SET;
    449e:	bf14      	ite	ne
    44a0:	601a      	strne	r2, [r3, #0]
		else
			MOSI_CLR;
    44a2:	602a      	streq	r2, [r5, #0]
		data <<= 1;

		SCLK_SET;
    44a4:	2210      	movs	r2, #16
    44a6:	601a      	str	r2, [r3, #0]
		if (MISO)
    44a8:	4b07      	ldr	r3, [pc, #28]	; (44c8 <cc2400_spi+0x4c>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    44aa:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    44ac:	681b      	ldr	r3, [r3, #0]
    44ae:	079b      	lsls	r3, r3, #30
			data |= 1;
    44b0:	bf48      	it	mi
    44b2:	f041 0101 	orrmi.w	r1, r1, #1
    44b6:	e7e6      	b.n	4486 <cc2400_spi+0xa>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    44b8:	2220      	movs	r2, #32
    44ba:	601a      	str	r2, [r3, #0]

	return data;
}
    44bc:	4608      	mov	r0, r1
    44be:	bd30      	pop	{r4, r5, pc}
    44c0:	2009c05c 	.word	0x2009c05c
    44c4:	2009c058 	.word	0x2009c058
    44c8:	2009c054 	.word	0x2009c054

000044cc <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    44cc:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    44ce:	4c0a      	ldr	r4, [pc, #40]	; (44f8 <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    44d0:	f7ff ffba 	bl	4448 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    44d4:	f44f 7300 	mov.w	r3, #512	; 0x200
    44d8:	6023      	str	r3, [r4, #0]
	wait_us(50);
    44da:	2032      	movs	r0, #50	; 0x32
    44dc:	f7ff ff54 	bl	4388 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    44e0:	4b06      	ldr	r3, [pc, #24]	; (44fc <cc2400_init+0x30>)
    44e2:	2220      	movs	r2, #32
    44e4:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    44e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    44ea:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    44ec:	2018      	movs	r0, #24
    44ee:	4904      	ldr	r1, [pc, #16]	; (4500 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    44f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    44f4:	f7ff bfc2 	b.w	447c <cc2400_spi>
    44f8:	2009c038 	.word	0x2009c038
    44fc:	2009c058 	.word	0x2009c058
    4500:	000d7fff 	.word	0x000d7fff

00004504 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    4504:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    4506:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    450a:	0409      	lsls	r1, r1, #16
    450c:	2018      	movs	r0, #24
    450e:	f7ff ffb5 	bl	447c <cc2400_spi>
	return in & 0xFFFF;
}
    4512:	b280      	uxth	r0, r0
    4514:	bd08      	pop	{r3, pc}

00004516 <cc2400_status>:
	CSN_SET;
}

/* get the status */
u8 cc2400_status()
{
    4516:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    4518:	2100      	movs	r1, #0
    451a:	2008      	movs	r0, #8
    451c:	f7ff ffae 	bl	447c <cc2400_spi>
}
    4520:	b2c0      	uxtb	r0, r0
    4522:	bd08      	pop	{r3, pc}

00004524 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    4524:	b508      	push	{r3, lr}
    4526:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    4528:	2008      	movs	r0, #8
    452a:	f7ff ffa7 	bl	447c <cc2400_spi>
}
    452e:	b2c0      	uxtb	r0, r0
    4530:	bd08      	pop	{r3, pc}

00004532 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    4532:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    4534:	2018      	movs	r0, #24
    4536:	2100      	movs	r1, #0
    4538:	f7ff ffa0 	bl	447c <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    453c:	2000      	movs	r0, #0
    453e:	f7ff ffe1 	bl	4504 <cc2400_get>
    4542:	2800      	cmp	r0, #0
    4544:	d1fa      	bne.n	453c <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    4546:	2018      	movs	r0, #24
    4548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    454c:	f7ff ff96 	bl	447c <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    4550:	2000      	movs	r0, #0
    4552:	f7ff ffd7 	bl	4504 <cc2400_get>
    4556:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    455a:	d1f9      	bne.n	4550 <cc2400_reset+0x1e>
}
    455c:	bd08      	pop	{r3, pc}
    455e:	0000      	movs	r0, r0

00004560 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    4560:	b510      	push	{r4, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    4562:	4b46      	ldr	r3, [pc, #280]	; (467c <clock_start+0x11c>)
    4564:	f244 023a 	movw	r2, #16442	; 0x403a
    4568:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    456a:	2200      	movs	r2, #0
    456c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    4570:	3380      	adds	r3, #128	; 0x80
    4572:	681a      	ldr	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    4574:	21aa      	movs	r1, #170	; 0xaa

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    4576:	f022 0202 	bic.w	r2, r2, #2
    457a:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    457c:	4a40      	ldr	r2, [pc, #256]	; (4680 <clock_start+0x120>)
    457e:	6011      	str	r1, [r2, #0]
    4580:	2155      	movs	r1, #85	; 0x55
    4582:	6011      	str	r1, [r2, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    4584:	4a3f      	ldr	r2, [pc, #252]	; (4684 <clock_start+0x124>)
    4586:	6812      	ldr	r2, [r2, #0]
    4588:	0194      	lsls	r4, r2, #6
    458a:	d4fb      	bmi.n	4584 <clock_start+0x24>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    458c:	681a      	ldr	r2, [r3, #0]
    458e:	f022 0201 	bic.w	r2, r2, #1
    4592:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    4594:	4b3a      	ldr	r3, [pc, #232]	; (4680 <clock_start+0x120>)
    4596:	22aa      	movs	r2, #170	; 0xaa
    4598:	601a      	str	r2, [r3, #0]
    459a:	2255      	movs	r2, #85	; 0x55
    459c:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    459e:	4b39      	ldr	r3, [pc, #228]	; (4684 <clock_start+0x124>)
    45a0:	681b      	ldr	r3, [r3, #0]
    45a2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    45a6:	d1fa      	bne.n	459e <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    45a8:	4a37      	ldr	r2, [pc, #220]	; (4688 <clock_start+0x128>)
    45aa:	6013      	str	r3, [r2, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    45ac:	f7ff ffc1 	bl	4532 <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    45b0:	2018      	movs	r0, #24
    45b2:	4936      	ldr	r1, [pc, #216]	; (468c <clock_start+0x12c>)
    45b4:	f7ff ff62 	bl	447c <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    45b8:	2060      	movs	r0, #96	; 0x60
    45ba:	f7ff ffb3 	bl	4524 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    45be:	f7ff ffaa 	bl	4516 <cc2400_status>
    45c2:	0640      	lsls	r0, r0, #25
    45c4:	d5fb      	bpl.n	45be <clock_start+0x5e>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    45c6:	4b32      	ldr	r3, [pc, #200]	; (4690 <clock_start+0x130>)
    45c8:	2220      	movs	r2, #32
    45ca:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    45cc:	681a      	ldr	r2, [r3, #0]
    45ce:	0651      	lsls	r1, r2, #25
    45d0:	d5fc      	bpl.n	45cc <clock_start+0x6c>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    45d2:	4b30      	ldr	r3, [pc, #192]	; (4694 <clock_start+0x134>)
    45d4:	2208      	movs	r2, #8
    45d6:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    45d8:	2200      	movs	r2, #0
    45da:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    45dc:	2201      	movs	r2, #1
    45de:	f843 2c9c 	str.w	r2, [r3, #-156]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    45e2:	4a2d      	ldr	r2, [pc, #180]	; (4698 <clock_start+0x138>)
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
#endif
	PCLKSEL1  = 0;

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    45e4:	3b9c      	subs	r3, #156	; 0x9c

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    45e6:	f843 2c88 	str.w	r2, [r3, #-136]
	PLL0FEED_SEQUENCE;
    45ea:	21aa      	movs	r1, #170	; 0xaa
    45ec:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    45ee:	482b      	ldr	r0, [pc, #172]	; (469c <clock_start+0x13c>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    45f0:	f843 1c80 	str.w	r1, [r3, #-128]
    45f4:	f843 2c80 	str.w	r2, [r3, #-128]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    45f8:	6804      	ldr	r4, [r0, #0]
    45fa:	f044 0401 	orr.w	r4, r4, #1
    45fe:	6004      	str	r4, [r0, #0]
	PLL0FEED_SEQUENCE;
    4600:	f843 1c80 	str.w	r1, [r3, #-128]
    4604:	f843 2c80 	str.w	r2, [r3, #-128]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    4608:	4b1e      	ldr	r3, [pc, #120]	; (4684 <clock_start+0x124>)
    460a:	681b      	ldr	r3, [r3, #0]
    460c:	01da      	lsls	r2, r3, #7
    460e:	d5fb      	bpl.n	4608 <clock_start+0xa8>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    4610:	4b1d      	ldr	r3, [pc, #116]	; (4688 <clock_start+0x128>)
    4612:	2203      	movs	r2, #3
    4614:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    4616:	f853 2c84 	ldr.w	r2, [r3, #-132]
    461a:	f042 0202 	orr.w	r2, r2, #2
    461e:	f843 2c84 	str.w	r2, [r3, #-132]
	PLL0FEED_SEQUENCE;
    4622:	22aa      	movs	r2, #170	; 0xaa
    4624:	f843 2c78 	str.w	r2, [r3, #-120]
    4628:	2255      	movs	r2, #85	; 0x55
    462a:	f843 2c78 	str.w	r2, [r3, #-120]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    462e:	4b15      	ldr	r3, [pc, #84]	; (4684 <clock_start+0x124>)
    4630:	681b      	ldr	r3, [r3, #0]
    4632:	019b      	lsls	r3, r3, #6
    4634:	d5fb      	bpl.n	462e <clock_start+0xce>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    4636:	4b1a      	ldr	r3, [pc, #104]	; (46a0 <clock_start+0x140>)
    4638:	2222      	movs	r2, #34	; 0x22
    463a:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    463c:	21aa      	movs	r1, #170	; 0xaa
    463e:	2255      	movs	r2, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    4640:	4818      	ldr	r0, [pc, #96]	; (46a4 <clock_start+0x144>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    4642:	6099      	str	r1, [r3, #8]
    4644:	609a      	str	r2, [r3, #8]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    4646:	6804      	ldr	r4, [r0, #0]
    4648:	f044 0401 	orr.w	r4, r4, #1
    464c:	6004      	str	r4, [r0, #0]
	PLL1FEED_SEQUENCE;
    464e:	6099      	str	r1, [r3, #8]
    4650:	609a      	str	r2, [r3, #8]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    4652:	4b15      	ldr	r3, [pc, #84]	; (46a8 <clock_start+0x148>)
    4654:	681a      	ldr	r2, [r3, #0]
    4656:	05d4      	lsls	r4, r2, #23
    4658:	d5fb      	bpl.n	4652 <clock_start+0xf2>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    465a:	681a      	ldr	r2, [r3, #0]
    465c:	0550      	lsls	r0, r2, #21
    465e:	d5fc      	bpl.n	465a <clock_start+0xfa>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    4660:	4b10      	ldr	r3, [pc, #64]	; (46a4 <clock_start+0x144>)
    4662:	681a      	ldr	r2, [r3, #0]
    4664:	f042 0202 	orr.w	r2, r2, #2
    4668:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    466a:	22aa      	movs	r2, #170	; 0xaa
    466c:	60da      	str	r2, [r3, #12]
    466e:	2255      	movs	r2, #85	; 0x55
    4670:	60da      	str	r2, [r3, #12]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    4672:	4b0d      	ldr	r3, [pc, #52]	; (46a8 <clock_start+0x148>)
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	0599      	lsls	r1, r3, #22
    4678:	d5fb      	bpl.n	4672 <clock_start+0x112>
}
    467a:	bd10      	pop	{r4, pc}
    467c:	400fc000 	.word	0x400fc000
    4680:	400fc08c 	.word	0x400fc08c
    4684:	400fc088 	.word	0x400fc088
    4688:	400fc104 	.word	0x400fc104
    468c:	00081570 	.word	0x00081570
    4690:	400fc1a0 	.word	0x400fc1a0
    4694:	400fc1a8 	.word	0x400fc1a8
    4698:	00010018 	.word	0x00010018
    469c:	400fc080 	.word	0x400fc080
    46a0:	400fc0a4 	.word	0x400fc0a4
    46a4:	400fc0a0 	.word	0x400fc0a0
    46a8:	400fc0a8 	.word	0x400fc0a8
    46ac:	00000043 	.word	0x00000043

000046b0 <_global_impure_ptr>:
    46b0:	10000020                                 ...

000046b4 <_init>:
    46b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46b6:	bf00      	nop
    46b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46ba:	bc08      	pop	{r3}
    46bc:	469e      	mov	lr, r3
    46be:	4770      	bx	lr

000046c0 <__init_array_start>:
    46c0:	000042dd 	.word	0x000042dd

000046c4 <__frame_dummy_init_array_entry>:
    46c4:	00004155                                UA..

000046c8 <_fini>:
    46c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ca:	bf00      	nop
    46cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46ce:	bc08      	pop	{r3}
    46d0:	469e      	mov	lr, r3
    46d2:	4770      	bx	lr

000046d4 <__fini_array_start>:
    46d4:	00004125 	.word	0x00004125
